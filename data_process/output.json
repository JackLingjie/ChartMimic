[
    {
        "category": "Multidiff",
        "index": 0,
        "revised_text": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data preparation\ndecades = np.array([1960, 1970, 1980, 1990, 2000, 2010, 2020])\nsolar_flares = np.array([120, 150, 180, 210, 260, 230, 270])\nsunspots = np.array([90, 110, 160, 190, 230, 200, 240])  # Hypothetical sunspot numbers\n\n# Create subplots\nfig, axs = plt.subplots(1, 2, figsize=(14, 7))\n\n# Plot the line chart for solar flares\naxs[0].plot(decades, solar_flares, color='orange', marker='o', linestyle='-', linewidth=2, markersize=8, label='Solar Flares Detected')\naxs[0].set_title('Solar Flare Detection over Decades\\nMonitoring Frequency for Space Weather Analysis', fontsize=14, fontweight='bold', pad=15)\naxs[0].set_xlabel('Decade', fontsize=12)\naxs[0].set_ylabel('Number of Solar Flares', fontsize=12)\nannotations = [(\"Cycle 20 Peak\", 1960, 120), (\"Cycle 21 Peak\", 1980, 180), (\"Cycle 22 Peak\", 1990, 210), (\"Halloween Storms\", 2000, 260), (\"Solar Cycle 24\", 2010, 230), (\"Cycle 25 Surge\", 2020, 270)]\nfor text, x, y in annotations:\n    axs[0].annotate(text, xy=(x, y), xytext=(-60, 10), textcoords='offset points', arrowprops=dict(arrowstyle=\"->\", color='grey'), fontsize=10)\naxs[0].grid(True, linestyle='--', alpha=0.6)\naxs[0].legend(loc='upper left', fontsize=10, frameon=True)\n\n# Plot the bar chart for sunspots\naxs[1].bar(decades, sunspots, color='blue', alpha=0.7, label='Average Sunspots per Decade')\naxs[1].set_title('Average Sunspots per Decade\\nCorrelation with Solar Flares', fontsize=14, fontweight='bold', pad=15)\naxs[1].set_xlabel('Decade', fontsize=12)\naxs[1].set_ylabel('Average Number of Sunspots', fontsize=12)\naxs[1].grid(True, linestyle='--', alpha=0.6, axis='y')\naxs[1].legend(loc='upper left', fontsize=10, frameon=True)\n\n# Adjust layout to ensure everything fits without overlap\nplt.tight_layout()\n\n# Display the charts\nplt.show()",
        "source": "gptseed"
    },
    {
        "category": "Multidiff",
        "index": 1,
        "revised_text": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fictional Eco-Destinations\ndestinations = [\n    \"Sunny Shores\", \"Green Valley\", \"Blue Oasis\",\n    \"Mountain Peak\", \"Desert Bloom\", \"Forest Haven\",\n    \"River Bend\", \"Island Retreat\", \"City Park\"\n]\n\n# 3D Data for plotting\npopularity = np.array([90, 75, 65, 80, 60, 85, 70, 55, 95])\nenvironmental_impact = np.array([30, 45, 55, 40, 65, 35, 50, 70, 25])\nvisitor_satisfaction = np.array([85, 80, 75, 90, 70, 95, 60, 50, 88])\naccessibility = np.array([500, 600, 550, 450, 620, 480, 590, 530, 610])\n\n# Derived data for additional plot\nimpact_vs_accessibility = environmental_impact * (accessibility / 100)\n\n# Create figure and subplots\nfig = plt.figure(figsize=(14, 8))\n\n# 3D Bubble Plot\nax1 = fig.add_subplot(121, projection='3d')\nbubble_chart = ax1.scatter(popularity, environmental_impact, visitor_satisfaction,\n                           s=accessibility, alpha=0.7, c=accessibility,\n                           cmap='viridis', edgecolors='w')\n\nfor i, destination in enumerate(destinations):\n    ax1.text(popularity[i], environmental_impact[i], visitor_satisfaction[i],\n             destination, fontsize=8, ha='center', va='center')\n\nax1.set_xlabel('Popularity (Score)', fontsize=10)\nax1.set_ylabel('Environmental Impact (Score)', fontsize=10)\nax1.set_zlabel('Visitor Satisfaction (Score)', fontsize=10)\nax1.set_title('Eco Destinations: Popularity vs Impact vs Satisfaction', fontsize=12, fontweight='bold')\n\ncbar = plt.colorbar(bubble_chart, ax=ax1, shrink=0.6, aspect=10)\ncbar.set_label('Accessibility (Scale)', fontsize=10)\n\nax1.view_init(elev=30, azim=120)\n\n# 2D Heatmap Plot\nax2 = fig.add_subplot(122)\nheatmap = ax2.imshow(impact_vs_accessibility.reshape((3, 3)), cmap='coolwarm', interpolation='nearest')\n\nax2.set_xticks(np.arange(3))\nax2.set_yticks(np.arange(3))\nax2.set_xticklabels(destinations[:3])\nax2.set_yticklabels(destinations[3:6])\nax2.set_xlabel('Destinations (Part 1)', fontsize=10)\nax2.set_ylabel('Destinations (Part 2)', fontsize=10)\nax2.set_title('Impact vs Accessibility Heatmap', fontsize=12, fontweight='bold')\n\ncbar2 = plt.colorbar(heatmap, ax=ax2)\ncbar2.set_label('Impact-Accessibility Score', fontsize=10)\n\n# Ensure layout is tight and well-arranged\nplt.tight_layout()\n\n# Display the plot\nplt.show()",
        "source": "gptseed"
    },
    {
        "category": "Multidiff",
        "index": 2,
        "revised_text": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\ncontinents = ['Africa', 'Antarctica', 'Asia', 'Europe', 'North America', 'South America', 'Oceania']\ninitiatives_percentage = [15, 10, 25, 20, 18, 8, 4]\n\n# Define colors for each continent\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FFB3E6', '#FFD700']\n\n# Additional data for the bar chart\nyears = ['2018', '2019', '2020', '2021', '2022']\ngrowth_data = {\n    'Africa': [12, 14, 16, 15, 15],\n    'Antarctica': [9, 10, 11, 11, 10],\n    'Asia': [20, 22, 25, 28, 30],\n    'Europe': [18, 19, 19, 20, 20],\n    'North America': [16, 17, 17, 18, 18],\n    'South America': [6, 7, 8, 8, 8],\n    'Oceania': [3, 3, 4, 4, 4]\n}\n\n# Set up the figure and axis for subplots\nfig, ax = plt.subplots(1, 2, figsize=(18, 8))\n\n# Create the pie chart on the first subplot\nexplode = (0, 0, 0.1, 0, 0, 0, 0)\nax[0].pie(initiatives_percentage, labels=continents, autopct='%1.1f%%', startangle=120, \n          colors=colors, shadow=True, explode=explode)\nax[0].set_title('Global Exploration Initiatives by Continent\\n(A Hypothetical Distribution)', \n                fontsize=14, fontweight='bold', pad=20)\n\n# Create a bar chart on the second subplot to show growth over years\nwidth = 0.12\nx = np.arange(len(years))\nfor i, continent in enumerate(continents):\n    ax[1].bar(x + i * width, growth_data[continent], width, label=continent, color=colors[i])\n\nax[1].set_title('Yearly Growth in Exploration Initiatives\\n(Hypothetical Data)', fontsize=14, fontweight='bold')\nax[1].set_xlabel('Year', fontsize=12)\nax[1].set_ylabel('Number of Initiatives', fontsize=12)\nax[1].set_xticks(x + width * 3)\nax[1].set_xticklabels(years)\nax[1].legend(title=\"Continents\", loc='upper left', fontsize=10, bbox_to_anchor=(1, 1))\n\n# Ensure layout is adjusted to prevent overlap\nplt.tight_layout()\n\n# Display the combined chart\nplt.show()",
        "source": "gptseed"
    },
    {
        "category": "Multidiff",
        "index": 3,
        "revised_text": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the decades and corresponding data for Average SST\ndecades = np.array([1980, 1990, 2000, 2010, 2020, 2030])\naverage_sst = np.array([15.5, 15.7, 15.9, 16.0, 16.2, 16.4])  # Average SST in degrees Celsius\nuncertainty = np.array([0.1, 0.12, 0.11, 0.13, 0.15, 0.14])  # Measurement uncertainties\n\n# Construct a related dataset for SST anomaly (difference from 1980 baseline)\nbaseline_sst = 15.5  # Baseline SST in 1980\nsst_anomaly = average_sst - baseline_sst\n\n# Initialize a figure with 1 row and 2 columns for subplots\nfig, axs = plt.subplots(1, 2, figsize=(15, 6))\n\n# Subplot 1: Line chart with error bars for Average SST\naxs[0].errorbar(decades, average_sst, yerr=uncertainty, fmt='-o', ecolor='skyblue', capsize=5,\n                capthick=2, color='darkorange', alpha=0.9, marker='s', markersize=7)\naxs[0].grid(True, linestyle='--', alpha=0.7)\naxs[0].set_title(\"Decadal Trends in Global SST\\nand Associated Uncertainty (1980-2030)\",\n                 fontsize=12, fontweight='bold', pad=15)\naxs[0].set_xlabel(\"Decade\", fontsize=11)\naxs[0].set_ylabel(\"Average SST (°C)\", fontsize=11)\naxs[0].set_xlim(1975, 2035)\naxs[0].set_ylim(15.0, 17.0)\n\n# Subplot 2: Bar chart for SST Anomaly\naxs[1].bar(decades, sst_anomaly, color='teal', width=8)\naxs[1].set_title(\"Sea Surface Temperature Anomaly\\nfrom 1980 Baseline (1980-2030)\",\n                 fontsize=12, fontweight='bold', pad=15)\naxs[1].set_xlabel(\"Decade\", fontsize=11)\naxs[1].set_ylabel(\"SST Anomaly (°C)\", fontsize=11)\naxs[1].axhline(0, color='grey', linewidth=0.8, linestyle='--')  # Baseline for anomaly\n\n# Shared legend at the bottom of the plots\nfig.legend([\"Average SST with Uncertainty\", \"SST Anomaly\"], loc='lower center', ncol=2, fontsize=11, frameon=False)\n\n# Optimize layout\nplt.tight_layout(rect=[0, 0.05, 1, 1])\n\n# Display the plots\nplt.show()",
        "source": "gptseed"
    },
    {
        "category": "Multidiff",
        "index": 4,
        "revised_text": "",
        "source": "gptseed"
    },
    {
        "category": "Multidiff",
        "index": 5,
        "revised_text": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Years from 2000 to 2020\nyears = np.arange(2000, 2021)\n\n# Popularity data for each trend over the years\nminimalism = [20, 22, 25, 30, 35, 45, 55, 60, 50, 40, 45, 50, 65, 70, 68, 60, 58, 55, 53, 50, 45]\nathleisure = [10, 12, 15, 18, 22, 30, 35, 40, 60, 70, 80, 85, 80, 75, 70, 68, 65, 62, 60, 58, 55]\nbohemian = [30, 32, 35, 38, 42, 50, 45, 42, 40, 38, 35, 33, 30, 28, 25, 23, 20, 18, 16, 15, 12]\nvintage = [15, 20, 25, 28, 35, 40, 48, 55, 58, 60, 62, 65, 70, 73, 75, 72, 68, 66, 65, 64, 63]\nfuturism = [5, 8, 12, 15, 18, 25, 30, 32, 34, 36, 38, 40, 45, 48, 52, 55, 60, 68, 75, 78, 80]\n\n# Initialize the plot\nfig, ax = plt.subplots(figsize=(14, 9))\n\n# Plot the area chart with stackplot\nax.stackplot(years, minimalism, athleisure, bohemian, vintage, futurism,\n             labels=['Minimalism', 'Athleisure', 'Bohemian', 'Vintage', 'Futurism'],\n             colors=['#FF6347', '#FFD700', '#32CD32', '#1E90FF', '#9400D3'], alpha=0.7)\n\n# Add title and labels\nax.set_title('The Rise and Fall of Fashion Trends\\nin the 21st Century', fontsize=18)\nax.set_xlabel('Year', fontsize=14)\nax.set_ylabel('Trend Popularity', fontsize=14)\n\n# Add grid and customize it\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the appearance of the x-axis and y-axis labels\nplt.xticks(years, rotation=45, fontsize=10)\nplt.yticks(np.arange(0, 101, 10), fontsize=10)\n\n# Add legend with proper placement to avoid overlap\nax.legend(loc='upper left', fontsize=12)\n\n# Add annotations for significant points\nmax_popularity_year = 2013\n# Find the index of the maximum popularity year\nyear_index = np.where(years == max_popularity_year)[0][0]\nax.annotate('Peak Athleisure Popularity', xy=(max_popularity_year, athleisure[year_index]), \n            xytext=(max_popularity_year, 90),\n            arrowprops=dict(facecolor='black', arrowstyle='->'),\n            fontsize=12, ha='center')\n\n# Include a secondary y-axis with related data (dummy data here as an example)\nfashion_market_growth = [3, 3.5, 4, 4.2, 4.5, 5, 5.3, 5.5, 5.8, 6, 6.5, 6.8, 7, 7.2, 7.4, 7.5, 7.8, 8, 8.2, 8.5, 8.8]\nax2 = ax.twinx()\nax2.plot(years, fashion_market_growth, color='grey', linestyle='--', linewidth=2, label='Fashion Market Growth (%)')\nax2.set_ylabel('Market Growth (%)', fontsize=14, color='grey')\nax2.tick_params(axis='y', labelcolor='grey')\nax2.legend(loc='upper center', fontsize=12, frameon=False)\n\n# Highlight specific years with vertical bands\nhighlight_years = [(2008, 2009), (2015, 2016)]\nfor start, end in highlight_years:\n    ax.axvspan(start, end, color='red', alpha=0.1)\n\n# Ensure the layout fits well\nplt.tight_layout()\n\n# Display the plot\nplt.show()",
        "source": "gptseed"
    },
    {
        "category": "Multidiff",
        "index": 6,
        "revised_text": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define decades and create hypothetical data\ndecades = np.array([1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890,\n                    1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000])\n\n# Define the regions\nregions = ['Europe', 'Asia', 'North America', 'South America', 'Africa']\n\n# Hypothetical data for each region\nliterary_output = {\n    'Europe': [500, 600, 700, 800, 850, 900, 950, 1000, 1100, 1200,\n               1250, 1400, 1500, 1600, 1700, 1800, 2000, 2200, 2400, 2600, 2800],\n    'Asia': [300, 320, 350, 380, 410, 450, 480, 510, 550, 590,\n             620, 700, 800, 900, 980, 1100, 1200, 1300, 1400, 1500, 1600],\n    'North America': [200, 220, 250, 280, 310, 340, 370, 400, 450, 500,\n                      540, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050],\n    'South America': [100, 110, 120, 130, 140, 150, 160, 170, 180, 190,\n                      200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400],\n    'Africa': [50, 60, 70, 80, 90, 100, 110, 120, 130, 140,\n               150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]\n}\n\n# Estimated standard deviation for the data (a fixed percentage error of 5%)\nerror = {region: np.array(output) * 0.05 for region, output in literary_output.items()}\n\n# Convert data to numpy arrays\nfor region in regions:\n    literary_output[region] = np.array(literary_output[region])\n\n# Calculate cumulative output for each region\ncumulative_output = {region: sum(output) for region, output in literary_output.items()}\n\n# Define the figure size and create two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 8))\n\n# Plot the line with error bars for each region in the first subplot\nfor region in regions:\n    ax1.errorbar(decades, literary_output[region], yerr=error[region],\n                 label=region, linewidth=2, elinewidth=1.5, capsize=4,\n                 alpha=0.8)  # Reduced alpha for error bars\n\n# Set up the title, axes labels, and legend for the first subplot\nax1.set_title('Historical Global Literary Output\\nand Its Impact over Time', fontsize=16)\nax1.set_xlabel('Decades', fontsize=14)\nax1.set_ylabel('Number of Published Works', fontsize=14)\nax1.tick_params(axis='both', which='major', labelsize=12)\nax1.grid(True, linestyle='--', alpha=0.7)\nax1.legend(title='Region', loc='upper left', bbox_to_anchor=(1.0, 1))\n\n# Ensure tick labels are not overlapping in the first subplot\nax1.set_xticks(decades[::2])\n\n# Create a bar chart for the cumulative output in the second subplot\nax2.bar(regions, cumulative_output.values(), color=['b', 'g', 'r', 'c', 'm'])\n\n# Set up the title and axes labels for the second subplot\nax2.set_title('Cumulative Global Literary Output\\nby Region', fontsize=16)\nax2.set_xlabel('Region', fontsize=14)\nax2.set_ylabel('Total Number of Published Works', fontsize=14)\n\n# Adjust the layout for both subplots\nplt.tight_layout()\n\n# Display the plot\nplt.show()",
        "source": "gptseed"
    },
    {
        "category": "Multidiff",
        "index": 7,
        "revised_text": "",
        "source": "gptseed"
    },
    {
        "category": "Multidiff",
        "index": 8,
        "revised_text": "import matplotlib.pyplot as plt  \nimport numpy as np  \n  \n# Defining models and data  \nmodels = [  \n    \"Engstrom (M1)\", \"Zhang (M2)\", \"Rice (M3)\",   \n    \"Rade (M4)\", \"Hendrycks (M5)\", \"Addep. (M6)\",   \n    \"Carmon (M7)\"  \n]  \n  \nrobust_error = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]  \n  \nrnfs = np.array([  \n    [0.00, 6.20, 4.90, 4.25, 5.40, 3.65, 3.25],  \n    [6.65, 0.00, 5.15, 2.80, 5.25, 2.85, 2.50],  \n    [7.75, 7.70, 0.00, 5.35, 6.30, 4.80, 4.15],  \n    [7.85, 5.90, 6.25, 0.00, 5.45, 3.85, 2.95],  \n    [9.15, 8.75, 7.25, 5.75, 0.00, 5.25, 4.95],  \n    [8.65, 7.40, 6.95, 5.25, 6.45, 0.00, 4.00],  \n    [10.90, 9.90, 9.15, 7.15, 8.95, 6.85, 0.00],  \n])  \n  \n# Set up the plot  \nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), gridspec_kw={\"width_ratios\": [1, 1.25]})  \n  \n# Bar chart  \ny_pos = np.arange(len(models))  \nax1.barh(y_pos, robust_error, color=\"#2a9d8f\", edgecolor='black')  \nax1.set_yticks(y_pos)  \nax1.set_yticklabels(models, fontsize=11)  \nax1.invert_yaxis()  # labels read top-to-bottom  \nax1.set_title(\"Robust Error (%)\", fontsize=14)  \nax1.set_xlim([0, 50])  \nax1.set_xlabel('Error Rate (%)', fontsize=12)  \n  \n# Annotate bar chart  \nfor i, v in enumerate(robust_error):  \n    ax1.text(v - 4, i, f\"{v:.2f}%\", color=\"white\", va=\"center\", fontweight='bold')  \n  \n# Heatmap  \nim = ax2.imshow(rnfs, cmap=\"YlGnBu\", aspect=\"auto\")  \n  \n# Customizing the x-axis  \nax2.set_xticks(np.arange(len(models)))  \nax2.set_xticklabels(models, fontsize=11, rotation=45, ha=\"right\")  \nax2.yaxis.set_visible(False)  \nax2.set_title(\"RNFs (%)\", fontsize=14)  \n  \n# Annotate heatmap  \nfor i in range(len(models)):  \n    for j in range(len(models)):  \n        color = \"white\" if rnfs[i, j] > 6 else \"black\"  \n        ax2.text(j, i, f\"{rnfs[i, j]:.2f}\", ha=\"center\", va=\"center\", color=color)  \n  \n# Tight layout for better spacing  \nplt.tight_layout()  \n  \n# Show the plot  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "HardRecognize",
        "index": 0,
        "revised_text": "import matplotlib.pyplot as plt  \nimport numpy as np  \n  \n# Define the time intervals (e.g., months)  \ntime = np.arange(1, 13)  \n  \n# Define traffic congestion levels for three hypothetical cities  \ncity_a = np.array([60, 62, 58, 65, 67, 70, 72, 71, 73, 68, 66, 64])  \ncity_b = np.array([55, 57, 59, 60, 63, 65, 68, 69, 72, 74, 73, 71])  \ncity_c = np.array([50, 52, 55, 57, 60, 62, 65, 66, 69, 71, 70, 68])  \n  \n# Plotting  \nplt.figure(figsize=(10, 6))  \n  \n# Create overlapping line plots with semi-transparent fills  \nplt.plot(time, city_a, color='red', alpha=0.8, label='City A')  \nplt.fill_between(time, city_a - 5, city_a + 5, color='red', alpha=0.1)  \n  \nplt.plot(time, city_b, color='green', alpha=0.8, label='City B')  \nplt.fill_between(time, city_b - 5, city_b + 5, color='green', alpha=0.1)  \n  \nplt.plot(time, city_c, color='blue', alpha=0.8, label='City C')  \nplt.fill_between(time, city_c - 5, city_c + 5, color='blue', alpha=0.1)  \n  \n# Add additional overlapping areas to increase complexity  \nplt.fill_between(time, city_a, city_b, color='purple', alpha=0.05)  \nplt.fill_between(time, city_b, city_c, color='orange', alpha=0.05)  \nplt.fill_between(time, city_c, city_a, color='cyan', alpha=0.05)  \n  \n# Customize plot aesthetics  \nplt.title('City Traffic Congestion Levels Over Time')  \nplt.xlabel('Month')  \nplt.ylabel('Congestion Level (%)')  \nplt.xticks(time, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])  \nplt.legend(loc='upper right')  \nplt.grid(True, linestyle='--', alpha=0.5)  \n  \n# Show the plot  \nplt.tight_layout()  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "HardRecognize",
        "index": 1,
        "revised_text": "import numpy as np  \nimport matplotlib.pyplot as plt  \n  \n# Define the number of variables (axes)  \nnum_vars = 6  \n  \n# Create data for three different categories  \ncategory_1 = [3, 4, 2, 5, 4, 3]  \ncategory_2 = [4, 3, 5, 2, 3, 4]  \ncategory_3 = [2, 5, 3, 4, 5, 2]  \n  \n# Define labels for the axes  \nlabels = ['Speed', 'Reliability', 'Comfort', 'Price', 'Safety', 'Efficiency']  \n  \n# Function to create a radar chart  \ndef radar_chart(data, labels, title):  \n    # Set up the radar chart  \n    angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()  \n    data += data[:1]  \n    angles += angles[:1]  \n  \n    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))  \n    ax.fill(angles, data, color='b', alpha=0.25)  \n    ax.plot(angles, data, linewidth=2, linestyle='solid')  \n  \n    # Draw one axe per variable and add labels  \n    plt.xticks(angles[:-1], labels)  \n  \n    # Draw ylabels  \n    ax.set_rscale('linear')  \n    ax.set_ylim(0, 6)  \n  \n    # Title and grid  \n    plt.title(title, size=15, color='navy', y=1.1)  \n    ax.grid(True, linestyle='--')  \n  \n# Plot each category  \nradar_chart(category_1, labels, 'Category 1')  \nradar_chart(category_2, labels, 'Category 2')  \nradar_chart(category_3, labels, 'Category 3')  \n  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "HardRecognize",
        "index": 2,
        "revised_text": "import numpy as np  \nimport matplotlib.pyplot as plt  \n  \n# Define the data  \nmetrics = ['Accuracy', 'Precision', 'Recall', 'F1-Score', 'Speed']  \nalgorithms = ['Algorithm A', 'Algorithm B', 'Algorithm C']  \n  \n# Create data for each algorithm  \ndata = np.array([  \n    [0.85, 0.78, 0.80, 0.82, 0.90],  # Algorithm A  \n    [0.88, 0.76, 0.82, 0.81, 0.85],  # Algorithm B  \n    [0.80, 0.82, 0.78, 0.83, 0.88]   # Algorithm C  \n])  \n  \n# Add the first metric value to the end of each data set to close the radar chart  \ndata = np.concatenate((data, data[:, [0]]), axis=1)  \n  \n# Calculate the angle for each axis  \nnum_vars = len(metrics)  \nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()  \nangles += angles[:1]  \n  \n# Initialize the radar chart  \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))  \n  \n# Draw one line per algorithm  \nfor idx, algorithm in enumerate(algorithms):  \n    ax.plot(angles, data[idx], linewidth=1, linestyle='solid', label=algorithm)  \n    ax.fill(angles, data[idx], alpha=0.25)  \n  \n# Add labels for each axis  \nplt.xticks(angles[:-1], metrics, color='grey', size=8)  \n  \n# Add a title  \nplt.title('Algorithm Performance Comparison', size=12, color='darkblue', y=1.1)  \n  \n# Add a legend  \nplt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))  \n  \n# Display the chart  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Plot_In_Plot",
        "index": 0,
        "revised_text": "import matplotlib.pyplot as plt  \nimport numpy as np  \n  \n# Main data: Total sales over the months  \nmonths = np.array(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])  \ntotal_sales = np.array([1500, 1600, 1700, 1800, 2500, 2600, 2700, 2800, 3000, 3100, 3200, 3300])  \n  \n# Inset data: Sales for a specific category (e.g., electronics) over the months  \ncategory_sales = np.array([300, 320, 340, 360, 400, 420, 440, 460, 480, 500, 520, 540])  \n  \n# Create the main plot  \nfig, ax_main = plt.subplots(figsize=(10, 6))  \nax_main.plot(months, total_sales, marker='o', linestyle='-', color='b', label='Total Sales')  \nax_main.set_title('Monthly Sales Overview')  \nax_main.set_xlabel('Month')  \nax_main.set_ylabel('Total Sales ($)')  \nax_main.grid(True)  \nax_main.legend()  \n  \n# Create the inset plot  \nax_inset = fig.add_axes([0.6, 0.2, 0.25, 0.25])  # [left, bottom, width, height] in figure coordinates  \nax_inset.plot(months, category_sales, marker='s', linestyle='--', color='r', label='Electronics Sales')  \nax_inset.set_title('Electronics Category')  \nax_inset.set_xlabel('Month')  \nax_inset.set_ylabel('Sales ($)')  \nax_inset.grid(True)  \nax_inset.legend(fontsize='small')  \n  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Plot_In_Plot",
        "index": 1,
        "revised_text": "import matplotlib.pyplot as plt  \nimport numpy as np  \n  \n# Main plot data: Monthly sales data over a year  \nmonths = np.array(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',   \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])  \nsales = np.array([100, 110, 130, 150, 160, 180,   \n                  200, 210, 230, 250, 270, 300])  \n  \n# Inset plot data: Sales data for the last quarter  \nmonths_q4 = months[-3:]  \nsales_q4 = sales[-3:]  \n  \n# Create the main figure and axis  \nfig, ax_main = plt.subplots(figsize=(10, 6))  \n  \n# Plot the main sales data  \nax_main.plot(months, sales, marker='o', linestyle='-', color='b', label='Monthly Sales')  \nax_main.set_xlabel('Month')  \nax_main.set_ylabel('Sales ($K)')  \nax_main.set_title('Yearly Sales Overview')  \nax_main.grid(True)  \nax_main.legend(loc='upper left')  \n  \n# Create an inset axis within the main plot  \nax_inset = fig.add_axes([0.65, 0.5, 0.25, 0.35])  # [x, y, width, height] in figure coordinates  \n  \n# Plot the inset sales data  \nax_inset.plot(months_q4, sales_q4, marker='o', linestyle='-', color='r', label='Q4 Sales')  \nax_inset.set_xlabel('Month (Q4)')  \nax_inset.set_ylabel('Sales ($K)')  \nax_inset.set_title('Q4 Performance')  \nax_inset.grid(True)  \n  \n# Adjust layout to prevent overlap  \nplt.tight_layout()  \n  \n# Show the plot  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Plot_In_Plot",
        "index": 2,
        "revised_text": "import matplotlib.pyplot as plt  \nimport numpy as np  \n  \n# Data for the main plot: average monthly temperatures (in Celsius)  \nmonths = np.array(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])  \navg_temperatures = np.array([0, 1, 5, 9, 14, 18, 22, 21, 16, 10, 4, 1])  \n  \n# Data for the inset plot: daily temperatures in July  \ndays_july = np.arange(1, 32)  \ndaily_temps_july = np.array([  \n    21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 33, 32, 31,  \n    30, 29, 28, 27, 26, 28, 29, 30, 31, 30, 29, 28, 27, 26, 25, 24  \n])  \n  \n# Creating the main plot  \nfig, ax_main = plt.subplots(figsize=(10, 6))  \nax_main.plot(months, avg_temperatures, marker='o', color='b')  \nax_main.set_title('Average Monthly Temperatures')  \nax_main.set_xlabel('Month')  \nax_main.set_ylabel('Temperature (°C)')  \n  \n# Creating the inset plot  \nax_inset = fig.add_axes([0.55, 0.55, 0.3, 0.3])  # [x, y, width, height]  \nax_inset.plot(days_july, daily_temps_july, marker='o', color='r')  \nax_inset.set_title('July Daily Temperatures')  \nax_inset.set_xlabel('Day')  \nax_inset.set_ylabel('Temp (°C)')  \n  \n# Enhance layout  \nplt.tight_layout()  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Plot_In_Plot",
        "index": 3,
        "revised_text": "import matplotlib.pyplot as plt  \nimport numpy as np  \n  \n# Data: average monthly temperatures in degrees Celsius for a city  \nmonths = np.array(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',   \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])  \navg_temps = np.array([5, 7, 10, 15, 20, 25, 28, 27, 22, 16, 10, 6])  \n  \n# Create the main plot  \nfig, ax_main = plt.subplots(figsize=(10, 6))  \nax_main.plot(months, avg_temps, marker='o', linestyle='-', color='b', label='Avg Temp')  \nax_main.set_title('Average Monthly Temperatures')  \nax_main.set_xlabel('Month')  \nax_main.set_ylabel('Temperature (°C)')  \nax_main.grid(True)  \nax_main.legend()  \n  \n# Create inset of the plot  \nax_inset = fig.add_axes([0.55, 0.55, 0.3, 0.3])  \nax_inset.plot(months, avg_temps, marker='o', linestyle='-', color='r')  \nax_inset.set_xlim(4, 8)  # Focus on May to August  \nax_inset.set_ylim(18, 30)  \nax_inset.set_title('Summer Overview')  \nax_inset.set_xlabel('Month')  \nax_inset.set_ylabel('Temp (°C)')  \nax_inset.grid(True)  \n  \n# Enhance visualization by highlighting the inset region on the main plot  \nax_main.axvspan(4, 8, color='grey', alpha=0.2)  \n  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Treemap",
        "index": 0,
        "revised_text": "import matplotlib.pyplot as plt  \nimport squarify  # For creating the treemap  \nimport numpy as np  \n  \n# Define the department names and their corresponding budget values  \ndepartments = ['Research & Development', 'Marketing', 'Sales', 'Human Resources',   \n               'IT Support', 'Customer Service', 'Logistics', 'Finance', 'Legal', 'Operations']  \nbudgets = [400000, 250000, 300000, 150000, 200000, 180000, 170000, 220000, 100000, 230000]  \n  \n# Normalize the budget values for better visualization  \nbudget_norm = squarify.normalize_sizes(budgets, 100, 100)  \n  \n# Create the plot  \nplt.figure(figsize=(12, 8))  \nsquarify.plot(sizes=budget_norm, label=departments, alpha=0.7,   \n              color=plt.cm.tab20c.colors[:len(departments)])  \n  \n# Customize the plot  \nplt.title('Departmental Budget Distribution', fontsize=18)  \nplt.axis('off')  # Turn off the axis  \nplt.gca().set_aspect('equal', adjustable='box')  # Maintain equal aspect ratio  \n  \n# Show the plot  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Treemap",
        "index": 1,
        "revised_text": "import matplotlib.pyplot as plt  \nimport squarify  # For creating treemaps  \nimport numpy as np  \n  \n# Sample data: Quarterly revenue (in millions) for different product categories  \ncategories = ['Smartphones', 'Laptops', 'Tablets', 'Wearables', 'Software', 'Accessories']  \nrevenue = [350, 200, 150, 100, 80, 50]  \n  \n# Creating a color palette  \ncolors = plt.cm.viridis(np.linspace(0, 1, len(categories)))  \n  \n# Plotting the treemap  \nplt.figure(figsize=(12, 8))  \nsquarify.plot(sizes=revenue, label=categories, color=colors, alpha=0.8)  \nplt.title('Quarterly Revenue Distribution by Product Category', fontsize=16)  \nplt.axis('off')  # Turn off the axis  \n  \n# Display the plot  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Treemap",
        "index": 2,
        "revised_text": "import matplotlib.pyplot as plt  \nimport squarify  # For creating treemap  \nimport numpy as np  \n  \n# Define the data for the company's budget allocation  \ndepartments = ['Research & Development', 'Marketing', 'Sales', 'Human Resources',   \n               'IT Support', 'Customer Service', 'Administration', 'Logistics']  \nbudget_allocation = [350, 250, 150, 100, 75, 50, 25, 30]  # In million dollars  \n  \n# Define colors for each department  \ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6','#c2f0c2','#ff6666']  \n  \n# Create a treemap  \nplt.figure(figsize=(12, 8))  \nsquarify.plot(sizes=budget_allocation, label=departments, color=colors, alpha=0.8)  \n  \n# Title and formatting  \nplt.title('Annual Budget Allocation by Department (in Million Dollars)', fontsize=16)  \nplt.axis('off')  # Remove axes  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Treemap",
        "index": 3,
        "revised_text": "import matplotlib.pyplot as plt  \nimport squarify  # This is needed for creating treemaps  \nimport numpy as np  \n  \n# Define the data for the treemap  \ncategories = ['Software', 'Hardware', 'Services', 'Telecom', 'E-commerce']  \nmarket_share = [35, 25, 15, 15, 10]  # Market share percentages  \n  \n# Define colors for each category  \ncolors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0']  \n  \n# Calculate the total market share  \ntotal = sum(market_share)  \n# Calculate the sizes for the treemap  \nsizes = [share / total for share in market_share]  \n  \n# Create the treemap  \nplt.figure(figsize=(12, 8))  \nsquarify.plot(sizes=sizes, label=categories, color=colors, alpha=0.8, pad=True)  \n  \n# Add title and labels  \nplt.title('Market Share Distribution in the Technology Sector', fontsize=18)  \nplt.axis('off')  # Turn off the axis  \n  \n# Show plot  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Treemap",
        "index": 4,
        "revised_text": "import matplotlib.pyplot as plt  \nimport squarify  # Install with: pip install squarify  \n  \n# Data setup  \ncompanies = ['TechCorp', 'InnovateX', 'DataWorks', 'FutureSoft', 'AlphaTech',   \n             'GammaSolutions', 'BetaSystems', 'NextGen', 'QuantumLeap']  \nmarket_shares = [30, 20, 15, 10, 8, 7, 5, 3, 2]  \n  \n# Normalize the market shares to sum up to 100  \ntotal_market_share = sum(market_shares)  \nsizes = [share / total_market_share * 100 for share in market_shares]  \n  \n# Define colors for each company  \ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#FFD700',  \n          '#FF6F61', '#6A5ACD', '#FF6347', '#00CED1']  \n  \n# Create the treemap  \nplt.figure(figsize=(12, 8))  \nsquarify.plot(sizes=sizes, label=companies, color=colors, alpha=0.7, pad=True, text_kwargs={'fontsize': 12})  \n  \n# Customize the plot  \nplt.title('Market Share of Technology Companies', fontsize=18)  \nplt.axis('off')  \n  \n# Display the plot  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Treemap",
        "index": 5,
        "revised_text": "import matplotlib.pyplot as plt  \nimport squarify  # Squarify is a library for treemap plotting  \nimport numpy as np  \n  \n# Define the data: Market shares of various companies  \ncompany_names = [\"Company A\", \"Company B\", \"Company C\", \"Company D\", \"Company E\", \"Company F\"]  \nmarket_shares = [30, 25, 20, 15, 7, 3]  # Market share percentages  \n  \n# Define colors for the treemap  \ncolors = plt.cm.viridis(np.linspace(0, 1, len(company_names)))  \n  \n# Create the treemap  \nplt.figure(figsize=(12, 8))  \nsquarify.plot(sizes=market_shares, label=company_names, color=colors, alpha=.8)  \n  \n# Customize the plot  \nplt.title(\"Market Share of Tech Companies\")  \nplt.axis('off')  # Turn off the axis  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Treemap",
        "index": 6,
        "revised_text": "import matplotlib.pyplot as plt  \nimport numpy as np  \nimport squarify  # Import squarify for plotting treemaps  \n  \n# Define data for different companies and their market shares  \ncompanies = ['TechCorp', 'Innovate Inc.', 'NextGen Solutions', 'DataWorks', 'CloudNet', 'SysPro', 'FutureWare']  \nmarket_share = np.array([25, 20, 15, 10, 10, 10, 10])  # Market shares in percent  \n  \n# Calculate colors for the treemap  \n# Create a color map based on the market share  \ncmap = plt.cm.get_cmap('viridis')  \ncolors = cmap(market_share / market_share.max())  \n  \n# Plotting the treemap  \nplt.figure(figsize=(10, 6))  \nsquarify.plot(sizes=market_share, label=companies, color=colors, alpha=0.8)  \n  \n# Add title and legend  \nplt.title('Market Share of Technology Companies', fontsize=18)  \nplt.axis('off')  \n  \n# Show plot  \nplt.show()  ",
        "source": "gptseed"
    },
    {
        "category": "Treemap",
        "index": 7,
        "revised_text": "import matplotlib.pyplot as plt  \nimport squarify  # pip install squarify (algorithm for treemap)  \nimport numpy as np  \n  \n# Define the data  \nlabels = [\"Company A\", \"Company B\", \"Company C\", \"Company D\", \"Company E\", \"Company F\"]  \nsizes = [30, 25, 20, 15, 7, 3]  # Market share percentages  \ncolors = plt.cm.Blues(np.linspace(0.4, 0.9, len(sizes)))  # Generate a colormap  \n  \n# Plot the treemap  \nplt.figure(figsize=(12, 8))  \nsquarify.plot(sizes=sizes, label=labels, color=colors, alpha=0.8, text_kwargs={'fontsize': 12, 'weight': 'bold'})  \n  \n# Add title and enhance the plot  \nplt.title('Hypothetical Market Share Distribution among Tech Companies', fontsize=16)  \n\n  \nplt.show()  ",
        "source": "gptseed"
    }
]