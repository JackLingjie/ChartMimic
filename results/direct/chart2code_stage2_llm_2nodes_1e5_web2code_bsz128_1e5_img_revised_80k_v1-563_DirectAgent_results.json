{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for the plot\nx = [0.2, 0.4, 0.6, 0.8, 1.0]\ny_targets = [1.3, 1.1, 1.0, 0.9, 0.8]\ny_predictions = [1.2, 1.1, 1.0, 0.9, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data\nax.plot(x, y_targets, 'o-', color='orange', label='Targets')\nax.plot(x, y_predictions, 'o-', color='blue', label='Predictions')\n\n# Set the title and labels\nax.set_title('Targets vs Predictions')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 1.5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nheights = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ncounts = [4, 4, 4, 4, 4, 4, 4]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nplt.bar(heights, counts, color='red')\n\n# Set labels and title\nplt.xlabel('Height')\nplt.ylabel('Count')\nplt.title('Bar Chart of Heights')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the range for x and y\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the z values (constant in this case)\nZ = np.zeros_like(X) + 14\n\n# Plot the surface\nax.contourf(X, Y, Z, cmap='magma')\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Contour Plot of a Constant Function')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = [-4, -2, 0, 2, 4]\ny = [10, 15, 20, 25, 30]\n\n# Plot the data points\nax.plot(x, y, 'ro')  # Red circles for data points\n\n# Draw a line connecting the data points\nax.plot(x, y, 'b-')  # Blue line for the fit line\n\n# Set labels and title\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_title('Volume vs Temperature and Pressure')\n\n# Set the range of the x-axis\nax.set_xlim(-5, 5)\n\n# Set the range of the y-axis\nax.set_ylim(0, 35)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nyears = [2010, 2012, 2014, 2016, 2018]\nprivate_schools = [0.75, 0.75, 0.75, 0.75, 0.75]\npublic_schools = [0.3, 0.3, 0.3, 0.3, 0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plotting the bars\nax.bar(years, private_schools, color='orange', label='Private Schools')\nax.bar(years, public_schools, bottom=private_schools, color='blue', label='Public Schools')\n\n# Setting the title and labels\nax.set_title('Student to Teacher Ratio by School Type')\nax.set_xlabel('Year')\nax.set_ylabel('Student to Teacher Ratio')\n\n# Adding a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [0, 2, 4, 6, 8, 10]\ny = [0, 0, 0, 0, 0, 0]\nz = [0.3, 0.25, 0.2, 0.15, 0.1, 0.05]\n\n# Plot the data\nax.plot(x, y, 'o-', label='Data Points')\n\n# Set labels and title\nax.set_xlabel('Vaccination Number')\nax.set_ylabel('Incidence Rate')\nax.set_title('Incidence Rate vs Vaccination Number')\n\n# Set the limits for the y-axis\nax.set_ylim(0, 0.35)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nyears = ['2010', '2012', '2014', '2016', '2018']\ninvestment_values = [5, 3, 4, 2, 1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.bar(years, investment_values, color='green')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Investment (Billion USD)')\nax.set_title('Investment Over Years')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 7.0))\n\n# Define the range for x and y values\nx = np.linspace(-1.0, 1.0, 100)\ny = np.linspace(-1.0, 1.0, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function f(x, y)\nZ = X**2 + Y**2\n\n# Plot the first subplot\naxes[0].contourf(X, Y, Z, cmap='viridis')\naxes[0].set_title('f(x)')\naxes[0].set_xlabel('x')\naxes[0].set_ylabel('y')\n\n# Define the function solution(x, y)\nsolution_Z = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the second subplot\naxes[1].contourf(X, Y, solution_Z, cmap='viridis')\naxes[1].set_title('solution')\naxes[1].set_xlabel('x')\naxes[1].set_ylabel('y')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified dimensions\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(1, 6, 100)\ny = np.linspace(1, 1.8, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the surface plot\nsurface = ax.plot_surface(X, Y, Z, cmap='viridis')\n\n# Set the colorbar\nfig.colorbar(surface, ax=ax, shrink=0.5, aspect=5)\n\n# Set the title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T = 6')\n\n# Set the labels for the axes\nax.set_xlabel('t')\nax.set_ylabel('tau')\nax.set_zlabel('accuracy (%)')\n\n# Set the limits for the z-axis\nax.set_zlim(82, 94)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure with a specific size\nfig = plt.figure(figsize=(15.0, 10.0))\n\n# Define the data for the plots\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\nz1 = np.sin(np.sqrt(x**2 + y**2))\nz2 = np.cos(np.sqrt(x**2 + y**2))\nz3 = np.tan(np.sqrt(x**2 + y**2))\nz4 = np.exp(-x**2 - y**2)\n\n# Plot the data in 3D subplots\nax1 = fig.add_subplot(2, 2, 1, projection='3d')\nax1.plot_surface(x, y, z1, cmap='viridis')\nax1.set_title('Origin')\n\nax2 = fig.add_subplot(2, 2, 2, projection='3d')\nax2.plot_surface(x, y, z2, cmap='plasma')\nax2.set_title('MG (ours)')\n\nax3 = fig.add_subplot(2, 2, 3, projection='3d')\nax3.plot_surface(x, y, z3, cmap='inferno')\nax3.set_title('Origin')\n\nax4 = fig.add_subplot(2, 2, 4, projection='3d')\nax4.plot_surface(x, y, z4, cmap='magma')\nax4.set_title('MG (ours)')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Set the limits for the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1.4)\n\n# Draw vertical lines at specified positions\nax.axvline(x=0.2, color='black', linestyle='--')\nax.axvline(x=0.6, color='black', linestyle='--')\nax.axvline(x=0.8, color='black', linestyle='--')\n\n# Draw horizontal lines at specified positions\nax.axhline(y=0.2, color='black', linestyle='--')\nax.axhline(y=0.4, color='black', linestyle='--')\nax.axhline(y=0.6, color='black', linestyle='--')\nax.axhline(y=0.8, color='black', linestyle='--')\nax.axhline(y=1.0, color='black', linestyle='--')\nax.axhline(y=1.2, color='black', linestyle='--')\nax.axhline(y=1.4, color='black', linestyle='--')\n\n# Plot the orange targets\nax.plot([0.2, 0.6], [0.2, 0.2], 'ro-', markersize=5)\nax.plot([0.2, 0.6], [0.4, 0.4], 'ro-', markersize=5)\nax.plot([0.2, 0.6], [0.6, 0.6], 'ro-', markersize=5)\nax.plot([0.2, 0.6], [0.8, 0.8], 'ro-', markersize=5)\nax.plot([0.2, 0.6], [1.0, 1.0], 'ro-', markersize=5)\nax.plot([0.2, 0.6], [1.2, 1.2], 'ro-', markersize=5)\nax.plot([0.2, 0.6], [1.4, 1.4], 'ro-', markersize=5)\n\n# Set the title of the plot\nax.set_title('Targets')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function Z\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the surface\nsurface = ax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Add a color bar\ncbar = fig.colorbar(surface)\ncbar.set_label('Value')\n\n# Set labels\nax.set_xlabel('Time')\nax.set_ylabel('Bus')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for the bar chart\nx = [1, 2, 3, 4]\ny = [6, 7, 8, 9]\n\n# Create a bar chart with specified colors and edge colors\nbars = ax.bar(x, y, color=['orange', 'green', 'brown', 'red'], edgecolor='black')\n\n# Set the title of the chart\nax.set_title('Bar Chart Example')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the x-axis limits\nax.set_xlim(0, 5)\n\n# Set the y-axis limits\nax.set_ylim(0, 13)\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(bars[0], ax=ax)\ncbar.set_label('Colorbar Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([-20, -30, -40, -50, -60])\n\n# Plot the data points\nax.plot(x, y, 'ro')\n\n# Set labels and title\nax.set_xlabel('Income')\nax.set_ylabel('Debt')\nax.set_title('Scatter Plot of Income vs Debt')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 70)\n\n# Set the limits for the y-axis\nax.set_ylim(-60, 0)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\ntime = np.array([10, 20, 30, 40, 50])\ntemperature = np.array([15, 25, 35, 40, 50])\ndepth = np.array([-20, -30, -40, -50, -60])\n\n# Plot the data points\nax.plot(time, depth, 'r-', label='Red Line')\nax.plot(time, depth + 10, 'b-', label='Blue Line')\nax.plot(time, depth + 20, 'g-', label='Green Line')\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Depth (m)')\nax.set_title('Depth vs Time at Different Temperatures')\n\n# Set the limits for the y-axis\nax.set_ylim(-70, 0)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the histograms\nx = np.arange(-20, 21)\ny_out = np.random.rand(41) * 0.12\ny_in = np.random.rand(41) * 0.12\n\n# Plot the histograms\nax.bar(x, y_out, color='blue', alpha=0.7, label='Out')\nax.bar(x, y_in, color='red', alpha=0.7, label='In')\n\n# Set the title and labels\nax.set_title('Histograms of Out and In')\nax.set_xlabel('LR Test')\nax.set_ylabel('Density')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.12)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='--')\n\n# Add a horizontal line at y=0.06\nax.axhline(y=0.06, color='blue', linestyle='--')\n\n# Add a horizontal line at y=0.08\nax.axhline(y=0.08, color='red', linestyle='--')\n\n# Add a horizontal line at y=0.1\nax.axhline(y=0.1, color='black', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=5\nax.axvline(x=5, color='red', linestyle='--')\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='red', linestyle='--')\n\n# Add a vertical line at x=-5\nax.axvline(x=-5, color='red', linestyle='--')\n\n# Add a vertical line at x=-10\nax.axvline(x=-10, color='red', linestyle='--')\n\n# Add a vertical line at x=-15\nax.axvline(x=-15, color='red', linestyle='--')\n\n# Add a vertical line at x=-20\nax.axvline(x=-20, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='red', linestyle='--')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a vertical line at x=15\nax.axvline(x=15, color='red', linestyle='--')\n\n# Add a vertical line at x="}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data points\nx = [150, 200, 250, 300, 350, 400]\ny_low = [-2, -2, -2, -2, -2, -2]\ny_middle = [-3, -3, -3, -3, -3, -3]\ny_high = [-4, -4, -4, -4, -4, -4]\n\n# Plot the data points\nax.plot(x, y_low, 'bo', label='Low')\nax.plot(x, y_middle, 'o', color='orange', label='Middle')\nax.plot(x, y_high, 'go', label='High')\n\n# Draw a line\nax.plot([150, 400], [-2, -6], 'k-', lw=2)\n\n# Add a shaded region\nax.fill_between(x, -2, -6, color='gray', alpha=0.5)\n\n# Set the title and labels\nax.set_title('Severity')\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data points\nx = [-3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0]\ny1 = [0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6]\ny2 = [0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]\ny3 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ny4 = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3]\n\n# Plot the data points\nax.plot(x, y1, 'b', label='8x')\nax.plot(x, y2, 'o', label='4x')\nax.plot(x, y3, 'g', label='2x')\nax.plot(x, y4, 'r', label='1x')\n\n# Set the title and labels\nax.set_title('Log (Depth L1)')\nax.set_xlabel('Log (ATE RMSE)')\nax.set_ylabel('Log (Depth L1)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny1 = [5, 4, 3, 2, 1]\ny2 = [4, 3, 2, 1, 0.9]\ny3 = [4, 3, 2, 1, 0.9]\ny4 = [4, 3, 2, 1, 0.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, color='red', label='Benign')\nax.plot(x, y2, color='green', label='BadNets')\nax.plot(x, y3, color='darkred', label='Benign KDE')\nax.plot(x, y4, color='darkgreen', label='BadNets KDE')\n\n# Set the title and labels\nax.set_title('T-test p-value = 0.0000')\nax.set_xlabel('Avg Top-5 Persistence of 1D')\nax.set_ylabel('Density')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.8)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data\ntasks = ['snarks', 'navigate', 'question_selection', 'object_counting']\nscores = [\n    [0.75, 0.73, 0.72, 0.71, 0.7],\n    [0.68, 0.67, 0.66, 0.65, 0.64],\n    [0.63, 0.62, 0.61, 0.6, 0.59],\n    [0.58, 0.57, 0.56, 0.55, 0.54]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars\nfor i, task_scores in enumerate(scores):\n    ax.bar(tasks, task_scores, color='lightblue', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Set y-axis limits\nax.set_ylim(0.4, 0.9)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ny1 = [100, 90, 80, 70, 60, 50, 40, 30]\ny2 = [110, 100, 90, 80, 70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with specific colors and labels\nax.plot(x, y1, color='blue', label='H-w ard - centers-cos')\nax.plot(x, y2, color='pink', label='random')\n\n# Set the title and labels\nax.set_title('summary xsum:temperature=0.3,device=cuda')\nax.set_xlabel('norm size')\nax.set_ylabel('count')\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Incomparable', 'Different', 'Same']\nsizes = [73.3, 23.7, 3.0]\ncolors = ['#00FF00', '#0000FF', '#FFFF00']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Data for the bar chart\nbar_labels = ['English', 'German', 'both']\nbar_sizes = [11.1, 44.4, 44.4]\nbar_colors = ['green', 'blue', 'cyan']\n\n# Create a bar chart\nax2 = fig.add_subplot(122, aspect='equal')\nax2.barh(bar_labels, bar_sizes, color=bar_colors)\nax2.set_xlabel('Percentage')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Define the data for the plot\ndata = [\n    [49, 48, 47, 46],\n    [49, 48, 47, 46]\n]\n\n# Define the labels for the bars\nlabels = ['SEAC', 'SAC(20Hz)']\n\n# Create a bar chart with the specified data and labels\nbars = ax.bar(labels, data[0], color='green')\nfor i, bar in enumerate(bars):\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), str(data[1][i]), ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(45, 52)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nmethods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\nscores = [63.64, 80.08, 84.27, 90.11]\n\n# Data for the second chart\nf1_methods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\nf1_scores = [75.00, 87.20, 88.00, 93.89]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first chart\naxes[0].bar(methods, scores, color='lightblue')\naxes[0].set_title('Average Recall Scores by Method')\naxes[0].set_xlabel('Method')\naxes[0].set_ylabel('Scores')\n\n# Plot the second chart\naxes[1].bar(f1_methods, f1_scores, color='lightblue')\naxes[1].set_title('Average F1 Scores by Method')\naxes[1].set_xlabel('Method')\naxes[1].set_ylabel('Scores')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [4, 8, 12, 16, 20, 24, 28, 32]\ny1 = [84, 86, 88, 90, 92, 94, 96, 96]\ny2 = [84, 86, 88, 90, 92, 94, 96, 96]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Trained w Few-Shot Ex')\nax.plot(x, y2, 'r-', label='Def Deduce+Ex Gen')\n\n# Set the title and labels\nax.set_title('Micro F1')\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 10, 20, 30, 40, 50]\ny_cars = [60, 62, 65, 70, 75, 80]\ny_trucks = [60, 62, 65, 70, 75, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data\nax.plot(x, y_cars, 'r-', label='Cars')\nax.plot(x, y_trucks, 'b-', label='Trucks')\n\n# Set the title and labels\nax.set_title('Efficiency vs Vehicle Parameter Size')\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\n\n# Set the y-axis limits\nax.set_ylim(50, 85)\n\n# Add markers at specific points\nmarkers = [(0, 60), (10, 62), (20, 65), (30, 70), (40, 75), (50, 80)]\nfor x_val, y_val in markers:\n    ax.plot(x_val, y_val, 'ro' if y_val == 80 else 'bo')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsimple_trend = [0, 6, 16, 20, 12, 4]\nsimple = [0, 6, 12, 20, 12, 10]\ncomplex_ = [0, 4, 4, 18, 26, 20]\ncode = [0, 0, 0, 0, 12, 22]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbars = ax.bar(models, simple_trend, color='purple', label='Simple Trend')\nax.bar(models, simple, bottom=simple_trend, color='red', label='Simple')\nax.bar(models, complex_, bottom=[sum(x) for x in zip(simple_trend, simple)], color='orange', label='Complex')\nax.bar(models, code, bottom=[sum(x) for x in zip(simple_trend, simple, complex_)], color='pink', label='Code')\n\n# Add a line graph\nax.plot(models, [56, 56, 56, 56, 56, 56], color='magenta', linestyle='--')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\nax.set_title('Encoding/Decoding Shelling Points by Model')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title and labels\nax.set_title('Calibration curve')\nax.set_xlabel('reduced probability')\nax.set_ylabel('fraction of positives')\n\n# Define the data points\nx = [0.0, 0.25, 0.5, 0.75, 1.0]\ny = [0.0, 0.3, 0.4, 0.7, 0.9]\n\n# Plot the data points\nax.plot(x, y, 'bo-')\n\n# Add a dashed line\nax.plot([0.0, 1.0], [0.5, 0.5], '--r')\n\n# Add a vertical line\nax.axvline(x=0.5, color='r', linestyle='--')\n\n# Add a horizontal line\nax.axhline(y=0.5, color='r', linestyle='--')\n\n# Add a text box\nax.text(0.05, 0.95, 'Subgroups', transform=ax.transAxes, fontsize=12, verticalalignment='top')\nax.text(0.05, 0.9, 'Calibration curve', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the histogram\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Plot the histogram\nax.hist(data, bins=10, color='blue')\n\n# Set the title and labels\nax.set_title('Histogram of Data')\nax.set_xlabel('Data Values')\nax.set_ylabel('Frequency')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.arange(1340, 1461)\ny_total = np.random.rand(121) * 0.05 + 0.025\ny_proposer = np.random.rand(121) * 0.05 + 0.025\ny_attestor = np.random.rand(121) * 0.05 + 0.025\ny_sync_committee = np.random.rand(121) * 0.05 + 0.025\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), gridspec_kw={'width_ratios': [1, 1], 'height_ratios': [1, 1]})\n\n# Plot Total\naxes[0, 0].bar(x, y_total, color='blue')\naxes[0, 0].set_title('Total')\naxes[0, 0].set_xlabel('Daily reward (Ether)')\naxes[0, 0].set_ylabel('Probability')\n\n# Plot Proposer\naxes[0, 1].bar(x, y_proposer, color='red')\naxes[0, 1].set_title('Proposer')\naxes[0, 1].set_xlabel('Daily reward (Ether)')\naxes[0, 1].set_ylabel('Probability')\n\n# Plot Attestor\naxes[1, 0].bar(x, y_attestor, color='green')\naxes[1, 0].set_title('Attestor')\naxes[1, 0].set_xlabel('Daily reward (Ether)')\naxes[1, 0].set_ylabel('Probability')\n\n# Plot Sync committee member\naxes[1, 1].bar(x, y_sync_committee, color='yellow')\naxes[1, 1].set_title('Sync committee member')\naxes[1, 1].set_xlabel('Daily reward (Ether)')\naxes[1, 1].set_ylabel('Probability')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 50, 100, 150]\ny1 = [1.30, 1.27, 1.28, 1.29]\ny2 = [1.30, 1.27, 1.28, 1.29]\ny3 = [1.30, 1.27, 1.28, 1.29]\ny4 = [1.30, 1.27, 1.28, 1.29]\ny5 = [1.30, 1.27, 1.28, 1.29]\ny6 = [1.30, 1.27, 1.28, 1.29]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='LlaSMol Lite')\nax.plot(x, y2, 'b-', label='LlaSMol 21B')\nax.plot(x, y3, 'r-', label='LlaSMol FFN')\nax.plot(x, y4, 'b-', label='LlaSMol Plus')\nax.plot(x, y5, 'r-', label='LlaSMol Large')\nax.plot(x, y6, 'b-', label='LlaSMol Atttn')\n\n# Set the title and labels\nax.set_title('RMSE vs Trainable Parameter Size (M)')\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\n\n# Set the y-axis limits\nax.set_ylim(1.15, 1.5)\n\n# Set the x-axis ticks\nax.set_xticks([0, 50, 100, 150])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plots\nx = [40, 60, 80, 100, 120, 140, 160]\ny1 = [0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03]\ny2 = [0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06]\ny3 = [0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09]\n\n# Plot the data\nax.plot(x, y1, 'r-', label='D0')\nax.plot(x, y2, 'o-', label='D1')\nax.plot(x, y3, 'b-', label='D2')\n\n# Set the title and labels\nax.set_title('Distribution of Execution Duration (clock)')\nax.set_xlabel('Execution Duration (clock)')\nax.set_ylabel('Distribution')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.1)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ninstance_sizes = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x15', '60x20']\npetriRL = [18, 14, 13, 12, 12, 10, 5]\nGAM = [0, 0, 0, 0, 0, 0, 0]\nGIN = [9, 13, 12, 10, 9, 0, 5]\nDGERD = [0, 0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot data\nax.plot(instance_sizes, petriRL, label='PetriRL', color='green')\nax.plot(instance_sizes, GAM, label='GAM', color='orange')\nax.plot(instance_sizes, GIN, label='GIN', color='blue')\nax.plot(instance_sizes, DGERD, label='DGERD', color='purple')\n\n# Set labels and title\nax.set_xlabel('Instance size (step)')\nax.set_ylabel('Makespan (step)')\nax.set_title('Comparison of Different Methods')\n\n# Set y-axis limits\nax.set_ylim(-5, 15)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the x-axis limits\nax.set_xlim(-1, 4)\n\n# Set the y-axis limits\nax.set_ylim(0, 4)\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Define the data for the plot\ndata = [\n    [3, 2, 1],\n    [3, 2, 1],\n    [3, 2, 1]\n]\n\n# Define the labels for the bars\nlabels = ['SEAC', 'CTCO']\n\n# Define the colors for the bars\ncolors = ['green', 'orange']\n\n# Plot the bars\nfor i, (x, y) in enumerate(zip(labels, data)):\n    ax.bar(x, y, color=colors[i], align='center', alpha=0.7)\n\n# Add a title to the plot\nax.set_title('Comparison of Algorithms')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\nvalues = [95, 85, 75, 65]\nstars = ['*', '*', '*', '*']\n\n# Plot the data\nax.plot(brands, values, marker='o')\n\n# Set the title and labels\nax.set_title('Brand Performance Over Time')\nax.set_xlabel('Brands')\nax.set_ylabel('Time to Market (Days)')\n\n# Add stars at specific positions\nfor i, star in enumerate(stars):\n    ax.text(brands[i], values[i] - 2, star, ha='center', va='center', color='red')\n\n# Set the y-axis limits\nax.set_ylim(40, 120)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data for the bar chart\nbar_data = [1900, 1920, 1930, 1940]\nbar_heights = [1800, 1900, 2000, 2100]\n\n# Plot the bar chart\nax.bar(bar_data, bar_heights, color='blue')\n\n# Set the title and labels\nax.set_title('Era')\nax.set_xlabel('Density')\nax.set_ylabel('Year')\n\n# Define the data for the scatter plot\nscatter_data = [(1900, 1850), (1920, 1950), (1930, 2050), (1940, 2150)]\n\n# Plot the scatter plot\nfor x, y in scatter_data:\n    ax.scatter(x, y, color='red')\n\n# Define the data for the box plot\nbox_data = [[1900, 1920], [1930, 1940]]\n\n# Plot the box plot\nax.boxplot(box_data, positions=[1900, 1930], widths=10)\n\n# Set the limits for the y-axis\nax.set_ylim(1850, 2150)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\ntech_names = ['Nanotechnology', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'Al']\npatent_counts_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\npatent_counts_2022 = [90, 50, 150, 100, 180, 250, 400, 300, 400, 500]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 500)\n\n# Set the y-axis limits\nax.set_ylim(0, 500)\n\n# Set the title of the chart\nax.set_title('Patent Filings in 2013')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Number of Patents')\nax.set_ylabel('Technology')\n\n# Create a bar chart for 2013 data\nbars_2013 = ax.barh(tech_names, patent_counts_2013, color='blue', label='2013')\n\n# Create a bar chart for 2022 data\nbars_2022 = ax.barh(tech_names, patent_counts_2022, color='red', label='2022')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Calibration Curve', fontsize=14, fontweight='bold')\n\n# Set the x-axis label\nax.set_xlabel('Predicted Probability', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives', fontsize=12)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], fontsize=10)\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\nax.set_yticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], fontsize=10)\n\n# Set the limits for the x-axis\nax.set_xlim(0, 1)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 1)\n\n# Set the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings = [350, 300, 250, 200]\ngrowth = [70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot earnings data\ncolor = 'tab:blue'\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Earnings ($1000s)', color=color)\nax1.plot(quarters, earnings, color=color, marker='o')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for growth data\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Growth (%)', color=color)\nax2.plot(quarters, growth, color=color, marker='o', linestyle='--')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Set title and legend\nfig.tight_layout()\nplt.title('Earnings and Growth Over Quarters')\nlegend_labels = ['Earnings', 'Growth']\nplt.legend(legend_labels, loc='upper left')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Linear probing', 'BitFit', 'Prompt Tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\nvalues = [\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nfor i, category in enumerate(categories):\n    ax.bar(category, values[i], color='blue')\n\n# Set labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Comparison of Methods')\n\n# Set y-axis limits\nax.set_ylim(0, 80)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Seq-ident')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('white')\n\n# Set the font size for all text elements\nplt.rcParams['font.size'] = 10\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Relative Norm of Difference Vectors')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Define the data points\nx = [25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45]\ny_teenagers = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\ny_children = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\ny_adults = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\n\n# Plot the data points\nax.plot(x, y_teenagers, 'r.', label='teenagers')\nax.plot(x, y_children, 'g.', label='children')\nax.plot(x, y_adults, 'b.', label='adults')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(-10, 35)\n\n# Set the x-axis limits\nax.set_xlim(25, 45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 99.9, 96.0, 92.3, 90.9, 90.9, 91.3, 92.5, 93.3, 93.3, 96.0, 98.7, 98.7, 98.7, 98.7, 98.7]\n\n# Create the plot\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\nplt.xlabel('HC_first (before aging)')\nplt.ylabel('HC_first (after aging)')\nplt.title('Plot of HC_first over time')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Define the data for the heatmap\ndata = np.random.rand(10, 10)\n\n# Create a heatmap\nheatmap = ax.imshow(data, cmap='Blues', interpolation='nearest')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(heatmap)\ncbar.ax.set_ylabel('Intensity')\n\n# Set the tick labels for the x-axis\nx_ticks = np.arange(10)\nx_labels = [f'{i/10:.1f}' for i in x_ticks]\nax.set_xticks(x_ticks)\nax.set_xticklabels(x_labels)\n\n# Set the tick labels for the y-axis\ny_ticks = np.arange(10)\ny_labels = [f'{i/10:.1f}' for i in y_ticks]\nax.set_yticks(y_ticks)\nax.set_yticklabels(y_labels)\n\n# Set the title of the plot\nax.set_title('Heatmap with TMScore and Sequence ID')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodes = [4211, 2411, 2141, 1124]\nsrcc_values = [0.9628, 0.9604, 0.9624, 0.9592]\nplcc_values = [0.9624, 0.9604, 0.9624, 0.9561]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for SRCC values\nax.bar(modes, srcc_values, color='blue', label='SRCC')\n\n# Plot bars for PLCC values\nax.bar(modes, plcc_values, color='green', bottom=srcc_values, label='PLCC')\n\n# Set the title of the plot\nax.set_title('SRCC and PLCC values with their sum for different modes')\n\n# Set the x-axis label\nax.set_xlabel('Modes')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Set the y-axis limits\nax.set_ylim(-1.926, -1.916)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(10.0, 3.0))\n\n# Data for each subplot\ndata = [\n    [[176, 176, 176, 176], [176, 176, 176, 176], [176, 176, 176, 176], [176, 176, 176, 176]],\n    [[176, 176, 176, 176], [176, 176, 176, 176], [176, 176, 176, 176], [176, 176, 176, 176]],\n    [[176, 176, 176, 176], [176, 176, 176, 176], [176, 176, 176, 176], [176, 176, 176, 176]],\n    [[176, 176, 176, 176], [176, 176, 176, 176], [176, 176, 176, 176], [176, 176, 176, 176]]\n]\n\n# Colors for each data point\ncolors = ['blue', 'blue', 'green', 'orange']\n\n# Plotting each subplot\nfor ax, d in zip(axes, data):\n    ax.imshow(np.array(d).reshape(-1, 4, 1), aspect='auto', interpolation='nearest', cmap='viridis')\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title('Client')\n\n# Add a legend\nfig.legend(['Depth', 'Edge', 'Normals', 'Semseg'], loc='upper right')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points\nx = np.linspace(-10, 10, 400)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue', label='SINDy')\n\n# Set the title and labels\nax.set_title('Compact Spiral with Elliptical Hollow Center')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the limits for the x and y axes\nax.set_xlim(-10, 10)\nax.set_ylim(-7.5, 7.5)\n\n# Set the tick marks\nax.set_xticks(np.arange(-10, 11, 2))\nax.set_yticks(np.arange(-7.5, 7.6, 2.5))\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10**-1, 10**0, 10**1]\ny1 = [10**11, 10**11, 10**12]\ny2 = [10**11, 10**11, 10**12]\ny3 = [10**11, 10**11, 10**12]\ny4 = [10**11, 10**11, 10**12]\ny5 = [10**11, 10**11, 10**12]\ny6 = [10**11, 10**11, 10**12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the lines\nax.plot(x, y1, label='explicit, random')\nax.plot(x, y2, label='explicit, block size 10')\nax.plot(x, y3, label='explicit, block size 100')\nax.plot(x, y4, label='implicit, random')\nax.plot(x, y5, label='implicit, block size 10')\nax.plot(x, y6, label='implicit, block size 100')\n\n# Set the title and labels\nax.set_title('DAXPY memory bandwidth')\nax.set_xlabel('Flops/byte')\nax.set_ylabel('Flows/s')\n\n# Set the y-axis limits\nax.set_ylim(10**10, 10**12)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['satisfy constraints', 'no severe errors', 'lengthy', 'contain rich info', 'no moderate errors', 'grammatically correct', 'no minor errors', 'clear', 'non-repetitive', 'support stances', '19 other features']\nvalues = [0.76, 0.18, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.5]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('f(x) = 0.50')\nplt.xlabel('Categories')\nplt.ylabel('f(x)')\n\n# Set the y-axis limits\nplt.ylim(0.45, 0.75)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nsizes = [24, 45, 8]\nlabels = ['CigaR', 'ChatRepair']\ncolors = ['#FF9999','#66b3ff','#99ff99']\nexplode = (0.1, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Gemin Pro-CoT', 'GPT4V-CoT', 'Gemini Pro']\nsubcategories = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\nvalues = [25, 20, 15, 10, 5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the limits for the y-axis\nax.set_ylim(0, 30)\n\n# Set the title of the plot\nax.set_title('Qwen-VL-Max')\n\n# Set the labels for the x-axis\nax.set_xlabel('InterLM-XComposer2-VL')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the tick labels for the y-axis\nax.set_yticks(np.arange(0, 31, 5))\nax.set_yticklabels([str(i) for i in range(0, 31, 5)])\n\n# Plot the data\nbars = ax.bar(categories, values, color='red')\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.logspace(1, 2, 10)\ny1 = 10**(-np.linspace(2, 8, 10))\ny2 = 10**(-np.linspace(2, 8, 10))\ny3 = 10**(-np.linspace(2, 8, 10))\ny4 = 10**(-np.linspace(2, 8, 10))\ny5 = 10**(-np.linspace(2, 8, 10))\ny6 = 10**(-np.linspace(2, 8, 10))\n\n# Create figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot on the first subplot\naxes[0].plot(x, y1, 'p', color='purple')\naxes[0].plot(x, y2, 'p', color='pink')\naxes[0].plot(x, y3, 'p', color='red')\naxes[0].plot(x, y4, 'p', color='orange')\naxes[0].plot(x, y5, 'p', color='brown')\naxes[0].plot(x, y6, 'p', color='green')\naxes[0].set_xscale('log')\naxes[0].set_xlabel('Number of matvecs m')\naxes[0].set_ylabel('Approximation error ||A - \\u0394A||\\u208F')\naxes[0].set_title('Approximation error')\n\n# Plot on the second subplot\naxes[1].plot(x, y1, 'o', color='orange')\naxes[1].plot(x, y2, 'o', color='yellow')\naxes[1].plot(x, y3, 'o', color='cyan')\naxes[1].plot(x, y4, 'o', color='magenta')\naxes[1].plot(x, y5, 'o', color='black')\naxes[1].plot(x, y6, 'o', color='gray')\naxes[1].set_xscale('log')\naxes[1].set_xlabel('Number of matvecs m')\naxes[1].set_ylabel('Sparse recovery error ||S\\u208A\\u2212A\\u2212\\u0394A\\u208F||\\u208F')\naxes[1].set_title('Sparse recovery error')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'En.QA', 'Retrive.PassKey']\nvalues = [150, 100, 75, 50, 25]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(values, labels=categories, startangle=90, autopct='%1.1f%%', colors=['lightgreen', 'lightblue', 'lightcoral', 'lightskyblue', 'yellow'])\n\n# Set the aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0, 20, 40, 60, 80, 100, 120, 140]\ny1 = [3, 3, 3, 3, 3, 3, 3, 3]\ny2 = [2, 2, 2, 2, 2, 2, 2, 2]\ny3 = [1, 1, 1, 1, 1, 1, 1, 1]\ny4 = [0, 0, 0, 0, 0, 0, 0, 0]\ny5 = [-1, -1, -1, -1, -1, -1, -1, -1]\ny6 = [-2, -2, -2, -2, -2, -2, -2, -2]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6, 5))\nax.plot(x, y1, color='green')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='green')\nax.plot(x, y4, color='orange')\nax.plot(x, y5, color='blue')\nax.plot(x, y6, color='blue')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Set the y-axis limits\nax.set_ylim(-4, 4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 1, 2, 3, 4, 5, 6]\ny1 = [3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5]\ny2 = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\ny3 = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\ny4 = [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\ny5 = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Sample 1')\nax.plot(x, y2, 'g-', label='Sample 2')\nax.plot(x, y3, 'r-', label='Sample 3')\nax.plot(x, y4, 'c-', label='Sample 4')\nax.plot(x, y5, 'm-', label='Sample 5')\n\n# Set the title and labels\nax.set_title('Urgency in Thermal Conductivity Measurements')\nax.set_xlabel('Sample Number')\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Set the y-axis limits\nax.set_ylim(1.5, 4.5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores_a = [28, 20, 10, 22, 28]\nscores_b = [35, 26, 20, 25, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot bars for Player A\nax.bar(games, scores_a, color='red', label='Player A')\n\n# Plot bars for Player B\nax.bar(games, scores_b, color='green', label='Player B')\n\n# Set title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Set y-axis limits\nax.set_ylim(0, 60)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for Variable 1\nvariable1 = np.linspace(-6, 6, 100)\nvariable2 = np.linspace(-6, 6, 100)\nX, Y = np.meshgrid(variable1, variable2)\n\n# Define the data for Variable 2\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the data\ncontourf = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar\ncbar = fig.colorbar(contourf, ax=ax, orientation='vertical')\ncbar.set_label('Time')\n\n# Set the title and labels\nax.set_title('Contour Plot of Variable 2 over Variable 1')\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nfemale_player = [5.7, 6.0, 5.2, 5.7]\nmale_player = [6.2, 6.2, 5.2, 3.1]\nllm_player = [7.8, 7.5, 7.6, 4.2]\nperson_player = [7.4, 7.0, 6.9, 3.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot data\nax.bar(categories, female_player, color='pink', label='gpt-3.5-turbo-0613')\nax.bar(categories, male_player, bottom=female_player, color='blue', label='gpt-3.5-turbo-instruct')\nax.bar(categories, llm_player, bottom=[sum(x) for x in zip(female_player, male_player)], color='green', label='gpt-4')\nax.bar(categories, person_player, bottom=[sum(x) for x in zip(female_player, male_player, llm_player)], color='cyan', label='llama-2-13b')\n\n# Set title and labels\nax.set_title('Trustee Scenario')\nax.set_xlabel('Trustee Scenario')\nax.set_ylabel('Average Amount Sent ($)')\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(3, 8)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Athlete Jim', 'Athlete Bill']\nrunning_times = [130, 140]\ninterrupted_times = [120, 130]\nrest_times = [110, 120]\nrunning2_times = [160, 170]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\nbar_width = 0.2\nindex = range(len(categories))\n\n# Plot bars for each category\nbars_running = ax.bar([i - bar_width for i in index], running_times, bar_width, label='Running')\nbars_interrupted = ax.bar(index, interrupted_times, bar_width, label='Interrupted')\nbars_rest = ax.bar([i + bar_width for i in index], rest_times, bar_width, label='Rest')\nbars_running2 = ax.bar([i + 2 * bar_width for i in index], running2_times, bar_width, label='Running2')\n\n# Add labels and title\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Time (seconds)')\nax.set_title('Endurance Race Performance Analysis')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add a vertical line at the position of the arrow\nax.axvline(x=1.5, color='black', linestyle='--')\n\n# Set the y-axis limits\nax.set_ylim(0, 200)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data for the bar chart\ndata = [3, 4, 5, 6, 7, 8]\n\n# Create a bar chart\nax.bar(range(len(data)), data, color='green')\n\n# Set the title of the chart\nax.set_title('Bar Chart Example')\n\n# Set the x-axis label\nax.set_xlabel('X-axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = [-300, -120, -100, -75, -50, -35]\nvalues = [350, 150, 200, 75, 50, 25]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 5.0))\nbars = plt.bar(categories, values, color='red')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')\n\n# Set the title of the chart\nplt.title('Waterfall Chart')\n\n# Set the x-axis label\nplt.xlabel('Categories')\n\n# Set the y-axis label\nplt.ylabel('Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the distance from the center\nR = np.sqrt(X**2 + Y**2)\n\n# Define the function value\nZ = np.sin(np.pi * R) / (np.pi * R)\n\n# Create a color map\ncmap = plt.get_cmap('coolwarm')\n\n# Plot the image\nplt.figure(figsize=(8.0, 6.0))\nplt.imshow(Z, extent=[-1, 1, -1, 1], origin='lower', cmap=cmap, aspect='auto')\nplt.colorbar(label='Colorbar Label')\nplt.title('tripcolor of Delaunay triangulation, flat shading')\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Define the data for the plots\ndata_nearest = np.random.rand(10, 10)\ndata_bilinear = np.random.rand(10, 10)\n\n# Plot the images\naxes[0, 0].imshow(data_nearest, cmap='hot', interpolation='nearest')\naxes[0, 0].set_title('nearest')\naxes[0, 0].set_xlabel('X-axis')\naxes[0, 0].set_ylabel('Y-axis')\n\naxes[0, 1].imshow(data_nearest, cmap='hot', interpolation='nearest')\naxes[0, 1].set_title('nearest')\naxes[0, 1].set_xlabel('X-axis')\naxes[0, 1].set_ylabel('Y-axis')\n\naxes[1, 0].imshow(data_bilinear, cmap='hot', interpolation='bilinear')\naxes[1, 0].set_title('bilinear')\naxes[1, 0].set_xlabel('X-axis')\naxes[1, 0].set_ylabel('Y-axis')\n\naxes[1, 1].imshow(data_bilinear, cmap='hot', interpolation='bilinear')\naxes[1, 1].set_title('bilinear')\naxes[1, 1].set_xlabel('X-axis')\naxes[1, 1].set_ylabel('Y-axis')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata_flickr = [\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100]\n]\n\ndata_mscoco = [\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100],\n    [500, 400, 300, 200, 100]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot data for Flickr30k\nfor i, row in enumerate(data_flickr):\n    axes[0].bar(range(len(row)), row, color='blue')\n\n# Plot data for MS-COCO\nfor i, row in enumerate(data_mscoco):\n    axes[1].bar(range(len(row)), row, color='blue')\n\n# Set titles and labels\naxes[0].set_title('Flickr30k')\naxes[0].set_xlabel('Number of bits')\naxes[0].set_ylabel('Recall sum')\n\naxes[1].set_title('MS-COCO')\naxes[1].set_xlabel('Number of bits')\naxes[1].set_ylabel('Recall sum')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x(m)')\n\n# Set the y-axis label\nax.set_ylabel('y(m)')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 25)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 30)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 5, 10, 15, 20, 25])\n\n# Draw a red line from (0, 0) to (25, 30)\nax.plot([0, 25], [0, 30], color='red', linewidth=2)\n\n# Draw blue circles at specific points\nblue_circles = [(0, 0), (5, 5), (10, 10), (15, 15), (20, 20), (25, 25)]\nfor x, y in blue_circles:\n    ax.add_artist(plt.Circle((x, y), 0.5, color='blue'))\n\n# Draw red circles at specific points\nred_circles = [(0, 0), (5, 5), (10, 10), (15, 15), (20, 20), (25, 25)]\nfor x, y in red_circles:\n    ax.add_artist(plt.Circle((x, y), 0.5, color='red'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the circle's radius and center\nradius = 1\ncircle = plt.Circle((0.5, 0.5), radius, color='blue', fill=False)\n\n# Add the circle to the plot\nax.add_artist(circle)\n\n# Set the aspect ratio to be equal so the circle is not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of values for alpha and beta\nalpha = np.linspace(0, 2, 100)\nbeta = np.linspace(0, 2, 100)\nalpha_grid, beta_grid = np.meshgrid(alpha, beta)\n\n# Define a function to calculate delta_t\ndef delta_t(alpha, beta):\n    return np.sin(alpha) * np.cos(beta)\n\n# Calculate delta_t for each point in the grid\ndelta_t_grid = delta_t(alpha_grid, beta_grid)\n\n# Create a color map for the plot\ncmap = plt.cm.viridis\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the heatmap\nheatmap = ax.pcolormesh(alpha_grid, beta_grid, delta_t_grid, cmap=cmap, shading='auto')\n\n# Add a color bar\ncbar = fig.colorbar(heatmap)\ncbar.set_label('\u0394t')\n\n# Set labels and title\nax.set_xlabel('\u03b1')\nax.set_ylabel('\u03b2')\nax.set_title('Heatmap of \u0394t')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the first plot\nusers = np.linspace(0, 100, 101)\nutility = np.sin(users / 20)\n\n# Plot the utility distribution per topic\nax1.plot(users, utility, 'b-', label='Left')\nax1.plot(users, utility - 1, 'c-', label='Center Left')\nax1.plot(users, utility - 2, 'g-', label='Center')\nax1.plot(users, utility - 3, 'r-', label='Center Right')\nax1.plot(users, utility - 4, 'm-', label='Right')\n\n# Set the title and labels for the first plot\nax1.set_title('Utility distribution per topic')\nax1.set_xlabel('Users (U)')\nax1.set_ylabel('Utility (f)', color='b')\nax1.tick_params(axis='y', labelcolor='b')\n\n# Create a second y-axis for the second plot\nax2 = ax1.twinx()\nax2.set_ylabel('Users (U)', color='r')\nax2.tick_params(axis='y', labelcolor='r')\n\n# Create a grid for the second plot\ngrid_x, grid_y = np.meshgrid(np.arange(0, 101, 10), np.arange(-5, 5, 1))\ngrid_z = np.zeros_like(grid_x)\n\n# Plot the user preference matrix\nscatter = ax2.scatter(grid_x.flatten(), grid_y.flatten(), c=grid_z.flatten(), cmap='coolwarm', s=10)\n\n# Add a colorbar to the second plot\ncbar = fig.colorbar(scatter, ax=ax2, orientation='vertical')\ncbar.set_label('User Preference')\n\n# Set the limits for the second plot\nax2.set_xlim(0, 100)\nax2.set_ylim(-5, 5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Define the data for each subplot\ndata_sets = [\n    (np.array([0, 2]), np.array([-1, -1])),\n    (np.array([0, 2]), np.array([-1, -1])),\n    (np.array([0, 2]), np.array([-1, -1]))\n]\n\n# Plot the data\nfor ax, (x, y) in zip(axes, data_sets):\n    ax.plot(x, y, 'b-')\n    ax.fill_between(x, y, color='blue', alpha=0.5)\n    ax.set_xlim(-2, 4)\n    ax.set_ylim(-2, 4)\n    ax.set_xlabel('Reactive-2 payoff')\n    ax.set_ylabel('Memory-2 payoff')\n\n# Set titles and labels\ntitles = ['num. of points = 5', 'num. of points = 3', 'num. of points = 3']\nlabels = ['(S,T)', '(R,R)', '(P,P)']\n\nfor ax, title, label in zip(axes, titles, labels):\n    ax.text(0.5, 3.5, title, ha='center', va='center', fontsize=12)\n    ax.text(0.5, 3.2, label, ha='center', va='center', fontsize=12)\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the plots\ndata_vicuna = [\n    [5, 5, 5, 5, 5],\n    [6, 6, 6, 6, 6],\n    [7, 7, 7, 7, 7]\n]\n\ndata_alpaca = [\n    [8, 8, 8, 8, 8],\n    [9, 9, 9, 9, 9],\n    [10, 10, 10, 10, 10]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for Model = Vicuna\naxes[0].imshow(data_vicuna, cmap='Blues', interpolation='nearest')\naxes[0].set_title('Model = Vicuna')\naxes[0].set_xlabel('X Label')\naxes[0].set_ylabel('Y Label')\n\n# Plot for Model = Alpaca\naxes[1].imshow(data_alpaca, cmap='Oranges', interpolation='nearest')\naxes[1].set_title('Model = Alpaca')\naxes[1].set_xlabel('X Label')\naxes[1].set_ylabel('Y Label')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('#FFD7A0')\n\n# Define the x-axis range\nx = range(-40, 2)\n\n# Define the y-axis range\ny = range(0, 6)\n\n# Plot the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the limits for the x and y axes\nax.set_xlim(-40, 1)\nax.set_ylim(0, 6)\n\n# Set the tick labels for the x and y axes\nax.set_xticks(x)\nax.set_yticks(y)\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the title of the plot\nax.set_title('Plot Title', fontsize=14)\n\n# Set the labels for the x and y axes\nax.set_xlabel('\\u0394 Robust Accuracy (%)', fontsize=12)\nax.set_ylabel('\\u0394 RNFR (%)', fontsize=12)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Set the y-axis limits\nax.set_ylim(1, 7)\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Set the title of the plot\nax.set_title('Line 3 (Random Noise) vs Line 4 (Exponential Focus)')\n\n# Plot the data\nax.plot([0, 25, 50, 100, 150, 200], [1, 2, 3, 4, 5, 6], 'g^')\nax.plot([0, 25, 50, 100, 150, 200], [1, 2, 3, 4, 5, 6], 'r^')\n\n# Add a legend\nax.legend(['Line 3 (Random Noise)', 'Line 4 (Exponential Focus)'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8]\ny_known = [200, 100, 50, 200, 100, 50, 200, 100, 50]\ny_unknown = [100, 50, 20, 100, 50, 20, 100, 50, 20]\n\n# Create a bar chart\nplt.bar(x, y_known, color='green', label='Known')\nplt.bar(x, y_unknown, bottom=y_known, color='blue', label='Unknown')\n\n# Set labels and title\nplt.xlabel('Maximum Predicted Probability')\nplt.ylabel('Number of Examples')\nplt.title('Number of Examples by Maximum Predicted Probability')\nplt.legend()\n\n# Set the x-axis limits\nplt.xlim(0, 1)\n\n# Set the y-axis limits\nplt.ylim(0, 1500)\n\n# Set the figure size\nplt.figure(figsize=(10.0, 6.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Bfloat16', 'INT8', 'INT4', 'INT2']\ny1 = [9, 9, 9, 9]\ny2 = [8, 8, 8, 8]\ny3 = [7, 7, 7, 7]\ny4 = [6, 6, 6, 6]\ny5 = [5, 5, 5, 5]\ny6 = [4, 4, 4, 4]\ny7 = [3, 3, 3, 3]\ny8 = [2, 2, 2, 2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot lines\nax.plot(x, y1, label='Qwen-7B-Chat', color='red')\nax.plot(x, y2, label='Llama2-7B-Chat', color='blue')\nax.plot(x, y3, label='MPT-7B-Chat', color='green')\nax.plot(x, y4, label='CodeLlama-7B-Instruct', color='yellow')\n\n# Set title and labels\nax.set_title('Bias Score by Data Type and Model')\nax.set_xlabel('Data Type')\nax.set_ylabel('Bias Score')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.0, 0.2, 0.4]\ny_known = [500, 300, 100]\ny_unknown = [1000, 800, 600]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bars\nax.bar(x, y_known, color='orange', label='Known')\nax.bar(x, y_unknown, bottom=y_known, color='blue', label='Unknown')\n\n# Set the title and labels\nax.set_title('Number of Samples vs Maximum Predicted Probability')\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Samples')\n\n# Set the y-axis limits\nax.set_ylim(0, 1500)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2**6, 2**7, 2**8, 2**9, 2**10, 2**11]\ny1 = [100000, 200000, 300000, 400000, 500000, 600000]\ny2 = [100000, 200000, 300000, 400000, 500000, 600000]\ny3 = [100000, 200000, 300000, 400000, 500000, 600000]\ny4 = [100000, 200000, 300000, 400000, 500000, 600000]\ny5 = [100000, 200000, 300000, 400000, 500000, 600000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Cos | n0 = 200')\nax.plot(x, y2, 'g-', label='Cos | n0 = 400')\nax.plot(x, y3, 'b-', label='ReLU | n0 = 200')\nax.plot(x, y4, 'b-', label='ReLU | n0 = 400')\n\n# Set the title and labels\nax.set_title('Empirical Lipschitz Constant')\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Set the y-axis limits\nax.set_ylim(0, 400000)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ntime_steps = [0, 2000, 4000, 6000, 8000, 10000]\nwi_values = [3500, 4500, 5500, 6500, 7000, 7000]\nisq_values = [3500, 4500, 5500, 6500, 7000, 7000]\nwql_values = [3500, 4500, 5500, 6500, 7000, 7000]\ngreedy_values = [3500, 4500, 5500, 6500, 7000, 7000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the lines\nax.plot(time_steps, wi_values, 'r', label='WI')\nax.plot(time_steps, isq_values, 'g', label='ISQ')\nax.plot(time_steps, wql_values, 'm', label='WIQL')\nax.plot(time_steps, greedy_values, 'b', label='Greedy')\n\n# Set the y-axis limits\nax.set_ylim(3500, 7500)\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward Over Time')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\ntime_steps = [0, 25, 50, 75, 100, 125, 150, 175, 200]\nwi_values = [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15]\nisq_values = [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(time_steps, wi_values, label='WI', color='blue')\nax.plot(time_steps, isq_values, label='ISQ', color='orange')\n\n# Set labels and title\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\nax.set_title('Discounted Cumulative Reward Over Time')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points\nx1 = [-3, -2, -1, 0, 1]\ny1 = [1, 2, 3, 4, 5]\n\nx2 = [-3, -2, -1, 0, 1]\ny2 = [1, 2, 3, 4, 5]\n\nx3 = [-3, -2, -1, 0, 1]\ny3 = [1, 2, 3, 4, 5]\n\n# Plot the data points\nax.plot(x1, y1, 'o', color='orange')\nax.plot(x2, y2, 'o', color='blue')\nax.plot(x3, y3, 'o', color='green')\n\n# Set the title and labels\nax.set_title('Scatter Plot with Legends')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis with specified dimensions\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data points for each scatter plot\ndata_points = [\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, 0), (-2, 0), (-3, 0)],\n    [(-1, "}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [10, 50, 100, 500]\ny1 = [20, 20, 20, 20]\ny2 = [10, 10, 10, 10]\ny3 = [5, 5, 5, 5]\ny4 = [0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Plot the data with different colors and labels\nax.plot(x, y1, 'r-o', label='ActivityNet mIoU')\nax.plot(x, y2, 'o-y', label='Breakfast MoF')\nax.plot(x, y3, 'c-o', label='ActivityNet CIDER')\nax.plot(x, y4, 'k-o', label='QVHighlights mAP')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 600)\n\n# Set the tick marks on the x-axis\nax.set_xticks([0, 100, 500, 600])\n\n# Set the tick marks on the y-axis\nax.set_yticks([0, 5, 10, 15, 20, 25, 30, 35])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Define the data\ntime_steps = [0, 1, 2, 3]\nr_values = [45, 35, 25, 15]\ng_values = [45, 35, 25, 15]\nb_values = [45, 35, 25, 15]\n\n# Plot the data\nax.plot(time_steps, r_values, 'r', label='PR-based')\nax.plot(time_steps, g_values, 'g', label='GT')\nax.plot(time_steps, b_values, 'b', label='DRS')\n\n# Set the title and labels\nax.set_title('Plot of Values Over Time')\nax.set_xlabel('Time Step')\nax.set_ylabel('Values')\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0, 20, 40, 60, 80]\ny_clip = [0.53, 0.7, 0.75, 0.75, 0.75]\ny_laion_5k = [0.55, 0.7, 0.75, 0.75, 0.75]\ny_coco_5k = [0.55, 0.7, 0.75, 0.75, 0.75]\ny_laion_10k = [0.55, 0.7, 0.75, 0.75, 0.75]\ny_coco_10k = [0.55, 0.7, 0.75, 0.75, 0.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y_clip, color='black', label='clip')\nax.plot(x, y_laion_5k, color='#FFA500', label='laion (5k)')\nax.plot(x, y_coco_5k, color='#0000FF', label='coco (5k)')\nax.plot(x, y_laion_10k, color='#008000', label='laion (10k)')\nax.plot(x, y_coco_10k, color='#FF4500', label='coco (10k)')\n\n# Set the title and labels\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\nax.set_xlabel('Deposition IO Norm')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(0.53, 0.76)\n\n# Add a horizontal line at y=0.75\nax.axhline(y=0.75, color='r', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nn_values = [0, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8]\ncontent_values = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0]\norganization_values = [8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0]\nlanguage_values = [7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(n_values, content_values, label='Content', color='blue')\nax.plot(n_values, organization_values, label='Organization', color='orange')\nax.plot(n_values, language_values, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [300, 350, 400, 450, 500, 550, 600]\namericas = [100, 150, 200, 250, 300, 350, 400]\nasia = [100, 150, 200, 250, 300, 350, 400]\neurope = [100, 150, 200, 250, 300, 350, 400]\noceania = [100, 150, 200, 250, 300, 350, 400]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, africa, color='green', label='Africa')\nax.plot(years, americas, color='yellow', label='Americas')\nax.plot(years, asia, color='red', label='Asia')\nax.plot(years, europe, color='orange', label='Europe')\nax.plot(years, oceania, color='blue', label='Oceania')\n\n# Set the title and labels\nax.set_title('World Population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Set the y-axis limits\nax.set_ylim(0, 600)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Notre-Dame de Paris', 'Demi-Gods and Semi-Devils', 'The Count of Monte Cristo', 'Game of Thrones', 'Attack on Titan']\nscores = [6.2, 5.8, 5.4, 5.1, 4.8]\n\n# Create a bar chart\nplt.figure(figsize=(7.0, 5.0))\nbars = plt.bar(categories, scores, color='blue')\n\n# Add labels and title\nplt.xlabel('Categories')\nplt.ylabel('Scores')\nplt.title('Bar Chart of Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\nvalues = [50, 40, 30, 50, 50, 50, 50, 50, 50, 40]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Bar Chart of Values')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregion1 = [60, 60, 40, 40]\nregion2 = [80, 80, 60, 60]\nregion3 = [90, 70, 50, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Plot bars for Region 1\nax.bar(['Product A', 'Product B', 'Product C', 'Product D'], region1, color='green', label='Region 1')\n\n# Plot bars for Region 2\nax.bar(['Product A', 'Product B', 'Product C', 'Product D'], region2, color='blue', label='Region 2')\n\n# Plot bars for Region 3\nax.bar(['Product A', 'Product B', 'Product C', 'Product D'], region3, color='red', label='Region 3')\n\n# Set title and labels\nax.set_title('Average Monthly Sales by Product Across Regions')\nax.set_xlabel('Products')\nax.set_ylabel('Sales')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlengths = [0.9, 10.19, 20.29, 30.39, 40.49]\nspearmans = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a bar chart\nplt.bar(lengths, spearmans, color='blue')\n\n# Set the title and labels\nplt.title('Spearmans Correlation by Length')\nplt.xlabel('Length')\nplt.ylabel('Spearmans')\n\n# Set the y-axis limits\nplt.ylim(-1, 0.75)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\nvalues_beauty = [2.2, 11.2, 2.4, 19.9, 14.3]\nvalues_movielens = [3.0, 5.1, 4.1, 2.9, 3.1]\nvalues_yelp = [4.8, 5.1, 4.4, 4.8, 19.7]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot for Beauty\naxes[0].bar(categories, values_beauty, color='blue')\naxes[0].set_title('Beauty')\naxes[0].set_xlabel('Categories')\naxes[0].set_ylabel('%')\n\n# Plot for MovieLens-1M\naxes[1].bar(categories, values_movielens, color='red')\naxes[1].set_title('MovieLens-1M')\naxes[1].set_xlabel('Categories')\naxes[1].set_ylabel('%')\n\n# Plot for Yelp\naxes[2].bar(categories, values_yelp, color='green')\naxes[2].set_title('Yelp')\naxes[2].set_xlabel('Categories')\naxes[2].set_ylabel('%')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\nlanguages = ['EN', 'FR', 'ES', 'DE', 'IT']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nbars = ax.bar(models, improvement, color='blue')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Improve [%]')\nax.set_title('ENDEFRRITES sampled')\n\n# Add language legend\nlegend_labels = languages\nlegend_handles = [plt.Rectangle((0,0),1,1, color=color) for color in ['blue', 'orange', 'green', 'darkred', 'yellow']]\nax.legend(legend_handles, legend_labels, title='Fine-tuning Language')\n\n# Set y-axis limits\nax.set_ylim(-4, 4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\npheme_data = [\n    [0.82, 0.83, 0.81, 0.84, 0.85],\n    [0.82, 0.83, 0.81, 0.84, 0.85]\n]\nllm_data = [\n    [0.82, 0.83, 0.81, 0.84, 0.85],\n    [0.82, 0.83, 0.81, 0.84, 0.85]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(7, 5))\n\n# Plot data for Pheme\nfor i, data in enumerate(pheme_data):\n    axes[0].bar(range(len(data)), data, color='blue', label='Democratic' if i == 0 else 'Republican')\n    axes[0].bar(range(len(data)), [d - 0.05 for d in data], color='gray', label='Mixed' if i == 0 else 'Mixed')\n    axes[0].bar(range(len(data)), [d - 0.1 for d in data], color='red', label='Republican' if i == 0 else 'Republican')\n\n# Plot data for LLM-mis\nfor i, data in enumerate(llm_data):\n    axes[1].bar(range(len(data)), data, color='blue', label='Democratic' if i == 0 else 'Republican')\n    axes[1].bar(range(len(data)), [d - 0.05 for d in data], color='gray', label='Mixed' if i == 0 else 'Mixed')\n    axes[1].bar(range(len(data)), [d - 0.1 for d in data], color='red', label='Republican' if i == 0 else 'Republican')\n\n# Set labels and titles\naxes[0].set_title('Pheme')\naxes[1].set_title('LLM-mis')\naxes[0].set_xlabel('Pheme')\naxes[1].set_xlabel('LLM-mis')\naxes[0].set_ylabel('Macro F1-score')\naxes[1].set_ylabel('Macro F1-score')\n\n# Set x-ticks\naxes[0].set_xticks(range(len(pheme_data[0])))\naxes[1].set_xticks(range(len(llm_data[0])))\n\n# Set x-tick labels\naxes[0].set_xticklabels(['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL'])\naxes[1].set_xticklabels(['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL'])\n\n# Add legends\naxes[0].legend()\naxes[1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['1', '2', '3', '4', '5', '6']\nvalues = [\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('viridis', len(categories))\n\n# Plot the bars\nfor i, category in enumerate(categories):\n    ax.bar(category, values[i], color=cmap(i), label=category)\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\n\n# Set the tick labels\nax.set_yticks(range(0, 55, 10))\nax.set_yticklabels([str(x) for x in range(0, 55, 10)])\n\n# Add a legend\nax.legend(title='Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = {\n    'human': [100, 200, 300, 400, 500],\n    'gpt4': [100, 200, 300, 400, 500],\n    'gpt4-cot': [100, 200, 300, 400, 500]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Set the x-axis label\nax.set_xlabel('Count')\n\n# Set the y-axis label\nax.set_ylabel('Role')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 100, 200, 300, 400, 500, 600, 700, 800])\nax.set_xticklabels(['0', '100', '200', '300', '400', '500', '600', '700', '800'])\n\n# Set the tick labels for the y-axis\nax.set_yticks(list(data.keys()))\nax.set_yticklabels(['s1', 's2'])\n\n# Set the color map for the bars\ncmap = plt.cm.get_cmap('viridis', len(data['human']))\n\n# Plot the bars for each role\nfor i, (role, counts) in enumerate(data.items()):\n    ax.barh(role, counts, height=0.5, left=[0]*len(counts), color=cmap(i), label=role)\n\n# Add a legend to the plot\nax.legend(title='Role')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winograde', 'Average']\naccuracies = [\n    [53.0, 51.3, 56.4, 56.2],\n    [46.6, 45.8, 48.0, 46.7],\n    [45.3, 45.8, 44.5, 44.5],\n    [43.0, 43.7, 48.5, 48.5],\n    [53.1, 53.7, 53.1]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars for each task\nfor i, task_accuracies in enumerate(accuracies):\n    ax.bar(tasks[i], task_accuracies, color=plt.cm.tab20(i), label=f'Task {i+1}')\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Task Accuracy Comparison')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['M=3', 'M=4', 'M=5', 'M=6', 'M=7']\nvalues = [60, 60, 70, 60, 60]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add labels and title\nplt.xlabel('Categories')\nplt.ylabel('Performance')\nplt.title('Performance Metrics')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['DLMA-7B VS. LLAMA-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMA-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\ndlma_win = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\ntie = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\ndlma_lose = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbar_width = 0.35\nindex = range(len(categories))\n\ndlma_win_bars = ax.bar(index, dlma_win, bar_width, label='DLMA win', color='#00FF00')\ntie_bars = ax.bar([i + bar_width for i in index], tie, bar_width, label='Tie', color='#0000FF')\ndlma_lose_bars = ax.bar([i + 2 * bar_width for i in index], dlma_lose, bar_width, label='DLMA lose', color='#FF0000')\n\nax.set_xlabel('Match')\nax.set_ylabel('Percentage')\nax.set_title('DLMA vs. Baseline Methods On HHH (Evaluated by GPT4)')\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for plotting\ntime = [0, 10, 20, 30, 40]\ntrot = [0.95, 0.85, 0.75, 0.65, 0.55]\npace = [0.9, 0.8, 0.7, 0.6, 0.5]\nbound = [0.85, 0.75, 0.65, 0.55, 0.45]\npronk = [0.8, 0.7, 0.6, 0.5, 0.4]\ntransition = [0.4, 0.4, 0.4, 0.4, 0.4]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.bar(time, trot, color='green', label='trot')\nax.bar(time, pace, bottom=trot, color='red', label='pace')\nax.bar(time, bound, bottom=[t + p for t, p in zip(trot, pace)], color='purple', label='bound')\nax.bar(time, pronk, bottom=[t + p + b for t, p, b in zip(trot, pace, bound)], color='brown', label='pronk')\nax.bar(time, transition, bottom=[t + p + b + pr for t, p, b, pr in zip(trot, pace, bound, pronk)], color='gray', label='transition')\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.legend()\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nap1kL_wins = [68, 82, 68, 72, 68]\ntie = [24, 15, 22, 19, 23]\nag1k_wins = [8, 3, 10, 9, 9]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.35\nindex = range(len(labels))\n\nbars1 = ax.bar(index, ap1kL_wins, bar_width, label='AP-1kL wins', color='blue')\nbars2 = ax.bar([i + bar_width for i in index], tie, bar_width, label='Tie', color='purple')\nbars3 = ax.bar([i + 2 * bar_width for i in index], ag1k_wins, bar_width, label='AG-1k wins', color='gray')\n\nax.set_xlabel('Labels')\nax.set_ylabel('Values')\nax.set_title('Bar Chart with Multiple Y-Axes')\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(labels)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nbenefits_data = [14.8, 29.6, 9.4, 24.1]\nreliability_data = [9.5, 26.2, 9.5, 24.1]\nsecurity_data = [8.3, 26.2, 9.5, 24.1]\nprivacy_data = [24.1, 29.6, 9.5, 24.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot data\nax.bar(categories, benefits_data, color='red', label='Strong Disagree')\nax.bar(categories, reliability_data, bottom=benefits_data, color='orange', label='Disagree')\nax.bar(categories, security_data, bottom=[sum(x) for x in zip(benefits_data, reliability_data)], color='grey', label='Neutral')\nax.bar(categories, privacy_data, bottom=[sum(x) for x in zip(benefits_data, reliability_data, security_data)], color='blue', label='Agree')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Eye Movement')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny1_ours = [-8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0]\ny1_saliency = [-8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0]\n\n# Data for the second graph\nx2 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny2_ours = [-8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0]\ny2_saliency = [-8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0]\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 10.0))\n\n# Plot the first graph\nax1.plot(x1, y1_ours, 'b-', label='Ours')\nax1.plot(x1, y1_saliency, 'p-', label='Saliency-based Sampling')\nax1.set_title('Rate of Gain Change (%)')\nax1.set_xlabel('Brightness')\nax1.set_ylabel('Rate of Gain Change (%)')\nax1.legend()\n\n# Plot the second graph\nax2.plot(x2, y2_ours, 'b-', label='Ours')\nax2.plot(x2, y2_saliency, 'p-', label='Saliency-based Sampling')\nax2.set_title('Rate of Gain Change (%)')\nax2.set_xlabel('Rotation Angle (\u00b0)')\nax2.set_ylabel('Rate of Gain Change (%)')\nax2.legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nlabels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 3.1, 3.0, 3.0, 3.0, 3.0]\ncompleteness = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\nconciseness = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\nreadability = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot bars for each language model\nbars = ax.bar(labels, accuracy, color='blue', label='Accuracy')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(labels, completeness, bottom=accuracy, color='orange', label='Completeness')\nfor bar in bars:\n    yval = bar.get_height() + accuracy[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(labels, conciseness, bottom=[a + c for a, c in zip(accuracy, completeness)], color='red', label='Conciseness')\nfor bar in bars:\n    yval = bar.get_height() + sum([a, c]) + conciseness[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(labels, readability, bottom=[a + c + k for a, c, k in zip(accuracy, completeness, conciseness)], color='green', label='Readability')\nfor bar in bars:\n    yval = bar.get_height() + sum([a, c, k]) + readability[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Language Models')\nax.set_ylabel('Ratings')\nax.set_title('Ratings of Language Models on a Scale from 1-4')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nbars = plt.bar(models, accuracies, color='green')\n\n# Add labels and title\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\nplt.title('Model Accuracy Comparison')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nvalues = [\n    [78.8, 67.4, 44.2, 59.8],\n    [11.7, 18.1, 21.9, 21.0],\n    [9.5, 14.5, 33.9, 19.2]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nr1 = range(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create bars\nbars1 = ax.bar(r1, values[0], color='orange', width=bar_width, edgecolor='grey', label='Refined-Alpaca-1k-longest wins')\nbars2 = ax.bar(r2, values[1], color='blue', width=bar_width, edgecolor='grey', label='Alpaca-1k-longest wins')\nbars3 = ax.bar(r3, values[2], color='cyan', width=bar_width, edgecolor='grey', label='Alpaca-1k-longest losses')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart with Multiple Categories')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Ang', 'Cn', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nnegative = [100, 50, 50, 50, 100, 350, 50, 25]\npositive = [0, 0, 0, 0, 0, 0, 0, 0]\nnone = [0, 0, 0, 0, 0, 1000, 0, 0]\nmixed = [0, 0, 0, 0, 0, 0, 0, 25]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6, 4))\nbars = ax.bar(emotions, negative, color='red', label='negative')\nax.bar(emotions, positive, bottom=negative, color='green', label='positive')\nax.bar(emotions, none, bottom=[i + j for i, j in zip(negative, positive)], color='gray', label='none')\nax.bar(emotions, mixed, bottom=[i + j + k for i, j, k in zip(negative, positive, none)], color='orange', label='mixed')\n\n# Add labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency')\nax.set_title('Emotion Frequency Distribution')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['GPT-4V', 'RoboCodeX']\nsuccess_values = [0.8, 0.8]\noccupancy_error_values = [0.2, 0.2]\ngrounding_error_values = [0.1, 0.1]\ntrajectory_optimization_error_values = [0.1, 0.1]\ngripper_collision_error_values = [0.1, 0.1]\ngrasping_failed_values = [0.1, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars for each category\nbars = ax.bar(categories, success_values, color='green', label='Success')\nax.bar(categories, occupancy_error_values, bottom=success_values, color='orange', label='Occupancy Error')\nax.bar(categories, grounding_error_values, bottom=[sum(x) for x in zip(success_values, occupancy_error_values)], color='gray', label='Grounding Error')\nax.bar(categories, trajectory_optimization_error_values, bottom=[sum(x) for x in zip(success_values, occupancy_error_values, grounding_error_values)], color='blue', label='Trajectory optimization Error')\nax.bar(categories, gripper_collision_error_values, bottom=[sum(x) for x in zip(success_values, occupancy_error_values, grounding_error_values, trajectory_optimization_error_values)], color='yellow', label='Gripper collision')\nax.bar(categories, grasping_failed_values, bottom=[sum(x) for x in zip(success_values, occupancy_error_values, grounding_error_values, trajectory_optimization_error_values, gripper_collision_error_values)], color='purple', label='Grasping failed')\n\n# Set labels and title\nax.set_xlabel('Percentage of total trials')\nax.set_ylabel('Categories')\nax.set_title('Comparison of Errors')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndatasets = ['VOC 2012', 'COCO 2017']\ntransmission_delay = [3.5, 2.5]\n\n# Create a bar chart\nplt.figure(figsize=(6.0, 5.0))\nbars = plt.bar(datasets, transmission_delay, color='blue')\n\n# Add labels and title\nplt.xlabel('Datasets')\nplt.ylabel('Transmission Delay (ms)')\nplt.title('Transmission Delay by Dataset')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data\ncategories = ['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\nvalues = [1.2, 1.2, 1.2, 1.2, 1.2, 1.4]\ncolors = ['blue', 'red', 'orange']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(categories, values, color=colors)\n\n# Set labels and title\nax.set_xlabel('PDEs')\nax.set_ylabel('log L2')\nax.set_title('Comparison of Log L2 Values for Different Categories')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_data = [0.975, 0.975, 0.975, 0.975]\nsroi_data = [0.965, 0.965, 0.965, 0.965]\nciq_data = [0.97, 0.97, 0.97, 0.97]\ntid2013_data = [0.98, 0.98, 0.98, 0.98]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars for each model\nax.bar(models, live_data, color='blue', label='LIVE')\nax.bar(models, sroi_data, color='red', label='SROCC')\nax.bar(models, ciq_data, color='cyan', label='CIQ')\nax.bar(models, tid2013_data, color='yellow', label='TID2013')\n\n# Set title and labels\nax.set_title('Models')\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Mixtral-8x7b-Instr', 'GPT-3.5', 'GPT-4']\nzero_shot_values = [28.33, 56.11, 60.56]\none_shot_values = [31.11, 85.0, 99.44]\nds_agent_values = [6.11, 44.44, 42.78]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nbar_width = 0.2\nindex = range(len(categories))\n\n# Plot bars for each category\nbars_zero_shot = ax.bar([i - bar_width for i in index], zero_shot_values, bar_width, label='Zero-shot')\nbars_one_shot = ax.bar(index, one_shot_values, bar_width, label='One-shot')\nbars_ds_agent = ax.bar([i + bar_width for i in index], ds_agent_values, bar_width, label='DS-Agent')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('One pass rate (%)')\nax.set_title('One Pass Rate by Category')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_values = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_values = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_values = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, len(categories))\n\n# Set the y-axis tick labels\nax.set_yticks(range(len(categories)))\nax.set_yticklabels(categories)\n\n# Set the x-axis label\nax.set_xlabel('Percentage')\n\n# Set the title of the plot\nax.set_title('Comparison of Win, Tie, and Loss Percentages')\n\n# Plot the bars for each category\nbars = ax.barh(categories, win_values, color='blue', label='Win')\nbars2 = ax.barh(categories, tie_values, left=win_values, color='green', label='Tie')\nbars3 = ax.barh(categories, loss_values, left=[w + t for w, t in zip(win_values, tie_values)], color='red', label='Loss')\n\n# Add labels on top of the bars\nfor bar in bars:\n    width = bar.get_width()\n    ax.annotate(f'{width}%', xy=(width, bar.get_y() + bar.get_height()/2), xytext=(3, 0),\n                 textcoords=\"offset points\", ha='left', va='center')\n\nfor bar in bars2:\n    width = bar.get_width()\n    ax.annotate(f'{width}%', xy=(bar.get_x() + width, bar.get_y() + bar.get_height()/2), xytext=(3, 0),\n                 textcoords=\"offset points\", ha='left', va='center')\n\nfor bar in bars3:\n    width = bar.get_width()\n    ax.annotate(f'{width}%', xy=(bar.get_x() + width, bar.get_y() + bar.get_height()/2), xytext=(3, 0),\n                 textcoords=\"offset points\", ha='left', va='center')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create a bar chart\nplt.figure(figsize=(6.0, 2.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.xlabel('Category')\nplt.ylabel('Probability of Improvement')\n\n# Remove the y-axis ticks\nplt.yticks([])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 29.8, 100.0, 60.8]\nfollowing_related_format_error_rate = [100.0, 83.3, 50.7, 100.0, 91.7]\nfollowing_related_error_rate = [100.0, 48.1, 63.4, 100.0, 60.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for each step\nbars = ax.bar(steps, avg_following_rate, color='gray', label='Avg. Following Rate')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(steps, following_related_format_error_rate, bottom=avg_following_rate, color='blue', label='Following-related Format Error Rate')\nfor bar in bars:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(steps, following_related_error_rate, bottom=[sum(x) for x in zip(avg_following_rate, following_related_format_error_rate)], color='green', label='Following-related Error Rate')\nfor bar in bars:\n    yval = bar.get_height() + sum(x) for x in zip(avg_following_rate, following_related_format_error_rate)\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 12)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ncategories = ['coreutils', 'scp', 'tar', 'exim', 'menc.c', 'niginx', 'memc', 'bzip2', 'astar', 'gobmk', 'h264.', 'liba', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', '"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Llama2', 'Mistral']\nscores = [5.52, 5.53, 5.83, 5.54, 5.84]\nmt_bench_scores = [6.57, 6.75, 6.81, 6.9, 7.08]\n\n# Create a bar chart for MT-Bench Score\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(categories, mt_bench_scores, color='blue')\n\n# Set the title and labels\nax.set_title('MT-Bench Score')\nax.set_xlabel('Categories')\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclusters = [100, 1000]\nrandom_sampling = [49.98, 49.63]\nuniform = [51.05, 50.74]\ncluster_clip = [51.05, 50.74]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot bars for each cluster size\nax.bar(clusters, random_sampling, color='blue', label='Random Sampling')\nax.bar(clusters, uniform, color='blue', bottom=random_sampling, label='Uniform')\nax.bar(clusters, cluster_clip, color='orange', bottom=[x + y for x, y in zip(random_sampling, uniform)], label='ClusterClip')\n\n# Set title and labels\nax.set_title('Random Sampling vs Uniform vs ClusterClip')\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\n\n# Add a horizontal line at 50\nax.axhline(y=50, color='green', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['ResNet18', 'AlexNet', 'ResNet50']\nperturbations = ['0%', '50%', '4:8', '6:8', '75%', '87.50%', '7:8']\nspeedups = [\n    [1.0, 1.8, 2.6, 3.3, 4.6, 4.5, 7.4],\n    [1.0, 1.0, 1.9, 2.9, 3.4, 5.2, 6.1],\n    [1.0, 1.6, 1.8, 2.7, 2.9, 3.9, 4.3]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot bars for each category\nfor i, category in enumerate(categories):\n    ax.bar(perturbations, speedups[i], label=category, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Perturbation')\nax.set_ylabel('Speedup')\nax.set_title('Speedup vs Perturbation for Different Models')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\nvalues = [\n    [40, 20, 0, 0, 0, 0],\n    [60, 40, 0, 0, 0, 0],\n    [60, 40, 0, 0, 0, 0],\n    [60, 40, 0, 0, 0, 0],\n    [60, 40, 0, 0, 0, 0],\n    [60, 40, 0, 0, 0, 0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot bars with different colors\nfor i, category in enumerate(categories):\n    ax.bar(category, values[i], color=['green', 'blue', 'red', 'purple'])\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracies')\nax.set_title('LeetCode, DS-6.7b')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nrecost_wins = [53, 80, 116, 99, 179]\ntie_wins = [6, 33, 49, 50, 23]\nalpacawins_wins = [21, 67, 53, 103, 98]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nr1 = range(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create bars with different colors\nax.bar(r1, recost_wins, color='red', width=bar_width, edgecolor='grey', label='Recost (1% wins)')\nax.bar(r2, tie_wins, color='yellow', width=bar_width, edgecolor='grey', label='Tie')\nax.bar(r3, alpacawins_wins, color='blue', width=bar_width, edgecolor='grey', label='Alpaca wins')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Wins')\nax.set_title('Bar Chart of Wins by Category')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'Alti+', 'Max', 'STARE']\nfpr_non_aggregate = [35.15, 26.86, 19.08, 20.67, 58.99, 62.94, 66.19, 58.99, 36.63, 62.94]\nfpr_aggregate = [26.38, 22.09, 20.67, 20.67, 66.19, 62.94, 66.19, 66.19, 42.5, 62.94]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for non-aggregate FPR\nax.bar(brands, fpr_non_aggregate, color='green', label='Non-Aggregate')\n\n# Plot bars for aggregate FPR\nax.bar(brands, fpr_aggregate, bottom=fpr_non_aggregate, color='orange', label='Aggregate')\n\n# Set the title of the plot\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('FPR@90TPR')\n\n# Add a horizontal line at 30\nax.axhline(y=30, color='gray', linestyle='--')\n\n# Add a horizontal line at 20\nax.axhline(y=20, color='gray', linestyle='--')\n\n# Add a horizontal line at 10\nax.axhline(y=10, color='gray', linestyle='--')\n\n# Add a vertical line at the median position\nmedian_index = len(brands) // 2\nax.axvline(x=median_index, color='red', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 5.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nplt.xlabel('Semantic Category')\nplt.ylabel('Difference (%)')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [5, 10, 20]\ny1 = [66.3, 61.9, 53.8]\ny2 = [10.1, 13.6, 13.7]\ny3 = [49.3, 45.7, 41.6]\ny4 = [36.3, 31.5, 0]\ny5 = [48.0, 42.6, 36.5]\ny6 = [40.5, 36.5, 0]\ny7 = [43.8, 40.2, 30.6]\ny8 = [49.5, 42.8, 22.5]\ny9 = [64.7, 59.6, 22.5]\ny10 = [43.4, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Plot the data\nax.bar(x, y1, color='blue', label='Truthful Recall')\nax.bar(x, y2, bottom=y1, color='red', label='Misleading Recall')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='blue')\nax.bar(x, y4, bottom=[sum(y) for y in zip(y1, y2, y3)], color='red')\nax.bar(x, y5, bottom=[sum(y) for y in zip(y1, y2, y3, y4)], color='blue')\nax.bar(x, y6, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5)], color='red')\nax.bar(x, y7, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6)], color='blue')\nax.bar(x, y8, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7)], color='red')\nax.bar(x, y9, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7, y8)], color='blue')\nax.bar(x, y10, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9)], color='red')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Bar Chart with Multiple Bars')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = [\n    \"A12sci-middle\", \"PROST\", \"ARC-easy\", \"COMVE\", \"OpenBookQA\", \"SciQ\", \"NumSense\", \"CoQA\", \"ComQA2.0\", \n    \"ComQC\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \"ComQC2.0\", \n    \"ComQC"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\ncategories = [\n    'LSTM-2/7b/0.1', 'Zephyr-7b/0.1', 'Qwen-7b/0.1', 'MedMCQA', 'MedQA (USMLE)', 'PubMedQA',\n    'MMLU Anatomy', 'MMLU Clinical knowledge', 'MMLU College biology', 'MMLU Medical genetics', 'MMLU Professional medicine'\n]\nperformance_scores = [\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3]\n]\ngpt4_scores = [\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7],\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7],\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7],\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7],\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7],\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7],\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7],\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7],\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7],\n    [74.4, 75.8, 75.8, 76.4, 76.4, 79.2, 70.7]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar charts\nfor i, category in enumerate(categories):\n    ax.bar(range(len(performance_scores[i])), performance_scores[i], color='brown', alpha=0.7, label='Performance' if i == 0 else None)\n    ax.bar(range(len(gpt4_scores[i])), gpt4_scores[i], color='red', alpha=0.7, label='GPT4' if i == 0 else None)\n\n# Set the title and labels\nax.set_title('Performance and GPT4 Scores')\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\n\n# Set the x-tick labels\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFOE', 'AFEX', 'AFG', 'AFH', 'AFI', 'AFJ', 'AFK', 'AFL', 'AFP', 'AFP', 'AFR', 'AFS', 'AFSC', 'AFSL', 'AFSR', 'AFSS', 'AFST', 'AFTH', 'AFVC', 'AFVT', 'AFWA', 'AFWB', 'AFXC', 'AFXO', 'AFXP', 'AFXQ', 'AFXR', 'AFXS', 'AFXT', 'AFXU', 'AFXV', 'AFXW', 'AFXX', 'AFXY', 'AFXZ', 'AFY', 'AFZ', 'IC', 'SS']\nvalues_blue = [45, 42, 41, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nvalues_orange = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bars with blue and orange colors\nbars_blue = ax.bar(categories, values_blue, color='blue')\nbars_orange = ax.bar(categories, values_orange, color='orange', bottom=values_blue)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart with Blue and Orange Bars')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [3, 5, 7, 10]\ny1 = [-4.5, -4.5, -4.5, -4.5]\ny2 = [-4.5, -4.5, -4.5, -4.5]\ny3 = [-4.5, -4.5, -4.5, -4.5]\ny4 = [-4.5, -4.5, -4.5, -4.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, color='pink', label='LLAMA-Default')\nax.plot(x, y2, color='red', label='LLAMA-HAG')\nax.plot(x, y3, color='lightblue', label='Vicuna-Default')\nax.plot(x, y4, color='blue', label='Vicuna-HAG')\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Set the y-axis limits\nax.set_ylim(-5, 0)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nvalues = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set title and labels\nplt.title('Human Study')\nplt.xlabel('Categories')\nplt.ylabel('Percentage (%)')\n\n# Set y-axis limits\nplt.ylim(0, 90)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['COPR v.s. Golden (Human Eval)', 'COPR v.s. Golden (GPT-4 Eval)', 'COPR v.s. DPO-ER (Human Eval)', 'COPR v.s. DPO-ER (GPT-4 Eval)']\nsubcategories = ['HH', 'Reddit', 'IMDB', 'AVG']\nvalues1 = [[22, 50, 28], [40, 30, 60], [25, 40, 10], [35, 50, 20]]\nvalues2 = [[45, 50, 20], [50, 35, 30], [20, 50, 20], [35, 40, 20]]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Plot bars for the first set of data\nfor i, value in enumerate(values1):\n    ax.bar(categories[i], value[0], color='red', label='Win' if i == 0 else None)\n    ax.bar(categories[i], value[1], bottom=value[0], color='orange', label='Tie' if i == 0 else None)\n    ax.bar(categories[i], value[2], bottom=[value[0] + value[1]] * 3, color='pink', label='Lose' if i == 0 else None)\n\n# Plot bars for the second set of data\nfor i, value in enumerate(values2):\n    ax.bar(categories[i], value[0], color='red', label='Win' if i == 0 else None)\n    ax.bar(categories[i], value[1], bottom=value[0], color='orange', label='Tie' if i == 0 else None)\n    ax.bar(categories[i], value[2], bottom=[value[0] + value[1]] * 3, color='pink', label='Lose' if i == 0 else None)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Categories')\n\n# Set y-axis limits\nax.set_ylim(0, 100)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Accuracy', 'Unfairness']\nmovielens_values = [[35, 35, 35], [10, 10]]\ntenrec_values = [[18, 18, 18], [12, 12]]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot for Movielens\naxes[0].bar(categories, movielens_values[0], color='blue')\naxes[0].bar(categories, movielens_values[1], bottom=movielens_values[0], color='orange')\naxes[0].set_title('Movielens')\naxes[0].set_ylabel('Values')\n\n# Plot for Tenrec\naxes[1].bar(categories, tenrec_values[0], color='blue')\naxes[1].bar(categories, tenrec_values[1], bottom=tenrec_values[0], color='orange')\naxes[1].set_title('Tenrec')\naxes[1].set_ylabel('Values')\n\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\nimage_net_1k = [29, 60, 29, 87]\nimage_net_f = [0, 0, 0, 0]\npac_fno = [0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bars for each resolution\nbars = ax.bar(resolutions, accuracies, color='blue')\n\n# Add labels and title\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Add text annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0, 90)\n\n# Draw a horizontal line at the top of the plot\nax.axhline(y=80, color='blue', linestyle='--')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Level 1', 'Level 2', 'Level 4']\nvalues = [50.0, 50.0, 50.0]\nsub_values = [\n    [30.0, 22.0],\n    [28.0, 20.6],\n    [22.9, 16.8]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot bars for each category\nbars = ax.bar(categories, values, color='yellow')\n\n# Add sub-values on top of each bar\nfor bar, sub_val in zip(bars, sub_values):\n    height = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width() / 2, height, f'{sub_val[0]}k\\n{sub_val[1]}k', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('# Avg Uploaded Samples')\nax.set_title('Uploaded Samples by Category')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nvalues = [\n    [39.4, 32.84, 19.66, 26.82, 22],\n    [35.18, 33.58, 26.82, 22, 0],\n    [30, 28, 20.84, 22, 0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot bars for each category\nfor i, category in enumerate(categories):\n    ax.bar(range(len(values[i])), values[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Reward Values')\nax.set_title('Reward Values by Categories')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nprofessions = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvideo_counts = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nbars = plt.bar(professions, video_counts, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Number of Videos by Profession')\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = range(len(categories))\n\n# Plot the synthetic data bars\nbars_synthetic = ax.bar(index, synthetic_data, bar_width, label='Synthetic data')\n\n# Plot the human-authored data bars\nbars_human = ax.bar([i + bar_width for i in index], human_authored_data, bar_width, label='Human-authored data')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Categories')\nax.set_xticks([i + bar_width / 2 for i in index])\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'tiny', 'small', 'substantial', 'tall', 'short', 'medium', 'long', 'wide', 'narrow', 'slim', 'fat', 'thin', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nprobabilities = [0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a bar chart\nplt.figure(figsize=(6.0, 2.0))\nbars = plt.bar(categories, probabilities, color=['yellow', 'green', 'blue', 'blue', 'purple'])\n\n# Add labels and title\nplt.xlabel('Category')\nplt.ylabel('Probability of Improvement')\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.bar(emotions, frequencies, color='red')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each profession\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideo_counts = [600, 500, 400, 700, 800, 900]\n\n# Create a bar chart with the specified data\nplt.figure(figsize=(12.0, 8.0))\nbars = plt.bar(professions, video_counts, color=['red', 'orange', 'orange', 'green', 'cyan', 'blue'])\n\n# Set the title of the chart\nplt.title('Number of Videos by Profession')\n\n# Set the x-axis label\nplt.xlabel('Profession')\n\n# Set the y-axis label\nplt.ylabel('Number of Videos')\n\n# Set the tick labels for the y-axis\nplt.yticks(range(0, 900, 100))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nvalues = [40, 35, 30, 50, 45, 40, 35]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 5.0))\nbars = plt.bar(categories, values, color='red')\n\n# Add labels and title\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Bar Chart Example')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['New York -', 'Los Angeles -', 'Chicago -', 'Houston -', 'Phoenix -', 'Philadelphia -']\nexcellent = [50, 40, 30, 20, 10, 0]\ngood = [40, 30, 20, 10, 0, 0]\nmoderate = [30, 20, 10, 0, 0, 0]\npoor = [20, 10, 0, 0, 0, 0]\nvery_poor = [10, 0, 0, 0, 0, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.8\nindex = range(len(cities))\n\nbars_excellent = ax.bar(index, excellent, bar_width, label='Excellent', color='red')\nbars_good = ax.bar([i + bar_width for i in index], good, bar_width, label='Good', color='pink')\nbars_moderate = ax.bar([i + 2 * bar_width for i in index], moderate, bar_width, label='Moderate', color='lightgrey')\nbars_poor = ax.bar([i + 3 * bar_width for i in index], poor, bar_width, label='Poor', color='blue')\nbars_very_poor = ax.bar([i + 4 * bar_width for i in index], very_poor, bar_width, label='Very Poor', color='darkblue')\n\nax.set_xlabel('Cities')\nax.set_ylabel('Scores')\nax.set_title('City Scores')\nax.set_xticks([i + 2 * bar_width for i in index])\nax.set_xticklabels(cities)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [0, 0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot positive differences\nax.bar(categories, positive_differences, color='green', label='Positive Differences')\n\n# Plot negative differences\nax.bar(categories, negative_differences, color='red', label='Negative Differences')\n\n# Set labels and title\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Set y-axis limits\nax.set_ylim(0, 80)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [7, 7, 6, 6, 6, 6, 6, 5, 4, 3, 2, 1, 1, 1]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.bar(emotions, frequencies, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\nvalues = [4.8, 4.8, 4.8, 19.7, 19.7]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 8.0))\nbars = plt.bar(categories, values, color='red')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Yelp Ratings')\nplt.xlabel('Categories')\nplt.ylabel('Ratings (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the chart\ncategories = ['Patents Filed', 'Research Investment', 'Smartphone Usage', 'Internet Penetration']\nvalues = [2700, 2400, 2600, 3100]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 5.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Investment and Usage Metrics')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot bars for synthetic data\nbars_synthetic = ax.bar(categories, synthetic_data, color='blue', label='Synthetic Data')\n\n# Plot bars for human-authored data\nbars_human = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='orange', label='Human-Authored Data')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\ntime_0 = [0.4, 0.5, 0.3, 0.4, 0.6]\ntime_20 = [0.3, 0.4, 0.2, 0.3, 0.5]\ntime_40 = [0.2, 0.3, 0.1, 0.2, 0.4]\ntime_60 = [0.1, 0.2, 0.1, 0.1, 0.3]\n\n# Create a bar chart with the specified data\nplt.figure(figsize=(10.0, 8.0))\nbars = plt.bar(categories, time_0, color='blue')\nfor i, v in enumerate(time_0):\n    plt.text(i, v + 0.05, str(v), ha='center', va='bottom')\n\nbars = plt.bar(categories, time_20, bottom=time_0, color='cyan')\nfor i, v in enumerate(time_20):\n    plt.text(i, time_0[i] + v + 0.05, str(v), ha='center', va='bottom')\n\nbars = plt.bar(categories, time_40, bottom=[sum(x) for x in zip(time_0, time_20)], color='lightblue')\nfor i, v in enumerate(time_40):\n    plt.text(i, sum(x) for x in zip(time_0, time_20)) + v + 0.05, str(v), ha='center', va='bottom')\n\nbars = plt.bar(categories, time_60, bottom=[sum(x) for x in zip(time_0, time_20, time_40)], color='lightgreen')\nfor i, v in enumerate(time_60):\n    plt.text(i, sum(x) for x in zip(time_0, time_20, time_40)) + v + 0.05, str(v), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Scores by Category Over Time')\nplt.xlabel('Categories')\nplt.ylabel('Scores')\n\n# Set the y-axis limits\nplt.ylim(0, 0.7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['West', 'East', 'South', 'North']\nmetrics = [\n    [40.44, 54.46],\n    [25.36, 32.19, 56.03],\n    [39.63, 48.23, 92.15],\n    [32.84, 48.23, 65.49]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis labels\nax.set_xticks(range(len(regions)))\nax.set_xticklabels(regions)\n\n# Set the y-axis label\nax.set_ylabel('Air Quality Metrics')\n\n# Set the title of the plot\nax.set_title('Air Quality Metrics by Region')\n\n# Plot the data\nfor i, region_metrics in enumerate(metrics):\n    ax.barh(i, region_metrics, color='blue', alpha=0.7)\n    for j, value in enumerate(region_metrics):\n        ax.text(value + 0.5, i, f'{value:.2f}', va='center', ha='left')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\nscores_llama_default = [-2.2, -1.8, -1.4, -0.6]\nscores_llama_hag = [-2.3, -1.6, -1.4, -0.7]\nscores_vicuna_default = [-3.3, -2.2, -1.9, -0.8]\nscores_vicuna_hag = [-3.2, -2.2, -1.9, -0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bars for each category\nax.bar(categories, scores_llama_default, color='red', label='LLAMA-Default')\nax.bar(categories, scores_llama_hag, color='orange', label='LLAMA-HAG')\nax.bar(categories, scores_vicuna_default, color='blue', label='Vicuna-Default')\nax.bar(categories, scores_vicuna_hag, color='orange', label='Vicuna-HAG')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Constraint Words')\nax.set_ylabel('Score')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 3.5)\n\n# Set the y-axis limits\nax.set_ylim(-3.5, 0.5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_2018 = [-0.7, -0.5, -0.4, -0.3]\ngdp_growth_2019 = [-0.6, -0.4, -0.3, -0.2]\ngdp_growth_2020 = [-0.5, -0.3, -0.2, -0.1]\ngdp_growth_2021 = [-0.4, -0.2, -0.1, 0.0]\n\n# Create a bar chart with multiple bars for each country\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.2\nindex = range(len(countries))\n\nbars1 = ax.bar([i - bar_width for i in index], gdp_growth_2018, bar_width, label='GDP growth 2018')\nbars2 = ax.bar(index, gdp_growth_2019, bar_width, label='GDP growth 2019')\nbars3 = ax.bar([i + bar_width for i in index], gdp_growth_2020, bar_width, label='GDP growth 2020')\nbars4 = ax.bar([i + 2 * bar_width for i in index], gdp_growth_2021, bar_width, label='GDP growth 2021')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Country')\nax.set_ylabel('GDP Growth Rate (%)')\nax.set_title('Negative GDP Growth Rates by Country and Year')\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(countries)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\npercentages = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nbars = plt.bar(models, percentages, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set title and labels\nplt.title('Human Study')\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 85]\ncolors = ['blue', 'blue', 'blue', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Set the title of the chart\nax.set_title('Stacked Bar Chart of Transportation Data')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis limits\nax.set_ylim(0, 300)\n\n# Add a legend\nlegend_labels = ['Cars', 'Buses', 'Bikes', 'Pedestrians']\nax.legend(bars, legend_labels, loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_units = [80, 60, 40, 20, 0, 0, 0]\nproduct_a_sales = [70, 50, 30, 10, 0, 0, 0]\nproduct_c_sales = [60, 40, 20, 0, 0, 0, 0]\nproduct_e_sales = [50, 30, 10, 0, 0, 0, 0]\nproduct_f_sales = [40, 20, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the chart\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Set the x-axis label\nax.set_xlabel('Product Categories')\n\n# Set the y-axis label\nax.set_ylabel('Sales Units')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 90, 20))\nax.set_yticklabels(['0', '20', '40', '60', '80'])\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45)\n\n# Plot the bars\nbar_width = 0.8\nindex = range(len(categories))\n\n# Plot the bars for each category\nax.bar(index, sales_units, bar_width, color='lightgrey', label='Sales Units')\nax.bar(index, product_a_sales, bar_width, bottom=sales_units, color='red', label='Product A Sales')\nax.bar(index, product_c_sales, bar_width, bottom=[sum(x) for x in zip(sales_units, product_a_sales)], color='orange', label='Product C Sales')\nax.bar(index, product_e_sales, bar_width, bottom=[sum(x) for x in zip(sales_units, product_a_sales, product_c_sales)], color='yellow', label='Product E Sales')\nax.bar(index, product_f_sales, bar_width, bottom=[sum(x) for x in zip(sales_units, product_a_sales, product_c_sales, product_e_sales)], color='pink', label='Product F Sales')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [84.3, 9.12, 37.9]\nobserved_fgt = [83, 9.12, 36.7]\nfeature_embedding_distance = [0.83, 0.6, 0.11]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the y-axis limits\nax.set_ylim(-100, 100)\n\n# Set the x-axis labels\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the y-axis label\nax.set_ylabel('Feature Embedding Distance (%)')\n\n# Set the title\nax.set_title('Feature Embedding Distance')\n\n# Plot the bars\nbars = ax.bar(range(len(categories)), feature_embedding_distance, color='yellow')\n\n# Add text annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['1', '2', '3', '4', '5', '6']\nscores = [\n    [10, 8, 12, 10, 6, 8],\n    [11, 5, 10, 10, 12, 15],\n    [10, 8, 12, 10, 6, 8],\n    [11, 5, 10, 10, 12, 15],\n    [10, 8, 12, 10, 6, 8],\n    [11, 5, 10, 10, 12, 15]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the x-axis label\nax.set_xlabel('Human Annotator')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 51, 10))\nax.set_yticklabels(range(0, 51, 10))\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Plot the data\nfor i in range(len(scores)):\n    ax.bar(categories, scores[i], bottom=[sum(scores[j][i] for j in range(k)) for k in range(i+1)], color=plt.cm.tab20(i*2), label=f'Score {i+1}')\n\n# Add a legend to the plot\nax.legend(title='Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['coreutils', 'gizip', 'scp', 'libq', 'mcf', 'omnet.', 'perl']\nreg_opt_values = [100, 90, 80, 70, 60, 50, 40]\nbio_opt_values = [80, 70, 60, 50, 40, 30, 20]\nloop_opt_values = [60, 50, 40, 30, 20, 10, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the bars\nax.bar(categories, reg_opt_values, color='green', label='RegOpt')\nax.bar(categories, bio_opt_values, bottom=reg_opt_values, color='yellow', label='BIOPt')\nax.bar(categories, loop_opt_values, bottom=[sum(x) for x in zip(reg_opt_values, bio_opt_values)], color='blue', label='LoopOpt')\n\n# Set the title and labels\nax.set_title('Bar Chart with Multiple Stacked Bars')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(models, improvement, color='blue')\n\n# Add labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Improvement [%]')\nax.set_title('Model Performance Improvement by Language')\n\n# Set the y-axis limits\nax.set_ylim(-1, 5)\n\n# Add language labels on the right side of the plot\nfor i, bar in enumerate(bars):\n    height = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, height, languages[i], ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nfiscal_quarters = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 2.2, 1.0, 0.4, -0.8]\nnasdaq_index = [1.5, 2.2, 3.9, 4.6, -1.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the Dow Jones Index data\nax.bar(fiscal_quarters, dow_jones_index, color='green', label='Dow Jones Index')\n\n# Plot the Nasdaq Index data\nax.bar(fiscal_quarters, nasdaq_index, color='orange', label='Nasdaq Index')\n\n# Set the title and labels\nax.set_title('Index Change (%)')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\n\n# Add a legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(-5, 5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\nseries_labels = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1', '\u03bb=0.1']\nvalues = [\n    [39.4, 35.18, 34.06, 30.84],\n    [35.18, 34.06, 32.84, 30.84],\n    [34.06, 32.84, 30.84, 30.84],\n    [30.84, 30.84, 30.84, 30.84]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nfor i, series in enumerate(series_labels):\n    ax.bar(categories, values[i], label=series, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Series Labels')\nax.set_ylabel('Reward Values')\nax.set_title('Rewards by Series and Category')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntrue_recall = [46.3, 57.9, 53.8, 43.7]\nmisleading_recall = [30.1, 34, 20, 19.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot bars for True Recall\nax.bar(range(len(true_recall)), true_recall, color='black', label='Truthful Recall')\n\n# Plot bars for Misleading Recall\nax.bar(range(len(misleading_recall)), misleading_recall, color='pink', label='Misleading Recall')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Truthful:Misleading = 2:0')\n\n# Set y-axis limits\nax.set_ylim(-40, 60)\n\n# Add grid lines\nax.grid(axis='y')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year = [200, 300, 400, 500]\nprevious_year = [100, 200, 300, 400]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, len(categories))\n\n# Set the y-axis limits\nax.set_ylim(-1600, 0)\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(-1600, 0, 200))\nax.set_yticklabels([f'{i}' for i in range(-1600, 0, 200)])\n\n# Set the title of the chart\nax.set_title('Environmental Impact by Sector')\n\n# Set the labels for the bars\nbar_labels = ['Current Year', 'Previous Year']\n\n# Create the bar chart\nbars = ax.bar(categories, current_year, color='blue', label=bar_labels[0])\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(categories, previous_year, bottom=current_year, color='orange', label=bar_labels[1])\nfor bar in bars:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 13, 17, 22, 19]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nbars = plt.bar(cities, temperatures, color='skyblue')\n\n# Add labels and title\nplt.xlabel('City')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.title('Average City Temperatures')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [150, 140, 160, 170]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the chart\nax.set_title('Annual Pollution Emission Reductions')\n\n# Set the x-axis label\nax.set_xlabel('Regions')\n\n# Set the y-axis label\nax.set_ylabel('Emissions')\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(-200, 0, 25))\nax.set_yticklabels([str(i) for i in range(-200, 0, 25)])\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(regions)))\nax.set_xticklabels(regions)\n\n# Plot the bars for 2020 emissions\nbars_2020 = ax.bar(regions, emissions_2020, color='red', label='2020 Emissions')\n\n# Plot the bars for 2021 emissions\nbars_2021 = ax.bar(regions, emissions_2021, color='blue', label='2021 Emissions')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Question 1', 'Question 2', 'Question 3 Responses', 'Question 4', 'Question 5']\nresponses = [\n    [26.0, 10.0, 10.0, 10.0, 17.0],\n    [32.0, 10.0, 10.0, 10.0, 13.0],\n    [37.0, 22.0, 26.0, 35.0, 21.0],\n    [33.0, 19.0, 32.0, 35.0, 40.0],\n    [33.0, 19.0, 32.0, 35.0, 40.0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the color map for the bars\ncmap = plt.cm.get_cmap('tab20b')\n\n# Plot the bars\nfor i, category in enumerate(categories):\n    ax.bar(category, responses[i], color=cmap(i), label=category)\n\n# Set the title and labels\nax.set_title('Responses to Questions')\nax.set_xlabel('Questions')\nax.set_ylabel('Percentage')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Add a horizontal line at y=8\nplt.axhline(y=8, color='red', linestyle='--')\n\n# Set the title and labels\nplt.title('Bar Chart with Horizontal Line')\nplt.xlabel('Top-10 super families in training dataset')\nplt.ylabel('Accuracy')\n\n# Set the figure size\nplt.figure(figsize=(10.0, 6.0))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores = [1.5, 1.2, 0.8, 0.6]\nconstraint_words = [3, 5, 7, 10]\n\n# Create a bar chart with the specified data\nplt.figure(figsize=(10.0, 5.0))\nbars = plt.bar(categories, scores, color=['cyan', 'orange', 'blue', 'black'])\n\n# Add labels and title\nplt.xlabel('Num of Constraint Words')\nplt.ylabel('Score')\nplt.title('Taboo')\n\n# Set the y-axis limits\nplt.ylim(-2, 2)\n\n# Add constraint word values on top of each bar\nfor bar, value in zip(bars, constraint_words):\n    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 0.1, str(value), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntruthful_recall = [45.3, 56.9, 53.8, 27]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot bars for truthful recall\nax.bar(brands, truthful_recall, color='blue', label='Truthful Recall')\n\n# Plot bars for misleading recall\nax.bar(brands, misleading_recall, bottom=truthful_recall, color='pink', label='Misleading Recall')\n\n# Set labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Recall')\nax.set_title('Truthful:Misleading Recall')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nvalues = [29, 29, 25, 25, 30]\n\n# Create a bar chart\nplt.figure(figsize=(6.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.xlabel('Category')\nplt.ylabel('Probability of Improvement')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\ndisapproval = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunbothered = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bars\nax.bar(emotions, disapproval, color='red', label='Disapproval')\nax.bar(emotions, joy, color='red', bottom=disapproval, label='Joy')\nax.bar(emotions, relief, color='red', bottom=[d + j for d, j in zip(disapproval, joy)], label='Relief')\nax.bar(emotions, gratitude, color='red', bottom=[d + j + r for d, j, r in zip(disapproval, joy, relief)], label='Gratitude')\nax.bar(emotions, annoyance, color='red', bottom=[d + j + r + g for d, j, r, g in zip(disapproval, joy, relief, gratitude)], label='Annoyance')\nax.bar(emotions, nervousness, color='red', bottom=[d + j + r + g + a for d, j, r, g, a in zip(disapproval, joy, relief, gratitude, annoyance)], label='Nervousness')\nax.bar(emotions, pride, color='red', bottom=[d + j + r + g + a + n for d, j, r, g, a, n in zip(disapproval, joy, relief, gratitude, annoyance, nervousness)], label='Pride')\nax.bar(emotions, sadness, color='red', bottom=[d + j + r + g + a + n + p for d, j, r, g, a, n, p in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride)], label='Sadness')\nax.bar(emotions, unbothered, color='red', bottom=[d + j + r + g + a + n + p + s for d, j, r, g, a, n, p, s in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], label='Unbothered')\nax.bar(emotions, amusement, color='red', bottom=[d + j + r + g + a + n + p + s + u for d, j, r, g, a, n, p, s, u in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unbothered)], label='Amusement')\n\n# Set the title and labels\nax.set_title('Emotion Frequency Distribution')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency Metric 1 (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmovies = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores_0 = [0.4, 0.3, 0.2, 0.5, 0.7]\nscores_20 = [0.4, 0.3, 0.2, 0.5, 0.7]\nscores_40 = [0.4, 0.3, 0.2, 0.5, 0.7]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(movies, scores_0, color='cyan')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Movies')\nax.set_ylabel('Scores')\nax.set_title('Scores at Different Times')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncountries = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\ntotal_energy_consumption = [1600, 1500, 1400, 1300, 1200, 1100, 1000, 900]\nelectricity_production = [1000, 900, 800, 700, 600, 500, 400, 300]\nrenewable_energy_ratio = [10, 10, 10, 10, 10, 10, 10, 10]\nelectricity_consumption = [100, 200, 300, 400, 500, 600, 700, 800]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 2000)\n\n# Create a bar chart with different colors for each country\nbars = ax.bar(countries, total_energy_consumption, color='red')\nfor i, bar in enumerate(bars):\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), f'{total_energy_consumption[i]}', ha='center', va='bottom')\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Total Energy Consumption (10^2 PJ)')\nax.set_title('Energy Consumption and Production')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 31, 10))\n\n# Set the y-axis labels\nax.set_yticklabels(['0%', '10%', '20%', '30%'])\n\n# Set the title of the chart\nax.set_title('Original vs New')\n\n# Create a bar chart for synthetic data\nbars_synthetic = ax.bar(categories, synthetic_data, color='blue', label='Synthetic data')\n\n# Create a bar chart for human-authored data\nbars_human_authored = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='green', label='Human-authored data')\n\n# Add labels to the bars\nfor bar in bars_synthetic + bars_human_authored:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval/2, round(yval, 1), ha='center', va='center')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['Beauty', 'MovieLens-1M', 'Yelp', 'More']\nvalues_beauty = [5, 5, 6, 8, 10]\nvalues_movielens = [5.1, 3.0, 2.9, 3.1, 5.1]\nvalues_yelp = [-5, -5, -5, -0.7, -0.5, -0.5, 1.7, 4.8]\nvalues_more = [-6, -6, -6, -10, -3, -10, -3, 4.8]\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot Beauty\naxes[0, 0].barh(categories, values_beauty, color='blue')\naxes[0, 0].set_title('Beauty')\naxes[0, 0].set_xlabel('Percentage')\n\n# Plot MovieLens-1M\naxes[0, 1].barh(categories, values_movielens, color='red')\naxes[0, 1].set_title('MovieLens-1M')\naxes[0, 1].set_xlabel('Percentage')\n\n# Plot Yelp\naxes[1, 0].barh(categories, values_yelp, color='green')\naxes[1, 0].set_title('Yelp')\naxes[1, 0].set_xlabel('Percentage')\n\n# Plot More\naxes[1, 1].barh(categories, values_more, color='purple')\naxes[1, 1].set_title('More')\naxes[1, 1].set_xlabel('Percentage')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\nscores = [-3.2, -3.3, -3.2, -3.3]\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('Scores by group and constraint word count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\n\n# Set the x-axis limits\nax.set_xlim(-4, 4)\n\n# Set the y-axis limits\nax.set_ylim(-4, 1)\n\n# Add a legend\nax.legend(constraint_words, loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 100]\n\n# Data for the second bar chart\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 100]\n\n# Data for the third bar chart\nx3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny3 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 100]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the first bar chart\nax.bar(x1, y1, color='blue', alpha=0.7)\nax.axhline(y=0.5, color='red', linestyle='--')\n\n# Plot the second bar chart\nax.bar(x2, y2, color='pink', alpha=0.7)\n\n# Plot the third bar chart\nax.bar(x3, y3, color='purple', alpha=0.7)\n\n# Set the title and labels\nax.set_title('Bar Chart with Horizontal Line')\nax.set_xlabel('Top-10 super families in training dataset')\nax.set_ylabel('Accuracy/Precision')\n\n# Set the x-axis tick labels\nax.set_xticks(x1)\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nmanual_mapping = [65, 45, 35, 25, 75]\nllm_revision_wcot = [85, 65, 55, 45, 95]\nllm_revision_wcotg = [75, 55, 45, 35, 85]\nverifner = [60, 40, 30, 20, 70]\n\n# Data for the second chart\ncategories_bc5cdr = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nmanual_mapping_bc5cdr = [85, 65, 55, 45, 95]\nllm_revision_wcot_bc5cdr = [75, 55, 45, 35, 85]\nllm_revision_wcotg_bc5cdr = [60, 40, 30, 20, 70]\nverifner_bc5cdr = [55, 35, 25, 15, 65]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(9.0, 6.0))\n\n# Plot the first chart\naxes[0].bar(categories, manual_mapping, color='pink')\naxes[0].bar(categories, llm_revision_wcot, color='orange')\naxes[0].bar(categories, llm_revision_wcotg, color='green')\naxes[0].bar(categories, verifner, color='cyan')\naxes[0].set_title('GENIA')\naxes[0].set_ylabel('Error correction rate (%)')\n\n# Plot the second chart\naxes[1].bar(categories_bc5cdr, manual_mapping_bc5cdr, color='pink')\naxes[1].bar(categories_bc5cdr, llm_revision_wcot_bc5cdr, color='orange')\naxes[1].bar(categories_bc5cdr, llm_revision_wcotg_bc5cdr, color='green')\naxes[1].bar(categories_bc5cdr, verifner_bc5cdr, color='cyan')\naxes[1].set_title('BC5CDR')\naxes[1].set_ylabel('Error correction rate (%)')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscore_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscore_b = [15, 15, 15, 15, 15, 15, 15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot bars for Score A\nbars_a = ax.bar(models, score_a, color='red')\n\n# Plot bars for Score B\nbars_b = ax.bar(models, score_b, color='blue', bottom=score_a)\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Score (%)')\nax.set_title('Human Study')\n\n# Add value labels on top of the bars\nfor bar in bars_a:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nfor bar in bars_b:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set y-axis limits\nax.set_ylim(0, 85)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET']\nmacro_f1_scores = [80, 80, 80, 80]\nparty_colors = ['blue', 'orange', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot bars for each pheme\nfor i, p in enumerate(pheme):\n    ax.bar(p, macro_f1_scores[i], color=party_colors[i % len(party_colors)])\n\n# Set labels and title\nax.set_xlabel('Pheme')\nax.set_ylabel('Macro F1-score')\nax.set_title('Pheme vs Macro F1-score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nroles = ['human', 'gpt4', 'gpt4-cot']\ncounts = [800, 800, 800]\ncolors = ['blue', 'blue', 'blue']\n\n# Create a bar chart\nplt.bar(roles, counts, color=colors)\n\n# Set the title of the plot\nplt.title('Resonance Preference Plot for rich-context')\n\n# Set the x-axis label\nplt.xlabel('Role')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the tick labels for the y-axis\nplt.yticks([0, 200, 400, 600, 800])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_values = [20.4, 23.8, 14.3, 16.7, 0]\nbrainwave_values = [7.1, 38.1, 14.3, 16.7, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot the bars for Effort\nax.bar(categories, effort_values, color='red', label='Effort')\n\n# Plot the bars for Brainwave\nax.bar(categories, brainwave_values, color='green', label='Brainwave')\n\n# Set the title and labels\nax.set_title('Survey Results')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny1_ours = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny1_saliency = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\n\n# Data for the second graph\nx2 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny2_ours = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\ny2_saliency = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n# Data for the third graph\nx3 = range(-150, 130, 10)\ny3_ours = [40, 40, 40, 40, 40, 40, 40, 40, 40, 40]\ny3_saliency = [40, 40, 40, 40, 40, 40, 40, 40, 40, 40]\n\n# Data for the fourth graph\nx4 = range(-150, 130, 10)\ny4_ours = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\ny4_saliency = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 6.0))\n\n# Plot the first graph\naxs[0, 0].bar(x1, y1_ours, color='red', label='Ours')\naxs[0, 0].bar(x1, y1_saliency, color='blue', label='Saliency-based Sampling')\naxs[0, 0].set_title('Rate of Gain Change[%]')\naxs[0, 0].set_xlabel('Brightness')\naxs[0, 0].set_ylabel('Rate of Gain Change[%]')\naxs[0, 0].legend()\n\n# Plot the second graph\naxs[0, 1].bar(x2, y2_ours, color='red', label='Ours')\naxs[0, 1].bar(x2, y2_saliency, color='blue', label='Saliency-based Sampling')\naxs[0, 1].set_title('Rate of Gain Change[%]')\naxs[0, 1].set_xlabel('Scale')\naxs[0, 1].set_ylabel('Rate of Gain Change[%]')\naxs[0, 1].legend()\n\n# Plot the third graph\naxs[1, 0].bar(x3, y3_ours, color='red', label='Ours')\naxs[1, 0].bar(x3, y3_saliency, color='blue', label='Saliency-based Sampling')\naxs[1, 0].set_title('Rate of Gain Change[%]')\naxs[1, 0].set_xlabel('Rotation Angle [\u00b0]')\naxs[1, 0].set_ylabel('Rate of Gain Change[%]')\naxs[1, 0].legend()\n\n# Plot the fourth graph\naxs[1, 1].bar(x4, y4_ours, color='red', label='Ours')\naxs[1, 1].bar(x4, y4_saliency, color='blue', label='Saliency-based Sampling')\naxs[1, 1].set_title('Rate of Gain Change[%]')\naxs[1, 1].set_xlabel('Rotation Angle [\u00b0]')\naxs[1, 1].set_ylabel('Rate of Gain Change[%]')\naxs[1, 1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nlabels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nvalues = [3.5, 2.3, 4.4, 1.3, -0.7]\ncolors = ['blue', 'red', 'orange', 'yellow', 'green']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(labels, values, color=colors)\n\n# Set the title of the chart\nax.set_title('Model Performance Improvement by Language')\n\n# Set the y-axis label\nax.set_ylabel('Improvement [p]')\n\n# Set the x-axis label\nax.set_xlabel('Model with Language')\n\n# Set the y-axis limits\nax.set_ylim(-5, 5)\n\n# Add horizontal lines at specific y-values\nfor y in range(-4, 5, 2):\n    ax.axhline(y=y, color='black', linestyle='-')\n\n# Add vertical lines at specific x-values\nfor x in range(5):\n    ax.axvline(x=x, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['Random', 'Ours', 'SOTA']\nvalues_random = [66.3, 61.9, 53.8]\nvalues_ours = [49.3, 45.7, 41.6]\nvalues_sota = [36.3, 31.5, 40.2]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot for Truthful:Misleading = 2:0\naxes[0, 0].bar(categories, values_random, color='blue')\naxes[0, 0].bar(categories, values_ours, color='red', bottom=values_random)\naxes[0, 0].bar(categories, values_sota, color='blue', bottom=[v + o for v, o in zip(values_random, values_ours)])\naxes[0, 0].set_title('Truthful:Misleading = 2:0')\n\n# Plot for Truthful:Misleading = 2:1\naxes[0, 1].bar(categories, values_random, color='blue')\naxes[0, 1].bar(categories, values_ours, color='red', bottom=values_random)\naxes[0, 1].bar(categories, values_sota, color='blue', bottom=[v + o for v, o in zip(values_random, values_ours)])\naxes[0, 1].set_title('Truthful:Misleading = 2:1')\n\n# Plot for Truthful:Misleading = 2:2\naxes[1, 0].bar(categories, values_random, color='blue')\naxes[1, 0].bar(categories, values_ours, color='red', bottom=values_random)\naxes[1, 0].bar(categories, values_sota, color='blue', bottom=[v + o for v, o in zip(values_random, values_ours)])\naxes[1, 0].set_title('Truthful:Misleading = 2:2')\n\n# Plot for Truthful:Misleading = 1:2\naxes[1, 1].bar(categories, values_random, color='blue')\naxes[1, 1].bar(categories, values_ours, color='red', bottom=values_random)\naxes[1, 1].bar(categories, values_sota, color='blue', bottom=[v + o for v, o in zip(values_random, values_ours)])\naxes[1, 1].set_title('Truthful:Misleading = 1:2')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first subplot\ndata1 = [\n    [50, 40, 30, 20, 10],\n    [55, 45, 35, 25, 15],\n    [60, 50, 40, 30, 20],\n    [65, 55, 45, 35, 25],\n    [70, 60, 50, 40, 30]\n]\n\n# Data for the second subplot\ndata2 = [\n    [55, 45, 35, 25, 15],\n    [60, 50, 40, 30, 20],\n    [65, 55, 45, 35, 25],\n    [70, 60, 50, 40, 30],\n    [75, 65, 55, 45, 35]\n]\n\n# Data for the third subplot\ndata3 = [\n    [50, 40, 30, 20, 10],\n    [55, 45, 35, 25, 15],\n    [60, 50, 40, 30, 20],\n    [65, 55, 45, 35, 25],\n    [70, 60, 50, 40, 30]\n]\n\n# Data for the fourth subplot\ndata4 = [\n    [55, 45, 35, 25, 15],\n    [60, 50, 40, 30, 20],\n    [65, 55, 45, 35, 25],\n    [70, 60, 50, 40, 30],\n    [75, 65, 55, 45, 35]\n]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot data for each subplot\nfor ax, data in zip(axes.flatten(), [data1, data2, data3, data4]):\n    ax.bar(range(1, 6), data[0], color='red')\n    ax.bar(range(1, 6), data[1], color='blue')\n    ax.bar(range(1, 6), data[2], color='green')\n    ax.bar(range(1, 6), data[3], color='orange')\n    ax.bar(range(1, 6), data[4], color='purple')\n\n# Set titles for each subplot\ntitles = [\n    \"Human Labeling and Agreement Bias Checking 1\",\n    \"Human Labeling and Agreement Bias Checking 2\",\n    \"Human Labeling and Agreement Bias Checking 3\",\n    \"Human Labeling and Agreement Bias Checking 4\"\n]\n\nfor ax, title in zip(axes.flatten(), titles):\n    ax.set_title(title)\n    ax.set_xlabel(\"Human Annotator\")\n    ax.set_ylabel(\"Scores\")\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_search_scores = [54.9, 71.5, 79.2, 60.3, 54.5, 42.4, 7.1, 89.2, 2.0]\nbeam_search_scores = [38.3, 79.2, 60.3, 56.8, 92.6, 83.3, 80.2, 86.4, 83.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Comparison by Model')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(models)))\nax.set_xticklabels(models)\n\n# Plot the bars for contrastive search scores\nbars_cs = ax.bar(range(len(models)), contrastive_search_scores, color='cyan', edgecolor='black')\n\n# Plot the bars for beam search scores\nbars_bs = ax.bar(range(len(models)), beam_search_scores, color='orange', edgecolor='black', bottom=contrastive_search_scores)\n\n# Add text annotations to the top of each bar\nfor bar in bars_cs:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nfor bar in bars_bs:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}',\n                xy=(bar.get_x() + bar.get_width() / 2, contrastive_search_scores[bar.get_x()] + height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\ndatasets = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ndata1 = [150.0, 180.0, 75.0, 90.0, 80.0]\ndata2 = [2.5, 2.0, 1.5, 2.0, 2.8]\ndata3 = [60.0, 55.0, 70.0, 72.0, 70.0]\ndata4 = [80.0, 85.0, 80.0, 88.0, 88.0]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first dataset\naxes[0, 0].bar(datasets, data1, color='orange')\naxes[0, 0].set_title('Dataset 1')\n\n# Plot the second dataset\naxes[0, 1].bar(datasets, data2, color='blue')\naxes[0, 1].set_title('Dataset 2')\n\n# Plot the third dataset\naxes[1, 0].bar(datasets, data3, color='green')\naxes[1, 0].set_title('Dataset 3')\n\n# Plot the fourth dataset\naxes[1, 1].bar(datasets, data4, color='yellow')\naxes[1, 1].set_title('Dataset 4')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the chart\ncolors = ['neutral', 'yellow high', 'yellow low', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'orange high', 'orange low']\nsam_ratings = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]\nbars = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot bars\nfor i, color in enumerate(colors):\n    ax.bar(color, sam_ratings[i], color='blue')\n\n# Set labels and title\nax.set_xlabel('color')\nax.set_ylabel('SAM rating')\nax.set_title('Dominance')\n\n# Set x-axis ticks\nax.set_xticks(bars)\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Define the data for each activity\nactivities = ['Gaming Duration', 'Exercise Duration', 'Reading Duration', 'Music Playtime']\ndurations = [20, 30, 40, 50, 60, 70, 80, 90]\ngaming_duration = [10, 15, 20, 25, 30, 35, 40, 45]\nexercise_duration = [15, 20, 25, 30, 35, 40, 45, 50]\nreading_duration = [20, 25, 30, 35, 40, 45, 50, 55]\nmusic_playtime = [10, 15, 20, 25, 30, 35, 40, 45]\n\n# Plot the data\nax.plot(durations, gaming_duration, label='Gaming Duration')\nax.plot(durations, exercise_duration, label='Exercise Duration')\nax.plot(durations, reading_duration, label='Reading Duration')\nax.plot(durations, music_playtime, label='Music Playtime')\n\n# Set the title and labels\nax.set_title('Daily Activity Durations')\nax.set_xlabel('Duration (minutes)')\nax.set_ylabel('Activity')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Llama-70b (T2TT)', 'Llama-70b (S2TT)']\nbleu_values = [18, 18]\nbleu_errors = [[2, 2], [2, 2]]\nbloeu_values = [20, 20]\nbloeu_errors = [[2, 2], [2, 2]]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot BLEU values with error bars\nax.errorbar(categories, bleu_values, yerr=bleu_errors, fmt='o', capsize=5, label='BLEU')\n\n# Plot BLOEU values with error bars\nax.errorbar(categories, bloeu_values, yerr=bloeu_errors, fmt='o', capsize=5, label='BLOEU')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of BLEU and BLOEU Scores')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nlabels = ['AlphaBeta', 'z+', 'Gamma(\u03b3 = 0.05)', 'Gamma(\u03b3 = 0.1)', 'Gamma(\u03b3 = 0.25)']\nvalues = [50, 45, 40, 35, 30]\n\n# Plot the bars\nbars = ax.bar(labels, values, color='white', edgecolor='black')\n\n# Add orange lines\nfor bar in bars:\n    height = bar.get_height()\n    ax.plot([bar.get_x(), bar.get_x() + bar.get_width()], [height, height], color='orange')\n\n# Set the y-axis limits\nax.set_ylim(25, 60)\n\n# Set the title\nax.set_title('Bar Chart with Orange Lines')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\nvalues = [\n    [875, 875],\n    [875, 875],\n    [850, 850],\n    [850, 850],\n    [825, 825]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(category, values[i], color='blue')\n\n# Set the title and labels\nax.set_title('Execution Accuracy')\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(750, 900)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nregion_labels = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\naccuracy_values = [0.88, 0.87, 0.83]\n\n# Data for the second plot\nslice_mean_error_values = [9.00, 9.33, 10.00, 11.00, 12.00, 13.00, 14.00, 15.00, 16.00, 17.00, 18.00, 19.00, 20.00]\n\n# Create the figure and subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for Region Classification Accuracy\nax1.bar(region_labels, accuracy_values, color=['blue', 'brown', 'green'])\nax1.set_title('Region Classification Accuracy')\nax1.set_ylabel('Accuracy')\n\n# Plot for Slice Mean Error\nax2.bar(range(len(slice_mean_error_values)), slice_mean_error_values, color=['blue', 'brown', 'green', 'blue', 'brown', 'green', 'blue', 'brown', 'green', 'blue', 'brown', 'green', 'blue'])\nax2.set_title('Slice Mean Error (ms)')\nax2.set_xlabel('Slice')\nax2.set_ylabel('Error')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = [\n    [5, 10, 15],\n    [3, 8, 13],\n    [7, 12, 17],\n    [9, 14, 19]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 5))\n\n# Plot each dataset\nfor i, row in enumerate(data):\n    ax.plot(row, [i] * len(row), 'o-', lw=2)\n\n# Set the title\nax.set_title('Z-Score')\n\n# Set the x-axis label\nax.set_xlabel('Z-Score')\n\n# Set the y-axis label\nax.set_ylabel('Dataset')\n\n# Set the y-axis limits\nax.set_ylim(-1, 4)\n\n# Set the x-axis limits\nax.set_xlim(0, 20)\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='--')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nbars = ax.bar(categories, [sum(v) for v in values], color='blue')\n\n# Add text annotations to each bar\nfor bar, val in zip(bars, values):\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Mean')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data setup\nruns = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\nvalues = [np.random.randint(20, 100, 10) for _ in range(10)]\ncolors = ['blue', 'green', 'red', 'orange', 'purple', 'cyan', 'magenta', 'yellow', 'brown', 'pink']\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8, 4))\nfor i, run in enumerate(runs):\n    ax.bar(run, values[i], color=colors[i % len(colors)], edgecolor='black')\n    ax.plot([run, run], [min(values[i]), max(values[i])], color='black')\n\n# Adding red dots\nfor i, run in enumerate(runs):\n    ax.plot(run, 40, 'ro')\n    ax.plot(run, 60, 'ro')\n\nax.set_ylabel('Value')\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncategories = ['AR', 'LSTMAlpha', 'LSTMBeta', 'AE', 'EncDecAD', 'SRCNN', 'AnomalyTransformer', 'TimesNet', 'Donut', 'TFAD']\nvalues = [\n    [0.8, 0.6, 0.4, 0.2],\n    [0.9, 0.7, 0.5, 0.3],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.7, 0.5, 0.3],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.7, 0.5, 0.3],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.7, 0.5, 0.3],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.7, 0.5, 0.3]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plotting the first subplot\nfor i, category in enumerate(categories):\n    ax = axes[0]\n    ax.barh(category, values[i], color='blue')\n    ax.set_xlabel('Value by one')\n    ax.set_title('All in one')\n\n# Plotting the second subplot\nfor i, category in enumerate(categories):\n    ax = axes[1]\n    ax.barh(category, values[i], color='green')\n    ax.set_xlabel('One by one')\n    ax.set_title('All in one')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 3, figsize=(10, 4))\n\n# Define the data\ndata = [\n    [0.8, 0.9, 0.7],\n    [0.6, 0.5, 0.4],\n    [0.7, 0.8, 0.6],\n    [0.5, 0.4, 0.3],\n    [0.6, 0.5, 0.4],\n    [0.7, 0.8, 0.6]\n]\n\n# Plot the data\nfor i in range(2):\n    for j in range(3):\n        ax = axes[i, j]\n        ax.scatter(range(len(data)), data[i*3 + j])\n        ax.set_title(f'Sentence {i*3 + j + 1}')\n        ax.set_xlabel('Index')\n        ax.set_ylabel('Value')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata = {\n    'Our Model': [2.4, 2.6],\n    'NTM+CL': [2.4, 2.6]\n}\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Plot the first subplot\naxes[0, 0].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[0, 0].set_title('Ratings')\naxes[0, 0].set_yticklabels(['Our Model', 'NTM+CL'])\naxes[0, 0].set_xlabel('Rating')\n\n# Plot the second subplot\naxes[0, 1].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[0, 1].set_title('Intrusion')\naxes[0, 1].set_yticklabels(['Our Model', 'NTM+CL'])\naxes[0, 1].set_xlabel('Intrusion')\n\n# Plot the third subplot\naxes[1, 0].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[1, 0].set_title('Ratings')\naxes[1, 0].set_yticklabels(['Our Model', 'NTM+CL'])\naxes[1, 0].set_xlabel('Rating')\n\n# Plot the fourth subplot\naxes[1, 1].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[1, 1].set_title('Intrusion')\naxes[1, 1].set_yticklabels(['Our Model', 'NTM+CL'])\naxes[1, 1].set_xlabel('Intrusion')\n\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ngroups = ['target Group', 'control Group']\nmetrics = ['Digit span', 'Lexical decision', 'Lexical decision', 'Reaction time', 'Trail making']\nvalues = [\n    [7, 6, 6],\n    [2.0, 1.8, 1.8],\n    [1.6, 1.6, 1.4],\n    [1.0, 1.0, 1.0],\n    [1.0, 1.0, 1.0],\n    [0.9, 0.9, 0.9],\n    [0.8, 0.8, 0.8],\n    [0.7, 0.7, 0.7],\n    [0.6, 0.6, 0.6],\n    [0.5, 0.5, 0.5],\n    [0.4, 0.4, 0.4],\n    [0.3, 0.3, 0.3],\n    [0.2, 0.2, 0.2],\n    [0.1, 0.1, 0.1]\n]\n\n# Create subplots\nfig, axes = plt.subplots(2, 4, figsize=(10.0, 5.0), sharey=True)\n\n# Plot each metric\nfor ax, metric in zip(axes.flatten(), metrics):\n    if metric == 'Digit span':\n        ax.bar(groups, values[0], color='blue')\n    elif metric == 'Lexical decision':\n        ax.bar(groups, values[1], color='orange')\n    elif metric == 'Reaction time':\n        ax.bar(groups, values[3], color='blue')\n    elif metric == 'Trail making':\n        ax.bar(groups, values[4], color='orange')\n    ax.set_title(metric)\n    ax.set_ylim(0, 2.5)\n    ax.set_yticks([0.5, 1, 1.5, 2, 2.5])\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmethods = ['BG', 'IBP', 'SSP', 'NBP']\naccuracy = [80, 60, 70, 60]\ncolors = ['brown', 'green', 'blue', 'purple']\n\n# Create a bar chart\nplt.figure(figsize=(9.0, 5.0))\nbars = plt.bar(methods, accuracy, color=colors)\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set labels and title\nplt.xlabel('Prediction Accuracy vD1')\nplt.ylabel('Methods')\nplt.title('Methods')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nsearch_depth = [50, 100, 150, 200, 350]\nrewards = [\n    [-0.04, -0.04, -0.04],\n    [-0.04, -0.04, -0.04],\n    [-0.02, -0.02],\n    [-0.02, -0.02],\n    [0.02, 0.02]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nbars = ax.bar(search_depth, [sum(reward) for reward in rewards], color='blue')\n\n# Add labels and title\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\nax.set_title('Bar Chart of Rewards vs Search Depth')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 38.1, 29.5]\ncolors = ['pink', 'orange', 'green', 'purple']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Plot bars\nfor i, activity in enumerate(activities):\n    ax.bar(activity, durations[i], color=colors[i])\n\n# Set title and labels\nax.set_title('Daily Activity Durations')\nax.set_xlabel('Activity')\nax.set_ylabel('Duration (minutes)')\n\n# Set y-axis limits\nax.set_ylim(0, 90)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment']\nmean_values = [2.3, 2.1, 2.4, 2.0, 2.2]\nmedian_values = [1.9, 1.7, 1.8, 1.6, 1.9]\niqr_mean = [2.2, 2.1, 2.3, 2.0, 2.1]\niqr_median = [1.8, 1.6, 1.7, 1.5, 1.8]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), sharey=True)\n\n# Plot for Mean Value\naxes[0, 0].bar(categories, mean_values, color='blue')\naxes[0, 0].set_title('Mean Value')\n\n# Plot for Median Value\naxes[0, 1].bar(categories, median_values, color='green')\naxes[0, 1].set_title('Median Value')\n\n# Plot for IQR Mean\naxes[1, 0].bar(categories, iqr_mean, color='cyan')\naxes[1, 0].set_title('IQR Mean')\n\n# Plot for IQR Median\naxes[1, 1].bar(categories, iqr_median, color='orange')\naxes[1, 1].set_title('IQR Median')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SOCP No Learning', 'SOCP Learning (Proposed)', 'FMPC']\nangles = [-40, -20, 0, 20, 40]\nvalues_socp_no_learning = [5.6, 3.6, 1.6, 0.4, -0.4]\nvalues_socp_proposed = [5.6, 3.6, 1.6, 0.4, -0.4]\nvalues_fmpc = [5.6, 3.6, 1.6, 0.4, -0.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for each category\nfor i, angle in enumerate(angles):\n    ax.bar(categories, values_socp_no_learning[i], label=f'{angle}\u00b0', color='blue')\n    ax.bar(categories, values_socp_proposed[i], bottom=values_socp_no_learning[i], label=f'{angle}\u00b0', color='green')\n    ax.bar(categories, values_fmpc[i], bottom=[sum(x) for x in zip(values_socp_no_learning[i], values_socp_proposed[i])], label=f'{angle}\u00b0', color='lightgreen')\n\n# Set labels and title\nax.set_xlabel('Thrust Angle [\u00b0]')\nax.set_ylabel('Angular Frequency [rad/s]')\nax.set_title('Comparison of Thrust Angle and Angular Frequency')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\nvalues = [45, 55, 35, 15]\ncolors = ['blue', 'purple', 'orange', 'red']\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nbars = plt.bar(categories, values, color=colors)\n\n# Add labels and title\nplt.xlabel('Categories')\nplt.ylabel('Performance Gap (%)')\nplt.title('Performance Metrics')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\nhuman_scores = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2]\nrem_scores = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(12, 3))\n\n# Plot each category\nfor ax, category in zip(axes, categories):\n    ax.bar(range(len(human_scores)), human_scores, color='green')\n    ax.set_title(category)\n    ax.set_xlabel('Human Normalized Score')\n    ax.set_ylabel('REM Normalized Score')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]\ny1 = [25, 25, 25, 25, 25, 25, 25]\ny2 = [30, 30, 30, 30, 30, 30, 30]\ny3 = [35, 35, 35, 35, 35, 35, 35]\ny4 = [40, 40, 40, 40, 40, 40, 40]\ny5 = [45, 45, 45, 45, 45, 45, 45]\ny6 = [50, 50, 50, 50, 50, 50, 50]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='SOCP Learning (Proposed)')\nax.plot(x, y2, 'y-', label='SOCP No Learning')\nax.plot(x, y3, 'r-', label='FMPC')\n\n# Set the title and labels\nax.set_title('Thrust Angle vs Angular Frequency')\nax.set_xlabel('Angular Frequency [rad/s]')\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [1, 2, 3, 4]\ny1 = [9, 10, 9, 10]\ny2 = [8, 9, 8, 9]\ny3 = [7, 8, 7, 8]\ny4 = [6, 7, 6, 7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='GMML (25%-75%)')\nax.plot(x, y2, 'b-', label='GML (25%-75%)')\nax.plot(x, y3, 'g-', label='AO (25%-75%)')\nax.plot(x, y4, 'c-', label='Perfect')\n\n# Set the title and labels\nax.set_title('Method')\nax.set_xlabel('CEE (dB)')\nax.set_ylabel('SE (bps/Hz)')\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the y-axis limits\nax.set_ylim(4, 12)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata_linear = [\n    [10, 20, 30, 40, 50],\n    [60, 70, 80, 90, 100],\n    [110, 120, 130, 140, 150]\n]\n\ndata_exponential = [\n    [10, 20, 30, 40, 50],\n    [60, 70, 80, 90, 100],\n    [110, 120, 130, 140, 150]\n]\n\ndata_sigmoidal = [\n    [10, 20, 30, 40, 50],\n    [60, 70, 80, 90, 100],\n    [110, 120, 130, 140, 150]\n]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(25, 8))\n\n# Plotting the data\nfor ax, data in zip(axes, [data_linear, data_exponential, data_sigmoidal]):\n    for row in data:\n        ax.plot(row, 'bo-')\n\n# Setting titles and labels\naxes[0].set_title('Linear travel times')\naxes[1].set_title('Exponential travel times')\naxes[2].set_title('Sigmoidal travel times')\n\n# Adjusting layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\nhospital1 = [92, 87, 85]\nhospital2 = [94, 88, 86]\nhospital3 = [90, 85, 84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot bars for each category\nax.bar(categories, hospital1, color='blue', label='Hospital 1')\nax.bar(categories, hospital2, bottom=hospital1, color='green', label='Hospital 2')\nax.bar(categories, hospital3, bottom=[x + y for x, y in zip(hospital1, hospital2)], color='pink', label='Hospital 3')\n\n# Set labels and title\nax.set_xlabel('Modality')\nax.set_ylabel('AUC')\nax.set_title('AUC by Modality and Hospital')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata_025 = [23.4, 23.2, 23.0, 23.0, 23.0]\ndata_01 = [23.4, 23.2, 23.0, 23.0, 23.0]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for 0.25 HIAR\naxes[0].bar(range(len(data_025)), data_025, color='blue')\naxes[0].set_title('0.25 HIAR')\naxes[0].set_xlabel('Samples')\naxes[0].set_ylabel('PSNR (dB)')\naxes[0].set_yticks(np.arange(22.2, 23.5, 0.2))\naxes[0].grid(True)\n\n# Plot for 0.1 HIAR\naxes[1].bar(range(len(data_01)), data_01, color='red')\naxes[1].set_title('0.1 HIAR')\naxes[1].set_xlabel('Samples')\naxes[1].set_ylabel('PSNR (dB)')\naxes[1].set_yticks(np.arange(19.2, 20.3, 0.2))\naxes[1].grid(True)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-80, 80, 400)\ny = np.linspace(-80, 80, 400)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X / 20) * np.cos(Y / 20)\nZ2 = np.sin(X / 30) * np.cos(Y / 30)\n\n# Plot the data\nc1 = ax.contourf(X, Y, Z1, cmap='Oranges')\nc2 = ax.contourf(X, Y, Z2, cmap='Blues')\n\n# Add colorbar\nfig.colorbar(c1, ax=ax, label='Ground Truth')\nfig.colorbar(c2, ax=ax, label='Generated')\n\n# Set the title\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Set the x and y limits\nax.set_xlim(-80, 80)\nax.set_ylim(-80, 80)\n\n# Set the x and y ticks\nax.set_xticks(np.arange(-80, 90, 20))\nax.set_yticks(np.arange(-80, 90, 20))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function\nZ = np.sin(X * Y) + np.cos(X + Y)\n\n# Create a color map\ncmap = plt.get_cmap('coolwarm')\n\n# Plot the contour plot\nplt.contourf(X, Y, Z, cmap=cmap, levels=20)\n\n# Set the color bar\ncbar = plt.colorbar()\ncbar.set_label('Color Bar Label')\n\n# Set the title and labels\nplt.title(r'$\\lambda(x, z)$')\nplt.xlabel('$x_1$')\nplt.ylabel('$x_2$')\n\n# Set the figure size\nplt.figure(figsize=(8.0, 6.0))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title and labels\nax.set_title('DBP (mmHg) vs. SBP (mmHg)')\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\n\n# Define the data points\nx = [100, 110, 120, 130, 140, 150, 160]\ny_female = [90, 90, 90, 90, 90, 90, 90]\ny_male = [90, 90, 90, 90, 90, 90, 90]\n\n# Plot the data\nax.plot(x, y_female, 'b-', label='Female')\nax.plot(x, y_male, 'r-', label='Male')\n\n# Set the grid\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks([100, 110, 120, 130, 140, 150, 160])\nax.set_yticks([50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points\nx = np.linspace(-4, 4, 100)\ny = np.sin(x) * 10\n\n# Plot the data\nplt.plot(x, y, 'b-')\n\n# Set the title and labels\nplt.title('Sine Wave')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Set the limits for the x-axis\nplt.xlim(-4, 4)\n\n# Set the grid\nplt.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the radii of the circles\nradii = [10, 8, 6, 4, 2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw concentric circles\nfor radius in radii:\n    circle = plt.Circle((5, 5), radius, color='lightcoral', fill=False)\n    ax.add_artist(circle)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Remove the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data\nx = np.arange(8, 16)\ny = np.array([15, 14, 13, 12, 11, 10, 9])\n\n# Plot the data\nax.plot(x, y, marker='o', linestyle='-', color='red')\n\n# Set the title and labels\nax.set_title('Plot of Iteration vs. Time')\nax.set_xlabel('Time')\nax.set_ylabel('Iteration')\n\n# Set the y-axis limits\nax.set_ylim(0, 20)\n\n# Add a color bar\ncbar = fig.colorbar(ax.images[0], ax=ax, orientation='vertical')\ncbar.set_label('Color Scale')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the range of x values\nx = np.linspace(0, 10, 100)\n\n# Define the function y = 2x^2\ny = 2 * x**2\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the function\nax.plot(x, y, color='pink')\n\n# Set the limits for x and y axes\nax.set_xlim(0, 10)\nax.set_ylim(0, 200)\n\n# Set the aspect ratio to 'equal' to maintain the shape of the parabola\nax.set_aspect('equal', adjustable='datalim')\n\n# Remove the y-axis\nax.yaxis.set_visible(False)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [-1.0, -0.5, 0.0, 0.5, 1.0]\ny = [0.0, 0.2, 0.4, 0.6, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\nax.set_xlabel('Spearman Coefficient')\nax.set_ylabel('Density')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(7, 16)\ny1 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\ny2 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02]\ny3 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\ny4 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Random Bundle', color='blue')\nax.plot(x, y2, label='Increase Price', color='pink')\nax.plot(x, y3, label='Strategic (Ours)', color='green')\nax.plot(x, y4, label='Reserved price p_i', color='red')\n\n# Set the title and labels\nax.set_title('Price Distribution')\nax.set_xlabel('p')\nax.set_ylabel('Shape Density')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for plotting\nx = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\ny1 = [14, 12, 10, 8, 6, 6]\ny2 = [14, 12, 10, 8, 6, 6]\ny3 = [14, 12, 10, 8, 6, 6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Gucci', color='blue')\nax.plot(x, y2, label='Chanel', color='green')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Deep Ens.', 'Dropout', 'Laplace', 'SNP', 'HET-XL', 'Baseline', 'GP', 'Shallow Ens.', 'DUQ', 'Corr. Pred.']\nlog_probabilities = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.590, -0.819]\ndistributions = ['Distributional', 'Distributional', 'Distributional', 'Distributional', 'Distributional', 'Distributional', 'Distributional', 'Distributional', 'Deterministic', 'Deterministic']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, log_probabilities, color='green')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Log Probability')\nax.set_title('Bar Chart of Log Probabilities')\n\n# Set the y-axis limits\nax.set_ylim(-1.75, 0.75)\n\n# Add distribution labels\nfor bar, dist in zip(bars, distributions):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, dist, ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 4, 8]\ny1 = [5, 6, 7, 6]\ny2 = [6, 6, 6, 6]\ny3 = [5, 6, 6, 6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Baseline', color='blue')\nax.plot(x, y2, label='SoftMoE (unchanged)', color='green')\nax.plot(x, y3, label='SoftMoE (\u2202 NumExperts)', color='purple')\n\n# Set the title and labels\nax.set_title('Expert dimension')\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human Normalized Score')\n\n# Set the y-axis limits\nax.set_ylim(5, 7)\n\n# Add a horizontal line at y=6\nax.axhline(y=6, color='blue', linestyle='-')\n\n# Add a vertical line at x=4\nax.axvline(x=4, color='blue', linestyle='-')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\nbaseline_1 = [0.748, 0.762, 0.709]\nbaseline_2 = [0.759, 0.748, 0.687]\nfedmm = [0.78, 0.78, 0.713]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars for each hospital\nbars = ax.bar(hospitals, baseline_1, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(hospitals, baseline_2, bottom=baseline_1, color='orange')\nfor bar in bars:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(hospitals, fedmm, bottom=[sum(x) for x in zip(baseline_1, baseline_2)], color='green')\nfor bar in bars:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Hospitals')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by hospital and method')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'GPT-4 Buyer (valuation 40)': [-15, -10, -5, 0],\n    'Claude-2.1 Buyer (valuation 40)': [-15, -10, -5, 0],\n    'Claude-2 Buyer (valuation 40)': [-15, -10, -5, 0],\n    'GPT-3.5 Buyer (valuation 40)': [-15, -10, -5, 0]\n}\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 5.0), sharey=True)\n\n# Plot data on each subplot\nfor ax, (key, values) in zip(axes.flatten(), data.items()):\n    ax.bar(range(len(values)), values, color='blue')\n    ax.set_title(key)\n    ax.set_ylabel('Value')\n    ax.set_yticks([-20, -10, 0])\n    ax.set_xticks([])\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['left'].set_position('zero')\n    ax.spines['bottom'].set_visible(False)\n\n# Set the x-axis labels for the bottom row\naxes[1, 0].set_xlabel('GPT-4')\naxes[1, 1].set_xlabel('Claude-2.1')\naxes[1, 2].set_xlabel('Claude-2')\naxes[1, 3].set_xlabel('GPT-3.5')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['[m]', '[\u0394R]', '[\u0394R^-1]', '[none]']\nvalues = [0.96, 0.86, 0.78, 0.80]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.bar(categories, values, color='gray')\n\n# Add text labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('DNN x red (k=1)')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\nvalues = [1.9, 1.7, 1.5, 1.3, 1.1]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Bar Chart with Value Labels')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['a', 'b', 'c']\nperformance_values = [\n    [85, 75, 65, 55],\n    [85, 75, 65, 55],\n    [85, 75, 65, 55]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot bars for each category\nfor i, values in enumerate(performance_values):\n    ax.bar(categories, values, color=['orange', 'yellow', 'blue'], label=f'Category {chr(97 + i)}')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Performance')\nax.set_title('Performance Metrics by Category')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['128/0.5/0.0001', '128/0.5/0.0001', '256/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.3/0.0001', '64/0.5/0.0001', '64/0.5/0.0001']\nvalues = [0.9, 0.9, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\n\n# Create a bar chart with the specified data\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Set the title of the chart\nplt.title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nplt.xlabel('Hyperparameters')\n\n# Set the y-axis label\nplt.ylabel('Metrics')\n\n# Set the y-axis limits\nplt.ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncountries1 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [29, 27, 25, 24, 35]\n\n# Data for the second chart\ncountries2 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues2 = [28, 26, 24, 22, 34]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 1, figsize=(6.0, 6.0))\n\n# Plot the first chart\nbars1 = axes[0].bar(countries1, values1, color='purple')\nfor bar in bars1:\n    yval = bar.get_height()\n    axes[0].text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Plot the second chart\nbars2 = axes[1].bar(countries2, values2, color='purple')\nfor bar in bars2:\n    yval = bar.get_height()\n    axes[1].text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set titles for each subplot\naxes[0].set_title('Higher Education Enrollment Rate')\naxes[1].set_title('Student-Teacher Ratio')\n\n# Set x-axis labels\nfor ax in axes:\n    ax.set_xlabel('Country')\n    ax.set_ylabel('Rate')\n\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncategories = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 10400, 3200]\n\n# Data for the second chart\nforest_coverage = [52, 34, 25, 38, 21, 25, 32, 20, 18, 10]\n\n# Data for the third chart\nrenewable_energy_usage = [45, 45, 45, 45, 45, 45, 45, 45, 45, 45]\n\n# Create subplots\nfig, axes = plt.subplots(3, 1, figsize=(6.0, 9.0))\n\n# First chart: Annual Carbon Dioxide Emissions\naxes[0].bar(categories, emissions, color='blue')\naxes[0].set_title('Annual Carbon Dioxide Emissions')\naxes[0].set_ylabel('Millions of Metric Tons')\n\n# Second chart: Forest Coverage Rate\naxes[1].bar(categories, forest_coverage, color='green')\naxes[1].set_title('Forest Coverage Rate')\naxes[1].set_ylabel('% of Land Area')\n\n# Third chart: Renewable Energy Usage\naxes[2].bar(categories, renewable_energy_usage, color='red')\naxes[2].set_title('Renewable Energy Usage')\naxes[2].set_ylabel('% of Total Energy Consumption')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\ndata = {\n    'Crime Rate': [50, 60, 70],\n    'Happiness Index': [40, 50, 60],\n    'Social Security Coverage': [80, 90, 100],\n    'Political Participation': [70, 80, 90]\n}\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 1, figsize=(10.0, 9.0), sharex=True)\n\n# Plot each bar chart\nfor ax, (title, values) in zip(axes, data.items()):\n    ax.bar(['Detroit', 'Philadelphia', 'Baltimore'], values, color='blue')\n    ax.set_title(title)\n    ax.set_ylabel('Percentage')\n    ax.set_ylim(0, 100)\n    ax.grid(True)\n\n# Set the title for the entire figure\nfig.suptitle('(c) Baltimore')\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\njudge_names = ['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human']\nexpert_scores = [85, 75, 90, 80]\nblue_scores = [65, 55, 70, 60]\nyellow_scores = [70, 60, 75, 65]\nred_scores = [80, 70, 85, 75]\ngreen_scores = [75, 65, 80, 70]\npink_scores = [85, 75, 90, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Set the x-axis labels\nax.set_xlabel('Judge')\nax.set_ylabel('Judge Accuracy (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Set the x-axis ticks\nax.set_xticks(range(len(judge_names)))\nax.set_xticklabels(judge_names)\n\n# Plot the bars\nbar_width = 0.2\nindex = range(len(judge_names))\nax.bar([i - bar_width for i in index], expert_scores, bar_width, label='Expert', color='lightgrey')\nax.bar(index, blue_scores, bar_width, label='Blue', color='blue')\nax.bar([i + bar_width for i in index], yellow_scores, bar_width, label='Yellow', color='orange')\nax.bar([i - bar_width for i in index], red_scores, bar_width, label='Red', color='red')\nax.bar(index, green_scores, bar_width, label='Green', color='green')\nax.bar([i + bar_width for i in index], pink_scores, bar_width, label='Pink', color='pink')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\nspring_temperatures = [12, 14, 13, 16]\nautumn_temperatures = [11, 13, 12, 15]\nspring_rainfall = [800, 900, 700, 1100]\nautumn_rainfall = [700, 800, 600, 1000]\nwind_speeds = [5, 4, 3, 6]\nwind_quality_index = [3, 2, 4, 5]\nair_quality_index = [50, 40, 60, 70]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0), gridspec_kw={'width_ratios': [1, 1], 'height_ratios': [1, 1]})\n\n# Plot 1: Annual Average Temperature\naxes[0, 0].bar(cities, spring_temperatures, color='orange', label='Spring')\naxes[0, 0].bar(cities, autumn_temperatures, bottom=spring_temperatures, color='pink', label='Autumn')\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].legend()\n\n# Plot 2: Annual Rainfall\naxes[0, 1].bar(cities, spring_rainfall, color='green', label='Spring')\naxes[0, 1].bar(cities, autumn_rainfall, bottom=spring_rainfall, color='blue', label='Autumn')\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].legend()\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, wind_speeds, color='blue', label='Spring')\naxes[1, 0].bar(cities, wind_speeds, color='purple', label='Autumn')\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].legend()\n\n# Plot 4: Air Quality Index\naxes[1, 1].bar(cities, air_quality_index, color='blue', label='Spring')\naxes[1, 1].bar(cities, air_quality_index, color='purple', label='Autumn')\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [0, 0, 0, 0, 0]\nrenewable_energy_usage = [25, 20, 15, 10, 5]\n\n# Create a bar chart\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot energy consumption data\ncolor = 'tab:purple'\nax1.set_xlabel('Energy Consumption (Petajoules)')\nax1.set_ylabel('Energy Consumption', color=color)\nax1.bar(countries, energy_consumption, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for renewable energy usage\nax2 = ax1.twinx()\ncolor = 'tab:blue'\nax2.set_ylabel('Renewable Energy Usage (%)', color=color)\nax2.bar(countries, renewable_energy_usage, color=color, alpha=0.7)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Set the title of the plot\nax1.set_title('Total Energy Consumption by Country and Renewable Energy Usage by Country')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Refrigerator', 'Washing Machine', 'Dishwasher']\nvalues = [0.15, 0.05, 0.15]\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nbars = ax.bar(categories, values, color='blue')\n\n# Add model labels on top of each bar\nfor bar, model in zip(bars, models):\n    height = bar.get_height()\n    ax.annotate(model,\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set y-axis limits\nax.set_ylim(-0.1, 0.3)\n\n# Set title\nax.set_title('Energy Efficiency Ratings by Appliance Model')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Wind', 'Solar', 'Hydro', 'Nuclear']\nefficiency_scores = [\n    [90, 80, 70, 60],\n    [95, 85, 75, 65],\n    [92, 82, 72, 62],\n    [93, 83, 73, 63]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for each category\nfor i, scores in enumerate(efficiency_scores):\n    ax.bar(categories, scores, color=['blue', 'green', 'purple', 'orange'][i % 4], label=f'Category {i+1}')\n\n# Set labels and title\nax.set_xlabel('Energy Assessment Entity')\nax.set_ylabel('Efficiency and Cost Scores')\nax.set_title('Energy Assessment Entity')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 75, 65, 55, 45, 35, 25, 15, 5, 5]\nhigher_education_enrollment = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for high school graduation\nbars_high_school = ax.bar(regions, high_school_graduation, color='green')\n\n# Plot bars for higher education enrollment\nbars_higher_education = ax.bar(regions, higher_education_enrollment, color='yellow', bottom=high_school_graduation)\n\n# Set the title of the plot\nax.set_title('Educational Metrics by Region')\n\n# Set the y-axis label\nax.set_ylabel('Percentage (%)')\n\n# Set the x-axis label\nax.set_xlabel('Region')\n\n# Add a legend\nax.legend(['High School Graduation', 'Higher Education Enrollment'])\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 30.1, 53.8, 19.4]\nmisleading_recall = [34.0, 57.9, 43.7, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot area\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Comparison of Recall Rates Across Products')\n\n# Set the labels for the x-axis\nax.set_xlabel('Products')\n\n# Set the labels for the y-axis\nax.set_ylabel('Recall Rate (%)')\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 51, 10))\nax.set_yticklabels([str(i) for i in range(0, 51, 10)])\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(products)))\nax.set_xticklabels(products)\n\n# Set the tick parameters for the x-axis\nax.tick_params(axis='x', which='both', bottom=False, labelbottom=True)\n\n# Set the tick parameters for the y-axis\nax.tick_params(axis='y', which='both', left=False, labelleft=True)\n\n# Set the grid lines\nax.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Plot the bars for truthful recall\nbars_truthful = ax.bar(range(len(products)), truthful_recall, color='blue', label='Truthful Recall')\n\n# Plot the bars for misleading recall\nbars_misleading = ax.bar(range(len(products)), misleading_recall, color='orange', label='Misleading Recall')\n\n# Add text annotations for truthful recall values\nfor bar in bars_truthful:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}%', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3),\n                textcoords=\"offset points\", ha='center', va='bottom')\n\n# Add text annotations for misleading recall values\nfor bar in bars_misleading:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}%', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3),\n                textcoords=\"offset points\", ha='center', va='bottom')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsupport = [15, 75]\ndelivery = [18, 82]\nproduct_quality = [20, 78]\nreturns = [12, 85]\npricing = [17, 80]\nwebsite_usability = [10, 88]\ncheckout_process = [8, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars for each category\nax.bar(categories, support, color='blue', label='Support')\nax.bar(categories, delivery, color='green', label='Delivery')\nax.bar(categories, product_quality, color='blue', label='Product Quality')\nax.bar(categories, returns, color='purple', label='Returns')\nax.bar(categories, pricing, color='orange', label='Pricing')\nax.bar(categories, website_usability, color='blue', label='Website Usability')\nax.bar(categories, checkout_process, color='cyan', label='Checkout Process')\n\n# Set labels and title\nax.set_xlabel('Complaint Rates')\nax.set_ylabel('Satisfaction Scores')\nax.set_title('Customer Satisfaction by Complaint Rate')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 78, 85, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 80, 10, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for agree rates\nfor i, rate in enumerate(agree_rates):\n    ax.bar(categories[i], rate, color='lightcoral', label='Agree' if i == 0 else None)\n\n# Plot bars for disagree rates\nfor i, rate in enumerate(disagree_rates):\n    ax.bar(categories[i], rate, color='lightblue', label='Disagree' if i == 0 else None)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Rates (%)')\nax.set_title('Customer Satisfaction Rates')\n\n# Add grid lines\nax.grid(axis='y')\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nvalues = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 8.0))\nbars = plt.bar(categories, values, color='green')\n\n# Add black lines at the bottom of each bar\nfor bar in bars:\n    plt.plot([bar.get_x(), bar.get_x() + bar.get_width()], [bar.get_height(), bar.get_height()], color='black')\n\n# Set the y-axis limits\nplt.ylim(0, 0.25)\n\n# Remove the y-axis ticks and labels\nplt.yticks([])\nplt.ylabel('Impact on Plant Growth (\u0394 to control)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for New York\nnew_york_data = [250, 175, 175, 150, 150]\n\n# Data for Los Angeles\nlos_angeles_data = [230, 160, 150, 150, 150]\n\n# Data for Chicago\nchicago_data = [230, 160, 150, 150, 150]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot for New York\naxes[0].bar(['Traffic Volume', 'Public Transit', 'Accident Rate'], new_york_data, color=['green', 'blue', 'red'])\naxes[0].set_title('New York')\naxes[0].set_ylim(100, 275)\n\n# Plot for Los Angeles\naxes[1].bar(['Traffic Volume', 'Public Transit', 'Accident Rate'], los_angeles_data, color=['green', 'blue', 'red'])\naxes[1].set_title('Los Angeles')\naxes[1].set_ylim(100, 275)\n\n# Plot for Chicago\naxes[2].bar(['Traffic Volume', 'Public Transit', 'Accident Rate'], chicago_data, color=['green', 'blue', 'red'])\naxes[2].set_title('Chicago')\naxes[2].set_ylim(100, 275)\n\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = [\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Plot the data\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.plot([j, j], [i, i + 1], color='black', linewidth=0.5)\n        ax.plot([j, j + 1], [i + 1, i + 1], color='black', linewidth=0.5)\n        ax.plot([j + 1, j + 1], [i + 1, i], color='black', linewidth=0.5)\n        ax.plot([j + 1, j], [i, i], color='black', linewidth=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [-4.0, -3.0, -2.0, -1.0]\nwater_quality_scores = [0.0, 0.0, 0.0, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the chart\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Cities')\nax.set_ylabel('Environmental Impact Score')\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(-30, 10, 10))\nax.set_yticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Plot the bars for air quality scores\nax.bar(categories, air_quality_scores, color='red', label='Air Quality')\n\n# Plot the bars for water quality scores\nax.bar(categories, water_quality_scores, color='green', label='Water Quality')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nwerewolf_data = [84.97, 67.17, 78.22, 85.17, 80]\nseer_data = [102.67, 100, 78.22, 85.17, 80]\nwitch_data = [102.67, 67.17, 78.22, 85.17, 80]\nvillager_data = [102.67, 67.17, 78.22, 85.17, 80]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for werewolf data\naxes[0].bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], werewolf_data, color='green')\naxes[0].set_title('a')\naxes[0].set_ylabel('Tokens (s)')\naxes[0].set_ylim(0, 120)\n\n# Plot for seer data\naxes[1].bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], seer_data, color='blue')\naxes[1].set_title('b')\naxes[1].set_ylabel('Tokens (s)')\naxes[1].set_ylim(0, 120)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['5%', '10%', '20%', '30%', '40%', '50%']\nvalues = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 7.0))\nbars = plt.bar(categories, values, color='lightblue')\n\n# Add vertical lines at specific positions\nfor i in range(len(categories)):\n    if categories[i] == '5%' or categories[i] == '10%' or categories[i] == '20%' or categories[i] == '30%' or categories[i] == '40%' or categories[i] == '50%':\n        plt.axvline(x=i, color='black', linestyle='-')\n\n# Set the title and labels\nplt.title('Size of Data for Training and Validation')\nplt.xlabel('Size of Data (samples)')\nplt.ylabel('True+ info (%)')\n\n# Set the y-axis limits\nplt.ylim(56, 66)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'constant']\nvalues_out_of_domain = [834, 832, 830, 830, 830, 830, 830, 830, 830, 830]\nvalues_shift_gap = [0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for Out-of-domain accuracy\naxes[0].bar(categories, values_out_of_domain, color='blue')\naxes[0].set_title('Out-of-domain accuracy')\naxes[0].set_ylabel('Accuracy')\n\n# Plot for Shift gap\naxes[1].bar(categories, values_shift_gap, color='red')\naxes[1].set_title('Shift gap')\naxes[1].set_ylabel('Gap')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(categories, [sum(v) for v in values], color='blue')\n\n# Add a vertical line at the specified position\nax.axvline(x=4, color='red', linestyle='--')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.8)\n\n# Set the title and labels\nax.set_title('Mini Crosswords Performance')\nax.set_xlabel('Categories')\nax.set_ylabel('Objective Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'Llama2']\nground_truth_labels = [65, 60, 60, 60, 60, 60, 60, 60, 60]\nweak_labels = [55, 50, 50, 50, 50, 50, 50, 50, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars for ground truth labels\nbars_gt = ax.bar(categories, ground_truth_labels, color='red')\n\n# Plot bars for weak labels\nbars_wl = ax.bar(categories, weak_labels, color='blue', bottom=ground_truth_labels)\n\n# Add text annotations for ground truth labels\nfor bar in bars_gt:\n    height = bar.get_height()\n    ax.annotate(f'{height}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Add text annotations for weak labels\nfor bar in bars_wl:\n    height = bar.get_height()\n    ax.annotate(f'{height}',\n                xy=(bar.get_x() + bar.get_width() / 2, ground_truth_labels[bar.get_x().astype(int)] + height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Ground-Truth and Weak Labels')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the chart\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Disourse and Pragmatics', 'Syntax: Tagging, Chinking and Parsing']\nvalues = [\n    [1.45, 1.45, 1.45, 1.45, 1.45],\n    [1.45, 1.45, 1.45, 1.45, 1.45],\n    [1.45, 1.45, 1.45, 1.45, 1.45],\n    [1.45, 1.45, 1.45, 1.45, 1.45],\n    [1.45, 1.45, 1.45, 1.45, 1.45],\n    [1.45, 1.45, 1.45, 1.45, 1.45],\n    [1.45, 1.45, 1.45, 1.45, 1.45]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nbars = ax.bar(categories, [sum(v) for v in values], color='purple')\n\n# Add black lines at the bottom of each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.plot([bar.get_x(), bar.get_x() + bar.get_width()], [height, height], 'k-')\n\n# Set the title of the chart\nax.set_title('Your Chart Title Here')\n\n# Set the x-axis label\nax.set_xlabel('A')\n\n# Set the y-axis label\nax.set_ylabel('B')\n\n# Set the y-axis limits\nax.set_ylim(-3.5, 1.5)\n\n# Set the y-axis ticks\nax.set_yticks([-3.5, -3.25, -3, -2.75, -2.5, -2.25, -2, -1.75, -1.5, -1.25, -1])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\ny1 = [0.12, 0.14, 0.16, 0.14, 0.12, 0.14]\ny2 = [0.10, 0.12, 0.14, 0.12, 0.10, 0.12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='Dataset mean')\nax.plot(x, y2, label='Mean')\n\n# Set the title and labels\nax.set_title('Shouting Fraction (Fraction of videos)')\nax.set_xlabel('Category')\nax.set_ylabel('Shouting Fraction')\n\n# Set the y-axis limits\nax.set_ylim(0.02, 0.18)\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [0, 5, 10, 15, 20]\ny1 = [15.49, 17.15, 16.03, 15.45, 16.46]\n\n# Data for the second plot\nx2 = [0, 5, 10, 15, 20]\ny2 = [19.38, 19.38, 19.38, 19.38, 19.38]\n\n# Data for the third plot\nx3 = [0, 5, 10, 15, 20]\ny3 = [23.92, 23.92, 23.92, 23.92, 23.92]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 1, figsize=(6.0, 9.0))\n\n# Plotting the first subplot\naxes[0].plot(x1, y1, 'o-', color='red')\naxes[0].set_title('Variable, Symmetric Error')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\n\n# Plotting the second subplot\naxes[1].plot(x2, y2, 'o-', color='blue')\naxes[1].set_title('Variable, Symmetric Error')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_values = [0.16, 0.18, 0.2, 0.24, 0.28]\nmean_values = [0.17, 0.18, 0.2, 0.24, 0.28]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(categories, incivility_values, label='Dataset mean', color='blue')\nax.plot(categories, mean_values, label='Mean', color='red')\n\n# Set the title and labels\nax.set_title('Incivility (Fraction of Videos)')\nax.set_xlabel('Category')\nax.set_ylabel('Incivility (Fraction of Videos)')\n\n# Set the y-axis limits\nax.set_ylim(0.15, 0.3)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nlabels = ['This work*', 'Shah et al.', 'Shah et al.', 'Banerjee et al.', 'Favale et al.', 'Favale et al.', 'Gomez-Valent', 'Gomez-Valent', 'Benisty et al.', 'Benisty et al.', 'Benisty et al.', 'Benisty et al.']\nvalues = [-19.353, -19.394, -19.404, -19.314, -19.404, -19.344, -19.362, -19.374, -19.38, -19.38, -19.38, -19.38]\nerrors = [0.073, 0.018, 0.017, 0.050, 0.099, 0.099, 0.050, 0.066, 0.080, 0.080, 0.080, 0.080]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with error bars\nax.errorbar(labels, values, yerr=errors, fmt='o', capsize=5)\n\n# Set the title and labels\nax.set_title('Error Bars Example')\nax.set_xlabel('M_B')\nax.set_ylabel('Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics']\ny_blue = [12, 14, 12, 10, 14, 15]\ny_red = [10, 12, 10, 8, 12, 13]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data points\nax.plot(x, y_blue, 'bo-', label='Unique speaker count mean')\nax.plot(x, y_red, 'ro-', label='Unique shouter count mean')\n\n# Set the title and labels\nax.set_title('Dataset unique shouter count mean')\nax.set_xlabel('Category')\nax.set_ylabel('Number of speakers')\n\n# Set the y-axis limits\nax.set_ylim(4, 16)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = ['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT']\ny1 = [0.15, 0.25, 0.15, 0.15, 0.15]\ny2 = [0.15, 0.25, 0.15, 0.15, 0.15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Dataset mean', marker='o')\nax.plot(x, y2, label='Mean', marker='o')\n\n# Set the title and labels\nax.set_title('Female Face Presence (Fraction of videos)')\nax.set_xlabel('Country')\nax.set_ylabel('Fraction of videos')\n\n# Set the y-axis limits\nax.set_ylim(0.05, 0.25)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5]\ny_standard = [2.5, 2.5, 2.5, 2.5, 2.5]\ny_upper_limits = [2.5, 2.5, 2.5, 2.5, 2.5]\ny_lower_limits = [2.5, 2.5, 2.5, 2.5, 2.5]\ny_upper_and_lower_limits = [2.5, 2.5, 2.5, 2.5, 2.5]\ny_random = [2.5, 2.5, 2.5, 2.5, 2.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y_standard, 'g^', label='standard')\nax.plot(x, y_upper_limits, 'y^', label='upper limits')\nax.plot(x, y_lower_limits, 'r^', label='lower limits')\nax.plot(x, y_upper_and_lower_limits, 'm^', label='upper and lower limits')\nax.plot(x, y_random, 'b^', label='random')\n\n# Set the title and labels\nax.set_title('Errorbar upper and lower limits')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the legend\nax.legend()\n\n# Set the x-axis limits\nax.set_xlim(0, 6)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ny1 = [170, 160, 150, 140, 130, 120, 110, 100]\ny2 = [175, 165, 155, 145, 135, 125, 115, 105]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(x, y1, 'ro-', label='Variable, Symmetric Error')\nax.plot(x, y2, 'go-', label='Variable, Symmetric Error')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Variable, Symmetric Error')\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 2, 4, 6, 8, 10]\ny1 = [3587, 2598, 3704, 3777, 2889, 1829]\ny2 = [4375, 2598, 3704, 3777, 2889, 1829]\ny3 = [4375, 2598, 3704, 3777, 2889, 1829]\ny4 = [4375, 2598, 3704, 3777, 2889, 1829]\ny5 = [4375, 2598, 3704, 3777, 2889, 1829]\ny6 = [4375, 2598, 3704, 3777, 2889, 1829]\ny7 = [4375, 2598, 3704, 3777, 2889, 1829]\ny8 = [4375, 2598, 3704, 3777, 2889, 1829]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Line 1')\nax.plot(x, y2, 'g-', label='Line 2')\nax.plot(x, y3, 'g-', label='Line 3')\nax.plot(x, y4, 'g-', label='Line 4')\nax.plot(x, y5, 'g-', label='Line 5')\nax.plot(x, y6, 'g-', label='Line 6')\nax.plot(x, y7, 'g-', label='Line 7')\nax.plot(x, y8, 'g-', label='Line 8')\n\n# Set the title and labels\nax.set_title('variable, asymmetric error')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Add a horizontal line at y=25\nax.axhline(y=25, color='yellow', linestyle='--')\n\n# Add a vertical line at x=5\nax.axvline(x=5, color='yellow', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 5, 10, 15, 20]\ny1 = [-2.1, -2.6, -2.9, -1.2, -1.1]\ny2 = [2.6, 2.6, 2.9, 2.3, 2.7]\ny3 = [1.9, 1.9, 1.2, 1.3, 1.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'p-', label='errorbar')\nax.plot(x, y2, 'p-', label='errorbar')\nax.plot(x, y3, 'p-', label='errorbar')\n\n# Set the title and labels\nax.set_title('variable, asymmetric error')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the y-axis limits\nax.set_ylim(14, 19)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20])\n\n# Display the plot\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified dimensions\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the points\npoints = np.array([\n    [0, 0],  # Purple point\n    [1, 0],  # Blue point\n    [1, 1],  # Orange point\n    [0, 1],  # Yellow point\n    [0, 0]   # Purple point (repeated)\n])\n\n# Plot the points\nax.plot(points[:, 0], points[:, 1], 'ro-')\n\n# Set the aspect ratio to equal\nax.set_aspect('equal')\n\n# Remove axes for cleaner look\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates for the points\nx_coords = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\ny_coords = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n\n# Plot the points\nax.plot(x_coords, y_coords, 'o', markersize=5, color='pink')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates of the circle's center and radius\ncenter_x, center_y = 5, 5\nradius = 5\n\n# Generate points on the circle\ntheta = np.linspace(0, 2*np.pi, 100)\nx = center_x + radius * np.cos(theta)\ny = center_y + radius * np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, 'k-')\n\n# Define the positions of the circles\npositions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Plot the circles at the specified positions\nfor pos in positions:\n    circle = plt.Circle((pos, 5), 0.5, color='yellow')\n    ax.add_artist(circle)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove axes\nax.axis('off')\n\nplt.show()"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates for the vertices of the quadrilateral\nx = [0, 2, 3, 1]\ny = [0, 0, 0, 0]\n\n# Plot the quadrilateral\nax.plot(x, y, 'k-')\n\n# Define the coordinates for the circles\ncircle_centers = [(0, 0), (2, 0), (3, 0), (1, 0)]\ncircle_radii = [1, 1, 1, 1]\n\n# Plot the circles\nfor center, radius in zip(circle_centers, circle_radii):\n    circle = plt.Circle(center, radius, color='pink', fill=True)\n    ax.add_artist(circle)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the triangle vertices\nx = [0, 2, 1]\ny = [0, 0, np.sqrt(3)]\n\n# Plot the triangle\nax.plot(x, y, 'k-')\n\n# Mark the vertices\nax.plot(x[0], y[0], 'ro', markersize=10)\nax.plot(x[1], y[1], 'ro', markersize=10)\nax.plot(x[2], y[2], 'ro', markersize=10)\n\n# Annotate the vertices\nax.annotate('1', (x[0], y[0]), textcoords=\"offset points\", xytext=(0,10), ha='center')\nax.annotate('2', (x[1], y[1]), textcoords=\"offset points\", xytext=(0,10), ha='center')\nax.annotate('0', (x[2], y[2]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set equal scaling by setting the aspect ratio to 'equal'\nax.set_aspect('equal')\n\n# Remove axes for cleaner look\nax.axis('off')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['CoreNLP', 'Stanza', 'Biafine', 'StackPointer', 'TowerParse']\nvalues = [0.61, 0.74, 0.70, 0.70, 0.57]\ncolors = ['lightcoral', 'lightsalmon', 'lightpink', 'lavenderblush', 'thistle']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nvotess = ['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Abstain']\ndata = [\n    [15.7, 28.1, 2.6, 2.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 9.2],\n    [50.8, 12.2, 0.9, 6.2, 13.9],\n    [49.2, 11.2, 0.6, 7.8, 16.3],\n    [50.3, 12.0, 0.9, 7.0, 13.4]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('Blues')\n\n# Plot the data\nfor i, voter in enumerate(voters):\n    for j, votee in enumerate(votess):\n        ax.add_patch(plt.Circle((j + 0.5, i + 0.5), 0.4, color=cmap(data[i][j] / 100)))\n\n# Set the limits of the plot\nax.set_xlim(0, len(votess))\nax.set_ylim(0, len(voters))\n\n# Set the tick labels\nax.set_xticks(np.arange(len(votess)) + 0.5)\nax.set_yticks(np.arange(len(voters)) + 0.5)\nax.set_xticklabels(votess)\nax.set_yticklabels(voters)\n\n# Set the title and labels\nax.set_title('Voter Preferences')\nax.set_xlabel('Votee')\nax.set_ylabel('Voter')\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', label='Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\nfox_data = [0.9, 0.7, 0.5, 0.3, 0.1]\nhaliburton_data = [0.8, 0.6, 0.4, 0.2, 0.0]\nharkless_data = [0.7, 0.5, 0.3, 0.1, 0.0]\nbarnes_data = [0.6, 0.4, 0.2, 0.0, 0.0]\nmetu_data = [0.5, 0.3, 0.1, 0.0, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(players, fox_data, color='orange')\nax.bar(players, haliburton_data, bottom=fox_data, color='yellow')\nax.bar(players, harkless_data, bottom=[sum(x) for x in zip(fox_data, haliburton_data)], color='purple')\nax.bar(players, barnes_data, bottom=[sum(x) for x in zip(fox_data, haliburton_data, harkless_data)], color='blue')\nax.bar(players, metu_data, bottom=[sum(x) for x in zip(fox_data, haliburton_data, harkless_data, barnes_data)], color='pink')\n\n# Set the title and labels\nax.set_title('Player Scores')\nax.set_xlabel('Players')\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar charts\nlive_data = [\n    [10, 20, 30, 40],\n    [15, 25, 35, 45],\n    [20, 30, 40, 50]\n]\n\nciq_data = [\n    [30, 40, 50, 60],\n    [20, 30, 40, 50],\n    [10, 20, 30, 40]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(6, 5))\n\n# Plot the bar charts\naxes[0, 0].bar(range(len(live_data)), live_data[0], color='purple')\naxes[0, 1].bar(range(len(ciq_data)), ciq_data[0], color='purple')\naxes[1, 0].bar(range(len(live_data)), live_data[1], color='purple')\naxes[1, 1].bar(range(len(ciq_data)), ciq_data[1], color='purple')\n\n# Set labels and titles\nfor ax in axes.flat:\n    ax.set_xlabel('Predicted category')\n    ax.set_ylabel('Labeling function similarity')\n    ax.set_title('CIQ' if ax == axes[0, 1] or ax == axes[1, 1] else 'LIVE')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the heatmap\ndata = [\n    [10, 10, 10],\n    [7, 7, 7],\n    [28, 28, 28]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='YlOrBr')\n\n# Set the tick labels\nax.set_xticks([0, 1, 2])\nax.set_yticks([0, 1, 2])\nax.set_xticklabels(['D''2', 'D''1', 'D''0'])\nax.set_yticklabels(['LOH0', 'LOH1', 'LOH2'])\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI']\nsubcategories = [\n    ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences'],\n    ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences'],\n    ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences'],\n    ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences'],\n    ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\n]\nvalues = [\n    [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 0.95, 0.95],\n    [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 0.95, 0.95],\n    [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 0.95, 0.95],\n    [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 0.95, 0.95],\n    [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 0.95, 0.95]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the x-axis limits\nax.set_xlim(0, len(categories))\n\n# Set the y-axis limits\nax.set_ylim(-1, 1)\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Set the tick labels for the y-axis\nax.set_yticks(np.arange(-1, 1.1, 0.25))\nax.set_yticklabels([f'{i:.2f}' for i in np.arange(-1, 1.1, 0.25)])\n\n# Set the title of the plot\nax.set_title('Bar Chart with Color Gradients')\n\n# Set the color map\ncmap = plt.cm.RdYlBu_r\n\n# Create a list of colors for each bar\ncolors = []\nfor i in range(len(categories)):\n    for j in range(len(subcategories[i])):\n        colors.append(cmap(values[i][j]))\n\n# Create a bar chart with color gradients\nbar_width = 0.8 / len(subcategories[0])\nindex = np.arange(len(categories))\nfor i in range(len(subcategories[0])):\n    ax.bar(index + i * bar_width, [0] * len(categories), bar_width, color=colors[i * len(categories):(i + 1) * len(categories)], edgecolor='black')\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['1', '3', '5', '9', '12']\nvalues = [1, 3, 5, 9, 12]\ncolors = ['black', 'purple', 'blue', 'orange', 'yellow']\n\n# Create a bar chart\nplt.bar(categories, values, color=colors)\n\n# Set the title and labels\nplt.title('Start removing layer')\nplt.xlabel('To layer')\nplt.ylabel('Perplexity')\n\n# Add a watermark\nwatermark_text = \"mbert\u2192sat Perplexity=7.59\"\nplt.text(0.5, 0.5, watermark_text, transform=plt.gca().transAxes, fontsize=12, ha='center', va='center', bbox=dict(boxstyle=\"round,pad=0.5\", fc=\"white\", ec=\"black\"))\n\n# Set the y-axis limits\nplt.ylim(-1, 12)\n\n# Set the colorbar\ncmap = plt.cm.get_cmap('coolwarm')\nnorm = plt.Normalize(vmin=-1, vmax=5)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nplt.colorbar(sm, label='Increase in perplexity')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the heatmap\ndata = [\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 588, 327],\n    [459, 274, 797, 665, 605],\n    [784, 637, 523, 435, 405],\n    [935, 945, 739, 856, 243],\n    [729, 651, 888, 717, 891],\n    [863, 700, 644, 650, 760],\n    [292, 949, 365, 142, 473]\n]\n\n# Define the labels for the rows and columns\nrow_labels = ['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3']\ncol_labels = ['Sales Rank 1', 'Sales Rank 2', 'Sales Rank 3', 'Sales Rank 4', 'Sales Rank 5']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Create a heatmap using the data\nheatmap = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Set the tick labels for the rows and columns\nax.set_xticks(np.arange(len(col_labels)))\nax.set_yticks(np.arange(len(row_labels)))\nax.set_xticklabels(col_labels)\nax.set_yticklabels(row_labels)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Add a colorbar to the heatmap\ncbar = ax.figure.colorbar(heatmap, ax=ax)\ncbar.ax.set_ylabel('Sales', rotation=-90, va=\"bottom\")\n\n# Set the title of the heatmap\nax.set_title('Sales Performance Heatmap')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['context', 'option', 'cot', 'last']\nvalues = [0.6, 0.5, 0.4, 0.3]\n\n# Create a bar chart\nplt.figure(figsize=(10, 3))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set title and labels\nplt.title('Values by Category')\nplt.xlabel('Category')\nplt.ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ndata = {\n    'Autoformer': [\n        [0.55, 0.72, 0.6, 0.44, 0.89],\n        [0.42, 0.65, 0.44, 0.79, 0.09],\n        [0.96, 0.38, 0.79, 0.07, 0.09],\n        [0.57, 0.93, 0.07, 0.09, 0.77]\n    ],\n    'Informer': [\n        [0.02, 0.83, 0.78],\n        [0.98, 0.46, 0.78],\n        [0.12, 0.64, 0.53],\n        [0.94, 0.04, 0.26]\n    ],\n    'Reformer': [\n        [0.46, 0.57, 0.22, 0.62],\n        [0.61, 0.62, 0.7, 0.06],\n        [0.36, 0.44, 0.21, 0.68],\n        [0.67, 0.21, 0.06, 0.13]\n    ],\n    'Transformer': [\n        [0.32, 0.57, 0.44],\n        [0.99, 0.46, 0.24],\n        [0.36, 0.25, 0.47],\n        [0.65, 0.06, 0.24]\n    ]\n}\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(7.0, 6.0))\n\n# Plot each dataset\nfor i, (key, values) in enumerate(data.items()):\n    row = i // 2\n    col = i % 2\n    ax = axes[row, col]\n    ax.imshow(values, cmap='YlOrBr', aspect='auto')\n    ax.set_title(key)\n    ax.set_xlabel('X Label')\n    ax.set_ylabel('Y Label')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\ndata = {\n    'Villager': [15.7, 28.1, 26, 14.5, 28.6, 10.5],\n    'Hunter': [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    'Witch': [50.8, 12.3, 0.9, 6.2, 15.5, 13.9],\n    'Seer': [49.2, 11.2, 0.6, 7.8, 17.3, 13.9],\n    'Werewolf': [50.3, 12.0, 0.9, 7.0, 13.4, 16.3]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Role voting in the Werewolf game')\n\n# Set the x-axis labels\nx_labels = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 101, 10))\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'])\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Plot the data\nfor i, (role, percentages) in enumerate(data.items()):\n    ax.barh(i, percentages, color='blue', label=role if i == 0 else None)\n\n# Add a legend\nax.legend(title='Role')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nresponses = [\n    [169, 547, 662, 271, 145],\n    [115, 439, 753, 239, 1355],\n    [219, 585, 557, 259, 1269],\n    [67, 941, 708, 432, 732],\n    [177, 554, 661, 235, 1246]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.RdYlGn_r\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(range(len(responses[i])), responses[i], color=cmap(i/len(categories)), label=category)\n\n# Set labels and title\nax.set_xlabel('Response Action Category')\nax.set_ylabel('Value')\nax.set_title('Question Type: All three types of questions')\nax.legend()\n\n# Set x-ticks\nax.set_xticks(range(len(responses[0])))\nax.set_xticklabels(['0', '1', '2', '3', '4'])\n\n# Set y-axis limits\nax.set_ylim(0, 1200)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'feet', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.50, 0.00, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.44, 0.00, 0.00, 0.10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create the bar chart for the original data\noriginal_bars = ax.bar(categories, original_values, bar_width, label='Original')\n\n# Create the bar chart for the adjusted data\nadjusted_bars = ax.bar([i + bar_width for i in range(len(categories))], adjusted_values, bar_width, label='Adjusted')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Original and Adjusted Data')\nax.set_xticks([i + bar_width / 2 for i in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nvotess = ['Voter 1', 'Voter 2', 'Voter 3', 'Voter 4', 'Voter 5', 'Voter 6', 'Voter 7', 'Voter 8', 'Voter 9', 'Voter 10', 'Voter 11', 'Voter 12', 'Voter 13', 'Voter 14', 'Voter 15', 'Voter 16', 'Voter 17', 'Voter 18', 'Voter 19', 'Voter 20', 'Voter 21', 'Voter 22', 'Voter 23', 'Voter 24', 'Voter 25', 'Voter 26', 'Voter 27', 'Voter 28', 'Voter 29', 'Voter 30']\npercentages = [\n    [15.7, 28.1, 2.6, 2.6, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 0.5, 28.6, 9.2],\n    [50.8, 12.3, 0.9, 0.9, 6.2, 14.3],\n    [49.2, 11.2, 0.6, 0.6, 7.8, 13.9],\n    [50.3, 12.0, 0.9, 0.9, 7.0, 16.3]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i, voter in enumerate(voters):\n    for j, percentage in enumerate(percentages[i]):\n        ax.add_patch(plt.Circle((j + 1, i + 1), 0.4, color='blue' if percentage < 10 else 'darkblue'))\n\n# Set the limits and labels\nax.set_xlim(0, 6)\nax.set_ylim(0, 5)\nax.set_xticks(np.arange(1, 6))\nax.set_yticks(np.arange(1, 5))\nax.set_xticklabels(votess[::5])\nax.set_yticklabels(voters)\n\n# Add a colorbar\ncmap = plt.cm.get_cmap('Blues')\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', fraction=0.046, pad=0.04)\ncbar.set_label('Percentage')\n\n# Set the title\nax.set_title('Voter Preferences by Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for LLaMA\nllama_data = [\n    [17, 24, 23],\n    [3, 8, 17],\n    [13, 10, 3],\n    [5, 4, 10]\n]\n\n# Data for GPT\ngpt_data = [\n    [5, 17, 1],\n    [17, 5, 1],\n    [11, 24, 9],\n    [17, 5, 9],\n    [15]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(6.0, 3.0))\n\n# Plot LLaMA data\nfor i, row in enumerate(llama_data):\n    colors = ['orange', 'brown', 'orange']\n    for j, value in enumerate(row):\n        axes[0].barh(i, 1, left=j, height=0.8, color=colors[j], label=f'#{value}' if j == 0 else '')\n\n# Plot GPT data\nfor i, row in enumerate(gpt_data):\n    colors = ['blue', 'blue', 'blue', 'blue', 'blue']\n    for j, value in enumerate(row):\n        axes[1].barh(i, 1, left=j, height=0.8, color=colors[j], label=f'#{value}' if j == 0 else '')\n\n# Set labels and titles\naxes[0].set_xlabel('Rank')\naxes[0].set_title('LLaMA')\naxes[1].set_xlabel('Rank')\naxes[1].set_title('GPT')\n\n# Set y-axis labels\naxes[0].set_yticks(range(len(llama_data)))\naxes[0].set_yticklabels(['Baseline', 'Reversed Order', 'Reversed IDs'])\naxes[1].set_yticks(range(len(gpt_data)))\naxes[1].set_yticklabels(['Baseline', 'Reversed Order', 'Reversed IDs'])\n\n# Remove x-axis ticks\naxes[0].set_xticks([])\naxes[1].set_xticks([])\n\n# Add legend\naxes[0].legend(title='Values')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ndata = [\n    [0.10, 0.08, 0.30, 0.60, 0.00, 0.50, 0.07, 0.10],\n    [0.12, 0.22, 0.44, 0.30, 0.32, 0.44, 0.10, 0.00]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor row in data:\n    ax.bar(range(len(row)), row, color='lightgrey', edgecolor='black')\n\n# Set the x-axis labels\nax.set_xticks(range(len(data[0])))\nax.set_xticklabels(['0.10', '0.08', '0.30', '0.60', '0.00', '0.50', '0.07', '0.10'])\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Set the title of the plot\nax.set_title('Comparison of Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley']\nyears = ['2015', '2016', '2017', '2018', '2019', '2020', '2021']\nvalues = [\n    [0.8, 2.4, 2.5, 3.9, 0.0],\n    [2.4, 0.0, 4.0, 1.0, 2.7, 0.0],\n    [1.1, 2.4, 0.8, 4.3, 1.9, 0.0],\n    [0.6, 0.0, 0.3, 3.1, 0.0],\n    [0.7, 1.7, 0.6, 2.6, 0.0],\n    [1.3, 1.2, 0.0, 0.0, 0.0],\n    [0.1, 2.0, 0.0, 1.9, 0.0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('YlGnBu')\n\n# Plot the data\nfor i, category in enumerate(categories):\n    for j, year in enumerate(years):\n        value = values[i][j]\n        if value == 0:\n            color = 'white'\n        else:\n            color = cmap(value / 5)\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=color))\n\n# Set the labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Category')\nax.set_title('Harvest [t/year]')\nax.set_xticks(np.arange(len(years)) + 0.5)\nax.set_yticks(np.arange(len(categories)) + 0.5)\nax.set_xticklabels(years)\nax.set_yticklabels(categories)\n\n# Set the color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=5))\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', label='Harvest [t/year]')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvest = [6, 5, 3, 2, 1, 0.6]\nweekly_sales = [85, 74, 62, 51, 37, 10]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nbars = ax1.bar(categories, harvest, color='green', label='Harvest')\n\n# Set the y-axis label for the first y-axis\nax1.set_ylabel('Harvest [t/year]', color='green')\nax1.tick_params(axis='y', labelcolor='green')\n\n# Create a second y-axis\nax2 = ax1.twinx()\n\n# Plot the line chart\nline, = ax2.plot(categories, weekly_sales, color='red', marker='o', linestyle='-', label='Weekly Sales')\n\n# Set the y-axis label for the second y-axis\nax2.set_ylabel('Weekly Sold Copies', color='red')\nax2.tick_params(axis='y', labelcolor='red')\n\n# Set the title of the plot\nax1.set_title('Harvest vs Weekly Sales')\n\n# Add a legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(4, 3, figsize=(9.0, 6.0), constrained_layout=True)\n\n# Define the data for each subplot\ndata = [\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n]\n\n# Plot each dataset\nfor i in range(4):\n    for j in range(3):\n        ax = axes[i, j]\n        ax.imshow(data[i * 3 + j], cmap='viridis')\n        ax.set_title(f'Title {i * 3 + j + 1}')\n        ax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ndata1 = [\n    [5, 3, 2, 1],\n    [4, 3, 2, 1],\n    [3, 3, 2, 1],\n    [2, 3, 2, 1],\n    [1, 3, 2, 1]\n]\n\n# Data for the second graph\ndata2 = [\n    [5, 3, 2, 1],\n    [4, 3, 2, 1],\n    [3, 3, 2, 1],\n    [2, 3, 2, 1],\n    [1, 3, 2, 1]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the first graph\nfor row in data1:\n    ax.bar(range(len(row)), row, color='blue')\n\n# Plot the second graph\nfor row in data2:\n    ax.bar(range(len(row)), row, color='red', alpha=0.5)\n\n# Set the title and labels\nax.set_title('default: no edges')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the x-ticks\nax.set_xticks(range(4))\nax.set_xticklabels(['0', '2', '4', '6'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\nproducts = ['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes']\nsales = [\n    [1.5, 2.2, 1.8, 3.2, 0.5],\n    [2.8, 0.5, 3.6, 1.8, 0.7],\n    [1.0, 2.1, 0.9, 4.0, 1.5],\n    [0.7, 0.6, 0.4, 3.4, 2.3],\n    [0.9, 1.6, 0.7, 0.5, 2.0],\n    [1.2, 1.3, 0.5, 0.6, 0.7],\n    [0.3, 1.9, 0.6, 0.8, 1.8]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.RdYlGn\n\n# Plot the data\nfor i, product in enumerate(products):\n    for j, vendor in enumerate(vendors):\n        ax.barh(product, sales[i][j], left=np.sum(sales[:i, j]), height=0.5, color=cmap(j / len(vendors)))\n\n# Set labels and title\nax.set_xlabel('Sales (in tons/year)')\nax.set_title('Sales of vendors (in tons/year)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Low', 'Medium', 'High']\nvalues = [17, 28, 36, 23]\nheights = [79, 34, 53, 35]\nmediums = [42, 0, 5, 75]\nlows = [4, 0, 0, 55]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the bars\nax.bar(categories, heights, color='blue', label='High')\nax.bar(categories, mediums, bottom=heights, color='green', label='Medium')\nax.bar(categories, lows, bottom=[h + m for h, m in zip(heights, mediums)], color='red', label='Low')\n\n# Set labels and title\nax.set_xlabel('Degree of acceptance of a product')\nax.set_ylabel('Values')\nax.set_title('Degree of acceptance of a product')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\ncategories = ['ada', 'mistral', 'distilroberta', 'mpnet', 'MiniLM', 'qa-distilbert']\nsubcategories = ['mis', 'dis', 'mpn', 'Min', 'qad']\ndata = [\n    [0.9, 0.9, 0.9, 0.9, 0.9],\n    [0.8, 0.8, 0.8, 0.8, 0.8],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.6, 0.6, 0.6, 0.6, 0.6],\n    [0.5, 0.5, 0.5, 0.5, 0.5],\n    [0.4, 0.4, 0.4, 0.4, 0.4]\n]\n\n# Create a color map\ncmap = plt.cm.get_cmap('Blues')\n\n# Plot the data\nfor i, category in enumerate(categories):\n    for j, subcategory in enumerate(subcategories):\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=cmap(data[i][j])))\n\n# Set labels and title\nax.set_xlabel('Bottleneck Distance')\nax.set_ylabel('Wasserstein Distance')\nax.set_title('Heatmap of Distances')\n\n# Set the limits of the axes\nax.set_xlim(-0.5, len(categories))\nax.set_ylim(-0.5, len(subcategories))\n\n# Set the tick labels\nax.set_xticks(np.arange(len(categories)) + 0.5)\nax.set_yticks(np.arange(len(subcategories)) + 0.5)\nax.set_xticklabels(categories)\nax.set_yticklabels(subcategories)\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0.1, vmax=0.9))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the heatmap\ndata = np.random.rand(10, 12)\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='hot')\n\n# Set the colorbar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title('ROC\\'s AUC')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Timeshift')\nax.set_ylabel('Scales')\n\n# Set the tick labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(range(12))\nax.set_yticklabels(range(10))\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation', 'Last']\ncounts = [0, 4, 8, 12, 16, 20, 24, 28]\nvalues = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Create a heatmap\nheatmap = ax.imshow([values] * len(categories), cmap='Greens')\n\n# Set the tick labels\nax.set_xticks(np.arange(len(counts)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(counts)\nax.set_yticklabels(categories)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Add a colorbar\ncbar = ax.figure.colorbar(heatmap, ax=ax)\ncbar.ax.set_ylabel('Value', rotation=-90, va=\"bottom\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [\n    [44, 12, 0, 0],\n    [35, 8, 24, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['Perlmutter', 'Corona', 'Frontier']\nsubmodels = ['Kokkos', 'Raja', 'OMP', 'OACC', 'SYCL', 'Native Port']\nvalues = [\n    [876, 136, 435, 534, 322, 804],\n    [750, 1737, 742, 375, 750, 1825],\n    [482, 120, 843, 1170, 925, 911]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the color map\ncmap = plt.cm.RdYlGn\n\n# Plot the data\nfor i, model in enumerate(models):\n    ax.barh(submodels, values[i], left=np.arange(len(submodels)), height=0.8, align='center', color=cmap(i/len(models)))\n\n# Set the title and labels\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_xlabel('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_ylabel('Programming Model')\n\n# Set the x-axis limits\nax.set_xlim(0, 1400)\n\n# Set the y-axis limits\nax.set_ylim(-0.5, len(submodels) - 0.5)\n\n# Remove the y-axis ticks\nax.set_yticks([])\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=len(models)))\nsm._A = []\ncbar = fig.colorbar(sm)\ncbar.set_label('Programming Model')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = [\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.71, 0.82],\n    [0.90, 0.90, 0.93, 0.92, 0.66, 0.69, 0.72, 0.82],\n    [0.89, 0.93, 0.95, 0.95, 0.66, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.66, 0.69, 0.72, 0.82],\n    [0.64, 0.65, 0.68, 0.68, 0.64, 0.66, 0.71, 0.82],\n    [0.66, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.71, 0.72, 0.75, 0.75, 0.71, 0.72, 0.75, 0.82],\n    [0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 1.00]\n]\n\n# Define the labels\nlabels = ['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'ar', 'zh']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='hot')\n\n# Set the tick labels\nax.set_xticks(np.arange(len(labels)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(labels)\nax.set_yticklabels(labels)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title('Correlation Coefficients')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['ROUGE', 'BertScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttN', 'PPL']\nvalues = [\n    [0.19, 0.62],\n    [0.19, 0.62],\n    [0.26, 0.53, 0.52],\n    [0.16, 0.39, 0.50, 0.39],\n    [0.03, 0.24, 0.24, 0.20],\n    [-0.03, 0.10, 0.26, 0.20, -0.10],\n    [0.07, 0.28, 0.26, 0.20, 0.21, 0.05]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.Blues\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh([category] * len(values[i]), values[i], color=cmap(i / len(categories)))\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first subplot\ndata1 = [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n]\n\n# Data for the second subplot\ndata2 = [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot the first subplot\ncax1 = axes[0].matshow(data1, cmap='coolwarm')\naxes[0].set_title('pythia-1b')\naxes[0].set_xlabel('Layers')\naxes[0].set_ylabel('EndofoText')\n\n# Plot the second subplot\ncax2 = axes[1].matshow(data2, cmap='coolwarm')\naxes[1].set_title('No / The')\naxes[1].set_xlabel('Layers')\naxes[1].set_ylabel('EndofoText')\n\n# Add colorbar to the first subplot\nfig.colorbar(cax1, ax=axes[0])\n\n# Add colorbar to the second subplot\nfig.colorbar(cax2, ax=axes[1])\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['XSUm', 'CNN/DailyMail', 'NarrativeQA', 'NaturalQuestions - Closed-book', 'NaturalQuestions - Open-book', 'QuAC']\ndata = [\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nbar_width = 0.15\nindex = range(len(data[0]))\nfor i, label in enumerate(labels):\n    ax.bar([x + i * bar_width for x in index], data[i], bar_width, label=label)\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Test Winning Distance')\nax.set_ylabel('Number of Pairs')\n\n# Set the x-axis ticks\nax.set_xticks([x + bar_width * (len(labels) // 2) for x in index])\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8'])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\ncosine_similarity = np.linspace(-0.2, 0.8, 10)\ninter_class = np.random.randint(20, 80, size=10)\nintra_class = np.random.randint(20, 80, size=10)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot bars\nax.bar(cosine_similarity, inter_class, color='blue', label='Inter Class')\nax.bar(cosine_similarity, intra_class, bottom=inter_class, color='green', label='Intra Class')\n\n# Set labels and title\nax.set_xlabel('Cosine Similarity')\nax.set_ylabel('Frequency')\nax.set_title('Cosine Similarity Distribution')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata_a = [\n    [1.2, 1.3, 1.4],\n    [1.1, 1.2, 1.3],\n    [1.0, 1.1, 1.2]\n]\n\ndata_b = [\n    [1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4],\n    [1.1, 1.2, 1.3]\n]\n\ndata_c = [\n    [1.4, 1.5, 1.6],\n    [1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4]\n]\n\ndata_d = [\n    [1.5, 1.6, 1.7],\n    [1.4, 1.5, 1.6],\n    [1.3, 1.4, 1.5]\n]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot data for each subplot\naxes[0, 0].imshow(data_a, cmap='YlOrBr', aspect='auto')\naxes[0, 0].set_title('Baseline')\naxes[0, 0].set_xlabel('Euclidean Distance')\naxes[0, 0].set_ylabel('Density')\n\naxes[0, 1].imshow(data_b, cmap='YlOrBr', aspect='auto')\naxes[0, 1].set_title('MIRL w/ MULT')\naxes[0, 1].set_xlabel('Euclidean Distance')\naxes[0, 1].set_ylabel('Density')\n\naxes[1, 0].imshow(data_c, cmap='YlOrBr', aspect='auto')\naxes[1, 0].set_title('MIRL + OCLR w/ MUL')\naxes[1, 0].set_xlabel('Euclidean Distance')\naxes[1, 0].set_ylabel('Density')\n\naxes[1, 1].imshow(data_d, cmap='YlOrBr', aspect='auto')\naxes[1, 1].set_title('MIRL + OCLR w/ DOTLA')\naxes[1, 1].set_xlabel('Euclidean Distance')\naxes[1, 1].set_ylabel('Density')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(6, 2, figsize=(7.0, 8.0), sharex=True, sharey=True)\n\n# Define the data for each subplot\ndata_sets = [\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]))\n]\n\n# Plot the data on each subplot\nfor i, (x, y) in enumerate(data_sets):\n    row = i // 2\n    col = i % 2\n    ax = axes[row, col]\n    ax.plot(x, y, 'o-')\n    ax.set_title(f\"Plot {i+1}\")\n    ax.set_xlabel('X Label')\n    ax.set_ylabel('Y Label')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['0.02', '0.04', '0.06', '0.08']\ncamels = [1000, 1000, 1000, 1000]\nkangaroos = [1000, 1000, 1000, 1000]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nbars = ax.bar(categories, camels, color='blue', label='Camels')\nax.bar(categories, kangaroos, bottom=camels, color='orange', label='Kangaroos')\n\n# Set labels and title\nax.set_xlabel('Animal Weight (Tons)')\nax.set_ylabel('Frequency')\nax.set_title('Desert Animals in the Wild')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nvalues = [0, 2, 4, 6, 8]\nuniform_data = [70, 50, 80, 60, 30]\nnormal_data = [60, 40, 70, 50, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bars for uniform data\nax.bar(values, uniform_data, color='red', label='Uniform data')\n\n# Plot the bars for normal data\nax.bar(values, normal_data, color='blue', label='Normal data', bottom=uniform_data)\n\n# Set the title of the chart\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Value')\nax.set_ylabel('Frequency')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the histogram\ndata = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]\n\n# Create a histogram with specified parameters\nplt.hist(data, bins=range(0, 1200, 100), edgecolor='black')\n\n# Set the title of the histogram\nplt.title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nplt.xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nplt.ylabel('Number of Measurements')\n\n# Set the limits for the x-axis\nplt.xlim(-2, 6)\n\n# Set the limits for the y-axis\nplt.ylim(0, 1200)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ndistances = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\nblue_values = [140, 130, 120, 110, 100, 90, 80]\norange_values = [160, 150, 140, 130, 120, 110, 100]\n\n# Create a bar chart\nplt.figure(figsize=(5.0, 4.0))\nplt.bar(distances, blue_values, color='blue', label='Baguette')\nplt.bar(distances, orange_values, color='orange', label='Youtiao', bottom=blue_values)\n\n# Add labels and title\nplt.xlabel('Distance to Threshold')\nplt.ylabel('Frequency')\nplt.title('Baking Accuracy Analysis')\nplt.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['XSum', 'CNN/DailyMail', 'NarrativeQA', 'NaturalQuestions - Closed-book', 'NaturalQuestions - Open-book', 'QuAC']\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny = [100, 110, 120, 130, 140]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Plot the bar chart\nbars = ax.bar(labels, y, color='blue')\n\n# Add labels and title\nax.set_xlabel('Test Winning Distance')\nax.set_ylabel('Number of Pairs')\nax.set_title('Bar Chart Example')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\nyears = [0, 50, 100, 150, 200, 250]\ndata = [\n    [10, 15, 12, 14, 16],\n    [13, 17, 11, 15, 18],\n    [11, 16, 13, 14, 17],\n    [12, 15, 14, 16, 19],\n    [14, 16, 15, 17, 20]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Set the x-axis label\nax.set_xlabel('Number of Nominations')\n\n# Set the y-axis label\nax.set_ylabel('Categories')\n\n# Set the tick labels for the y-axis\nax.set_yticks(years)\nax.set_yticklabels(categories)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 50, 100, 150, 200, 250])\n\n# Plot the bar chart\nfor i, row in enumerate(data):\n    ax.barh(years[i], row, color=plt.cm.viridis(i / len(data)))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\ndata_mnist = [\n    [400, 350, 300, 250, 200, 150, 100],\n    [350, 300, 250, 200, 150, 100, 50],\n    [300, 250, 200, 150, 100, 50, 0]\n]\n\ndata_fashionmnist = [\n    [400, 350, 300, 250, 200, 150, 100],\n    [350, 300, 250, 200, 150, 100, 50],\n    [300, 250, 200, 150, 100, 50, 0]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(10.0, 7.0))\n\n# Plot MNIST data\naxes[0].bar(range(len(data_mnist[0])), data_mnist[0], color='blue', label='Non-defective')\naxes[0].bar(range(len(data_mnist[1])), data_mnist[1], color='orange', label='Defective')\naxes[0].set_title('MNIST - Defect Detection')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\naxes[0].legend()\n\n# Plot FashionMNIST data\naxes[1].bar(range(len(data_fashionmnist[0])), data_fashionmnist[0], color='green', label='Non-defective')\naxes[1].bar(range(len(data_fashionmnist[1])), data_fashionmnist[1], color='red', label='Defective')\naxes[1].set_title('FashionMNIST - Defect Detection')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\naxes[1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntime_scores = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nvalues = [\n    [55, 52, 53, 54, 55, 56, 57],\n    [58, 59, 60, 61, 62, 63, 64],\n    [55, 56, 57, 58, 59, 60, 61],\n    [52, 53, 54, 55, 56, 57, 58],\n    [59, 60, 61, 62, 63, 64, 65],\n    [56, 57, 58, 59, 60, 61, 62],\n    [53, 54, 55, 56, 57, 58, 59]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nfor i, row in enumerate(values):\n    ax.bar(time_scores, row, width=0.1, bottom=[sum(row[:j]) for j in range(len(row))], color=plt.cm.tab20(i % 20))\n\n# Set labels and title\nax.set_xlabel('TM-score')\nax.set_ylabel('Frequency')\nax.set_title('Bar Chart of Frequency vs TM-score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = [\n    [1, 2, 3, 4, 5],\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [1.1, 1.2, 1.3, 1.4, 1.5],\n    [1.6, 1.7, 1.8, 1.9, 2.0],\n    [2.1, 2.2, 2.3, 2.4, 2.5],\n    [2.6, 2.7, 2.8, 2.9, 3.0],\n    [3.1, 3.2, 3.3, 3.4, 3.5]\n]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plotting the first subplot\naxes[0, 0].bar(data[0], data[1], color=['blue', 'orange'])\naxes[0, 0].set_title('a')\naxes[0, 0].set_xlabel('Sweetness')\naxes[0, 0].set_ylabel('Density')\n\n# Plotting the second subplot\naxes[0, 1].bar(data[0], data[2], color=['blue', 'orange'])\naxes[0, 1].set_title('b')\naxes[0, 1].set_xlabel('Sweetness')\naxes[0, 1].set_ylabel('Density')\n\n# Plotting the third subplot\naxes[1, 0].bar(data[0], data[3], color=['blue', 'orange'])\naxes[1, 0].set_title('c')\naxes[1, 0].set_xlabel('Sweetness')\naxes[1, 0].set_ylabel('Density')\n\n# Plotting the fourth subplot\naxes[1, 1].bar(data[0], data[4], color=['blue', 'orange'])\naxes[1, 1].set_title('d')\naxes[1, 1].set_xlabel('Sweetness')\naxes[1, 1].set_ylabel('Density')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Class', 'Camel', 'Kangaroo']\nvalues = [\n    [1000, 100, 10],\n    [100, 10, 1],\n    [10, 1, 0.1]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\nbar_width = 0.2\nindex = range(len(categories))\n\nfor i, value in enumerate(values):\n    ax.bar([p + bar_width * i for p in index], value, bar_width, label=categories[i])\n\nax.set_xlabel('Concept Weight')\nax.set_ylabel('Count')\nax.set_title('CIFAR100 \\'Desert\\' Concept')\nax.set_xticks([p + bar_width for p in index])\nax.set_xticklabels(['0.00', '0.05', '0.10', '0.15'])\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ndistance_diff = [-5.0, -2.5, 0.0, 2.5, 5.0, 7.5, 10.0]\ncenter_samples = [100, 80, 60, 40, 20, 10, 5]\nrandom_samples = [90, 70, 50, 30, 10, 5, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the bar chart\nax.bar(distance_diff, center_samples, color='yellow', label='Center')\nax.bar(distance_diff, random_samples, color='blue', label='Random')\n\n# Set labels and title\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Samples')\nax.set_title('Number of Samples by Distance Difference')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for plotting\nrepetition = [0.0, 2.5, 5.0, 7.5, 10.0]\nclusters = [1200, 800, 400, 200, 100]\n\n# Create a bar chart\nplt.figure(figsize=(4.0, 3.0))\nplt.bar(repetition, clusters, color='orange')\n\n# Set labels and title\nplt.xlabel('Number of Repetition')\nplt.ylabel('Number of Clusters')\nplt.title('Clusters vs Number of Repetition')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndistances = [0, 1, 2, 3, 4]\ncorrectly_classified = [400, 300, 200, 100, 0]\nmisclassified = [350, 250, 150, 50, 0]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\nbars = ax.bar(distances, correctly_classified, color='blue', label='Correctly classified')\nbars2 = ax.bar(distances, misclassified, bottom=correctly_classified, color='orange', label='Misclassified')\n\n# Add labels and title\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Count')\nax.set_title('Classification by Distance')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nconfidences = [0.0, 0.2, 0.4, 0.6, 0.8]\naccuracies = [0.2, 0.2, 0.4, 0.6, 0.8]\n\n# Create a bar chart\nplt.bar(confidences, accuracies, color='brown')\n\n# Set the title and labels\nplt.title('Calibration Error: 0.31')\nplt.xlabel('Confidence in bin')\nplt.ylabel('Accuracy in bin')\n\n# Set the y-axis limits\nplt.ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['0.0', '0.2', '0.4', '0.6', '0.8']\nvalues = [500, 300, 100, 80, 90]\n\n# Create bar chart\nplt.figure(figsize=(6.0, 5.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set title and labels\nplt.title('Number of Queries Overlap')\nplt.xlabel('% images overlap')\nplt.ylabel('Number of queries')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Set the x-axis label\nax.set_xlabel('X Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Label')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 500)\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.08, 0), 0.04, 400, color='blue'))\n\n# Draw another rectangle\nax.add_patch(plt.Rectangle((0.12, 0), 0.04, 300, color='blue'))\n\n# Draw a third rectangle\nax.add_patch(plt.Rectangle((0.16, 0), 0.04, 200, color='blue'))\n\n# Draw a fourth rectangle\nax.add_patch(plt.Rectangle((0.20, 0), 0.04, 100, color='blue'))\n\n# Draw a fifth rectangle\nax.add_patch(plt.Rectangle((0.24, 0), 0.04, 50, color='blue'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [5, 10, 15, 20]\ny1 = [20, 40, 60, 80]\ny2 = [20, 40, 60, 80]\ny3 = [20, 40, 60, 80]\ny4 = [20, 40, 60, 80]\ny5 = [20, 40, 60, 80]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the lines with specified colors and markers\nax.plot(x, y1, 'b-', label='JPEG+LDPC')\nax.plot(x, y2, 'r-', label='DEEPJSCC w/o ofdm')\nax.plot(x, y3, 'g-', label='DEEPJSCC w/ ofdm')\nax.plot(x, y4, 'm-', label='OURS')\n\n# Set the title and labels\nax.set_title('Classification Accuracy (%)')\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Add grid lines\nax.grid(True)\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for each category\ncontent = [5, 6, 6, 5, 4, 3, 2, 1]\norganization = [6, 6, 5, 4, 3, 2, 1, 0]\nlanguage = [6, 5, 4, 3, 2, 1, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(content, label='Content', color='blue')\nax.plot(organization, label='Organization', color='orange')\nax.plot(language, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Performance Gain (%)')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 20, 40, 60, 80]\ny1 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny2 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny3 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny4 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny5 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny6 = [0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the lines with specified colors and markers\nax.plot(x, y1, 'r-o', label='coco (10k)')\nax.plot(x, y2, 'g-o', label='laion (10k)')\nax.plot(x, y3, 'b-o', label='coco (5k)')\nax.plot(x, y4, 'm-o', label='laion (5k)')\nax.plot(x, y5, 'y-o', label='CLIP')\n\n# Set the title and labels\nax.set_title('Effect of Vocabulary on Zero Shot Accuracy')\nax.set_xlabel('Deposition IO Norm')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Add a horizontal line at y=0.75\nax.axhline(y=0.75, color='black', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0.25, 0.5, 0.75, 1.0]\ny1 = [0.03, 0.02, 0.01, 0.01]\ny2 = [0.03, 0.02, 0.01, 0.01]\ny3 = [0.03, 0.02, 0.01, 0.01]\ny4 = [0.03, 0.02, 0.01, 0.01]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='MAXN=512', color='green')\nax.plot(x, y2, label='MAXN=1024', color='red')\nax.plot(x, y3, label='MAXN=2048', color='blue')\n\n# Set the title and labels\nax.set_title('Plot of Data Points')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Add markers at specific points\nmarkers = [(0.25, 0.03), (0.5, 0.02), (0.75, 0.01), (1.0, 0.01)]\nfor x_val, y_val in markers:\n    ax.plot(x_val, y_val, 'r^')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_base_fid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\ny_ours_fid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\ny_base_is = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\ny_ours_is = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\ny_base_cw_fid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\ny_ours_cw_fid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\ny_base_is_fid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\ny_ours_is_fid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\ny_base_cas = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\ny_ours_cas = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 3, figsize=(8.0, 10.0))\n\n# Plot FID data\naxes[0, 0].plot(x, y_base_fid, 'b-', label='base')\naxes[0, 0].plot(x, y_ours_fid, 'r-', label='ours')\naxes[0, 0].set_title('FID')\naxes[0, 0].legend()\n\n# Plot IS data\naxes[0, 1].plot(x, y_base_is, 'b-', label='base')\naxes[0, 1].plot(x, y_ours_is, 'r-', label='ours')\naxes[0, 1].set_title('IS')\n\n# Plot CW-FID data\naxes[0, 2].plot(x, y_base_cw_fid, 'b-', label='base')\naxes[0, 2].plot(x, y_ours_cw_fid, 'r-', label='ours')\naxes[0, 2].set_title('CW-FID')\n\n# Plot IS-FID data\naxes[1, 0].plot(x, y_base_is_fid, 'b-', label='base')\naxes[1, 0].plot(x, y_ours_is_fid, 'r-', label='ours')\naxes[1, 0].set_title('IS-FID')\n\n# Plot CAS data\naxes[1, 1].plot(x, y_base_cas, 'b-', label='base')\naxes[1, 1].plot(x, y_ours_cas, 'r-', label='ours')\naxes[1, 1].set_title('CAS')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nweeks = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28]\nauto_profiled = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\nmanually_analyzed = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(weeks, auto_profiled, 'r-', label='Auto-profiled')\nax.plot(weeks, manually_analyzed, 'b-', label='Manually-analyzed')\n\n# Set the title and labels\nax.set_title('Normalized Value Over Time')\nax.set_xlabel('Week')\nax.set_ylabel('Normalized Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30]\ny5 = [55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='blue')\nax.plot(x, y2, label='LWF', color='#FF4500')\nax.plot(x, y3, label='EWC', color='#FF69B4')\nax.plot(x, y4, label='SEQ', color='#FF69B4')\n\n# Set the title and labels\nax.set_title('Average Accuracy')\nax.set_xlabel('Task')\nax.set_ylabel('Percentage')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny_blue = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\ny_red = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\ny_green = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the lines with markers\nax.plot(x, y_blue, 'bo-', label='Oesense')\nax.plot(x, y_red, 'ro-', label='KWS')\nax.plot(x, y_green, 'go-', label='ECG5000')\n\n# Set the title and labels\nax.set_title('Line Chart with Markers')\nax.set_xlabel('Unertainty threshold')\nax.set_ylabel('Accuracy')\n\n# Add grid\nax.grid(True)\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 20, 40, 60, 80, 100, 120]\ny = [10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'bo-', color='blue')\n\n# Set the title and labels\nax.set_title('Log KL Divergence')\nax.set_xlabel('Number of Parameters')\nax.set_ylabel('Log KL Divergence')\n\n# Set the y-axis limits\nax.set_ylim(10**-5, 10**-3)\n\n# Set the x-axis limits\nax.set_xlim(0, 120)\n\n# Set the y-axis ticks\nax.set_yticks([10**-5, 10**-4, 10**-3])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Define the data\nx = [0, 500, 1000, 1500, 2000]\ny1 = [0.8, 0.8, 0.8, 0.8, 0.8]\ny2 = [0.6, 0.6, 0.6, 0.6, 0.6]\ny3 = [0.4, 0.4, 0.4, 0.4, 0.4]\ny4 = [0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Plot the data\nax.plot(x, y1, label='7B', color='blue')\nax.plot(x, y2, label='7B (Fine-tuned)', color='pink')\n\n# Set the title and labels\nax.set_title('GPT-4 Evaluation')\nax.set_xlabel('Iterations')\nax.set_ylabel('Attack Success Rate')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10**-2, 10**-1, 10**0]\ny_full = [50, 60, 70]\ny_spt = [55, 65, 75]\ny_vpt = [60, 70, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the lines with markers\nax.plot(x, y_full, 'g-', label='Full')\nax.plot(x, y_spt, 'r-', label='SPT')\nax.plot(x, y_vpt, 'b-', label='VPT')\n\n# Set the title and labels\nax.set_title('Test Accuracy vs Fraction of Training Data (log scale)')\nax.set_xlabel('Fraction of training data (log scale)')\nax.set_ylabel('Test accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Set the grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data points\nx = [0, 50, 100, 150, 200]\ny1 = [1, 1.5, 1.8, 1.7, 1.9]\ny2 = [0.5, 0.6, 0.7, 0.8, 0.9]\ny3 = [0.3, 0.4, 0.5, 0.6, 0.7]\ny4 = [1.2, 1.3, 1.4, 1.5, 1.6]\n\n# Plotting\nplt.figure(figsize=(4.0, 3.0))\nplt.plot(x, y1, label='Gradient 1', color='green')\nplt.plot(x, y2, label='Gradient 2', color='blue')\nplt.plot(x, y3, label='Gradient 3', color='orange')\nplt.plot(x, y4, label='Gradient 4', color='red')\n\n# Adding labels and title\nplt.xlabel('Gradient Steps (x 62.5K)')\nplt.ylabel('Value')\nplt.title('Gradient Analysis')\n\n# Adding legend\nplt.legend()\n\n# Displaying the plot\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(16.0, 8.0))\n\n# Define the data for each subplot\ndata = [\n    [0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72]\n]\n\n# Plot the data on each subplot\nfor i in range(2):\n    for j in range(2):\n        ax = axes[i, j]\n        ax.plot(range(10), data[i*2+j], color='purple')\n        ax.fill_between(range(10), data[i*2+j], color='lightblue', alpha=0.5)\n        ax.set_title(f\"Graph-SST2\")\n        ax.set_xlabel(\"Ratio r\")\n        ax.set_ylabel(\"Performance\")\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [120, 90, 60, 30, 1]\ny_ours = [75.0, 80.0, 82.5, 85.0, 87.5]\ny_acr = [75.0, 80.0, 82.5, 85.0, 87.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y_ours, 'bo-', label='Ours')\nax.plot(x, y_acr, 'go-', label='ACR')\n\n# Set labels and title\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Comparison of Top-1 Accuracy for Different Imbalance Ratios')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [40, 50, 60, 70, 80, 90, 100]\ny_APTQ = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\ny_LLaMa_7B = [3.11, 3.11, 3.11, 3.11, 3.11, 3.11, 3.11]\ny_OWQ_4bit = [3.32, 3.32, 3.32, 3.32, 3.32, 3.32, 3.32]\ny_GPTQ_4bit = [3.53, 3.53, 3.53, 3.53, 3.53, 3.53, 3.53]\ny_LLM_QAT_4bit = [3.63, 3.63, 3.63, 3.63, 3.63, 3.63, 3.63]\n\n# Plotting\nplt.figure(figsize=(5.0, 4.0))\nplt.plot(x, y_APTQ, label='APTQ', color='blue')\nplt.plot(x, y_LLaMa_7B, label='LLaMa-7B (FP16): 5.22', color='purple')\nplt.plot(x, y_OWQ_4bit, label='OWQ-4bit: 5.56', color='orange')\nplt.plot(x, y_GPTQ_4bit, label='GPTQ-4bit: 5.62', color='green')\nplt.plot(x, y_LLM_QAT_4bit, label='LLM-QAT-4bit: 7.4', color='red')\n\n# Setting the title and labels\nplt.title('Perplexity vs Ratio of 4-bit Utilization')\nplt.xlabel('Ratio of 4-bit Utilization (%)')\nplt.ylabel('Perplexity (PPL)')\n\n# Adding a legend\nplt.legend()\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data points\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [82.98, 89.53, 90.47, 92.41, 93.7, 96.75, 96.75]\n\n# Plotting\nplt.figure(figsize=(5.0, 2.0))\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\nplt.title('Coverage Ratio vs Number of Training Objects')\nplt.grid(True)\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\niterations = [0, 2, 4, 6, 8]\naverage_values = [750, 700, 650, 600, 600]\nstd_deviation_values = [750, 700, 650, 600, 600]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the lines\nax.plot(iterations, average_values, label='Average', color='blue')\nax.plot(iterations, std_deviation_values, label='Standard Deviation', color='lightblue')\n\n# Fill between the lines\nax.fill_between(iterations, average_values, std_deviation_values, color='lightgrey')\n\n# Set the title and labels\nax.set_title('N-ELBO')\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny_doN = [\n    [3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2],\n    [3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1],\n    [3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3],\n    [3.4, 3.4, 3.4, 3.4, 3.4, 3.4, 3.4, 3.4]\n]\ny_rainbow = [\n    [5.2, 5.2, 5.2, 5.2, 5.2, 5.2, 5.2, 5.2],\n    [5.1, 5.1, 5.1, 5.1, 5.1, 5.1, 5.1, 5.1],\n    [5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3],\n    [5.4, 5.4, 5.4, 5.4, 5.4, 5.4, 5.4, 5.4]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nfor i in range(4):\n    ax.plot(x, y_doN[i], label=f'DoN {i+1}')\n    ax.plot(x, y_rainbow[i], label=f'Rainbow {i+1}')\n\n# Set labels and title\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN/Rainbow')\nax.set_title('Comparison of DoN and Rainbow Scores')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nvocab_sizes = [256, 512, 1024, 2048, 8192, 16384]\nbpe_values = [0.4, 0.6, 0.8, 0.8, 0.6, 0.4]\nwordpunct_values = [0.6, 0.8, 0.8, 0.6, 0.4, 0.4]\nwhitespace_values = [0.8, 0.8, 0.6, 0.6, 0.4, 0.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(vocab_sizes, bpe_values, 'b-', label='BPE')\nax.plot(vocab_sizes, wordpunct_values, 'o-', label='Wordpunct')\nax.plot(vocab_sizes, whitespace_values, 'g-', label='Whitespaces')\n\n# Set the title and labels\nax.set_title('Test set TPR | FPR = 10^-4')\nax.set_xlabel('Vocabulary size')\nax.set_ylabel('TPR')\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\ncompression_rate = [1, 12, 18, 30]\nword_error_rate_cnn = [26.0, 34.4, 28.6, 55.0]\nword_error_rate_cif = [24.7, 36.8, 28.6, 55.0]\nword_error_rate_star = [18.0, 30.2, 19.8, 55.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(compression_rate, word_error_rate_cnn, label='CNN', color='pink')\nax.plot(compression_rate, word_error_rate_cif, label='CIF', color='purple')\nax.plot(compression_rate, word_error_rate_star, label='STAR', color='brown')\n\n# Set labels and title\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\nax.set_title('Word Error Rate vs Compression Rate')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny_pilot = [93, 93, 93, 93, 93, 93, 93, 93]\ny_retrained_model = [85, 85, 85, 85, 85, 85, 85, 85]\ny_pretrained_model = [75, 75, 75, 75, 75, 75, 75, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y_pilot, 'r-o', label='PILOTE')\nax.plot(x, y_retrained_model, 'b-o', label='Re-trained model')\nax.plot(x, y_pretrained_model, 'g-o', label='Pre-trained model accuracy')\n\n# Set the title and labels\nax.set_title('Average Accuracy of Five Rounds')\nax.set_xlabel('Number of exemplars in class \"Run\"')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Add a horizontal line at y=75\nax.axhline(y=75, color='g', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nsteps = [0, 5, 10, 15, 20]\nxllm = [0.1, 0.125, 0.15, 0.175, 0.2]\nsingle_pass_llm = [0.1, 0.125, 0.15, 0.175, 0.2]\n\n# Plotting\nplt.figure(figsize=(4.0, 3.0))\nplt.plot(steps, xllm, label='xLLM', color='blue')\nplt.plot(steps, single_pass_llm, label='Single-Pass LLM', color='red')\nplt.xlabel('# of Steps')\nplt.ylabel('Avg Fidelity')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['All', 'MLP', 'GCN', 'NCN', 'NEO', 'SEAL', 'Node2Vec']\nhits_ogbl_collab = [80, 75, 70, 65, 60, 55, 50]\nhits_ogbl_ppa = [80, 75, 70, 65, 60, 55, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(categories, hits_ogbl_collab, label='ogbl-collab', color='blue')\nax.plot(categories, hits_ogbl_ppa, label='ogbl-ppa', color='orange')\n\n# Set the title and labels\nax.set_title('Hits @ 50')\nax.set_xlabel('Categories')\nax.set_ylabel('Hits')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12]\ny1 = [0.055, 0.055, 0.055, 0.055, 0.055, 0.055]\ny2 = [0.045, 0.045, 0.045, 0.045, 0.045, 0.045]\n\n# Create the plot\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y1, label='outside-code-diff', color='blue')\nplt.plot(x, y2, label='inside-code-diff', color='orange')\n\n# Set the title and labels\nplt.title('Android')\nplt.xlabel('Layer')\nplt.ylabel('Value')\n\n# Add a legend\nplt.legend()\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [6, 7, 8, 9]\ny1 = [10, 10, 9, 9]\ny2 = [9, 9, 8, 8]\ny3 = [8, 8, 7, 7]\ny4 = [7, 7, 6, 6]\ny5 = [6, 6, 5, 5]\ny6 = [5, 5, 4, 4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Direct (100 samples)')\nax.plot(x, y2, 'g-', label='RFFT (100 samples)')\nax.plot(x, y3, 'y-', label='Scratchpad (100 samples)')\nax.plot(x, y4, 'r-', label='Scratchpad (5000 samples)')\n\n# Set the title and labels\nax.set_title('Digit Length vs Accuracy')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(0.3, 10)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(0, 380)\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis ticks\nax.set_yticks([250, 300, 350, 400])\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Draw horizontal lines at specified y-values\nfor _ in range(4):\n    ax.axhline(y=375, color='black', linestyle='--')\n\n# Plot the orange line\nax.plot([0, 20, 40, 60, 80], [225, 275, 325, 350, 375], 'o-', color='orange', label='iaion')\n\n# Plot the black line\nax.plot([0, 20, 40, 60, 80], [225, 275, 325, 350, 375], 'k-', label='CLIP')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny2 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny3 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny4 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny5 = [0.55, 0.6, 0.65, 0.7, 0.75]\n\n# Plotting\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y1, 'y^', label='CNN')\nplt.plot(x, y2, 'r^', label='CNN+HMM')\nplt.plot(x, y3, 'b^', label='RF')\nplt.plot(x, y4, 'bo', label='RF+HMM')\nplt.plot(x, y5, 'bo', label='RF+HMM')\n\n# Setting labels and title\nplt.xlabel('No. of Users in Development Set')\nplt.ylabel('F1')\nplt.title('Performance Metrics Over Time')\n\n# Adding legend\nplt.legend()\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\ny3 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='LibriCSS (test)')\nax.plot(x, y2, 'r-', label='AMI (dev)')\nax.plot(x, y3, 'b-', label='SDM')\n\n# Set the title and labels\nax.set_title('WER (%) vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Set the y-axis limits\nax.set_ylim(2, 10)\n\n# Add markers at specific points\nmarkers = [(2, 6.74), (3, 4.54), (4, 3.96), (5, 3.71), (6, 3.49), (7, 3.34), (8, 3.14)]\nfor x_val, y_val in markers:\n    ax.plot(x_val, y_val, 'bo', markersize=5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10**-7, 10**-6, 10**-5, 10**-4]\ny1 = [1, 1, 1, 1]\ny2 = [1, 1, 1, 1]\ny3 = [1, 1, 1, 1]\ny4 = [1, 1, 1, 1]\ny5 = [1, 1, 1, 1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='M-LVQ-4x8-10', color='orange')\nax.plot(x, y2, label='M-LVQ-4x8-100', color='green')\nax.plot(x, y3, label='M-LVQ-4x8-256', color='orange')\nax.plot(x, y4, label='M-LVQ-4x8', color='purple')\nax.plot(x, y5, label='empirical relat. (B2=8.0)', color='blue')\n\n# Set the title and labels\nax.set_title('Quantization error')\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nratios = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nperformance_pna_ours = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\nperformance_gin_ours = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plotting the first subplot\naxes[0].plot(ratios, performance_pna_ours, label='PNA + ours', color='purple')\naxes[0].plot(ratios, performance_gin_ours, label='GIN + ours', color='orange')\naxes[0].set_title('SPMotif-0.5')\naxes[0].set_xlabel('Ratio r')\naxes[0].set_ylabel('Performance')\naxes[0].legend()\naxes[0].fill_between(ratios, 0.5, 0.8, color='lightblue', alpha=0.5)\naxes[0].fill_between(ratios, 0.5, 0.8, color='lightcoral', alpha=0.5)\n\n# Plotting the second subplot\naxes[1].plot(ratios, performance_pna_ours, label='PNA + ours', color='purple')\naxes[1].plot(ratios, performance_gin_ours, label='GIN + ours', color='orange')\naxes[1].set_title('SPMotif-0.7')\naxes[1].set_xlabel('Ratio r')\naxes[1].set_ylabel('Performance')\naxes[1].legend()\naxes[1].fill_between(ratios, 0.5, 0.8, color='lightblue', alpha=0.5)\naxes[1].fill_between(ratios, 0.5, 0.8, color='lightcoral', alpha=0.5)\n\n# Plotting the third subplot\naxes[2].plot(ratios, performance_pna_ours, label='PNA + ours', color='purple')\naxes[2].plot(ratios, performance_gin_ours, label='GIN + ours', color='orange')\naxes[2].set_title('SPMotif-0.9')\naxes[2].set_xlabel('Ratio r')\naxes[2].set_ylabel('Performance')\naxes[2].legend()\naxes[2].fill_between(ratios, 0.5, 0.8, color='lightblue', alpha=0.5)\naxes[2].fill_between(ratios, 0.5, 0.8, color='lightcoral', alpha=0.5)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nensemble_sizes = [6, 9, 12, 18, 24, 30]\naccuracies = [74.5, 76.5, 77.5, 77.5, 77.5, 77.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(ensemble_sizes, accuracies, color='blue')\n\n# Set the title and labels\nax.set_title('Accuracy')\nax.set_xlabel('Ensemble Size')\nax.set_ylabel('')\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78.0)\n\n# Set the x-axis ticks\nax.set_xticks([6, 9, 12, 18, 24, 30])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [3, 10, 30, 100]\ny1 = [0.8, 0.7, 0.6, 0.5]\ny2 = [0.8, 0.7, 0.6, 0.5]\ny3 = [0.8, 0.7, 0.6, 0.5]\ny4 = [0.8, 0.7, 0.6, 0.5]\ny5 = [0.8, 0.7, 0.6, 0.5]\n\n# Plotting\nplt.figure(figsize=(6.0, 3.0))\nplt.plot(x, y1, 'r-', label='GPT-Neo')\nplt.plot(x, y2, 'y-', label='5')\nplt.plot(x, y3, 'b-', label='3')\nplt.plot(x, y4, 'g-', label='7')\nplt.plot(x, y5, 'k-', label='30')\n\n# Adding labels and title\nplt.xlabel('# Epochs')\nplt.ylabel('Magnitude')\nplt.title('Magnitude vs Epochs')\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [96, 192, 336, 720]\ny1 = [0.14, 0.16, 0.18, 0.20]\ny2 = [0.14, 0.16, 0.18, 0.20]\ny3 = [0.14, 0.16, 0.18, 0.20]\ny4 = [0.14, 0.16, 0.18, 0.20]\ny5 = [0.14, 0.16, 0.18, 0.20]\ny6 = [0.14, 0.16, 0.18, 0.20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15.0, 4.0))\n\n# Plot data\nax.plot(x, y1, 'b-', label='pred_length=96')\nax.plot(x, y2, 'o-', label='pred_length=192')\nax.plot(x, y3, 'g-', label='pred_length=336')\nax.plot(x, y4, 'r-', label='pred_length=720')\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_title('Traffic')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [224, 128, 64, 32]\ny1 = [70, 65, 60, 55]\ny2 = [70, 65, 60, 55]\ny3 = [70, 65, 60, 55]\ny4 = [70, 65, 60, 55]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Plotting the data\nax.plot(x, y1, label='ImageNet-1k', color='orange')\nax.plot(x, y2, label='ImageNet-C/P (Fog)', color='orange')\nax.plot(x, y3, label='ImageNet-1k (Fog)', color='blue')\nax.plot(x, y4, label='ImageNet-C/P (Fog)', color='blue')\n\n# Setting the title and labels\nax.set_title('Serial (n=8, m=1)')\nax.set_xlabel('Time')\nax.set_ylabel('Top-1 Acc.')\n\n# Adding a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nsnr = [5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0]\naccuracy_jpegldpc = [95, 85, 75, 65, 55, 45, 35, 25, 15]\naccuracy_deepjscsswofdm = [85, 75, 65, 55, 45, 35, 25, 15, 5]\naccuracy_deepjscsswofdm2 = [80, 70, 60, 50, 40, 30, 20, 10, 0]\naccuracy_ours = [90, 80, 70, 60, 50, 40, 30, 20, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(snr, accuracy_jpegldpc, 'b-', label='JEPG+LDPC')\nax.plot(snr, accuracy_deepjscsswofdm, 'or-', label='DEEPJSCC w/o OFDM')\nax.plot(snr, accuracy_deepjscsswofdm2, 'g^-', label='DEEPJSCC w/ OFDM')\nax.plot(snr, accuracy_ours, 'rs-', label='OURS')\n\n# Set the title and labels\nax.set_title('Classification Accuracy vs SNR')\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Define the data for the first plot\nx1 = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [1, 1, 1, 1, 1, 1, 1, 1, 1]\ny2 = [2, 2, 2, 2, 2, 2, 2, 2, 2]\ny3 = [3, 3, 3, 3, 3, 3, 3, 3, 3]\ny4 = [4, 4, 4, 4, 4, 4, 4, 4, 4]\n\n# Plot the data\nax.plot(x1, y1, 'm-', label='Line 1 (Sinusoidal)')\nax.plot(x1, y2, 'b-', label='Line 2 (Quadratic)')\nax.plot(x1, y3, 'g-', label='Line 3 (Random Noise)')\nax.plot(x1, y4, 'r-', label='Line 4 (Exponential Focus)')\n\n# Set the title and labels\nax.set_title('Performance Value vs. Gradient Steps')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Performance Value')\n\n# Set the legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for Line 1\nx_line1 = [0, 50, 100, 150, 200]\ny_line1 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 2\nx_line2 = [0, 50, 100, 150, 200]\ny_line2 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 3\nx_line3 = [0, 50, 100, 150, 200]\ny_line3 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the lines\nax.plot(x_line1, y_line1, 'o-', color='orange', label='Line 1')\nax.plot(x_line2, y_line2, 'b-', label='Line 2')\nax.plot(x_line3, y_line3, '^-', color='green', label='Line 3')\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\nax.set_title('Polynomial Trend Analysis')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['All', 'MLP', 'GCN', 'NCN', 'NeoGNN-BUDDY', 'Node2Vec']\nvalues_2022 = [78, 76, 74, 72, 70, 68]\nvalues_2023 = [77, 75, 73, 71, 69, 67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Plot the data\nax.plot(categories, values_2022, label='ogbl-collab 2022', color='blue')\nax.plot(categories, values_2023, label='ogbl-collab 2023', color='cyan')\n\n# Set the title and labels\nax.set_title('ogbl-collab Results')\nax.set_xlabel('Categories')\nax.set_ylabel('Hits')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Precision')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(10, -14, -2))\n\n# Draw horizontal lines at specified y-values\nfor y in range(10, -14, -2):\n    ax.axhline(y=y, color='gray', linestyle='--')\n\n# Draw vertical lines at specified x-values\nfor x in [10, 20, 30, 40, 50, 60]:\n    ax.axvline(x=x, color='gray', linestyle='--')\n\n# Plot the data\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'b-', label='Standard')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'r-', label='Constrained')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'g-', label='Experimental')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'm-', label='Hypothetical')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.logspace(1, 4, 5)\ny1 = np.logspace(-2, -6, 5)\ny2 = np.logspace(-2, -6, 5)\ny3 = np.logspace(-2, -6, 5)\ny4 = np.logspace(-2, -6, 5)\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 8.0), sharex=True, sharey=True)\n\n# Plot data on each subplot\nfor ax in axes.flat:\n    ax.plot(x, y1, 'b-', label='Standard')\n    ax.plot(x, y2, 'r-', label='Constrained')\n    ax.plot(x, y3, 'g-', label='Innovative')\n    ax.plot(x, y4, 'y-', label='Experimental')\n\n# Set titles and labels\naxes[0, 0].set_title('Graph Variation 1')\naxes[0, 0].set_ylabel('Peak Performance')\naxes[0, 1].set_title('Graph Variation 2')\naxes[0, 1].set_ylabel('Peak Performance')\naxes[1, 0].set_title('Graph Variation 3')\naxes[1, 0].set_ylabel('Peak Performance')\naxes[1, 1].set_title('Graph Variation 4')\naxes[1, 1].set_ylabel('Peak Performance')\n\n# Set x-axis label for all subplots\nfor ax in axes.flat:\n    ax.set_xlabel('N')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax1 = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the title of the first plot\nax1.set_title('Daytime Activity Monitoring')\n\n# Set the y-axis label for the first plot\nax1.set_ylabel('Activity Level')\n\n# Set the x-axis label for the first plot\nax1.set_xlabel('Time (Hours)')\n\n# Plot the first line graph with blue color\nax1.plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'b-', label='Standard Activity')\n\n# Set the y-axis limits for the first plot\nax1.set_ylim(-1.5, 1.5)\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second plot\nax2.set_title('Nighttime Activity Monitoring')\n\n# Set the y-axis label for the second plot\nax2.set_ylabel('Activity Level')\n\n# Set the x-axis label for the second plot\nax2.set_xlabel('Time (Hours)')\n\n# Plot the second line graph with red color\nax2.plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'r-', label='Innovative Activity')\n\n# Set the y-axis limits for the second plot\nax2.set_ylim(-1.5, 1.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data points\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ny1 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\ny2 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\n\n# Plot the lines\nax.plot(x, y1, color='blue', label='Standard Performance')\nax.plot(x, y2, color='red', label='Innovative Performance')\n\n# Set the title and labels\nax.set_title('Comparative Performance Analysis Over Time')\nax.set_xlabel('Time (Months)')\nax.set_ylabel('Performance Index')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nmonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nmonthly_sales = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100]\naverage_temperature = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(months, monthly_sales, 'b-', label='Monthly Sales')\nplt.plot(months, average_temperature, 'r-', label='Average Temperature')\n\n# Marking specific months\nplt.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='red', marker='o')\nplt.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], color='red', marker='o')\n\n# Setting labels and title\nplt.xlabel('Month')\nplt.ylabel('Sales (in thousands)')\nplt.title('Sales and Temperature Correlation Over a Year')\nplt.legend()\n\n# Setting y-axis limits\nplt.ylim(800, 2200)\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for each graph\ntime = [0, 2, 4, 6, 8, 10]\ngrowth_values = [1.3, 0.8, 0.3, 0.3, 0.8, 0.8]\ndecay_values = [1.3, 0.8, 0.3, 0.3, 0.8, 0.8]\noscillation_values = [1.2, 1.0, 0.8, 0.6, 0.4, 0.2]\n\n# Create a figure and axis with specified dimensions\nfig, axes = plt.subplots(3, 1, figsize=(6.0, 9.0))\n\n# Plot the first graph (Exponential Growth Over Time)\naxes[0].plot(time, growth_values, 'g-', label='Growth')\naxes[0].set_title('Exponential Growth Over Time')\naxes[0].set_xlabel('Time')\naxes[0].set_ylabel('Value')\naxes[0].legend()\n\n# Plot the second graph (Exponential Decay Over Time)\naxes[1].plot(time, decay_values, 'r-', label='Decay')\naxes[1].set_title('Exponential Decay Over Time')\naxes[1].set_xlabel('Time')\naxes[1].set_ylabel('Value')\naxes[1].legend()\n\n# Plot the third graph (Oscillatory Behavior Over Time)\naxes[2].plot(time, oscillation_values, 'b-', label='Oscillation')\naxes[2].set_title('Oscillatory Behavior Over Time')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Value')\naxes[2].legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ny2 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\ny3 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='5-shot direct', color='blue')\nax.plot(x, y2, label='5-shot scratchpad', color='orange')\nax.plot(x, y3, label='5-shot rule-following', color='green')\n\n# Set the title and labels\nax.set_title('Digit Length vs Accuracy')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 1, figsize=(5.0, 10.0), sharex=True)\n\n# Data for each subplot\ndata1 = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\ndata2 = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\ndata3 = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n# Plot data on each subplot\naxes[0].plot(data1, 'b-', label='Smoothed Data')\naxes[1].plot(data2, 'y-', label='Difference Data')\naxes[2].plot(data3, 'g-', label='Cumulative Sum')\n\n# Set titles and labels\naxes[0].set_title('Smoothed Representation')\naxes[1].set_title('First Difference of Data')\naxes[2].set_title('Cumulative Sum Over Time')\n\n# Set y-axis limits\naxes[0].set_ylim(-0.1, 0.3)\naxes[1].set_ylim(-100, 100)\naxes[2].set_ylim(0, 25)\n\n# Set x-axis limits\nfor ax in axes:\n    ax.set_xlim(0, 20)\n\n# Add legends\naxes[0].legend()\naxes[1].legend()\naxes[2].legend()\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified dimensions\nfig, axes = plt.subplots(4, 1, figsize=(6.0, 12.0))\n\n# Define time values\ntime_values = np.arange(0, 11)\n\n# Sin Wave\nsin_wave = np.sin(time_values)\naxes[0].plot(time_values, sin_wave, 'm', label='Sin Wave')\naxes[0].set_title('Sin Wave')\naxes[0].set_ylabel('Amplitude')\naxes[0].legend()\n\n# Cosine Wave\ncos_wave = np.cos(time_values)\naxes[1].plot(time_values, cos_wave, 'g', label='Cos Wave')\naxes[1].set_title('Cosine Wave')\naxes[1].set_ylabel('Amplitude')\naxes[1].legend()\n\n# Exponential Decay\nexp_decay = np.exp(-time_values / 5)\naxes[2].plot(time_values, exp_decay, 'b', label='Exp Decay')\naxes[2].set_title('Exponential Decay')\naxes[2].set_ylabel('Value')\naxes[2].legend()\n\n# Logarithmic Growth\nlog_growth = np.log(time_values + 1)\naxes[3].plot(time_values, log_growth, 'r', label='Log Growth')\naxes[3].set_title('Logarithmic Growth')\naxes[3].set_xlabel('Time')\naxes[3].set_ylabel('Value')\naxes[3].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.1, 0.2, 0.3, 0.4]\ny_positive = [82, 82, 79, 79]\ny_negative = [82, 82, 79, 79]\ny_contrastive = [84, 84, 84, 84]\ny_fuzzy = [86, 86, 86, 86]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(9, 6))\n\n# Plot the first subplot\naxes[0, 0].plot(x, y_positive, 'b-', marker='o')\naxes[0, 0].set_title('Positive bound')\naxes[0, 0].set_xlabel('Time')\naxes[0, 0].set_ylabel('Weight')\n\n# Plot the second subplot\naxes[0, 1].plot(x, y_negative, 'b-', marker='o')\naxes[0, 1].set_title('Negative bound')\naxes[0, 1].set_xlabel('Time')\naxes[0, 1].set_ylabel('Weight')\n\n# Plot the third subplot\naxes[1, 0].plot(x, y_contrastive, 'b-', marker='o')\naxes[1, 0].set_title('Contrastive loss weight')\naxes[1, 0].set_xlabel('Time')\naxes[1, 0].set_ylabel('Weight')\n\n# Plot the fourth subplot\naxes[1, 1].plot(x, y_fuzzy, 'b-', marker='o')\naxes[1, 1].set_title('Fuzzy coefficient')\naxes[1, 1].set_xlabel('Time')\naxes[1, 1].set_ylabel('Weight')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [82, 82, 82, 82, 82, 82, 82, 82, 82, 82]\ny2 = [85, 85, 85, 85, 85, 85, 85, 85, 85, 85]\ny3 = [75, 75, 75, 75, 75, 75, 75, 75, 75, 75]\ny4 = [70, 70, 70, 70, 70, 70, 70, 70, 70, 70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r', label='Positive Bound')\nax.plot(x, y2, 'g', label='Negative Bound')\nax.plot(x, y3, 'b', label='Contrastive Loss Weight')\nax.plot(x, y4, 'm', label='Additional Metric 2')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nrelaxation_levels = [1.2, 1.1, 1.0, 0.9]\nrain_vs_rain = [1.3, 1.2, 1.1, 1.0]\nsnow_vs_fog = [1.3, 1.2, 1.1, 1.0]\nrain_vs_snow = [1.3, 1.2, 1.1, 1.0]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(12, 4))\n\n# Plot for Dry vs Rain\naxes[0].plot(driving_styles, rain_vs_rain, 'r-', label='Rain')\naxes[0].plot(driving_styles, rain_vs_rain, 'ro')\naxes[0].set_title('Dry vs Rain')\naxes[0].set_xlabel('Driving Style')\naxes[0].set_ylabel('Relaxation Level')\naxes[0].legend()\n\n# Plot for Snow vs Fog\naxes[1].plot(driving_styles, snow_vs_fog, 'g-', label='Fog')\naxes[1].plot(driving_styles, snow_vs_fog, 'go')\naxes[1].set_title('Snow vs Fog')\naxes[1].set_xlabel('Driving Style')\naxes[1].set_ylabel('Relaxation Level')\naxes[1].legend()\n\n# Plot for Rain vs Snow\naxes[2].plot(driving_styles, rain_vs_snow, 'b-', label='Snow')\naxes[2].plot(driving_styles, rain_vs_snow, 'bo')\naxes[2].set_title('Rain vs Snow')\naxes[2].set_xlabel('Driving Style')\naxes[2].set_ylabel('Relaxation Level')\naxes[2].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 0.125, 0.25, 0.5, 1, 2, 4, 8]\ny_content = [8, 7, 6, 5, 4, 3, 2, 1]\ny_organization = [8, 7, 6, 5, 4, 3, 2, 1]\ny_language = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data\nax.plot(x, y_content, label='Content', color='blue')\nax.plot(x, y_organization, label='Organization', color='red')\nax.plot(x, y_language, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\n\n# Add markers at specific points\nmarkers = [(0, 8), (0.125, 7), (0.25, 6), (0.5, 5), (1, 4), (2, 3), (4, 2), (8, 1)]\nfor x_val, y_val in markers:\n    ax.plot(x_val, y_val, 'g^')  # Green triangle marker\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 20, 40, 60, 80]\ny_coco_10k = [0.75, 0.75, 0.75, 0.75, 0.75]\ny_laion_10k = [0.75, 0.75, 0.75, 0.75, 0.75]\ny_coco_5k = [0.75, 0.75, 0.75, 0.75, 0.75]\ny_laion_5k = [0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plotting the first subplot\naxes[0].plot(x, y_coco_10k, 'r-', label='COCO (10k)')\naxes[0].set_title('COCO 10K')\naxes[0].set_xlabel('Deposition IO Norm')\naxes[0].set_ylabel('Accuracy')\naxes[0].legend()\n\n# Plotting the second subplot\naxes[1].plot(x, y_laion_10k, 'b-', label='LAION (10k)')\naxes[1].set_title('LAION 10K')\naxes[1].set_xlabel('Deposition IO Norm')\naxes[1].set_ylabel('Accuracy')\naxes[1].legend()\n\n# Plotting the third subplot\naxes[2].plot(x, y_coco_5k, 'g-', label='COCO (5k)')\naxes[2].plot(x, y_laion_5k, 'y-', label='LAION (5k)')\naxes[2].set_title('COCO & LAION 5K')\naxes[2].set_xlabel('Deposition IO Norm')\naxes[2].set_ylabel('Accuracy')\naxes[2].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axes = plt.subplots(4, 2, figsize=(12.0, 9.0), sharex=True, sharey=True)\n\n# Define the data for each subplot\ndata = [\n    [0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04, 0.02],\n    [0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04, 0.02],\n    [0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04, 0.02],\n    [0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04, 0.02]\n]\n\n# Plot the data on each subplot\nfor i in range(4):\n    for j in range(2):\n        ax = axes[i, j]\n        ax.plot(data[i], label=f\"Error Rate vs. Learning Rate (Batch Size={64 if i < 2 else 128})\")\n        ax.plot(data[j], label=f\"Accuracy vs. Dropout (Batch Size={64 if i < 2 else 128})\")\n        ax.set_title(f\"Error Rate vs. Learning Rate\" if i == 0 else \"Error Rate vs. Learning Rate\" if i == 1 else \"Error Rate vs. Learning Rate\" if i == 2 else \"Error Rate vs. Learning Rate\")\n        ax.set_xlabel(\"Parameter Rate\")\n        ax.set_ylabel(\"Metric\")\n        ax.legend()\n        ax.set_xlim(0, 0.3)\n        ax.set_ylim(0.05, 0.2)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data points\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_base_model_1 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\ny_our_model_1 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\n\ny_base_model_2 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\ny_our_model_2 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n# Plot the data\nax.plot(x, y_base_model_1, label='Base Model', color='blue')\nax.plot(x, y_our_model_1, label='Our Model', color='orange')\n\nax.plot(x, y_base_model_2, label='Base Model', color='blue')\nax.plot(x, y_our_model_2, label='Our Model', color='orange')\n\n# Set the title and labels\nax.set_title('Metric 1')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Define the x-axis values\nx_values = [0, 25, 50, 75, 100, 125, 150, 175, 200]\n\n# Define the y-axis values for the blue line\ny_values_base_model = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n# Define the y-axis values for the green line\ny_values_our_model = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n# Plot the lines with specified colors\nax.plot(x_values, y_values_base_model, color='blue', label='Base Model')\nax.plot(x_values, y_values_our_model, color='green', label='Our Model')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 200)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 0.8)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 6*10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**-13, 10**-4)\n\n# Set the tick marks for the x-axis\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 6*10**1])\n\n# Set the tick marks for the y-axis\nax.set_yticks([10**-13, 10**-10, 10**-7, 10**-4, 10**-1])\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('N')\nax.set_ylabel('')\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Define the data points for performance and efficiency\nperformance_data = [1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5]\nefficiency_data = [1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5]\n\n# Plot the data\nax.plot(performance_data, label='Performance', color='blue')\nax.plot(efficiency_data, label='Efficiency', color='red')\n\n# Add grid lines\nax.grid(True)\n\n# Set the limits for the x-axis\nax.set_xlim(0, 35)\n\n# Set the limits for the y-axis\nax.set_ylim(-1.5, 1.5)\n\n# Display the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for the plot\nx = [0, 5, 10, 15, 20, 25]\ny_performance = [0.3, 0.7, 0.9, 0.8, 0.6, 0.4]\ny_efficiency = [0.5, 0.8, 0.9, 0.7, 0.6, 0.5]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data points with specific colors and markers\nax.plot(x, y_performance, 'b-', label='Performance')\nax.plot(x, y_efficiency, 'r-', label='Efficiency')\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nweeks = [0, 5, 10, 15, 20, 25, 30]\nperformance = [0.8, 0.6, 0.4, 0.2, 0.2, 0.2, 0.2]\nefficiency = [0.8, 0.6, 0.4, 0.2, 0.2, 0.2, 0.2]\ngrowth = [0.8, 0.6, 0.4, 0.2, 0.2, 0.2, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(weeks, performance, 'bo-', label='Performance')\nax.plot(weeks, efficiency, 'ro-', label='Efficiency')\nax.plot(weeks, growth, 'go-', label='Growth')\n\n# Set the title and labels\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Values')\n\n# Set the y-axis limits\nax.set_ylim(0, 1.2)\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each series\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.6, 0.4, 0.2, 0.4, 0.6, 0.8]\ny2 = [0.6, 0.4, 0.2, 0.4, 0.6, 0.8]\ny3 = [0.6, 0.4, 0.2, 0.4, 0.6, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with specific colors and styles\nax.plot(x, y1, color='blue', linestyle='--', marker='o')\nax.plot(x, y2, color='green', linestyle='--', marker='o')\nax.plot(x, y3, color='pink', linestyle='--', marker='o')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Weeks')\nax.set_ylabel('Normalized Value')\n\n# Set the limits for the y-axis\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b^', label='BaCE')\nax.plot(x, y2, 'bv', label='LWF')\nax.plot(x, y3, 'g^', label='EWC')\nax.plot(x, y4, 'gv', label='SEQ')\n\n# Set the title and labels\nax.set_title('Average Accuracy (%)')\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1_bace = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ny1_ewc = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\n\n# Data for the second graph\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2_lwf = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny2_se = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the first graph\nax1.plot(x1, y1_bace, 'b-', label='BaCE')\nax1.plot(x1, y1_ewc, 'c-', label='EWC')\nax1.set_xlabel('Task')\nax1.set_ylabel('Average Accuracy (%)')\nax1.set_title('Performance Comparison: BaCE vs EWC')\nax1.legend()\nax1.grid(True)\n\n# Plot the second graph\nax2.plot(x2, y2_lwf, 'r^', label='LWF')\nax2.plot(x2, y2_se, 'm^', label='SE')\nax2.set_xlabel('Task')\nax2.set_ylabel('Average Accuracy (%)')\nax2.set_title('Performance Comparison: LWF vs SE')\nax2.legend()\nax2.grid(True)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(9.0, 7.0))\n\n# Data for the plots\nx = [0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000]\ny1 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\ny2 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\ny3 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\ny4 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\n\n# Plotting the data\naxes[0, 0].plot(x, y1, 'b-', label='model1 Series 1')\naxes[0, 0].plot(x, y2, 'r-', label='model1 Series 2')\naxes[0, 0].set_title('model1 Performance')\naxes[0, 0].set_xlabel('Iterations')\naxes[0, 0].set_ylabel('Success Rate')\naxes[0, 0].legend()\n\naxes[0, 1].plot(x, y1, 'b-', label='model2 Series 1')\naxes[0, 1].plot(x, y2, 'r-', label='model2 Series 2')\naxes[0, 1].set_title('model2 Performance')\naxes[0, 1].set_xlabel('Iterations')\naxes[0, 1].set_ylabel('Success Rate')\naxes[0, 1].legend()\n\naxes[1, 0].plot(x, y1, 'b-', label='model3 Series 1')\naxes[1, 0].plot(x, y2, 'r-', label='model3 Series 2')\naxes[1, 0].set_title('model3 Performance')\naxes[1, 0].set_xlabel('Iterations')\naxes[1, 0].set_ylabel('Success Rate')\naxes[1, 0].legend()\n\naxes[1, 1].plot(x, y1, 'b-', label='model4 Series 1')\naxes[1, 1].plot(x, y2, 'r-', label='model4 Series 2')\naxes[1, 1].set_title('model4 Performance')\naxes[1, 1].set_xlabel('Iterations')\naxes[1, 1].set_ylabel('Success Rate')\naxes[1, 1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [24, 22, 20, 18, 16, 14, 12]\ny2 = [26, 24, 22, 20, 18, 16, 14]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='IHM')\nax.plot(x, y2, 'r-', label='SDM')\n\n# Set the title and labels\nax.set_title('Wavelength vs. AMI WER (%)')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Wavelength (%)')\n\n# Add markers at specific points\nmarkers = [2, 3, 4, 5, 6, 7, 8]\nfor marker in markers:\n    ax.plot(marker, 24, 'k^', markersize=10)\n    ax.plot(marker, 22, 'k^', markersize=10)\n\n# Set the y-axis limits\nax.set_ylim(20, 28)\n\n# Add a horizontal line at y=22\nax.axhline(y=22, color='blue', linestyle='--')\n\n# Show legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [22, 24, 26, 28, 26, 24, 22]\ny2 = [20, 22, 24, 26, 24, 22, 20]\ny3 = [22, 24, 26, 28, 26, 24, 22]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the lines with markers\nax.plot(x, y1, 'b-', label='LibriCSS (test)')\nax.plot(x, y2, 'r-', label='AMI (dev)')\nax.plot(x, y3, 'g-', label='SDM Trend')\n\n# Set the title and labels\nax.set_title('Trend Comparison')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%) / AMI WER (%)')\n\n# Add markers at specific points\nmarkers = [(2, 22), (3, 24), (4, 26), (5, 28), (6, 26), (7, 24), (8, 22)]\nfor marker in markers:\n    ax.plot(marker[0], marker[1], 'ro')\n\n# Add a legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(20, 28)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny2 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny3 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny4 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny5 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny6 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, 'o-', label='LibriCSS WER')\nax.plot(x, y2, 'b-', label='AMI WER')\nax.plot(x, y3, 'r-', label='Threshold')\n\n# Set the title and labels\nax.set_title('Wavelength vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('Wavelength (%)')\n\n# Add a horizontal line at y=0.7\nax.axhline(y=0.7, color='r', linestyle='-')\n\n# Add a vertical line at x=4\nax.axvline(x=4, color='k', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(12, 4))\n\n# Data for each subplot\ndata = [\n    [82, 80, 78, 76, 74, 72],\n    [82, 80, 78, 76, 74, 72],\n    [85, 83, 81, 79, 77, 75],\n    [85, 83, 81, 79, 77, 75]\n]\n\n# Plot data on each subplot\nfor ax, d in zip(axes, data):\n    ax.plot(d, 'b-')\n    ax.fill_between(range(len(d)), d, color='lightblue', alpha=0.5)\n    ax.set_title('Contrastive loss weight.')\n    ax.set_xlabel('Time (s)')\n    ax.set_ylabel('Weight')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny_libri = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ny_threshold = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Plot data\nax.plot(x, y_libri, 'y-', label='LibriCSS WER')\nax.plot(x, y_threshold, 'r-', label='Threshold')\n\n# Set labels and title\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('WER vs Number of Microphones')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 1, figsize=(6.0, 12.0))\n\n# Data for the first subplot\nratio_r_0_5 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nperformance_pna_0_5 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\nperformance_gin_0_5 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n# Plotting the first subplot\naxes[0].plot(ratio_r_0_5, performance_pna_0_5, 'b-', label='PNA')\naxes[0].plot(ratio_r_0_5, performance_gin_0_5, 'g-', label='GIN')\naxes[0].fill_between(ratio_r_0_5, 0.4, 0.6, color='lightblue', alpha=0.5)\naxes[0].fill_between(ratio_r_0_5, 0.6, 0.8, color='lightgreen', alpha=0.5)\naxes[0].set_title('SPMotif-0.5')\naxes[0].set_xlabel('Ratio r')\naxes[0].set_ylabel('Performance')\naxes[0].legend()\n\n# Data for the second subplot\nratio_r_0_7 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nperformance_pna_0_7 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\nperformance_gin_0_7 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n# Plotting the second subplot\naxes[1].plot(ratio_r_0_7, performance_pna_0_7, 'b-', label='PNA')\naxes[1].plot(ratio_r_0_7, performance_gin_0_7, 'g-', label='GIN')\naxes[1].fill_between(ratio_r_0_7, 0.4, 0.6, color='lightblue', alpha=0.5)\naxes[1].fill_between(ratio_r_0_7, 0.6, 0.8, color='lightgreen', alpha=0.5)\naxes[1].set_title('SPMotif-0.7')\naxes[1].set_xlabel('Ratio r')\naxes[1].set_ylabel('Performance')\naxes[1].legend()\n\n# Data for the third subplot\nratio_r_0_9 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nperformance_pna_0_9 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\nperformance_gin_0_9 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n# Plotting the third subplot\naxes[2].plot(ratio_r_0_9, performance_pna_0_9, 'b-', label='PNA')\naxes[2].plot(ratio_r_0_9, performance_gin_0_9, 'g-', label='GIN')\naxes[2].fill_between(ratio_r_0_9, 0.4, 0.6, color='lightblue', alpha=0.5)\naxes[2].fill_between(ratio_r_0_9, 0.6, 0.8, color='lightgreen', alpha=0.5)\naxes[2].set_title('SPMotif-0.9')\naxes[2].set_xlabel('Ratio r')\naxes[2].set_ylabel('Performance')\naxes[2].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgreen')\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny_pna = [-20, -20, -20, -20, -20, -20, -20, -20, -20, -20]\ny_gin = [-20, -20, -20, -20, -20, -20, -20, -20, -20, -20]\n\n# Plot the data\nax.plot(x, y_pna, 'p-', label='PNA + ours')\nax.plot(x, y_gin, 'o-', label='GIN + ours')\n\n# Set the title and labels\nax.set_title('Dynamic Performance Trends')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Set the tick marks\nax.set_yticks(range(-80, 10, 10))\nax.set_xticks(range(0, 11, 1))\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1]\ny2 = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='PNA + ours')\nax.plot(x, y2, 'r-', label='GIN + ours')\n\n# Set the y-axis limits\nax.set_ylim(0.1, 1.5)\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.2, 0.4, 0.6, 0.8, 1.0]\ny_blue = [8.5, 7.5, 6.5, 5.5, 4.5]\ny_red = [8.0, 7.0, 6.0, 5.0, 4.0]\n\n# Plot the data points with markers\nax.plot(x, y_blue, 'bo-', label='PNA + ours')\nax.plot(x, y_red, 'ro-', label='GIN + ours')\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\ny1 = [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80]\ny2 = [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Model 1 Mean Accuracy')\nax.plot(x, y2, color='red', label='Model 2 Mean Accuracy')\n\n# Set the title and labels\nax.set_title('Comparison of Model Accuracies')\nax.set_xlabel('Ensemble Size')\nax.set_ylabel('Accuracy')\n\n# Set the grid\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks(range(5, 30, 2))\nax.set_yticks(range(60, 90, 5))\n\n# Set the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [90, 90, 90, 90, 90, 90, 90, 90, 90, 90]\ny2 = [85, 85, 85, 85, 85, 85, 85, 85, 85, 85]\ny3 = [80, 80, 80, 80, 80, 80, 80, 80, 80, 80]\ny4 = [75, 75, 75, 75, 75, 75, 75, 75, 75, 75]\n\n# Data for the second graph\ny5 = [70, 70, 70, 70, 70, 70, 70, 70, 70, 70]\ny6 = [65, 65, 65, 65, 65, 65, 65, 65, 65, 65]\ny7 = [60, 60, 60, 60, 60, 60, 60, 60, 60, 60]\ny8 = [55, 55, 55, 55, 55, 55, 55, 55, 55, 55]\n\n# Data for the third graph\ny9 = [85, 85, 85, 85, 85, 85, 85, 85, 85, 85]\ny10 = [80, 80, 80, 80, 80, 80, 80, 80, 80, 80]\ny11 = [75, 75, 75, 75, 75, 75, 75, 75, 75, 75]\ny12 = [70, 70, 70, 70, 70, 70, 70, 70, 70, 70]\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Plot the first graph\naxes[0].plot(x, y1, 'r-', label='Config A - Model X')\naxes[0].plot(x, y2, 'g-', label='Config B - Model X')\naxes[0].plot(x, y3, 'b-', label='Config C - Model X')\naxes[0].set_title('Performance of Model X')\naxes[0].set_xlabel('Iteration')\naxes[0].set_ylabel('Score')\naxes[0].legend()\n\n# Plot the second graph\naxes[1].plot(x, y5, 'r-', label='Config A - Model X')\naxes[1].plot(x, y6, 'g-', label='Config B - Model X')\naxes[1].plot(x, y7, 'b-', label='Config C - Model X')\naxes[1].set_title('Performance of Model Y')\naxes[1].set_xlabel('Iteration')\naxes[1].set_ylabel('Score')\naxes[1].legend()\n\n# Plot the third graph\naxes[2].plot(x, y9, 'r-', label='Config A - Model X')\naxes[2].plot(x, y10, 'g-', label='Config B - Model X')\naxes[2].plot(x, y11, 'b-', label='Config C - Model X')\naxes[2].set_title('Performance of Model Z')\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\naxes[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nperformance_of_lamma = [\n    [93, 94, 95, 96, 97, 98, 99, 100],\n    [92, 93, 94, 95, 96, 97, 98, 99],\n    [91, 92, 93, 94, 95, 96, 97, 98],\n    [90, 91, 92, 93, 94, 95, 96, 97]\n]\n\nperformance_of_falcon = [\n    [72, 73, 74, 75, 76, 77, 78, 79],\n    [71, 72, 73, 74, 75, 76, 77, 78],\n    [70, 71, 72, 73, 74, 75, 76, 77],\n    [69, 70, 71, 72, 73, 74, 75, 76]\n]\n\nperformance_of_qwen = [\n    [85, 86, 87, 88, 89, 90, 91, 92],\n    [84, 85, 86, 87, 88, 89, 90, 91],\n    [83, 84, 85, 86, 87, 88, 89, 90],\n    [82, 83, 84, 85, 86, 87, 88, 89]\n]\n\n# Create a figure with three subplots\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Plot Performance of Lamma\nfor i, data in enumerate(performance_of_lamma):\n    axs[0].plot(data, label=f'Config {chr(65 + i)} - Llama', marker='*')\naxs[0].set_title('Performance of Lamma')\naxs[0].set_xlabel('Iteration')\naxs[0].set_ylabel('Score')\naxs[0].legend()\n\n# Plot Performance of Falcon\nfor i, data in enumerate(performance_of_falcon):\n    axs[1].plot(data, label=f'Config {chr(65 + i)} - Falcon', marker='*')\naxs[1].set_title('Performance of Falcon')\naxs[1].set_xlabel('Iteration')\naxs[1].set_ylabel('Score')\naxs[1].legend()\n\n# Plot Performance of Qwen\nfor i, data in enumerate(performance_of_qwen):\n    axs[2].plot(data, label=f'Config {chr(65 + i)} - Qwen', marker='*')\naxs[2].set_title('Performance of Qwen')\naxs[2].set_xlabel('Iteration')\naxs[2].set_ylabel('Score')\naxs[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for each brand\nbrands = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E', 'Brand F']\nquarters = ['Q1', 'Q2', 'Q3', 'Q4', 'Q4_2']\nsales_growth_a = [1.5, 1.6, 1.7, 1.8, 1.9]\nsales_growth_b = [1.4, 1.5, 1.6, 1.7, 1.8]\nsales_growth_c = [1.5, 1.6, 1.7, 1.8, 1.9]\nsales_growth_d = [1.5, 1.6, 1.7, 1.8, 1.9]\nsales_growth_e = [1.5, 1.6, 1.7, 1.8, 1.9]\nsales_growth_f = [1.5, 1.6, 1.7, 1.8, 1.9]\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 2, figsize=(10.0, 10.0), sharex=True, sharey=True)\n\n# Plot data for each brand\nfor i, brand in enumerate(brands):\n    ax = axes[i // 2, i % 2]\n    if brand == 'Brand A':\n        ax.plot(quarters, sales_growth_a, 'r', marker='o')\n        ax.set_title('Brand A')\n    elif brand == 'Brand B':\n        ax.plot(quarters, sales_growth_b, 'b', marker='^')\n        ax.set_title('Brand B')\n    elif brand == 'Brand C':\n        ax.plot(quarters, sales_growth_c, 'm', marker='s')\n        ax.set_title('Brand C')\n    elif brand == 'Brand D':\n        ax.plot(quarters, sales_growth_d, 'c', marker='v')\n        ax.set_title('Brand D')\n    elif brand == 'Brand E':\n        ax.plot(quarters, sales_growth_e, 'p', marker='*')\n        ax.set_title('Brand E')\n    elif brand == 'Brand F':\n        ax.plot(quarters, sales_growth_f, 'y', marker='>')\n        ax.set_title('Brand F')\n\n# Set labels for the x-axis\nfor ax in axes.flat:\n    ax.set_xlabel('Quarter')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(18, 4))\n\n# Data for plotting\ntime_values = [100, 300, 500, 700]\nmetric_values_1 = [0.5, 0.6, 0.7, 0.8]\nmetric_values_2 = [0.4, 0.5, 0.6, 0.7]\n\n# Plotting\nfor ax in axes:\n    ax.plot(time_values, metric_values_1, 'b-', label='ECL Run 1')\n    ax.plot(time_values, metric_values_2, 'r-', label='ECL Run 2')\n    ax.set_xlabel('Time (s)')\n    ax.set_ylabel('Metric Value')\n    ax.set_title('Traffic Performance')\n    ax.set_yticks(np.arange(0, 1.5, 0.5))\n    ax.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain']\nrelaxation_levels = [\n    [14, 12, 10, 8, 6],\n    [14, 12, 10, 8, 6],\n    [12, 10, 8, 6, 4],\n    [12, 10, 8, 6, 4]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i, condition in enumerate(weather_conditions):\n    ax.plot(driving_styles, relaxation_levels[i], label=condition, marker='o')\n\n# Set labels and title\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\nax.set_title('Relaxation Levels by Driving Style and Weather Condition')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['Category A Growth', 'Category B Growth', 'Category C Growth', 'Category D Growth', 'Category E Growth', 'Category F Growth']\nphases = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5']\ngrowth_phases = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125]\ngrowth_values = [\n    [20, 25, 30, 35, 40],\n    [20, 25, 30, 35, 40],\n    [20, 25, 30, 35, 40],\n    [20, 25, 30, 35, 40],\n    [20, 25, 30, 35, 40],\n    [20, 25, 30, 35, 40]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(9.0, 6.0), sharex=True, sharey=True)\n\n# Plot each category\nfor i, category in enumerate(categories):\n    ax = axes[i // 2, i % 2]\n    ax.plot(phases, growth_values[i], label='Run 1', color='blue')\n    ax.plot(phases, [x + 5 for x in growth_values[i]], label='Run 2', color='red')\n    ax.set_title(category)\n    ax.set_xlabel('Growth Phase')\n    ax.set_ylabel('Cumulative Value')\n    ax.legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [4, 6, 10, 30]\ny_standard = [1.08, 1.04, 1.06, 1.06]\ny_constrained = [1.08, 1.04, 1.06, 1.06]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y_standard, 'bo-', label='Standard')\nax.plot(x, y_constrained, 'ro-', label='Constrained')\n\n# Set the title and labels\nax.set_title('Plot of Data Points')\nax.set_xlabel('N')\nax.set_ylabel('Value')\n\n# Set the tick marks\nax.set_yticks([1.08, 1.04, 1.06, 1.02])\nax.set_xticks([4, 6, 10, 30])\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nregions = ['South', 'West', 'North', 'East']\npercentages = [25, 10, 40, 15]\n\n# Create a bar chart\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\nax1.bar(regions, percentages, color='blue')\nax1.set_ylabel('Percentage')\n\n# Data for the pie chart\nlabels = ['Central', 'West', 'North', 'East', 'South']\nsizes = [5, 10, 35, 20, 25]\ncolors = ['yellow', 'orange', 'purple', 'green', 'red']\n\n# Create a pie chart\nax2 = fig.add_subplot(122)\nax2.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Define the data for the bar chart\ndata = [0.05, 0.25, 0.5, 0.75]\n\n# Define the labels for the bars\nlabels = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair']\n\n# Create a bar chart\nax.bar(labels, data, color='blue')\n\n# Set the title of the chart\nax.set_title('Chart Title')\n\n# Set the x-axis label\nax.set_xlabel('Sensitive Attribute')\n\n# Set the y-axis label\nax.set_ylabel('Sensitive Attribute')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nvalues = [44.15, 44.05, 41.55, 40.9, 40.65, 39.45, 36.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='green')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Robust Error (%)')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Cartesian', 'Retinotopic']\nvalues = [0.551, 0.538, 0.195, 0.043]\ncolors = ['yellow', 'orange', 'blue', 'red']\n\n# Create a bar chart\nfig, ax1 = plt.subplots(figsize=(10.0, 4.0))\nbars = ax1.bar(categories, values, color=colors)\nax1.set_ylabel('Values')\nax1.set_title('A VGG16')\n\n# Data for the line chart\nangles = [0, 90, 180]\nlabels = ['VGG16 Cartesian', 'Resnet101 Cartesian', 'VGG16 Retinotopic', 'Resnet101 Polar']\ndata = [\n    [0.744, 0.762, 0.744, 0.762],\n    [0.744, 0.762, 0.744, 0.762],\n    [0.744, 0.762, 0.744, 0.762],\n    [0.744, 0.762, 0.744, 0.762]\n]\n\n# Create a line chart\nax2 = ax1.twinx()\nfor i, label in enumerate(labels):\n    ax2.plot(angles, data[i], marker='x', label=label)\n\nax2.set_xlabel('Rotation angle (\u00b0)')\nax2.set_yticks([0.6, 0.7, 0.8, 0.9])\nax2.legend(loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Heatmap')\n\n# Create a heatmap with a specific color map\nheatmap_data = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]\ncax = ax.matshow(heatmap_data, cmap='coolwarm')\n\n# Add a color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set the x-axis labels\nax.set_xticks([0, 1, 2])\nax.set_yticks([0, 1, 2])\nax.set_xticklabels(['X1', 'X2', 'X3'])\nax.set_yticklabels(['Y1', 'Y2', 'Y3'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(-10, 10)\n\n# Set the x-axis ticks\nax.set_xticks([0, 10, 20, 30, 40, 50])\n\n# Set the y-axis ticks\nax.set_yticks([-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10])\n\n# Set the x-axis label\nax.set_xlabel('GPT2 Tokenizer rank')\n\n# Set the y-axis label\nax.set_ylabel('Loss')\n\n# Plot the line graph\nax.plot([0, 10, 20, 30, 40, 50], [-8, -8, -9, -9, -9, -8], 'bo-')\n\n# Add a shaded region\nax.fill_between([0, 10, 20, 30, 40, 50], [-8, -8, -9, -9, -9, -8], [-10, -10, -10, -10, -10, -10], color='gray', alpha=0.5)\n\n# Create a second subplot\nax2 = fig.add_axes([0.1, 0.1, 0.8, 0.3], facecolor='w')\nax2.set_xlim(0, 50)\nax2.set_ylim(0, 10)\nax2.set_xticks([0, 10, 20, 30, 40, 50])\nax2.set_yticks([0, 2, 4, 6, 8, 10])\nax2.set_xlabel('# of documents')\nax2.set_ylabel('Length')\n\n# Plot the box plots\nboxes = [np.random.normal(7, 1, 100), np.random.normal(7, 1, 100), np.random.normal(7, 1, 100), np.random.normal(7, 1, 100), np.random.normal(7, 1, 100)]\npositions = [0, 10, 20, 30, 40]\nax2.boxplot(boxes, positions=positions, widths=5)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\n\n# Create a bar chart\nplt.figure(figsize=(10, 4))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set title and labels\nplt.title('Correlation Values')\nplt.xlabel('Categories')\nplt.ylabel('Correlation')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['c1355', 'c1908', 'c2670', 'c3540']\nvalues = [40, 50, 50, 40]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bar chart\nbars = ax1.bar(categories, values, color='lightblue')\n\n# Set the y-axis label\nax1.set_ylabel('# successful adv. circuits')\n\n# Create a second y-axis for OMLA KPA\nax2 = ax1.twinx()\nomla_kpa_values = [0.45, 0.5, 0.45, 0.4]\nax2.plot(categories, omla_kpa_values, 'o-', color='orange')\nax2.set_ylabel('OMLA KPA')\n\n# Set the title\nax1.set_title('Success Rate of Circuits')\n\n# Add a horizontal line at 0.50\nax2.axhline(y=0.50, color='red', linestyle='--')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humans', 'Finance']\npublications = [250, 180, 300, 120, 160, 190, 220]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart\nbars = ax1.bar(domains, publications, color='blue')\n\n# Set the title and labels\nax1.set_title('Number of Publications by Domain')\nax1.set_xlabel('Domain')\nax1.set_ylabel('Publications')\n\n# Create a second y-axis for the line chart\nax2 = ax1.twinx()\n\n# Data for the line chart\nstudy_levels = [0, 1, 2, 3, 4, 5]\nknowledge_increase = [0, 20, 40, 60, 80, 100]\n\n# Plot the line chart\nline, = ax2.plot(study_levels, knowledge_increase, color='orange', marker='o')\n\n# Set the label for the second y-axis\nax2.set_ylabel('Cumulative Knowledge Increase (%)')\n\n# Add a legend\nfig.legend([bars[0], line], ['Publications', 'Knowledge Increase'], loc='upper left')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first chart\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\nhardware = [0, 0, 0, 0, 0, 20, 40, 60]\nsoftware = [0, 0, 0, 0, 0, 30, 50, 70]\nai = [0, 0, 0, 0, 0, 40, 60, 80]\n\n# Create a figure and axis for the first chart\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the data on the first chart\nax1.plot(years, hardware, 'b-', label='Hardware')\nax1.plot(years, software, 'o-', label='Software')\nax1.plot(years, ai, 'g-', label='AI')\n\n# Set the title and labels for the first chart\nax1.set_title('Technological Advancements')\nax1.set_xlabel('Year')\nax1.set_ylabel('Progress (%)')\n\n# Create a second y-axis for the first chart\nax2 = ax1.twinx()\nax2.set_ylabel('Innovation Gap (%)')\n\n# Add a legend to the first chart\nfig.legend(loc='upper left')\n\n# Define the data for the second chart\nsectors = ['Big Tech', 'Startups', 'Academia', 'Government']\ninnovation_gaps = [60, 40, 20, 0]\nhardware_gaps = [40, 20, 0, 0]\nsoftware_gaps = [20, 0, 0, 0]\nai_gaps = [0, 0, 0, 0]\n\n# Create a figure and axis for the second chart\nfig, ax3 = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the data on the second chart\nax3.bar(sectors, innovation_gaps, color='r', label='Innovation Gap')\nax3.bar(sectors, hardware_gaps, bottom=innovation_gaps, color='b', label='Hardware Gap')\nax3.bar(sectors, software_gaps, bottom=[i + h for i, h in zip(innovation_gaps, hardware_gaps)], color='o', label='Software Gap')\nax3.bar(sectors, ai_gaps, bottom=[i + h + s for i, h, s in zip(innovation_gaps, hardware_gaps, software_gaps)], color='g', label='AI Gap')\n\n# Set the title and labels for the second chart\nax3.set_title('Innovation Gaps Across Different Sectors in Technology')\nax3.set_xlabel('Sector')\nax3.set_ylabel('Gap (%)')\n\n# Add a legend to the second chart\nfig.legend(loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.5, 2.5, 2.5]\n\n# Create the first chart\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\nbars = ax1.bar(countries, crime_rates, color='orange')\nax1.set_ylabel('Crime Rate per 100,000 Inhabitants')\nax1.set_title('Average Legal Crime Rates by Country')\n\n# Data for the second chart\ncrimes = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\nrates = [140, 130, 120, 110, 100]\n\n# Create the second chart\nax2 = ax1.twinx()\nax2.plot(crimes, rates, 'b-')\nax2.set_ylabel('Crime Rate per 100,000 Inhabitants')\nax2.set_ylim(0, 200)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Public School', 'Private School']\nvalues = [80, 60]\n\n# Create a bar chart\nplt.figure(figsize=(10, 5))\nplt.bar(categories, values, color=['blue', 'orange'])\nplt.title('Student Performance in Schools')\nplt.xlabel('School Type')\nplt.ylabel('Score')\n\n# Data for the pie chart\nlabels = ['Books', 'Staff', 'Extracurricular', 'Facilities']\nsizes = [20, 10, 15, 10]\ncolors = ['blue', 'green', 'orange', 'purple']\n\n# Create a pie chart\nplt.subplot(1, 2, 2)\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax1 = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first plot\nregions = ['Region 1', 'Region 2']\ntemperatures = [20, 22]\ncolors = ['blue', 'lightblue']\n\n# Plot the data\nfor region, temp, color in zip(regions, temperatures, colors):\n    ax1.bar(region, temp, color=color)\n    ax1.text(region, temp + 0.5, f'{temp}\u00b0C', ha='center', va='bottom')\n\n# Set the title and labels\nax1.set_title('Average Annual Temperature')\nax1.set_xlabel('Region')\nax1.set_ylabel('Temperature (\u00b0C)')\n\n# Create a second subplot for the second plot\nax2 = fig.add_subplot(122)\n\n# Define the data for the second plot\nelevations = np.arange(0, 2001, 500)\ndensities = [0.001, 0.002, 0.003, 0.004, 0.005]\n\n# Plot the data\nax2.plot(elevations, densities, marker='o')\nax2.fill_between(elevations, densities, where=[0, 500, 1000, 1500, 2000], color='blue', alpha=0.3)\nax2.fill_between(elevations, densities, where=[500, 1000, 1500, 2000], color='green', alpha=0.3)\nax2.fill_between(elevations, densities, where=[1000, 1500, 2000], color='red', alpha=0.3)\nax2.fill_between(elevations, densities, where=[1500, 2000], color='orange', alpha=0.3)\nax2.fill_between(elevations, densities, where=[2000], color='purple', alpha=0.3)\n\n# Set the title and labels\nax2.set_title('Geographical Elevation Distribution')\nax2.set_xlabel('Elevation (m)')\nax2.set_ylabel('Density')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nyears = ['2019', '2020', '2021', '2022']\ninvestment_growth = [400, 300, 200, 100]\ninvestment_colors = ['green', 'blue', 'yellow']\n\n# Data for the second chart\nproducts = ['Savings', 'CDs', 'Stocks', 'Bonds', 'ETFs', 'Mutual Funds']\nnumber_of_accounts = [200, 175, 150, 125, 100, 75]\nproduct_colors = ['blue', 'blue', 'blue', 'blue', 'blue', 'blue']\n\n# Data for the third chart\nloan_amounts = [10000, 20000, 30000, 40000]\nloan_distribution = [80, 70, 60, 50]\nloan_colors = ['lightblue', 'orange', 'lightcoral', 'lightgreen']\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(10, 5))\n\n# Plot the first chart\naxes[0].bar(years, investment_growth, color=investment_colors)\naxes[0].set_title('Investment Growth Over Time')\naxes[0].set_xlabel('Year')\naxes[0].set_ylabel('Total Investment (%)')\n\n# Plot the second chart\naxes[1].bar(products, number_of_accounts, color=product_colors)\naxes[1].set_title('Popularity of Financial Products')\naxes[1].set_xlabel('Product Type')\naxes[1].set_ylabel('Number of Accounts')\n\n# Plot the third chart\naxes[2].bar(loan_amounts, loan_distribution, color=loan_colors)\naxes[2].set_title('Loan Amount Distribution by Region')\naxes[2].set_xlabel('Loan Amount ($)')\naxes[2].set_ylabel('Frequency')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Al Task Success Rates')\n\n# Define the data for the bars\ncategories = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\nvalues = [85, 85, 90, 95]\n\n# Create bar chart\nbars = ax.bar(categories, values, color='lightblue', edgecolor='black')\n\n# Add text labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate (%)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Create a second subplot for Algorithm Efficiency Scores\nax2 = fig.add_axes([0.1, 0.4, 0.8, 0.3])\nax2.set_title('Algorithm Efficiency Scores')\nax2.set_ylabel('Efficiency (%)')\nax2.set_xlabel('Algorithms')\n\n# Define the data for the efficiency scores\nefficiency_values = [90, 85, 95, 90]\n\n# Create bar chart for efficiency scores\nefficiency_bars = ax2.bar(categories, efficiency_values, color='lightblue', edgecolor='black')\n\n# Add text labels on top of the bars\nfor bar in efficiency_bars:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Create a third subplot for Algorithm Model Adaptability\nax3 = fig.add_axes([0.1, 0.1, 0.8, 0.3])\nax3.set_title('Al Model Adaptability')\nax3.set_ylabel('Adaptability Score (%)')\nax3.set_xlabel('Models')\n\n# Define the data for the adaptability scores\nadaptability_scores = [95, 90, 85, 80, 75]\n\n# Create line chart for adaptability scores\nax3.plot(['Model A', 'Model B', 'Model C', 'Model D', 'Model E'], adaptability_scores, marker='o', linestyle='-', color='green')\n\n# Set the legend for conditions\nax3.legend(['Dry Conditions', 'Wet Conditions'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nx = [100, 200, 300, 400, 500, 600, 700]\ny1 = [180, 160, 140, 120, 100, 80, 60]\ny2 = [190, 170, 150, 130, 110, 90, 70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the bar chart\nax.bar(x, y1, color='orange', label='Morning Traffic')\nax.bar(x, y2, color='green', label='Evening Traffic')\n\n# Set the title and labels\nax.set_title('Traffic Volume by Time of Day')\nax.set_xlabel('Number of Vehicles')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first pie chart\nlabels = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nsizes = [10, 30, 25, 15]\ncolors = ['red', 'blue', 'green', 'orange']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig, ax = plt.subplots(figsize=(10, 5), ncols=2)\n\n# First pie chart\nax[0].pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax[0].set_title('Distribution of Arts Education Programs')\n\n# Second pie chart\nangles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()\nangles += angles[:1]  # close the loop\n\n# Data for the second pie chart\ndata = [0.8, 0.6, 0.4, 0.2]\ncolors = ['blue', 'green', 'purple', 'orange']\n\nax[1].plot(angles, data + data[:1], color='blue')\nax[1].fill(angles, data + data[:1], color='blue', alpha=0.2)\nax[1].set_title('Student Performance in Arts Education')\nax[1].set_xticks(angles[:-1])\nax[1].set_xticklabels(labels, rotation=45)\nax[1].set_yticks([0.2, 0.4, 0.6, 0.8])\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nsales_probabilities = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\nregion_1 = [25000, 20000, 15000, 10000, 5000, 0]\nregion_2 = [20000, 18000, 16000, 14000, 12000, 0]\nregion_3 = [15000, 14000, 13000, 12000, 11000, 0]\nregion_4 = [10000, 9000, 8000, 7000, 6000, 0]\nregion_5 = [5000, 4500, 4000, 3500, 3000, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.bar(sales_probabilities, region_1, color='blue', label='Region 1')\nax.bar(sales_probabilities, region_2, bottom=region_1, color='green', label='Region 2')\nax.bar(sales_probabilities, region_3, bottom=[sum(x) for x in zip(region_1, region_2)], color='red', label='Region 3')\nax.bar(sales_probabilities, region_4, bottom=[sum(x) for x in zip(region_1, region_2, region_3)], color='purple', label='Region 4')\nax.bar(sales_probabilities, region_5, bottom=[sum(x) for x in zip(region_1, region_2, region_3, region_4)], color='orange', label='Region 5')\n\n# Set labels and title\nax.set_xlabel('Sale Probability')\nax.set_ylabel('Number of Sales')\nax.set_title('Sales by Region and Sale Probability')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data for the histogram\ndata = [160, 140, 120, 100, 80, 60, 40, 20, 0]\n\n# Create a histogram with specified bins\nax.hist(data, bins=[-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1], color='green', alpha=0.7)\nax.hist(data, bins=[-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1], color='red', alpha=0.7)\n\n# Set the title of the histogram\nax.set_title('Histogram of Stock Returns')\n\n# Set the x-axis label\nax.set_xlabel('Returns')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend(['Gains', 'Losses'])\n\n# Create a second subplot\nax2 = fig.add_subplot(1, 2, 2)\n\n# Define the data for the scatter plot\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny1 = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\ny2 = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\ny3 = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\ny4 = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\ny5 = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\ny6 = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\ny7 = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\ny8 = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\ny9 = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\n\n# Plot the scatter plots\nax2.scatter(x, y1, color='yellow')\nax2.scatter(x, y2, color='yellow')\nax2.scatter(x, y3, color='yellow')\nax2.scatter(x, y4, color='yellow')\nax2.scatter(x, y5, color='yellow')\nax2.scatter(x, y6, color='yellow')\nax2.scatter(x, y7, color='yellow')\nax2.scatter(x, y8, color='yellow')\nax2.scatter(x, y9, color='yellow')\n\n# Set the title of the scatter plot\nax2.set_title('Investment Clusters')\n\n# Set the x-axis label\nax2.set_xlabel('Time')\n\n# Set the y-axis label\nax2.set_ylabel('Value')\n\n# Add a legend\nax2.legend(['Tech Stocks', 'Energy Stocks'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 10.0))\n\n# First subplot: Energy Consumption vs Relative Year\nx1 = np.linspace(0, 5, 10)\ny1 = np.sin(x1) * 0.6 + 0.3\nax1.plot(x1, y1, 'bo-')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.set_title('Energy Consumption vs Relative Year')\n\n# Second subplot: Renewable Energy Ratio vs Relative Year and Relative Month\nx2 = np.linspace(-4, 4, 10)\ny2 = np.linspace(-2, 2, 10)\nX, Y = np.meshgrid(x2, y2)\nZ = np.sin(X) * np.cos(Y) * 0.75 + 0.5\nax2.contourf(X, Y, Z, cmap='Blues')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_title('Renewable Energy Ratio vs Relative Year and Relative Month')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [35.0, 15.0, 30.0, 20.0]\ncolors = ['#FF9999','#FFFF99','#66B3FF','#99FF99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig, ax = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Pie chart\nax[0].pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax[0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Scatter plot\nx = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])\ny = np.array([150, 150, 150, 150, 150, 150, 150, 150, 150])\ncolors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w']\nax[1].scatter(x, y, color=colors)\n\n# Set title and labels\nax[0].set_title('Historical Document Types in Library')\nax[1].set_title('Document Count Over Historical Periods')\nax[1].set_xlabel('Year')\nax[1].set_ylabel('Number of Documents')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left plot\nluxury_brands = ['Gucci', 'Chanel', 'Dior', 'Prada']\npopularity_index = [9.25, 9.0, 9.0, 7.5]\naverage_price = [1000, 1200, 1600, 1800]\n\n# Data for the right plot\nbrands = ['Louis Vuitton', 'Prada', 'Dior', 'Chanel']\ncustomer_satisfaction = [9.0, 8.0, 8.0, 8.0]\ncustomer_distribution = [10, 10, 10, 10]\n\n# Create the figure and axis objects\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\n# Plot the left bar chart\nax1.bar(luxury_brands, popularity_index, color='blue')\nax1.set_xlabel('Luxury Brand Popularity vs Price')\nax1.set_ylabel('Popularity Index')\nax1.set_title('Luxury Brand Popularity vs Price')\n\n# Plot the right bar chart\nax2.bar(brands, customer_satisfaction, color='blue')\nax2.set_xlabel('Customer Satisfaction Distribution Across Brands')\nax2.set_ylabel('Customer Satisfaction')\nax2.set_title('Customer Satisfaction Distribution Across Brands')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\naccuracy_data = [75.32, 77.11, 77.03, 76.86, 74.52]\nnfr_data = [[0.0, 1.79, 1.71, 0.0, -0.17, -2.51], [0.0, 0.08, 0.07, 0.0, -0.17, -2.34], [0.0, 0.08, 0.07, 0.0, -0.17, -2.34], [0.0, 0.02, 0.16, 0.0, -0.17, -2.34], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]\n\n# Data for the second chart\nrobust_accuracy_data = [60.5, 59.3, 59.1, 58.35, 55.5]\nnfr_robust_data = [[-0.02, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.02, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.02, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.02, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 3, figsize=(10.0, 7.0))\n\n# Plot the first chart\nfor i, ax in enumerate(axes[0]):\n    ax.bar(range(len(accuracy_data)), accuracy_data, color='green')\n    ax.set_title(f'Accuracy ({i+1})')\n    ax.set_ylabel('Accuracy (%)')\n    ax.set_yticks(range(0, 100, 10))\n    ax.set_xticks([])\n    ax.set_ylim(0, 100)\n    ax.grid(True)\n\n# Plot the second chart\nfor i, ax in enumerate(axes[1]):\n    ax.bar(range(len(robust_accuracy_data)), robust_accuracy_data, color='red')\n    ax.set_title(f'Robust Accuracy ({i+1})')\n    ax.set_ylabel('Robust Accuracy (%)')\n    ax.set_yticks(range(0, 100, 10))\n    ax.set_xticks([])\n    ax.set_ylim(0, 100)\n    ax.grid(True)\n\n# Plot the third chart\nfor i, ax in enumerate(axes[0]):\n    ax.bar(range(len(nfr_data[i])), nfr_data[i], color=['red', 'green', 'blue', 'yellow', 'purple'])\n    ax.set_title(f'NFR ({i+1})')\n    ax.set_ylabel('NFR (%)')\n    ax.set_yticks(range(-10, 10, 2))\n    ax.set_xticks([])\n    ax.set_ylim(-10, 10)\n    ax.grid(True)\n\n# Plot the fourth chart\nfor i, ax in enumerate(axes[1]):\n    ax.bar(range(len(nfr_robust_data[i])), nfr_robust_data[i], color=['red', 'green', 'blue', 'yellow', 'purple'])\n    ax.set_title(f'Robust NFR ({i+1})')\n    ax.set_ylabel('Robust NFR (%)')\n    ax.set_yticks(range(-10, 10, 2))\n    ax.set_xticks([])\n    ax.set_ylim(-10, 10)\n    ax.grid(True)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvalues = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n# Create a bar chart\nplt.figure(figsize=(7, 9))\nbars = plt.bar(categories, values, color='blue')\n\n# Add text labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Generalized Variance')\nplt.xlabel('Categories')\nplt.ylabel('Generalized Variance')\n\n# Display the plot\nplt.show()\n\n# Data for the line chart\nx = range(0, 26)\ny_random = [0.35, 0.34, 0.33, 0.32, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1]\ny_sobol = [0.35, 0.34, 0.33, 0.32, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1]\ny_hcube = [0.35, 0.34, 0.33, 0.32, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1]\ny_no_context = [0.35, 0.34, 0.33, 0.32, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1]\ny_partial_context = [0.35, 0.34, 0.33, 0.32, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1]\ny_full_context = [0.35, 0.34, 0.33, 0.32, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1]\n\n# Create a line chart\nplt.figure(figsize=(7, 9))\nplt.plot(x, y_random, label='Random', color='blue')\nplt.plot(x, y_sobol, label='Sobol', color='green')\nplt.plot(x, y_hcube, label='H Cube', color='orange')\nplt.plot(x, y_no_context, label='No Context', color='purple')\nplt.plot(x, y_partial_context, label='Partial Context', color='pink')\nplt.plot(x, y_full_context, label='Full Context', color='red')\n\n# Set the title and labels\nplt.title('Average Regret')\nplt.xlabel('Trials')\nplt.ylabel('Average Regret')\n\n# Add a legend\nplt.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(10, 4))\n\n# Data for the first subplot\nx1 = np.arange(0, 401, 20)\ny1 = [300, 250, 200, 150, 100, 50]\ncolors = ['red', 'orange', 'green', 'blue', 'purple']\nlabels = ['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo']\n\n# Plot the data\nfor i, (x, y) in enumerate(zip(x1, y1)):\n    axes[0].plot([x, x], [0, y], color=colors[i % len(colors)], marker='o')\n    axes[0].text(x, y, f'bo{x}', ha='center', va='bottom')\n\n# Set labels and title for the first subplot\naxes[0].set_xlabel('Elo Rating')\naxes[0].set_ylabel('Correct Rating - Incorrect Rating')\naxes[0].set_title('Debater')\n\n# Data for the second subplot\nx2 = np.linspace(-100, 100, 10)\ny2 = np.linspace(0, 200, 10)\ndata_points = [(x, y) for x in x2 for y in y2 if x**2 + y**2 <= 100]\n\n# Plot the data\nfor x, y in data_points:\n    axes[1].scatter(x, y, color='red')\n\n# Set labels and title for the second subplot\naxes[1].set_xlabel('Aggregate Elo Rating')\naxes[1].set_ylabel('Aggregate Elo Rating')\naxes[1].set_title('Debater')\n\n# Data for the third subplot\nx3 = np.linspace(-200, 200, 10)\ny3 = np.linspace(0, 200, 10)\ndata_points = [(x, y) for x in x3 for y in y3 if x**2 + y**2 <= 100]\n\n# Plot the data\nfor x, y in data_points:\n    axes[2].scatter(x, y, color='red')\n\n# Set labels and title for the third subplot\naxes[2].set_xlabel('Aggregate Elo Rating')\naxes[2].set_ylabel('Aggregate Elo Rating')\naxes[2].set_title('Judge: GPT-4-Turbo')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nsizes = [30.5, 10.6, 4.6, 11.3, 13.2, 29.8]\nlabels = ['30.5%', '10.6%', '4.6%', '11.3%', '13.2%', '29.8%']\ncolors = ['cyan', 'purple', 'gray', 'yellow', 'lightblue', 'blue']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['1 egg', '60 g butter', '90 g sugar', '1/2 package of yeast', '100 ml milk', '225 g flour']\nsizes = [1, 60, 90, 12, 100, 225]\ncolors = ['green', 'red', 'orange', 'purple', 'blue', 'cyan']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title\nax.set_title('Matplotlib bakery: A donut')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nlabels = ['Transport', 'Utilities', 'Food', 'Others', 'Entertainment']\nsizes = [37.5, 16.7, 41.7, 10.0, 10.0]\ncolors = ['#ADD8E6', '#FFD700', '#90EE90', '#FFA07A', '#FF6347']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', startangle=140, textprops=dict(color=\"w\"))\n\n# Add a title\nax.set_title('Expenses - Company vs. Project')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlabels_lo_ra = ['Model', 'Optimizer', 'Unused', 'Gradient']\nsizes_lo_ra = [19.9, 33.0, 31.4, 15.7]\ncolors_lo_ra = ['blue', 'green', 'orange', 'yellow']\n\n# Data for QLoRA\nlabels_q_lo_ra = ['Model', 'Optimizer', 'Unused', 'Gradient']\nsizes_q_lo_ra = [6.3, 10.5, 28.4, 54.8]\ncolors_q_lo_ra = ['orange', 'red', 'green', 'blue']\n\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot LoRA\nwedges_lo_ra, texts_lo_ra, autotexts_lo_ra = ax1.pie(sizes_lo_ra, labels=labels_lo_ra, colors=colors_lo_ra, autopct='%1.1f%%', startangle=140)\nax1.set_title('LoRA')\n\n# Plot QLoRA\nwedges_q_lo_ra, texts_q_lo_ra, autotexts_q_lo_ra = ax2.pie(sizes_q_lo_ra, labels=labels_q_lo_ra, colors=colors_q_lo_ra, autopct='%1.1f%%', startangle=140)\nax2.set_title('QLoRA')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first circle\ndata1 = [25.1, 26.4, 12.6]\ncolors1 = ['yellow', 'green', 'orange']\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other']\n\n# Define the data for the second circle\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['yellow', 'green', 'orange', 'lightgreen']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(5.0, 8.0))\n\n# Plot the first circle\naxes[0].pie(data1, colors=colors1, labels=labels1, startangle=90, counterclock=False)\naxes[0].set_title('Full Finetuning')\n\n# Plot the second circle\naxes[1].pie(data2, colors=colors2, labels=labels2, startangle=90, counterclock=False)\naxes[1].set_title('QLoRA')\n\n# Set the color of the text\nfor ax in axes:\n    for text in ax.texts:\n        text.set_color('black')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Fruits', 'Proteins', 'Grains', 'Vegetables', 'Dairy']\nvalues = [25.0, 35.0, 10.0, 20.0, 10.0]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n\n# Create a pie chart\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nplt.title('Nutritional Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 21.4, 37.5]\ncolors = ['#0000FF', '#008000', '#FFFF00']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add title\nplt.title('Market Share by Sector - External vs. Internal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Logs 10%', 'Frogs 15%', 'Hogs 30%', 'Dogs 45%']\nsizes = [10, 15, 30, 45]\ncolors = ['#ADD8E6', '#FFD700', '#FF6347', '#90EE90']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [29, 11, 20, 40]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['France', 'UK', 'Germany', 'Italy']\nsizes = [18, 42, 12, 28]\ncolors = ['#FFA500', '#008000', '#0000FF', '#FF0000']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['26.2%', '13.3%', '14.3%', '19.0%', '21.4%']\nsizes = [26.2, 13.3, 14.3, 19.0, 21.4]\ncolors = ['#FFA500', '#FFD700', '#FF6347', '#FF4500', '#8B0000']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title\nax.set_title('Slice of a pie chart')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nvalues = [35.4, 10.3, 17.2, 24.7, 12.4]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(values, labels=categories, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart Representation')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 35, 10, 10]\ncolors = ['lightblue', 'lightblue', 'lightblue', 'darkred']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['NAACL', 'EMNLP', 'COLING', 'EACL', 'EMACL']\nsizes = [25.4, 7.4, 12.2, 20.3, 34.7]\ncolors = ['lightblue', 'skyblue', 'purple', 'brown', 'orange']\nexplode = (0, 0, 0, 0, 0.1)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add title\nax.set_title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Coal', 'Other', 'Solar', 'Wind', 'Hydro']\nsizes = [25.0, 10.0, 20.0, 30.0, 15.0]\ncolors = ['#FFA500', '#8B4513', '#FFFF00', '#00FF00', '#0000FF']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['English', 'French', 'German', 'Japanese']\nout_group_bias = [(-4.00, -3.22, -2.44, -2.22, -1.88), (-4.00, -3.50, -3.00, -2.88, -2.44), (-4.75, -4.50, -4.00, -3.88, -3.38), (-7.80, -7.50, -7.00, -6.50, -6.00)]\nin_group_bias = [(-4.00, -3.50, -3.00, -2.88, -2.44), (-4.00, -3.50, -3.00, -2.88, -2.44), (-4.75, -4.50, -4.00, -3.88, -3.38), (-7.80, -7.50, -7.00, -6.50, -6.00)]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot data\nfor i, category in enumerate(categories):\n    ax.plot(out_group_bias[i], label=f'{category} (Out-group bias)', color='red')\n    ax.plot(in_group_bias[i], label=f'{category} (In-group bias)', color='blue')\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Bias')\nax.set_title('Bias over Time for Different Categories')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\ncategories = ['English', 'French', 'German']\nvalues = [-4.00, -3.22, -2.44]\n\n# Create a bar chart\nplt.figure(figsize=(5.0, 4.0))\nbars = plt.bar(categories, values, color='red')\n\n# Add labels and title\nplt.xlabel('Category')\nplt.ylabel('Value')\nplt.title('Bar Chart Example')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx1 = np.linspace(0, 0.6, 10)\ny1 = np.linspace(0.1, 0.5, 10)\n\n# Plot the lines\nax.plot(x1, y1, 'b-', label='Train Sample')\nax.plot(x1, y1 + 0.1, 'g-', label='Test Sample')\nax.plot(x1, y1 + 0.2, 'r-', label='SINDy Train')\nax.plot(x1, y1 + 0.3, 'k-', label='SINDy Test')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.6)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.6)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6])\n\n# Add labels\nax.set_xlabel('X1')\nax.set_ylabel('X2')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the limits for the x and y axes\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Set the ticks for the x and y axes\nax.set_xticks([-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1])\nax.set_yticks([-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1])\n\n# Draw arrows at specified positions\nfor i in range(-1, 2):\n    for j in range(-1, 2):\n        if (i + j) % 2 == 0:\n            ax.arrow(i, j, 0, -0.1, head_width=0.05, head_length=0.05, fc='b', ec='b')\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field components\nU = np.sin(X) * np.cos(Y)\nV = np.cos(X) * np.sin(Y)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the vector field\nax.quiver(X, Y, U, V, color='blue')\n\n# Set the title\nax.set_title('Magnetic Field \\u03B2 in Tesla units')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Set the limits for the x-axis\nax.set_xlim(-2, 2)\n\n# Set the limits for the y-axis\nax.set_ylim(-2, 2)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data\nlabels = ['VQAv2', 'MME', 'MM', 'LLaVA-W', 'POPE']\nvalues = [79.9, 64.9, 66.9, 75.8, 86.4]\ncolors = ['#FF0000', '#0000FF']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(values, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Add a title\nax.set_title('Pie Chart Example')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nspeed_ratio = 4\nangles = np.linspace(0, 2 * np.pi, 10, endpoint=False)\nradii = [20, 40, 60, 80]\ncolors = ['red', 'green', 'blue']\nlabels = ['fr', 'hi', 'ru', 'th', 'tr', 'ur', 'vi', 'zh', 'sw', 'ar']\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(5.0, 5.0))\n\n# Plot the radii\nfor r in radii:\n    ax.plot([0, 2 * np.pi], [r, r], color='black')\n\n# Plot the data points\nfor angle, radius, color, label in zip(angles, radii, colors, labels):\n    ax.plot(angle, radius, 'o', color=color, markersize=10)\n    ax.text(angle, radius + 2, label, ha='center', va='center', fontsize=10)\n\n# Set the title\nax.set_title(f'XNLI (speed-up ratio: {speed_ratio})', fontsize=14, y=1.05)\n\n# Remove the default grid lines\nax.grid(False)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Define the data for each section\nsections = ['Interference', 'Understanding', 'Questioning', 'Reasoning', 'Paraphrasing', 'Reflection']\ndata = [10, 8, 6, 4, 2, 0]\n\n# Define the colors for each section\ncolors = ['green', 'cyan', 'lightgreen', 'lightblue', 'lightgrey', 'white']\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(data, labels=sections, colors=colors, startangle=90, textprops=dict(color=\"black\"))\n\n# Set the aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\ndata = [\n    [0.496, 0.37, 0.28, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5],\n    [0.43, 0.33, 0.24, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5],\n    [0.43, 0.33, 0.24, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5],\n    [0.43, 0.33, 0.24, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5],\n    [0.43, 0.33, 0.24, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5],\n    [0.43, 0.33, 0.24, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5],\n    [0.43, 0.33, 0.24, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5],\n    [0.43, 0.33, 0.24, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5],\n    [0.43, 0.33, 0.24, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5],\n    [0.43, 0.33, 0.24, 0.24, 0.24, 0.22, 0.22, 0.29, 0.46, 0.5]\n]\n\n# Plot the data\nax.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('Colorbar Label')\n\n# Set the title and labels\nax.set_title('Sample Plot')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['video game', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event']\nvalues = [0.8, 0.8, 0.6, 0.6, 0.4, 0.4, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.45, color='white')\nax.add_artist(circle)\n\n# Draw a grid\nax.set_xticks(np.arange(0, 1.1, 0.2))\nax.set_yticks(np.arange(0, 1.1, 0.2))\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Plot the data\nax.plot([0.5], [0.5], 'bo', markersize=10)\nax.text(0.5, 0.5, 'Llama-2-70B', ha='center', va='center', fontsize=10)\n\n# Set the title\nax.set_title('Radar Chart', fontsize=12, fontweight='bold')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'STEM', 'Humanities']\nvalues = [10, 15, 20, 25, 30, 35, 40]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(np.deg2rad(categories), values, color=colors)\n\n# Set the title\nax.set_title('Roleplay', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Nutrition', 'Purity', 'Allergen', 'Pollution', 'Recall', 'Storage', 'Material', 'Compliance']\nsizes = [30, 25, 15, 10, 10, 10, 10, 5]\ncolors = ['lightgrey', 'lightgreen', 'lightblue', 'lightcoral', 'lightsalmon', 'lightyellow', 'lightpink', 'lightgrey']\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a title\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nlabels = ['Apple', 'Samsung', 'Huawei']\nsizes = [85.8, 86.4, 80.9]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar charts\ncategories = ['Blow Molding', 'Extrusion', 'Injection', 'Compression']\nvalues1 = [5, 4, 3, 2, 1]\nvalues2 = [5, 4, 3, 2, 1]\nvalues3 = [5, 4, 3, 2, 1]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 8.0), subplot_kw={'projection': 'polar'})\n\n# Plot the first radar chart\naxs[0].plot(np.linspace(0, 2*np.pi, len(categories) + 1)[:-1], values1, marker='o')\naxs[0].set_title('Injection Molding')\n\n# Plot the second radar chart\naxs[1].plot(np.linspace(0, 2*np.pi, len(categories) + 1)[:-1], values2, marker='o')\naxs[1].set_title('Blow Molding')\n\n# Plot the third radar chart\naxs[2].plot(np.linspace(0, 2*np.pi, len(categories) + 1)[:-1], values3, marker='o')\naxs[2].set_title('Extrusion')\n\n# Set the labels for the categories\nfor ax in axs:\n    ax.set_xticks(np.linspace(0, 2*np.pi, len(categories) + 1)[:-1])\n    ax.set_xticklabels(categories)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Food Quality', 'Shows', 'Staff', 'Family Rides', 'Cleanliness', 'Wait Times', 'Ticket Price', 'Souvenirs', 'Parking']\nvalues = [0.2, 0.4, 0.6, 0.8, 1.0]\ncolors = ['orange', 'purple']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw the circle\ncircle = plt.Circle((0.5, 0.5), 0.5, color='white')\nax.add_artist(circle)\n\n# Draw the arcs\nfor i, value in enumerate(values):\n    start_angle = (i * 360 / len(values)) - 90\n    end_angle = ((i + 1) * 360 / len(values)) - 90\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[i % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 1) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 2) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 3) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 4) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 5) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 6) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 7) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 8) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 9) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 10) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 11) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 12) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 13) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 14) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 15) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 16) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 17) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 18) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 19) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 20) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 21) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 22) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 23) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 24) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 25) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 26) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 27) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 28) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 29) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 30) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 31) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 32) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 33) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 34) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 35) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 36) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 37) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 38) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 39) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 40) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 41) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 42) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 43) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 44) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 45) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 46) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 47) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 48) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 49) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 50) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 51) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 52) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 53) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 54) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 55) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 56) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 57) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 58) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 59) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 60) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 61) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 62) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 63) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 64) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 65) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 66) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 67) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 68) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 69) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 70) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 71) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 72) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 73) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 74) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 75) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 76) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 77) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 78) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 79) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 80) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 81) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 82) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 83) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 84) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 85) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 86) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 87) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 88) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 89) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 90) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 91) % 2], linewidth=10)\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=colors[(i + 92) % 2], linewidth=10)\n"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Creativity', 'Versatility', 'Longevity', 'Sillage', 'Projection', 'Value', 'Packaging', 'Popularity']\nvalues = [9, 5, 7, 3, 1, 5, 3, 1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Set the category labels\nax.set_yticks(np.arange(len(categories)))\nax.set_yticklabels(categories)\n\n# Plot the data\nax.plot(values + values[:1], color='yellow')\nax.fill(values + values[:1], color='yellow')\n\n# Set the title\nax.set_title('Radar Chart', y=1.08)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['MM-Vet', 'TextVQA', 'GQA', 'VQAv2', 'LLaVA-W']\nvalues = [78.7, 85.8, 85.0, 86.4, 79.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Set the number of categories\nN = len(categories)\n\n# Compute the angle each category will occupy\ntheta = np.linspace(0.0, 2 * np.pi, N, endpoint=False).tolist()\ntheta += theta[:1]  # To close the loop\n\n# Plot the radar chart\nax.plot(theta, values + values[:1], 'b-')  # Blue line for the radar chart\nax.fill(theta, values + values[:1], alpha=0.25)  # Fill the radar chart with semi-transparency\n\n# Set the categories as tick labels\nax.set_xticks(theta[:-1])\nax.set_xticklabels(categories)\n\n# Set the title\nax.set_title('POPE')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 6.0))\n\n# Define the data for the pie charts\ndata1 = [1, 3, 5, 7, 9]\ndata2 = [1, 3, 5, 7, 9]\ndata3 = [1, 3, 5, 7, 9]\n\n# Define the labels for the pie charts\nlabels = ['Versatility', 'Longevity', 'Value', 'Sillage', 'Projection']\n\n# Define the colors for the pie charts\ncolors = ['yellow', 'blue', 'green']\n\n# Create the pie charts\nwedges1, texts1, autotexts1 = ax.pie(data1, colors=colors, startangle=90, textprops=dict(color=\"w\"))\nwedges2, texts2, autotexts2 = ax.pie(data2, colors=colors, startangle=90, textprops=dict(color=\"w\"))\nwedges3, texts3, autotexts3 = ax.pie(data3, colors=colors, startangle=90, textprops=dict(color=\"w\"))\n\n# Add labels to the pie charts\nax.text(0.25, 0.8, 'Creativity', fontsize=14)\nax.text(0.5, 0.8, 'Creativity', fontsize=14)\nax.text(0.75, 0.8, 'Creativity', fontsize=14)\n\n# Add legends\nax.legend(['Chanel', 'Dior', 'Gucci'], loc='upper right')\n\n# Set the title of the plot\nax.set_title('Perfume Brand Comparison')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the angles and radii for the plot\nangles = np.linspace(0, 2*np.pi, 10, endpoint=False).tolist() + [0]\nradii = [0.6, 0.4, 0.2, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2, 0.8, 0.6]\n\n# Plot the data\nax.plot(angles, radii, 'ro-')\n\n# Set the title and labels\nax.set_title('Loadings PC1')\nax.set_xlabel('Angle (degrees)')\nax.set_ylabel('Loadings')\n\n# Set the grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 6.0), subplot_kw={'aspect': 'equal'})\n\n# Define the data for each subplot\ndata = [\n    [1, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3]\n]\n\n# Define the labels for each subplot\nlabels = [\n    ['MLA', 'Query Error', 'Privacy'],\n    ['MLA', 'Query Error', 'Privacy'],\n    ['MLA', 'Query Error', 'Privacy']\n]\n\n# Define the colors for each subplot\ncolors = [\n    ['green', 'blue', 'red'],\n    ['purple', 'orange', 'yellow'],\n    ['cyan', 'magenta', 'lime']\n]\n\n# Plot each subplot\nfor ax, d, l, c in zip(axes, data, labels, colors):\n    ax.pie(d, startangle=90, colors=c)\n    ax.set_title('Fidelity(D-test)')\n    ax.set_yticklabels(l, rotation=45)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Heterocycle formation', 'C-C bond formation', 'Acylation and related processes', 'Hetroalkylation and arylation', 'Functional group addition, FGA']\nvalues = [35, 45, 55, 65, 75]\ncolors = ['blue', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(values, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=0.4), textprops={'color': 'white'})\n\n# Add category labels\nfor i, category in enumerate(categories):\n    ax.text(0.5, 0.5 - i * 0.1, category, ha='center', va='center', fontsize=12)\n\n# Set the aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nmodels = ['Model C', 'Model B', 'Model D', 'Model E', 'Model F']\npredicted_scores = [0.07, 0.07, 0.07, 0.07, 0.07]\nhelpful_scores = [0.03, 0.03, 0.03, 0.03, 0.03]\nresult_scores = [0.05, 0.05, 0.05, 0.05, 0.05]\nrating_scores = [0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the circle\ncircle = plt.Circle((0.5, 0.5), 0.45, color='lightgrey')\nax.add_artist(circle)\n\n# Draw the inner circle\ninner_circle = plt.Circle((0.5, 0.5), 0.25, color='lightgrey')\nax.add_artist(inner_circle)\n\n# Draw the lines\nfor model, pred, help, res, rat in zip(models, predicted_scores, helpful_scores, result_scores, rating_scores):\n    ax.plot([0.5, 0.5], [0.5, 0.5 + pred], color='green')\n    ax.plot([0.5, 0.5], [0.5, 0.5 + help], color='orange')\n    ax.plot([0.5, 0.5], [0.5, 0.5 + res], color='blue')\n    ax.plot([0.5, 0.5], [0.5, 0.5 + rat], color='red')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['rose', 'candlestick', 'multi-axes', 'bubble', 'radar', 'pie', 'funnel', 'area', 'treemap', 'box']\nvalues = [3, 4, 5, 1, 2, 3, 4, 5, 1, 2]\ncolors = ['red', 'blue', 'red', 'blue', 'red', 'blue', 'red', 'blue', 'red', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw={'projection': 'polar'})\n\n# Convert categories to radians\ntheta = np.linspace(0.0, 2 * np.pi, len(categories), endpoint=False).tolist()\n\n# Plot the radar chart\nax.bar(theta, values, color=colors)\n\n# Set the category labels\nax.set_xticks(theta)\nax.set_xticklabels(categories)\n\n# Set the title\nax.set_title('3D-bar')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Anomaly Detection', 'Long-horizon Forecasting', 'Short-horizon Forecasting']\nsizes = [30, 40, 30]\ncolors = ['#0000FF', '#FF0000', '#008000']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Imputation')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Class\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified dimensions\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data for the plot\nangles = np.linspace(0, 2 * np.pi, 5, endpoint=False).tolist() + [angles[0]]\nvalues = [72.9, 66.3, 67.2, 42.9, 66.3, 67.2, 42.9, 66.3, 67.2, 42.9]\ncolors = ['red', 'blue']\nlabels = ['VQA2', 'GQA', 'POPE', 'MM-Vet', 'TextVQA']\n\n# Plot the data\nax.plot(angles, values, color=colors[0], label='TinyLLaVA-3.1B')\nax.fill(angles, values, color=colors[0], alpha=0.2)\n\n# Set the title and labels\nax.set_title('Sample Plot', fontsize=14)\nax.set_xlabel('X-axis Label', fontsize=12)\nax.set_ylabel('Y-axis Label', fontsize=12)\n\n# Set the tick labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels, fontsize=10)\n\n# Set the grid\nax.grid(True)\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nvalues = [1, 1, 1, 1, 1, 1, 1, 1, 1]\nx_positions = range(len(categories))\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot bars\nbars = ax.bar(x_positions, values, color='blue')\n\n# Add category labels\nax.set_xticks(x_positions)\nax.set_xticklabels(categories, rotation=90)\n\n# Set title and labels\nax.set_title('Model-Basedness')\nax.set_xlabel('Categories')\nax.set_ylabel('Value')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 1000, 2000, 3000]\ny = [77, 79, 81, 83]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data points\nax.plot(x, y, marker='o', linestyle='-')\n\n# Set the title and labels\nax.set_title('ImageNet-1K Linear Probing')\nax.set_xlabel('Pre-training GPU Hours')\nax.set_ylabel('Accuracy [%]')\n\n# Set the tick marks\nax.set_yticks([77, 79, 81, 83])\nax.set_xticks([0, 1000, 2000, 3000])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ninference_time = [10, 20, 30, 40, 50, 60]\naverage_score = [0.85, 0.80, 0.75, 0.70, 0.65, 0.60]\nbubble_size = [0.90, 0.90, 0.90, 0.90, 0.90, 0.90]\n\n# Create a scatter plot\nplt.scatter(inference_time, average_score, s=bubble_size * 100, c='red')\n\n# Set the title and labels\nplt.title('Bubble Size: Number of Anomalies Detected')\nplt.xlabel('Inference Time (seconds)')\nplt.ylabel('Average Score')\n\n# Set the tick marks\nplt.xticks([10, 20, 30, 40, 50, 60])\nplt.yticks([0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [25, 30, 40, 45]\ny = [50, 50, 50, 50]\nlabels = ['MC-VIT-B', 'Bard + ShortVIT', 'Bard + ImageVIT', 'ShortVIT']\ncolors = ['red', 'pink', 'blue', 'blue']\n\n# Create a scatter plot\nplt.figure(figsize=(8.0, 6.0))\nscatter = plt.scatter(x, y, c=colors, s=100)\n\n# Add labels to each point\nfor i, label in enumerate(labels):\n    plt.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the title and labels\nplt.title('Number of parameters')\nplt.xlabel('EgoSchema VQA accuracy')\nplt.ylabel('Perception Test VQA accuracy')\n\n# Set the limits for the x-axis\nplt.xlim(20, 50)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_single_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_ensemble_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_cae_reconstruction = [0.08, 0.07, 0.06, 0.05, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y_single_lstm, 'b^', label='Single LST')\nax.plot(x, y_ensemble_lstm, 'g^', label='Ensemble LST')\nax.plot(x, y_cae_reconstruction, 'ro', label='CAE Reconstruction')\n\n# Set the title and labels\nax.set_title('Average Relative Error, u')\nax.set_xlabel('Test Case Index, u')\nax.set_ylabel('Average Relative Error, u')\n\n# Set the y-axis limits\nax.set_ylim(0.01, 0.08)\n\n# Set the x-axis ticks\nax.set_xticks([1.0, 2.0, 3.0, 4.0, 5.0])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\ny_majority = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\ny_minority = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.plot(x, y_majority, 'bo-', label='Majority')\nax.plot(x, y_minority, 'ro-', label='Minority')\n\n# Set the title and labels\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [50, 30, 20, 10, 0]\ny1 = [68, 66, 66, 64, 62]\ny2 = [68, 66, 66, 64, 62]\ny3 = [68, 66, 66, 64, 62]\ny4 = [68, 66, 66, 64, 62]\ny5 = [68, 66, 66, 64, 62]\ny6 = [68, 66, 66, 64, 62]\ny7 = [68, 66, 66, 64, 62]\ny8 = [68, 66, 66, 64, 62]\n\n# Create a figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot data on the first subplot\nax1.plot(x, y1, 'ro')\nax1.plot(x, y2, 'bo')\nax1.plot(x, y3, 'go')\nax1.plot(x, y4, 'mo')\nax1.plot(x, y5, 'co')\nax1.plot(x, y6, 'yo')\nax1.plot(x, y7, 'ko')\nax1.plot(x, y8, 'wo')\n\n# Set labels and title for the first subplot\nax1.set_xlabel('Token cost($)')\nax1.set_ylabel('Accuracy(%)')\nax1.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\n\n# Plot data on the second subplot\nax2.plot(x, y1, 'ro')\nax2.plot(x, y2, 'bo')\nax2.plot(x, y3, 'go')\nax2.plot(x, y4, 'mo')\nax2.plot(x, y5, 'co')\nax2.plot(x, y6, 'yo')\nax2.plot(x, y7, 'ko')\nax2.plot(x, y8, 'wo')\n\n# Set labels and title for the second subplot\nax2.set_xlabel('TFLOPS')\nax2.set_ylabel('Accuracy(%)')\nax2.set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nefficiency = [15, 20, 25, 30, 35, 40, 45, 50]\ncarbon_reduction = [10, 10, 10, 10, 10, 10, 10, 10]\nenergy_source = ['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data points\nfor i, source in enumerate(energy_source):\n    ax.plot(efficiency, [cr + i * 5 for cr in carbon_reduction], label=source)\n\n# Set the title and labels\nax.set_title('Energy Source')\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the limits of the plot\nax.set_xlim(-30, 10)\nax.set_ylim(-10, 30)\n\n# Set the title and labels\nax.set_title('Scatter Plot')\nax.set_xlabel('Delta Robust Accuracy (%)')\nax.set_ylabel('Delta RNFR (%)')\n\n# Define the data points\nx}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title and labels\nax.set_title('Scatter Plot of Data Points')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny_day1 = [105, 105, 100, 95, 90, 85, 80, 75]\ny_day2 = [100, 95, 90, 85, 80, 75, 70, 65]\n\n# Plot the data points\nax.scatter(x, y_day1, color='blue', label='Day 1')\nax.scatter(x, y_day2, color='orange', label='Day 2')\n\n# Add grid lines\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny1 = [110, 105, 100, 95, 90, 85, 80, 75]\ny2 = [105, 100, 95, 90, 85, 80, 75, 70]\ny3 = [100, 95, 90, 85, 80, 75, 70, 65]\ny4 = [95, 90, 85, 80, 75, 70, 65, 60]\ny5 = [90, 85, 80, 75, 70, 65, 60, 55]\ny6 = [85, 80, 75, 70, 65, 60, 55, 50]\n\n# Create a scatter plot for each y-axis\nplt.scatter(x, y1, color='blue')\nplt.scatter(x, y2, color='green')\nplt.scatter(x, y3, color='purple')\nplt.scatter(x, y4, color='yellow')\nplt.scatter(x, y5, color='cyan')\nplt.scatter(x, y6, color='magenta')\n\n# Set the limits and labels\nplt.xlim(0, 18)\nplt.ylim(70, 115)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Add a vertical line at x=10\nplt.axvline(x=10, color='black', linestyle='--')\n\n# Add a color bar\ncbar = plt.colorbar()\ncbar.set_label('Color Scale')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [175, 200, 225, 250, 275, 300]\ny_solar = [140, 160, 180, 200, 220, 240]\ny_wind = [140, 160, 180, 200, 220, 240]\ny_hydro = [140, 160, 180, 200, 220, 240]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data\nax.plot(x, y_solar, 'bo-', label='Solar Energy')\nax.plot(x, y_wind, 'ro-', label='Wind Energy')\nax.plot(x, y_hydro, 'go-', label='Hydropower')\n\n# Set the title and labels\nax.set_title('Energy Production Trends')\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\n\n# Set the y-axis limits\nax.set_ylim(140, 240)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10, 20, 30, 40, 50, 60, 70, 80, 90]\ny = [20, 60, 60, 60, 60, 60, 60, 60, 60]\n\n# Create a scatter plot\nplt.scatter(x, y, color='green')\n\n# Set the title of the plot\nplt.title('Scatter plot with colorbar')\n\n# Set the x-axis label\nplt.xlabel('X-axis')\n\n# Set the y-axis label\nplt.ylabel('Y-axis')\n\n# Set the colorbar\ncbar = plt.colorbar()\ncbar.set_label('Colorbar Label')\n\n# Set the figure size\nplt.figure(figsize=(8.0, 6.0))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LibriCSS vs Additional Data 1\nx1 = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n# Data for AMI vs Additional Data 2\nx2 = [2, 3, 4, 5, 6, 7, 8]\ny2 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot data for LibriCSS vs Additional Data 1\nax.plot(x1, y1, 'bo-', label='LibriCSS WER')\nax.plot(x1, y1, 'ro-', label='Additional Data 1')\n\n# Plot data for AMI vs Additional Data 2\nax.plot(x2, y2, 'go-', label='AMI WER')\nax.plot(x2, y2, 'mo-', label='Additional Data 2')\n\n# Set labels and title\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('LibriCSS vs Additional Data 1 vs AMI vs Additional Data 2')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Define the data points\nx_values = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\ny_values = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 0.98, 1]\n\n# Plot the data points\nax.plot(x_values, y_values, 'ro')\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nmodels = ['Model-Basedness', 'Meta-Cognition', 'Exploration', 'Risk Taking']\ngpt4_scores = [175, 175, 175, 175]\nmptb_scores = [175, 175, 175, 175]\nlma270b_scores = [175, 175, 175, 175]\ndavinci40b_scores = [175, 175, 175, 175]\nlma2003_scores = [175, 175, 175, 175]\nclade2_scores = [175, 175, 175, 175]\nclade1_scores = [175, 175, 175, 175]\n\nexploration_scores = [175, 175, 175, 175]\nrisk_taking_scores = [175, 175, 175, 175]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first subplot\naxes[0, 0].plot(models, gpt4_scores, label='GPT-4', color='blue')\naxes[0, 0].plot(models, mptb_scores, label='MPT-7B', color='blue')\naxes[0, 0].plot(models, lma270b_scores, label='Llama2-70B', color='blue')\naxes[0, 0].plot(models, davinci40b_scores, label='Falcon-40B', color='blue')\naxes[0, 0].plot(models, lma2003_scores, label='Llama2-003', color='blue')\naxes[0, 0].plot(models, clade2_scores, label='Claude-2', color='blue')\naxes[0, 0].plot(models, clade1_scores, label='Claude-1', color='blue')\naxes[0, 0].set_title('Model-Basedness')\naxes[0, 0].set_xlabel('Models')\naxes[0, 0].set_ylabel('Score')\naxes[0, 0].legend()\n\n# Plot the second subplot\naxes[0, 1].plot(models, gpt4_scores, label='GPT-4', color='orange')\naxes[0, 1].plot(models, mptb_scores, label='MPT-7B', color='orange')\naxes[0, 1].plot(models, lma270b_scores, label='Llama2-70B', color='orange')\naxes[0, 1].plot(models, davinci40b_scores, label='Falcon-40B', color='orange')\naxes[0, 1].plot(models, lma2003_scores, label='Llama2-003', color='orange')\naxes[0, 1].plot(models, clade2_scores, label='Claude-2', color='orange')\naxes[0, 1].plot(models, clade1_scores, label='Claude-1', color='orange')\naxes[0, 1].set_title('Meta-Cognition')\naxes[0, 1].set_xlabel('Models')\naxes[0, 1].set_ylabel('Score')\naxes[0, 1].legend()\n\n# Plot the third subplot\naxes[1, 0].plot(models, exploration_scores, label='Exploration', color='green')\naxes[1, 0].set_title('Exploration')\naxes[1, 0].set_xlabel('Models')\naxes[1, 0].set_ylabel('Score')\naxes[1, 0].legend()\n\n# Plot the fourth subplot\naxes[1, 1].plot(models, risk_taking_scores, label='Risk Taking', color='red')\naxes[1, 1].set_title('Risk Taking')\naxes[1, 1].set_xlabel('Models')\naxes[1, 1].set_ylabel('Score')\naxes[1, 1].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx_values = [70, 75, 80, 90]\ny_values_1 = [30, 25, 20, 15]\ny_values_2 = [35, 30, 25, 20]\ny_values_3 = [40, 35, 30, 25]\ny_values_4 = [45, 40, 35, 30]\ny_values_5 = [50, 45, 40, 35]\ny_values_6 = [55, 50, 45, 40]\ny_values_7 = [60, 55, 50, 45]\ny_values_8 = [65, 60, 55, 50]\ny_values_9 = [70, 65, 60, 55]\ny_values_10 = [75, 70, 65, 60]\ny_values_11 = [80, 75, 70, 65]\ny_values_12 = [85, 80, 75, 70]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(15, 5))\n\n# Plot 1\naxes[0].plot(x_values, y_values_1, 'b-')\naxes[0].set_title('Scatter Plot - deepskyblue')\naxes[0].set_xlabel('X Values')\naxes[0].set_ylabel('Y Values')\naxes[0].set_ylim(30, 90)\naxes[0].set_xlim(70, 90)\n\n# Plot 2\naxes[1].plot(x_values, y_values_2, 'r-')\naxes[1].set_title('Scatter Plot - magenta')\naxes[1].set_xlabel('X Values')\naxes[1].set_ylabel('Y Values')\naxes[1].set_ylim(30, 90)\naxes[1].set_xlim(70, 90)\n\n# Plot 3\naxes[2].plot(x_values, y_values_3, 'g-')\naxes[2].set_title('Scatter Plot - limegreen')\naxes[2].set_xlabel('X Values')\naxes[2].set_ylabel('Y Values')\naxes[2].set_ylim(30, 90)\naxes[2].set_xlim(70, 90)\n\n# Plot 4\naxes[3].plot(x_values, y_values_4, 'y-')\naxes[3].set_title('Scatter Plot - lime')\naxes[3].set_xlabel('X Values')\naxes[3].set_ylabel('Y Values')\naxes[3].set_ylim(30, 90)\naxes[3].set_xlim(70, 90)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny2 = [45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny3 = [45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot for ViTpose (sc) Performance\naxes[0].plot(x, y1, 'p-', color='purple')\naxes[0].set_title('ViTpose (sc) Performance')\naxes[0].set_xlabel('Average Precision on MSCOCO (%)')\naxes[0].set_ylabel('Average Precision on HumanArt (%)')\n\n# Plot for ViTpose (ft) Performance\naxes[1].plot(x, y2, 'p-', color='purple')\naxes[1].set_title('ViTpose (ft) Performance')\naxes[1].set_xlabel('Average Precision on MSCOCO (%)')\naxes[1].set_ylabel('Average Precision on HumanArt (%)')\n\n# Plot for VLPose Performance\naxes[2].plot(x, y3, 'p-', color='purple')\naxes[2].set_title('VLPose Performance')\naxes[2].set_xlabel('Average Precision on MSCOCO (%)')\naxes[2].set_ylabel('Average Precision on HumanArt (%)')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data points\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.5, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0]\ncolors = ['red', 'gray', 'purple', 'green', 'red', 'gray', 'purple', 'green', 'red', 'gray', 'purple', 'green', 'red', 'gray', 'purple', 'green', 'red', 'gray', 'purple', 'green', 'red', 'gray', 'purple', 'green', 'red', 'gray', 'purple', 'green']\nlabels = ['DefInt', 'CoT', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'CoT', 'DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'CoT', 'DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'CoT', 'DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'CoT', 'DefInt', 'SPP', 'Self-refine']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data points\nfor xi, yi, color, label in zip(x, y, colors, labels):\n    ax.scatter(xi, yi, color=color, label=label)\n\n# Set the title and labels\nax.set_title('Token cost($)')\nax.set_xlabel('Diversity')\nax.set_ylabel('Accuracy(%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data points\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Plot the data points with different colors\nax.plot(x, y, 'ro', color='red')\nax.plot(x, y, 'go', color='green')\nax.plot(x, y, 'bo', color='blue')\nax.plot(x, y, 'yo', color='yellow')\nax.plot(x, y, 'mo', color='magenta')\nax.plot(x, y, 'co', color='cyan')\n\n# Set the limits of the plot\nax.set_xlim(0, 11)\nax.set_ylim(0, 11)\n\n# Remove the axis ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny1 = [800, 750, 700, 650, 600, 550, 500, 450]\ny2 = [600, 550, 500, 450, 400, 350, 300, 250]\ny3 = [600, 550, 500, 450, 400, 350, 300, 250]\ny4 = [600, 550, 500, 450, 400, 350, 300, 250]\ny5 = [600, 550, 500, 450, 400, 350, 300, 250]\ny6 = [600, 550, 500, 450, 400, 350, 300, 250]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data points with different markers and colors\nax.plot(x, y1, 'bo', label='SIREN')\nax.plot(x, y2, 'co', label='WIRE')\nax.plot(x, y3, 'ro', label='FFN')\nax.plot(x, y4, 'go', label='SZ3')\nax.plot(x, y5, 'mo', label='NNComp')\nax.plot(x, y6, 'yo', label='Ours')\n\n# Set the title of the plot\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Bit per pixel (BPP)')\nax.set_ylabel('WRMSE')\n\n# Set the limits for the x and y axes\nax.set_xlim(0.06, 0.2)\nax.set_ylim(200, 800)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points for each category\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Plot the data points with different colors\nax.scatter(x1, y1, color='orange', label='Daytime Sunny')\nax.scatter(x2, y2, color='blue', label='Night Rainy')\nax.scatter(x3, y3, color='green', label='PGST')\n\n# Set the title and labels\nax.set_title('Scatter Plot of Data Points')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nnmae_values = [25, 15, 18, 12, 14, 11]\nnumber_of_parameters = [10, 20, 30, 40, 50, 60]\n\n# Create a bar chart\nplt.figure(figsize=(6.0, 3.0))\nbars = plt.bar(number_of_parameters, nmae_values, color='blue')\n\n# Add labels and title\nplt.xlabel('Number of parameters (M)')\nplt.ylabel('NMAE (%)')\nplt.title('Number of params. vs. NMAE on QM9')\n\n# Add text annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the y-axis limits\nplt.ylim(0, 35)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points\nx1 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny1_ar = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny1_de = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny1_fr = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny1_he = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\nx2 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny2_ar = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny2_de = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny2_fr = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny2_he = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\nx3 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny3_ar = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny3_de = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny3_fr = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny3_he = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n# Plot the data points\nax.scatter(x1, y1_ar, color='blue', label='ar')\nax.scatter(x1, y1_de, color='pink', label='de')\nax.scatter(x1, y1_fr, color='yellow', label='fr')\nax.scatter(x1, y1_he, color='green', label='he')\n\nax.scatter(x2, y2_ar, color='blue')\nax.scatter(x2, y2_de, color='pink')\nax.scatter(x2, y2_fr, color='yellow')\nax.scatter(x2, y2_he, color='green')\n\nax.scatter(x3, y3_ar, color='blue')\nax.scatter(x3, y3_de, color='pink')\nax.scatter(x3, y3_fr, color='yellow')\nax.scatter(x3, y3_he, color='green')\n\n# Set the legend\nax.legend()\n\n# Set the title\nax.set_title('Legend')\n\n# Set the x-axis label\nax.set_xlabel('PC1')\n\n# Set the y-axis label\nax.set_ylabel('PC2')\n\n# Set the y-axis limits\nax.set_ylim(-0.2, 0.4)\n\n# Set the x-axis limits\nax.set_xlim(-0.4, 0.4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for DE plot\nx_DE = [0.6, 0.7, 0.8, 0.9, 1.0]\ny_DE = [0.11, 0.11, 0.10, 0.10, 0.10]\n\n# Data for PJM plot\nx_PJM = [0.6, 0.7, 0.8, 0.9, 1.0]\ny_PJM = [0.55, 0.55, 0.55, 0.55, 0.55]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 1, figsize=(7.0, 10.0))\n\n# Plot DE data\naxes[0].scatter(x_DE, y_DE, color='green')\naxes[0].set_title('DE')\naxes[0].set_xlabel('CQA Similarity')\naxes[0].set_ylabel('MSE')\n\n# Plot PJM data\naxes[1].scatter(x_PJM, y_PJM, color='green')\naxes[1].set_title('PJM')\naxes[1].set_xlabel('CQA Similarity')\naxes[1].set_ylabel('MSE')\n\n# Set the colorbar for both plots\ncmap = plt.cm.get_cmap('viridis', 5)\nnorm = plt.Normalize(vmin=0.4, vmax=1.1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm, ax=axes.ravel().tolist(), orientation='vertical')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['physicsforums.com', 'gmatclub.com', 'mathhelpboards.com', 'mathoverflow.net', 'stackexchange.com', 'proofwiki.org', 'mathhelpforum.com']\nvalues = [18.42, 6.26, 6.15, 10.91, 30.6, 8.54, 14.21]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('viridis', len(categories))\n\n# Create a bar chart with custom colors\nbars = ax.bar(categories, values, color=cmap(np.linspace(0, 1, len(categories))))\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Website Traffic Distribution')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Java', 'Python', 'JavaScript', 'C++', 'Other']\nsizes = [10, 20, 27, 23, 8]\ncolors = ['#800080', '#800000', '#FFA500', '#008000', '#FFFF00']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Adidas', 'Nike', 'Reebok', 'Puma']\nsizes = [13.42, 30.6, 10.91, 14.21]\ncolors = ['lightblue', 'lightgreen', 'orange', 'yellow']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C']\nvalues = [50, 15, 20]\n\n# Create a bar chart\nplt.bar(categories, values, color=['orange', 'lightblue', 'lightgreen'])\n\n# Set the title and labels\nplt.title('Bar Chart Representation')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Set the figure size\nplt.figure(figsize=(4.0, 6.0))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['European', 'Australian', 'South American', 'Asian', 'North American']\nvalues = [15, 18, 10, 25, 20]\n\n# Create a bar chart\nplt.figure(figsize=(6.0, 6.0))\nbars = plt.bar(categories, values, color=['yellow', 'purple', 'cyan', 'pink', 'green'])\n\n# Add labels and title\nplt.xlabel('Categories')\nplt.ylabel('Percentage')\nplt.title('Percentage Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([6, 6, 5, 5, 6])\ny2 = np.array([7, 7, 6, 6, 7])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Llama2')\nax.plot(x, y2, 'r-', label='Llama2 (In-Chat)')\n\n# Set the title and labels\nax.set_title('Plot of LogPCL')\nax.set_xlabel('Number of examples')\nax.set_ylabel('LogPCL - log(NoCl)')\n\n# Set the y-axis limits\nax.set_ylim(1, 7)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Efficiency', 'Comfort', 'Safety']\nscores_without_memory = [0.8, 0.4, 0.2]\nscores_with_memory = [0.6, 0.8, 1.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bars\nax.bar(categories, scores_without_memory, color='blue', label='Without Memory')\nax.bar(categories, scores_with_memory, bottom=scores_without_memory, color='orange', label='With Memory')\n\n# Add stars at specific positions\nstars_positions = [0.3, 0.7, 0.5]\nfor category in categories:\n    ax.plot([category] * len(stars_positions), stars_positions, 'ro')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Score')\nax.set_title('Comparison of Scores with and without Memory')\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 1.2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Efficiency', 'Comfort', 'Safety']\nefficiency_scores = [0.3, 0.5, 0.7]\ncomfort_scores = [0.4, 0.6, 0.8]\nsafety_scores = [0.5, 0.7, 0.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('coolwarm')\n\n# Plot the bars for Efficiency\nax.bar(categories, efficiency_scores, color=cmap(0.2), label='Without Memory')\nax.bar(categories, efficiency_scores, bottom=efficiency_scores, color=cmap(0.8), label='With Memory')\n\n# Plot the bars for Comfort\nax.bar(categories, comfort_scores, color=cmap(0.2), label='Without Memory')\nax.bar(categories, comfort_scores, bottom=comfort_scores, color=cmap(0.8), label='With Memory')\n\n# Plot the bars for Safety\nax.bar(categories, safety_scores, color=cmap(0.2), label='Without Memory')\nax.bar(categories, safety_scores, bottom=safety_scores, color=cmap(0.8), label='With Memory')\n\n# Set the title and labels\nax.set_title('Scores by Category')\nax.set_xlabel('Category')\nax.set_ylabel('Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [1, 2, 3, 4, 5]\ny1 = [0.6, 0.7, 0.8, 0.9, 1.0]\ny2 = [0.5, 0.6, 0.7, 0.8, 0.9]\ny3 = [0.4, 0.5, 0.6, 0.7, 0.8]\ny4 = [0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='GPT-4V(Version)', color='green')\nax.plot(x, y2, label='Gemini', color='orange')\n\n# Set labels and title\nax.set_xlabel('Length Distribution')\nax.set_ylabel('Score/Preference')\nax.set_title('Scoring Evaluation')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data for the plots\ndata = [\n    [0.9, 0.8, 0.7],\n    [0.6, 0.5, 0.4],\n    [0.3, 0.2, 0.1]\n]\n\n# Define the colors for the plots\ncolors = ['pink', 'lightblue', 'purple']\n\n# Plot each dataset with a different color\nfor i, row in enumerate(data):\n    ax.bar(range(len(row)), row, color=colors[i], alpha=0.7)\n\n# Set the title of the plot\nax.set_title('Accuracy Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-tick labels\nax.set_xticks(range(len(data[0])))\nax.set_xticklabels(['jTrans', 'PalmTree', 'CLAP'])\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plots\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(-x)\n\n# Plot the data\nax.plot(x, y1, label='Teacher-Style')\nax.plot(x, y2, label='Standardize')\n\n# Set the title and labels\nax.set_title('Comparison of Teacher-Style and Standardize')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data for the plots\ndata1 = [75, 85]\ndata2 = [65, 75]\n\n# Create the first plot\nax.barh([1, 2], data1, color='pink', height=0.5)\nax.text(75, 1.25, 'Vanilla', va='center')\n\n# Create the second plot\nax.barh([1, 2], data2, color='blue', height=0.5)\nax.text(75, 1.25, 'CoT', va='center')\n\n# Set the y-axis limits and labels\nax.set_ylim(0.5, 2.5)\nax.set_yticks([1, 2])\nax.set_yticklabels(['', ''])\n\n# Set the x-axis limits and ticks\nax.set_xlim(30, 90)\nax.set_xticks(np.arange(40, 100, 10))\nax.set_xlabel('Accuracy')\n\n# Remove the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nx1 = [2, 4, 6, 8, 10]\ny1_group_l0 = [163, 201, 176, 159, 153]\ny1_agis = [97, 97, 95, 109, 97]\n\n# Data for the second chart\nx2 = [2, 4, 6, 8, 10]\ny2_group_l0 = [163, 201, 176, 159, 153]\ny2_agis = [97, 97, 95, 109, 97]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(8.0, 8.0))\n\n# Plot the first chart\naxes[0].bar(x1, y1_group_l0, color='blue', label='Group l0')\naxes[0].bar(x1, y1_agis, color='orange', label='AGIS')\naxes[0].set_title('% Decrease in Test MSE vs. FLAM-GL')\naxes[0].set_xlabel('Number of Features')\naxes[0].set_ylabel('% Decrease')\naxes[0].legend()\n\n# Plot the second chart\naxes[1].bar(x2, y2_group_l0, color='blue', label='Group l0')\naxes[1].bar(x2, y2_agis, color='orange', label='AGIS')\naxes[1].set_title('% Decrease in Test MSE vs. EBM-RS')\naxes[1].set_xlabel('Number of Features')\naxes[1].set_ylabel('% Decrease')\naxes[1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['Raw', '125Hz', '50Hz', '25Hz', '10Hz']\nvalues = [0.88, 0.85, 0.79, 0.67, 0.57]\npearson_r_values = [0.18, 0.19, 0.18, 0.16, 0.16]\neer_values = [3.33, 3.33, 10.67, 16.95, 29.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plotting the data\nfor i, label in enumerate(labels):\n    ax.plot([i, i], [0, values[i]], marker='o', markersize=10, color='black')\n    ax.text(i, values[i], f'{label}\\n{values[i]:.2f}', ha='center', va='bottom')\n\n# Setting the limits and labels\nax.set_xlim(-1, len(labels))\nax.set_ylim(0, 1.1)\nax.set_yticks(np.arange(0, 1.1, 0.1))\nax.set_xlabel('Decimated Sampling Rate')\nax.set_ylabel('KCC')\n\n# Adding Pearson R and EER values\nfor i, (pr, eer) in enumerate(zip(pearson_r_values, eer_values)):\n    ax.text(i, 0.05, f'Pearson R: {pr:.2f}\\nEER(%): {eer:.2f}', ha='center', va='top')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 8.0))\n\n# Data for the first row\ndata1 = [50, 60, 70, 80, 90, 100]\ndata2 = [50, 60, 70, 80, 90, 100]\n\n# Plotting the first subplot\naxes[0, 0].bar(range(len(data1)), data1, color='lightblue')\naxes[0, 0].set_title('Distribution of Grades: Class 1')\naxes[0, 0].set_xlabel('Grades')\naxes[0, 0].set_ylabel('Number')\n\n# Plotting the second subplot\naxes[0, 1].bar(range(len(data2)), data2, color='lightblue')\naxes[0, 1].set_title('Distribution of Grades: Class 2')\naxes[0, 1].set_xlabel('Grades')\naxes[0, 1].set_ylabel('Number')\n\n# Data for the second row\ndata3 = [50, 60, 70, 80, 90, 100]\ndata4 = [50, 60, 70, 80, 90, 100]\n\n# Plotting the third subplot\naxes[1, 0].bar(range(len(data3)), data3, color='lightblue')\naxes[1, 0].set_title('Distribution of Grades: Class 3')\naxes[1, 0].set_xlabel('Grades')\naxes[1, 0].set_ylabel('Number')\n\n# Plotting the fourth subplot\naxes[1, 1].bar(range(len(data4)), data4, color='lightblue')\naxes[1, 1].set_title('Distribution of Grades: Class 4')\naxes[1, 1].set_xlabel('Grades')\naxes[1, 1].set_ylabel('Number')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
