{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Make data.\nX = np.arange(-5, 5, 0.25)\nY = np.arange(-5, 5, 0.2)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X**2 + Y**2)\nZ = np.sin(R)\n\n# Plot the surface.\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\n# Customize the z axis.\nax.set_zlim3d(-1.01, 1.01)\nax.zaxis.set_major_locator(LinearLocator(10))\n# A StrMethodFormatter is used automatically\nax.zaxis.set_major_formatter('{x:.02f}')\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nx = np.arange(-5, 5, 1)\ny = x\nz = np.sqrt(x**2 + y**2)\n\nax.plot_surface(x, y, z)\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Make up some data in the shape of the desired manifold\nt = np.linspace(0, 2 * np.pi, 100)\nx = np.cos(t)\ny = np.sin(t)\nz = np.random.normal(size=len(t))\n\n# Plot the data using wireframe\nax.plot_wireframe(x, y, z, color=\"b\")\n\n# Plot the data using surf\nax.plot_surface(x, y, z, alpha=.5, color=\"r\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\nax.scatter(x, y, z, c='r', marker='o')\n\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nx = [2010, 2012, 2014, 2016, 2018]\ny = ['Private Schools', 'Public Schools']\nz = [0.5, 0.3, 0.1, 0.4, 0.7]\n\nax.bar(x, z, y, zdir='y', align='edge')\n\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nn = 100\nx = np.linspace(0, 2, n)\ny = np.linspace(0, 1, n)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-4 * (X - 1)**2 - 4 * Y)\nZ2 = np.exp(-(X - 2)**2 - (Y - 2)**2)\nB = np.minimum(Z1, Z2)\n\nax.plot_surface(X, Y, B, rstride=1, cstride=1,\n                cmap=cm.viridis, edgecolor='none')\nax.set_zlim(0, 0.125)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata = np.random.rand(3, 4)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nx = np.arange(-5, 5, 1)\ny = np.arange(-5, 5, 1)\nx, y = np.meshgrid(x, y)\nz = x**2 + y**2\n\nax.plot_surface(x, y, z, rstride=1, cstride=1, cmap='viridis', edgecolor='none')\nax.set_title('An example surface plot')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute some 3D data that depends on two parameters, x and y\nx = np.linspace(-3, 3, 25)\ny = np.linspace(-3, 3, 25)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nZ = (Z1 - Z2) * 2\n\n# This is just an example; in your code, create the colormap once,\n# then use it every time you need a new colormap.\ncmap = cm.get_cmap('viridis')\n\n# Create a figure with 2 subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 5))\n\n# Plot the surface in both axes\nsurf1 = ax1.plot_surface(X, Y, Z, cmap=cmap, linewidth=0, antialiased=False)\nsurf2 = ax2.plot_surface(X, Y, Z, rstride=8, cstride=8, cmap=cmap,\n                         linewidth=0, antialiased=False)\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf1, shrink=0.5, aspect=5)\nfig.colorbar(surf2, shrink=0.5, aspect=5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Make data.\nX = np.arange(1, 7)\nY = np.arange(1, 4)\nX, Y = np.meshgrid(X, Y)\nZ = np.sin(X) + np.cos(Y)\n\n# Plot the surface.\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nX = np.arange(-50, 150, 1)\nY = np.arange(-50, 150, 1)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.sqrt(X**2 + Y**2)\nZ2 = np.sqrt((X - 75)**2 + (Y - 75)**2)\nZ = np.where(Z1 < Z2, Z1, Z2)\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nax.set_title('Origin')\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('FREEDOM')\n\nplt.show()\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nX = np.arange(-50, 150, 1)\nY = np.arange(-50, 150, 1)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.sqrt(X**2 + Y**2)\nZ2 = np.sqrt((X - 100)**2 + (Y - 100)**2)\nZ = np.where(Z1 < Z2, Z1, Z2)\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nax.set_title('MG (ours)')\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('FREEDOM')\n\nplt.show()\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nX = np.arange(-50, 150, 1)\nY = np.arange(-50, 150, 1)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.sqrt(X**2 + Y**2)\nZ2 = np.sqrt((X - 100)**2 + (Y - 100)**2)\nZ = np.where(Z1 < Z2, Z1, Z2)\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nax.set_title('Origin')\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('BM3')\n\nplt.show()\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nX = np.arange(-50, 150, 1)\nY = np.arange(-50, 150, 1)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.sqrt(X**2 + Y**2)\nZ2 = np.sqrt((X - 100)**2 + (Y - 100)**2)\nZ = np.where(Z1 < Z2, Z1, Z2)\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nax.set_title('MG (ours)')\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('BM3')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nn_angles = 36\nn_radii = 8\nmin_radius = 0.7\nradii = np.linspace(min_radius, 1.0, n_radii)\n\n# Compute corresponding radius and angle values\nangles = np.linspace(0, 2 * np.pi, n_angles, endpoint=False)\nangles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\nangles[:, 1::2] += np.pi / n_angles\n\nx = (1 + radii * np.cos(angles)) * np.cos(2 * angles)\ny = (1 + radii * np.cos(angles)) * np.sin(2 * angles)\nz = radii * np.sin(angles)\n\nsc = ax.scatter(x, y, z, c=z, cmap=cm.coolwarm)\nax.set_zlim(0, 1)\n\nfig.colorbar(sc, ax=ax)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nn = 12\nX = np.linspace(-4, 4, n)\nY = np.linspace(-4, 4, n * 2)\nX, Y = np.meshgrid(X, Y)\n\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nQx = np.exp(-(X + 1)**2 - Y**2)\nQz = np.exp(-(X - 2)**2 - (Y - 2)**2)\nZ = (Z1 + Z2 + Qx + Qz) / 4.\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nax.set_xlabel(\"Time\")\nax.set_ylabel(\"Bus\")\nax.set_zlabel(\"\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 12\ndata2d = np.random.rand(N, N)\ndata2d[3, 3] = 12\ndata2d[7, 5] = 12\ncmap = cm.get_cmap('PRGn', 13)\n\nfig, ax = plt.subplots()\nim = ax.imshow(data2d, cmap=cmap)\n\nax.set_title(\"Colorbar with a discrete colormap\")\n\nfig.colorbar(im, ax=ax)\n\n# We can access any property of the colorbar by name or by its label\ncbar = fig.colorbar(im, ax=ax, label=\"Colorbar Label\")\ncbar.ax.set_ylabel('Colorbar Label', rotation=-90, va=\"bottom\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nn = 100\nr = 2 * np.pi * np.random.rand(n)\ntheta = 2 * np.pi * np.random.rand(n)\nz = np.sqrt(r) * np.cos(theta)\nx = np.sqrt(r) * np.sin(theta)\ny = z / 5.\n\nax.scatter(x, y, z, c='red', marker='o')\n\nr = 2 * np.pi * np.random.rand(n)\ntheta = 2 * np.pi * np.random.rand(n)\nz = -np.sqrt(r) * np.cos(theta)\nx = np.sqrt(r) * np.sin(theta)\ny = z / 5.\n\nax.scatter(x, y, z, c='blue', marker='^')\n\nax.set_xlabel('Income')\nax.set_ylabel('Age')\nax.set_zlabel('Debt')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nt = np.arange(0.01, 10.0, 0.01)\ns = np.exp(-t)\nx, y = np.meshgrid(t, s)\n\nax.plot(x, y, zs=0, zdir='zaxis', label=' zs=0 ')\nax.plot(x, y, zs=1, zdir='zdir', label=' zs=1 ')\nax.legend()\n\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Time (s)')\nax.set_zlabel('Depth (m)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom scipy.stats import norm\n\n# example data\nmu = 200\nsigma = 25\nx = mu + sigma * np.random.randn(10000)\nx = x[(x > 100) & (x < 300)]\n\n# fit to distribution\nf, ax = plt.subplots(2, 1, layout='constrained')\nax[0].hist(x, bins=75, density=True)\nax[0].set_title('Histogram of data')\nax[0].set_xlabel('LR Test')\nax[0].set_ylabel('Density')\n\n# fit to normal and plot\nmu_est, sigma_est = norm.fit(x)\npdf = norm.pdf(x, mu_est, sigma_est)\nax[1].plot(x, pdf, 'r', label=f'Normal fit: $\\mu$={mu_est:.2f}, $\\sigma$={sigma_est:.2f}')\nax[1].legend()\nax[1].set_title('Fitted Normal Distribution')\nax[1].set_xlabel('LR Test')\nax[1].set_ylabel('Density')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.uniform(150, 400, 20)\ny = np.random.uniform(-6, -2, 20)\ns = np.random.uniform(10, 100, 20)\n\nfig, ax = plt.subplots()\nax.scatter(x, y, s, c='C0', alpha=0.5, label='Low')\nax.scatter(x, y + 1, s, c='C1', alpha=0.5, label='Middle')\nax.scatter(x, y + 2, s, c='C2', alpha=0.5, label='High')\n\nax.set_xscale('log')\nax.set_yscale('log')\nax.set_xlim(150, 400)\nax.set_ylim(-6, -2)\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\nax.legend()\n\n# add correlation line\nslope, intercept, r_value, p_value, std_err = np.polyfit(np.log(x), np.log(y), 1)\nax.plot(np.log(x), slope*np.log(x)+intercept, 'k-')\nax.text(350, -3.5, f'Correlation: {r_value:.2f}')\n\n# add shaded area\nax.fill_between(np.log(x), (slope+std_err)*np.log(x)+intercept, (slope-std_err)*np.log(x)+intercept, color='gray', alpha=0.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.logspace(-3, 0.5, 10)\ny = np.random.normal(size=len(x))\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with linear scaling\nplt.xscale('linear')\nplt.yscale('linear')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom scipy.stats import ttest_ind\nfrom scipy.stats import gaussian_kde\n\n# example data\nx1 = np.random.normal(0.5, 0.3, 100)\ny1 = np.random.normal(0.5, 0.3, 100)\nx2 = np.random.normal(2.0, 0.5, 100)\ny2 = np.random.normal(2.0, 0.5, 100)\n\n# Compute the kernel density estimate of the two samples\nkde = gaussian_kde([x1, y1])\nkde2 = gaussian_kde([x2, y2])\n\n# Evaluate it on a grid over the same range\nxgrid = np.linspace(-1, 4, 100)\nygrid = np.linspace(-1, 4, 100)\nX, Y = np.meshgrid(xgrid, ygrid)\npos = np.dstack((X.ravel(), Y.ravel()))\nZ = kde.evaluate(pos)\nZ2 = kde2.evaluate(pos)\n\n# Plot the result\nfig, ax = plt.subplots()\nax.set_title('T-test p-value = %.4f' % ttest_ind(x1, x2).pvalue)\nax.contourf(X, Y, Z.reshape(X.shape), cmap='Blues')\nax.contourf(X, Y, Z2.reshape(X.shape), cmap='Reds', alpha=0.5)\nax.plot(x1, y1, 'o', color='w', zorder=5)\nax.plot(x2, y2, 'o', color='w', zorder=5)\nax.legend(['Benign', 'BadNets'])\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 5\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\n# the bar with errorbars\np1 = ax.bar(ind, [1, 2, 3, 4, 5], width, yerr=[0.1, 0.3, 0.5, 0.7, 0.9])\n\n# the bar without errorbars\np2 = ax.bar(ind + width, [2, 3, 5, 7, 11], width)\n\n# the bar with errorbars and a different color\np3 = ax.bar(ind, [1, 2, 3, 4, 5], width, yerr=[0.1, 0.3, 0.5, 0.7, 0.9], color='r')\n\n# the bar with errorbars and a different color\np4 = ax.bar(ind - width, [1, 2, 3, 4, 5], width, yerr=[0.1, 0.3, 0.5, 0.7, 0.9], color='g')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\nax.set_xticks(ind)\nax.set_xticklabels(('snarks', 'navigate', 'question_selection', 'object_counting'))\nax.legend((p1[0], p2[0], p3[0], p4[0]), ('APO-trend', 'APO-step1-APE', 'APO-step2-APE', 'APO-best'))\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(p1)\nautolabel(p2)\nautolabel(p3)\nautolabel(p4)\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors as mcolors\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Make a histogram of random data with a color map\nnorm_size = np.random.uniform(0.0, 1.4, 1000)\nselector = np.random.randint(2, size=1000)\ncolors = [mcolors.to_rgba('pink', alpha=0.5), mcolors.to_rgba('blue', alpha=0.5)]\ncmap = mcolors.LinearSegmentedColormap.from_list('my_colormap', colors)\n\nax.hist(norm_size[selector == 0], bins=30, density=True,\n        facecolor=cmap(0.5), alpha=0.5, label='H-ward - centers-cos')\nax.hist(norm_size[selector == 1], bins=30, density=True,\n        facecolor=cmap(0.75), alpha=0.5, label='random')\n\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute pie slices\nn_incomparable = 99\nn_same = 32\nn_different = 4\nn_incomparable_english = 11.1\nn_incomparable_german = 44.4\nn_incomparable_both = 44.4\n\nsizes = [n_incomparable, n_same, n_different]\nlabels = ['Incomparable', 'Same', 'Different']\ncolours = ['green', 'blue', 'yellow']\n\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, colors=colours,\n       autopct='%1.1f%%', startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nseac = np.random.lognormal(size=(3, 2), mean=3.5, sigma=1.5)\nsac = np.random.lognormal(size=(3, 2), mean=4.1, sigma=1.5)\n\nfig, ax = plt.subplots()\nax.boxplot([seac, sac])\nax.set_xticklabels(['SEAC', 'SAC(20Hz)'])\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmethod = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\nrecall_scores = [63.64, 80.08, 84.27, 90.11]\nf1_scores = [75.00, 87.20, 90.12, 93.89]\n\n# plot recall scores\nfig, ax1 = plt.subplots()\n\ncolor = 'tab:blue'\nax1.set_xlabel('Method')\nax1.set_ylabel('Scores', color=color)\nax1.bar(method, recall_scores, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# plot f1 scores on the same plot\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Scores', color=color)  \nax2.plot(method, f1_scores, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  \nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = [4, 8, 12, 16, 20, 24, 28, 32]\ny1 = [82.5, 87.5, 90.0, 92.0, 93.0, 94.0, 94.0, 94.5]\ny2 = [89.0, 91.0, 92.0, 93.0, 94.0, 94.0, 94.0, 94.5]\n\nfig, ax = plt.subplots()\nax.plot(x, y1, 'o-', label='Trained w Few-Shot Ex')\nax.fill_between(x, y1 - 1.0, y1 + 1.0, color='b', alpha=.1)\nax.plot(x, y2, 'o-', label='Def Deduce+Ex Gen')\nax.fill_between(x, y2 - 1.0, y2 + 1.0, color='r', alpha=.1)\n\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 50)\ny = x * 2 + 3\n\nfig, ax = plt.subplots()\nax.plot(x, y, 'r', label='Cars')\nax.plot(80, 80, 'b*', label='Trucks')\n\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [0, 6, 8, 12, 12, 56]\ntrends = [0, 0, 4, 10, 12, 22]\n\n# plot\nfig, ax = plt.subplots()\nax.bar(models, success_rates, label='Simple Trend')\nax.plot(models, trends, marker='o', color='purple', label='Simple')\n\n# add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\nax.set_title('Encoding/Decoding Schelling Points by Model')\n\n# add legend\nax.legend()\n\n# show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.normal(size=100)\ny = np.random.normal(size=100)\n\n# histogram of x\nhist, bin_edges = np.histogram(x, bins=10)\n\n# calibration curve\nfpr, tpr, thresholds = plt.histcalib(x, y, bins=10)\n\n# plot\nfig, ax = plt.subplots(2, 1, sharex=True, figsize=(4.5, 7))\nax[0].bar(bin_edges[:-1], hist, width=bin_edges[1] - bin_edges[0])\nax[1].scatter(x, y, s=10, alpha=0.5)\nax[1].plot([0, 1], [0, 1], 'k--', lw=2)\nax[1].set_xlabel('predicted probability')\nax[1].set_ylabel('fraction of positives')\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100300\nsigma = 5000\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\n# add a 'best fit' line\ny = mlab.normpdf(bins, mu, sigma)\nplt.plot(bins, y, '--')\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom scipy.stats import norm\n\n# example data\nmu = 1659.02\nsigma = 23.47\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\ny = norm.pdf(x, mu, sigma)\n\nmu = 211.46\nsigma = 2.55\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\ny = norm.pdf(x, mu, sigma)\n\nmu = 1397.72\nsigma = 19.74\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\ny = norm.pdf(x, mu, sigma)\n\nmu = 49.89\nsigma = 0.63\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\ny = norm.pdf(x, mu, sigma)\n\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(2, 2, sharex=True, sharey=True)\nax1.hist(x, bins=20, density=True)\nax1.plot(x, y, 'k')\nax1.set_title('Total')\n\nax2.hist(x, bins=20, density=True)\nax2.plot(x, y, 'k')\nax2.set_title('Proposer')\n\nax3.hist(x, bins=20, density=True)\nax3.plot(x, y, 'k')\nax3.set_title('Attestor')\n\nax4.hist(x, bins=20, density=True)\nax4.plot(x, y, 'k')\nax4.set_title('Sync committee member')\n\nfig.suptitle('Daily reward (Ether)')\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# example data\nx = np.arange(1, 150)\ny = np.sin(x / 20) * x + np.random.normal(0, 0.1, size=x.shape)\n\n# plot with error bars in both x and y\nax.errorbar(x, y, xerr=5, yerr=0.3, fmt='o', c='red')\n\n# plot with error bars in y only\nax.errorbar(x, y, yerr=0.3, fmt='o', c='blue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100\nsigma = 15\nx = mu + sigma * np.random.randn(10000)\n\nnum_bins = 50\n\nfig, ax = plt.subplots()\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=True)\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\nax.plot(bins, y, '--')\nax.set_xlabel('Execution Duration(clock)')\nax.set_ylabel('Distribution')\nax.set_title(r'Histogram of IQ: $\\mu=100$, $\\sigma=15$')\n\n# Tweak spacing to prevent clipping of ylabel\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 4\nmenMeans = (20, 35, 30, 35, 27)\nmenStd = (2, 3, 4, 1, 2)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, menMeans, width, yerr=menStd)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\nax.legend((rects1[0]), ('Men'))\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.random.randn(1000, 2)\ny = np.random.randn(1000, 2)\n\nfig, ax = plt.subplots()\nax.scatter(x[0], y[0], color='green')\nax.scatter(x[1], y[1], color='orange')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata = [np.random.normal(0, std, 200) for std in range(6, 10)]\n\nfig, ax = plt.subplots()\nax.boxplot(data)\nax.set_title('Box plots with different medians')\n\n# add a median line to the box plot\nmedians = [np.median(x) for x in data]\nax.plot([0, 4], [np.median(x), np.median(x)], 'k--', linewidth=2)\n\n# add stars to the median lines\nfor median, star in zip(medians, ax.get_xticklabels()):\n    ax.plot([median, median], [0, 1], 'k*', color=star.get_color())\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(196834)\nages = [80, 82, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nx = np.arange(len(ages))\n\nfig, (ax1, ax2) = plt.subplots(nrows=2)\n\nax1.set_title('Early 20th Century')\nax1.set_ylabel('Density')\nax1.set_xlabel('Age')\nax1.set_xlim(0, 100)\nax1.set_ylim(0, 0.04)\nax1.set_yticks(np.arange(0, 0.05, 0.01))\nax1.hist(ages, bins=10, density=True, histtype='stepfilled', alpha=0.8)\n\nax2.set_title('Mid 20th Century')\nax2.set_ylabel('Year')\nax2.set_xlabel('Age')\nax2.set_xlim(0, 100)\nax2.set_ylim(1850, 2050)\nax2.set_yticks([1900, 1950, 2000])\nax2.boxplot(ages, positions=[1925, 1975], widths=10, patch_artist=True,\n            showmeans=True, meanprops={\"marker\":\"D\", \"color\":\"red\"},\n            medianprops={\"color\":\"blue\"}, boxprops={\"facecolor\":\"green\"},\n            capprops={\"color\":\"orange\"}, whiskerprops={\"color\":\"brown\"})\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 4), sharey=True)\n\nN = 10\nind = np.arange(N)\nwidth = 0.35\n\np1 = ax1.bar(ind, [20, 10, 40, 30, 60, 70, 90, 80, 50, 120], width)\np2 = ax2.bar(ind, [90, 50, 150, 100, 115, 180, 250, 300, 200, 400], width)\n\nax1.set_title('Patent Filings in 2013')\nax2.set_title('Patent Filings in 2022')\n\nax1.set_xticks(ind + width / 2)\nax1.set_xlabel('Technology Field')\nax1.set_ylabel('Number of Patents')\nax1.legend((p1[0], p2[0]), ('2013', '2022'))\n\nax2.set_yscale('log')\nax2.set_ylim(10, 500)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nn_bins = 10\nx = np.random.randn(10_000)\ny = np.random.randn(10_000)\nz = np.sqrt(x**2 + y**2) / 5\nc = z / z.max()\n\nfig, ax = plt.subplots()\nax.hexbin(x, y, C=c, gridsize=n_bins, cmap='inferno', bins=10)\nax.set_title('Hexagon binning')\nax.set_xlabel('X axis')\nax.set_ylabel('Y axis')\n\n# Add a colorbar representing the values C\ncb = fig.colorbar(ax.collections[0])\ncb.set_label('Colorbar label')\n\n# Add a dashed line for the bin edges\nax.plot(ax.get_xlim(), ax.get_ylim(), ls=\"--\", c=\"k\", lw=2)\n\n# Add a calibration curve\nax.plot([0, 1], [0, 1], transform=ax.get_xaxis_transform(), clip_on=False)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nN = 4\nwidth = 0.25\n\np1 = ax.bar(np.arange(N), [10, 15, 20, 25], width, label='Tesla')\np2 = ax.bar(np.arange(N) + width, [30, 35, 40, 45], width, label='Benz')\np3 = ax.bar(np.arange(N) + width * 2, [50, 55, 60, 65], width, label='BYD')\np4 = ax.bar(np.arange(N) + width * 2, [70, 75, 80, 85], width, label='Porsche')\n\nax.set_ylabel('Earnings ($1000s)')\nax.set_title('Quarterly Earnings for Four Companies')\nax.set_xticks(np.arange(N) + width * 1.5)\nax.set_xticklabels(('Q1', 'Q2', 'Q3', 'Q4'))\nax.legend(loc='upper left')\n\n# plot error bars\nfor p in [p1, p2, p3, p4]:\n    for i in range(len(p)):\n        ax.errorbar([i - width / 2, i + width / 2], p[i].get_y(), p[i].get_ysd(), fmt='o', ecolor='gray', capsize=5)\n\n# plot growth line\ngrowth = np.array([10, 20, 30, 40])\ngrowth[-1] = 90\nax.plot(np.arange(N), growth, 'r-', label='Growth')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 6\nmen_means = (20, 35, 30, 35, 27, 29)\nmen_std = (2, 3, 4, 1, 2, 3)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\nrects1 = ax.bar(ind, men_means, width, color='tab:blue',\n                yerr=men_std, capsize=7)\n\nwomen_means = (25, 32, 34, 20, 25, 26)\nrects2 = ax.bar(ind + width, women_means, width, color='tab:orange',\n                yerr=women_means/2, capsize=7)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('A', 'B', 'C', 'D', 'E', 'F'))\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# make up some data\nx = np.linspace(0.1, 2 * np.pi, 41)\ny1 = np.sin(x)\ny2 = np.exp(np.sin(x))\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True, figsize=(6.0, 6.0))\n\nax0.bar(x, y1)\nax1.plot(x, y1)\nax1.errorbar(x, y1, xerr=0.2)\nax2.scatter(x, y1)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors\nfrom matplotlib.collections import RegularPolyCollection\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n\ndef get_angle(size):\n    \"\"\"Return angle in radians for a regular polygon of the given size.\"\"\"\n    return 2 * np.pi / size\n\n\ndef get_xys(size, offset=0.5):\n    \"\"\"Return x and y coordinates for a regular polygon of the given size.\"\"\"\n    theta = get_angle(size)\n    x = np.cos(theta) * size + offset\n    y = np.sin(theta) * size\n    return x, y\n\n\ndef get_angles(xys):\n    \"\"\"Return angles in radians for each point in the given list of (x, y) pairs.\"\"\"\n    x, y = zip(*xys)\n    return np.arctan2(y, x)\n\n\ndef get_colors(norm, vmin, vmax):\n    \"\"\"Return colors for the given norm and vmin/vmax values.\"\"\"\n    norm.set_bad('bad', 1.0)\n    return colors.to_rgba_array(norm(norm.array))\n\n\ndef get_collection(xys, angles, colors):\n    \"\"\"Return a RegularPolyCollection with the given xys, angles, and colors.\"\"\"\n    return RegularPolyCollection(\n        xys, angles, sizes=colors[:, 3], facecolors=colors[:, :3],\n        edgecolors='none', transform=colors[0].get_transform())\n\n\ndef get_colorbar(ax, norm, vmin, vmax, label):\n    \"\"\"Return a colorbar for the given norm, vmin, vmax, and label.\"\"\"\n    divider = make_axes_locatable(ax)\n    cax = divider.append_axes(\"right\", size=\"5%\", pad=0.05)\n    return fig.colorbar(\n        colors.LogNorm(vmin=vmin, vmax=vmax)(norm), cax=cax,\n        label=label, extend='both')\n\n\ndef make_plot(ax, xys, angles, colors, label):\n    \"\"\"Plot the given xys, angles, and colors on the given axes.\"\"\"\n    collection = get_collection(xys, angles, colors)\n    ax.add_collection(collection)\n    ax.set_title(label)\n    ax.set_xlim(-1.1, 1.1)\n    ax.set_ylim(-1.1, 1.1)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n\ndef make_image(ax, xys, angles, colors, label):\n    \"\"\"Plot the given xys, angles, and colors on the given axes.\"\"\"\n    collection = get_collection(xys, angles, colors)\n    ax.imshow(collection.get_offsets(), extent=(-1, 1, -1, 1),\n              interpolation='bicubic')\n    ax.set_title(label)\n    ax.set_xlim(-1.1, 1.1)\n    ax.set_ylim(-1.1, 1.1)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(7, 7))\nfig.subplots_adjust(hspace=0.2)\n\n# teenagers\nxys_teenagers = np.array([\n    [0.4, 0.4], [0.4, 0.6], [0.6, 0.6], [0.6, 0.4], [0.4, 0.4]])\nangles_teenagers = np.array([0, 0, 0, 0, 0])\ncolors_teenagers = np.array([[0.8, 0.8, 0.8, 1.0]] * len(xys_teenagers))\n\n# children\nxys_children = np.array([\n    [0.4, 0.4], [0.4, 0.6], [0.6, 0.6], [0.6, 0.4], [0.4, 0.4]])\nangles_children = np.array([0, 0, 0, 0, 0])\ncolors_children = np.array([[0.8, 0.8, 0.8, 1.0]] * len(xys_children))\n\n# adults\nxys_adults = np.array([\n    [0.4, 0.4], [0.4, 0.6], [0.6, 0.6], [0.6, 0.4], [0.4, 0.4]])\nangles_adults = np.array([0, 0, 0, 0, 0])\ncolors_adults = np.array([[0.8, 0.8, 0.8, 1.0]] * len(xys_adults))\n\n# teenagers\nmake_plot(axs[0, 0], xys_teenagers, angles_teenagers, colors_teenagers, 'Teenagers')\n# children\nmake_plot(axs[0, 1], xys_children, angles_children, colors_children, 'Children')\n# adults\nmake_plot(axs[1, 0], xys_adults, angles_adults, colors_adults, 'Adults')\n\n# teenagers\nmake_image(axs[1, 1], xys_teenagers, angles_teenagers, colors_teenagers, 'Teenagers')\n# children\nmake_image(axs[1, 1], xys_children, angles_children, colors_children, 'Children')\n# adults\nmake_image(axs[1, 1], xys_adults, angles_adults, colors_adults, 'Adults')\n\n# teenagers\nnorm_teenagers = colors.LogNorm(vmin=0.001, vmax=1000)\ncolorbar_teenagers = get_colorbar(axs[0, 0], norm_teenagers, 0.001, 1000, 'Average Norm of Difference Vectors')\n# children\nnorm_children = colors.LogNorm(vmin=0.001, vmax=1000)\ncolorbar_children = get_colorbar(axs[0, 1], norm_children, 0.001, 1000, 'Average Norm of Difference Vectors')\n# adults\nnorm_adults = colors.LogNorm(vmin=0.001, vmax=1000)\ncolorbar_adults = get_colorbar(axs[1, 0], norm_adults, 0.001, 1000, 'Average Norm of Difference Vectors')\n\n# teenagers\nmake_image(axs[1, 1], xys_teenagers, angles_teenagers, colors_teenagers, 'Teenagers')\n# children\nmake_image(axs[1, 1], xys_children, angles_children, colors_children, 'Children')\n# adults\nmake_image(axs[1, 1], xys_adults, angles_adults, colors_adults, 'Adults')\n\n# teenagers\ncolorbar_teenagers.set_label('Average Norm of Difference Vectors')\n# children\ncolorbar_children.set_label('Average Norm of Difference Vectors')\n# adults\ncolorbar_adults.set_label('Average Norm of Difference Vectors')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.arange(128)\ny = x * 0.5 + np.random.normal(size=x.shape)\n\nfig, ax = plt.subplots()\nax.plot(x, y, 'o')\nax.plot(x, y, 'o', alpha=0.5)\nax.grid(True)\nax.set_xlabel('HC_first (before aging)')\nax.set_ylabel('HC_first (after aging)')\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute the bivariate normal distribution\nn = 1000\nr = 0.5\nx, y = np.random.multivariate_normal([0, 0], [[1, r], [r, 1]], n).T\ny += x  # y=x (simulated error)\n\n# Compute the correlation coefficient and the linear regression parameters\nslope, intercept, r_val, _, _ = np.polyfit(x, y, 1)\n\n# Plot the results\nfig, axs = plt.subplots(3, 2, figsize=(9, 8), sharex=True)\naxs[0, 0].hist(x, bins=20, alpha=0.5, color=\"C0\")\naxs[0, 1].hist(y, bins=20, alpha=0.5, color=\"C1\")\naxs[1, 0].scatter(x, y)\naxs[1, 1].scatter(x, y)\naxs[1, 1].plot(x, slope * x + intercept, \"r\")\naxs[2, 0].scatter(x, r_val * y)\naxs[2, 1].scatter(x, y)\naxs[2, 1].plot(x, slope * y + intercept, \"r\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(4)\ny1 = np.sin(x * (2.0 / 3.0))\ny2 = np.cos(x * (2.0 / 3.0))\n\nfig, ax = plt.subplots()\nax.bar(x, y1, color='C0')\nax.plot(x, y2, 'o--', color='C1')\n\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# add legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Sum (SRCC + PLCC)',\n                              markerfacecolor='C1', markersize=15),\n                   plt.Line2D([0], [0], color='C0', label='SRCC', linewidth=3)]\nax.legend(handles=legend_elements)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.colors import Normalize\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute data\nN = 100\nX = np.random.rand(N)\nY = np.random.rand(N)\nZ = np.sqrt(X**2 + Y**2) / 5\ncmap = cm.get_cmap('PRGn', 8)\nnorm = Normalize(vmin=Z.min(), vmax=Z.max())\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(9, 9))\n\nfor ax in axs.flat:\n    ax.streamplot(X, Y, X, Y, color=X, linewidth=2, cmap=cmap, norm=norm)\n    p = ax.scatter(X, Y, c=Z, cmap=cmap, norm=norm)\n    ax.set_title(f'{N} points')\n\nfig.colorbar(p, ax=axs.flat[0])\nfig.colorbar(p, ax=axs.flat[1])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cycler\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nN = 100\nr = np.linspace(0.0, 3.0, N)\ntheta = 2.0 * np.pi * r\nax.plot(theta, r)\nax.set_rmax(7.5)\nax.set_rticks([0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5])\nax.set_rlabel_position(-22.5)\nax.grid(True)\nax.set_title(\"Compact Spiral with Elliptical Hollow Center\",\n             va='bottom')\n\n# Use a different color cycle for the lines\ncmap = plt.cm.get_cmap('tab20c')\nax.plot(theta, r, color=cmap(0))\nax.plot(theta, r, color=cmap(1))\n\n# Use a different color cycle for the grid\ngrid_cmap = plt.cm.get_cmap('tab20')\nax.grid(color=grid_cmap(0))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute areas and perimeters of random shapes\nn = 100\nx = np.random.rand(n)\ny = np.random.rand(n)\narea = x * y\nperimeter = np.sqrt(4 * np.pi * area)\n\nfig, ax = plt.subplots()\nax.plot(area, perimeter, 'o')\nax.set_xscale('log')\nax.set_yscale('log')\nax.grid(True)\nax.set_xlabel('Flops/byte')\nax.set_ylabel('Flops/s')\nax.set_title('DAXPY memory bandwidth')\n\n# Draw a line at the peak performance\nax.plot([1e-1, 1e1], [1e12, 1e12], 'k--', label='peak')\n# Draw a line at the DAXPY memory bandwidth\nax.plot([1e-1, 1e1], [1e11, 1e11], 'k:', label='DAXPY memory bandwidth')\n# Draw a line at the performance without FMA\nax.plot([1e-1, 1e1], [1e12, 1e12], 'k-', label='w/o FMA')\n# Draw a line at the performance without vectorization\nax.plot([1e-1, 1e1], [1e11, 1e11], 'k-', label='w/o vectorization')\n\n# Draw a shaded area for the performance range\nax.fill_between([1e-1, 1e1], [1e11, 1e11], [1e12, 1e12], color='lightblue', alpha=0.5)\n\n# Add a legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(10)\ny = x + 2 * np.random.randn(10)\n\n# example data\nx = np.arange(10)\ny = x + 2 * np.random.randn(10)\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=0.5, fmt='-o')\nax.set_title('Using default parameters')\nplt.show()\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=0.5, fmt='o', ecolor='r', capsize=3)\nax.set_title('Red error bars, capsize=3')\nplt.show()\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=0.5, fmt='o', errorevery=2)\nax.set_title('Every other error bar')\nplt.show()\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=0.5, fmt='o', errorevery=[1, 4])\nax.set_title('Every first and fourth error bar')\nplt.show()\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\nax1.errorbar(x, y, yerr=0.5, fmt='o', errorevery=2)\nax1.set_title('Sharing y axis')\nax2.errorbar(x, y+2, yerr=0.5, fmt='o', errorevery=2)\nax2.set_title('Sharing y axis')\nplt.show()\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=0.5, fmt='o', errorevery=2, capsize=3, c='r',\n           elinewidth=2, capthick=2)\nax.set_title('Red error bars, capsize=3, c=red, elinewidth=2, capthick=2')\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Plot the first circle\nax.add_patch(plt.Circle((0.5, 0.5), 0.25, fill=True, color='pink'))\nax.text(0.5, 0.5, '45', ha='center', va='center')\n\n# Plot the second circle\nax.add_patch(plt.Circle((0.5, 0.5), 0.15, fill=True, color='orange'))\nax.text(0.5, 0.5, '24', ha='center', va='center')\n\n# Plot the third circle\nax.add_patch(plt.Circle((0.5, 0.5), 0.1, fill=True, color='green'))\nax.text(0.5, 0.5, '8', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('ChatRepair')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 20\nwidth = 0.15\nranks = [1, 2, 3, 4, 5]\n\nfig, ax = plt.subplots()\nax.set_title('Qwen-VL-Max')\n\n# the bar with errorbars\np1 = ax.bar(np.arange(N), [19, 20, 21, 22, 23], width, yerr=[0, 0, 0, 0, 0], label='Level 1')\np2 = ax.bar(np.arange(N) + width, [17, 18, 19, 20, 21], width, yerr=[0, 0, 0, 0, 0], label='Level 2')\np3 = ax.bar(np.arange(N) + width * 2, [15, 16, 17, 18, 19], width, yerr=[0, 0, 0, 0, 0], label='Level 3')\np4 = ax.bar(np.arange(N) + width * 3, [13, 14, 15, 16, 17], width, yerr=[0, 0, 0, 0, 0], label='Level 4')\np5 = ax.bar(np.arange(N) + width * 4, [11, 12, 13, 14, 15], width, yerr=[0, 0, 0, 0, 0], label='Level 5')\n\n# the bar without errorbars\np6 = ax.bar(np.arange(N) - width, [18, 19, 20, 21, 22], width, label='Gemini Pro-CoT')\np7 = ax.bar(np.arange(N) - width, [16, 17, 18, 19, 20], width, label='GPT4V-CoT')\np8 = ax.bar(np.arange(N) - width, [14, 15, 16, 17, 18], width, label='Gemini Pro')\n\n# annotate the bars\nfor p, r in zip([p1, p2, p3, p4, p5, p6, p7, p8], ranks):\n    for i in range(len(p)):\n        ax.annotate(r[i], (i - width / 2, p[i].get_height() + 1))\n\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\ns_values = [19, 50, 76, 142, 232]\ncolors = plt.cm.viridis(np.linspace(0.2, 0.9, len(s_values)))\n\nfig, axs = plt.subplots(1, 2, sharey=True, figsize=(9, 4))\n\nfor ax, s, c in zip(axs, s_values, colors):\n    A = np.random.randn(100, 100)\n    A_s = np.random.randn(s, 100)\n    A_ = np.dot(A_s, A_s.T)\n    A_ = A_ / np.linalg.norm(A_, 'fro')\n\n    # Approximation error\n    m = np.arange(1, 100)\n    err = np.linalg.norm(A - A_, 'fro') / np.linalg.norm(A, 'fro')\n    ax.loglog(m, err, '-o', color=c, label=r'$s={}$'.format(s))\n    ax.set_xlabel('number of matvecs $m$')\n    ax.set_ylabel('approximation error: $\\|A - \\tilde{A}\\|_F$')\n\n    # Sparse recovery error\n    err = np.linalg.norm(A_s @ A_ - A_s, 'fro') / np.linalg.norm(A_s, 'fro')\n    ax.loglog(m, err, '-o', color=c, alpha=0.5)\n    ax.set_xlim(1, 100)\n    ax.set_ylim(1e-6, 1)\n    ax.set_title('sparse recovery error: $\\|\\hat{s}_\\alpha A - \\tilde{A}\\|_F$')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(111, polar=True)\nr = [360, 240, 120, 90, 60]\nlabels = ['Retrieve.KV', 'En.Sum', 'En.QA', 'Retrieve.Number', 'Retrieve.PassKey']\ncolors = ['lightgreen', 'lightblue', 'lightcoral', 'yellow', 'lightgreen']\nax.pie(r, labels=labels, colors=colors)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 12\nX = np.linspace(-3, 3, N)\nY = np.linspace(-3, 3, N * 2)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X ** 2 + Y ** 2)\nZ = np.sin(R)\n\nfig, ax = plt.subplots()\ncset1 = ax.contourf(X, Y, Z, 8, cmap=cm.coolwarm)\ncset2 = ax.contour(X, Y, Z, colors='black', linewidths=2)\nax.clabel(cset2, inline=True, fontsize=10)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 20\nx = np.linspace(0.1, 2 * np.pi, N)\ny1 = np.sin(x)\ny2 = np.exp(-x)\n\nfig, ax = plt.subplots()\nax.errorbar(x, y1, yerr=0.4, fmt='-o')\nax.errorbar(x, y2, yerr=0.4, fmt='o', capsize=3, linestyle='')\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Data for player A and B\nplayer_A = [28, 20, 10, 22, 28]\nplayer_B = [35, 26, 20, 25, 30]\n\n# Plot data\nax.plot(player_A, marker='o', label='Player A')\nax.plot(player_B, marker='s', label='Player B')\n\n# Add legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 100\nr0 = 2.5\n\nx = y = np.linspace(-3, 3, N)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nQ = Z1 - Z2\n\nlevels = np.arange(-0.2, 1.2, 0.2)\ncmap = cm.get_cmap('hot')\n\nfig, ax = plt.subplots()\ncs = ax.contourf(X, Y, Q, levels=levels, cmap=cmap)\nax.set_title(\"Contour plot with levels\")\nplt.colorbar(cs, ax=ax, label=\"Time\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlabels = 'Female Player', 'Male Player', 'LLM Player', 'Person Player'\ntrustee_scenario = ('Trustee Scenario', 'Trustee Scenario')\nscores = [6.6, 7.8, 7.0, 7.2]\ntrustee_scores = [6.0, 7.5, 7.0, 6.9]\n\n# plot the bar chart\nfig, ax = plt.subplots()\nax.barh(trustee_scenario, scores, label='gpt-3.5-turbo-0613', color='lightblue')\nax.barh(trustee_scenario, trustee_scores, label='gpt-3.5-turbo-instruct', color='lightcoral')\nax.barh(trustee_scenario, scores, left=trustee_scores, label='gpt-4', color='lightgreen')\nax.barh(trustee_scenario, scores, left=[trustee_score + gpt_score for trustee_score, gpt_score in zip(trustee_scores, scores)], label='llama-2-13b', color='lightcyan')\nax.barh(trustee_scenario, scores, left=[trustee_score + gpt_score + llama_score for trustee_score, gpt_score, llama_score in zip(trustee_scores, scores, trustee_scores)], label='llama-2-70b', color='lightseagreen')\n\n# add labels and title\nax.set_xlabel('Average Amount Sent ($)')\nax.set_title('Player Performance by Trustee Scenario')\n\n# add legend\nax.legend()\n\n# add grid\nax.grid(True)\n\n# add horizontal lines\nfor i in range(4):\n    ax.axhline(i, color='gray', linestyle='--')\n\n# add vertical lines\nfor i in range(4):\n    ax.axvline(i, color='gray', linestyle='--')\n\n# add text annotations\nfor i in range(4):\n    ax.text(i, i, f'{scores[i]:.1f}', ha='center', va='center')\n\n# add text annotations for trustee scenario\nfor i in range(4):\n    ax.text(i, i - 0.5, f'{trustee_scores[i]:.1f}', ha='center', va='center')\n\n# add text annotations for gpt-3.5-turbo-0613\nfor i in range(4):\n    ax.text(i, i - 0.5, f'{scores[i]:.1f}', ha='center', va='center')\n\n# add text annotations for gpt-3.5-turbo-instruct\nfor i in range(4):\n    ax.text(i, i - 0.5, f'{trustee_scores[i]:.1f}', ha='center', va='center')\n\n# add text annotations for gpt-4\nfor i in range(4):\n    ax.text(i, i - 0.5, f'{scores[i]:.1f}', ha='center', va='center')\n\n# add text annotations for llama-2-13b\nfor i in range(4):\n    ax.text(i, i - 0.5, f'{trustee_scores[i] + scores[i]:.1f}', ha='center', va='center')\n\n# add text annotations for llama-2-70b\nfor i in range(4):\n    ax.text(i, i - 0.5, f'{trustee_scores[i] + scores[i] + llama_scores[i]:.1f}', ha='center', va='center')\n\n# set the x-axis limits\nax.set_xlim([0, 8])\n\n# set the y-axis limits\nax.set_ylim([-0.5, 3.5])\n\n# set the x-axis tick labels\nax.set_xticks(range(4))\nax.set_xticklabels(labels)\n\n# set the y-axis tick labels\nax.set_yticks(range(4))\nax.set_yticklabels(trustee_scenario)\n\n# set the figure size\nplt.figure(figsize=(10.0, 5.0))\n\n# show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# Data\nx = np.arange(4)\ny1 = [2, 3, 4, 5]\ny2 = [1, 2, 3, 4]\n\n# Plot\nax.bar(x, y1, label='Running')\nax.bar(x, y2, bottom=y1, label='Interrupted')\n\n# Annotate\nax.annotate('Race interrupted due to weather',\n            xy=(0.5, 2.5), xytext=(0.5, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            horizontalalignment='center', verticalalignment='center')\n\n# Ticks and labels\nax.set_xticks(x + 0.4)\nax.set_xticklabels(('Athlete Jim', 'Athlete Bill'))\nax.legend(loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\ncontrol = np.random.normal(loc=0.0, scale=1.0, size=200)\ntreatment1 = np.random.normal(loc=0.5, scale=1.0, size=200)\ntreatment2 = np.random.normal(loc=-0.5, scale=1.0, size=200)\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True, figsize=(6, 6))\n\nax0.boxplot([control, treatment1, treatment2])\nax0.set_title('Comparative Distribution of Three Different Groups')\nax0.set_ylabel('Value Range')\n\nax1.hist([control, treatment1, treatment2], bins=20, stacked=True)\nax1.set_ylabel('Number of Observations')\n\nax2.hist([control, treatment1, treatment2], bins=20, stacked=False)\nax2.set_xlabel('Number of Observations')\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# data for the chart\nvalues = [350, -150, 200, 75, 50, 25, -300]\nlabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\noffsets = np.arange(len(values))\nwidth = 0.35\n\n# plot the chart\nax.barh(labels, values, height=width, align='center')\nax.set_yticks(np.arange(len(labels)))\nax.set_yticklabels(labels)\n\n# add the offset values\nfor i, v in enumerate(values):\n    ax.text(v + offsets[i], i, str(v), va='bottom')\n\n# add the total values\nfor i, v in enumerate(values):\n    ax.text(v + offsets[i] + width / 2, i, str(v), va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.tri import Triangulation\n\n\ndef get_triangulation():\n    \"\"\"\n    Create the Delaunay triangulation of the unit square with a hole in it.\n    \"\"\"\n    # First create the \"oblate\" shape\n    x = np.linspace(0., 2., 10)\n    y = np.linspace(0., 1., 10)\n    X, Y = np.meshgrid(x, y)\n    R = np.sqrt(X ** 2 + Y ** 2)\n    mask = (R - 0.5) / 0.3 < 1.0\n    X[mask] = 1.0\n    Y[mask] = 0.0\n\n    # Then create the \"annulus\" shape\n    R = np.sqrt((X - 0.5) ** 2 + (Y - 0.5) ** 2)\n    mask = (R - 0.4) / 0.1 < 1.0\n    X[mask] = 1.0\n    Y[mask] = 0.0\n\n    # Create the Delaunay triangulation\n    tri = Triangulation(X, Y)\n\n    return tri\n\n\ndef get_data(triangulation):\n    \"\"\"\n    Get the data associated with the triangulation.  Here, the barycenter\n    of each triangle is used as the value associated with the triangle.\n    \"\"\"\n    x = triangulation.x\n    y = triangulation.y\n    triangles = triangulation.triangles\n    values = np.zeros(triangles.shape[0])\n    for i, triangle in enumerate(triangles):\n        values[i] = (x[triangle[0]] + x[triangle[1]] + x[triangle[2]]) / 3.0\n    return values\n\n\ndef plot_triangulation(triangulation, values=None, ax=None, **kwargs):\n    \"\"\"\n    Plot the Delaunay triangulation with flat shading.  The `values` are\n    used to colorize the triangles.  If `values` is None, then the barycenter\n    of each triangle is used instead.\n    \"\"\"\n    if ax is None:\n        _, ax = plt.subplots()\n\n    # Create the Triangulation; no triangles specified so Delaunay triangulation\n    # is created.\n    triangulation = Triangulation(triangulation.x, triangulation.y)\n\n    # Mask off any data outside the domain [0:.99, 0:.99]\n    mask = np.ma.masked_outside(triangulation.x, 0, 1)\n    triangulation.set_mask(mask)\n\n    # Create the Triangulation; no triangles specified so Delaunay triangulation\n    # is created.\n    if values is None:\n        values = get_data(triangulation)\n\n    # Mask off any data outside the domain [-.05,.95][-.05,.95]\n    mask = np.ma.masked_outside(values, -0.05, 1.05)\n    values = np.ma.array(values, mask=mask)\n\n    # Create the Triangulation; no triangles specified so Delaunay triangulation\n    # is created.\n    triangulation = Triangulation(triangulation.x, triangulation.y)\n\n    # Mask off any data outside the domain [-.05,.95][-.05,.95]\n    mask = np.ma.masked_outside(triangulation.x, -0.05, 1.05)\n    triangulation.set_mask(mask)\n\n    # Plot the triangulation\n    ax.tricontourf(triangulation, values, **kwargs)\n\n    # Set the limits\n    ax.set_xlim(-.05, 1.05)\n    ax.set_ylim(-.05, 1.05)\n\n\nif __name__ == '__main__':\n    fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(9, 9))\n\n    triangulation = get_triangulation()\n    plot_triangulation(triangulation, ax=axs[0, 0], cmap='viridis')\n    plot_triangulation(triangulation, ax=axs[0, 1], cmap='plasma')\n    plot_triangulation(triangulation, ax=axs[1, 0], cmap='inferno')\n    plot_triangulation(triangulation, ax=axs[1, 1], cmap='magma')\n\n    plt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors\nfrom matplotlib.image import NonUniformImage\n\ndef get_image():\n    data = np.sin(np.arange(-4, 4, 0.1)[:, None] ** 2)\n    return data\n\ndata = get_image()\nxcenters = np.array([-3, -1, 1, 3])\nycenters = np.array([-2, 0, 2])\nX, Y = np.meshgrid(xcenters, ycenters)\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(9, 6))\n\n# nearest neighbor interpolation\nim = NonUniformImage(axs[0, 0], interpolation='nearest')\nim.set_data(X, Y, data)\nim.draw(axs[0, 0])\n\n# bilinear interpolation\nim = NonUniformImage(axs[0, 1], interpolation='bilinear')\nim.set_data(X, Y, data)\nim.draw(axs[0, 1])\n\n# bicubic interpolation\nim = NonUniformImage(axs[1, 0], interpolation='bicubic')\nim.set_data(X, Y, data)\nim.draw(axs[1, 0])\n\n# nearest neighbor interpolation with a mask\nmask = np.zeros_like(data, dtype=bool)\nmask[1, 1] = True\nim = NonUniformImage(axs[1, 1], interpolation='nearest', mask=mask)\nim.set_data(X, Y, data)\nim.draw(axs[1, 1])\n\nplt.suptitle('NonUniformImage class')\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 9\nmenMeans = (20, 35, 30, 35, 27)\nmenStd = (2, 3, 4, 1, 2)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, menMeans, width, yerr=menStd)\n\nwomenMeans = (25, 32, 34, 20, 25)\nwomenStd = (3, 5, 2, 3, 3)\nrects2 = ax.bar(ind + width, womenMeans, width, yerr=womenStd)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import patches\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# example data\nx = np.arange(30)\ny = np.sin(x / 2) + x / 30 + np.random.randn(len(x)) / 10\n\nfig, ax = plt.subplots()\n\n# plot the data\nax.plot(x, y, 'o', color='black')\n\n# plot the prediction ellipses\nfor i in range(5):\n    ax.add_patch(\n        patches.Ellipse((x[i], y[i]),\n                        0.4 * (i + 1),\n                        0.4 * (i + 1),\n                        angle=30,\n                        facecolor='white',\n                        edgecolor='black',\n                        alpha=0.5))\n\n# plot the Monte Carlo simulation\nax.plot(x, y, 'r', label='Monte Carlo')\nax.legend()\n\n# plot the mean-Taylor approximation\nax.plot(x, y, 'b.', label='Mean-Taylor')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors\n\nN = 100\nr = 0.85\n\nx = np.zeros(N)\ny = np.zeros(N)\n\ntheta = np.linspace(0, 2 * np.pi, N, endpoint=False)\nfor n in range(1, N):\n    r_n = r * r_n\n    x[n] = r_n * np.cos(theta[n])\n    y[n] = r_n * np.sin(theta[n])\n\nfig, ax = plt.subplots()\nax.plot(x, y, 'o', color=colors.to_rgba('blue', 0.2))\nax.set_aspect('equal')\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\nX = np.linspace(0, 2, 100)\nY = np.linspace(0, 2, 100)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.sqrt(np.abs(X))\nZ2 = np.sin(Y**3)*np.cos(X)\nZ = (Z1 - Z2)**2\n\nim = ax.imshow(Z, interpolation='bicubic', cmap='hot')\n\nax.set_title('imshow of array data')\nax.set_xlabel(r'$\\alpha$')\nax.set_ylabel(r'$\\beta$')\n\n# We want to show all ticks...\nax.set_xticks(np.arange(Z.shape[0]))\nax.set_yticks(np.arange(Z.shape[1]))\n# ... and label them with the respective list entries.\nax.set_xticklabels(('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'))\nax.set_yticklabels(('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten'))\n\n# Show colorbar\ncbar = fig.colorbar(im)\ncbar.set_label(r'$\\Delta t$')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# example data\nmu = 100  # mean of distribution\nsigma = 15  # standard deviation of distribution\nx = mu + sigma * np.random.randn(10000)\nnum_bins = 50\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\nax1.hist(x, num_bins, density=True)\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (x - mu))**2))\nax1.plot(x, y, 'k', linewidth=2.0)\nax1.set_xlabel('Users(U)')\nax1.set_ylabel('Utility(f)')\nax1.set_title('Utility distribution per topic')\n\n# Compute the empirical cumulative distribution function\nn, bins, patches = ax2.hist(x, num_bins, density=True)\nax2.plot(bins, 1 - 1/n.cumsum(), 'k--', linewidth=1.0)\nax2.set_xlabel('Items(C)')\nax2.set_ylabel('Users(U)')\nax2.set_title('User preference matrix (M)')\nax2.yaxis.set_label_position(\"right\")\nax2.yaxis.tick_right()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, axs = plt.subplots(nrows=3, figsize=(6, 6))\n\naxs[0].set_title('Memory-2 mutants payoff')\naxs[0].scatter(np.random.uniform(-1, 3, 5), np.random.uniform(-1, 3, 5))\naxs[0].plot([-1, 3], [-1, 3])\naxs[0].text(0.1, 0.9, 'num. of points = 5', transform=axs[0].transAxes, va='top')\n\naxs[1].set_title('Reactive-2 mutants payoff')\naxs[1].scatter(np.random.uniform(-2, 4, 3), np.random.uniform(-2, 4, 3))\naxs[1].plot([-2, 4], [-2, 4])\naxs[1].text(0.1, 0.9, 'num. of points = 3', transform=axs[1].transAxes, va='top')\n\naxs[2].set_title('Self-reactive-2 mutants payoff')\naxs[2].scatter(np.random.uniform(-2, 4, 3), np.random.uniform(-2, 4, 3))\naxs[2].plot([-2, 4], [-2, 4])\naxs[2].text(0.1, 0.9, 'num. of points = 3', transform=axs[2].transAxes, va='top')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nall_data = [np.random.normal(0, std, 100) for std in range(6, 10)]\n\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, sharey=True)\n\nax1.set_title('Model = Vicuna')\nax1.boxplot(all_data)\nax1.set_xlabel('Models')\nax1.set_ylabel('Perplexity Reduction')\n\nax2.set_title('Model = Alpaca')\nax2.boxplot(all_data)\nax2.set_xlabel('Models')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.randn(40)\ny = np.random.randn(40)\nc = np.sqrt(x**2 + y**2)\n\nfig, ax = plt.subplots()\nax.scatter(x, y, c=c, s=100, cmap='viridis', alpha=0.75)\nax.set_title('Colorbar with limits')\n\n# add colorbar\ncbar = fig.colorbar(ax.scatter(x, y, c=c, s=100, cmap='viridis', alpha=0.75))\ncbar.set_label('Colorbar label')\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import patches\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# example data\nx = np.arange(100)\ny = np.sin(x / 20.0) * np.exp(-x / 5.0)\ny += np.random.normal(size=x.shape)\n\nfig, ax = plt.subplots()\nax.plot(x, y, 'o', color='black')\nax.set_title('Exponential Scale')\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax2 = ax.twinx()\n\n# now provide two different scales for the axes\nax2.set_yscale(\"log\", nonposy='clip')\nax2.plot(x, np.exp(y), 'r^')\nax2.set_ylabel('Exponential Scale', color='r')\nax2.tick_params('y', colors='r')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax2.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the top of the current axes without breaking the\n# x-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax3 = ax.twiny()\nax3.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax3.set_xlabel('Gradient Steps (x 62.5K)')\nax3.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax3.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax3.xaxis.set_label_position('top')\nax3.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax4 = ax.twinx()\nax4.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax4.set_ylabel('Exponential Scale', color='g')\nax4.tick_params('y', colors='g')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax4.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax5 = ax.twinx()\nax5.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax5.set_xlabel('Gradient Steps (x 62.5K)')\nax5.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax5.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax5.xaxis.set_label_position('top')\nax5.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax6 = ax.twinx()\nax6.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax6.set_ylabel('Exponential Scale', color='b')\nax6.tick_params('y', colors='b')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax6.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax7 = ax.twinx()\nax7.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax7.set_xlabel('Gradient Steps (x 62.5K)')\nax7.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax7.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax7.xaxis.set_label_position('top')\nax7.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax8 = ax.twinx()\nax8.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax8.set_ylabel('Exponential Scale', color='m')\nax8.tick_params('y', colors='m')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax8.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax9 = ax.twinx()\nax9.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax9.set_xlabel('Gradient Steps (x 62.5K)')\nax9.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax9.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax9.xaxis.set_label_position('top')\nax9.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax10 = ax.twinx()\nax10.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax10.set_ylabel('Exponential Scale', color='c')\nax10.tick_params('y', colors='c')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax10.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax11 = ax.twinx()\nax11.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax11.set_xlabel('Gradient Steps (x 62.5K)')\nax11.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax11.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax11.xaxis.set_label_position('top')\nax11.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax12 = ax.twinx()\nax12.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax12.set_ylabel('Exponential Scale', color='y')\nax12.tick_params('y', colors='y')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax12.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax13 = ax.twinx()\nax13.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax13.set_xlabel('Gradient Steps (x 62.5K)')\nax13.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax13.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax13.xaxis.set_label_position('top')\nax13.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax14 = ax.twinx()\nax14.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax14.set_ylabel('Exponential Scale', color='k')\nax14.tick_params('y', colors='k')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax14.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax15 = ax.twinx()\nax15.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax15.set_xlabel('Gradient Steps (x 62.5K)')\nax15.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax15.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax15.xaxis.set_label_position('top')\nax15.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax16 = ax.twinx()\nax16.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax16.set_ylabel('Exponential Scale', color='w')\nax16.tick_params('y', colors='w')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax16.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax17 = ax.twinx()\nax17.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax17.set_xlabel('Gradient Steps (x 62.5K)')\nax17.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax17.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax17.xaxis.set_label_position('top')\nax17.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax18 = ax.twinx()\nax18.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax18.set_ylabel('Exponential Scale', color='gray')\nax18.tick_params('y', colors='gray')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax18.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax19 = ax.twinx()\nax19.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax19.set_xlabel('Gradient Steps (x 62.5K)')\nax19.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax19.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax19.xaxis.set_label_position('top')\nax19.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax20 = ax.twinx()\nax20.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax20.set_ylabel('Exponential Scale', color='gray')\nax20.tick_params('y', colors='gray')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax20.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax21 = ax.twinx()\nax21.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax21.set_xlabel('Gradient Steps (x 62.5K)')\nax21.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax21.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax21.xaxis.set_label_position('top')\nax21.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax22 = ax.twinx()\nax22.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax22.set_ylabel('Exponential Scale', color='gray')\nax22.tick_params('y', colors='gray')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax22.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax23 = ax.twinx()\nax23.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax23.set_xlabel('Gradient Steps (x 62.5K)')\nax23.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax23.set_xticklabels(['25', '50', '75', '100', '125', '150', '175', '200'])\nax23.xaxis.set_label_position('top')\nax23.xaxis.set_ticks_position('top')\n\n# create a new axis on the bottom of the current axes without breaking the\n# y-axis.  The position of the axes are determined with coordinates in\n# figure inches.\nax24 = ax.twinx()\nax24.set_ylim(ax.get_ylim())  # make sure both y-axes have the same range\nax24.set_ylabel('Exponential Scale', color='gray')\nax24.tick_params('y', colors='gray')\n\n# we need to make sure that the minor ticks are at the right positions\n# also, make sure that the minor tick locations don't change if the axis\n# limits are changed.\nax24.yaxis.set_minor_locator(patches.LogLocator(base=10, numticks=10))\n\n# create a new axis on the right side of ax.  The position of the axes are\n# determined with coordinates in figure inches.\nax25 = ax.twinx()\nax25.set_xlim(ax.get_xlim())  # make sure both x-axes have the same range\nax25.set_xlabel('Gradient Steps (x 62.5K)')\nax25.set_xticks([25, 50, 75, 100, 125, 150, 175, 200])\nax25.set_xticklabels(['25', '50', '75', '100', '125', '150',"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100\nsigma = 15\nx = mu + sigma * np.random.randn(10000)\n\nnum_bins = 50\n\nfig, ax = plt.subplots()\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=True)\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\nax.plot(bins, y, '--')\nax.set_xlabel('Smarts')\nax.set_ylabel('Probability density')\nax.set_title('Demonstration of norm.pdf with \\nMLE $\\mu$ and $\\sigma$')\n\n# Tweak spacing to prevent clipping of ylabel\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 1.1, 0.1)\ny1 = x ** 2\ny2 = x ** 3\n\nfig, ax = plt.subplots()\n\nax.plot(x, y1, 'o-')\nax.plot(x, y2, 'o-')\n\nax.set_title('Matplotlib plot with legend')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 200\nsigma = 25\nx = mu + sigma * np.random.randn(10000)\nnum_bins = 50\n\nfig, ax = plt.subplots()\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=True)\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\nax.plot(bins, y, '--')\nax.set_xlabel('Smarts')\nax.set_ylabel('Probability density')\nax.set_title('test')\n\n# Tweak spacing to prevent clipping of ylabel\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nwidths = 2 ** np.arange(6, 12)\ncos_200 = np.logspace(5, 15, num=4)\ncos_400 = np.logspace(5, 17, num=4)\nrelu_200 = np.logspace(3, 11, num=4)\nrelu_400 = np.logspace(3, 13, num=4)\n\nfig, ax = plt.subplots()\nax.loglog(widths, cos_200, 'o-', markersize=10, label=r'$\\cos | n0 = 200$')\nax.loglog(widths, cos_400, 'x-', markersize=10, label=r'$\\cos | n0 = 400$')\nax.loglog(widths, relu_200, '^--', markersize=10, label=r'$ReLU | n0 = 200$')\nax.loglog(widths, relu_400, '+-.', markersize=10, label=r'$ReLU | n0 = 400$')\n\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\nax.legend()\n\n# Insert a zoomed inset\naxins = ax.inset_axes([0.6, 0.6, 0.3, 0.3])\naxins.loglog(widths, cos_200, 'o-', markersize=10, label=r'$\\cos | n0 = 200$')\naxins.loglog(widths, cos_400, 'x-', markersize=10, label=r'$\\cos | n0 = 400$')\naxins.loglog(widths, relu_200, '^--', markersize=10, label=r'$ReLU | n0 = 200$')\naxins.loglog(widths, relu_400, '+-.', markersize=10, label=r'$ReLU | n0 = 400$')\n\naxins.set_xlim(2**6, 2**11)\naxins.set_ylim(2**3, 2**13)\naxins.set_xlabel('Width of Layer')\naxins.set_ylabel('Empirical Lipschitz Constant')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nN = 10000\nt = np.arange(N)\nr = np.random.randn(N)\nr[::3] += 10\nr[::4] -= 5\n\nax.plot(t, r)\nax.set_title('Use of :math:`r_{i}` in the legend')\nax.legend(['$r_{i}$'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nt = np.arange(0, 200, 1)\nnse = np.random.randn(len(t))\nr = np.exp(-t / 0.05)\n\nnse = r * nse\n\nfig, ax = plt.subplots()\nax.plot(t, nse, color='k', alpha=0.3)\nax.plot(t, 0.5 * r * nse, color='k', alpha=0.3)\nax.plot(t, 0.25 * r * nse, color='k', alpha=0.3)\n\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted cumulative reward')\nax.legend(['WI', 'ISQ'])\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.datasets import make_classification\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nX, y = make_classification(n_samples=200, n_features=2,\n                           n_redundant=0, n_informative=2,\n                           n_clusters_per_class=1, flip_y=0,\n                           class_sep=1.0, random_state=19680801)\n\n# Project the data into two dimensions using PCA\npca = PCA(n_components=2)\nX_projected = pca.fit_transform(X)\n\n# Fit the logistic regression model\nlogistic = LogisticRegression()\nlogistic.fit(X_projected, y)\n\n# Compute the decision function\nscores = logistic.decision_function(X_projected)\n\n# Compute the decision boundary\nx_min, x_max = X_projected[:, 0].min() - .5, X_projected[:, 0].max() + .5\ny_min, y_max = X_projected[:, 1].min() - .5, X_projected[:, 1].max() + .5\nxx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),\n                     np.linspace(y_min, y_max, 100))\nZ = logistic.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\nCS = plt.contourf(xx, yy, Z, cmap=plt.cm.Paired)\n\n# Plot the training points\nplt.scatter(X_projected[:, 0], X_projected[:, 1], c=y, s=40, cmap=plt.cm.Paired)\nplt.axis('tight')\n\n# Plot the decision boundary\nplt.contourf(xx, yy, Z, colors=['#aaaaaa', '#333333'])\n\n# Plot the principal components\nU, S, V = np.linalg.svd(X_projected - X_projected.mean(axis=0))\nplt.plot([0, U[0, 0]], [0, U[1, 0]], color='black')\nplt.plot([0, U[0, 1]], [0, U[1, 1]], color='black')\n\nplt.xlabel(\"Principal Component 1\")\nplt.ylabel(\"Principal Component 2\")\nplt.title(\"Logistic Regression with PCA\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.patches import Arrow\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.random.rand(2, 250)\ny = np.random.rand(2, 250)\n\nfig, ax = plt.subplots()\nax.scatter(x[0], x[1])\nax.scatter(y[0], y[1])\n\n# Draw an arrow from (0,0) to (1,0)\narrow = Arrow(0, 0, 1, 0, width=0.5, length_includes_head=True,\n              head_width=0.5, head_length=1, overhang=0.5,\n              length_unit='inches', color='black')\nax.add_patch(arrow)\n\n# Draw a rectangle around the first 50 points\nbbox = dict(boxstyle=\"square\", fc=\"0.8\")\nax.plot(x[0, :50], x[1, :50], \"gs\", label=\"Group 1\", **bbox)\nax.plot(y[0, :50], y[1, :50], \"ro\", label=\"Group 2\", **bbox)\n\n# Draw a rectangle around the first 50 points\nbbox = dict(boxstyle=\"square\", fc=\"0.8\")\nax.plot(x[0, :50], x[1, :50], \"gs\", label=\"Group 3\", **bbox)\nax.plot(y[0, :50], y[1, :50], \"ro\", label=\"Group 4\", **bbox)\n\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 5\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nr1 = ax.bar(ind, (20, 35, 30, 45, 40), width)\nr2 = ax.bar(ind + width, (30, 35, 30, 32, 20), width)\nr3 = ax.bar(ind, (30, 50, 40, 20, 10), width, bottom=[x+y for x, y in zip(r1._y, r2._y)])\nr4 = ax.bar(ind + width, (20, 60, 50, 30, 40), width, bottom=[x+y+z for x, y, z in zip(r1._y, r2._y, r3._y)])\n\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(r1)\nautolabel(r2)\nautolabel(r3)\nautolabel(r4)\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import patches\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# plot the data\nx = np.arange(4)\ny = [1, 2, 3, 4]\nax.plot(x, y, 'o', color='black')\n\n# create a patch and add it to the axes\np = patches.Patch(color='green', alpha=0.5, label='GT')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='blue', alpha=0.5, label='DRS')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='red', alpha=0.5, label='PR-based')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='gray', alpha=0.5, label='CR')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightgrey', alpha=0.5, label='RSA')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightgreen', alpha=0.5, label='time step')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='0')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='1')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='2')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='3')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='4')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='5')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='6')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='7')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='8')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='9')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='10')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='11')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='12')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='13')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='14')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='15')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='16')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='17')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='18')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='19')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='20')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='21')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='22')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='23')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='24')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='25')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='26')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='27')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='28')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='29')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='30')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='31')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='32')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='33')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='34')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='35')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='36')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='37')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='38')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='39')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='40')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='41')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='42')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='43')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='44')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='45')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='46')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='47')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='48')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='49')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='50')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='51')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='52')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='53')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='54')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='55')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='56')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='57')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='58')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='59')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='60')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='61')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='62')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='63')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='64')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='65')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='66')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='67')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='68')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='69')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='70')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='71')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='72')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='73')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='74')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='75')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='76')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='77')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='78')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='79')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='80')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='81')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='82')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='83')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='84')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='85')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='86')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='87')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='88')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='89')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='90')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='91')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='92')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='93')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='94')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='95')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='96')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='97')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='98')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='99')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='100')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5, label='101')\nax.add_patch(p)\n\n# create a patch and add it to the axes\np = patches.Patch(color='lightblue', alpha=0.5,"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# example data\nx = np.arange(80)\ny1 = np.sin(x / 20)\ny2 = np.cos(x / 20)\n\nax.fill_between(x, y1, y2, where=y1 >= y2, facecolor='red', alpha=.5)\nax.fill_between(x, y1, y2, where=y1 <= y2, facecolor='green', alpha=.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nn = np.arange(8)\ncontent = [1, 2, 5, 6, 7, 5, 3, 1]\norganization = [1, 4, 6, 2, 3, 5, 5, 2]\nlanguage = [7, 6, 2, 1, 4, 5, 3, 2]\n\nfig, ax = plt.subplots()\nax.stackplot(n, content, organization, language, labels=['Content', 'Organization', 'Language'])\nax.legend(loc='upper left')\nplt.title('Cumulative Performance Gain by Augmentation Level')\nplt.xlabel('n')\nplt.ylabel('Performance Gain (%)')\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nyears = np.arange(1950, 2015)\ndata = [1970, 3000, 3400, 3200, 3100, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200, 9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000, 10100, 10200, 10300, 10400, 10500, 10600, 10700, 10800, 10900, 11000, 11100, 11200, 11300, 11400, 11500, 11600, 11700, 11800, 11900, 12000, 12100, 12200, 12300, 12400, 12500, 12600, 12700, 12800, 12900, 13000, 13100, 13200, 13300, 13400, 13500, 13600, 13700, 13800, 13900, 14000, 14100, 14200, 14300, 14400, 14500, 14600, 14700, 14800, 14900, 15000, 15100, 15200, 15300, 15400, 15500, 15600, 15700, 15800, 15900, 16000, 16100, 16200, 16300, 16400, 16500, 16600, 16700, 16800, 16900, 17000, 17100, 17200, 17300, 17400, 17500, 17600, 17700, 17800, 17900, 18000, 18100, 18200, 18300, 18400, 18500, 18600, 18700, 18800, 18900, 19000, 19100, 19200, 19300, 19400, 19500, 19600, 19700, 19800, 19900, 20000, 20100]\nafrica = [200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1450, 1500, 1550, 1600, 1650, 1700, 1750, 1800, 1850, 1900, 1950, 2000, 2050, 2100, 2150, 2200, 2250, 2300, 2350, 2400, 2450, 2500, 2550, 2600, 2650, 2700, 2750, 2800, 2850, 2900, 2950, 3000, 3050, 3100, 3150, 3200, 3250, 3300, 3350, 3400, 3450, 3500, 3550, 3600, 3650, 3700, 3750, 3800, 3850, 3900, 3950, 4000, 4050, 4100, 4150, 4200, 4250, 4300, 4350, 4400, 4450, 4500, 4550, 4600, 4650, 4700, 4750, 4800, 4850, 4900, 4950, 5000, 5050, 5100, 5150, 5200, 5250, 5300, 5350, 5400, 5450, 5500, 5550, 5600, 5650, 5700, 5750, 5800, 5850, 5900, 5950, 6000, 6050, 6100, 6150, 6200, 6250, 6300, 6350, 6400, 6450, 6500, 6550, 6600, 6650, 6700, 6750, 6800, 6850, 6900, 6950, 7000, 7050, 7100, 7150, 7200, 7250, 7300, 7350, 7400, 7450, 7500, 7550, 7600, 7650, 7700, 7750, 7800, 7850, 7900, 7950, 8000, 8050, 8100, 8150, 8200, 8250, 8300, 8350, 8400, 8450, 8500, 8550, 8600, 8650, 8700, 8750, 8800, 8850, 8900, 8950, 9000, 9050, 9100, 9150, 9200, 9250, 9300, 9350, 9400, 9450, 9500, 9550, 9600, 9650, 9700, 9750, 9800, 9850, 9900, 9950, 10000, 10050, 10100, 10150, 10200, 10250, 10300, 10350, 10400, 10450, 10500, 10550, 10600, 10650, 10700, 10750, 10800, 10850, 10900, 10950, 11000, 11050, 11100, 11150, 11200, 11250, 11300, 11350, 11400, 11450, 11500, 11550, 11600, 11650, 11700, 11750, 11800, 11850, 11900, 11950, 12000, 12050, 12100, 12150, 12200, 12250, 12300, 12350, 12400, 12450, 12500, 12550, 12600, 12650, 12700, 12750, 12800, 12850, 12900, 12950, 13000, 13050, 13100, 13150, 13200, 13250, 13300, 13350, 13400, 13450, 13500, 13550, 13600, 13650, 13700, 13750, 13800, 13850, 13900, 13950, 14000, 14050, 14100, 14150, 14200, 14250, 14300, 14350, 14400, 14450, 14500, 14550, 14600, 14650, 14700, 14750, 14800, 14850, 14900, 14950, 15000, 15050, 15100, 15150, 15200, 15250, 15300, 15350, 15400, 15450, 15500, 15550, 15600, 15650, 15700, 15750, 15800, 15850, 15900, 15950, 16000, 16050, 16100, 16150, 16200, 16250, 16300, 16350, 16400, 16450, 16500, 16550, 16600, 16650, 16700, 16750, 16800, 16850, 16900, 16950, 17000, 17050, 17100, 17150, 17200, 17250, 17300, 17350, 17400, 17450, 17500, 17550, 17600, 17650, 17700, 17750, 17800, 17850, 17900, 17950, 18000, 18050, 18100, 18150, 18200, 18250, 18300, 18350, 18400, 18450, 18500, 18550, 18600, 18650, 18700, 18750, 18800, 18850, 18900, 18950, 19000, 19050, 19100, 19150, 19200, 19250, 19300, 19350, 19400, 19450, 19500, 19550, 19600, 19650, 19700, 19750, 19800, 19850, 19900, 19950, 20000, 20050, 20100]\n\n# Data for other countries\namericas = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 20\nx = np.linspace(0.1, 2 * np.pi, N)\ny1 = np.sin(x)\ny2 = np.exp(-x)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, color='tab:blue', lw=4, label='Demi-Gods and Semi-Devils')\nax.plot(x, y2, color='tab:orange', ls='--', label='The Count of Monte Cristo')\n\nax.set_xlim(0, 2 * np.pi)\nax.set_xlabel('Scores')\nax.set_ylabel('Scores')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnames = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\nvalues = [40, 30, 45, 50, 55, 50, 55, 55, 50, 45]\n\nfig, ax = plt.subplots()\nax.bar(names, values)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(3, 1, figsize=(8, 12))\n\naxs[0].bar(['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], [40, 70, 60, 50, 40])\naxs[0].set_title('Region 1 Sales')\n\naxs[1].bar(['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], [60, 40, 70, 90, 40])\naxs[1].set_title('Region 2 Sales')\n\naxs[2].bar(['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], [80, 50, 50, 80, 10])\naxs[2].set_title('Region 3 Sales')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlength = np.arange(5)\nr = np.arange(5)\n\n# the\u8bc8\u9a97\nfig, ax = plt.subplots()\nax.bar(length, r, align='center', alpha=0.5, label='r')\nax.bar(length, -r, align='center', alpha=0.5, label='r')\n\n# add in legend and title\nax.legend(loc='upper left')\nax.set_title('Bar plot with negative values')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(9, 3), sharey=True)\n\nind = np.arange(5)\nwidth = 0.25\n\nmlp = [2.2, 11.2, 2.4, 19.9, 14.3]\nbert = [3.0, 5.1, 4.1, 2.9, 3.1]\nsas = [-0.7, -0.5, -0.5, -0.5, -0.5]\ncaser = [4.8, 19.7, 19.7, 19.7, 19.7]\n\nax1.bar(ind, mlp, width, label='FMLP-Rec')\nax1.bar(ind + width, bert, width, label='BERT4Rec')\nax1.bar(ind + width * 2, sas, width, label='SASRec')\nax1.bar(ind + width * 3, caser, width, label='Caser')\nax1.bar(ind + width * 4, gru, width, label='GRU4Rec')\n\nax1.set_title('Beauty')\nax1.set_xticks(ind + width * 2)\nax1.set_xticklabels(('FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec'))\nax1.legend(loc='upper left')\n\nmlp = [3.0, 5.1, 4.1, 2.9, 3.1]\nbert = [3.0, 5.1, 4.1, 2.9, 3.1]\nsas = [-0.7, -0.5, -0.5, -0.5, -0.5]\ncaser = [4.8, 19.7, 19.7, 19.7, 19.7]\n\nax2.bar(ind, mlp, width, label='MLP-Rec')\nax2.bar(ind + width, bert, width, label='BERT4Rec')\nax2.bar(ind + width * 2, sas, width, label='SASRec')\nax2.bar(ind + width * 3, caser, width, label='Caser')\nax2.bar(ind + width * 4, gru, width, label='GRU4Rec')\n\nax2.set_title('MovieLens-1M')\nax2.set_xticks(ind + width * 2)\nax2.set_xticklabels(('MLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec'))\nax2.legend(loc='upper left')\n\nmlp = [4.8, 19.7, 19.7, 19.7, 19.7]\nbert = [4.8, 19.7, 19.7, 19.7, 19.7]\nsas = [-0.7, -0.5, -0.5, -0.5, -0.5]\ncaser = [4.8, 19.7, 19.7, 19.7, 19.7]\n\nax3.bar(ind, mlp, width, label='MLP-Rec')\nax3.bar(ind + width, bert, width, label='BERT4Rec')\nax3.bar(ind + width * 2, sas, width, label='SASRec')\nax3.bar(ind + width * 3, caser, width, label='Caser')\nax3.bar(ind + width * 4, gru, width, label='GRU4Rec')\n\nax3.set_title('Yelp')\nax3.set_xticks(ind + width * 2)\nax3.set_xticklabels(('MLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec'))\nax3.legend(loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlabels = 'Bactrian-X', 'Lima-X'\nmodels = [Bactrian-X, Lima-X]\nmodel_colors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple']\nmodel_styles = ['-', '--', '-.', ':']\n\nfig, ax = plt.subplots()\nfor model, color, style in zip(models, model_colors, model_styles):\n    x = np.random.rand(4)\n    y = np.random.rand(4)\n    ax.plot(x, y, color=color, linestyle=style, label=model)\n\nax.set_title('ENDEFRRITES sampled')\nax.set_xlabel('Model')\nax.set_ylabel('Improvement [%]')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 6\nmen_means = (20, 35, 30, 35, 27, 29)\nmen_std = (2, 3, 4, 1, 2, 3)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, men_means, width, yerr=men_std, color='blue')\n\nwomen_means = (25, 32, 34, 20, 25, 26)\nwomen_std = (3, 5, 2, 3, 3, 2)\nrects2 = ax.bar(ind + width, women_means, width, yerr=women_std, color='red')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('Pheme', 'LLM-mis'))\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Make some fake data.\ndata = [np.random.randn(20).cumsum(), np.random.randn(20).cumsum()]\nlabels = ['A', 'B']\n\n# Create a stacked bar plot.\nax.bar(np.arange(len(data[0])), data[0], label=labels[0])\nfor d, l in zip(data[1:], labels[1:]):\n    ax.bar(np.arange(len(d)), d, bottom=data[0], label=l)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# s1\nax.barh('human', 800, left=0, height=1, color='C0')\nax.barh('human', 200, left=0, height=1, color='C1')\nax.barh('human', 400, left=0, height=1, color='C2')\n\nax.barh('gpt4', 150, left=0, height=1, color='C0')\nax.barh('gpt4', 350, left=0, height=1, color='C1')\nax.barh('gpt4', 300, left=0, height=1, color='C2')\n\nax.barh('gpt4-cot', 200, left=0, height=1, color='C0')\nax.barh('gpt4-cot', 400, left=0, height=1, color='C1')\nax.barh('gpt4-cot', 200, left=0, height=1, color='C2')\n\n# s2\nax.barh('human', 800, left=0, height=1, color='C0')\nax.barh('human', 150, left=0, height=1, color='C1')\nax.barh('human', 650, left=0, height=1, color='C2')\n\nax.barh('gpt4', 100, left=0, height=1, color='C0')\nax.barh('gpt4', 400, left=0, height=1, color='C1')\nax.barh('gpt4', 300, left=0, height=1, color='C2')\n\nax.barh('gpt4-cot', 200, left=0, height=1, color='C0')\nax.barh('gpt4-cot', 400, left=0, height=1, color='C1')\nax.barh('gpt4-cot', 200, left=0, height=1, color='C2')\n\nax.set_xlabel('Count')\nax.set_title('Resonance Preference Plot for rich_context')\nax.legend(['O', 'T', 'P'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlabels = 'ARC', 'MMLU', 'TruthfulQA', 'Winogrande', 'Average'\nsizes = [53.0, 51.3, 56.4, 56.2, 56.4]\nexplode = (0, 0.1, 0, 0, 0)\n\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n       shadow=True, startangle=90)\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nM = [3, 4, 5, 6, 7]\ngsm8k = [45, 50, 52, 55, 58]\nmnli = [45, 50, 52, 55, 58]\nracehigh = [45, 50, 52, 55, 58]\n\n# plot\nfig, ax = plt.subplots()\nax.plot(M, gsm8k, label='GSM8K')\nax.plot(M, mnli, label='MNLI')\nax.plot(M, racehigh, label='race@High')\n\nax.set(xlim=(0, 8), ylim=(0, 75),\n       xlabel='M', ylabel='Performance',\n       title='Performance of different M values')\nax.grid(True)\n\n# add legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.barh(['DLMA-7B VS. LLAMA-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMA-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B'], [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 49.2, 30.9], color=['green', 'blue', 'red'])\nax.set_xlabel('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)')\nax.set_xlim(0, 100)\nax.set_ylim(0, 8)\nax.set_yticks([0, 2, 4, 6])\nax.set_yticklabels(['', 'DLMA win', 'Tie', 'DLMA lose'])\nax.set_title('Bar chart example')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nN = 5\nind = np.arange(N)\nwidth = 0.25\n\np1 = ax.bar(ind, [1, 3, 4, 5, 6], width, color='r')\np2 = ax.bar(ind + width, [2, 3, 1, 2, 1], width, color='g')\np3 = ax.bar(ind + width, [3, 1, 2, 3, 2], width, color='b')\np4 = ax.bar(ind + width, [4, 1, 3, 1, 3], width, color='y')\np5 = ax.bar(ind + width, [5, 2, 1, 2, 2], width, color='c')\n\nax.set_ylabel('Scores')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('0', '10', '20', '30', '40'))\nax.legend((p1[0], p2[0], p3[0], p4[0], p5[0]),\n          ('trot', 'pace', 'bound', 'pronk', 'transition'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Data\nlabels = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nAP_1kL_wins = [68, 82, 68, 72, 68]\nTie = [24, 15, 22, 19, 23]\nAG_1k_wins = [8, 3, 10, 9, 9]\n\n# Plotting\nax.bar(labels, AP_1kL_wins, color='blue', label='AP-1kL wins')\nax.bar(labels, Tie, bottom=AP_1kL_wins, color='purple', label='Tie')\nax.bar(labels, AG_1k_wins, bottom=[i + j for i, j in zip(AP_1kL_wins, Tie)], color='gray', label='AG-1k wins')\n\n# Adding legend\nax.legend()\n\n# Adding labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Number of Wins')\nax.set_title('Comparison of Model Performance')\n\n# Adding grid\nax.grid(axis='y')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(7, 7))\n\nind = np.arange(4)\nwidth = 0.25\n\np1 = ax1.bar(ind, [14.8, 29.6, 29.6, 18.5], width, color='r')\np2 = ax1.bar(ind + width, [29.6, 18.5, 18.5, 8.4], width, color='g')\np3 = ax1.bar(ind + width * 2, [29.6, 18.5, 18.5, 8.4], width, color='b')\n\np4 = ax2.bar(ind, [19.0, 26.2, 35.7, 9.5], width, color='r')\np5 = ax2.bar(ind + width, [26.2, 9.5, 9.5, 9.5], width, color='g')\np6 = ax2.bar(ind + width * 2, [35.7, 9.5, 9.5, 9.5], width, color='b')\n\nax1.set_title('Eye Movement')\nax2.set_title('Brainwave')\n\nax1.set_xticks(ind + width)\nax1.set_xticklabels(('Benefits', 'Reliability', 'Security', 'Privacy'))\n\nax1.legend((p1[0], p2[0], p3[0]), ('Strong Disagree', 'Disagree', 'Neutral'), loc='upper left')\nax2.legend((p4[0], p5[0], p6[0]), ('Strong Disagree', 'Disagree', 'Neutral'), loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, figsize=(6.0, 10.0))\n\nx = np.arange(10)\ny0 = np.sin(x / 2 + 0.75)\ny1 = np.cos(x / 2 - 0.25)\ny2 = np.sin(x / 2)\n\nax0.plot(x, y0, 'o-')\nax0.set_title('Saliency-based Sampling')\nax0.set_ylabel('Rate of Gain Change[%%]')\nax0.grid(True)\n\nax1.plot(x, y1, 'o-')\nax1.set_title('Ours')\nax1.set_ylabel('Rate of Gain Change[%%]')\nax1.grid(True)\n\nax2.plot(x, y2, 'o-')\nax2.set_title('Saliency-based Sampling')\nax2.set_xlabel('Brightness')\nax2.set_ylabel('Rate of Gain Change[%%]')\nax2.grid(True)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nratings = {'Accuracy': [3.5, 3.0, 2.5, 3.0, 3.5, 2.0],\n           'Completeness': [3.0, 2.5, 2.0, 2.5, 3.0, 1.5],\n           'Conciseness': [2.5, 2.0, 1.5, 2.0, 2.5, 1.0],\n           'Readability': [3.0, 3.0, 2.0, 2.5, 3.0, 1.5]}\n\nmodels = list(ratings.keys())\nvalues = list(ratings.values())\n\nfig, ax = plt.subplots()\nax.bar(models, values[0], label='Accuracy')\nax.bar(models, values[1], bottom=values[0], label='Completeness')\nax.bar(models, values[2], bottom=np.add(values[0], values[1]), label='Conciseness')\nax.bar(models, values[3], bottom=np.add(values[0], values[1]+values[2]), label='Readability')\n\nax.set_title('Ratings of Language Models on a Scale from 1-4')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Vicuna33b', 'Mistral17b']\naccuracy = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.347, 0.364]\n\nfig, ax = plt.subplots()\nax.bar(models, accuracy)\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\nax.set_ylim(0, 1)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2)\nfig.suptitle('Alpaca-1k-longest wins')\n\n# make some data to plot\nx = np.arange(5)\ny1 = x + 3 * np.random.rand(5)\ny2 = x - 3 * np.random.rand(5)\n\n# we want the first axes to have a legend, but not the second one\nax1.legend(loc='upper left')\nax2.legend(loc='upper left')\n\n# plot some stuff in the two axes\nax1.plot(x, y1, 'o--', color='tab:blue')\nax1.plot(x, y2, 'o--', color='tab:orange')\n\nax2.plot(x, y1, 'o--', color='tab:blue')\nax2.plot(x, y2, 'o--', color='tab:orange')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\ndata = [3, 5, 2, 3, 4, 4, 6, 5, 3, 7]\n\n# plot\nfig, ax = plt.subplots()\nax.bar(data, color='C0')\nax.set_title('Bar plot')\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 2\nsuccess = [0.95, 0.98]\noccupancy_error = [0.02, 0.03]\ntrajectory_optimization_error = [0.01, 0.02]\ngripper_collision = [0.01, 0.02]\ngrounding_error = [0.02, 0.03]\n\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\nrects1 = ax.bar(ind, success, width,\n                 color='green',\n                 label='Success')\n\nrects2 = ax.bar(ind + width, occupancy_error, width,\n                 color='orange',\n                 label='Occupancy Error')\n\nrects3 = ax.bar(ind + width, trajectory_optimization_error, width,\n                 color='blue',\n                 label='Trajectory optimization Error')\n\nrects4 = ax.bar(ind + width, gripper_collision, width,\n                 color='yellow',\n                 label='Gripper collision')\n\nrects5 = ax.bar(ind + width, grounding_error, width,\n                 color='gray',\n                 label='Grounding Error')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Percentage of Total Trials')\nax.set_title('Comparison of GPT-4V and RoboCodeX')\nax.set_xticks(ind + width)\nax.set_xticklabels(('GPT-4V', 'RoboCodeX'))\nax.legend(loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# example data\nx = np.arange(1, 4)\ny1 = x\ny2 = x * 1.2\ny3 = x * 1.4\n\nax.stackplot(x, y1, y2, y3, labels=['JPEG', 'DEEPJSCC w/ ofdm', 'OURS'])\n\nax.legend(loc='upper left')\nax.set_title('Transmission Delay (ms)')\nax.set_xlabel('Datasets')\nax.set_ylabel('')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.arange(0.1, 4, 0.1)\ny1 = np.exp(-x)\ny2 = np.sin(2 * np.pi * x)\n\nfig, ax = plt.subplots()\nax.set_yscale('log')\nax.set_ylabel('log L2')\nax.bar(x, y1, label='RBF-INT')\nax.bar(x, y2, bottom=y1, label='RBF-POL', color='r')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 20\nx = np.linspace(0.1, 2 * np.pi, N)\ny1 = 2 * np.sin(x)\ny2 = 0.8 * np.sin(3 * x)\n\nfig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=4, figsize=(6, 6))\n\nax0.plot(x, y1)\nax0.set_title('LIVE')\nax0.set_ylabel('PICC')\nax0.set_xlabel('SROCC')\n\nax1.plot(x, y1)\nax1.set_title('CSIQ')\nax1.set_ylabel('PICC')\nax1.set_xlabel('SROCC')\n\nax2.plot(x, y1)\nax2.set_title('TID2013')\nax2.set_ylabel('PICC')\nax2.set_xlabel('SROCC')\n\nax3.plot(x, y1)\nax3.set_title('LIVE-M')\nax3.set_ylabel('PICC')\nax3.set_xlabel('SROCC')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\ny_pos = np.arange(3)\nlabels = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\nperformance = [6.11, 85.0, 99.44]\none_shot_performance = [28.33, 56.11, 60.56]\nzero_shot_performance = [44.44, 42.78, 42.78]\n\nax.barh(y_pos, performance, label='Zero-shot')\nax.barh(y_pos, one_shot_performance, left=performance, label='One-shot')\nax.barh(y_pos, zero_shot_performance, left=[p + o for p, o in zip(performance, one_shot_performance)], label='DS-Agent')\n\nax.set_yticks(y_pos)\nax.set_yticklabels(labels)\nax.set_xlabel('One pass rate (%)')\nax.legend(loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Data\nlabels = ['LLM-based vs. TPLM-based', 'LLM-based vs. Template', 'LLM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\ndata = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\nwin = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Plotting\nfor i in range(len(labels)):\n    ax.barh(labels[i], data[i], color='lightblue', label='Win')\n    ax.barh(labels[i], tie[i] - win[i], color='green', label='Tie')\n    ax.barh(labels[i], loss[i], color='red', label='Loss')\n\n# Adding labels and legend\nax.set_xlabel('Percentage')\nax.set_title('Comparison of Different Approaches')\nax.legend(loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nx = ['Combat Spider', 'Milk Cow', 'Shear Sheep']\ny = [0.72, 0.74, 0.56]\nax.bar(x, y)\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Probability of Improvement')\nax.set_ylabel('')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# example data\nN = 5\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nscores = {'Avg. Following Rate': [100.0, 83.3, 50.7, 100.0, 91.7],\n          'Following-related Format Error Rate': [60.0, 48.1, 50.7, 63.4, 60.8],\n          'Following-related Error Rate': [26.7, 27.7, 29.8, 27.1, 38.5]}\n\ncolors = ['C0', 'C1', 'C2']\n\nfor label, color in zip(scores.keys(), colors):\n    rects = ax.bar(ind, scores[label], width,\n                   label=label, color=color)\n\nax.set_ylabel('Scores')\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xticks(ind)\nax.set_xticklabels(('0', '1', '2', '3', '4'))\nax.legend(loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 20\nx = np.linspace(0.1, 2 * np.pi, N)\ny1 = .5 * np.sin(x)\ny2 = .5 * np.cos(x)\n\nfig, ax = plt.subplots()\nax.stackplot(x, y1, y2, labels=['y1', 'y2'])\n\n# add legend and show plot\nax.legend(loc='upper left')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlabels = 'Llama2', 'Mistral'\nsizes = [5.52, 6.57]\ncolors = ['tab:blue', 'tab:orange']\nexplode = (0.1, 0)\n\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\n       autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nn_groups = 2\nmeans_noisy1 = (49.98, 49.63)\nstd_noisy1 = (0.95, 0.94)\n\nmeans_noisy2 = (51.05, 50.74)\nstd_noisy2 = (0.95, 0.94)\n\n# create plot\nfig, ax = plt.subplots()\n\nindex = np.arange(n_groups)\nbar_width = 0.35\nopacity = 0.8\n\nrects1 = plt.bar(index, means_noisy1, bar_width,\n                 alpha=opacity,\n                 color='b',\n                 yerr=std_noisy1,\n                 label='Uniform')\n\nrects2 = plt.bar(index + bar_width, means_noisy2, bar_width,\n                 alpha=opacity,\n                 color='r',\n                 yerr=std_noisy2,\n                 label='ClusterClip')\n\nplt.xlabel('Number of Clusters')\nplt.ylabel('MMLU')\nplt.title('Scores by group and gender')\nplt.xticks(index + bar_width, ('100', '1000'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nspeedups = [1.0, 1.8, 2.6, 3.3, 4.6, 4.5, 7.4]\nspeedups = [1.0, 1.9, 2.9, 3.4, 5.2, 6.1, 8.7]\nspeedups = [1.0, 1.6, 1.8, 2.7, 2.9, 3.9, 4.3]\n\nperturbations = ['0%', '50%', '4:8', '75%', '6:8', '87.50%', '7:8']\nx = np.arange(len(perturbations))\n\nwidth = 0.25\n\nresnet18 = ax.bar(x - width, speedups[0], width, label='ResNet18')\nalexnet = ax.bar(x, speedups[1], width, label='AlexNet')\nresnet50 = ax.bar(x + width, speedups[2], width, label='ResNet50')\n\nax.set_ylabel('Speedup')\nax.set_title('Perturbation')\nax.set_xticks(x)\nax.set_xticklabels(perturbations)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(6)\ny = [10, 20, 30, 40, 50, 60]\nyerr = [4, 2, 5, 1, 3, 2]\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=yerr, fmt='-o')\nax.set_title('LeetCode, DS-6.7b')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlabels = 'Recost (1% wins)', 'Tie', 'Alpaca wins'\nsizes = [53, 6, 21], [80, 33, 67], [116, 49, 53], [99, 50, 103], [179, 23, 98]\nexplode = (0.1, 0, 0)\n\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n       shadow=True, startangle=90)\nax.axis('equal')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnames = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'STARE', 'Ppl', 'ALTI+', 'Wass Combo', 'iF', 'Max', 'STARE', 'iF', 'Max', 'STARE']\nvalues_non_aggregation = [35.15, 26.86, 19.08, 22.09, 20.67, 58.99, 66.19, 48.38, 36.63, 42.5, 23.9, 26.38, 17.06]\nvalues_aggregation = [35.15, 26.86, 19.08, 22.09, 20.67, 58.99, 66.19, 48.38, 36.63, 42.5, 23.9, 26.38, 17.06]\n\nfig, ax = plt.subplots()\nax.bar(names, values_non_aggregation, label='Non-Aggregation')\nax.bar(names, values_aggregation, bottom=values_non_aggregation, label='Aggregation')\n\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\nax.set_xlabel('Model')\nax.set_ylabel('FPR@90TPR')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# example data\nx = np.arange(0.1, 4, 0.5)\ny1 = np.exp(-x)\ny2 = np.exp(-x) - 10*np.exp(-x**2)\n\nax.plot(x, y1, color='tab:blue', lw=2)\nax.fill_between(x, 1.2*y1, where=y1 > 0.2*y2, facecolor='tab:blue', alpha=.5)\nax.plot(x, y2, color='tab:orange', ls='--')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nn_groups = 5\ntrue_scores = (66.3, 61.9, 53.8, 49.3, 48.0)\nmis_scores = (10.1, 13.6, 13.7, 36.3, 40.5)\n\n# create plot\nfig, ax = plt.subplots()\n\nindex = np.arange(n_groups)\nbar_width = 0.35\nopacity = 0.8\n\nrects1 = ax.bar(index, true_scores, bar_width,\n                alpha=opacity,\n                color='b',\n                label='Truthful Recall')\n\nrects2 = ax.bar(index + bar_width, mis_scores, bar_width,\n                alpha=opacity,\n                color='r',\n                label='Misleading Recall')\n\nax.set_xlabel('Number of Sentences')\nax.set_ylabel('Recall (%)')\nax.set_title('Truthful:Misleading = 2:0')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(('5', '10', '20'))\nax.legend()\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 26)\ny = (x - x.mean()) / x.std()\n\nfig, ax = plt.subplots()\nax.plot(x, y, 'o', color='black')\nax.grid(True)\n\nax.set_xlabel('Model = Vicuna')\nax.set_ylabel(r'$\\Delta$Acc (with Stories) - Acc (without Rules)')\nax.set_xlim(-8, 4.5)\nax.set_ylim(-1.5, 4.5)\n\n# plot legend\nlabels = ['$\\Delta$Acc < -1', '-1 <= $\\Delta$Acc <= 1', '$\\Delta$Acc > 1']\ncolors = ['blue', 'orange', 'green']\nfor l, c in zip(labels, colors):\n    ax.plot([], [], color=c, label=l)\nax.legend(loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 9)\ny1 = x + 3\ny2 = x ** 2\ny3 = x * 2\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True)\n\nax0.plot(x, y1, 'o-')\nax0.set_title('Sharing x axis')\nax0.legend()\n\nax1.plot(x, y2, '^--')\nax1.set_title('Sharing x and y axis')\nax1.legend()\n\nax2.plot(x, y3, 's-.')\nax2.set_title('Sharing all axes')\nax2.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nN = 20\nmenMeans = (20, 35, 30, 35, 27)\nmenStd = (2, 3, 4, 1, 2)\nwomenMeans = (25, 32, 34, 20, 25)\nwomenStd = (3, 5, 2, 3, 3)\nx = np.arange(N)\nwidth = 0.35\n\np1 = ax.bar(x - width/2, menMeans, width, yerr=menStd, label='GPT-3.5-Turbo')\np2 = ax.bar(x + width/2, womenMeans, width, yerr=womenStd, label='GPT-4')\n\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(x)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\nax.legend((p1[0], p2[0]), ('GPT-3.5-Turbo', 'GPT-4'))\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nrwidth = 0.25\nx = np.arange(3)\ny = [1, 2, 3]\nyerr = [0.2, 0.4, 0.5]\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=yerr, fmt='-o', ecolor='gray', capsize=5)\n\nax.errorbar(x + rwidth, y - yerr, yerr=yerr, fmt='-o', ecolor='gray',\n            capsize=5, label='LLAMA-Default')\n\nax.errorbar(x + 2 * rwidth, y + yerr, yerr=yerr, fmt='-o', ecolor='gray',\n            capsize=5, label='LLAMA-HAG')\n\nax.errorbar(x + 3 * rwidth, y, yerr=yerr, fmt='-o', ecolor='gray',\n            capsize=5, label='Vicuna-Default')\n\nax.errorbar(x + 4 * rwidth, y, yerr=yerr, fmt='-o', ecolor='gray',\n            capsize=5, label='Vicuna-HAG')\n\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Data to plot\nlabels = 'Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V'\nsizes = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\ncolors = ['lightblue', 'lightcoral', 'lightskyblue', 'lightskyblue', 'lightgreen', 'lightseagreen', 'lightcyan']\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)\n\n# Plot\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\n       autopct='%1.1f%%', shadow=True, startangle=140)\n\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# example data\nwin = [22, 25, 30, 26, 45, 50, 20, 38]\ntie = [50, 40, 60, 50, 20, 50, 50, 35]\nlose = [28, 35, 10, 24, 35, 23, 30, 27]\n\nind = np.arange(8.)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\nrects1 = ax.bar(ind - width/2, win, width, color='r',\n                label='COPR v.s. Golden (Human Eval)')\nrects2 = ax.bar(ind    , tie, width, color='g',\n                label='COPR v.s. Golden (GPT-4 Eval)')\nrects3 = ax.bar(ind + width/2, lose, width, color='b',\n                label='COPR v.s. DPO-ER (Human Eval)')\nrects4 = ax.bar(ind + width, lose, width, color='y',\n                label='COPR v.s. DPO-ER (GPT-4 Eval)')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind)\nax.set_xticklabels(('HH', 'Reddit', 'IMDB', 'AVG', 'HH', 'Reddit', 'IMDB', 'AVG'))\nax.legend()\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 4))\n\n# example data\naccuracy = [35, 10]\nunfairness = [5, 7]\n\ntenrec_accuracy = [18, 10]\ntenrec_unfairness = [10, 8]\n\n# we create the x-axis ticks and labels from lists\nx = np.arange(len(accuracy))\nlabels = ['Accuracy', 'Unfairness']\n\n# we create the bar plot\nax1.bar(x, accuracy, label='Movielens')\nax1.bar(x, unfairness, bottom=accuracy, label='Tenrec')\n\nax1.set_ylabel('NDCG@20')\nax1.set_title('Accuracy')\nax1.set_xticks(x)\nax1.set_xticklabels(labels)\nax1.legend()\n\n# we create the bar plot\nax2.bar(x, tenrec_accuracy, label='Movielens')\nax2.bar(x, tenrec_unfairness, bottom=tenrec_accuracy, label='Tenrec')\n\nax2.set_title('CV@20')\nax2.set_ylabel('NDCG@20')\nax2.set_xticks(x)\nax2.set_xticklabels(labels)\nax2.legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 4\nmen_means = (20, 35, 30, 35)\nmen_std = (2, 3, 4, 2)\nwomen_means = (25, 32, 34, 20)\nwomen_std = (3, 5, 2, 2)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\nrects1 = ax.bar(ind, men_means, width, yerr=men_std, capsize=7, label='ImageNet-1k')\nrects2 = ax.bar(ind + width, women_means, width, yerr=women_std, capsize=7, label='ImageNet (F)')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Top-1 ACC. (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('224', '128', '64', '32'))\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlabels = 'Level 1', 'Level 2', 'Level 4'\nsizes = [50.0, 50.0, 50.0]\ncolors = ['yellowgreen', 'lightcoral', 'lightskyblue']\nexplode = (0.1, 0.1, 0.1)\n\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\n       autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\ncategories = ['A', 'B', 'C', 'D']\nvalues = [10, 20, 30, 40]\nwidth = 0.25\n\nfig, ax = plt.subplots()\nax.bar(categories, values, width)\n\n# shift the values for the second bar\nvalues = [10, 20, 30, 40]\nax.bar([x + width for x in categories], values, width, bottom=values)\n\n# shift the values for the third bar\nvalues = [10, 20, 30, 40]\nax.bar([x + 2*width for x in categories], values, width, bottom=[x + width for x in values])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnames = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/Renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\nfig, ax = plt.subplots()\nax.bar(names, values)\nax.set_title('Number of Videos by Profession')\nax.set_ylabel('Number of Videos')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nlabels = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# plot\nfig, ax = plt.subplots()\nax.barh(labels, synthetic_data, color='C0', label='synthetic data')\nax.barh(labels, human_authored_data, left=synthetic_data, color='C1', label='human-authored data')\n\nax.set_xlabel('Percentage')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Example data\nhuman_distribution = np.random.rand(20)\nmodel_distribution = np.random.rand(20)\n\n# Plot the data\nax.bar(range(len(human_distribution)), human_distribution, label=\"Human Distribution\")\nax.bar(range(len(model_distribution)), model_distribution, bottom=human_distribution,\n       label=\"Model Distribution\")\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Probability')\nax.set_title('Context: The human body can tolerate only a')\nax.legend(loc='upper left')\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Some more formatting for the text labels and axes\nfig.autofmt_xdate()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.bar(['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan'], [0.5, 1.0, 0.7, 0.9, 0.6], label='Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Probability of Improvement')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nemotion = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nfrequency = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\nax.bar(emotion, frequency)\nax.set_title('Frequency (%)')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nprofessions = ['Making bricks', 'Carpenter', 'Baker', 'Crafting/knitting', 'Cleaning / laundry', 'Gardening']\nnum_videos = [3750, 4450, 4800, 5400, 6350, 8050]\n\nax.bar(professions, num_videos)\n\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# Data\ngdp_growth = [4, 12, 7, 9]\nunemployment_rate = [3, 16, 10, 10]\ninflation_rate = [2, 4, 11, 3]\nnasdaq = [10, 25, 15, 50]\nexchange_rate = [1, 3, 10, 6]\nreal_estate_prices = [5, 10, 15, 20]\ncorporate_profits = [5, 15, 15, 15]\n\n# Plot\nax.bar(np.arange(4), gdp_growth, color='C0', label='US')\nax.bar(np.arange(4) + 1, unemployment_rate, color='C1', label='China')\nax.bar(np.arange(4) + 2, inflation_rate, color='C2', label='Brazil')\nax.bar(np.arange(4) + 3, nasdaq, color='C3', label='India')\n\nax.bar(np.arange(4), exchange_rate, bottom=gdp_growth, color='C0')\nax.bar(np.arange(4) + 1, real_estate_prices, bottom=unemployment_rate, color='C1')\nax.bar(np.arange(4) + 2, corporate_profits, bottom=inflation_rate, color='C2')\nax.bar(np.arange(4) + 3, nasdaq, bottom=exchange_rate, color='C3')\n\nax.set_xlim(-.5, 3.5)\nax.set_xticks(np.arange(4) + .5)\nax.set_xticklabels(['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ'])\nax.legend(loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)\nlabels = ['Excellent', 'Good', 'Moderate', 'Poor', 'Very Poor']\nwidth = 0.25\n\nrects1 = ax1.bar(range(5), [32, 30, 14, 10, 1], width, label='New York')\nrects2 = ax1.bar(range(5), [33, 29, 13, 11, 12], width + width, label='Los Angeles')\n\nax1.set_title('Bar plot with legend')\nax1.legend()\n\nax2.barh(range(5), [32, 30, 14, 10, 1], width, left=range(5), label='New York')\nax2.barh(range(5), [33, 29, 13, 11, 12], left=range(5) + width, label='Los Angeles')\n\nax2.set_title('Horizontal bar plot with legend')\nax2.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(7)\ny = [80, 60, -40, 20, 30, 20, 0]\n\n# example data\nx = np.arange(7)\ny = [80, 60, -40, 20, 30, 20, 0]\n\nfig, ax = plt.subplots()\nax.bar(x, y, color='C0', label='Positive Differences')\nax.bar(x, y, color='C1', label='Negative Differences')\n\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nemotion = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight',\n           'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude',\n           'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered',\n           'Amusement']\nfrequency = [7.5, 7.0, 6.7, 6.5, 6.0, 6.0, 5.9, 4.9, 4.0, 3.5, 3.2, 3.0, 2.5, 2.0]\n\nax.bar(emotion, frequency)\nax.set_title('Emotions and their frequencies')\nax.set_ylabel('Frequency (%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Data to plot\nyelp = [4.8, -0.7]\ncaser = [-15.9, -8.5]\ngru4rec = [19.7, -12.6]\n\n# Plot data using horizontal bars\nax.barh(range(2), yelp, color='r', label='Yelp')\nax.barh(range(2), caser, left=yelp, color='g', label='Caser')\nax.barh(range(2), gru4rec, left=[x + y for x, y in zip(yelp, caser)], color='b', label='GRU4Rec')\n\n# Add x-axis and y-axis labels\nax.set_xlabel('Accuracy (%)')\nax.set_yticks([0, 1])\nax.set_yticklabels(['', ''])\n\n# Add legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=3)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 4\nmen_means = (20, 35, 30, 35)\nmen_std = (2, 3, 4, 2)\n\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\nrects1 = ax.bar(ind, men_means, width, color='r',\n                yerr=men_std, capsize=7)\n\nwomen_means = (25, 32, 34, 20)\nwomen_std = (3, 5, 2, 2)\n\nrects2 = ax.bar(ind + width, women_means, width, color='y',\n                yerr=women_std, capsize=7)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4'))\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlabels = 'greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking'\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\nwidth = 0.35\nind = np.arange(len(labels))\n\nfig, ax = plt.subplots()\nax.bar(ind, synthetic_data, width, color='C0', label='synthetic data')\nax.bar(ind + width, human_authored_data, width, color='C1', label='human-authored data')\n\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(labels)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 5\nmen_means = (20, 35, 30, 35, 27)\nmen_std = (2, 3, 4, 1, 2)\nwomen_means = (25, 32, 34, 20, 25)\nwomen_std = (3, 5, 2, 3, 3)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, men_means, width, yerr=men_std, label='Men')\nrects2 = ax.bar(ind + width, women_means, width, yerr=women_std, label='Women')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\nax.legend()\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nregions = ('West', 'East', 'South', 'North')\nco2 = (100.45, 56.03, 92.15, 65.49)\npm = (54.46, 32.19, 48.23, 37.12)\nso2 = (11.59, 17.38, 26.15, 22.89)\nno2 = (40.44, 25.36, 39.63, 32.84)\n\nfig, ax = plt.subplots()\nax.barh(regions, co2, color='teal', label='CO2 (ppm)')\nax.barh(regions, pm, left=co2, color='salmon', label='PM ($\\mu$g/m3)')\nax.barh(regions, so2, left=[x + y for x, y in zip(co2, pm)], color='steelblue', label='SO2 ($\\mu$g/m3)')\nax.barh(regions, no2, left=[x + y + z for x, y, z in zip(co2, pm, so2)], color='orchid', label='NO2 ($\\mu$g/m3)')\n\nax.set_xlabel('Concentration')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nscores = [-2.2, -1.8, -1.4, -1.6, -1.7, -1.9, -1.9, -1.1, -0.7, -0.8]\nconstraint_words = [3, 5, 7, 10]\n\n# plot the data\nfig, ax = plt.subplots()\nax.bar(constraint_words, scores, color='C0', label='LLAMA-Default')\nax.bar(constraint_words, scores, color='C1', label='LLAMA-HAG')\nax.bar(constraint_words, scores, color='C2', label='Vicuna-Default')\nax.bar(constraint_words, scores, color='C3', label='Vicuna-HAG')\n\n# add labels and title\nax.set_xlabel('Constraint Word Count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\n\n# add legend\nax.legend()\n\n# show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ngdp = np.array([[-0.9, -0.7, -0.8, -0.6], [-0.6, -0.4, -0.5, -0.3],\n                [-0.2, -0.1, 0.0, 0.1], [0.0, 0.1, 0.2, 0.3]])\nlabels = ['USA', 'China', 'Germany', 'Brazil']\ngdp_names = ['GDP_growth_2018', 'GDP_growth_2019', 'GDP_growth_2020',\n             'GDP_growth_2021']\n\nfig, ax = plt.subplots()\nax.bar(labels, gdp, tick_label=gdp_names)\nax.set_title('Negative GDP Growth Rates by Country and Year')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavia']\npercentages = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nplt.bar(models, percentages, color=['red', 'gold', 'green', 'lightgreen', 'lightblue', 'purple', 'gray'])\n\n# Add labels and title\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\nplt.title('Human Study')\n\n# Add horizontal grid lines\nplt.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Add percentage values above each bar\nfor i, p in enumerate(percentages):\n    plt.text(i, p + 0.5, f'{p:.1f}%', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nN = 4\nmen_means = (20, 35, 30, 25)\nmen_std = (2, 3, 4, 1)\n\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nrects1 = ax1.bar(ind, men_means, width, yerr=men_std, capsize=7)\n\nwomen_means = (25, 32, 34, 20)\nwomen_std = (3, 5, 2, 3)\nrects2 = ax1.bar(ind + width, women_means, width, yerr=women_std, capsize=7)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax1.set_ylabel('Scores')\nax1.set_title('Scores by group and gender')\nax1.set_xticks(ind + width / 2)\nax1.set_xticklabels(('Group A', 'Group B', 'Group C', 'Group D'))\n\nax1.legend((rects1[0], rects2[0]), ('Men', 'Women'))\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax2.set_ylabel('Scores')\nax2.set_title('Scores by group and gender')\nax2.set_xticks(ind + width / 2)\nax2.set_xticklabels(('Group A', 'Group B', 'Group C', 'Group D'))\n\nax2.legend((rects1[0], rects2[0]), ('Men', 'Women'))\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 5\nmenMeans = (20, 35, 30, 35, 27)\nmenStd =   (2, 3, 4, 1, 2)\nwomenMeans = (25, 32, 34, 20, 25)\nwomenStd =   (3, 5, 2, 3, 3.5)\n\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\np1 = plt.bar(ind, menMeans, width, yerr=menStd)\np2 = plt.bar(ind, womenMeans, width, bottom=menMeans, yerr=womenStd)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nplt.ylabel('Scores')\nplt.title('Scores by group and gender')\nplt.xticks(ind, ('G1', 'G2', 'G3', 'G4', 'G5'))\nplt.yticks(np.arange(0, 81, 10))\nplt.legend((p1[0], p2[0]), ('Men', 'Women'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# example data\nx = np.arange(4)\ny1, y2, y3 = 3 + x, 5 - x, 2 * x\n\nax.plot(x, y1, 'o', color='tab:red')\nax.plot(x, y2, '^', color='tab:blue')\nax.plot(x, y3, 's', color='tab:green')\n\nax.set_title('Simple plot with different markers and colors')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nhuman_annotator = ['1', '2', '3', '4', '5', '6']\nscores = [10, 8, 12, 10, 6, 8]\nlabels = ['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5']\n\n# plot\nfig, ax = plt.subplots()\nax.bar(human_annotator, scores, label=labels)\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nN = 7\nind = np.arange(N)\nwidth = 0.25\n\nrects1 = ax.bar(ind, [1,3,4,5,6,7,8], width, color='b', label='RegOpt')\nrects2 = ax.bar(ind + width, [2,3,2,4,5,6,3], width, color='g', label='BIOpt')\nrects3 = ax.bar(ind + width*2, [3,2,4,5,6,7,2], width, color='r', label='LoopOpt')\n\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width)\nax.set_xticklabels(('A', 'B', 'C', 'D', 'E', 'F', 'G'))\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlanguages = ('EN', 'DE', 'FR', 'IT', 'ES')\nmodels = ('Bactrian-X', 'Lima-X')\n\nmodel_performance = np.array([\n    [3.5, 2.3],\n    [4.4, 1.3]\n])\n\nlanguage_order = ['EN', 'DE', 'FR', 'IT', 'ES']\nlanguage_order.reverse()\n\nfig, ax = plt.subplots()\nim = ax.imshow(model_performance)\n\nfor i in range(len(models)):\n    ax.text(i, 0, models[i], ha='center', va='bottom',\n            color='w', rotation=90)\n\nfor i in range(len(languages)):\n    ax.text(0, i, languages[i], ha='left', va='center',\n            color='w')\n\nax.set_xticks(np.arange(len(models)))\nax.set_yticks(np.arange(len(languages)))\n\nax.set_xticklabels(models)\nax.set_yticklabels(languages)\n\nplt.xlabel('Model with Language')\nplt.ylabel('Language')\nplt.title('Model Performance Improvement by Language')\n\n# Rotate the tick labels and set their alignment.\nfor label in ax.get_xticklabels():\n    label.set_rotation(90)\n    label.set_ha('center')\n    label.set_rotation_mode('anchor')\n\nfor i in range(len(languages)):\n    for j in range(len(models)):\n        text = ax.text(j, i, model_performance[i, j],\n                       ha=\"center\", va=\"center\",\n                       color=\"w\")\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.bar([1, 2, 3, 4, 5], [0.5, -0.6, 1.0, 0.4, -0.8], label='Dow Jones Index', color='tab:gray')\nax.bar([1, 2, 3, 4, 5], [1.5, 2.2, 3.9, 4.6, -1.2], label='Nasdaq Index', color='tab:orange')\n\nax.set_title('Fiscal Quarter')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# the data\nE16_6 = [39.4, 35.18, 34.06]\nL26_8 = [32.84, 30.84, 31.0]\nD19_7 = [28.0, 24.27, 24.0]\nL22_2 = [34.06, 30.0, 26.82]\n\n# the bar positions\nx = np.arange(len(E16_6))\n\n# the bar heights\ny = [17, 9, 11, 20, 0]\n\n# plot the bars\nfor i in range(5):\n    ax.bar(x + i * 0.25, y[i], width=0.25, color='teal', label=r'$\\lambda$=0.1')\n\n# add the numbers on top of each bar\nfor i in range(5):\n    ax.text(x[i] + 0.25, y[i] + 1, str(y[i]), ha='center', va='bottom')\n\n# the data\nE16_6 = [19, -19, -22]\nL26_8 = [-9, -12, -14]\nD19_7 = [-14, -20, -30]\nL22_2 = [-35, -30, -20]\n\n# the bar positions\nx = np.arange(len(E16_6))\n\n# the bar heights\ny = [17, 9, 11, 20, 0]\n\n# plot the bars\nfor i in range(5):\n    ax.bar(x + i * 0.25, y[i], width=0.25, color='lightcyan', edgecolor='teal', label=r'$\\lambda$=0.08')\n\n# add the numbers on top of each bar\nfor i in range(5):\n    ax.text(x[i] + 0.25, y[i] + 1, str(y[i]), ha='center', va='bottom')\n\n# the data\nE16_6 = [17, -19, -22]\nL26_8 = [-9, -12, -14]\nD19_7 = [-14, -20, -30]\nL22_2 = [-35, -30, -20]\n\n# the bar positions\nx = np.arange(len(E16_6))\n\n# the bar heights\ny = [17, 9, 11, 20, 0]\n\n# plot the bars\nfor i in range(5):\n    ax.bar(x + i * 0.25, y[i], width=0.25, color='pink', edgecolor='teal', label=r'$\\lambda$=0.06')\n\n# add the numbers on top of each bar\nfor i in range(5):\n    ax.text(x[i] + 0.25, y[i] + 1, str(y[i]), ha='center', va='bottom')\n\n# set the x-axis labels\nax.set_xticks(x)\nax.set_xticklabels(['E16.6', 'L26.8', 'D19.7', 'L22.2', 'L22.2'])\n\n# set the y-axis limits\nax.set_ylim(-40, 40)\n\n# set the y-axis labels\nax.set_yticks(np.arange(-40, 40, 10))\nax.set_yticklabels([-40, -30, -20, -10, 0, 10, 20, 30, 40])\n\n# set the title\nax.set_title('Categories')\n\n# set the legend\nax.legend(loc='upper right')\n\n# show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\ntruthful = [46.3, 57.9, 53.8]\nmisleading = [30.1, 34, 43.7]\n\nwidth = 0.35\n\nfig, ax = plt.subplots()\n\nindex = np.arange(3)\nbar1 = ax.bar(index, truthful, width, color='black', label='Truthful Recall')\nbar2 = ax.bar(index, misleading, width, bottom=truthful, color='pink', label='Misleading Recall')\n\nax.set_xlabel('Truthful:Misleading = 2:0')\nax.set_ylabel('Recall (%)')\nax.set_title('Truthful vs Misleading Recall')\nax.set_xticks(index)\nax.set_xticklabels(('A', 'B', 'C'))\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Data\ncurrent_year = [-200, -200, -200, -200]\nprevious_year = [-100, -100, -100, -100]\n\n# Plot\nax.barh(current_year, previous_year, color=['#4682b4', '#e74c3c'])\n\n# Ticks and labels\nax.set_yticks([0, 1, 2, 3])\nax.set_yticklabels(['Light Industry', 'Heavy Industry', 'Transportation', 'Residential'])\nax.set_xlabel('Pollution Emissions (thousands of metric tons)')\nax.set_xlim(-1600, 0)\n\n# Grid\nax.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Labels\nplt.title('Environmental Impact by Sector')\nplt.legend(['Current Year', 'Previous Year'], loc='upper left')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {'Beijing': 11.5, 'Shanghai': 16.2, 'Guangzhou': 22.3, 'Shenzhen': 23.7, 'Chengdu': 15.9}\nlabels = data.keys()\nvalues = data.values()\n\nfig, ax = plt.subplots()\nax.bar(labels, values)\nax.set_title('Average City Temperatures')\nax.set_xlabel('City')\nax.set_ylabel('Average Temperature ($^\\circ$C)')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Data\nx = [1, 2, 3, 4]\ny = [-175, -150, -175, -150]\n\n# Plot\nax.bar(x, y, color='lightblue', edgecolor='black')\n\n# Labels\nax.set_xlabel('Region')\nax.set_ylabel('2021 Emissions')\nax.set_title('Annual Pollution Emission Reductions')\n\n# Ticks\nax.set_xticks(x)\nax.set_xticklabels(['Region 1', 'Region 2', 'Region 3', 'Region 4'])\n\n# Grid\nax.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Show\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Example data\nN = 5\nmen_means = (20, 35, 30, 35, 27)\nmen_std = (2, 3, 4, 1, 2)\nwomen_means = (25, 32, 34, 20, 25)\nwomen_std = (3, 5, 2, 3, 3)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\np1 = ax.bar(ind, men_means, width, yerr=men_std,\n            label='Men')\np2 = ax.bar(ind + width, women_means, width, yerr=women_std,\n            label='Women')\n\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('Q1', 'Q2', 'Q3', 'Q4', 'Q5'))\nax.legend()\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Question')\nax.set_ylabel('Responses')\nax.set_title('Responses to Questions')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('Strongly disagree', 'Disagree', 'Neither agree nor disagree', 'Agree', 'Strongly agree'))\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 10\nmen_means = (20, 35, 30, 35, 27)\nmen_std = (2, 3, 4, 1, 2)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, men_means, width, yerr=men_std)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Accuracy')\nax.set_title('Top-10 superfamilies in training dataset')\nax.set_xticks(ind)\nax.set_xticklabels(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\nax.axhline(0.87, color='r', linestyle='--')\n\ndef autolabel(rects):\n    \"\"\"\n    Attach a text label above each bar displaying its height\n    \"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,\n                '%d' % int(height),\n                ha='center', va='bottom')\n\nautolabel(rects1)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nrwidth = 0.35\nx = np.arange(4)\ny1 = [1, 2, 3, 4]\ny2 = [10, 10, 10, 10]\n\nfig, ax = plt.subplots()\nax.bar(x - rwidth/2, y1, rwidth, label='LLAMA-Default')\nax.bar(x + rwidth/2, y2, rwidth, label='LLAMA-HAG')\n\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\nax.set_xticks(x)\nax.set_xticklabels(('3', '5', '7', '9'))\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Data to plot\nlabels = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\nca_a_recall = [46.3, 56.9, 53.8, 19.4]\nca_b_recall = [45, 34, 40, 27]\nmisleading_recall = [30.1, 34, 43.7, 20]\n\n# Plot data\nax.bar(labels, ca_a_recall, label='CaA Recall', color='blue')\nax.bar(labels, ca_b_recall, bottom=ca_a_recall, label='CaB Recall', color='green')\nax.bar(labels, misleading_recall, bottom=[ca_a_recall[i] + ca_b_recall[i] for i in range(len(labels))], label='Misleading Recall', color='red')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Recall')\nax.set_title('Truthful: Misleading = 2:0')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nr1 = np.random.rand(4)\nr2 = np.random.rand(4)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nax0.bar(['A', 'B', 'C', 'D'], r1)\nax1.bar(['A', 'B', 'C', 'D'], r2)\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\ndata = [23.7, 23.4, 23.0, 22.5, 22.1, 21.7, 21.3, 20.8, 20.3, 19.8, 19.3, 18.8]\n\n# plot with bar\nfig, ax = plt.subplots()\nax.bar(range(len(data)), data)\nax.set_title('example bar plot')\nax.set_ylabel('Scores')\n\n# plot with errorbar\nfig, ax = plt.subplots()\nax.errorbar(range(len(data)), data, yerr=2., fmt='-o')\nax.set_title('example errorbar plot')\nax.set_ylabel('Scores')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 5\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\n# the bar with errorbars\ny = [23, 44, 25]\nyerr = [2, 3, 4]\nrects1 = ax.bar(ind, y, width, yerr=yerr)\n\n# the bar without errorbars\ny = [33, 44, 25]\nrects2 = ax.bar(ind + width, y, width)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('Attack on Titan', 'Game of Thrones',\n                    'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils',\n                    'Notre-Dame de Paris'))\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)\nfig.subplots_adjust(hspace=0.5)\n\nN = 10\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nr1 = ax1.bar(ind, (12.2, 14.6, 17.3, 21.5, 18.0, 14.7, 17.0, 20.1, 15.4, 19.5),\n             width)\nr2 = ax1.bar(ind + width, (10.3, 12.9, 14.6, 19.0, 23.5, 23.3, 25.7, 20.8, 14.6, 16.5),\n             width, color='b')\nr3 = ax1.bar(ind + 2 * width, (10.8, 9.2, 10.5, 15.2, 20.2, 19.1, 20.1, 14.6, 17.3, 19.7),\n             width, color='g')\n\nr4 = ax2.bar(ind, (12.2, 14.6, 17.3, 21.5, 18.0, 14.7, 17.0, 20.1, 15.4, 19.5),\n             width)\nr5 = ax2.bar(ind + width, (10.3, 12.9, 14.6, 19.0, 23.5, 23.3, 25.7, 20.8, 14.6, 16.5),\n             width, color='b')\nr6 = ax2.bar(ind + 2 * width, (10.8, 9.2, 10.5, 15.2, 20.2, 19.1, 20.1, 14.6, 17.3, 19.7),\n             width, color='g')\n\n# add some text for labels, title and axes ticks\nax1.set_ylabel('Y Label')\nax1.set_title('Title')\nax1.set_xticks(ind + width)\nax1.set_xticklabels(('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'))\n\nax2.set_ylabel('Y Label')\nax2.set_title('Title')\nax2.set_xticks(ind + width)\nax2.set_xticklabels(('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'))\n\nax1.legend((r1[0], r2[0], r3[0]), ('Dataset 1', 'Dataset 2', 'Dataset 3'))\nax2.legend((r4[0], r5[0], r6[0]), ('Dataset 1', 'Dataset 2', 'Dataset 3'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(9, 4))\n\nind = np.arange(7)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\np1 = ax1.bar(ind, 10 * np.random.rand(7), width)\np2 = ax1.bar(ind + width, 10 * np.random.rand(7), width, color='r')\n\np3 = ax2.bar(ind, 10 * np.random.rand(7), width)\np4 = ax2.bar(ind + width, 10 * np.random.rand(7), width, color='r')\n\nax1.set_title('Original')\nax2.set_title('New')\n\nax1.set_xticks(ind + width / 2)\nax1.set_xticklabels(('leave-taking', 'thanking', 'persuasion',\n                     'apology', 'criticism', 'request', 'greeting'))\n\nax2.set_xlabel('Type of utterance')\nax2.set_ylabel('Percentage (%)')\nax2.legend((p1[0], p2[0]), ('synthetic data', 'human-authored data'), loc='upper left')\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nranks = np.arange(10)\nscores = [8, 6, 10]\nscores2 = [3.0, 2.9, 3.1]\nscores3 = [4.8, 4.8, 19.7]\nscores4 = [-5, -5, -10, -3, -6]\n\nfig, axs = plt.subplots(nrows=2, ncols=2)\n\naxs[0, 0].bar(ranks, scores, color='C0')\naxs[0, 0].set_title('Beauty')\naxs[0, 0].set_ylim([-10, 10])\naxs[0, 0].set_xlim([-1, 11])\naxs[0, 0].set_xticks([])\naxs[0, 0].set_yticks([])\n\naxs[0, 1].bar(ranks, scores2, color='C1')\naxs[0, 1].set_title('MovieLens-1M')\naxs[0, 1].set_ylim([-6, 6])\naxs[0, 1].set_xlim([-1, 11])\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\n\naxs[1, 0].bar(ranks, scores3, color='C2')\naxs[1, 0].set_title('Yelp')\naxs[1, 0].set_ylim([-5, 5])\naxs[1, 0].set_xlim([-1, 11])\naxs[1, 0].set_xticks([])\naxs[1, 0].set_yticks([])\n\naxs[1, 1].bar(ranks, scores4, color='C3')\naxs[1, 1].set_title('More')\naxs[1, 1].set_ylim([-20, 20])\naxs[1, 1].set_xlim([-1, 11])\naxs[1, 1].set_xticks([])\naxs[1, 1].set_yticks([])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nscores = [2.5, 3.0, 4.0, 5.0]\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\nmodels = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\n\n# create a figure and an axis\nfig, ax = plt.subplots()\n\n# plot the scores for each model and constraint word count\nfor i, model in enumerate(models):\n    ax.bar(constraint_words, scores[i], label=model)\n\n# add labels and title\nax.set_xlabel('Constraint Word Count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\n\n# add legend\nax.legend()\n\n# show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 10\nx = np.arange(N)\ny1 = np.cumsum(np.random.randn(N, 10))\ny2 = np.cumsum(np.random.randn(N, 10))\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3)\n\nax0.set_title('Using axhspan')\nax0.axhspan(0.25, 0.5, facecolor='0.5', alpha=0.5)\nax0.axhspan(0.7, 0.8, facecolor='r', alpha=0.5)\nax0.plot(x, y1)\nax0.set_ylim(-1, 1)\nax0.set_yticks(np.arange(4) / 3 + 0.5)\nax0.set_yticklabels(['', 'A', 'B', 'C'])\n\nax1.set_title('Using axvspan')\nax1.axvspan(2, 5, facecolor='0.5', alpha=0.5)\nax1.axvspan(6, 9, facecolor='r', alpha=0.5)\nax1.plot(x, y1)\nax1.set_xlim(-1, 10)\nax1.set_xticks(np.arange(11) / 2)\nax1.set_xticklabels(['', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\nax2.set_title('Using axvline and axhline')\nax2.axhline(0, color='k', lw=2)\nax2.axhline(0.5, color='r', ls='--')\nax2.axvline(0, color='k', lw=2)\nax2.axvline(0.5, color='r', ls='--')\nax2.plot(x, y1)\nax2.plot(x, y2)\nax2.set_xlim(-1, 10)\nax2.set_ylim(-1, 1)\nax2.set_xticks(np.arange(11) / 2)\nax2.set_xticklabels(['', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\nax2.set_yticks(np.arange(4) / 3 + 0.5)\nax2.set_yticklabels(['', 'A', 'B', 'C'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlabels = 'Manual Mapping', 'LLM-revision w/CoT', 'LLM-revision', 'VerifNER'\ngenia_type = (58.7, 39.4, 27.1, 30.0)\ngenia_span = (45.7, 45.7, 25.0, 25.0)\ngenia_t_and_s = (39.4, 39.4, 25.0, 45.0)\ngenia_spurious = (19.4, 19.4, 10.0, 10.0)\ngenia_total = (58.7, 45.7, 25.0, 45.0)\n\nbc5cdr_type = (77.8, 77.8, 50.0, 85.0)\nbc5cdr_span = (50.0, 50.0, 50.0, 50.0)\nbc5cdr_t_and_s = (85.0, 85.0, 50.0, 50.0)\nbc5cdr_spurious = (25.0, 25.0, 25.0, 25.0)\nbc5cdr_total = (77.8, 77.8, 50.0, 85.0)\n\nfig, ax = plt.subplots(2, 1, sharex=True, figsize=(6, 6))\nax[0].bar(labels, genia_type, label='Type')\nax[0].bar(labels, genia_span, bottom=genia_type, label='Span')\nax[0].bar(labels, genia_t_and_s, bottom=[sum(x) for x in zip(genia_type, genia_span)], label='T&S')\nax[0].bar(labels, genia_spurious, bottom=[sum(x) for x in zip(genia_type, genia_span, genia_t_and_s)], label='Spurious')\nax[0].bar(labels, genia_total, bottom=[sum(x) for x in zip(genia_type, genia_span, genia_t_and_s, genia_spurious)], label='Total')\nax[0].set_title('GENIA')\n\nax[1].bar(labels, bc5cdr_type, label='Type')\nax[1].bar(labels, bc5cdr_span, bottom=bc5cdr_type, label='Span')\nax[1].bar(labels, bc5cdr_t_and_s, bottom=[sum(x) for x in zip(bc5cdr_type, bc5cdr_span)], label='T&S')\nax[1].bar(labels, bc5cdr_spurious, bottom=[sum(x) for x in zip(bc5cdr_type, bc5cdr_span, bc5cdr_t_and_s)], label='Spurious')\nax[1].bar(labels, bc5cdr_total, bottom=[sum(x) for x in zip(bc5cdr_type, bc5cdr_span, bc5cdr_t_and_s, bc5cdr_spurious)], label='Total')\nax[1].set_title('BC5CDR')\n\nfor axi in ax:\n    axi.set_ylabel('Error correction rate (%)')\n    axi.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nscore_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscore_b = [0, 0, 0, 12.5, 18.75, 20.0, 30.0]\n\n# Create the bar chart\nfig, ax = plt.subplots()\nax.bar(models, score_a, label='Score A (%)', color='red')\nax.bar(models, score_b, bottom=score_a, label='Score B (%)', color='blue')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Score (%)')\nax.set_title('Human Study')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 4\nmen_means = (20, 35, 30, 35)\nmen_std = (2, 3, 4, 2)\nwomen_means = (25, 32, 34, 20)\nwomen_std = (3, 5, 2, 2)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, men_means, width, yerr=men_std, capsize=7, label='Democratic')\nrects2 = ax.bar(ind + width, women_means, width, yerr=women_std, capsize=7, label='Republican')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('Pheme', 'RvNN', 'Hyphen', 'GET'))\nax.legend()\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 6.0), sharex=True)\naxs[0].barh('human', [300, 450, 450], color=['#4692C9', '#70A8E3', '#F0B87D'])\naxs[0].set_title('s1')\naxs[1].barh('human', [300, 450, 450], color=['#4692C9', '#70A8E3', '#F0B87D'])\naxs[1].set_title('s2')\naxs[2].barh('human', [300, 450, 450], color=['#4692C9', '#70A8E3', '#F0B87D'])\naxs[2].set_title('s3')\n\nfig.suptitle('Resonance Preference Plot for rich_context')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Eye Movement\nax.bar(['Very Low', 'Low', 'Neutral', 'High', 'Very High'], [20.4, 29.6, 20.4, 20.4, 9.3], label='Eye Movement')\nax.set_title('Survey Results')\n\n# Brainwave\nax.bar(['Very Low', 'Low', 'Neutral', 'High', 'Very High'], [23.8, 14.3, 16.7, 38.1, 7.1], bottom=[20.4, 29.6, 20.4, 20.4, 9.3], label='Brainwave')\n\nax.legend()\nax.set_xlabel('Effort')\nax.set_ylabel('Percentage (%)')\nax.set_ylim(0, 60)\nax.set_xlim(-1, 2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, figsize=(6, 6))\n\nx = np.arange(12)\ny0 = np.sin(x / 3 + .4)\ny1 = np.cos(3 * x / 2 - 0.2)\ny2 = np.sin(2 * x)\n\nax0.plot(x, y0, 'o-')\nax0.set_title('Sine curve')\nax0.grid(True)\n\nax1.plot(x, y1, '^--')\nax1.set_title('Cosine curve')\nax1.grid(True)\n\nax2.plot(x, y2, 's-.')\nax2.set_title('Sine curve with square markers')\nax2.grid(True)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\nmodels = ['Bactrian-X', 'Lima-X']\nimprovements = np.array([\n    [3.5, -1.0],\n    [2.3, 0.3],\n    [4.4, 3.4],\n    [1.3, -3.3],\n    [-0.7, -2.7]\n])\n\nfig, ax = plt.subplots()\nax.barh(models, improvements[0], color='C0')\nax.barh(models, improvements[1], bottom=improvements[0], color='C1')\n\nax.set_xlabel('Improvement [%]')\nax.set_title('Model Performance Improvement by Language')\n\nax.legend(['EN', 'DE', 'FR', 'IT', 'ES'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nn_groups = 3\nmeans_random = (10.1, 13.6, 13.7)\nstd_random = (2, 3, 4)\nmeans_ours = (49.3, 45.7, 41.6)\nstd_ours = (2, 3, 4)\nmeans_sota = (66.3, 61.9, 53.8)\nstd_sota = (2, 3, 4)\n\n# create plot\nfig, ax = plt.subplots()\nindex = np.arange(n_groups)\nbar_width = 0.35\nopacity = 0.8\n\nrects1 = ax.bar(index, means_random, bar_width,\n                alpha=opacity,\n                color='b',\n                yerr=std_random)\n\nrects2 = ax.bar(index + bar_width, means_ours, bar_width,\n                alpha=opacity,\n                color='g',\n                yerr=std_ours)\n\nrects3 = ax.bar(index + 2 * bar_width, means_sota, bar_width,\n                alpha=opacity,\n                color='r',\n                yerr=std_sota)\n\nax.set_xlabel('Truthful:Misleading')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Random, Ours, and SOTA')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(('Random', 'Ours', 'SOTA'))\nax.legend((rects1[0], rects2[0], rects3[0]), ('Random', 'Ours', 'SOTA'))\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, axs = plt.subplots(nrows=4, ncols=2, figsize=(7, 7))\n\n# plot 1\ncmap = plt.get_cmap('tab20c')\nx = np.arange(6)\ny = [35, 35, 40, 30, 45, 40]\nwidth = 0.35\naxs[0, 0].bar(x - width / 2, y[:3], width, label='Score Type 1', color=cmap(0))\naxs[0, 0].bar(x + width / 2, y[3:], width, label='Score Type 2', color=cmap(1))\naxs[0, 0].set_title('Human Labeling and Agreement Bias Checking 1')\naxs[0, 0].legend()\n\n# plot 2\ncmap = plt.get_cmap('tab20c')\nx = np.arange(6)\ny = [35, 35, 40, 30, 45, 40]\nwidth = 0.35\naxs[0, 1].bar(x - width / 2, y[:3], width, label='Score Type 1', color=cmap(0))\naxs[0, 1].bar(x + width / 2, y[3:], width, label='Score Type 2', color=cmap(1))\naxs[0, 1].set_title('Human Labeling and Agreement Bias Checking 2')\naxs[0, 1].legend()\n\n# plot 3\ncmap = plt.get_cmap('tab20c')\nx = np.arange(6)\ny = [35, 35, 40, 30, 45, 40]\nwidth = 0.35\naxs[1, 0].bar(x - width / 2, y[:3], width, label='Score Type 1', color=cmap(0))\naxs[1, 0].bar(x + width / 2, y[3:], width, label='Score Type 2', color=cmap(1))\naxs[1, 0].set_title('Human Labeling and Agreement Bias Checking 3')\naxs[1, 0].legend()\n\n# plot 4\ncmap = plt.get_cmap('tab20c')\nx = np.arange(6)\ny = [35, 35, 40, 30, 45, 40]\nwidth = 0.35\naxs[1, 1].bar(x - width / 2, y[:3], width, label='Score Type 1', color=cmap(0))\naxs[1, 1].bar(x + width / 2, y[3:], width, label='Score Type 2', color=cmap(1))\naxs[1, 1].set_title('Human Labeling and Agreement Bias Checking 4')\naxs[1, 1].legend()\n\n# plot 5\ncmap = plt.get_cmap('tab20c')\nx = np.arange(6)\ny = [35, 35, 40, 30, 45, 40]\nwidth = 0.35\naxs[2, 0].bar(x - width / 2, y[:3], width, label='Score Type 1', color=cmap(0))\naxs[2, 0].bar(x + width / 2, y[3:], width, label='Score Type 2', color=cmap(1))\naxs[2, 0].set_title('Human Labeling and Agreement Bias Checking 5')\naxs[2, 0].legend()\n\n# plot 6\ncmap = plt.get_cmap('tab20c')\nx = np.arange(6)\ny = [35, 35, 40, 30, 45, 40]\nwidth = 0.35\naxs[2, 1].bar(x - width / 2, y[:3], width, label='Score Type 1', color=cmap(0))\naxs[2, 1].bar(x + width / 2, y[3:], width, label='Score Type 2', color=cmap(1))\naxs[2, 1].set_title('Human Labeling and Agreement Bias Checking 6')\naxs[2, 1].legend()\n\n# plot 7\ncmap = plt.get_cmap('tab20c')\nx = np.arange(6)\ny = [35, 35, 40, 30, 45, 40]\nwidth = 0.35\naxs[3, 0].bar(x - width / 2, y[:3], width, label='Score Type 1', color=cmap(0))\naxs[3, 0].bar(x + width / 2, y[3:], width, label='Score Type 2', color=cmap(1))\naxs[3, 0].set_title('Human Labeling and Agreement Bias Checking 7')\naxs[3, 0].legend()\n\n# plot 8\ncmap = plt.get_cmap('tab20c')\nx = np.arange(6)\ny = [35, 35, 40, 30, 45, 40]\nwidth = 0.35\naxs[3, 1].bar(x - width / 2, y[:3], width, label='Score Type 1', color=cmap(0))\naxs[3, 1].bar(x + width / 2, y[3:], width, label='Score Type 2', color=cmap(1))\naxs[3, 1].set_title('Human Labeling and Agreement Bias Checking 8')\naxs[3, 1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nmethods = ['Contrastive Search', 'Beam Search']\nscores = [54.9, 71.5, 60.3, 54.5, 92.6, 42.4, 43.8, 89.2, 96.4]\nscores_b = [38.3, 79.2, 52.9, 56.8, 64.6, 7.1, 8.7, 2.0, 83.3]\n\nfig, ax = plt.subplots()\nax.barh(models, scores, label='Contrastive Search')\nax.barh(models, scores_b, left=scores, label='Beam Search')\n\nax.set_xlabel('Scores')\nax.set_title('Performance Comparison by Model')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\ny = np.random.normal(loc=50, scale=10, size=100)\n\nx = np.arange(len(y))\n\nfig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=4, figsize=(6, 8))\n\nax0.bar(x, y)\nax0.set_title('Dataset 1')\n\nax1.bar(x, y)\nax1.set_title('Dataset 2')\n\nax2.bar(x, y)\nax2.set_title('Dataset 3')\n\nax3.bar(x, y)\nax3.set_title('Dataset 4')\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\ndata = [np.random.normal(size=100) for _ in range(2)]\nlabels = ['A', 'B']\n\nfig, ax = plt.subplots()\nax.boxplot(data, labels=labels)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.random.normal(size=100)\n\nfig, ax = plt.subplots()\nax.boxplot(x)\nax.set_title('Daily Activity Durations')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100300\nsigma = 20000\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\n# add a 'best fit' line\ny = m * x + b\nplt.plot(bins, y, '--')\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\n# Tweak spacing to prevent clipping of ylabel\nplt.subplots_adjust(left=0.15)\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Fixing random state for reproducibility\nmu = 100  # mean of distribution\nsigma = 15  # standard deviation of distribution\nx = mu + sigma * np.random.randn(437)\ny = (x - x.mean()) / x.std()\nax.boxplot(y)\n\nax.set_title(\"Boxplot of Normal Distribution\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata1 = [1, 2, 2.5, 3, 4]\ndata2 = [1, 2, 2.5, 3, 4]\ndata3 = [1, 2, 2.5, 3, 4]\ndata4 = [1, 2, 2.5, 3, 4]\n\n# plot the data\nfig, ax = plt.subplots()\nax.boxplot([data1, data2, data3, data4])\n\n# remove the x-axis ticks\nax.set_xticks([])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata1 = [3, 5, 2, 3, 4, 4, 6, 5, 3, 3, 2, 4]\ndata2 = [6, 2, 7, 4, 5, 3, 5, 2, 3, 3, 4, 7]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, layout='constrained')\n\nax1.boxplot(data1)\nax1.set_title('LMA Region Classification Accuracy')\nax1.set_xlabel('')\n\nax2.boxplot(data2)\nax2.set_title('Slice Mean Error (ms)')\nax2.set_xlabel('')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# example data\nmedians = [26, 25, 25, 26, 30]\ndata = [np.random.normal(loc=m, scale=5, size=100) for m in medians]\n\nax.boxplot(data)\nax.set_xticklabels(['w/o att', 'w/o DP', '1xQ', '20xQ', '200xQ'])\n\nax.axhline(0, color='r', linestyle='--')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata = [2.6, 2.4, 3.1, 3.5, 2.8, 3.0]\n\nfig, ax = plt.subplots()\nax.boxplot(data)\n\nax.set_xticklabels(['REM -', 'No POP -', 'Separate M emb. -', '4 x 4 tokenizer -', 'No latent space C -', 'C w/o action inputs -'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# example data\nspread = np.random.rand(10) * 100\ncenter = np.ones(10) * 50\nflier_high = np.random.rand(5) * 100 + 100\nflier_low = np.random.rand(5) * -100\n\ndata = np.concatenate((spread, center, flier_high, flier_low))\n\nax.boxplot(data)\nax.set_xticklabels(['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nall_scores = [np.random.normal(loc=2.5, scale=0.5, size=30),\n              np.random.normal(loc=5.0, scale=0.75, size=30),\n              np.random.normal(loc=5.5, scale=0.25, size=30),\n              np.random.normal(loc=4.0, scale=1.0, size=30),\n              np.random.normal(loc=8.0, scale=1.5, size=30),\n              np.random.normal(loc=7.0, scale=0.5, size=30),\n              np.random.normal(loc=9.0, scale=0.5, size=30),\n              np.random.normal(loc=7.0, scale=1.0, size=30)]\n\n# plot with boxplot\nfig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, figsize=(9, 4))\n\nax0.boxplot(all_scores)\nax0.set_title('one by one')\nax0.set_xlabel('Groups')\nax0.set_ylabel('Scores')\n\nax1.boxplot(all_scores, vert=False)\nax1.set_title('all in one')\nax1.set_xlabel('Scores')\nax1.set_ylabel('Groups')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100300.0\nsigma = 20000.0\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\n# add a 'best fit' line\ny = m * x + b\nplt.plot(bins, y, '--')\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\n\n# Tweak spacing to prevent clipping of ylabel\nplt.subplots_adjust(left=0.15)\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nratings = [[2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4],\n           [2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4]]\nintrusion = [[0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7],\n             [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]]\n\n# plot the data\nfig, axs = plt.subplots(nrows=2, ncols=2)\naxs[0, 0].boxplot(ratings[0], vert=False)\naxs[0, 0].set_title('Ratings')\naxs[0, 1].boxplot(intrusion[0], vert=False)\naxs[0, 1].set_title('Intrusion')\naxs[1, 0].boxplot(ratings[1], vert=False)\naxs[1, 0].set_title('Ratings')\naxs[1, 1].boxplot(intrusion[1], vert=False)\naxs[1, 1].set_title('Intrusion')\n\n# remove xticks\nfor ax in axs.flat:\n    ax.set(xticks=[])\n\n# hide y-axis labels for all but bottom-left plot\nfor ax in axs[1:, :]:\n    ax.set(yticklabels=[])\n\n# hide right and top spines\nfor ax in axs.flat:\n    ax.spines.right.set_visible(False)\n    ax.spines.top.set_visible(False)\n\n# remove y-axis ticks for all but bottom-right plot\nfor ax in axs[:, 1:]:\n    ax.yaxis.set_ticks([])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nmedians = [26, 37, 45, 23, 25, 33]\ndata = [np.random.normal(0, std, 100) for std in medians]\n\nfig, (ax0, ax1, ax2, ax3, ax4) = plt.subplots(nrows=5)\n\nax0.boxplot(data)\nax0.set_title('Digit span')\n\nax1.boxplot(data)\nax1.set_title('Lexical decision')\n\nax2.boxplot(data)\nax2.set_title('Lexical decision')\n\nax3.boxplot(data)\nax3.set_title('Reaction time')\n\nax4.boxplot(data)\nax4.set_title('Trail making')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\n# example data\ndata1 = [1, 2, 2.5, 3, 3.5, 4]\ndata2 = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5]\n\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(9, 4))\n\nax1.boxplot(data1)\nax1.set_title('BG')\nax1.set_xlabel('Prediction Accuracy $v_{D_1}$')\n\nax2.boxplot(data2)\nax2.set_title('IBP')\nax2.set_xlabel('Prediction Accuracy $v_{D_1}$')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nsearch_depth = [50, 100, 150, 200, 350]\nreward = [0.038, -0.042, 0.034, 0.045, 0.059]\n\nfig, ax = plt.subplots()\nax.errorbar(search_depth, reward, xerr=10, yerr=0.005)\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 10030\nsigma = 482.6\n\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\n# add a 'best fit' line\ny = m * x + b\nl = plt.plot(bins, y, 'k--', linewidth=1.5)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nplt.xlabel('Smarts')\nplt.ylabel('Probability of being smart')\nplt.title('Smartness Distribution of the Smart People')\n\n# Tweak spacing to prevent clipping of ylabel\nplt.subplots_adjust(left=0.15)\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\ndata = [3, 5, 2, 3, 4, 2, 3, 4, 5, 3, 6, 4, 7, 5, 2, 3, 4, 5, 6, 3]\n\n# plot the data using different options\nfig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=4, figsize=(6, 6))\nax0.boxplot(data)\nax0.set_title('Mean Value')\nax1.boxplot(data, positions=[1.5, 4.5], widths=[1, 2])\nax1.set_title('Median Value')\nax2.boxplot(data, vert=False)\nax2.set_title('IQR Mean')\nax3.boxplot(data, vert=False, positions=[1.5, 4.5], widths=[1, 2])\nax3.set_title('IQR Median')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nthrust = [-40, -20, 0, 20]\nwidth = 5\nx = np.arange(len(thrust))\ny = [3.6, 3.6, 1.6, 1.6]\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, xerr=width, fmt='o', c=\"k\", ecolor=\"gray\")\nax.errorbar(x, y + 1, xerr=width, fmt='o', c=\"k\", ecolor=\"gray\")\nax.errorbar(x, y + 2, xerr=width, fmt='o', c=\"k\", ecolor=\"gray\")\nax.errorbar(x, y + 3, xerr=width, fmt='o', c=\"k\", ecolor=\"gray\")\n\nax.set_title(\"Errorbar with error range\")\nax.set_xlabel(\"Thrust Angle [\u00b0]\")\nax.set_ylabel(\"Angular Frequency [rad/s]\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata = [np.random.normal(size=100), np.random.normal(size=100),\n        np.random.normal(size=100), np.random.normal(size=100)]\n\nfig, ax = plt.subplots()\nax.boxplot(data)\nax.set_xticklabels(['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nhuman_scores = [0.2, 0.4, 0.6, 0.8]\nscores = [0.2, 0.4, 0.6, 0.8]\n\nfig, axs = plt.subplots(nrows=1, ncols=4, figsize=(9, 2),\n                       sharey=True)\n\naxs[0].boxplot(human_scores, vert=False)\naxs[0].set_title('Mean (\u2191)')\naxs[0].set_xlabel('Human Normalized Score')\n\naxs[1].boxplot(scores, vert=False)\naxs[1].set_title('Median (\u2191)')\naxs[1].set_xlabel('Human Normalized Score')\n\naxs[2].boxplot(human_scores, vert=False)\naxs[2].set_title('Interquartile Mean (\u2191)')\naxs[2].set_xlabel('Human Normalized Score')\n\naxs[3].boxplot(scores, vert=False)\naxs[3].set_title('Optimality Gap (\u2193)')\naxs[3].set_xlabel('Human Normalized Score')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 50\nx = np.random.rand(N)\ny1 = x * np.exp(-x)\ny2 = np.sin(x)\n\nfig, ax = plt.subplots()\nax.set_title('Using limits of last plot')\nax.set_ylim(ax.get_ylim()[::-1])\nax.plot(x, y1, 'o', color='tab:blue')\nax.plot(x, y2, 's', color='tab:orange')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\n# example data\nmu = 10030\nsigma = 400\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=10030,\\ \\sigma=400$')\nplt.vlines(mu, 0, .025, linestyles=\"--\", color=\"red\")\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nall_data = [np.random.normal(0, std, 100) for std in range(6, 10)]\nlabels = ['D-avg', 'PTO-kNN', 'PTO-OLS', 'PTO-F', 'SAA', 'CSAA', 'RSAA', 'P-NN']\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True, figsize=(8, 8))\n\n# plot boxplot\nbplot1 = ax0.boxplot(all_data,\n                     vert=True,  # vertical box alignment\n                     patch_artist=True,  # fill with color\n                     labels=labels)  # will be used to label x-ticks\nax0.set_title('Linear travel times')\n\n# fill with colors\ncolors = ['pink', 'lightblue', 'lightgreen', 'lightcoral', 'lightyellow']\nfor bplot in bplot1:\n    bplot.set_facecolor(colors[bplot.get_index()])\n\n# plot violin\nax1.violinplot(all_data,\n               showmeans=False,  # show the mean?\n               showmedians=True)  # show the median?\n\nax1.set_title('Exponential travel times')\n\n# plot bar plot\nax2.bar(range(len(all_data)),\n        np.mean(all_data, axis=1))\nax2.set_title('Sigmoidal travel times')\nax2.set_xticks([r + 0.4 for r in range(len(all_data))])\nax2.set_xticklabels(labels)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\n# example data\nfrom scipy import stats\n\nx1 = np.random.normal(0, 1, 100)\ny1 = np.random.normal(0, 1, 100)\nz1 = np.random.normal(0, 1, 100)\n\nx2 = np.random.normal(0, 1, 100)\ny2 = np.random.normal(0, 1, 100)\nz2 = np.random.normal(0, 1, 100)\n\nx3 = np.random.normal(0, 1, 100)\ny3 = np.random.normal(0, 1, 100)\nz3 = np.random.normal(0, 1, 100)\n\n# plot with errorbars\nfig, ax = plt.subplots()\nax.errorbar(x1, y1, xerr=0.2, yerr=0.4)\nax.errorbar(x2, y2, xerr=0.2, yerr=0.4, fmt='o')\nax.errorbar(x3, y3, xerr=0.2, yerr=0.4, fmt='o', capsize=2, color='tab:orange')\n\n# plot with boxplot\nfig, ax = plt.subplots()\nax.boxplot([x1, x2, x3])\n\n# plot with violinplot\nfig, ax = plt.subplots()\nax.violinplot([x1, x2, x3], showmeans=True, showextrema=False,\n              showmedians=True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nhiar = [0.25, 0.1]\npsnr = [23.16, 19.48]\n\nfig, axs = plt.subplots(1, 2)\naxs[0].boxplot(psnr, labels=['Vanilla DIP', 'SGLD DIP', 'Ours'])\naxs[1].boxplot(psnr, labels=['Vanilla DIP', 'SGLD DIP', 'Ours'])\n\nfor ax in axs:\n    ax.set_title('0.25 HIAR')\n    ax.set_xlabel('PSNR (dB)')\n    ax.set_ylabel('HIAR')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute PCA\nn_components = 2\npca = PCA(n_components=n_components)\nX_pca = pca.fit_transform(X)\n\n# Compute t-SNE\nn_components_t = 2\ntsne = TSNE(n_components=n_components_t, init='pca', random_state=0)\nX_tsne = tsne.fit_transform(X)\n\n# Normalize the data\nX_pca = (X_pca - X_pca.min(axis=0)) / (X_pca.max(axis=0) - X_pca.min(axis=0))\nX_tsne = (X_tsne - X_tsne.min(axis=0)) / (X_tsne.max(axis=0) - X_tsne.min(axis=0))\n\n# Plot\nfig, ax = plt.subplots()\ncmap = colors.ListedColormap(['red', 'blue'])\nax.scatter(X_pca[:, 0], X_pca[:, 1], c='red', alpha=0.5, label='Ground Truth')\nax.scatter(X_tsne[:, 0], X_tsne[:, 1], c='blue', alpha=0.5, label='Generated')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 100\nx = np.linspace(0.1, 1.0, N)\ny = np.linspace(0.1, 1.0, N)\nX, Y = np.meshgrid(x, y)\nZ1 = np.add.outer(np.arange(N), np.arange(N)).astype(float)\nZ2 = (np.random.random((N, N)) * 10 - 5.0)\nZ = Z1 + Z2\n\nfig, ax = plt.subplots()\ncmap = cm.get_cmap('coolwarm')\nim = ax.imshow(Z, interpolation='nearest', cmap=cmap,\n                norm=cm.colors.SymLogNorm(linthresh=0.03, linscale=1,\n                                          vmin=-5, vmax=5))\n\nax.set_xlabel(\"$x_1$\")\nax.set_ylabel(\"$x_2$\")\n\n# We want to show all of the ticks.\nax.set_xticks(np.arange(0, N, 2))\nax.set_yticks(np.arange(0, N, 2))\n\n# We want 2 lines of labels rather than 4\nax.set_xticklabels([\"\"] * 5)\nax.set_yticklabels([\"\"] * 5)\n\n# We need to hide these ticks.\nax.tick_params(labelbottom=False, labelleft=False)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.collections import EllipseCollection\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# make up some data\nx = np.random.rand(100)*4 + 2\ny = np.random.rand(100)*4 + 2\narea = 36 * np.random.rand(100)\nangle = 360 * np.random.rand(100)\ncolors = plt.cm.viridis(area / max(area))\n\nfig, ax = plt.subplots()\nec = EllipseCollection(widths=area ** .5, heights=area ** .5,\n                       angles=angle, unit='width', offsets=[x, y],\n                       offset_transform=ax.transData)\nec.set_array(area)\nax.add_collection(ec)\nax.autoscale_view()\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\nax.set_title('Female\\nMale')\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 100\nr = 2 * np.random.rand(N)\ntheta = 2 * np.pi * np.random.rand(N)\narea = 200 * r**2\ncmap = cm.get_cmap(\"Blues\")\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"polar\"})\nsc = ax.scatter(theta, r, c=area, cmap=cmap, s=area, alpha=0.5)\n\nax.set_rmax(10)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.set_rlabel_position(-22.5)\nax.grid(True)\n\nax.set_box_aspect(1)\n\nfig.colorbar(sc)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 100\nr = 2 * np.random.rand(N)\ntheta = 2 * np.pi * np.random.rand(N)\narea = 200 * r**2\ncolors = theta\n\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nc = ax.scatter(theta, r, c=colors, s=area, cmap=cm.hsv)\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 100\nx = np.linspace(0, 2 * np.pi, N)\ny = np.sin(x) ** 10\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\nsurf = ax.plot_surface(x, y, np.random.rand(N, N), cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.patches import PathPatch\nfrom matplotlib.path import Path\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Create a path with a triangle and a line\npath_data = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0)]\ncodes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\npath = Path(path_data, codes)\npatch = PathPatch(path, facecolor='none', edgecolor='red')\n\nax.add_patch(patch)\n\n# Plot the path\nx, y = zip(*path.vertices)\nax.plot(x, y, 'k')\n\n# Plot the path data\nax.plot(path_data[::2], path_data[1::2], 'k--')\n\nax.set_xlim(-1, 2)\nax.set_ylim(-1, 2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nmu = 200  # mean of distribution\nsigma = 25  # standard deviation of distribution\nx = mu + sigma * np.random.randn(10000)\n\nnum_bins = 50\n\nfig, ax = plt.subplots()\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=True)\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\nax.plot(bins, y, '--')\nax.set_xlabel('Spearman Coefficient')\nax.set_ylabel('Density')\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Tweak spacing to prevent clipping of ylabel\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom scipy.stats import norm\n\n# example data\nmu = 10\nsigma = 2\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\ny = norm.pdf(x, mu, sigma)\n\n# random bundle\ny_random = np.random.normal(loc=mu, scale=sigma, size=len(x))\n\n# increase price\ny_increase = y * 1.5\n\n# strategic (ours)\ny_strategic = y * 1.2\n\n# reserved price p_l\np_l = 11\n\nfig, ax = plt.subplots()\nax.plot(x, y, color='blue', lw=2, alpha=0.8, label='Random Bundle')\nax.plot(x, y_increase, color='red', lw=2, alpha=0.8, label='Increase Price')\nax.plot(x, y_strategic, color='green', lw=2, alpha=0.8, label='Strategic (Ours)')\nax.axvline(p_l, color='red', linestyle='--', linewidth=2, label=f'Reserved price p_l')\n\nax.set_xlabel('p')\nax.set_ylabel('Shape Density')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.colors import Normalize\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 100\nX, Y = np.mgrid[-3:3:complex(0, N), -2:2:complex(0, N)]\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X * 10)**2 - (Y * 10)**2)\nZ = (Z1 - Z2) * 2\n\nfig, ax = plt.subplots()\ncset1 = ax.contourf(X, Y, Z, cmap=cm.Purples,\n                    norm=Normalize(vmin=-1, vmax=1))\n\ncset2 = ax.contour(X, Y, Z, colors='k')\n\nax.set_title('Purples colormap with contour lines')\nax.clabel(cset2, inline=True, fontsize=10)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100\nsigma = 15\nx = mu + sigma * np.random.randn(10000)\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 4\nx = np.arange(N)\ny0 = (20+np.random.rand(N))/6\ny1 = (20+np.random.rand(N))/6\ny2 = (20+np.random.rand(N))/6\ny3 = (20+np.random.rand(N))/6\n\nfig, ax = plt.subplots()\nax.errorbar(x, y0, yerr=2., label='Baseline')\nax.errorbar(x, y1, yerr=2., label='SoftMoE (unchanged)')\nax.errorbar(x, y2, yerr=2., label='SoftMoE (\u00f7 NumExperts)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nbaseline1 = np.random.rand(3)\nbaseline2 = np.random.rand(3)\nfedmm = np.random.rand(3)\n\nfig, ax = plt.subplots()\nax.errorbar(baseline1, [0.748, 0.762, 0.709], yerr=[0.01, 0.01, 0.01], fmt='o', c='b')\nax.errorbar(baseline2, [0.715, 0.748, 0.687], yerr=[0.01, 0.01, 0.01], fmt='o', c='r')\nax.errorbar(fedmm, [0.759, 0.78, 0.713], yerr=[0.01, 0.01, 0.01], fmt='o', c='g')\n\nax.set_title('Accuracy by hospital and method')\nax.set_xlabel('Hospital')\nax.set_ylabel('Accuracy')\nax.legend(['Baseline 1', 'Baseline 2', 'FedMM'])\nax.grid(True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nval = [40, 60]\nnames = ['GPT-4 Buyer', 'Claude-2.1 Buyer', 'Claude-2 Buyer', 'GPT-3.5 Buyer']\nsellers = ['GPT-4', 'Claude-2.1', 'Claude-2', 'GPT-3.5']\nx = np.arange(len(names))\ny = np.array([[-10, -10, -10, -10], [-10, -10, -10, -10]])\n\nfig, ax = plt.subplots()\nax.errorbar(x, y[0], fmt='o', c='k')\nax.errorbar(x, y[1], fmt='o', c='k')\nax.errorbar(x, y[2], fmt='o', c='k')\nax.errorbar(x, y[3], fmt='o', c='k')\n\nax.set_title('Sellers (valuation 60)')\nax.set_xlabel('Buyers (valuation 40)')\nax.set_ylabel('Profit')\nax.set_xticks(x)\nax.set_xticklabels(names)\nax.legend(sellers)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 5\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\n# the bar with errorbars\ny = [1, 3, 5, 7]\nyerr = [0.2, 0.4, 0.5, 0.7]\nrects1 = ax.bar(ind, y, width, yerr=yerr)\n\n# the bar without errorbars\ny = [2, 4, 6, 8]\nrects2 = ax.bar(ind + width, y, width)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4'))\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100300\nsigma = 5000\nindex = np.arange(4)\nscore = [90000, 105000, 105000, 90000]\nerror = [300, 200, 300, 100]\n\nfig, ax = plt.subplots()\nax.bar(index, score, yerr=error, ec='black', capsize=7)\n\nax.set_ylabel('Posterior accuracy')\nax.set_title('Accuracy of the posterior distribution')\nax.set_xticks(index)\nax.set_xticklabels(('A', 'B', 'C', 'D'))\nax.yaxis.grid(True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(4)\ny1, y2, y3 = [x + 10 * np.random.rand(30) for _ in range(3)]\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True)\n\nax0.bar(x, y1)\nax0.set_title('A single bar chart')\n\nax1.bar(x, y2)\nax1.set_title('Multiple bar charts')\nax1.legend()\n\nax2.bar(x, y3)\nax2.set_title('Bar charts with a different y-axis scale')\nax2.set_yscale(\"log\", nonposy='clip')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 12\nmen_means = (20, 35, 30, 35, 27)\nmen_std = (2, 3, 4, 1, 2)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, men_means, width, yerr=men_std)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\nax.legend((rects1[0]), ('Men'), loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, (ax1, ax2) = plt.subplots(nrows=2)\n\nN = 5\nmen_means = (20, 35, 30, 35, 27)\nmen_std = (2, 3, 4, 1, 2)\nind = np.arange(N)\nwidth = 0.35\n\nrects1 = ax1.bar(ind, men_means, width, yerr=men_std)\n\nwomen_means = (25, 32, 34, 20, 25)\nwomen_std = (3, 5, 2, 3, 3)\nrects2 = ax1.bar(ind + width, women_means, width, yerr=women_std)\n\nax1.set_ylabel('Scores')\nax1.set_title('Scores by group and gender')\nax1.set_xticks(ind + width / 2)\nax1.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\n\nax2.set_ylabel('Scores')\nax2.set_title('Scores by group and gender')\nax2.set_xticks(ind + width / 2)\nax2.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\nax2.bar(ind, men_means, width, yerr=men_std, color='r')\nax2.bar(ind + width, women_means, width, yerr=women_std, color='y')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data for the top graph\ncountries = ('Africa', 'South America', 'North America', 'Asia', 'Europe')\nemissions = [1200, 1800, 5000, 10400, 3200]\nfig, ax = plt.subplots()\nax.bar(countries, emissions)\nax.set_title('Annual Carbon Dioxide Emissions')\n\n# data for the middle graph\nforest_coverage_rate = {\n    'Africa': 21,\n    'South America': 52,\n    'North America': 34,\n    'Asia': 25,\n    'Europe': 38\n}\nfig, ax = plt.subplots()\nax.bar(forest_coverage_rate.keys(), forest_coverage_rate.values())\nax.set_title('Forest Coverage Rate')\n\n# data for the bottom graph\nrenewable_energy_usage = {\n    'Africa': 18,\n    'South America': 45,\n    'North America': 28,\n    'Asia': 25,\n    'Europe': 34\n}\nfig, ax = plt.subplots()\nax.bar(renewable_energy_usage.keys(), renewable_energy_usage.values())\nax.set_title('Renewable Energy Usage')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3)\n\nN = 4\nmenMeans = (20, 35, 30, 35)\nmenStd = (2, 3, 4, 2)\nwomenMeans = (25, 32, 34, 20)\nwomenStd = (3, 5, 2, 3)\nind = np.arange(N)    # x locations for plotting\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\np1 = ax0.bar(ind, menMeans, width, yerr=menStd)\np2 = ax1.bar(ind, womenMeans, width, yerr=womenStd)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax0.set_ylabel('Scores')\nax0.set_title('Scores by group and gender')\nax0.set_xticks(ind)\nax0.set_xticklabels(('G1', 'G2', 'G3', 'G4'))\nax0.legend((p1[0], p2[0]), ('Men', 'Women'))\n\np1 = ax2.bar(ind, menMeans, width, yerr=menStd, color='tab:blue')\np2 = ax2.bar(ind, womenMeans, width, yerr=womenStd, color='tab:orange')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax2.set_ylabel('Scores')\nax2.set_title('Scores by group and gender')\nax2.set_xticks(ind)\nax2.set_xticklabels(('G1', 'G2', 'G3', 'G4'))\nax2.legend((p1[0], p2[0]), ('Men', 'Women'))\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 5\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\n# the bar with errorbars\np1 = ax.bar(ind, [1, 3, 5, 7, 9], yerr=[0.2, 0.4, 0.5, 0.1, 0.3], capsize=5,\n            color='C0', label='Expert')\n\n# the bar without errorbars\np2 = ax.bar(ind + width, [2, 4, 6, 8, 10], color='C1', label='Blind')\n\n# the bar with errorbars\np3 = ax.bar(ind, [1.5, 3.5, 5.5, 7.5, 9.5], yerr=[0.2, 0.4, 0.5, 0.1, 0.3],\n            capsize=5, color='C2', label='Consultancy')\n\n# the bar with errorbars\np4 = ax.bar(ind + width, [2.5, 4.5, 6.5, 8.5, 10.5], yerr=[0.2, 0.4, 0.5, 0.1, 0.3],\n            capsize=5, color='C3', label='Debate')\n\n# the bar with errorbars\np5 = ax.bar(ind, [1.75, 3.75, 5.75, 7.75, 9.75], yerr=[0.2, 0.4, 0.5, 0.1, 0.3],\n            capsize=5, color='C4', label='Interactive Consultancy')\n\n# the bar with errorbars\np6 = ax.bar(ind + width, [2.75, 4.75, 6.75, 8.75, 10.75], yerr=[0.2, 0.4, 0.5, 0.1, 0.3],\n            capsize=5, color='C5', label='Interactive Debate')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Judge Accuracy (%)')\nax.set_title('Protocol')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human'))\nax.legend(loc='upper right', shadow=True, frameon=True)\n\n# change the style of the errorbars\nfor p in p1 + p2 + p3 + p4 + p5 + p6:\n    p.errorbar(p.get_y(), p.get_y() + 0.1, fmt='o', c=p.get_facecolor())\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nfig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=4, figsize=(6, 6))\n\n# bar plot\nx = np.arange(11)\ny = [1, 4, 6, 4, 5, 7, 9, 6, 3, 5, 5]\nyerr = 0.2\nyerr_neg = y - yerr\nyerr_pos = y + yerr\nax0.errorbar(x, y, yerr=yerr_pos-yerr_neg, fmt='-o')\nax0.set_title('Annual Average Temperature')\n\n# bar plot\nx = np.arange(11)\ny = [1, 4, 6, 4, 5, 7, 9, 6, 3, 5, 5]\nyerr = 0.2\nyerr_neg = y - yerr\nyerr_pos = y + yerr\nax1.errorbar(x, y, yerr=yerr_pos-yerr_neg, fmt='-o')\nax1.set_title('Annual Rainfall')\n\n# bar plot\nx = np.arange(11)\ny = [1, 4, 6, 4, 5, 7, 9, 6, 3, 5, 5]\nyerr = 0.2\nyerr_neg = y - yerr\nyerr_pos = y + yerr\nax2.errorbar(x, y, yerr=yerr_pos-yerr_neg, fmt='-o')\nax2.set_title('Wind Speed')\n\n# bar plot\nx = np.arange(11)\ny = [1, 4, 6, 4, 5, 7, 9, 6, 3, 5, 5]\nyerr = 0.2\nyerr_neg = y - yerr\nyerr_pos = y + yerr\nax3.errorbar(x, y, yerr=yerr_pos-yerr_neg, fmt='-o')\nax3.set_title('Air Quality Index')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nenergy = [-4000, -5000, -6000, 0, 0]\nrenewable = [20, 25, 21, 15, 10]\n\nfig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)\nax1.bar(energy, renewable)\nax2.bar(energy, renewable)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# data for standard model\nx = np.arange(3)\ny1 = [0.15, -0.10, 0.15]\ny2 = [0.25, -0.05, 0.15]\ny3 = [0.30, -0.10, 0.20]\n\n# error bars\nbar_width = 0.25\nerror_config = {'ecolor': '0.3'}\n\nax.bar(x - bar_width, y1, bar_width, yerr=0.05, label='Standard Model', error_kw=error_config)\nax.bar(x, y2, bar_width, yerr=0.05, label='Advanced Model', error_kw=error_config)\nax.bar(x + bar_width, y3, bar_width, yerr=0.05, label='Optimal Model', error_kw=error_config)\n\nax.set_ylabel('Energy Efficiency')\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xticks(x)\nax.set_xticklabels(('Refrigerator', 'Washing Machine', 'Dishwasher'))\nax.legend(loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 4\nmenMeans = (20, 35, 30, 35)\nmenStd = (2, 3, 4, 2)\nwomenMeans = (25, 32, 34, 20)\nwomenStd = (3, 5, 3, 2)\nind = np.arange(N)    # x locations for plotting\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, menMeans, width, yerr=menStd, label='Installation Efficiency')\nrects2 = ax.bar(ind + width, womenMeans, width, yerr=womenStd, label='Maintenance Costs')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('Wind', 'Solar', 'Hydro', 'Nuclear'))\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# Data\nx = ('North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia',\n     'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia')\ngraduation = [85.2, 74.3, 79.1, 75.2, 69.1, 80.0, 70.6, 74.0, 85.0, 75.0]\nhigher_education = [24.8, 25.7, 20.9, 24.8, 30.9, 20.0, 29.4, 26.0, 15.0, 25.0]\n\n# Plot\nax.bar(x, graduation, yerr=graduation, label='High School Graduation', color='C0')\nax.bar(x, higher_education, bottom=graduation, yerr=higher_education,\n       label='Higher Education Enrollment', color='C1')\n\n# Decorations\nax.set_title('Educational Metrics by Region')\nax.set_xlabel('Region')\nax.set_ylabel('Percentage (%)')\nax.legend()\nax.grid(axis='y', alpha=0.7)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nn_groups = 4\nmeans_males = (20, 35, 30, 35)\nstd_males = (2, 3, 4, 1)\nmeans_females = (25, 35, 35, 25)\nstd_females = (3, 5, 3, 3)\n\n# create plot\nfig, ax = plt.subplots()\nindex = np.arange(n_groups)\nbar_width = 0.35\nopacity = 0.8\n\nrects1 = ax.bar(index, means_males, bar_width,\n                alpha=opacity,\n                color='b',\n                yerr=std_males,\n                label='Truthful Recall')\n\nrects2 = ax.bar(index + bar_width, means_females, bar_width,\n                alpha=opacity,\n                color='r',\n                yerr=std_females,\n                label='Misleading Recall')\n\nax.set_xlabel('Product')\nax.set_ylabel('Recall Rate (%)')\nax.set_title('Comparison of Recall Rates Across Products')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(('iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9'))\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# data\ncomplaint_rates = [15, 18, 20, 12, 17, 10, 8]\nsatisfaction_scores = [75, 82, 78, 85, 80, 88, 90]\n\n# bar plot\nax.barh(range(len(complaint_rates)), complaint_rates, label='Complaint Rates', color='C0')\nax.barh(range(len(satisfaction_scores)), satisfaction_scores, label='Satisfaction Scores', color='C1')\n\n# add labels and title\nax.set_xlabel('Complaint Rates')\nax.set_ylabel('Factors')\nax.set_title('Customer Satisfaction Analysis')\n\n# add grid\nax.grid(True)\n\n# add legend\nax.legend()\n\n# add horizontal lines at y=0\nax.axhline(y=0, color='k', linestyle='--')\n\n# set y-axis limits\nax.set_ylim(-0.5, len(complaint_rates)-0.5)\n\n# set y-axis tick labels\nax.set_yticks(range(len(complaint_rates)))\nax.set_yticklabels(['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process'])\n\n# set x-axis limits\nax.set_xlim(0, max(complaint_rates)+10)\n\n# set x-axis tick labels\nax.set_xticks([0, 10, 20, 30, 40, 50, 60, 70, 80])\nax.set_xticklabels(['', '', '', '', '', '', '', '', ''])\n\n# show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nagree_rates = [75, 82, 78, 85, 80, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 17, 10, 8]\n\nfig, ax = plt.subplots()\nax.bar(agree_rates, align='center', color='#DDDDDD')\nax.bar(disagree_rates, align='center', color='#FFA07A')\n\nax.set_ylabel('agree rates')\nax.set_xlabel('Disagree rates')\nax.set_title('Scores by group and gender')\nax.legend(('Group 1', 'Group 2'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 5\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\n# the bar with errorbars\ny = [1, 3, 5, 7, 9]\nyerr = [0.2, 0.4, 0.5, 0.6, 0.4]\nrects1 = ax.bar(ind, y, width, yerr=yerr)\n\n# the bar without errorbars\ny = [2, 4, 6, 8, 10]\nrects2 = ax.bar(ind + width, y, width)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Environmental Factors')\nax.set_title('Impact on Plant Growth (\u0394 to control)')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('Watering Frequency', 'Planting Density',\n                    'Plant Variety', 'CO2 Levels', 'Pesticides'))\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 20\nx = np.linspace(0.1, 0.9, N)\ny1 = (1 - x) ** 2\ny2 = 1.5 * x + 0.7\nyerr = 0.1 + 0.2 * x\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3)\n\nax0.errorbar(x, y1, yerr=yerr, fmt='-o')\nax0.set_title('New York')\n\nax1.errorbar(x, y2, yerr=yerr, fmt='o', capsize=3, linestyle='')\nax1.set_title('Los Angeles')\n\nax2.errorbar(x, y2, yerr=yerr, fmt='o', capsize=3, linestyle='', elinewidth=1, capthick=1)\nax2.set_title('Chicago')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 1.1, 0.1)\ny = x**3\nyerr = 0.2 * x\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=yerr, fmt='-o')\nax.set_title('FashionMNIST (NEURAL)')\nax.set_xlabel('Metric')\nax.set_ylabel('Hyperparameters')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 4\nmen_means = (20, 35, 30, 25)\nmen_std = (2, 3, 4, 1)\nwomen_means = (22, 34, 30, 20)\nwomen_std = (3, 5, 3, 2)\nx = np.arange(N)\nwidth = 0.35\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width/2, men_means, width, yerr=men_std, label='Air Quality')\nrects2 = ax.bar(x + width/2, women_means, width, yerr=women_std, label='Water Quality')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Air Quality Score')\nax.set_xlabel('Water Quality Score')\nax.set_title('Environmental Impact Scores Across Cities')\nax.set_xticks(x)\nax.set_xticklabels(('City A', 'City B', 'City C', 'City D'))\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 5\nmenMeans = (20, 35, 30, 35, 27)\nmenStd = (2, 3, 4, 1, 2)\nwomenMeans = (25, 32, 34, 20, 25)\nwomenStd = (3, 5, 2, 3, 3.5)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n rects1 = ax.bar(ind, menMeans, width, yerr=menStd, color='b', label='Men')\n rects2 = ax.bar(ind + width, womenMeans, width, yerr=womenStd, color='r', label='Women')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\nax.legend()\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 6\nmenMeans = (25, 32, 34, 29, 26, 30)\nmenStd = (2, 3, 4, 1, 2, 3)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, menMeans, width, yerr=menStd)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('True+info (%)')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind)\nax.set_xticklabels(('5%', '10%', '20%', '30%', '40%', '50%'))\nax.yaxis.grid(True)\n\ndef autolabel(rects):\n    \"\"\"\n    Attach a text label above each bar displaying its height\n    \"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,\n                '%d' % int(height),\n                ha='center', va='bottom')\n\nautolabel(rects1)\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nall = 0.834\narg_causal = 0.832\ntest_0 = 0.831\ntest_1 = 0.830\ntest_2 = 0.831\ntest_3 = 0.830\ntest_4 = 0.831\ntest_5 = 0.829\ntest_6 = 0.827\nconstant = 0.826\n\n# example error\nerr = np.array([0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002])\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 4))\n\nax1.bar(['all', 'arg_causal', 'test_0', 'test_1', 'test_2', 'test_3', 'test_4', 'test_5', 'test_6', 'constant'],\n        [all, arg_causal, test_0, test_1, test_2, test_3, test_4, test_5, test_6, constant],\n        yerr=err)\nax1.set_title('Out-of-domain accuracy')\nax1.set_ylabel('Accuracy')\n\nax2.bar(['all', 'arg_causal', 'test_0', 'test_1', 'test_2', 'test_3', 'test_4', 'test_5', 'test_6', 'constant'],\n        [0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04],\n        yerr=err)\nax2.set_title('Shift gap')\nax2.set_ylabel('Shift gap')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnames = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo',\n         '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [0.8, 0.66, 0.55, 0.35, 0.15]\nerror = 0.05\n\nfig, ax = plt.subplots()\nax.bar(names, values, yerr=error)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Objective Value')\nax.set_title('Mini Crosswords Performance')\nax.set_xticks(np.arange(len(names)))\nax.set_xticklabels(names)\nax.axhline(0.675, color='r', linestyle='--')\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nlabels = 'Ground-truth labels', 'Weak labels'\naccuracy = [62.5, 67.5]\nerror = [2.5, 3.5]\n\nfig, ax = plt.subplots()\nax.bar(labels, accuracy, yerr=error)\nax.set_ylabel('Accuracy (%)')\nax.set_title('Accuracy of different models')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Data\nx = [-3.5, -3.25, -3.0, -2.75, -2.5, -2.25, -2.0, -1.75, -1.5]\ny = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\nlabels = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Discourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\n\n# Plotting\nax.barh(y, x, color='lightblue')\n\n# Adding labels\nfor i, label in enumerate(labels):\n    ax.text(0, i, label, va='center', ha='right')\n\n# Adding title\nax.set_title('Your Chart Title Here')\n\n# Adding x-axis label\nax.set_xlabel('A')\n\n# Adding y-axis label\nax.set_ylabel('Categories')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# example data\nx = np.arange(6)\ny = [10, 20, 30, 40, 50, 60]\nyerr = [5, 10, 15, 20, 25, 30]\n\n# plot error bars with negative offset\nax.errorbar(x, y, yerr=yerr, ecolor='blue', fmt='o',\n           capsize=7, capthick=1, linestyle='')\n\n# plot error bars with positive offset\nax.errorbar(x + 1, y - yerr, yerr=yerr, ecolor='blue', fmt='o',\n           capsize=7, capthick=1, linestyle='--')\n\n# plot error bars with both positive and negative offset\nax.errorbar(x + 2, y, yerr=yerr, ecolor='blue', fmt='o',\n           capsize=7, capthick=1, linestyle='-.')\n\n# plot error bars with both positive and negative offset\nax.errorbar(x + 3, y + yerr, yerr=yerr, ecolor='blue', fmt='o',\n           capsize=7, capthick=1, linestyle='-.')\nax.set_xlim(0, 6)\nax.set_ylim(0, 80)\n\nax.axhline(20, color='gray', linestyle='-', linewidth=1)\nax.axhline(40, color='gray', linestyle='-', linewidth=1)\nax.axhline(60, color='gray', linestyle='-', linewidth=1)\n\nax.set_title('Error bar offset')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\n\n# example error bar values\nerror = [0.7, 0.5, 0.4, 1.0, 1.2]\n\n# plot error bars with positive values\nplt.errorbar(x, y, yerr=error)\n\n# plot error bars with negative values\nplt.errorbar(x, y, yerr=-error)\n\n# plot error bars with symmetric error values\nplt.errorbar(x, y, yerr=error, capsize=3)\n\n# plot error bars with asymmetric error values\nlower_error = [0.4, 0.3, 0.2, 0.1, 0.0]\nupper_error = [0.8, 0.5, 0.4, 0.3, 0.2]\nplt.errorbar(x, y, yerr=(lower_error, upper_error))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 0.5, 0.1)\ny1 = x ** 2 * np.sin(4 * np.pi * x)\ny2 = x ** 2 * np.sin(2 * 4 * np.pi * x)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, color='tab:blue', lw=2, label='Dataset mean')\nax.plot(x, y2, color='tab:red', ls='--', lw=2, label='Mean')\n\nax.set_xlim([0.1, 0.5])\nax.set_ylim([0.15, 0.35])\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5])\nax.set_yticks([0.2, 0.25, 0.3, 0.35])\n\nax.grid(True)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# example data\nx = np.arange(1, 10)\ny1 = x + 3 * np.random.rand(8)\ny2 = x - 3 * np.random.rand(8)\n\nax.errorbar(x, y1, xerr=0.2, yerr=4, capsize=7, fmt='o', c='black')\nax.errorbar(x, y2, xerr=0.5, yerr=5, capsize=7, fmt='o', c='gray')\n\nax.set_title('Error bars with different sizes')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nx = np.arange(7)\ny = [10, 5, 2, 10, 5, 2, 10]\nyerr = [0.2, 0.4, 0.4, 0.3, 0.4, 0.4, 0.3]\n\nax.errorbar(x, y, yerr=yerr, fmt='o', capsize=5, elinewidth=2,\n            label='Unique speaker count mean')\n\nax.errorbar(x, y + 1, yerr=yerr, fmt='o', capsize=5, elinewidth=2,\n            label='Unique shouter count mean')\n\nax.errorbar(x, y + 2, yerr=yerr, fmt='o', capsize=5, elinewidth=2,\n            label='Dataset unique shouter count mean')\n\nax.set_title('Dataset unique shouter count mean')\nax.legend()\nax.set_ylabel('Number of speakers')\nax.set_xticks(x)\nax.set_xlim(-.5, 6.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nx = ['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT']\ny = [0.225, 0.247, 0.193, 0.161, 0.097]\nyerr = [0.025, 0.025, 0.025, 0.025, 0.025]\n\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='blue', capsize=5)\n\nax.set_ylabel('Female Face presence (Fraction of videos)')\nax.set_xlabel('')\n\nax.axhline(0.245, color='gray', linestyle='--', linewidth=2)\nax.set_ylim(0.0, 0.25)\nax.set_xlim(-0.1, 0.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 6)\ny = [1, 2, 3, 4, 5]\nyerr = [0.2, 0.4, 0.4, 0.7, 0.5]\n\nfig, ax = plt.subplots()\n\n# standard error bars\nax.errorbar(x, y, yerr=yerr, fmt='o', label='standard')\n\n# upper limits\nax.errorbar(x, y + 1, yerr=yerr, uplims=True, fmt='o', label='upper limits')\n\n# lower limits\nax.errorbar(x, y + 2, yerr=yerr, lolims=True, fmt='o',\n            label='lower limits')\n\n# both upper and lower limits\nax.errorbar(x, y + 3, yerr=yerr, uplims=True, lolims=True,\n            fmt='o', label='upper and lower limits')\n\n# random errorbars\nax.errorbar(x, y + 4, yerr=yerr, fmt='o', capsize=3,\n            label='random')\n\nax.legend()\nplt.title('Errorbar upper and lower limits')\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 4, 0.5)\ny1 = np.exp(-1.4 * x)\ny2 = np.exp(-0.4 * x)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.errorbar(x, y1, yerr=0.2, fmt='-o')\nax0.set_title('variable, symmetric error')\n\nax1.errorbar(x, y2, yerr=0.2, fmt='o')\nax1.set_yscale(\"log\")\nax1.set_title('variable, symmetric error')\nax1.set_ylim(1e-1, 1e0)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nx = np.arange(10)\ny = np.random.randn(10)\nyerr = np.random.rand(10) * 2 + 3\n\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='green', capsize=5,\n            label='variable, asymmetric error')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(20)\ny = -np.sin(x / 2)\n\n# asymmetric error\nerr = 0.2 * np.abs(np.diff(y))\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, xerr=None, yerr=err, ecolor='purple', fmt='o')\nax.set_title('variable, asymmetric error')\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.patches import PathPatch\nfrom matplotlib.path import Path\nfrom matplotlib.transforms import Affine2D, BboxTransformTo\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Create a path with a single cycle\npath_data = [(Path.MOVETO, (0.0, 0.0)),\n             (Path.LINETO, (1.0, 0.0)),\n             (Path.CLOSEPOLY, (0.0, 0.0))]\n\ncodes, verts = zip(*path_data)\n\npath = Path(verts)\npatch = PathPatch(path, facecolor='none', edgecolor='black')\nax.add_patch(patch)\n\n# Create a transform to scale and translate the path\ntrans = Affine2D().scale(0.5).translate(3, 4)\n\n# Create a new patch with the transformed path\npatch_transformed = PathPatch(path, facecolor='none', edgecolor='black',\n                              transform=trans)\nax.add_patch(patch_transformed)\n\n# Create a transform to scale and translate the path\ntrans = Affine2D().scale(0.5).translate(3, 4).append(BboxTransformTo(ax.bbox))\n\n# Create a new patch with the transformed path\npatch_transformed = PathPatch(path, facecolor='none', edgecolor='black',\n                              transform=trans)\nax.add_patch(patch_transformed)\n\nax.set_xlim(-1, 11)\nax.set_ylim(-1, 11)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\nG = nx.Graph()\nG.add_edges_from([(1, 2), (1, 3), (1, 4), (2, 5), (2, 6), (3, 7), (3, 8), (4, 9), (4, 10), (5, 11), (5, 12), (6, 13), (6, 14), (7, 15), (7, 16), (8, 17), (8, 18), (9, 19), (9, 20), (10, 21), (10, 22), (11, 23), (11, 24), (12, 25), (12, 26), (13, 27), (13, 28), (14, 29), (14, 30), (15, 31), (15, 32), (16, 33), (16, 34), (17, 35), (17, 36), (18, 37), (18, 38), (19, 39), (19, 40), (20, 41), (20, 42), (21, 43), (21, 44), (22, 45), (22, 46), (23, 47), (23, 48), (24, 49), (24, 50), (25, 51), (25, 52), (26, 53), (26, 54), (27, 55), (27, 56), (28, 57), (28, 58), (29, 59), (29, 60), (30, 61), (30, 62), (31, 63), (31, 64), (32, 65), (32, 66), (33, 67), (33, 68), (34, 69), (34, 70), (35, 71), (35, 72), (36, 73), (36, 74), (37, 75), (37, 76), (38, 77), (38, 78), (39, 79), (39, 80), (40, 81), (40, 82), (41, 83), (41, 84), (42, 85), (42, 86), (43, 87), (43, 88), (44, 89), (44, 90), (45, 91), (45, 92), (46, 93), (46, 94), (47, 95), (47, 96), (48, 97), (48, 98), (49, 99), (49, 100), (50, 101), (50, 102), (51, 103), (51, 104), (52, 105), (52, 106), (53, 107), (53, 108), (54, 109), (54, 110), (55, 111), (55, 112), (56, 113), (56, 114), (57, 115), (57, 116), (58, 117), (58, 118), (59, 119), (59, 120), (60, 121), (60, 122), (61, 123), (61, 124), (62, 125), (62, 126), (63, 127), (63, 128), (64, 129), (64, 130), (65, 131), (65, 132), (66, 133), (66, 134), (67, 135), (67, 136), (68, 137), (68, 138), (69, 139), (69, 140), (70, 141), (70, 142), (71, 143), (71, 144), (72, 145), (72, 146), (73, 147), (73, 148), (74, 149), (74, 150), (75, 151), (75, 152), (76, 153), (76, 154), (77, 155), (77, 156), (78, 157), (78, 158), (79, 159), (79, 160), (80, 161), (80, 162), (81, 163), (81, 164), (82, 165), (82, 166), (83, 167), (83, 168), (84, 169), (84, 170), (85, 171), (85, 172), (86, 173), (86, 174), (87, 175), (87, 176), (88, 177), (88, 178), (89, 179), (89, 180), (90, 181), (90, 182), (91, 183), (91, 184), (92, 185), (92, 186), (93, 187), (93, 188), (94, 189), (94, 190), (95, 191), (95, 192), (96, 193), (96, 194), (97, 195), (97, 196), (98, 197), (98, 198), (99, 199), (99, 200), (100, 201), (100, 202), (101, 203), (101, 204), (102, 205), (102, 206), (103, 207), (103, 208), (104, 209), (104, 210), (105, 211), (105, 212), (106, 213), (106, 214), (107, 215), (107, 216), (108, 217), (108, 218), (109, 219), (109, 220), (110, 221), (110, 222), (111, 223), (111, 224), (112, 225), (112, 226), (113, 227), (113, 228), (114, 229), (114, 230), (115, 231), (115, 232), (116, 233), (116, 234), (117, 235), (117, 236), (118, 237), (118, 238), (119, 239), (119, 240), (120, 241), (120, 242), (121, 243), (121, 244), (122, 245), (122, 246), (123, 247), (123, 248), (124, 249), (124, 250), (125, 251), (125, 252), (126, 253), (126, 254), (127, 255), (127, 256), (128, 257), (128, 258), (129, 259), (129, 260), (130, 261), (130, 262), (131, 263), (131, 264), (132, 265), (132, 266), (133, 267), (133, 268), (134, 269), (134, 270), (135, 271), (135, 272), (136, 273), (136, 274), (137, 275), (137, 276), (138, 277), (138, 278), (139, 279), (139, 280), (140, 281), (140, 282), (141, 283), (141, 284), (142, 285), (142, 286), (143, 287), (143, 288), (144, 289), (144, 290), (145, 291), (145, 292), (146, 293), (146, 294), (147, 295), (147, 296), (148, 297), (148, 298), (149, 299), (149, 300), (150, 301), (150, 302), (151, 303), (151, 304), (152, 305), (152, 306), (153, 307), (153, 308), (154, 309), (154, 310), (155, 311), (155, 312), (156, 313), (156, 314), (157, 315), (157, 316), (158, 317), (158, 318), (159, 319), (159, 320), (160, 321), (160, 322), (161, 323), (161, 324), (162, 325), (162, 326), (163, 327), (163, 328), (164, 329), (164, 330), (165, 331), (165, 332), (166, 333), (166, 334), (167, 335), (167, 336), (168, 337), (168, 338), (169, 339), (169, 340), (170, 341), (170, 342), (171, 343), (171, 344), (172, 345), (172, 346), (173, 347), (173, 348), (174, 349), (174, 350), (175, 351), (175, 352), (176, 353), (176, 354), (177, 355), (177, 356), (178, 357), (178, 358), (179, 359), (179, 360), (180, 361), (180, 362), (181, 363), (181, 364), (182, 365), (182, 366), (183, 367), (183, 368), (184, 369), (184, 370), (185, 371), (185, 372), (186, 373), (186, 374), (187, 375), (187, 376), (188, 377), (188, 378), (189, 379), (189, 380), (190, 381), (190, 382), (191, 383), (191, 384), (192, 385), (192, 386), (193, 387), (193, 388), (194, 389), (194, 390), (195, 391), (195, 392), (196, 393), (196, 394), (197, 395), (197, 396), (198, 397), (198, 398), (199, 399), (199, 400), (200, 401), (200, 402), (201, 403), (201, 404), (202, 405), (202, 406), (203, 407), (203, 408), (204, 409), (204, 410), (205, 411), (205, 412), (206, 413), (206, 414), (207, 415), (207, 416), (208, 417), (208, 418), (209, 419), (209, 420), (210, 421), (210, 422), (211, 423), (211, 424), (212, 425), (212, 426), (213, 427), (213, 428), (214, 429), (214, 430), (215, 431), (215, 432), (216, 433), (216, 434), (217, 435), (217, 436), (218, 437), (218, 438), (219, 439), (219, 440), (220, "}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 12\nangles = np.linspace(0.0, 2 * np.pi, N, endpoint=False).tolist() + [0.0]\nradii = np.cumsum(np.random.rand(N)).tolist()\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(angles, radii, 'o-')\nax.set_rmax(1.5)\nax.set_rticks([0.5, 1, 1.5])  # Less radial ticks\nax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line\nax.grid(True)\n\nax.set_title(\"A sample plot on a polar axis\", va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.patches import PathPatch\nfrom matplotlib.path import Path\nfrom matplotlib.transforms import Affine2D, BboxTransformTo\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Create a path with a triangle at the top and a rectangle at the bottom\npath_data = [(0, \"M\"), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (0, 1),\n             (0, 2), (1, 2), (1, 1), (1, 0), (1, 0), (0, 0)]\ncodes, verts = zip(*path_data)\npath = Path(verts, codes)\n\n# Create a transform to convert from data to axes coordinates\ndata2axes = Affine2D().scale(1, -1).translate(1, 1)\nbbox = BboxTransformTo(data2axes).transform_path(Bbox.from_bounds(0, 0, 2, 3))\n\n# Create a patch from the path and the transform\npatch = PathPatch(path, transform=bbox)\n\n# Add the patch to the axes\nax.add_patch(patch)\n\n# Set the limits of the axes to be equal\nax.set_xlim(-1, 2)\nax.set_ylim(-1, 2)\n\n# Set the aspect ratio to be equal\nax.set_aspect(\"equal\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.patches import PathPatch\nfrom matplotlib.path import Path\nfrom matplotlib.transforms import Affine2D, BboxTransformTo\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Create a path with a triangle and a circle\npath_data = [(0, \"M\"), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0),\n             (0, 0), (0, -1), (1, -1), (1, 0), (0, 0)]\n\ncodes, verts = zip(*path_data)\npath = Path(verts, codes)\n\n# Create a transform to scale the path by 1.5 in x and 1.5 in y\ntrans = Affine2D().scale(1.5, 1.5)\n\n# Create a patch from the path and transform it\npatch = PathPatch(path, transform=trans)\nax.add_patch(patch)\n\n# Create a second path with a circle\npath_data = [(0, \"M\"), (0, 0), (0, 1), (0, 0)]\ncodes, verts = zip(*path_data)\npath = Path(verts, codes)\n\n# Create a transform to scale the path by 1.5 in x and 1.5 in y\ntrans = Affine2D().scale(1.5, 1.5)\n\n# Create a patch from the path and transform it\npatch = PathPatch(path, transform=trans)\nax.add_patch(patch)\n\n# Create a third path with a triangle\npath_data = [(0, \"M\"), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)]\ncodes, verts = zip(*path_data)\npath = Path(verts, codes)\n\n# Create a transform to scale the path by 1.5 in x and 1.5 in y\ntrans = Affine2D().scale(1.5, 1.5)\n\n# Create a patch from the path and transform it\npatch = PathPatch(path, transform=trans)\nax.add_patch(patch)\n\n# Set the limits of the axes\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\n\n# Set the aspect ratio of the axes\nax.set_aspect(\"equal\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\ncmap = plt.cm.RdYlGn\nnorm = plt.Normalize(vmin=0, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nax.imshow(sm.to_rgba(np.arange(25).reshape((5, 5)), alpha=0))\n\n# Add colorbar\ncbar = fig.colorbar(sm)\ncbar.ax.set_yticklabels(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\ncbar.ax.set_ylabel('AVG')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\ncmap = plt.cm.RdYlGn\nvmin = 0.0\nvmax = 100.0\ndata = np.random.rand(6, 6)\nim = ax.imshow(data, cmap=cmap, interpolation='nearest',\n               vmin=vmin, vmax=vmax)\n\nax.set_title('Voter\\nVotee')\nax.set_xticks(np.arange(6))\nax.set_yticks(np.arange(6))\nax.set_xticklabels(['Werewolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain'])\nax.set_yticklabels(['Werewolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain'])\n\nplt.colorbar(im, ax=ax)\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\ncmap = plt.colormaps[\"plasma\"]\ndata = np.random.rand(5, 5)\nim = ax.imshow(data, cmap=cmap)\n\nax.set_title(\"Players\")\nax.set_xticks(np.arange(data.shape[1]))\nax.set_yticks(np.arange(data.shape[0]))\nax.set_xticklabels([\"D. Fox\", \"T. Haliburton\", \"M. Harkless\", \"H. Barnes\", \"C. Metu\"])\nax.set_yticklabels([\"D. Fox\", \"T. Haliburton\", \"M. Harkless\", \"H. Barnes\", \"C. Metu\"])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.random.randn(10, 10)\ny = np.random.randn(10, 10)\n\n# plot with different colors and colorbar\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].imshow(x, cmap='viridis')\naxs[0, 0].set_title('LIVE')\naxs[0, 0].colorbar()\n\naxs[0, 1].imshow(y, cmap='plasma')\naxs[0, 1].set_title('CSIQ')\naxs[0, 1].colorbar()\n\naxs[1, 0].imshow(x, cmap='viridis', aspect='auto')\naxs[1, 0].set_title('Predicted category')\naxs[1, 0].colorbar()\n\naxs[1, 1].imshow(y, cmap='plasma', aspect='auto')\naxs[1, 1].set_title('Predicted category')\naxs[1, 1].colorbar()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nD2 = np.random.rand(4, 4)\nD1 = np.random.rand(4, 4)\nD0 = np.random.rand(4, 4)\nequal = D2 + D1 + D0\n\nax.pcolormesh(D2, cmap='Blues')\nax.pcolormesh(D1, cmap='Greens')\nax.pcolormesh(D0, cmap='Oranges')\nax.pcolormesh(equal, cmap='Reds')\n\nax.set_xlabel('D''2')\nax.set_ylabel('LOH0')\nax.set_title('D''0')\nax.set_xticks(np.arange(4))\nax.set_xticklabels((' ', ' ', ' ', ' '))\nax.set_yticks(np.arange(4))\nax.set_yticklabels((' ', ' ', ' ', ' '))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\ncmap = plt.colormaps[\"RdBu_r\"]\nnorm = plt.Normalize(-1, 1)\nrects = ax.bar(np.arange(12), np.random.randn(12), color=cmap(norm))\nfor rect in rects:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()/2., height,\n            '%0.1f' % height, ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nN = 4\nind = np.arange(N)\nwidth = 0.25\n\nrects1 = ax.bar(ind, [1, 3, 5, 9], width, color='b')\nrects2 = ax.bar(ind + width, [12, 9, 7, 3], width, color='r')\n\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4'))\n\nfig, ax = plt.subplots()\nN = 4\nind = np.arange(N)\nwidth = 0.25\n\np1 = ax.bar(ind, [1, 3, 5, 9], width, color='b')\np2 = ax.bar(ind, [12, 9, 7, 3], width, bottom=[1, 3, 5, 9], color='r')\n\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4'))\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(p1)\nautolabel(p2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nN = 9\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\np1 = ax.bar(ind, 10+np.random.randn(N), width)\np2 = ax.bar(ind, 10+2+np.random.rand(N), width, bottom=np.array([10+b for b in np.random.rand(N)]), bottom=True)\np3 = ax.bar(ind, 10+3+np.random.rand(N), width, bottom=[10+b for b in np.random.rand(N)], bottom=True)\n\nax.set_xlabel('Product and Quarter')\nax.set_ylabel('Sales')\nax.set_title('Sales Performance Heatmap')\nax.set_xticks(ind)\nax.set_xticklabels(('Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'))\nax.legend((p1[0], p2[0], p3[0]), ('Product A', 'Product B', 'Product C'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\ncmap = plt.cm.get_cmap('RdYlGn')\nim = ax.imshow(np.random.rand(10, 10), cmap=cmap)\nax.set_title(\"context\\noption\\ncot\\nlast\")\nplt.colorbar(im, ax=ax)\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.ticker import MaxNLocator\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute data for the plot\nx = np.linspace(0, 1, 100)\ny = np.sin(x**2)\n\n# Create the first plot\nfig, ax = plt.subplots()\nax.plot(x, y, color='tab:blue')\nax.set_title('Weather')\n\n# Create the second plot\nfig, ax = plt.subplots()\nax.plot(x, y, color='tab:orange')\nax.set_title('Informer')\n\n# Create the third plot\nfig, ax = plt.subplots()\nax.plot(x, y, color='tab:green')\nax.set_title('Reformer')\n\n# Create the fourth plot\nfig, ax = plt.subplots()\nax.plot(x, y, color='tab:red')\nax.set_title('Transformer')\n\n# Add a colorbar\ncbar = fig.colorbar(cm.ScalarMappable(cmap=cm.coolwarm), ax=axs)\ncbar.set_label('Correlation coefficient', rotation=270, va=\"top\")\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, [ax1, ax2] = plt.subplots(nrows=2, sharex=True)\nfig.subplots_adjust(hspace=0.5)\n\nN = 6\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\np1 = ax1.bar(ind, [15.7, 28.1, 2.6, 14.5, 28.6, 10.5], width)\np2 = ax1.bar(ind + width, [76.0, 2.1, 0.5, 4.1, 8.1, 9.2], width, color='b')\n\np3 = ax1.bar(ind, [50.8, 12.3, 0.9, 6.2, 15.5, 14.3], width, color='g')\np4 = ax1.bar(ind + width, [49.2, 11.2, 0.6, 7.8, 17.3, 13.9], width, color='r')\n\np5 = ax1.bar(ind, [50.3, 12.0, 0.9, 7.0, 13.4, 16.3], width, color='m')\n\n# ax1.set_ylabel('Scores')\nax1.set_title('(a) Role voting in the Werewolf game')\nax1.set_xticks(ind + width / 2)\nax1.set_xticklabels(('Werewolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain'))\nax1.legend((p1[0], p2[0]), ('Villager', 'Hunter'), loc='upper left')\n\n# We create the data for the second plot\ny_pos = np.arange(len(ind))\ndata = [31.5, 4.3, 17.4, 2.5, 27.1, 17.3]\ndata2 = [35.3, 2.2, 4.0, 32.5, 26.0, 0.8]\n\np6 = ax2.barh(y_pos, data, align='center', color='b', height=0.4)\np7 = ax2.barh(y_pos, data2, align='center', color='r', height=0.4)\n\nax2.set_yticks(y_pos)\nax2.set_yticklabels(('Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf', 'Abstain'))\nax2.invert_yaxis()  # labels read top-to-bottom\nax2.set_xlabel('Percentage')\nax2.set_title('(b) Final state of roles')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Compute the x and y axis ranges\nymin, ymax = ax.get_ylim()\nxmin, xmax = ax.get_xlim()\n\n# Compute the color data - we use the angle in degrees, scaled\n# linearly to the color data range\nangle = np.deg2rad(np.linspace(-45, 45, 20))\ncolor_data = np.cos(angle)\n\n# Compute the x and y coordinates of the bars\nx = [xmin + (xmax - xmin) * i for i in range(len(color_data))]\ny = [ymin + (ymax - ymin) * i for i in range(len(color_data))]\n\n# Create the bars, and set initial opacity\nbars = ax.bar(x, color_data, color='b', alpha=.5)\n\n# Loop over the bars, and set random opacity and color\nfor bar in bars:\n    bar.set_alpha(np.random.rand())\n    bar.set_color(np.random.rand(3))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(2, 1)\naxs[0].bar(['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy'], [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10])\naxs[0].set_title('Original')\naxs[1].bar(['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy'], [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00])\naxs[1].set_title('Adjusted')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\ncmap = plt.cm.Blues_r\nim = ax.imshow([[0.5, 0.4], [0.2, 0.7]])\n\n# We want to draw on only the right half of each circle.\n# To do so, we need to make a mask that corresponds to the non-zero\n# portion of the circle.  We can accomplish this using a boolean array\n# of the same dimensions as our image, and setting the values of the\n# mask to True where the image is non-zero.  We then need to invert\n# this mask so that the non-zero portion becomes False, and the zero\n# portion becomes True.  This will allow us to set the color of the\n# non-zero portion of the circle to be transparent.\ncircle = plt.Circle((0.5, 0.5), 0.3, facecolor='none')\nax.add_patch(circle)\nmask = circle.get_mask()\nmask.set_figure(None)\nmask.set_axes(None)\nmask.set_transform(circle.get_transform())\nmask.set_color('w')\nim.set_array(np.ma.array([[0.5, 0.4], [0.2, 0.7]], mask=mask))\nim.set_clim(0, 1)\nax.set_title('Voter\\nHunter')\nax.set_xlabel('Votee')\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(9, 4))\n\nranks = [17, 24, 23]\nnames = [\"Baseline\", \"Reversed Order\", \"Reversed IDs\"]\ncolors = [\"#e43a3a\", \"#3498db\", \"#9b59b6\"]\n\nax1.barh(names, ranks, color=colors)\nax1.set_xlabel(\"Rank\")\nax1.set_title(\"LLaMA\")\n\nranks = [5, 17, 1]\nnames = [\"Baseline\", \"Reversed Order\", \"Reversed IDs\"]\ncolors = [\"#2980b9\", \"#e74c3c\", \"#34495e\"]\n\nax2.barh(names, ranks, color=colors)\nax2.set_xlabel(\"Rank\")\nax2.set_title(\"GPT\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nN = 10\ndata = np.arange(N)\nwidth = 0.35\n\np1 = ax0.bar(range(N), data, width, color='C0')\np2 = ax0.bar(range(N), data, width, bottom=data, color='C1')\n\np3 = ax1.bar(range(N), data, width, color='C0')\np4 = ax1.bar(range(N), data, width, bottom=data, color='C1')\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata = np.random.rand(7, 6)\n\nfig, ax = plt.subplots()\nim = ax.imshow(data)\n\n# we want to show all ticks, and no axes\nax.set_xticks(np.arange(data.shape[1]))\nax.set_yticks(np.arange(data.shape[0]))\nax.set_xticklabels(('Farmer Joe', 'Upland Bros.', 'Smith Gardening',\n                    'Agrifun', 'Organiculture', 'BioGoods Ltd.',\n                    'Cornylee Corp.'))\nax.set_yticklabels(('cucumber', 'tomato', 'lettuce', 'asparagus',\n                    'potato', 'wheat', 'barley'))\n\n# Show all ticks and label them with the respective list entries\nax.set_xticklabels(ax.get_xticks(), rotation=45, ha=\"right\",\n                   rotation_mode=\"anchor\")\nax.set_yticklabels(ax.get_yticks())\n\n# Rotate the tick labels and set their alignment.\nfor label in ax.get_xticklabels():\n    label.set_rotation(45)\n    label.set_horizontalalignment(\"right\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(nrows=2, ncols=2)\ncmap = plt.cm.get_cmap('RdYlGn')\n\n# 2D array of harvest data\nharvest = np.array([[0.8, 2.4, 2.5, 3.9, 0.0, 4.0, 0.0],\n                    [2.4, 0.0, 4.0, 1.0, 2.7, 0.0, 0.0],\n                    [1.1, 2.4, 0.8, 4.3, 1.9, 4.4, 0.0],\n                    [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],\n                    [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],\n                    [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],\n                    [0.1, 2.0, 0.0, 1.4, 0.0, 0.0, 6.3]])\n\n# 2D array of harvest data\nstore_sales = np.array([[46, 49, 66, 69, 69, 11, 85],\n                        [23, 38, 89, 72, 90, 90, 14],\n                        [60, 67, 41, 89, 48, 90, 83],\n                        [39, 27, 79, 74, 11, 22, 82],\n                        [71, 81, 49, 66, 84, 90, 51],\n                        [31, 21, 21, 16, 41, 34, 67],\n                        [11, 59, 34, 33, 76, 25, 37]])\n\n# 2D array of harvest data\nbook_sales = np.array([[46, 49, 66, 69, 69, 11, 85],\n                       [23, 38, 89, 72, 90, 90, 14],\n                       [60, 67, 41, 89, 48, 90, 83],\n                       [39, 27, 79, 74, 11, 22, 82],\n                       [71, 81, 49, 66, 84, 90, 51],\n                       [31, 21, 21, 16, 41, 34, 67],\n                       [11, 59, 34, 33, 76, 25, 37]])\n\n# 2D array of harvest data\ncycle_quality = np.array([['C', 'E', 'D', 'D', 'E', 'D'],\n                          ['E', 'E', 'D', 'C', 'C', 'D'],\n                          ['E', 'D', 'C', 'E', 'F', 'C'],\n                          ['D', 'D', 'D', 'D', 'F', 'B'],\n                          ['B', 'D', 'C', 'E', 'C', 'E'],\n                          ['D', 'D', 'D', 'C', 'D', 'E']])\n\n# 2D array of harvest data\nquality_cycle = np.array([['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n                          ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n                          ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n                          ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n                          ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n                          ['A', 'B', 'C', 'D', 'E', 'F', 'G']])\n\n# 2D array of harvest data\ncorrelation = np.array([[-.23, .81, -.56, .65, -.21, -.21],\n                        [-.38, .48, -.15, .86, -.38, .66],\n                        [.81, -.38, -.15, .86, .86, -.23],\n                        [-.56, .48, -.15, -.04, -.04, -.41],\n                        [.65, -.38, .86, -.04, -.04, -.16],\n                        [-.21, -.66, -.23, -.41, .05, .87],\n                        [-.21, -.71, -.25, -.44, -.16, .87]])\n\n# Plot the harvest data\nim = ax1.imshow(harvest, cmap=cmap)\nax1.set_title('harvest [t/year]')\nax1.set_xlabel('producer')\nax1.set_ylabel('crop')\nax1.set_xticks(np.arange(7))\nax1.set_yticks(np.arange(7))\nax1.set_xticklabels(['Farmer Joe', 'Upland Bros.', 'BioGoods Ltd.', 'Comylee Corp.', 'Organicute', 'Agrifun', 'Smith Gardening'])\nax1.set_yticklabels(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley'])\ncb = fig.colorbar(im, ax=ax1)\ncb.set_label('weekly sold copies')\n\n# Plot the store sales data\nim = ax2.imshow(store_sales, cmap=cmap)\nax2.set_title('store sales')\nax2.set_xlabel('store')\nax2.set_ylabel('book')\nax2.set_xticks(np.arange(7))\nax2.set_yticks(np.arange(7))\nax2.set_xticklabels(['Store A', 'Store B', 'Store C', 'Store D', 'Store E', 'Store F', 'Store G'])\nax2.set_yticklabels(['Book 1', 'Book 2', 'Book 3', 'Book 4', 'Book 5', 'Book 6', 'Book 7'])\ncb = fig.colorbar(im, ax=ax2)\ncb.set_label('weekly sold copies')\n\n# Plot the book sales data\nim = ax3.imshow(book_sales, cmap=cmap)\nax3.set_title('book sales')\nax3.set_xlabel('book')\nax3.set_ylabel('store')\nax3.set_xticks(np.arange(7))\nax3.set_yticks(np.arange(7))\nax3.set_xticklabels(['Book 1', 'Book 2', 'Book 3', 'Book 4', 'Book 5', 'Book 6', 'Book 7'])\nax3.set_yticklabels(['Store A', 'Store B', 'Store C', 'Store D', 'Store E', 'Store F', 'Store G'])\ncb = fig.colorbar(im, ax=ax3)\ncb.set_label('weekly sold copies')\n\n# Plot the cycle quality data\nim = ax4.imshow(cycle_quality, cmap=cmap)\nax4.set_title('cycle quality')\nax4.set_xlabel('cycle')\nax4.set_ylabel('quality')\nax4.set_xticks(np.arange(7))\nax4.set_yticks(np.arange(7))\nax4.set_xticklabels(['Cycle 1', 'Cycle 2', 'Cycle 3', 'Cycle 4', 'Cycle 5', 'Cycle 6'])\nax4.set_yticklabels(['Prod. 10', 'Prod. 20', 'Prod. 30', 'Prod. 40', 'Prod. 50', 'Prod. 60'])\ncb = fig.colorbar(im, ax=ax4)\ncb.set_label('Quality Rating')\n\n# Plot the correlation data\nim = ax5.imshow(correlation, cmap=cmap)\nax5.set_title('correlation coeff.')\nax5.set_xlabel('crop')\nax5.set_ylabel('crop')\nax5.set_xticks(np.arange(7))\nax5.set_yticks(np.arange(7))\nax5.set_xticklabels(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley'])\nax5.set_yticklabels(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley'])\ncb = fig.colorbar(im, ax=ax5)\ncb.set_label('correlation coeff.')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom scipy import signal\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Create a 2D array of random values\nx = np.random.randn(10, 10)\n\n# Define the interpolation methods\nmethods = [None,\n           'none',\n           'nearest',\n           'bilinear',\n           'bicubic',\n           'spline16',\n           'spline36',\n           'hanning',\n           'hamming',\n           'hermite',\n           'kaiser',\n           'quadric',\n           'catrom',\n           'gaussian',\n           'bessel',\n           'mitchell',\n           'sinc',\n           'lanczos']\n\n# Plot the results\nfig, axs = plt.subplots(nrows=3, ncols=6, figsize=(9, 6),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor ax, interp_method in zip(axs.flat, methods):\n    ax.imshow(x, interpolation=interp_method, cmap='viridis')\n    ax.set_title(interp_method)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import patheffects\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, axs = plt.subplots(2, 1, sharex=True, sharey=True)\nfig.suptitle('default: no edges')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\ndata = np.random.rand(10, 10)\n\nim = axs[0].imshow(data, cmap='viridis')\naxs[0].set_title('default: no edges')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\ndata = np.random.rand(10, 10)\n\nim = axs[1].imshow(data, cmap='viridis', path_effects=[patheffects.withStroke(linewidth=5, foreground=\"w\")])\naxs[1].set_title('thick edges')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\ncmap = plt.colormaps[\"tab20c\"]\ndata = np.random.rand(7, 7)\nim = ax.imshow(data, cmap=cmap)\n\nax.set_xticks(np.arange(7))\nax.set_yticks(np.arange(7))\nax.set_xticklabels(['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G'])\nax.set_yticklabels(['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes'])\n\nfor (i, j), z in np.ndenumerate(data):\n    ax.text(j, i, '{:.1f}'.format(z),\n            ha='center', va='center',\n            color='w' if z < 2 else 'k')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.barh([1, 2, 3, 4], [17, 36, 28, 23], left=[79, 53, 34, 35], height=10,\n        tick_label=['Low', 'Medium', 'High', 'Very High'])\nax.set_xlabel('Degree of acceptance of a product')\nax.set_xlim(0, 100)\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\ncmap = plt.colormaps[\"Blues\"]\nnorm = plt.Normalize(vmin=0.1, vmax=0.9)\nX = np.arange(7)\nY = np.arange(7)\nZ = np.random.rand(7, 7)\nim = ax.imshow(Z, cmap=cmap, norm=norm)\n\nax.set_title(\"Bottleneck Distance\")\nax.set_xlabel(\"Wasserstein Distance\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nn = 12\nX = np.linspace(-3, 3, n)\nY = np.linspace(-3, 3, n * 2)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X ** 2 + Y ** 2)\nZ = np.sin(R)\n\nfig, ax = plt.subplots()\ncmap = cm.get_cmap('PRGn', 8)\nnorm = plt.Normalize(-1, 1)\npcm = ax.pcolormesh(X, Y, Z,\n                    cmap=cmap, norm=norm)\nfig.colorbar(pcm, ax=ax, extend='both')\n\nax.set_xlabel('Timeshift')\nax.set_ylabel('Scales')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nN = 256\nX = np.random.rand(N)\nY = np.random.rand(N)\nC = np.random.rand(N)\nS = 100 * np.random.rand(N)\nmask = ((X < 0.8) & (X > 0.2) & (Y < 0.8) & (Y > 0.2))\nX = X[mask]\nY = Y[mask]\nC = C[mask]\nS = S[mask]\n\nim = ax.scatter(X, Y, c=C, s=S, alpha=0.3, cmap='viridis')\n\ncbar = fig.colorbar(im)\ncbar.set_label('Count')\nax.set_title('Categories')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.colors import Normalize\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n\n# Generate data\nclass_names = ['0', '1', '2', '3']\ndata = [np.array([[44, 12, 0, 0],\n                  [5, 42, 3, 0],\n                  [0, 8, 23, 9],\n                  [0, 0, 2, 44]]),\n        np.array([[35, 8, 0, 0],\n                  [4, 24, 13, 1],\n                  [2, 8, 13, 18],\n                  [0, 0, 3, 31]]),\n        np.array([[115, 28, 3, 6],\n                  [26, 81, 33, 18],\n                  [0, 21, 80, 42],\n                  [0, 0, 25, 112]]),\n        np.array([[360, 108, 23, 13],\n                  [61, 263, 141, 27],\n                  [3, 60, 305, 155],\n                  [0, 7, 102, 388]]),\n        np.array([[33, 17, 5, 3],\n                  [13, 24, 16, 7],\n                  [5, 14, 21, 18],\n                  [1, 11, 16, 20]]),\n        np.array([[339, 121, 23, 13],\n                  [100, 220, 90, 67],\n                  [27, 164, 143, 184],\n                  [7, 67, 88, 347]]),\n        np.array([[20, 0, 0, 0],\n                  [8, 8, 6, 0],\n                  [1, 1, 11, 5],\n                  [0, 0, 4, 18]]),\n        np.array([[754, 271, 96, 43],\n                  [180, 498, 362, 133],\n                  [48, 278, 472, 321],\n                  [25, 109, 300, 750]]),\n        np.array([[1, 0, 0, 0],\n                   [0, 1, 0, 0],\n                   [0, 0, 1, 0],\n                   [0, 0, 0, 1]])\n        ]\ncm = np.array(data[0])\nfor i in range(1, len(data)):\n    cm = np.add(cm, data[i])\n\nplot_confusion_matrix(cm, classes=class_names,\n                      title='Confusion matrix, without normalization')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Compute the x and y axis ranges\nymin, ymax = ax.get_ylim()\nxmin, xmax = ax.get_xlim()\n\n# The data\ndata = np.random.rand(4, 6)\ndata[3, 2] = 1170\ndata[3, 3] = 1170\n\n# The colors\ncmap = plt.colormaps[\"plasma\"]\nnorm = plt.Normalize(data.min(), data.max())\ncolors = [cmap(norm(value)) for value in data]\n\n# The rectangles\nrects = []\nfor y, row in enumerate(data):\n    for x, value in enumerate(row):\n        rect = plt.Rectangle((x, y), 1, 1, facecolor=colors[y][0], edgecolor=\"none\")\n        rects.append(rect)\n        ax.add_patch(rect)\n\n# The labels\nfor y, row in enumerate(data):\n    for x, value in enumerate(row):\n        if value == 1170:\n            ax.text(x + 0.5, y + 0.5, str(value),\n                    ha=\"center\", va=\"center\",\n                    color=\"white\" if (y + x) % 2 == 0 else \"black\")\n\n# The grid\nax.set_xticks([x + 0.5 for x in range(xmax - xmin)])\nax.set_yticks([y + 0.5 for y in range(ymax - ymin)])\n\n# The limits\nax.set_xlim(xmin, xmax)\nax.set_ylim(ymin, ymax)\n\n# The title\nax.set_title(\"BabelStream triad Average Memory Bandwidth (GB/s)\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\ncmap = plt.cm.viridis\nim = ax.imshow(np.random.rand(10, 10), cmap=cmap)\nax.set_title('Correlation Coefficients')\nplt.colorbar(im, ax=ax)\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata = np.random.rand(8, 8)\n\n# plot the data\nfig, ax = plt.subplots()\ncax = ax.matshow(data, cmap='hot')\n\n# add some text labels\nfor (i, j), val in np.ndenumerate(data):\n    ax.text(j, i, '{:.1f}'.format(val),\n            ha='center', va='center',\n            color=\"w\" if data[i, j] < 0.5 else \"k\")\n\nfig.colorbar(cax)\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 1, sharex=True)\naxs[0].set_title('pythia-1b')\naxs[1].set_title('pythia-3b')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nX = np.random.rand(15, 15)\nim = axs[0].imshow(X, cmap='viridis')\naxs[0].set_xticks(np.arange(15))\naxs[0].set_yticks(np.arange(15))\naxs[0].set_xticklabels(['No / The', 'athlete', 'that', 'loved', 'the', 'ministers', 'has', 'landed'])\naxs[0].set_yticklabels(['No / The', 'athlete', 'that', 'loved', 'the', 'ministers', 'has', 'landed'])\n\nim = axs[1].imshow(X, cmap='viridis')\naxs[1].set_xticks(np.arange(15))\naxs[1].set_yticks(np.arange(15))\naxs[1].set_xticklabels(['No / The', 'athlete', 'that', 'loved', 'the', 'ministers', 'has', 'landed'])\naxs[1].set_yticklabels(['No / The', 'athlete', 'that', 'loved', 'the', 'ministers', 'has', 'landed'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 20\nx = np.linspace(0.1, 0.5, N)\ny1 = .8 * np.sin(4 * x)\ny2 = .7 * np.sin(4 * x)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, color='tab:blue', lw=2)\nax.plot(x, y2, color='tab:orange', ls='--')\n\n# fill the area between the curves\nax.fill_between(x, y1, y2, where=y1 >= y2, color='tab:red', alpha=.5)\nax.fill_between(x, y1, y2, where=y1 <= y2, color='tab:green', alpha=.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100  # mean of distribution\nsigma = 15  # standard deviation of distribution\nx = mu + sigma * np.random.randn(437)\ny = (2 * x + 63) % 100\n\nfig, axs = plt.subplots(1, 2, sharey=True, layout='constrained')\naxs[0].hist([x, y], bins=20, density=True, alpha=0.6, color=['C0', 'C1'])\naxs[0].set_title('Inter Class')\naxs[1].hist([x, y], bins=20, density=True, alpha=0.6, color=['C0', 'C1'])\naxs[1].set_title('Intra Class')\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors\nfrom matplotlib.ticker import PercentFormatter\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute the bin edges to be able to create histogram objects.\nedges = np.linspace(0.5, 2.5, 11)\nhist_values, x_edges, y_edges = np.histogram2d(\n    np.random.random(100), np.random.random(100), bins=edges)\n\n# Plot the histogram using pcolormesh.\nfig, axs = plt.subplots(nrows=2, ncols=2)\naxs[0, 0].pcolormesh(x_edges, y_edges, hist_values.T,\n                     shading='gouraud')\naxs[0, 0].set_title('Baseline')\n\n# Use a linear color map to show the full range of values.\ncmap = colors.LinearSegmentedColormap.from_list(\n    'hot', [(0, 'blue'), (0.5, 'yellow'), (1, 'red')])\n\naxs[0, 1].pcolormesh(x_edges, y_edges, hist_values.T, cmap=cmap,\n                     shading='gouraud')\naxs[0, 1].set_title('MIRL w/ MULT')\n\n# Use a log color map to show the full range of values.\naxs[1, 0].pcolormesh(x_edges, y_edges, hist_values.T, norm=colors.LogNorm(),\n                     cmap=cmap, shading='gouraud')\naxs[1, 0].set_title('MIRL + OCLR w/ MULT')\n\n# Use a log color map to show the full range of values.\naxs[1, 1].pcolormesh(x_edges, y_edges, hist_values.T, norm=colors.LogNorm(),\n                     cmap=cmap, shading='gouraud')\naxs[1, 1].set_title('MIRL + OCLR w/ DOTLA')\n\n# Use a log color map to show the full range of values.\naxs[1, 1].yaxis.set_major_formatter(PercentFormatter(xmax=100))\n\nfor ax in axs.flat:\n    ax.set(xlim=(0, 2.5), ylim=(0.5, 1.5),\n           xlabel='Euclidean Distance', ylabel='Density')\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors\nfrom matplotlib.ticker import PercentFormatter\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n\ndef _percentile_hist(ax, data, bins=20, **kwargs):\n    \"\"\"Helper function to plot a histogram with percentiles.\"\"\"\n    # Get the histogram of all the data\n    hist, bin_edges = np.histogram(data, bins=bins)\n    # Compute the cumulative distribution\n    cdf = hist.cumsum()\n    # Normalize the counts\n    norm = cdf / cdf[-1]\n    # Plot the histogram\n    ax.plot(bin_edges[1:], norm, **kwargs)\n\nfig, axs = plt.subplots(nrows=3, ncols=2, figsize=(7.0, 8.0))\naxs = axs.flatten()\n\n# Generate some random data\ndata = np.random.normal(size=1000)\n\n# Plot the histogram\nfor ax in axs:\n    _percentile_hist(ax, data, color='blue', alpha=0.5)\n\n# Plot the histogram with percentiles\nfor ax in axs[::2]:\n    _percentile_hist(ax, data, color='red', alpha=0.5, label='Percentiles')\n\n# Plot the histogram with percentiles and a custom color cycle\nfor ax in axs[1::2]:\n    _percentile_hist(ax, data, color='purple', alpha=0.5, label='Percentiles')\n\n# Add a legend\naxs[1, 1].legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# Data for plotting\nN = 20\ndata = [10**i for i in range(N)]\nx = np.arange(N)\ny = data\nwidth = 0.35\n\nrects1 = ax.bar(x - width/2, y, width, label='Camels')\n\nrects2 = ax.bar(x + width/2, data, width, label='Kangaroos')\n\nax.set_ylabel('Frequency')\nax.set_xlabel('Animal Weight (Tons)')\nax.set_title('Desert Animals in the Wild')\nax.set_xticks(x)\nax.legend()\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nmu = 5\nsigma = 2\nx = np.linspace(-5, 15, 100)\ny = (1 / (np.sqrt(2 * np.pi) * sigma)) \\\n    * np.exp(-0.5 * (1 / sigma * (x - mu))**2)\ny += 0.5 * np.random.normal(size=x.shape)\n\nfig, ax = plt.subplots()\nax.plot(x, y, 'k')\nax.hist(x, bins=30, density=True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100000\nsigma = 20000\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=True, histtype='stepfilled')\n\n# add a 'best fit' line\ny = mlab.normpdf(bins, mu, sigma)\nplt.plot(bins, y, '--')\nplt.xlabel('Wind Speed (km/h)')\nplt.ylabel('Number of Measurements')\nplt.title('Histogram of Wind Speed Measurements')\nplt.text(150000, 0.03, 'Median: 1.97', color='red')\nplt.grid(True)\nplt.yscale('log')\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100300\nsigma = 8000\nx = mu + sigma * np.random.randn(10000)\n\nnum_bins = 20\n\nfig, ax = plt.subplots()\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=True)\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\nax.plot(bins, y, '--')\nax.set_xlabel('Smarts')\nax.set_ylabel('Probability density')\nax.set_title('Example histogram with a best-fit line')\n\n# Tweak spacing to prevent clipping of ylabel\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 50\nx = np.linspace(0.1, 2 * np.pi, N)\ny1 = .8 * np.sin(x)\ny2 = .7 * np.sin(1.2 * x) + .1 * np.sin(3.1 * x)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nax0.plot(x, y1, 'o-')\nax0.set_title('Sharing does not work well with discontinuities')\nax0.set_xlim(0, 2 * np.pi)\nax0.set_ylim(-1, 1)\nax0.grid(True)\n\nax1.plot(x, y2, 'o-')\nax1.grid(True)\nax1.set_title('Sharing works nicely here')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.random.randn(1000, 4)\ny = np.random.randn(1000, 4)\nz = np.abs(x * y).sum(axis=1)\n\nfig, ax = plt.subplots()\nc = ax.scatter(x, y, c=z, cmap='Blues')\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\nax.set_xlabel('Number of Nominations')\nax.set_ylabel('Frequency')\n\n# add colorbar\nfig.colorbar(c, ax=ax, label='Number of Nominations')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# make up some data\nmu = 200 * np.ones(10)\nsigma = 25 * np.ones(10)\nx = np.random.normal(mu, sigma, (2, 1000))\n\n# plot it\nfig, axs = plt.subplots(nrows=2, sharex=True, sharey=True)\naxs[0].hist(x[0], bins=25, density=True, histtype='stepfilled', alpha=0.3,\n            facecolor='blue')\naxs[0].hist(x[1], bins=25, density=True, histtype='stepfilled', alpha=0.3,\n            facecolor='orange')\naxs[0].set_title('MNIST - Defect Detection')\n\naxs[1].hist(x[0], bins=25, density=True, histtype='stepfilled', alpha=0.3,\n            facecolor='green')\naxs[1].hist(x[1], bins=25, density=True, histtype='stepfilled', alpha=0.3,\n            facecolor='red')\naxs[1].set_title('FashionMNIST - Defect Detection')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 400\nx = 0.9 * np.random.rand(N)\ny = (0.1 * np.random.rand(N) - x) ** 2 + 0.2 * np.random.randn(N)\narea = (50 * np.random.rand(N))**2  # 0 to 10 point radii\nc = np.sqrt(area)\n\nfig, ax = plt.subplots()\nax.scatter(x, y, c=c, s=area, alpha=0.3, cmap='viridis')\n\n# Set the limits of the axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\n# Fixing random state for reproducibility\nmu = 200\nsigma = 25\nx = mu + sigma * np.random.randn(10000)\n\nnum_bins = 50\n\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, sharex=True)\nax1.hist(x, num_bins, density=True)\nax1.set_title('Milk Chocolate')\nax1.legend(['Swiss', 'New Zealand'])\n\nx = np.random.normal(loc=200, scale=25, size=10000)\nax2.hist(x, num_bins, density=True)\nax2.set_title('Dark Chocolate')\nax2.legend(['Swiss', 'New Zealand'])\n\nx = np.random.normal(loc=100, scale=15, size=10000)\nax3.hist(x, num_bins, density=True)\nax3.set_title('White Chocolate')\nax3.legend(['Swiss', 'New Zealand'])\n\nx = np.random.normal(loc=100, scale=15, size=10000)\nax4.hist(x, num_bins, density=True)\nax4.set_title('Ruby Chocolate')\nax4.legend(['Swiss', 'New Zealand'])\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\ncount = [32, 30, 27, 24, 16]\nx = np.arange(len(count))\nexp_width = 0.35\n\nfig, ax = plt.subplots()\nax.bar(x - exp_width / 2, count, exp_width, label='Camel')\nax.bar(x + exp_width / 2, count, exp_width, label='Kangaroo')\n\nax.set_ylabel('Count')\nax.set_title('CIFAR100 \\'Desert\\' Concept')\nax.set_xticks(x)\nax.set_xticklabels(('0.00', '0.05', '0.10', '0.15'))\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 200000\nsigma = 30000\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=True, histtype='stepfilled')\n\n# add a 'best fit' line\ny = mlab.normpdf(bins, mu, sigma)\nplt.plot(bins, y, '--')\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\nN = 500\nx = 0.9 * np.random.rand(N)\ny = 0.9 * np.random.rand(N)\narea = (20 * np.random.rand(N))**2  # 0 to 10 point radii\nc = np.sqrt(area)\n\nplt.scatter(x, y, s=area, c=c, alpha=0.3)\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors as mcolors\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# the data\nn_samples = 1000\nn_classes = 2\nX = np.zeros((n_samples, 2))\ny = np.zeros(n_samples, dtype='u1')\n\nfor c in range(n_classes):\n    for i in range(n_samples // n_classes):\n        X[i + c * (n_samples // n_classes), 0] = np.random.uniform(c / 10., (c + 1) / 10.)\n        y[i + c * (n_samples // n_classes)] = c\n\n# the classifier\nfrom sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression()\nclf.fit(X, y)\n\n# the threshold\nthreshold = clf.decision_function(np.c_[0.0, 0.0])\n\n# the histogram of distances to the decision function\ndist_to_threshold = np.abs(X[:, 0] - threshold)\nhist, bin_edges = np.histogram(dist_to_threshold, bins=20)\n\n# the plot\nfig, ax = plt.subplots()\n\nax.bar(bin_edges[:-1], hist, width=(bin_edges[1] - bin_edges[0]), color=mcolors.to_rgba('tab:orange', 0.5))\n\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Number of samples')\n\n# plot the decision function\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),\n                     np.linspace(y_min, y_max, 100))\nZ = clf.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\nax.contourf(xx, yy, Z, alpha=0.5, cmap=plt.cm.Paired)\n\n# plot the threshold\nax.axhline(threshold, color='k', linestyle='--')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100\nsigma = 15\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=True, histtype='stepfilled')\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\nplt.plot(bins, y, '--')\nplt.xlabel('Confidence')\nplt.ylabel('Accuracy in bin')\nplt.title('Calibration Error: 0.31')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100300.0\nsigma = 30000.0\nx = mu + sigma * np.random.randn(10000)\n\nnum_bins = 200\n\nfig, ax = plt.subplots()\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=True)\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\nax.plot(bins, y, '--')\nax.set_xlabel('Smarts')\nax.set_ylabel('Probability density')\nax.set_title('Demonstration of norm.pdf with \\n Num. bins = %d' % num_bins)\n\n# Tweak spacing to prevent clipping of ylabel\nplt.subplots_adjust(left=0.15)\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Load MNIST and FashionMNIST datasets\nmnist = fetch_openml('mnist_784', version=1)\nfashion_mnist = fetch_openml('Fashion-MNIST', version=1)\n\n# Extract features and target for both datasets\nX_mnist = mnist.data / 255.0\ny_mnist = mnist.target.astype(np.int64)\nX_fashion_mnist = fashion_mnist.data / 255.0\ny_fashion_mnist = fashion_mnist.target.astype(np.int64)\n\n# Split datasets into training and test sets\nX_train_mnist, X_test_mnist, y_train_mnist, y_test_mnist = train_test_split(\n    X_mnist, y_mnist, test_size=0.2, random_state=42)\nX_train_fashion_mnist, X_test_fashion_mnist, y_train_fashion_mnist, y_test_fashion_mnist = train_test_split(\n    X_fashion_mnist, y_fashion_mnist, test_size=0.2, random_state=42)\n\n# Standardize features\nscaler = StandardScaler()\nX_train_mnist = scaler.fit_transform(X_train_mnist)\nX_test_mnist = scaler.transform(X_test_mnist)\nX_train_fashion_mnist = scaler.fit_transform(X_train_fashion_mnist)\nX_test_fashion_mnist = scaler.transform(X_test_fashion_mnist)\n\n# Plot histograms of the datasets\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 4), sharey=True)\nax1.hist(X_train_mnist.flatten(), bins=30, alpha=0.8, color='blue')\nax1.set_title('MNIST')\nax2.hist(X_train_fashion_mnist.flatten(), bins=30, alpha=0.8, color='blue')\nax2.set_title('FashionMNIST')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(5, 21)\ny1 = x * 3\ny2 = x * 2.5\ny3 = x * 2\ny4 = x * 1.5\n\nfig, ax = plt.subplots()\nax.plot(x, y1, label='JPEG+LDPC')\nax.plot(x, y2, label='DEEPJSCC w/o ofdm')\nax.plot(x, y3, label='DEEPJSCC w/ ofdm')\nax.plot(x, y4, label='OURS')\n\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nn = np.arange(8)\ncontent = [0, 0, 0, 1, 2, 3, 4, 5]\norganization = [0, 0, 1, 2, 3, 4, 5, 6]\nlanguage = [0, 1, 2, 3, 4, 5, 6, 7]\n\nfig, ax = plt.subplots()\nax.plot(n, content, color='C0', label='Content')\nax.plot(n, organization, color='C1', label='Organization')\nax.plot(n, language, color='C2', label='Language')\n\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# example data\nx = np.arange(0.1, 0.5, 0.01)\ny1 = -1 * np.sin(2 * np.pi * x)\ny2 = 1 * np.sin(4 * np.pi * x)\n\nax.plot(x, y1)\nax.plot(x, y2)\n\nax.set_title('Using plot')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = [0.25, 0.50, 0.75, 1.00]\ny = [0.07, 0.06, 0.04, 0.03]\n\n# example error bar values\nyerr = [0.01, 0.01, 0.01, 0.01]\n\n# plot error bars with different colors and line styles\nplt.errorbar(x, y, yerr=yerr, fmt='o', ecolor='red', capsize=5)\n\n# plot error bars with different colors and line styles\nplt.errorbar(x, y + 0.01, yerr=yerr, fmt='o', ecolor='green', capsize=5)\n\n# plot error bars with different colors and line styles\nplt.errorbar(x, y + 0.02, yerr=yerr, fmt='o', ecolor='blue', capsize=5)\n\n# add a legend\nplt.legend(['MAXN=512', 'MAXN=1024', 'MAXN=2048'])\n\n# set the x-axis label\nplt.xlabel('Sample Ratio')\n\n# set the y-axis label\nplt.ylabel('Std of ACC')\n\n# set the title\nplt.title('Error Bar Plot')\n\n# show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 10.0))\naxs = axs.flatten()\n\nnp.random.seed(0)\nx = np.linspace(0, 200, 200)\n\ny_base = 0.5 + 0.3 * np.sin(x / 10.0)\ny_ours = y_base + 0.1 * np.cos(x / 10.0)\n\naxs[0].plot(x, y_base, label=\"base\", c=\"blue\")\naxs[0].plot(x, y_ours, label=\"ours\", c=\"orange\")\naxs[0].set_title(\"FID (\u2193)\")\naxs[0].set_xlabel(\"Training iterations\")\naxs[0].set_ylabel(\"Score\")\naxs[0].legend()\n\ny_base = 0.3 + 0.2 * np.sin(x / 10.0)\ny_ours = y_base + 0.1 * np.cos(x / 10.0)\n\naxs[1].plot(x, y_base, label=\"base\", c=\"blue\")\naxs[1].plot(x, y_ours, label=\"ours\", c=\"orange\")\naxs[1].set_title(\"IS (\u2191)\")\naxs[1].set_xlabel(\"Training iterations\")\naxs[1].set_ylabel(\"Score\")\naxs[1].legend()\n\ny_base = 0.3 + 0.2 * np.sin(x / 10.0)\ny_ours = y_base + 0.1 * np.cos(x / 10.0)\n\naxs[2].plot(x, y_base, label=\"base\", c=\"blue\")\naxs[2].plot(x, y_ours, label=\"ours\", c=\"orange\")\naxs[2].set_title(\"CW-FID (\u2193)\")\naxs[2].set_xlabel(\"Training iterations\")\naxs[2].set_ylabel(\"Score\")\naxs[2].legend()\n\ny_base = 0.3 + 0.2 * np.sin(x / 10.0)\ny_ours = y_base + 0.1 * np.cos(x / 10.0)\n\naxs[3].plot(x, y_base, label=\"base\", c=\"blue\")\naxs[3].plot(x, y_ours, label=\"ours\", c=\"orange\")\naxs[3].set_title(\"CAS (\u2191)\")\naxs[3].set_xlabel(\"Training iterations\")\naxs[3].set_ylabel(\"Score\")\naxs[3].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# example data\nx = np.arange(30)\ny1 = .5 * np.sin(x / 20.)\ny2 = .5 * np.cos(x / 20.)\n\nax.plot(x, y1, color='tab:blue', lw=2)\nax.plot(x, y2, color='tab:red')\n\nax.set_title('Using different colors')\nax.legend(['sin', 'cos'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 21)\ny1 = (x - 1) % 4\ny2 = (x - 2) % 4\ny3 = (x - 3) % 4\ny4 = (x - 4) % 4\n\nfig, ax = plt.subplots()\nax.plot(x, y1, 'o-', label='BaCE')\nax.plot(x, y2, 'o-', label='LWF')\nax.plot(x, y3, 'o-', label='EWC')\nax.plot(x, y4, 'o-', label='SEQ')\n\nax.set_xlim(1, 20)\nax.set_ylim(-1, 5)\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.0, 1.0, 0.01)\ny1 = np.sin(2 * np.pi * x)\ny2 = np.exp(-x)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, label='KWS')\nax.plot(x, y2, label='ECG5000')\n\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 120)\ny = np.random.lognormal(size=x.shape)\n\nfig, ax = plt.subplots()\nax.loglog(x, y, 'o')\nax.set_xlabel('Number of Parameters')\nax.set_ylabel('Log KL Divergence')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 2001)\ny1 = (1 + x) / 2\ny2 = 3 - (x - 1) / 2\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.plot(x, y1, 'o-')\nax0.set_title('GPT-4 Evaluation')\nax0.set_ylabel('Attack Success Rate')\n\nax1.plot(x, y2, '^--')\nax1.set_title('Llama Guard Evaluation')\nax1.set_xlabel('Iterations')\nax1.set_ylabel('Attack Success Rate')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.logspace(-2, 1, 10)\ny1 = x * 2\ny2 = x * 3\n\nfig, ax = plt.subplots()\n\nax.plot(x, y1, 'g', label='Full')\nax.plot(x, y2, 'r', label='SPT')\nax.plot(x, y1 + 10, 'b', label='VPT')\n\nax.set_xscale('log')\nax.set_xlabel('fraction of training data (log scale)')\nax.set_ylabel('test accuracy (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0, 200, 6.25)\ny1 = np.sin(x / 20)\ny2 = np.exp(-x / 20.0)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, x, y2, color='tab:blue')\nax.fill_between(x, y1, y2, color='tab:blue', alpha=.5)\n\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Value')\n\n# example legend entries\nax.plot([10], [0], 'o', color='tab:green', label='Green')\nax.plot([10], [0], 'o', color='tab:orange', label='Orange')\nax.plot([10], [0], 'o', color='tab:purple', label='Purple')\nax.plot([10], [0], 'o', color='tab:red', label='Red')\n\n# legend with custom color cycle\nax.legend(loc='best', prop={'color': 'tab:blue'})\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 1.1, 0.2)\ny1 = x**3\ny2 = x**2 * np.sin(x)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nax0.plot(x, y1)\nax0.set_title('Sharing does not work with non-rectangular data')\nax0.plot(x, y2)\nax1.plot(x, y1)\nax1.plot(x, y2)\nax1.set_title('Sharing works with rectangular data')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(120, 1320, 120)\ny1 = np.sin(x / 30.0)\ny2 = np.exp(-x / 30.0)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, 'o-', label='Ours')\nax.plot(x, y2, '^--', label='ACR')\nax.set_xlabel('Imbalance Ratio of Unlabeled Data')\nax.set_ylabel('Top-1 Acc (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 11)\ny = x ** 2\n\n# example data\nx = np.arange(1, 11)\ny = x ** 2\n\n# plot the data\nplt.plot(x, y, 'r--', linewidth=2.0)\n\n# set the x-axis label\nplt.xlabel('X Axis Label')\n\n# set the y-axis label\nplt.ylabel('Y Axis Label')\n\n# set the title of the plot\nplt.title('Example Plot')\n\n# show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = [1, 3, 5, 7]\ny = [67.32, 82.98, 89.53, 90.47]\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.set_xlabel('Number of Training Objects')\nax.set_ylabel('Coverage Ratio (%)')\nax.set_title('Coverage Ratio vs. Number of Training Objects')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(10)\ny = np.sin(x / 2)\n\n# example data for error bars\nerror = 0.1 + 0.2 * x\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=error, fmt='-o')\nax.set_title('Errorbar plot')\n\n# error bar caps\nax.errorbar(x, y + 1, yerr=error, capsize=3, fmt='o', color='r',\n            ecolor='gray', capthick=3)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.arange(1, 9)\ny1 = x + 3 * np.random.randn(8)\ny2 = x - 3 * np.random.randn(8)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nax0.plot(x, y1, 'o-')\nax0.set_title('Sharing y axis')\nax0.set_ylabel('IQM Human Normalized Score')\n\nax1.plot(x, y2, '^--')\nax1.set_xlabel('Number of experts')\nax1.set_ylabel('Rainbow')\nax1.set_ylim(-4, 8)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nvocab_sizes = [256, 512, 1024, 2048, 4096, 8192, 16384]\nbpe_tpr = [0.4, 0.8, 0.9, 0.97, 0.98, 0.98, 0.98]\nwordpunct_tpr = [0.3, 0.6, 0.8, 0.86, 0.9, 0.93, 0.95]\nwhitespace_tpr = [0.5, 0.65, 0.7, 0.75, 0.7, 0.65, 0.6]\n\nfig, ax = plt.subplots()\nax.plot(vocab_sizes, bpe_tpr, label=\"BPE\")\nax.plot(vocab_sizes, wordpunct_tpr, label=\"Wordpunct\")\nax.plot(vocab_sizes, whitespace_tpr, label=\"Whitespace\")\nax.set_xlabel('Vocabulary Size')\nax.set_ylabel('Test set TPR | FPR = 10^{-4}')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 31)\ny1 = x * 2\ny2 = x * 3\ny3 = x * 4\n\nfig, ax = plt.subplots()\n\nax.plot(x, y1, label='CNN')\nax.plot(x, y2, label='CIF')\nax.plot(x, y3, label='STAR')\n\nax.set_xlabel('Compression Rate')\nax.set_ylabel('Word Error Rate (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(25, 201, 25)\ny1 = np.sin(x / 20)\ny2 = np.exp(-x / 20.0)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, label='PILOTE')\nax.plot(x, y2, label='Re-trained model')\nax.axhline(y=0.75, color='g', linestyle='--', label='Pre-trained model accuracy')\n\nax.set_xlabel('Number of exemplars in class `Run`')\nax.set_ylabel('avg. accuracy of five rounds')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 2, 0.01)\ny = np.exp(-x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, color='tab:blue')\nax.set_xlabel('x')\nax.set_ylabel('exp(-x)')\nax.set_title('Example plot')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = ['All', 'MLP', 'GCN', 'NCN', 'NCNC', 'NeoGNN-BUDDY', 'SEAL', 'Node2Vec']\ny1 = [76.4, 73.8, 72.9, 70.7, 69.8, 72.8, 73.8, 74.2]\ny2 = [66.4, 64.8, 63.9, 62.7, 61.8, 64.8, 65.8, 66.2]\n\n# plot error bars with different settings\nfig, ax = plt.subplots()\nax.errorbar(x, y1, yerr=5, fmt='-o', c='blue', label='ogbl-collab')\nax.errorbar(x, y2, yerr=5, fmt='-o', c='orange', label='ogbl-ppa')\n\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nx = np.arange(12)\ny = np.random.rand(12)\ny2 = y + 0.1 * np.random.randn(12)\n\nax.plot(x, y, 'o--', color='tab:blue')\nax.plot(x, y2, 'o-', color='tab:orange')\n\nax.set_title('Android')\nax.set_xlabel('Layer')\nax.legend(['outside-code-diff', 'inside-code-diff'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.arange(0.1, 4, 0.5)\ny1 = np.exp(-x)\ny2 = np.sin(2 * np.pi * x)\n\nfig, ax = plt.subplots()\nax.errorbar(x, y1, yerr=0.2, fmt='o', c='tab:blue')\nax.errorbar(x, y2, yerr=0.4, fmt='o', c='tab:orange')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.arange(10)\ny = np.random.rand(10)\ny2 = y * 0.75 + 0.5\n\nax.plot(x, y, 'o--', color='orange', label='laion')\nax.plot(x, y2, '^:', color='tab:blue', label='CLIP')\n\nax.set_title('CIFAR100 States Zero Shot Accuracy')\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 11)\ny1 = x ** 2\ny2 = x ** 3\n\nfig, ax = plt.subplots()\n\nax.plot(x, y1, label='y=x^2')\nax.plot(x, y2, label='y=x^3')\n\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmicrophones = np.arange(2, 9)\nami_wer = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34]\nlibriscss_test_wer = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47]\n\n# plot\nfig, ax = plt.subplots()\nax.plot(microphones, ami_wer, 'o-', label='AMI WER')\nax.plot(microphones, libriscss_test_wer, 'o-', label='LibriCSS (test)')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER($\\%$)')\nax.legend()\n\n# add dotted lines for the two baselines\nihm_wer = np.full_like(microphones, 2.0)\nsdm_wer = np.full_like(microphones, 30.0)\nax.plot(microphones, sdm_wer, 'd--', color='gray', label='SDM')\nax.plot(microphones, ihm_wer, 'd--', color='gray')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# example data\nx = [2 ** -7, 2 ** -6, 2 ** -5, 2 ** -4]\ny = [1, 1.5, 2, 3]\n\nfig, ax = plt.subplots()\nax.loglog(x, y)\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\n\n# plot the empirical relation\nB2 = 8.0\nx_empirical = np.arange(1e-7, 1e-4, 1e-7)\ny_empirical = (B2 * x_empirical) ** 2\nax.plot(x_empirical, y_empirical, 'o', color='blue')\n\n# plot the M-LVQ models\nfor n_bits in [10, 100, 256]:\n    x_model = np.arange(1e-7, 1e-4, 1e-7)\n    y_model = (n_bits * x_model) ** 2\n    ax.plot(x_model, y_model, color='orange', alpha=0.5)\n\n# plot the M-LVQ model with 8 bits\nx_model = np.arange(1e-7, 1e-4, 1e-7)\ny_model = (8 * x_model) ** 2\nax.plot(x_model, y_model, color='purple', alpha=0.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, axs = plt.subplots(nrows=3, ncols=1, figsize=(7, 7))\naxs[0].set_title('SPMotif-0.5')\naxs[1].set_title('SPMotif-0.7')\naxs[2].set_title('SPMotif-0.9')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\nr = np.arange(0.1, 1.0, 0.1)\npna = 0.8 + 0.4 * r\ngin = 0.5 + 0.3 * r\naxs[0].plot(r, pna, 'o--', color='tab:purple', label='PNA + ours')\naxs[0].plot(r, gin, 'o--', color='tab:orange', label='GIN + ours')\naxs[0].fill_between(r, pna - 0.1, pna + 0.1, color='tab:purple', alpha=0.2)\naxs[0].fill_between(r, gin - 0.1, gin + 0.1, color='tab:orange', alpha=0.2)\naxs[0].set_ylabel('Performance')\naxs[0].set_xlabel('Ratio r')\naxs[0].legend()\n\nnp.random.seed(19680801)\nr = np.arange(0.1, 1.0, 0.1)\npna = 0.8 + 0.4 * r\ngin = 0.5 + 0.3 * r\naxs[1].plot(r, pna, 'o--', color='tab:purple', label='PNA + ours')\naxs[1].plot(r, gin, 'o--', color='tab:orange', label='GIN + ours')\naxs[1].fill_between(r, pna - 0.1, pna + 0.1, color='tab:purple', alpha=0.2)\naxs[1].fill_between(r, gin - 0.1, gin + 0.1, color='tab:orange', alpha=0.2)\naxs[1].set_ylabel('Performance')\naxs[1].set_xlabel('Ratio r')\naxs[1].legend()\n\nnp.random.seed(19680801)\nr = np.arange(0.1, 1.0, 0.1)\npna = 0.8 + 0.4 * r\ngin = 0.5 + 0.3 * r\naxs[2].plot(r, pna, 'o--', color='tab:purple', label='PNA + ours')\naxs[2].plot(r, gin, 'o--', color='tab:orange', label='GIN + ours')\naxs[2].fill_between(r, pna - 0.1, pna + 0.1, color='tab:purple', alpha=0.2)\naxs[2].fill_between(r, gin - 0.1, gin + 0.1, color='tab:orange', alpha=0.2)\naxs[2].set_ylabel('Performance')\naxs[2].set_xlabel('Ratio r')\naxs[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 31)\ny = np.random.normal(loc=77.5, scale=0.5, size=x.shape[0])\nyerr = np.random.normal(scale=0.2, size=x.shape[0])\n\nfig, ax = plt.subplots()\nax.errorbar(x, y, yerr=yerr, fmt='-o', alpha=0.5, capsize=5)\nax.plot(x, y, color='gray', alpha=0.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 11)\ny1 = x ** 2\ny2 = x ** 3\ny3 = x ** 4\n\nfig, ax = plt.subplots()\nax.plot(x, y1, label='GPT-Neo')\nax.plot(x, y2, label='5')\nax.plot(x, y3, label='10')\nax.plot(x, y1 + y2, label='7')\nax.plot(x, y1 + y2 + y3, label='30')\n\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x) + np.random.normal(0, 0.1, x.shape)\ny2 = np.sin(2 * x) + np.random.normal(0, 0.1, x.shape)\n\nfig, (ax0, ax1, ax2) = plt.subplots(3, 1, sharex=True, figsize=(6, 6))\nax0.plot(x, y1)\nax0.set_title('A line plot')\nax0.set_ylabel('y1')\n\nax1.plot(x, y2)\nax1.set_title('A line plot with a legend')\nax1.legend(['y2'])\n\nax2.plot(x, y1, label='y1')\nax2.plot(x, y2, label='y2')\nax2.set_title('Multiple lines on one plot')\nax2.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnsegs = [224, 128, 64, 32]\ntop1_acc = [75.0, 65.0, 55.0, 45.0]\nfog_top1_acc = [39.1, 22.9]\n\nfig, axs = plt.subplots(1, 2, figsize=(9.0, 4.0))\n\n# plot top-1 accuracy for ImageNet-1k\naxs[0].plot(nsegs, top1_acc, 'o-', label='ImageNet-1k')\naxs[0].set_title('Serial (n=8, m=1)')\naxs[0].set_xlabel('Segment Size')\naxs[0].set_ylabel('Top-1 Acc. (%)')\naxs[0].set_ylim([0, 80])\naxs[0].grid(True)\naxs[0].legend()\n\n# plot top-1 accuracy for ImageNet-C/P (Fog)\naxs[1].plot(nsegs, fog_top1_acc, 'o-', label='ImageNet-C/P (Fog)')\naxs[1].set_title('Parallel (n=2, m=4)')\naxs[1].set_xlabel('Segment Size')\naxs[1].set_ylabel('Top-1 Acc. (%)')\naxs[1].set_ylim([0, 80])\naxs[1].grid(True)\naxs[1].legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(5, 26)\ny1 = x + 3 * (x % 2)\ny2 = y1 + 4\ny3 = y1 - 4\ny4 = y1 - 2\n\nfig, ax = plt.subplots()\nax.plot(x, y1, color='tab:blue', lw=2, label='JPEG+LDPC')\nax.plot(x, y2, color='tab:green', ls='--', lw=2, label='DEEPJSCC w/o OFDM')\nax.plot(x, y3, color='tab:red', ls='-.', lw=2, label='DEEPJSCC w/ OFDM')\nax.plot(x, y4, color='tab:orange', dashes=[4, 4], lw=2, label='OURS')\n\n# Shaded area\nax.fill_between(x, y1, y2, color='tab:blue', alpha=.5)\nax.fill_between(x, y2, y3, color='tab:green', alpha=.5)\nax.fill_between(x, y3, y4, color='tab:red', alpha=.5)\n\n# Legend\nax.legend()\n\n# Ticks and labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\nax.set_xlim(5, 25)\nax.set_ylim(0, 100)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.linspace(0, 2 * np.pi, 41)\ny1 = np.sin(x)\ny2 = x ** 2\ny3 = np.random.randn(41)\ny4 = np.exp(x)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nax0.plot(x, y1, color='tab:purple', marker='o')\nax0.plot(x, y2, color='tab:blue', marker='s')\nax0.set_title('Line 1 (Sinusoidal)')\nax0.grid(True)\nax0.legend()\n\nax1.plot(x, y3, color='tab:green', marker='^')\nax1.plot(x, y4, color='tab:red', marker='x')\nax1.set_title('Line 3 (Random Noise)')\nax1.grid(True)\nax1.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0, 200, 62.5)\ny1 = (x % 100) / 10 + 0.1 * (x // 100)\ny2 = 1.5 - 0.5 * (x % 100) / 100 - 0.01 * (x // 100)\ny3 = 1.79 - 0.01 * x\n\nfig, axs = plt.subplots(nrows=2, ncols=1, sharex=True)\naxs[0].plot(x, y1, 'o-', label='Line 1')\naxs[0].plot(x, y2, '-o', label='Line 2')\naxs[0].set_title('Lines 1 and 2')\naxs[0].legend()\n\naxs[1].plot(x, y3, '-o', label='Line 3')\naxs[1].plot(x, y2, '-o', label='Polynomial Trend (from Line 2)')\naxs[1].set_title('Line 3 and polynomial trend from Line 2')\naxs[1].legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 9)\ny1 = x + 3\ny2 = x - 4\nyerr = 0.7\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.errorbar(x, y1, yerr=yerr, fmt='-o')\nax0.set_title('ogbl-collab Results')\n\nax1.errorbar(x, y2, yerr=yerr, fmt='--o')\nax1.set_title('ogbl-ppa Results')\nax1.legend(['ogbl-ppa 2022', 'ogbl-ppa 2023'])\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = np.arange(10, 61)\ndata = [np.random.rand(1000, N[i]) for i in range(len(N))]\n\nfig, ax = plt.subplots()\nax.set_yscale(\"log\")\nax.set_xscale(\"log\")\nax.set_ylabel(\"Precision\")\nax.set_xlabel(\"N\")\nax.set_title(\"Precision vs. N\")\n\nfor i in range(len(N)):\n    ax.loglog(N, data[i], marker=\"o\", label=f\"Standard {N[i]}\")\n\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = np.logspace(1, 2, num=5)\nprecision = np.logspace(-14, 0, num=15)\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(8, 8))\n\nfor ax, graph_variation in zip(axs.flat, range(1, 5)):\n    # Data\n    if graph_variation == 1:\n        data = [1e-2, 1e-3, 1e-4, 1e-5, 1e-6]\n    elif graph_variation == 2:\n        data = [1e-2, 1e-3, 1e-4, 1e-5, 1e-6]\n    elif graph_variation == 3:\n        data = [1e-2, 1e-3, 1e-4, 1e-5, 1e-6]\n    else:\n        data = [1e-2, 1e-3, 1e-4, 1e-5, 1e-6]\n\n    # Plot\n    ax.plot(N, data, 'o', ms=12, color='tab:blue')\n    ax.set_xscale('log')\n    ax.set_yscale('log')\n\n    # Labels\n    ax.set_xlabel('N')\n    ax.set_ylabel('Precision')\n    ax.set_title(f'Graph Variation {graph_variation}')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2)\nt = np.arange(0.0, 1.0, 0.001)\n\ns1 = np.sin(2 * np.pi * t)\nl1, = ax1.plot(t, s1, color='red', lw=2)\n\ns2 = np.exp(-t)\nl2, = ax2.plot(t, s2, color='green', lw=2, linestyle='--')\n\nfig.suptitle('Daytime Activity Monitoring')\nax1.set_ylabel('Standard Activity')\nax2.set_xlabel('Time (Hours)')\nax2.set_ylabel('Innovative Activity')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nt = np.arange(0.0, 2, 0.01)\ns1 = np.sin(2*np.pi*t)\ns2 = np.exp(-t)\ns3 = s1 * s2\n\nfig, ax = plt.subplots()\nax.plot(t, s1, t, s2, t, s3)\n\nax.set_xlabel('Time (Months)')\nax.set_ylabel('Performance Index')\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Fill between s1 and s3 with light blue\nax.fill_between(t, s1, s3, color='b', alpha=.3)\n\n# Fill between s2 and s3 with gray\nax.fill_between(t, s2, s3, color='gray', alpha=.3)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nsales = np.array([1450, 1150, 1250, 1600, 1550, 1350, 1400, 1450, 1500, 1550, 1600, 1650])\ntemperature = np.array([8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\nfig, ax = plt.subplots()\nax.plot(temperature, sales, 'o-')\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Sales')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nt = np.arange(0.0, 10.0, 0.1)\ns = np.exp(t)\nr = np.exp(-t)\n\nax1 = plt.subplot2grid((3, 1), (0, 0), colspan=3)\nax1.plot(t, s, 'g', lw=2)\nax1.plot(t, r, 'k',-- ,lw=2)\nax1.set_title('Exponential Growth Over Time')\nax1.grid(True)\n\nax2 = plt.subplot2grid((3, 1), (1, 0), colspan=3)\nax2.plot(t, s, 'b', lw=2)\nax2.plot(t, r, 'r',-- ,lw=2)\nax2.set_title('Exponential Decay Over Time')\nax2.grid(True)\n\nax3 = plt.subplot2grid((3, 1), (2, 0), colspan=3)\nax3.plot(t, s, 'go', lw=1)\nax3.plot(t, r, 'rx',-- ,lw=1)\nax3.set_title('Oscillatory Behavior Over Time')\nax3.grid(True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 11)\ny1 = np.sin(x / 2)\ny2 = np.exp(-x / 2)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, label='5-shot direct')\nax.plot(x, y2, label='5-shot scratchpad')\nax.plot(x, y1 + y2, label='5-shot rule-following')\n\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\ndt = 0.01\nt = np.arange(0, 30, dt)\nnse = np.random.randn(len(t))\nr = np.exp(-t / 0.05)\n\ncnse = np.convolve(nse, r) * dt\ncnse = cnse[:len(t)]\ns = 0.1 * np.sin(2 * np.pi * t) + cnse\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True, figsize=(6, 6))\n\nax0.plot(t, s)\nax0.set_ylabel('Value')\n\nax1.plot(t, np.diff(s))\nax1.set_ylabel('Delta Value')\n\nax2.plot(t, np.cumsum(s))\nax2.set_xlabel('Time')\nax2.set_ylabel('Cumulative Sum')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nt = np.arange(0.0, 10, 0.01)\ns1 = np.sin(2 * np.pi * t)\ns2 = np.exp(-t)\ns3 = s1 + 0.1 * np.random.randn(len(t))\n\nfig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=4)\n\nax0.plot(t, s1)\nax0.set_xlabel('Time')\nax0.set_ylabel('Amplitude')\nax0.set_title('Sin Wave')\n\nax1.plot(t, s2)\nax1.set_xlabel('Time')\nax1.set_ylabel('Amplitude')\nax1.set_title('Cos Wave')\n\nax2.plot(t, s3)\nax2.set_xlabel('Time')\nax2.set_ylabel('Value')\nax2.set_title('Exp Decay')\n\nax3.plot(t, s3)\nax3.set_xlabel('Time')\nax3.set_ylabel('Value')\nax3.set_title('Log Growth')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 1.1, 0.1)\ny = x**3\n\nfig, axs = plt.subplots(nrows=2, ncols=2)\n\naxs[0, 0].plot(x, y, color='blue')\naxs[0, 0].set_title('Positive bound')\n\naxs[0, 1].plot(x, -y, color='red')\naxs[0, 1].set_title('Negative bound')\n\naxs[1, 0].plot(x, y, color='blue')\naxs[1, 0].set_title('Contrastive loss weight')\n\naxs[1, 1].plot(x, y, color='blue')\naxs[1, 1].set_title('Fuzzy coefficient')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 1.1, 0.1)\ny1 = np.sin(2 * np.pi * x)\ny2 = np.exp(-x)\n\nfig, axs = plt.subplots(nrows=3, ncols=2, figsize=(7, 9))\naxs[0, 0].plot(x, y1)\naxs[0, 0].set_title('Positive Bound')\naxs[0, 0].set_ylim(0, 1.1)\naxs[0, 0].set_xlim(0, 1)\naxs[0, 0].set_xlabel('Fuzzy Coefficient')\naxs[0, 0].set_ylabel('Additional Metric 1')\n\naxs[0, 1].plot(x, y2)\naxs[0, 1].set_title('Negative Bound')\naxs[0, 1].set_ylim(0, 1.1)\naxs[0, 1].set_xlim(0, 1)\naxs[0, 1].set_xlabel('Contrastive Loss Weight')\naxs[0, 1].set_ylabel('Additional Metric 2')\n\naxs[1, 0].plot(x, y1)\naxs[1, 0].set_title('Fuzzy Coefficient')\naxs[1, 0].set_ylim(0, 1.1)\naxs[1, 0].set_xlim(0, 1)\naxs[1, 0].set_xlabel('Positive Bound')\naxs[1, 0].set_ylabel('Negative Bound')\n\naxs[1, 1].plot(x, y2)\naxs[1, 1].set_title('Additional Metric 1')\naxs[1, 1].set_ylim(0, 1.1)\naxs[1, 1].set_xlim(0, 1)\naxs[1, 1].set_xlabel('Additional Metric 2')\naxs[1, 1].set_ylabel('Contrastive Loss Weight')\n\naxs[2, 0].plot(x, y1)\naxs[2, 0].set_title('Additional Metric 1')\naxs[2, 0].set_ylim(0, 1.1)\naxs[2, 0].set_xlim(0, 1)\naxs[2, 0].set_xlabel('Fuzzy Coefficient')\naxs[2, 0].set_ylabel('Contrastive Loss Weight')\n\naxs[2, 1].plot(x, y2)\naxs[2, 1].set_title('Additional Metric 2')\naxs[2, 1].set_ylim(0, 1.1)\naxs[2, 1].set_xlim(0, 1)\naxs[2, 1].set_xlabel('Positive Bound')\naxs[2, 1].set_ylabel('Negative Bound')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 1.1, 0.1)\ny1 = x ** 2\ny2 = x ** 3\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True)\n\nax0.plot(x, y1, 'o-')\nax0.set_title('Dry vs Rain')\nax0.set_ylabel('Relaxation Level')\n\nax1.plot(x, y2, '^--')\nax1.set_title('Snow vs Fog')\nax1.set_ylabel('Relaxation Level')\n\nax2.plot(x, y2, 'v-.')\nax2.set_title('Rain vs Snow')\nax2.set_xlabel('Driving Style')\nax2.set_ylabel('Relaxation Level')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nn_groups = 5\nmeans_noisy1 = (23, 25, 28, 21, 34)\nstd_noisy1 = (3, 7, 2, 10, 4)\nstd_noisy2 = (1, 3, 4, 1, 7)\n\n# create plot\nfig, ax = plt.subplots()\n\nindex = np.arange(n_groups)\nbar_width = 0.35\nopacity = 0.8\n\nrects1 = plt.bar(index, means_noisy1, bar_width,\n                 alpha=opacity,\n                 color='b',\n                 yerr=std_noisy1)\n\nrects2 = plt.bar(index + bar_width, means_noisy2, bar_width,\n                 alpha=opacity,\n                 color='r',\n                 yerr=std_noisy2)\n\nplt.xlabel('x label')\nplt.ylabel('y label')\nplt.title('Title')\n\nplt.xticks(index + bar_width, ('A', 'B', 'C', 'D', 'E'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute areas and colors\nN = 150\nr = 2 * np.random.rand(N)\ntheta = 2 * np.pi * np.random.rand(N)\narea = 200 * r**2\ncolors = theta\n\naxs[0].scatter(r, theta, c=colors, s=area, cmap='hsv', alpha=0.7)\naxs[0].set_title('COCO 10K')\n\naxs[1].scatter(r, theta, c=colors, s=area, cmap='hsv', alpha=0.7)\naxs[1].set_title('LAION 10K')\n\naxs[2].scatter(r, theta, c=colors, s=area, cmap='hsv', alpha=0.7)\naxs[2].set_title('COCO & LAION 5K')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.0, 0.1, 0.01)\ny1 = -np.sin(2*np.pi*x)\ny2 = np.exp(-x)\ny3 = np.sin(4*np.pi*x)\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True)\nax0.plot(x, y1)\nax0.set_title('A line plot')\nax0.grid(True)\n\nax1.plot(x, y2)\nax1.set_title('A plot with\\nmultiple lines')\nax1.grid(True)\n\nax2.plot(x, y3)\nax2.set_title('A log y-axis plot')\nax2.set_yscale('log')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0, 200, 5)\ny1 = np.sin(x / 20.)\ny2 = np.exp(-x / 10.)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.plot(x, y1, 'o-')\nax0.set_title('Metric 1')\nax0.set_ylabel('Metric Value')\n\nax1.plot(x, y2, 'o-')\nax1.set_title('Metric 2')\nax1.set_xlabel('Training Iterations')\nax1.set_ylabel('Metric Value')\n\nfig.suptitle('Base Model vs Our Model')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0, 200, 1)\ny1 = np.sin(x / 20.)\ny2 = 0.8 * np.sin(x / 20.)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, label='Base Model')\nax.plot(x, y2, label='Our Model')\nax.set_title('Accuracy')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nN = np.arange(1, 7)\nfig, ax = plt.subplots()\n\nax.loglog(N, 10 ** (-np.arange(1, 12)), 'o-')\nax.set_xlabel('N')\nax.set_ylabel('Standard')\nax.legend(loc='upper left')\n\nax2 = ax.twinx()\nax2.loglog(N, 10 ** (-13), 'x-')\nax2.set_ylabel('Constrained')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 5, 0.1)\ny = np.exp(-x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, 'k--', lw=4)\nax.set_title('Performance and Efficiency Over Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Performance')\nax2 = ax.twinx()  # instantiate a second axes that shares the same x-axis\ncolor = 'tab:red'\nax2.set_ylabel('Efficiency', color=color)\nax2.plot(x, -y, color=color)\nax2.tick_params(axis='y', labelcolor=color)\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.arange(25)\ny = np.sin(x / 2 ** 0.5)\n\nfig, ax = plt.subplots()\nax.plot(x, y, color='C0')\nax.fill_between(x, y + 0.5, y - 0.5, color='C0', alpha=0.25)\n\nax.set_title('Performance and Efficiency Analysis')\nax.set_xlabel('Weeks')\nax.set_ylabel('Values')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.arange(0.1, 4, 0.1)\ny1 = np.exp(-x)\ny2 = np.sin(2 * np.pi * x)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, color='tab:blue')\nax.plot(x, y2, color='tab:orange', linestyle='--')\n\n# set limits\nax.set_xlim([0, 2])\nax.set_ylim([0, 0.3])\n\n# set title and labels\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\nax.set_xlabel(\"Weeks\")\nax.set_ylabel(\"Performance\")\n\n# set grid\nax.grid(True)\n\n# set legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors as mcolors\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nN = 50\nX = np.zeros(N)\nY = np.zeros(N)\nX[0] = 10\nY[0] = 10\nfor i in range(1, N):\n    X[i] = 0.8 * X[i - 1] + 0.2 * np.random.randn()\n    Y[i] = 0.8 * Y[i - 1] + 0.2 * np.random.randn()\n\nax.plot(X, Y, 'o-', color='k')\n\ncmap = mcolors.ListedColormap(['r', 'g', 'b'])\nnorm = mcolors.Normalize(vmin=0, vmax=3)\nscatter = ax.scatter(X, Y, c=cmap(norm([0, 1, 2])))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 11)\ny1 = x ** 2\ny2 = x * 1.2\ny3 = x * 2.3\ny4 = x * 2.9\n\n# plot data\nfig, ax = plt.subplots()\nax.plot(x, y1, label='BaCE')\nax.plot(x, y2, label='LWF')\nax.plot(x, y3, label='EWC')\nax.plot(x, y4, label='SEQ')\n\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 11)\ny1 = x ** 2\ny2 = x * 1.2\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.plot(x, y1, 'o-')\nax0.set_title('BaCE vs EWC')\nax0.grid(True)\n\nax1.plot(x, y2, '^--')\nax1.set_title('LWF vs SEQ')\nax1.grid(True)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 2001)\ny1 = (1 + 8*x**2)/10\ny2 = (5 + 6*x**2)/10\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(9, 7))\naxs[0, 0].plot(x, y1, label=\"model1 Series 1\")\naxs[0, 0].plot(x, y2, label=\"model1 Series 2\")\naxs[0, 0].set_title(\"model1 Performance\")\naxs[0, 0].legend()\naxs[0, 0].fill_between(x, y1 - 0.1, y1 + 0.1, alpha=0.2)\naxs[0, 0].fill_between(x, y2 - 0.1, y2 + 0.1, alpha=0.2)\n\naxs[0, 1].plot(x, y1, label=\"model2 Series 1\")\naxs[0, 1].plot(x, y2, label=\"model2 Series 2\")\naxs[0, 1].set_title(\"model2 Performance\")\naxs[0, 1].legend()\naxs[0, 1].fill_between(x, y1 - 0.1, y1 + 0.1, alpha=0.2)\naxs[0, 1].fill_between(x, y2 - 0.1, y2 + 0.1, alpha=0.2)\n\naxs[1, 0].plot(x, y1, label=\"model3 Series 1\")\naxs[1, 0].plot(x, y2, label=\"model3 Series 2\")\naxs[1, 0].set_title(\"model3 Performance\")\naxs[1, 0].legend()\naxs[1, 0].fill_between(x, y1 - 0.1, y1 + 0.1, alpha=0.2)\naxs[1, 0].fill_between(x, y2 - 0.1, y2 + 0.1, alpha=0.2)\n\naxs[1, 1].plot(x, y1, label=\"model4 Series 1\")\naxs[1, 1].plot(x, y2, label=\"model4 Series 2\")\naxs[1, 1].set_title(\"model4 Performance\")\naxs[1, 1].legend()\naxs[1, 1].fill_between(x, y1 - 0.1, y1 + 0.1, alpha=0.2)\naxs[1, 1].fill_between(x, y2 - 0.1, y2 + 0.1, alpha=0.2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmicrophones = np.arange(2, 9)\nwer_ihm = [8.4, 7.1, 6.3, 5.7, 5.3, 4.9, 4.4]\nwer_sdm = [8.2, 7.2, 6.4, 5.8, 5.3, 4.9, 4.4]\nami_wer = [2.3, 2.2, 2.1, 2.0, 2.0, 2.0, 2.0]\n\nfig, ax = plt.subplots()\nax.plot(microphones, wer_ihm, 'o--', label='IHM')\nax.plot(microphones, wer_sdm, 'o-', label='SDM')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER(%)')\nax.legend()\n\nax2 = ax.twinx()  # instantiate a second axes that shares the same x-axis\nax2.plot(microphones, ami_wer, 'o:', color='C3')\nax2.set_ylabel('AMI WER(%)', color='C3')\nax2.tick_params('y', colors='C3')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmicrophones = np.arange(2, 9)\nami_wer = [16.4, 15.3, 14.5, 13.5, 12.5, 11.0, 10.0]\nlibrispeech_wer = [7.0, 6.0, 5.5, 5.0, 4.5, 4.0, 3.5]\n\n# plot\nfig, ax = plt.subplots()\nax.plot(microphones, ami_wer, 'o--', color='orange', label='AMI (dev)')\nax.plot(microphones, librispeech_wer, '^--', color='blue', label='LibriCSS (test)')\nax.set_ylabel('WER(%)')\nax.set_xlabel('Number of microphones')\nax.legend()\n\n# trend lines\nihm_trend = 9.5 * microphones + 10.0\nsdm_trend = -1.3 * microphones + 9.5\nax.plot(microphones, sdm_trend, '--', color='purple', label='SDM Trend')\nax.plot(microphones, ihm_trend, '--', color='green', label='IHM Trend')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmicrophones = np.arange(2, 9)\nlibriCSS_WER = [0.16, 0.14, 0.9, 0.3, 0.2, 0.2, 0.2, 0.2]\nAMI_WER = [0.99, 0.5, 0.3, 0.3, 0.3, 0.5, 0.6, 1.0]\n\n# plot\nfig, ax = plt.subplots()\nax.plot(microphones, libriCSS_WER, marker='o', label=\"LibriCSS WER\")\nax.plot(microphones, AMI_WER, marker='s', label=\"AMI WER\")\n\n# horizontal line at threshold\nax.axhline(y=0.7, color='r', linestyle='--', label='Threshold')\n\n# annotate highlights\nfor highlight in ['Highlight 3', 'Highlight 5', 'Highlight 7']:\n    x = np.arange(3, 8, 2)[np.where(highlight in ['Highlight 3', 'Highlight 5', 'Highlight 7'])]\n    y = np.array([0.14, 0.3, 0.2])[np.where(highlight in ['Highlight 3', 'Highlight 5', 'Highlight 7'])]\n    ax.annotate(highlight, (x[0], y[0]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER(%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 1.1, 0.1)\ny = [78, 76, 78, 80, 82, 84]\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(9, 9))\naxs[0, 0].plot(x, y)\naxs[0, 0].set_title('Positive bound.')\naxs[0, 0].fill_between(x, y - 5, y + 5, alpha=0.2)\n\naxs[0, 1].plot(x, y)\naxs[0, 1].set_title('Negative bound.')\naxs[0, 1].fill_between(x, y - 5, y + 5, alpha=0.2)\n\naxs[1, 0].plot(x, y)\naxs[1, 0].set_title('Contrastive loss weight.')\naxs[1, 0].fill_between(x, y - 5, y + 5, alpha=0.2)\n\naxs[1, 1].plot(x, y)\naxs[1, 1].set_title('Fuzzy coefficient.')\naxs[1, 1].fill_between(x, y - 5, y + 5, alpha=0.2)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmicrophones = np.arange(2, 9)\nlibrisss_wer = [0.9, 0.9, 0.9, 0.8, 0.85, 0.85, 0.85, 0.8]\nami_wer = [0.3, 0.3, 0.3, 0.7, 0.7, 0.7, 0.7, 0.2]\n\nfig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)\n\nax1.plot(microphones, librisss_wer, marker='o')\nax1.set_ylabel('LibriCSS WER')\nax1.set_ylim([0.2, 1.0])\nax1.set_title('Highlight 3')\nax1.axhline(y=0.7, color='r', linestyle='--')\n\nax2.plot(microphones, ami_wer, marker='o')\nax2.set_ylabel('AMI WER')\nax2.set_ylim([0.2, 1.0])\nax2.set_title('Highlight 5')\nax2.axhline(y=0.7, color='r', linestyle='--')\n\nax2.set_xlabel('Number of Microphones')\nax2.set_xlim([2, 8])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nr = np.arange(0.1, 1.0, 0.1)\npna = 0.5 * r + 0.5\ngin = 0.3 * r + 0.7\ns = np.random.rand(len(r))\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True)\nax0.plot(r, pna, 'o--', color='blue')\nax0.fill_between(r, pna - s, pna + s, color='blue', alpha=.2)\nax0.set_title('SPMotif-0.5')\n\nax1.plot(r, gin, 'o--', color='green')\nax1.fill_between(r, gin - s, gin + s, color='green', alpha=.2)\nax1.set_title('SPMotif-0.7')\n\nax2.plot(r, pna, 'o--', color='blue')\nax2.fill_between(r, pna - s, pna + s, color='blue', alpha=.2)\nax2.set_title('SPMotif-0.9')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nr = np.arange(0.1, 1.0, 0.02)\npna = 3 * r / (1 - r)\ngin = 4 * r / (1 - r)\n\nax.plot(r, pna, color='purple', label='PNA + ours')\nax.plot(r, gin, color='gold', label='GIN + ours')\n\nax.set_title('Dynamic Performance Trends')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nr = np.arange(0.1, 1.0, 0.1)\npna = r * 2.5 + 0.5\ngin = r * 1.5 + 0.5\n\n# plot with error bars\nplt.errorbar(r, pna, fmt='o', yerr=0.3, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r, pna, fmt='o', yerr=0.3, capsize=10, label=\"PNA + ours\")\nplt.errorbar(r, gin, fmt='o', yerr=0.3, capsize=10, label=\"GIN + ours\")\n\n# plot with error bars and custom capsize\nplt.errorbar(r"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nr = np.arange(0.1, 1.0, 0.1)\npna = (1 - r) / 4 + r / 2 + 0.1 * np.sin(8 * np.pi * r)\ngin = 3 * r**2 - 0.5 * r**3\n\nfig, ax = plt.subplots()\nax.errorbar(r, pna, xerr=0.05, yerr=0.05, fmt='o', c='b')\nax.errorbar(r, gin, xerr=0.05, yerr=0.05, fmt='o', c='r')\n\nax.set_title('Dynamic Model Performance')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\nax.legend(['PNA + ours', 'GIN + ours'])\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(5, 30)\ny1 = (1 + 0.5 * np.random.rand(len(x)))\ny2 = (1 + 0.75 * np.random.rand(len(x)))\n\nfig, ax = plt.subplots()\nax.plot(x, y1, 'b', label='Model 1 Mean Accuracy')\nax.plot(x, y2, 'r', label='Model 2 Mean Accuracy')\n\nax.fill_between(x, y1, y2, color='b', alpha=.1)\nax.set_title('Comparison of Model Accuracies')\nax.set_xlabel('Ensemble Size')\nax.set_ylabel('Accuracy')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(9)\ny = np.sin(x / 2 ** 0.5)\ny2 = y * 3\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3)\n\nax0.plot(x, y, 'o-')\nax0.set_title('Performance of Model X')\nax0.legend(['Config A - Model X', 'Config B - Model X', 'Config C - Model X'])\n\nax1.plot(x, y2, '^--')\nax1.set_title('Performance of Model Y')\nax1.legend(['Config A - Model X', 'Config B - Model X', 'Config C - Model X'])\n\nax2.plot(x, y, 'o-', x, y2, '^--')\nax2.set_title('Performance of Model Z')\nax2.legend(['Config A - Model X', 'Config B - Model X', 'Config C - Model X'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0), sharex=True)\naxs[0].set_title('Performance of Llama')\naxs[1].set_title('Performance of Falcon')\naxs[2].set_title('Performance of Qwen')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# make up some data\nall_data = [np.random.randn(10, 10) for i in range(10)]\n\n# plot it\nfor ax, data in zip(axs, all_data):\n    ax.plot(data)\n    ax.set_xlim(0, 10)\n    ax.set_ylim(-2, 2)\n    ax.grid(True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0.1, 2, 0.2)\ny1 = x ** 2 + 0.1 * np.random.rand(len(x))\ny2 = x ** 3 + 0.1 * np.random.rand(len(x))\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nax0.plot(x, y1)\nax0.set_title('Sharing y axis')\nax0.set_ylabel('y data')\n\nax1.plot(x, y2)\nax1.set_xlabel('x data')\nax1.set_ylabel('y data')\nax1.set_title('Sharing y axis')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(0, 7e3, 100)\ny1 = x / 2 + 10\ny2 = 5 * np.sin(x / 1000) + 10\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(9, 6))\n\naxs[0, 0].plot(x, y1, color='C0')\naxs[0, 0].set_title('Traffic Performance')\n\naxs[0, 1].plot(x, y1, color='C0', label='ECL Run 1')\naxs[0, 1].plot(x, y2, color='C1', label='ECL Run 2')\naxs[0, 1].set_title('ETMm2 Performance')\naxs[0, 1].legend()\n\naxs[1, 0].plot(x, y1, color='C0', label='ECL Run 1')\naxs[1, 0].plot(x, y2, color='C1', label='ECL Run 2')\naxs[1, 0].set_title('ETTh2 Performance')\naxs[1, 0].legend()\n\naxs[1, 1].plot(x, y1, color='C0', label='ECL Run 1')\naxs[1, 1].plot(x, y2, color='C1', label='ECL Run 2')\naxs[1, 1].set_title('ECL Performance')\naxs[1, 1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 5)\ny1 = x + 3\ny2 = x - 4\nyerr = np.random.normal(size=len(x))\n\nfig, ax = plt.subplots()\nax.errorbar(x, y1, yerr=yerr, fmt='o', label='Dry')\nax.errorbar(x, y2, yerr=yerr, fmt='o', label='Rain')\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 5\nx = np.arange(N)\ny0 = (20 + 10 * np.random.rand(N))\ny1 = (20 + 10 * np.random.rand(N))\ny2 = (20 + 10 * np.random.rand(N))\n\nfig, axs = plt.subplots(nrows=3, ncols=2, figsize=(6, 6),\n                        sharex=True, sharey=True)\n\n# plot 1\naxs[0, 0].plot(x, y0)\naxs[0, 0].set_title('Category A Growth')\n\n# plot 2\naxs[0, 1].plot(x, y1)\naxs[0, 1].set_title('Category B Growth')\n\n# plot 3\naxs[1, 0].plot(x, y2)\naxs[1, 0].set_title('Category C Growth')\n\n# plot 4\naxs[1, 1].plot(x, y0, color='tab:blue')\naxs[1, 1].plot(x, y1, color='tab:orange')\naxs[1, 1].plot(x, y2, color='tab:green')\naxs[1, 1].set_title('Category D Growth')\n\n# plot 5\naxs[2, 0].plot(x, y0, color='tab:blue')\naxs[2, 0].plot(x, y1, color='tab:orange')\naxs[2, 0].plot(x, y2, color='tab:green')\naxs[2, 0].set_title('Category E Growth')\n\n# plot 6\naxs[2, 1].plot(x, y0, color='tab:blue')\naxs[2, 1].plot(x, y1, color='tab:orange')\naxs[2, 1].plot(x, y2, color='tab:green')\naxs[2, 1].set_title('Category F Growth')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nN = np.arange(1, 31)\nx = N * 1e-10\ny = x / (2 * np.pi)\n\nfig, ax = plt.subplots()\nax.loglog(N, y, 'x', label='Constrained')\nax.loglog(N, y + 1e-12, marker='o', label='Standard')\n\nax.set_xlabel('N')\nax.set_ylabel('y')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 4))\n\n# bar plot\nax1.bar(['South', 'North', 'East', 'West'], [25, 40, 15, 10])\nax1.set_title('Bar Plot')\n\n# pie chart\nax2.pie([35, 25, 20, 15], labels=['North', 'South', 'East', 'West'])\nax2.set_title('Pie Chart')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.colors import Normalize\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute some test data over a rectangular grid\nX = np.linspace(-3, 3, 256)\nY = np.linspace(-3, 3, 256)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nZ = (Z1 - Z2) * 2\n\n# Plot the data using different colormaps\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(6, 6))\n\nnorm = Normalize()\ncmap = cm.RdYlGn\naxs[0, 0].pcolormesh(X, Y, Z, norm=norm, cmap=cmap)\naxs[0, 0].set_title('RdYlGn')\n\nnorm = Normalize()\ncmap = cm.PuBu_r\naxs[0, 1].pcolormesh(X, Y, Z, norm=norm, cmap=cmap)\naxs[0, 1].set_title('PuBu_r')\n\nnorm = Normalize()\ncmap = cm.PuBu\naxs[1, 0].pcolormesh(X, Y, Z, norm=norm, cmap=cmap)\naxs[1, 0].set_title('PuBu')\n\nnorm = Normalize()\ncmap = cm.PuOr\naxs[1, 1].pcolormesh(X, Y, Z, norm=norm, cmap=cmap)\naxs[1, 1].set_title('PuOr')\n\n# Plot the data using a single color map with a single color bar\nfig, ax = plt.subplots()\n\nnorm = Normalize()\ncmap = cm.PuBu_r\nim = ax.pcolormesh(X, Y, Z, norm=norm, cmap=cmap)\nfig.colorbar(im, ax=ax)\nax.set_title('Single color map')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2)\nfig.suptitle('Robust Error (%)')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\nerror = 44.15 + np.random.randn(7) * 5\nax1.bar(range(7), error)\nax1.set_title('Engstrom (M1)')\nax1.set_ylabel('Robust Error (%)')\n\nerror = 44.05 + np.random.randn(7) * 5\nax1.bar(range(7), error)\nax1.set_title('Zhang (M2)')\nax1.set_ylabel('Robust Error (%)')\n\nerror = 41.55 + np.random.randn(7) * 5\nax1.bar(range(7), error)\nax1.set_title('Rice (M3)')\nax1.set_ylabel('Robust Error (%)')\n\nerror = 40.90 + np.random.randn(7) * 5\nax1.bar(range(7), error)\nax1.set_title('Rade (M4)')\nax1.set_ylabel('Robust Error (%)')\n\nerror = 40.65 + np.random.randn(7) * 5\nax1.bar(range(7), error)\nax1.set_title('Hendrycks (M5)')\nax1.set_ylabel('Robust Error (%)')\n\nerror = 39.45 + np.random.randn(7) * 5\nax1.bar(range(7), error)\nax1.set_title('Addep. (M6)')\nax1.set_ylabel('Robust Error (%)')\n\nerror = 36.70 + np.random.randn(7) * 5\nax1.bar(range(7), error)\nax1.set_title('Carmon (M7)')\nax1.set_ylabel('Robust Error (%)')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\nrnf = np.array([[0.00, 6.20, 4.90, 4.25, 5.40, 3.65, 3.25],\n                [6.65, 0.00, 5.15, 2.80, 5.25, 2.85, 2.50],\n                [7.75, 7.70, 0.00, 5.35, 6.30, 4.80, 4.15],\n                [7.85, 5.90, 6.25, 0.00, 5.45, 3.85, 2.95],\n                [9.15, 8.75, 7.25, 5.75, 0.00, 5.25, 4.95],\n                [8.65, 7.40, 6.95, 5.25, 6.45, 0.00, 4.00],\n                [10.90, 9.90, 9.15, 7.15, 8.95, 6.85, 0.00]])\nax2.imshow(rnf)\nax2.set_xticks(np.arange(7))\nax2.set_yticks(np.arange(7))\nax2.set_xticklabels(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)'])\nax2.set_yticklabels(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors as mcolors\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# example data\nx = np.arange(12)\ny = np.sin(x / 3 + np.pi / 4)\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True, figsize=(6, 6))\n\n# first plot\nax0.bar(x, y)\nax0.set_title('VGG 16')\n\n# second plot\nax1.bar(x, y)\nax1.set_title('Resnet 101')\nax1.set_xticks([])\n\n# third plot\nax2.bar(x, y)\nax2.set_title('Rotation invariance')\nax2.set_xticks([])\n\n# make a copy of the color cycle, so we don't affect the defaults\ncolors = mcolors.cnames.copy()\n\n# remove the last two colors from the cycle\ndel colors['lightgoldenrodyellow']\ndel colors['lightblue']\n\n# set the color cycle to our new list of colors\nax2.set_color_cycle(colors.values())\n\n# plot the data with different colors\nax2.plot(x, y, 'o', color='lightgoldenrodyellow')\nax2.plot(x, y + 1, '^', color='lightblue')\nax2.plot(x, y + 2, 's', color='lightcoral')\nax2.plot(x, y + 3, 'x', color='lightgreen')\nax2.plot(x, y + 4, '*', color='lightseagreen')\nax2.plot(x, y + 5, 'p', color='lightyellow')\nax2.plot(x, y + 6, 'h', color='lightcyan')\nax2.plot(x, y + 7, 'd', color='lightpink')\nax2.plot(x, y + 8, 'v', color='lime')\nax2.plot(x, y + 9, 'D', color='lightblue')\nax2.plot(x, y + 10, 'P', color='lightgreen')\nax2.plot(x, y + 11, 'H', color='lightcoral')\nax2.plot(x, y + 12, 'd', color='lightgoldenrodyellow')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.colors import Normalize\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute some test data over a rectangular grid\nX = np.linspace(-3, 3, 256)\nY = np.linspace(-3, 3, 256)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nQ = Z1 - Z2\n\n# Set up the figure and axes\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(8, 8))\n\n# Use linear color mapping\nnorm = Normalize()\nim = axs[0, 0].pcolormesh(X, Y, Q, norm=norm)\nfig.colorbar(im, ax=axs[0, 0])\naxs[0, 0].set_title('Linear mapping')\n\n# Use a log color mapping\nnorm = cm.ScalarMappable(norm=Normalize(), cmap='viridis')\nim = axs[0, 1].pcolormesh(X, Y, Q, norm=norm)\nfig.colorbar(im, ax=axs[0, 1])\naxs[0, 1].set_title('Log mapping')\n\n# Use a power color mapping\nnorm = cm.ScalarMappable(norm=Normalize(), cmap='viridis')\nim = axs[1, 0].pcolormesh(X, Y, Q, norm=norm)\nfig.colorbar(im, ax=axs[1, 0])\naxs[1, 0].set_title('Power mapping')\n\n# Use a power color mapping with a different exponent\nnorm = cm.ScalarMappable(norm=Normalize(), cmap='viridis')\nim = axs[1, 1].pcolormesh(X, Y, Q, norm=norm)\nfig.colorbar(im, ax=axs[1, 1])\naxs[1, 1].set_title('Power mapping\\nwith exponent 0.5')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\n# the boxplot\nrarity = np.random.normal(loc=0.0, scale=1.0, size=100)\nax0.boxplot(rarity)\nax0.set_title('Token rarity')\n\n# the bar plot\nlength = 20\nn_samples = 100\nn_documents = [0, 10000, 20000, 30000, 40000]\nlosses = np.random.normal(loc=7.0, scale=1.0, size=(len(n_documents), n_samples))\nfor i, n in enumerate(n_documents):\n    losses[i] += n / 10000 * np.random.normal(scale=0.5, size=n_samples)\nax1.boxplot(losses)\nax1.set_xticklabels(['{}k'.format(n) for n in n_documents])\nax1.set_xlabel('# of documents')\nax1.set_ylabel('Loss')\n\nfig.suptitle('Length = 20')\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = ['Unchanged Correct', 'Unfixed Mistake', 'New Correct', 'New Mistake']\ny = [-0.24, -0.03, 0.05, 0.31]\nc = [0.14, 0.17, 0.12, 0.13]\ns = [0.22, 0.17, 0.12, 0.13]\n\nfig, ax = plt.subplots()\nim = ax.imshow(c)\n\n# we want to show all ticks, and label them with their respective value\nax.set_xticks(np.arange(len(x)))\nax.set_yticks(np.arange(len(y)))\nax.set_xticklabels(x)\nax.set_yticklabels(y)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(y)):\n    for j in range(len(x)):\n        text = ax.text(j, i, '{:.2f}'.format(c[i][j]),\n                       ha=\"center\", va=\"center\",\n                       color=\"w\" if c[i][j] > 0 else \"black\")\n\nax.figure.colorbar(im, ax=ax)\n\n# We want to show all ticks...\nax.grid(True)\n# ... and label them with their respective value\nax.set_xlabel(\"Sentiment\")\nax.set_ylabel(\"Toxicity\")\nax.set_title(\"News\")\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nsuccess_rates = [40, 58, 50, 30]\nupper_thresholds = [0.52, 0.6, 0.57, 0.55]\nlower_thresholds = [0.45, 0.5, 0.5, 0.45]\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.bar(range(4), success_rates)\nax0.set_ylabel('# successful adv. circuits')\nax0.set_ylim(0, 60)\n\nax1.boxplot([upper_thresholds, lower_thresholds])\nax1.set_xticklabels(('c1355', 'c1908', 'c2670', 'c3540'))\nax1.set_ylabel('OMLA KPA')\nax1.set_ylim(0.3, 0.7)\nax1.set_xlim(-0.5, 3.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.arange(0.1, 10, 0.5)\ny1 = x ** 2 / np.pi\ny2 = np.sin(x)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.plot(x, y1)\nax0.set_title('Knowledge Increase by Subject Area')\nax0.legend(['Education', 'Law', 'Technology'])\n\nax1.bar(x, y2)\nax1.set_title('Number of Publications by Domain')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 50\nx = np.random.rand(N)\ny = np.random.rand(N)\nr = np.sqrt(x**2 + y**2)\narea = 20 * r**2  # 20 times the point radius\n\nfig, ax = plt.subplots()\nc = ax.scatter(x, y, c=r, s=area, cmap='Blues')\n\nax.set_xlabel('X axis label')\nax.set_ylabel('Y axis label')\n\n# set the limits of the x/y axis\nax.set_xlim((0, 1))\nax.set_ylim((0, 1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 5\nmen_means = (20, 35, 30, 35, 27)\nmen_std = (2, 3, 4, 1, 2)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nax.bar(ind, men_means, width, yerr=men_std, label='Men')\n\n# now add some vertical lines\nfor i in range(len(ind)):\n    ax.vlines(ind[i], 0, 10, color='gray', linestyle='dashed')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\nax.set_title('Average Legal Crime Rates by Country')\nax.set_xticks(ind)\nax.set_xticklabels(('USA', 'UK', 'Germany', 'France', 'Italy'))\nax.legend()\n\n# add some horizontal gridlines\nax.grid(b=True, which='major', axis='x', linestyle='--')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nn_bins = 20\n\n# the histogram of the data\nfig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True, figsize=(9, 4))\nn, bins, patches = ax1.hist(np.random.randn(1000), n_bins, density=True)\n\n# add a 'best fit' line\ny = m * x + b\nax1.plot(bins, y, '--')\nax1.set_xlabel('Smarts')\nax1.set_ylabel('Probability density')\nax1.set_title('Example histogram of the first dataset')\n\n# The histogram of a single feature\ndata1 = np.random.multivariate_normal([10, 10], [[3, 1], [1, 3]], size=1000)\ndata2 = np.random.multivariate_normal([30, 20], [[2, 4], [4, 2]], size=300)\nhist_data = [data1, data2]\nn, bins, patches = ax2.hist(hist_data, n_bins, density=True, histtype='stepfilled', alpha=0.3,\n                            label=['Data 1', 'Data 2'])\n\nax2.legend()\nax2.set_title('Multiple datasets with different colors')\n\nfig.tight_layout()\nplt.show()\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata = np.random.normal(0, 1, 1000)\n\n# example data\nnp.random.seed(19680801)\ndata ="}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\n# example data\nmu = 10000\nsigma = 2000\nx = mu + sigma * np.random.randn(437)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=True, histtype='stepfilled')\n\n# add a 'best fit' line\ny = mlab.normpdf(bins, mu, sigma)\nplt.plot(bins, y, '--')\nplt.title('Histogram of data with Gaussian kernel density estimate')\n\n# show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 20\nx = np.linspace(0.1, 2 * np.pi, N)\ny1 = 2 * np.sin(x)\ny2 = 0.8 * np.exp(-x)\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True)\n\nax0.plot(x, y1, color='tab:blue')\nax0.set_title('Investment Growth Over Time')\nax0.legend(['Stocks', 'Bonds', 'Real Estate'])\n\nax1.bar(x, y1, color='tab:orange')\nax1.bar(x, y2, bottom=y1, color='tab:red')\nax1.set_title('Popularity of Financial Products')\n\nax2.hist([np.random.normal(), np.random.normal()], bins=4, color=['tab:blue', 'tab:orange'])\nax2.legend(['Urban Loans', 'Rural Loans'])\nax2.set_title('Loan Amount Distribution by Region')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(3, 1, figsize=(8, 12), sharex=True)\nfig.suptitle('AI Task Success Rates')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Artificial data\nsuccess_rates = [84.5, 78.2, 91.3, 86.5]\nerror_rates = [3.2, 5.3, 2.5, 6.4]\n\naxs[0].bar(success_rates, width=0.25, yerr=error_rates)\naxs[0].set_title('Image Recog.')\naxs[0].set_ylabel('Success Rate (%)')\n\nsuccess_rates = [80.5, 79.5, 82.5, 81.5]\nerror_rates = [2.5, 3.5, 2.5, 3.5]\n\naxs[1].bar(success_rates, width=0.25, yerr=error_rates)\naxs[1].set_title('Speech Recog.')\n\nsuccess_rates = [90.5, 89.5, 92.5, 91.5]\nerror_rates = [1.5, 2.5, 1.5, 2.5]\n\naxs[2].bar(success_rates, width=0.25, yerr=error_rates)\naxs[2].set_title('Game AI')\naxs[2].set_xlabel('Algorithm')\n\nfig, axs = plt.subplots(1, 1, figsize=(8, 5))\nfig.suptitle('Algorithm Efficiency Scores')\n\n# Artificial data\nefficiency_scores = [85, 90, 88, 92]\nerror_scores = [2, 3, 2, 3]\n\naxs.errorbar(efficiency_scores, yerr=error_scores)\naxs.set_title('Algorithm Efficiency Scores')\naxs.set_xlabel('Algorithm')\naxs.set_ylabel('Efficiency (%)')\n\nfig, axs = plt.subplots(1, 1, figsize=(8, 5))\nfig.suptitle('AI Model Adaptability')\n\n# Artificial data\nadaptability_scores = [95, 85, 90, 92]\nerror_scores = [1, 2, 1, 2]\n\naxs.errorbar(adaptability_scores, yerr=error_scores)\naxs.set_title('AI Model Adaptability')\naxs.set_xlabel('Model')\naxs.set_ylabel('Adaptability Score (%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.random.randn(1000, 2)\ny = np.random.randn(1000, 2)\nspeed = np.random.randint(50, 200, 1000)\nlocation = np.random.randint(0, 2, 1000)\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, figsize=(6, 9))\n\nax0.hist(x, 40, color='C0', histtype='stepfilled')\nax0.hist(y, 40, color='C1', histtype='stepfilled')\n\nax1.boxplot(speed, vert=True, patch_artist=True)\nax1.set_title('Speed Distribution by Location')\n\nax2.plot(x[location == 0], y[location == 0], 'o', color='C0')\nax2.plot(x[location == 1], y[location == 1], 'o', color='C1')\nax2.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax.plot(x[location == 1, 0], x[location == 1, 1], 'o', color='C1')\nax.legend(('Urban', 'Highway'), scatterpoints=1)\n\nfig, ax = plt.subplots()\nax.plot(x[location == 0, 0], x[location == 0, 1], 'o', color='C0')\nax"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(1, 2)\n\n# Pie chart: Percentage of students participating in each arts education program\nlabels = 'Literature', 'Dance', 'Music', 'Visual Arts', 'Performing Arts'\nsizes = [10., 15., 20., 25., 30.]\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:olive', 'tab:red']\nexplode = (0, 0.1, 0, 0, 0)  # explode the 2nd slice (Dance)\naxs[0].pie(sizes, explode=explode, labels=labels, colors=colors,\n           autopct='%1.1f%%', shadow=True, startangle=90)\naxs[0].set_title('Distribution of Arts Education Programs')\n\n# Radar chart: Student performance in arts education\nN = 6\nradii = [0.2, 0.4, 0.6, 0.8]\ntheta = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nangles = [t / 2. * np.pi for t in theta]\nvalues = [0.2, 0.4, 0.6, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6, 0.8, 0.6]\naxs[1].plot(angles, values, color='tab:blue', linewidth=2, linestyle='solid')\naxs[1].set_radaraxis(radii, minor_radius=0.05)\naxs[1].set_title('Student Performance in Arts Education')\naxs[1].set_thetagrids(angles * 180. / np.pi, labels=['Dedication', 'Collaboration', 'Creativity', 'Expression', 'Dedication', 'Collaboration', 'Creativity', 'Expression', 'Dedication', 'Collaboration', 'Creativity'])\naxs[1].set_yticklabels([])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.random.rand(10, 10)\nc = np.random.randint(10, size=10)\n\nfig, ax = plt.subplots()\nim = ax.imshow(x, interpolation='nearest', cmap='viridis')\n\n# we want to show all ticks, and no axes at all:\nax.set_xticks(np.arange(x.shape[1]))\nax.set_yticks(np.arange(x.shape[0]))\nax.set_xticklabels(['Product %d' % i for i in range(1, 7)])\nax.set_yticklabels(['Region %d' % i for i in range(1, 6)])\n\n# show all ticks and labels\nax.grid(True)\n\n# add colorbar\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('User Ratings')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nreturns = np.random.randn(1000, 2)\nreturns[:, 0] += 0.005 + 0.3 * (returns[:, 0] > 0)\nreturns[:, 1] += 0.005 + 0.3 * (returns[:, 1] > 0)\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True, figsize=(9, 4))\n\nax1.hist(returns, bins=20, color=['C0', 'C1'])\nax1.set_title('Histogram of Stock Returns')\nax1.legend(['Gains', 'Losses'])\n\nax2.scatter(returns[:, 0], returns[:, 1])\nax2.set_title('Investment Clusters')\nax2.legend(['Tech Stocks', 'Energy Stocks'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax1 = fig.add_subplot(121)\nax1.plot(np.arange(5), [10, 20, 10, -10, 20])\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.grid(True)\n\nax2 = fig.add_subplot(122, projection='3d')\nX = np.arange(-4, 5)\nY = np.arange(-4, 5)\nX, Y = np.meshgrid(X, Y)\nZ = np.sin(np.sqrt(X**2 + Y**2)) / (np.sqrt(X**2 + Y**2))\nsurf = ax2.plot_surface(X, Y, Z, rstride=1, cstride=1,\n                        cmap='viridis', edgecolor='none')\nax2.set_zlim(-1, 1)\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2)\nw = 0.3  # the width of the bars: can also be len(x) sequence\n\nx = np.arange(4)\ny1 = np.sin(x * (2.0 * np.pi))\ny2 = np.sin((x + w) * (2.0 * np.pi))\n\nax1.bar(x, y1, w)\nax1.set_title('Historical Document Types in Library')\n\nax2.bar(x, y2, w)\nax2.set_title('Document Count Over Historical Periods')\nax2.set_xlabel('Year')\nax2.set_ylabel('Number of Documents')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100  # mean of distribution\nsigma = 15  # standard deviation of distribution\nsatisfaction = [np.random.normal(mu, sigma, 300) for i in range(5)]\nnames = ['Gucci', 'Prada', 'Louis Vuitton', 'Chanel', 'Dior']\n\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(9, 4))\n\n# the boxplot\nbplot1 = ax1.boxplot(satisfaction)\nax1.set_title('Customer Satisfaction Distribution Across Brands')\n\n# adding vertical line at the mean\nmean = np.mean(satisfaction, axis=1)\nax1.vlines(mean, 0, 10, color='r', linestyle='dashed', lw=3, label='Mean')\n\n# adding labels\nax1.set_xlabel('Brands')\nax1.set_ylabel('Customer Satisfaction')\nax1.set_xticklabels(names)\nax1.legend()\n\n# the violin plot\nbplot2 = ax2.violinplot(satisfaction, showmeans=False, showmedians=False,\n                        showextrema=False)\nax2.set_title('Luxury Brand Popularity vs Price')\n\n# adding horizontal lines at the means\nfor i in range(5):\n    ax2.axhline(y=np.mean(satisfaction[i]), xmin=0, xmax=1,\n                color='r', alpha=0.5)\n\n# adding labels\nax2.set_xlabel('Average Price ($)')\nax2.set_ylabel('Popularity Index')\nax2.set_xticks([1, 2, 3, 4, 5])\nax2.set_xticklabels(names)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(6)\ny1 = (20 + 16 * x) % 100\ny2 = (23 + 45 * x) % 100\ny3 = (40 + 26 * x) % 100\n\nfig, axs = plt.subplots(nrows=2, ncols=3, figsize=(9, 6))\n\n# bar plot\nax = axs[0, 0]\nax.bar(x, y1)\nax.set_title('Accuracy (%)')\n\n# stacked bar plot\nax = axs[0, 1]\nax.bar(x, y1, label='Zhang2020')\nax.bar(x, y2, bottom=y1, label='Addelpalli2021')\nax.bar(x, y3, bottom=y1+y2, label='Rice2020')\nax.legend()\nax.set_title('Accuracy Diff. (%)')\n\n# stacked bar plot with NFR\nax = axs[0, 2]\nax.bar(x, y1, label='Zhang2020', color='green')\nax.bar(x, y2 - y1, bottom=y1, label='Addelpalli2021', color='red')\nax.bar(x, y3 - y1 - y2, bottom=y1+y2, label='Rice2020', color='blue')\nax.legend()\nax.set_title('NFR (%)')\n\n# stacked bar plot with NFR\nax = axs[1, 0]\nax.bar(x, y1, label='Engstrom2019', color='red')\nax.bar(x, y2 - y1, bottom=y1, label='Zhang2020', color='green')\nax.bar(x, y3 - y1 - y2, bottom=y1+y2, label='Rade2021', color='blue')\nax.legend()\nax.set_title('Robust Accuracy (%)')\n\n# stacked bar plot with NFR\nax = axs[1, 1]\nax.bar(x, y1, label='Engstrom2019', color='red')\nax.bar(x, y2 - y1, bottom=y1, label='Zhang2020', color='green')\nax.bar(x, y3 - y1 - y2, bottom=y1+y2, label='Rade2021', color='blue')\nax.legend()\nax.set_title('Robust Accuracy Diff. (%)')\n\n# stacked bar plot with NFR\nax = axs[1, 2]\nax.bar(x, y1, label='Engstrom2019', color='red')\nax.bar(x, y2 - y1, bottom=y1, label='Zhang2020', color='green')\nax.bar(x, y3 - y1 - y2, bottom=y1+y2, label='Rade2021', color='blue')\nax.legend()\nax.set_title('Robust NFR (%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\ncontext = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\ngeneralized_variance = [0.28, 0.49, 0.59, 0.71, 0.8, 0.9]\navg_regret = [0.34, 0.29, 0.24, 0.2, 0.16, 0.12]\n\nfig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)\n\nax1.bar(context, generalized_variance)\nax1.set_ylabel('Generalized Variance')\nax1.set_ylim(0, 1)\n\nax2.plot(context, avg_regret)\nax2.set_xlabel('Trials')\nax2.set_ylabel('Avg. Regret')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, axs = plt.subplots(nrows=3, figsize=(6, 9))\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# fake data\nx = np.arange(20)\ny = np.random.randn(20)\ny2 = y + 2 * np.random.randn(20)\n\n# left plot\naxs[0].scatter(x, y, color='tab:blue')\naxs[0].set_title('Elo Rating')\naxs[0].set_xlabel('Debater')\naxs[0].set_ylabel('Elo Rating')\n\n# middle plot\naxs[1].scatter(x, y, color='tab:orange')\naxs[1].scatter(x, y2, color='tab:green')\naxs[1].set_title('Correct Rating - Incorrect Rating')\naxs[1].set_xlabel('Elo Rating')\naxs[1].set_ylabel('Correct Rating - Incorrect Rating')\n\n# right plot\naxs[2].scatter(x, y, color='tab:red')\naxs[2].scatter(x, y2, color='tab:purple')\naxs[2].set_title('Judge Accuracy (%)')\naxs[2].set_xlabel('Aggregate Elo Rating')\naxs[2].set_ylabel('Judge Accuracy (%)')\n\n# Add legend\ndebaters = ['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo']\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nfor debater, color in zip(debaters, colors):\n    axs[0].plot([], [], color=color, label=debater)\n    axs[1].plot([], [], color=color)\n    axs[2].plot([], [], color=color)\naxs[0].legend()\naxs[1].legend()\naxs[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nfrom matplotlib import pyplot as plt\n\nlabels = '30.5%', '29.8%', '13.2%', '11.3%', '10.6%', '4.6%'\n\nsizes = [30.5, 29.8, 13.2, 11.3, 10.6, 4.6]\n\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\nax.axis('equal')\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\ndata = [90, 225, 1, 60, 1/2, 100]\nlabels = ['90 g sugar', '225 g flour', '1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk']\nax.pie(data, labels=labels, autopct='%1.1f%%')\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute pie slices\nN = 5\ndata = np.array([29.2, 37.5, 41.7, 10.0, 6.7])\nlabels = 'Food', 'Transport', 'Utilities', 'Others', 'Entertainment'\nexplode = (0, 0, 0, 0.1, 0)\n\nax.pie(data, explode=explode, labels=labels, autopct='%1.1f%%',\n       shadow=True, startangle=90)\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(1, 2, figsize=(9, 4))\n\n# LoRA\naxs[0].pie([31.4, 15.7, 19.9, 33.0], labels=['Unused', 'Model', 'Optimizer', 'Gradient'], autopct='%1.1f%%')\naxs[0].set_title('LoRA')\n\n# QLoRA\naxs[1].pie([54.8, 10.5, 6.3, 28.4], labels=['Unused', 'Model', 'Optimizer', 'Gradient'], autopct='%1.1f%%')\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n\ncolors = ['lightgoldenrodyellow', 'orange', 'green', 'gray']\nlabels = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\nsizes = [12.6, 15.9, 26.4, 25.1]\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors)\nax1.set_title('Full Finetuning')\n\nsizes = [4.6, 5.3, 23.9, 46.2]\nax2.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors)\nax2.set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nlabels = 'Proteins', 'Fruits', 'Grains', 'Dairy'\nsizes = [35, 25, 10, 10]\ncolors = ['steelblue', 'tomato', 'goldenrod', 'lightsteelblue']\nexplode = (0, 0.1, 0, 0)\n\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\n       autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# The data\nlabels = 'E-commerce', 'Education', 'Entertainment', 'Technology'\nsizes = [31.2, 28.6, 21.4, 37.5]\ncolors = ['yellow', 'orange', 'lightblue', 'green']\nexplode = (0, 0.1, 0, 0)\n\n# Plot\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\n       autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# the data\ndata = [20.0, 10.0, 16.7, 16.7, 33.3]\nlabels = ['Dogs', 'Logs', 'Frogs', 'Hogs', 'Other']\n\n# the bar width\nw = 0.35 * len(data)\n\n# the positions of the bars on the x-axis\nind = range(len(data))\n\n# plot\nax.bar(ind, data, w, label=labels)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Percent')\nax.set_title('My figure')\nax.set_xticks(ind + w / 2)\nax.set_xticklabels(labels)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.legend(loc='upper left')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nlabels = 'David', 'John', 'Marry', 'Peter'\nsizes = [11.0, 29.0, 20.0, 40.0]\ncolors = ['blue', 'orange', 'green', 'red']\nexplode = (0, 0.1, 0, 0)\n\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\n       autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nax.pie([42, 18, 12, 28],\n       labels=['UK', 'France', 'Germany', 'Italy'],\n       autopct='%1.1f%%',\n       wedgeprops=dict(width=0.3),\n       startangle=90,\n       radius=1.2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nlabels = '5.7%', '13.3%', '14.3%', '19.0%', '21.4%', '26.2%'\nsizes = [5.7, 13.3, 14.3, 19.0, 21.4, 26.2]\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\nax.axis('equal')\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nlabels = 'Psychological', 'Others', 'Market', 'Satisfactory', 'Social'\nsizes = [35.4, 10.3, 24.7, 17.2, 12.4]\n\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\nax.axis('equal')\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nlabels = 'Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn'\nsizes = [35, 25, 20, 10, 10]\ncolors = ['lightblue', 'lightcoral', 'lightskyblue', 'lightseagreen', 'lightsteelblue']\nexplode = (0, 0, 0, 0, 0)\n\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\n       autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nlabels = 'COLING', 'EACL', 'NAACL', 'EMNLP'\nsizes = [7.4, 12.2, 25.4, 20.3]\nexplode = (0, 0.1, 0, 0)\n\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n       shadow=True, startangle=90)\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# the data\nlabels = 'Solar', 'Wind', 'Hydro', 'Coal', 'Other'\nsizes = [20.0, 30.0, 15.0, 25.0, 10.0]\nexplode = (0, 0, 0, 0.1, 0)\n\n# 10% of the \"Coal\" slice is \"exploded\"\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n       shadow=True, startangle=90)\nax.axis('equal')\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, axs = plt.subplots(nrows=2, ncols=2)\naxs = axs.flatten()\n\nx = np.arange(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\nfor ax in axs:\n    ax.plot(x, y, 'o', color='black')\n    ax.plot(x, z, '^', color='red')\n\n    ax.set_title('Out-group bias\\n(Collectivism)')\n    ax.set_xlabel('English')\n    ax.set_ylabel('French')\n    ax.legend(['In-group bias (Individualism)', 'Out-group bias (Collectivism)'])\n\n    ax.set_xlim(-1, 11)\n    ax.set_ylim(-1, 11)\n\n    ax.grid(True)\n\n    ax.set_xticks(np.arange(11))\n    ax.set_yticks(np.arange(11))\n\n    ax.set_xticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n    ax.set_yticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n\n    ax.set_title('In-group bias\\n(Individualism)')\n    ax.set_xlabel('Chinese')\n    ax.set_ylabel('Korean')\n    ax.legend(['In-group bias (Collectivism)', 'Out-group bias (Individualism)'])\n\n    ax.set_xlim(-1, 11)\n    ax.set_ylim(-1, 11)\n\n    ax.grid(True)\n\n    ax.set_xticks(np.arange(11))\n    ax.set_yticks(np.arange(11))\n\n    ax.set_xticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n    ax.set_yticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n\n    ax.set_title('Out-group bias\\n(Individualism)')\n    ax.set_xlabel('German')\n    ax.set_ylabel('Japanese')\n    ax.legend(['In-group bias (Collectivism)', 'Out-group bias (Individualism)'])\n\n    ax.set_xlim(-1, 11)\n    ax.set_ylim(-1, 11)\n\n    ax.grid(True)\n\n    ax.set_xticks(np.arange(11))\n    ax.set_yticks(np.arange(11))\n\n    ax.set_xticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n    ax.set_yticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n\n    ax.set_title('In-group bias\\n(Collectivism)')\n    ax.set_xlabel('Chinese')\n    ax.set_ylabel('Korean')\n    ax.legend(['In-group bias (Collectivism)', 'Out-group bias (Individualism)'])\n\n    ax.set_xlim(-1, 11)\n    ax.set_ylim(-1, 11)\n\n    ax.grid(True)\n\n    ax.set_xticks(np.arange(11))\n    ax.set_yticks(np.arange(11))\n\n    ax.set_xticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n    ax.set_yticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n\n    ax.set_title('Out-group bias\\n(Collectivism)')\n    ax.set_xlabel('German')\n    ax.set_ylabel('Japanese')\n    ax.legend(['In-group bias (Collectivism)', 'Out-group bias (Individualism)'])\n\n    ax.set_xlim(-1, 11)\n    ax.set_ylim(-1, 11)\n\n    ax.grid(True)\n\n    ax.set_xticks(np.arange(11))\n    ax.set_yticks(np.arange(11))\n\n    ax.set_xticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n    ax.set_yticklabels(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nx = np.arange(3)\ny = [4.0, 3.22, -2.44]\nlabels = ['English', 'French', 'German']\n\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [-4, y[i]], color='red')\n    ax.plot(x[i], y[i], marker='o', color='black')\n\nax.set_xlim(-1, 10)\nax.set_ylim(-5, 0)\nax.set_xticks(x)\nax.set_yticks([-4, -3, -2])\nax.set_yticklabels(labels)\nax.set_xlabel('Out-group bias (Collectivism)')\nax.set_ylabel('')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.collections import ArrowCollection\nfrom matplotlib.patches import PathPatch\nfrom matplotlib.path import Path\nfrom matplotlib.transforms import Affine2D\n\nfrom sklearn.linear_model import LinearRegression\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# The data\nx = np.linspace(-3, 3, 10)\ny = np.linspace(-3, 3, 10)\nX, Y = np.meshgrid(x, y)\nU = X\nV = Y\nZ = U**2 + V**2\n\n# The true field\ntrue_field = np.sqrt(Z)\ntrue_field[true_field < 0] = 0\n\n# The SINDy learned field\nsindy_field = np.sqrt(Z)\nsindy_field[sindy_field < 0] = 0\n\n# The training sample\ntrain_sample = np.random.uniform(-3, 3, (50, 2))\ntrain_sample[:, 0] += 0.5 * train_sample[:, 1]\ntrain_sample[:, 1] -= 0.5 * train_sample[:, 0]\n\n# The test sample\ntest_sample = np.random.uniform(-3, 3, (50, 2))\ntest_sample[:, 0] += 0.5 * test_sample[:, 1]\ntest_sample[:, 1] -= 0.5 * test_sample[:, 0]\n\n# The SINDy train\nsindy_train = np.random.uniform(-3, 3, (50, 2))\nsindy_train[:, 0] += 0.5 * sindy_train[:, 1]\nsindy_train[:, 1] -= 0.5 * sindy_train[:, 0]\n\n# The SINDy test\nsindy_test = np.random.uniform(-3, 3, (50, 2))\nsindy_test[:, 0] += 0.5 * sindy_test[:, 1]\nsindy_test[:, 1] -= 0.5 * sindy_test[:, 1]\n\n# The figure\nfig, ax = plt.subplots()\n\n# The true field\nax.quiver(X, Y, U, V, units='xy', scale=10, color='red')\n\n# The SINDy learned field\nax.quiver(X, Y, sindy_field, sindy_field, units='xy', scale=10, color='purple')\n\n# The training sample\nax.scatter(train_sample[:, 0], train_sample[:, 1], c='gray', s=100, alpha=0.5)\n\n# The test sample\nax.scatter(test_sample[:, 0], test_sample[:, 1], c='gray', s=100, alpha=0.5)\n\n# The SINDy train\nax.scatter(sindy_train[:, 0], sindy_train[:, 1], c='gray', s=100, alpha=0.5)\n\n# The SINDy test\nax.scatter(sindy_test[:, 0], sindy_test[:, 1], c='gray', s=100, alpha=0.5)\n\n# The arrows\nax.set_xlim(-3, 3)\nax.set_ylim(-3, 3)\n\n# The grid\nax.grid(True)\n\n# The colorbar\ncmap = cm.get_cmap('viridis')\nnorm = cm.colors.Normalize(vmin=-1, vmax=1)\ncb = fig.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=ax)\ncb.set_label(r'$\\phi$')\n\n# The text\nax.text(0.05, 0.95, 'True Field', transform=ax.transAxes, fontsize=14,\n        verticalalignment='top')\nax.text(0.05, 0.9, 'SINDy Learned Field', transform=ax.transAxes, fontsize=14,\n        verticalalignment='top')\nax.text(0.05, 0.85, 'Train Sample', transform=ax.transAxes, fontsize=14,\n        verticalalignment='top')\nax.text(0.05, 0.8, 'Test Sample', transform=ax.transAxes, fontsize=14,\n        verticalalignment='top')\nax.text(0.05, 0.75, 'SINDy Train', transform=ax.transAxes, fontsize=14,\n        verticalalignment='top')\nax.text(0.05, 0.7, 'SINDy Test', transform=ax.transAxes, fontsize=14,\n        verticalalignment='top')\n\n# The legend\nax.legend(loc='upper left', fontsize=14)\n\n# The plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 100\nx = np.linspace(-3.0, 3.0, N)\ny = np.linspace(-2.0, 2.0, N)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-(X ** 2 + Y ** 2))\nZ2 = np.exp(-(0.3 * X ** 2 + 0.6 * Y ** 2))\nZ = (1 - 0.65 * np.cos(5 * np.pi * X)) * Z1 + 0.65 * Z2\n\nplt.figure(figsize=(5.0, 4.0))\nplt.streamplot(X, Y, -Z, -Z, density=1.5, color='C0', linewidth=2,\n               arrowsize=1.5, arrowstyle='-|>', cmap=cm.coolwarm)\nplt.xlim(-3, 3)\nplt.ylim(-2, 2)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.linspace(-2, 2, 41)\ny = np.linspace(-2, 2, 41)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X * 10)**2 - (Y * 10)**2)\nB = Z1 - Z2\n\nplt.figure(figsize=(6.0, 5.0))\nplt.quiver(x, y, B, units='x')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Magnetic Field \\\\vec{B} in Tesla units')\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(projection='polar')\nr = [79.9, 62.0, 58.5, 54.3, 51.7, 63.4, 75.8, 72.9, 86.4]\ntheta = [0.1, 100.0, 'TextVQA', 66.9, 64.9, 'MME', 69.1, 'MM-Vet', 'POPE']\ncolors = ['red', 'blue', 'gray', 'red', 'blue', 'gray', 'red', 'blue', 'gray']\nfor i in range(len(r)):\n    ax.plot(theta[i], r[i], color=colors[i])\nax.set_rlabel_position(0)\nax.set_title(\"GQA\", va='bottom')\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"polar\"})\n\nspeeds = [40, 20, 60, 80, 40, 20, 60, 80]\nlabels = [\"ar\", \"zh\", \"vi\", \"ur\", \"tr\", \"th\", \"ru\", \"hi\"]\ncolors = [\"pink\", \"green\", \"blue\"]\n\nfor angles, color in zip([speeds], colors):\n    angles += angles[:1]\n    ax.plot(angles, speeds, color=color)\n\nax.set_rlabel_position(-22.5)\nax.set_yticklabels(labels)\nax.set_title(\"XNLI (speed-up ratio: 4)\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nlabels = 'Interference', 'Understanding', 'Questioning', 'Reasoning', 'Paraphrasing', 'Reflection'\nvalues = [3, 5, 2, 7, 3, 4]\nvalues2 = [5, 6, 1, 8, 4, 2]\n\nfig, ax = plt.subplots()\nax.set_rlabel_position(0)\nax.set_title('Yi-6B vs Yi-34B')\nax.polaroid(values, values2, facecolor='lightgreen', edgecolor='green')\nax.legend(labels, loc=\"upper right\", bbox_to_anchor=(1.1, 1.1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 4\nr = 0.5\ndata = [np.random.rand(N) for _ in range(3)]\nlabels = ['GNN_k=1', 'GNN_k=2', 'GNN\u2191']\ncolors = ['blue', 'orange', 'green']\n\nfig, ax = plt.subplots(subplot_kw=dict(polar=True))\nfor d, c in zip(data, colors):\n    ax.plot(d, label=c)\nax.legend(loc='upper right')\nax.set_rmax(r)\nax.set_title(\"\u03bcTrain\")\nax.set_thetagrids(np.arange(0, 360, 45))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(subplot_kw=dict(polar=True))\nax.plot([0.2, 0.4, 0.6, 0.8], [0.2, 0.4, 0.6, 0.8], label='Llama-2-70B')\nax.legend(loc='lower right', bbox_to_anchor=(1, 0.5))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nlabels = 'Math', 'Coding', 'STEM', 'Humanities', 'Reasoning', 'Writing', 'Roleplay'\ncategories = ['Extraction', 'Roleplay']\ndata = [3, 4, 5, 6, 7, 8, 9]\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\n\nfig, ax = plt.subplots()\nax.set_rgrids([2, 4, 6, 8])\nax.set_polar(True)\nax.set_thetagrids(np.arange(0, 360, 45))\nax.set_yticklabels(categories)\nax.set_xticklabels(labels)\nax.plot(data, color=colors, label=categories)\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(6, 6))\nax = fig.add_subplot(projection='polar')\nr = [3, 5, 7, 9, 11, 13, 15]\ntheta = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\nax.plot(theta, r, marker='o')\nax.fill(theta, r, 'b', alpha=0.3)\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure(figsize=(8.0, 7.0))\nax = fig.add_subplot(projection='polar')\nr = np.random.rand(5)\ntheta = np.pi / 2 * (1 + 2 * np.random.rand(5))\nax.polar(theta, r, color='blue', fill=True, alpha=0.25)\nax.set_title(\"Europe\")\nax.set_rmax(85.8)\nax.set_rticks([0., 20., 40., 60., 80., 100.])  # Less radial ticks\nax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line\nax.grid(True)\n\nr = np.random.rand(5)\ntheta = np.pi / 2 * (1 + 2 * np.random.rand(5))\nax.polar(theta, r, color='green', fill=True, alpha=0.25)\nax.set_title(\"China\")\nax.set_rticks([0., 20., 40., 60., 80., 100.])\nax.set_rlabel_position(-22.5)\nax.grid(True)\n\nr = np.random.rand(5)\ntheta = np.pi / 2 * (1 + 2 * np.random.rand(5))\nax.polar(theta, r, color='orange', fill=True, alpha=0.25)\nax.set_title(\"USA\")\nax.set_rticks([0., 20., 40., 60., 80., 100.])\nax.set_rlabel_position(-22.5)\nax.grid(True)\n\nr = np.random.rand(5)\ntheta = np.pi / 2 * (1 + 2 * np.random.rand(5))\nax.polar(theta, r, color='purple', fill=True, alpha=0.25)\nax.set_title(\"India\")\nax.set_rticks([0., 20., 40., 60., 80., 100.])\nax.set_rlabel_position(-22.5)\nax.grid(True)\n\nr = np.random.rand(5)\ntheta = np.pi / 2 * (1 + 2 * np.random.rand(5))\nax.polar(theta, r, color='red', fill=True, alpha=0.25)\nax.set_title(\"Brazil\")\nax.set_rticks([0., 20., 40., 60., 80., 100.])\nax.set_rlabel_position(-22.5)\nax.grid(True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(1, 3, figsize=(9, 3), subplot_kw=dict(polar=True))\n\n# data for the plot\ndata = [5, 4, 3, 2, 1]\nlabels = ['Extrusion', 'Injection', 'Blow Molding', 'Compression', 'Rotational']\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta']\n\nfor ax, color, label in zip(axs, colors, labels):\n    ax.set_rlabel_position(0)\n    ax.plot(data, color=color)\n    ax.fill(data, color=color)\n    ax.set_title(label)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nlabels = 'Food Quality', 'Shows', 'Staff', 'Family Rides', 'Cleanliness', \\\n         'Thrill Rides', 'Wait Times', 'Ticket Price', 'Parking', 'Souvenirs'\nvalues_disney = [0.9, 0.9, 0.95, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\nvalues_universal = [0.8, 0.8, 0.85, 0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\n\n# plot\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rlabel_position(0)\nax.plot(values_disney, values_universal, 'o-',\n        label='Disney', color='tab:orange')\nax.tick_params(grid_color='grey')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = 'Chanel', 'Dior', 'Gucci'\nvalues = [1, 7, 9], [5, 3, 1], [3, 5, 7]\ncolors = ['yellow', 'lightgrey', 'green']\nexplode = (0.1, 0.1, 0.1)\n\nfig, ax = plt.subplots()\nax.polar(np.array(values).T, labels=labels, colors=colors, explode=explode)\nax.set_rlabel_position(0)\nax.set_title('Perfume radar chart')\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nlabels = 'POPE', 'TextVQA', 'GQA', 'VQAv2', 'LLaVA-W', 'SQA-I'\nscores = [86.9, 78.7, 85.0, 80.9, 86.4, 85.8]\ncolors = ['red', 'blue', 'green']\nstyles = ['-', '--', '-.']\n\n# plot\nfig, ax = plt.subplots()\nfor i, (score, color, style) in enumerate(zip(scores, colors, styles)):\n    ax.plot([i]*2, [0, score], color=color, linestyle=style)\n    ax.text(i+1, score, str(score), color=color, ha='left')\nax.set_title('POPE')\nax.set_xticks(np.arange(len(labels)))\nax.set_xticklabels(labels)\nax.set_yticks([0, 50, 100])\nax.set_ylim(0, 100)\nax.set_ylabel('Accuracy (%)')\nax.grid(True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=3, figsize=(7, 7), subplot_kw={'polar': True})\n\n# data for the three brands\ndata = [9, 5, 7, 1, 3, 9], [7, 9, 5, 1, 3, 1], [5, 7, 9, 1, 3, 1]\n\n# loop over the axes and plot each brand\nfor ax, d in zip(axs, data):\n    ax.plot(d, 'o-', linewidth=2)\n    ax.set_rlabel_position(0)\n    ax.set_title('Brand {}'.format(d[0]))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 15\ntheta = np.linspace(0.0, 2 * np.pi, N, endpoint=False)\nradii = np.sqrt(theta)\nfig = plt.figure()\nax = fig.add_subplot(projection='polar')\nax.plot(theta, radii, color='black', linewidth=0.5)\nax.fill(theta, radii, alpha=0.2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, axs = plt.subplots(nrows=3, figsize=(7, 7), sharex=True)\nfig.suptitle('PGM (\u03b5 = \u221e)')\naxs[0].set_title('MLA')\naxs[1].set_title('PrivSyn (\u03b5 = \u221e)')\naxs[2].set_title('TVAE')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# data for radar chart\ndata = [2, 4, 5, 3, 1]\nlabels = ['Fidelity(D_train)', 'Fidelity(D_test)', 'Query Error', 'Privacy', 'MLA']\nrads = np.arange(len(labels))\nwidth = 0.25\n\n# plot\nfor ax, d in zip(axs, data):\n    ax.bar(rads, d, width, bottom=np.arange(5)*-1, color='C0')\n    ax.set_xticks(rads)\n    ax.set_xticklabels(labels)\n    ax.set_yticks(np.arange(5)*-1)\n    ax.set_yticklabels(['1', '2', '3', '4', '5'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"polar\"})\n\nr = np.random.rand(10)\ntheta = np.pi / 2 * (1 + r * np.random.randn(10))\nax.scatter(theta, r, c=r, cmap=\"hsv\", s=100)\n\nax.set_rmax(1)\nax.set_rticks([0.5, 1, 1.5, 2])  # Less radial ticks\nax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line\nax.grid(True)\n\nax.set_title(\"A line plot on a polar axis\", va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 6\nr = np.arange(N)\nwidth = 0.35\nfig, ax = plt.subplots()\n\nax.set_title('An example of how to customize the radial axis')\n\n# We create the radial axis with the radial labels\nax.set_rlabel_position(-22.5)\nax.rlabel_outer()\n\n# We plot the data\nax.bar(r, [3, 2, 7, 2, 4, 1], width, label='result_score', color='b')\nax.bar(r, [3, 4, 1, 2, 4, 5], width, bottom=[3, 2, 7, 2, 4, 1], label='predicted_score', color='g')\nax.bar(r, [3, 4, 1, 2, 4, 5], width, bottom=[3, 4, 1, 2, 4, 5], label='helpful_score', color='y')\nax.bar(r, [3, 4, 1, 2, 4, 5], width, bottom=[3, 4, 1, 2, 4, 5], label='rating_score', color='r')\n\n# We add the legend\nax.legend(loc='upper right', shadow=True, title='Legend')\n\n# We add the radial grid\nax.grid(True, 'radial', linewidth=0.1)\n\n# We add the radial labels\nax.set_yticks([0.03, 0.05, 0.07, 0.1, 0.15])\nax.set_yticklabels(['0.03', '0.05', '0.07', '0.1', '0.15'])\n\n# We add the radial labels\nax.set_xticks(r)\nax.set_xticklabels(['Model_A', 'Model_B', 'Model_C', 'Model_D', 'Model_E', 'Model_F'])\n\n# We add the radial labels\nax.set_rlabel_position(-22.5)\nax.rlabel_outer()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute pie slices\nN = 20\ntheta = np.linspace(0.0, 2 * np.pi, N, endpoint=False)\nradii = 10 * np.random.rand(N)\nwidth = np.pi / 4 * np.random.rand(N)\ncolors = plt.cm.viridis(radii / 10.)\n\nax = plt.subplot(projection='polar')\nax.bar(theta, radii, width=width, bottom=0.0, color=colors, alpha=0.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute areas and colors\nN = 4\nr = 2 * np.random.rand(N)\ntheta = np.pi / 2 + 2 * np.pi * np.random.rand(N)\narea = 200 * r**2\ncolors = theta\n\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nc = ax.scatter(theta, r, c=colors, s=area, cmap='hsv', alpha=0.75)\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 7.0), polar=True)\nax.set_rlabel_position(0)\nax.set_yticks([62.8, 65.0, 67.2, 69.4, 71.6, 73.8])\nax.set_yticklabels(['SQA-I', 'TextVQA', 'MM-Vet', 'POPE', 'GQA', 'VQAv2'])\nax.set_thetagrids([0, 30, 60, 90, 120, 150], ['SQA-I', 'TextVQA', 'MM-Vet', 'POPE', 'GQA', 'VQAv2'])\n\ncolors = ['tab:blue', 'tab:red']\nstyles = ['-', '-']\nfor i, (name, color, style) in enumerate(zip(['TinyLLaVA-3.1A', 'TinyLLaVA-3.1B'], colors, styles)):\n    ax.plot([i, 0], [0, 75.4], color=color, linestyle=style, label=name)\n\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.arange(0.1, 2, 0.2)\ny1 = x ** 0.5\ny2 = x ** 2\n\nfig, axs = plt.subplots(nrows=3, ncols=2, figsize=(7, 7))\naxs[0, 0].plot(x, y1)\naxs[0, 0].set_title('Sharing X and Y')\naxs[0, 0].set_xlabel('X')\naxs[0, 0].set_ylabel('Y1')\n\naxs[0, 1].plot(x, y2)\naxs[0, 1].set_title('Sharing Y only')\naxs[0, 1].set_ylabel('Y2')\n\naxs[1, 0].plot(x, y1)\naxs[1, 0].set_title('Sharing Y only')\naxs[1, 0].set_ylabel('Y1')\naxs[1, 0].sharey(axs[0, 0])\n\naxs[1, 1].plot(x, y2)\naxs[1, 1].set_title('Sharing X only')\naxs[1, 1].set_xlabel('X')\naxs[1, 1].sharex(axs[0, 0])\n\naxs[2, 0].plot(x, y1)\naxs[2, 0].set_title('Sharing both X and Y')\naxs[2, 0].set_xlabel('X')\naxs[2, 0].set_ylabel('Y1')\naxs[2, 0].sharex(axs[1, 0]).sharey(axs[1, 0])\n\naxs[2, 1].plot(x, y2)\naxs[2, 1].set_title('Sharing both X and Y')\naxs[2, 1].set_xlabel('X')\naxs[2, 1].set_ylabel('Y2')\naxs[2, 1].sharex(axs[1, 1]).sharey(axs[1, 1])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.arange(4000)\ny = np.random.rand(4000)\nax.plot(x, y, 'o', color=np.random.rand(3), alpha=0.2, ms=10)\n\nax.set_xlim(0, 4000)\nax.set_ylim(0, 100)\nax.set_xlabel('Pre-training GPU Hours')\nax.set_ylabel('Accuracy [%]')\nax.set_title('ImageNet-1K Linear Probing')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.randn(10)\ny = np.random.randn(10)\nsize = 100 * np.abs(np.random.randn(10))\ncolor = np.random.rand(10)\n\nfig, ax = plt.subplots()\nax.scatter(x, y, s=size, c=color)\n\nax.set_xlabel('Inference Time (seconds)')\nax.set_ylabel('Average Score')\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\nx = np.random.rand(5, 3)\ny = np.random.rand(5, 3)\nsizes = 20 * np.random.rand(5, 3)\ncolors = np.random.rand(5, 3)\n\nax.scatter(x, y, s=sizes, c=colors, alpha=0.3)\nax.set_title('Number of parameters')\n\nfor i, txt in enumerate(['203M', '424M', '1B', '4B', '>4B']):\n    ax.annotate(txt,\n                (x[i, 0], y[i, 0]),\n                xytext=(-20, 20),\n                textcoords='offset points',\n                bbox=dict(boxstyle=\"round\",\n                          facecolor=\"wheat\", alpha=0.5),\n                arrowprops=dict(facecolor='black', shrink=0.05),\n                fontsize=10,\n                horizontalalignment='right',\n                verticalalignment='top')\n\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 5)\ny1 = x * 3\ny2 = x**2\ny3 = x**3\n\nfig, ax = plt.subplots()\n\nax.plot(x, y1, 'o-', label='Single LSTM')\nax.plot(x, y2, '^--', label='Ensemble LSTM')\nax.plot(x, y3, 's:', label='CAE Reconstruction')\n\nax.set_title('Average Relative Error, u')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\ny1 = np.arange(8)\ny2 = np.arange(8)\n\nfig, ax = plt.subplots()\nax.errorbar(x, y1, yerr=0.5, label='Majority')\nax.errorbar(x, y2, yerr=0.5, label='Minority')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 7)\ny1 = x + 3\ny2 = x**2\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.plot(x, y1, 'o-')\nax0.set_title('Sharing x-axis')\nax0.set_ylabel('y1 label')\n\nax1.plot(x, y2, '^--')\nax1.set_ylabel('y2 label')\nax1.set_xlabel('xlabel')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.rand(10)\ny = np.random.rand(10)\nx2 = [35, 40, 45, 50]\ny2 = [15, 25, 35, 45]\n\nfig, ax = plt.subplots()\nc = ax.scatter(x, y, c=x2, cmap='viridis', s=100)\nax.scatter(x2, y2, c='red', s=100)\nax.set_title('Energy Source')\nax.set_xlabel('Carbon Reduction (%)')\nax.set_ylabel('Efficiency (%)')\n\n# add colorbar\nfig.colorbar(c, ax=ax)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.random.rand(50)\ny = np.random.rand(50)\narea = (30 * np.random.rand(50))**2  # 0 to 15 point radii\nc = np.random.rand(50)\n\nfig, ax = plt.subplots()\nsc = ax.scatter(x, y, c=c, s=area, cmap=\"viridis\")\n\nfig.colorbar(sc)\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.randn(10)\ny = np.random.randn(10)\n\nfig, ax = plt.subplots()\nax.scatter(x, y)\nax.grid(True)\n\n# add legend\nax.legend(['Day 1', 'Day 2'], loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.arange(2, 17)\ny = np.random.rand(len(x))\n\nfig, ax = plt.subplots()\nc = y\nax.scatter(x, y, c=c, cmap=\"viridis\", s=50, alpha=0.3)\ncbar = fig.colorbar(ax.scatter(x, y, c=c, cmap=\"viridis\", s=50, alpha=0.3))\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(175, 300, 25)\ny_solar = x * 6.8\ny_wind = x * 7.5\ny_hydropower = x * 9.2\n\nfig, ax = plt.subplots()\nax.plot(x, y_solar, 'o--', color='skyblue', label='Solar Energy')\nax.plot(x, y_wind, 'o-', color='crimson', label='Wind Energy')\nax.plot(x, y_hydropower, 'o-', color='grey', label='Hydropower')\n\nax.set_title('Energy Production Trends')\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 50\nr0 = 0.6\nx = 0.9 * np.random.rand(N)\ny = 0.9 * np.random.rand(N)\narea = (20 * np.random.rand(N))**2  # 0 to 10 point radii\nc = np.sqrt(area)\nr = np.sqrt(x ** 2 + y ** 2)\narea1 = np.ma.masked_where(r < r0, area)\narea2 = np.ma.masked_where(r >= r0, area)\nplt.scatter(x, y, s=area1, marker='^', c=c)\nplt.scatter(x, y, s=area2, marker='o', c=c)\nplt.colorbar(label='Colorbar')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.arange(2, 9)\ny1 = x * 3 + 1\ny2 = x * 2 + 2\ny3 = x * 4 + 4\ny4 = x * 5 + 5\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.plot(x, y1)\nax0.set_title('LibriCSS vs Additional Data 1')\nax0.legend(['LibriCSS WER', 'Additional Data 1'])\n\nax1.plot(x, y2, 'o--', x, y3, '^:', x, y4, 's-')\nax1.set_title('AMI vs Additional Data 2')\nax1.legend(['AMI WER', 'Additional Data 2'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hf_falcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nmodel_basedness = [1.95, 1.85, 1.75, 1.65, 1.55, 1.45, 1.35, 1.25, 1.15]\nmeta_cognition = [2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2]\nexploration = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\nrisk_taking = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# plot the data\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12.0, 6.0))\n\nax1.scatter(models, model_basedness, c='blue', label='Model-Basedness')\nax1.scatter(models, meta_cognition, c='orange', label='Meta-Cognition')\nax1.set_title('Performance Comparison')\nax1.legend()\n\nax2.scatter(models, exploration, c='green', label='Exploration')\nax2.scatter(models, risk_taking, c='red', label='Risk Taking')\nax2.set_title('Strategic Traits')\nax2.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 9)\ny1 = x + 3\ny2 = x**2\ny3 = x**3\n\nfig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=4, figsize=(6, 6))\n\nax0.plot(x, y1, 'o-')\nax0.set_title('Model-Basedness')\n\nax1.plot(x, y2, 'o-')\nax1.set_title('Meta-Cognition')\n\nax2.plot(x, y3, 'o-')\nax2.set_title('Exploration')\n\nax3.plot(x, y1, 'o-', x, y2, 'o--', x, y3, 'o-')\nax3.legend(['Model-Basedness', 'Meta-Cognition', 'Exploration'])\nax3.set_title('Risk Taking')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.arange(10)\ny = np.sin(x / 2)\nc = np.linspace(0, 1, len(x))\n\nfig, axs = plt.subplots(3, 1, sharex=True, figsize=(6, 6))\naxs[0].scatter(x, y, c=c, cmap=\"deepskyblue\")\naxs[0].set_title(\"Scatter Plot - deepskyblue\")\n\naxs[1].scatter(x, y, c=c, cmap=\"magenta\")\naxs[1].set_title(\"Scatter Plot - magenta\")\n\naxs[2].scatter(x, y, c=c, cmap=\"limegreen\")\naxs[2].set_title(\"Scatter Plot - limegreen\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 3, figsize=(9, 3), sharey=True)\naxs[0].set_title('ViTPose (sc) Performance')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[2].set_title('VLPose Performance')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.arange(70, 90, 2)\ny = x + np.random.normal(size=x.shape)\n\naxs[0].plot(x, y, 'o', color='tab:blue')\naxs[0].set_ylabel('Average Precision on HumanArt (%)')\naxs[0].set_xlabel('Average Precision on MSCOCO (%)')\naxs[0].set_ylim(65, 50)\naxs[0].set_xlim(70, 90)\n\nx = np.arange(72, 90, 2)\ny = x + np.random.normal(size=x.shape)\n\naxs[1].plot(x, y, 'o', color='tab:purple')\naxs[1].set_xlabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylim(40, 50)\naxs[1].set_xlim(72, 90)\n\nx = np.arange(74, 90, 2)\ny = x + np.random.normal(size=x.shape)\n\naxs[2].plot(x, y, 'o', color='tab:purple')\naxs[2].set_xlabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylim(35, 50)\naxs[2].set_xlim(74, 90)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 7)\ny = x ** 2\nc = y / 10.\n\nfig, ax = plt.subplots()\nax.scatter(x, y, c=c, s=50, cmap='viridis', label='data')\nax.set_title('Colorbar with scatter plot')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.collections import EventCollection\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# create random data\nxdata = np.random.random([2, 10])\n\n# split the data into two parts\nxdata1 = xdata[0, :]\nxdata2 = xdata[1, :]\n\n# sort the data so it makes clean curves\nxdata1.sort()\nxdata2.sort()\n\n# create some y data points\nydata1 = xdata1 ** 2\nydata2 = 1 - xdata2 ** 3\n\n# plot the data\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1)\nax.plot(xdata1, ydata1, color='tab:blue')\nax.plot(xdata2, ydata2, color='tab:orange')\n\n# create the events marking the x data points\nxevents1 = EventCollection(xdata1, color='tab:blue', linelength=0.05)\nxevents2 = EventCollection(xdata2, color='tab:orange', linelength=0.05)\n\n# create the events marking the y data points\nyevents1 = EventCollection(ydata1, color='tab:blue', linelength=0.05,\n                           orientation='vertical')\nyevents2 = EventCollection(ydata2, color='tab:orange', linelength=0.05,\n                           orientation='vertical')\n\n# add the events to the axis\nax.add_collection(xevents1)\nax.add_collection(xevents2)\nax.add_collection(yevents1)\nax.add_collection(yevents2)\n\n# set the limits\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.randn(10)\ny = np.random.randn(10)\ns = 200 * np.random.rand(10)\nc = np.random.rand(10)\n\nfig, ax = plt.subplots()\nax.scatter(x, y, s, c)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 100\nr0 = 25.0\n\nx = 0.9 * np.random.rand(N)\ny = 0.9 * np.random.rand(N)\narea = (20 * np.random.rand(N))**2  # 0 to 10 point radii\nc = np.sqrt(area)\nr = np.sqrt(x ** 2 + y ** 2)\narea1 = np.ma.masked_where(r < r0, area)\narea2 = np.ma.masked_where(r >= r0, area)\nplt.scatter(x, y, s=area1, c=c)\nplt.scatter(x, y, s=area2, c=c)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\n\nfig, ax = plt.subplots()\ncax = ax.matshow(x, cmap='hot', interpolation='nearest')\nfig.colorbar(cax)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.legend_handler import HandlerTuple\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 100\nr = np.linspace(0.95, 1.05, N)\ntheta = np.pi * r**2\nfig, ax = plt.subplots(subplot_kw=dict(polar=True))\n\nax.scatter(theta, r, c=np.arange(N), s=100, cmap='hsv', label='ar')\nax.scatter(theta, r, c=np.arange(N), s=100, cmap='viridis', label='de')\nax.scatter(theta, r, c=np.arange(N), s=100, cmap='plasma', label='fr')\nax.scatter(theta, r, c=np.arange(N), s=100, cmap='inferno', label='he')\n\nax.legend(handler_map={tuple: HandlerTuple(ndivide=None)})\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.rand(4, 2)\ny = np.random.rand(4, 2)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nax0.scatter(x[:, 0], x[:, 1])\nax0.set_title('DE')\nax0.set_ylabel('MSE')\n\nax1.scatter(y[:, 0], y[:, 1])\nax1.set_title('PJM')\nax1.set_xlabel('CKA Similarity')\nax1.set_ylabel('MSE')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\nax.bar(['physicsforums.com', 'stackexchange.com', 'mathhelpforum.com'],\n       [18.42, 30.6, 14.21],\n       color='C0')\nax.bar(['mathworks.com', 'gmatclub.com', 'mathhelpboards.com'],\n       [4.91, 6.26, 6.15],\n       bottom=[18.42, 30.6, 14.21],\n       color='C1')\nax.bar(['mathoverflow.net', 'proofwiki.org'],\n       [10.91, 8.54],\n       bottom=[18.42, 30.6, 14.21],\n       color='C2')\n\nax.set_ylabel('Percent')\nax.set_title('Percentage of users from different websites')\nax.legend(['physicsforums.com', 'stackexchange.com', 'mathhelpforum.com',\n           'mathworks.com', 'gmatclub.com', 'mathhelpboards.com',\n           'mathoverflow.net', 'proofwiki.org'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nlanguages = ['C++', 'Python', 'Java', 'C#', 'Other']\nsizes = [23, 20, 10, 12, 8]\n\nax.pie(sizes, labels=languages, autopct='%1.1f%%')\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# data\ndata = [13.42, 8.54, 6.26, 10.91, 14.21]\nlabels = ['Adidas', 'Under Armour', 'New Balance', 'Reebok', 'Puma']\nwidth = 0.35\n\nfig, ax = plt.subplots()\nrects1 = ax.barh(range(len(data)), data, width, color='b')\n\nax.set_yticks(range(len(data)))\nax.set_yticklabels(labels)\nax.set_xlabel('Market Share (%)')\nax.set_title('Market Share of Top 5 Sneaker Brands')\n\nfor rect in rects1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,\n            '%.2f' % height,\n            ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Create a bar chart\nax.bar(['A', 'B', 'C'], [5, 15, 20], color=['#FF9999', '#66B2FF', '#99CCFF'])\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Y')\nax.set_title('Simple bar chart')\nax.set_xticklabels(['A', 'B', 'C'])\nax.text(0.5, 0.8, '50%', ha='center', va='center', transform=ax.transAxes)\nax.text(0.5, 0.6, '15%', ha='center', va='center', transform=ax.transAxes)\nax.text(0.5, 0.4, '20%', ha='center', va='center', transform=ax.transAxes)\nax.text(0.5, 0.2, '5%', ha='center', va='center', transform=ax.transAxes)\nax.text(0.5, 0.0, '5%', ha='center', va='center', transform=ax.transAxes)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute areas and colors\nN = 5\ndata = [15, 18, 10, 12, 20]\nlabels = ['European', 'Australian', 'South American', 'African', 'North American']\nwidth = 0.35\n\nrects1 = ax.bar(range(N), data, width, label='Data')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(range(N))\nax.set_xticklabels(labels)\nax.legend()\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.random.randn(10, 10)\ny = np.random.randn(10, 10)\n\nfig, ax = plt.subplots()\nax.violinplot(x, showmeans=False, showmedians=True)\nax.set_title('Llama2')\nax = plt.twinx()\nax.violinplot(y, showmeans=False, showmedians=False, bw_ratio=.1)\nax.set_title('Llama2 (In-Chat)')\nax.set_ylabel('logP_{CL} - logP_{noCL}')\nax.set_xlabel('Number of examples')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100  # mean of distribution\nsigma = 15  # standard deviation of distribution\nsize = 1000\n\n# the random number generator needs to be seeded for reproducibility\nnp.random.seed(19680801)\n\nx = mu + sigma * np.random.randn(size)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=True, histtype='stepfilled')\n\n# add a 'best fit' line\ny = m * x + b\nplt.plot(bins, y, '--')\nplt.xlabel('Score')\nplt.ylabel('Probability')\nplt.title('Comparison of Scores with and without Memory')\nplt.grid(True)\nax = plt.axes()\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_xlabel('Efficiency')\nax.set_ylabel('Comfort')\nax.set_title('Safety')\nax.legend(['Without Memory', 'With Memory'])\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100  # mean of distribution\nsigma = 15  # standard deviation of distribution\ns = np.random.normal(mu, sigma, 1000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(s, 50, density=True, histtype='stepfilled')\n\n# add a 'best fit' line\ny = m * x + b\nplt.plot(bins, y, '--')\nplt.xlabel('Score')\nplt.ylabel('Without Memory')\nplt.title('Scores by group and gender')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.arange(0.1, 2, 0.01)\ny1 = np.sin(2 * np.pi * x)\ny2 = np.exp(-x)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\n\nax0.plot(x, y1)\nax0.set_title('Scoring Evaluation')\nax0.legend()\n\nax1.plot(x, y2)\nax1.set_title('Pair Comparison')\nax1.legend()\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100300\nsigma = 8000\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=True, histtype='stepfilled')\n\n# add a 'best fit' line\ny = mlab.normpdf(bins, mu, sigma)\nplt.plot(bins, y, '--')\nplt.xlabel('Accuracy')\nplt.ylabel('Probability')\nplt.title('Demonstration of Histograms')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\n# Fixing random state for reproducibility\nmu = 100  # mean of distribution\nsigma = 15  # standard deviation of distribution\nx = mu + sigma * np.random.randn(437)\ny1 = np.sin(x)\ny2 = np.exp(x)\n\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True)\nax0.set_title('Teacher-Style')\nax0.plot(x, y1)\nax0.axhline(0, color='black', linewidth=2)\nax0.fill_between(x, y1, alpha=.5)\n\nax1.set_title('Standardize')\nax1.plot(x, y2)\nax1.axhline(0, color='black', linewidth=2)\nax1.fill_between(x, y2, alpha=.5)\n\nax2.set_title('Both')\nax2.plot(x, y1, x, y2)\nax2.axhline(0, color='black', linewidth=2)\nax2.fill_between(x, y1, y2, where=y1 >= y2, facecolor='blue', alpha=.5)\nax2.fill_between(x, y1, y2, where=y1 <= y2, facecolor='orange', alpha=.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100\nsigma = 15\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=True, histtype='stepfilled')\n\n# add a 'best fit' line\ny = mlab.normpdf(bins, mu, sigma)\nplt.plot(bins, y, '--')\nplt.xlabel('Accuracy')\nplt.ylabel('Vanilla')\nplt.title('Example histogram')\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nfig.suptitle('%% Decrease in Test MSE vs. FLAM-GL')\n\n# generate some random test data\nx = np.linspace(0.1, 4, 100)\ny = 2 * x ** 2 + np.random.normal(0, 0.1, x.shape)\n\n# fit a regression model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\n\nmodel = make_pipeline(PolynomialFeatures(2), LinearRegression())\nmodel.fit(x[:, np.newaxis], y)\n\n# predict using the model\ny_pred = model.predict(x[:, np.newaxis])\n\n# compute the decrease in MSE\ndecrease_mse = 1 - np.sum((y_pred - y) ** 2) / np.sum((y - y.mean()) ** 2)\n\n# plot the results\nax0.plot(x, y, label='data')\nax0.plot(x, y_pred, label='prediction', color='C1')\nax0.legend()\nax0.set_title(f'Group l_0: {decrease_mse:.1%}')\n\n# compare with AGIS\nfrom sklearn.linear_model import LassoLarsIC\nfrom sklearn.linear_model import LassoLars\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.linear_model import RANSACRegressor\nfrom sklearn.linear_model import QuantileRegressor\nfrom sklearn.linear_model import PassiveAggressiveRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100300\nsigma = 40000\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\n# add a 'best fit' line\ny = m * x + b\nl = plt.plot(bins, y, 'k--', linewidth=1.5)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, .001, .04])\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nall_data = [np.random.normal(0, std, 100) for std in range(6, 10)]\n\nfig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=2, ncols=2)\n\nax0.set_title('Distribution of Grades: Class 1')\nax0.boxplot(all_data)\nax0.set_xlabel('Boys')\nax0.set_ylabel('Scores')\n\nax1.set_title('Distribution of Grades: Class 2')\nax1.boxplot(all_data)\nax1.set_xlabel('Girls')\n\nax2.set_title('Distribution of Grades: Class 3')\nax2.boxplot(all_data)\nax2.set_xlabel('Boys')\nax2.set_ylabel('Scores')\n\nax3.set_title('Distribution of Grades: Class 4')\nax3.boxplot(all_data)\nax3.set_xlabel('Girls')\n\nplt.tight_layout()\nplt.show()\n```"}
