{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Targets', color='orange')\nax.plot(x, y2, label='Predictions', color='blue')\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude')\nax.set_title('Comparison of Targets and Predictions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nheights = [1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\nwidths = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ncounts = [4, 3, 2, 1, 0, 0]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.barh(heights, counts, color='red', edgecolor='black')\n\n# Set labels and title\nplt.xlabel('Count')\nplt.ylabel('Height')\nplt.title('Height vs Count')\n\n# Add grid for better readability\nplt.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-4, -2, 0, 2, 4])\ny = np.array([10, 15, 20, 25, 30])\nz = np.array([1, 2, 3, 4, 5])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data points\nax.scatter(x, y, z, c='red', marker='o', label='Discrete Points')\n\n# Fit a line to the data\ncoefficients = np.polyfit(x, y, 1)\npoly = np.poly1d(coefficients)\nax.plot(x, poly(x), z, color='blue', linestyle='-', linewidth=2, label='Fit Line')\n\n# Set labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Student to teacher ratio for public and private schools over years\nyears = np.array([2010, 2012, 2014, 2016, 2018])\npublic_schools = np.array([0.55, 0.57, 0.59, 0.61, 0.63])\nprivate_schools = np.array([0.45, 0.47, 0.49, 0.51, 0.53])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with different colors and styles\nplt.bar(years - 0.2, public_schools, width=0.4, color='orange', label='Public Schools')\nplt.bar(years + 0.2, private_schools, width=0.4, color='blue', label='Private Schools')\n\n# Set labels and title\nplt.xlabel('Year')\nplt.ylabel('Student to Teacher Ratio')\nplt.title('Student to Teacher Ratio in Public and Private Schools Over Years')\n\n# Add grid for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Age')\nax.set_ylabel('Vaccination Number')\nax.set_zlabel('Incidence Rate')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the first plot\nyears = np.array([2010, 2012, 2014, 2016, 2018])\ninvestment = np.array([3.5, 4.2, 5.1, 6.0, 7.5])\n\n# Sample data for the second plot\ntime_since_introduction = np.array([0, 2, 4, 6, 8, 10])\ntechnology_level = np.array([0.1, 0.3, 0.5, 0.7, 0.9, 1.0])\nadoption_rate = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55])\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 8.0))\n\n# Plot 1: Line chart of investment over years\naxes[0].plot(years, investment, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\naxes[0].set_title('Investment (Billion USD)')\naxes[0].set_xlabel('Year')\naxes[0].set_ylabel('Investment (Billion USD)')\naxes[0].grid(True)\n\n# Plot 2: Scatter plot of adoption rate over time and technology level\nscatter = axes[1].scatter(time_since_introduction, technology_level, c=adoption_rate, cmap='viridis', s=100, alpha=0.7)\naxes[1].set_title('Adoption Rate')\naxes[1].set_xlabel('Time Since Introduction (Years)')\naxes[1].set_ylabel('Technology Level')\naxes[1].grid(True)\n\n# Add a color bar to the scatter plot\ncbar = plt.colorbar(scatter, ax=axes[1], orientation='vertical')\ncbar.set_label('Adoption Rate')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the grid\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function\nZ = X**2 + Y**2\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 7.0))\nax = fig.add_subplot(121, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\n# Second subplot\nax2 = fig.add_subplot(122, projection='3d')\n\n# Plot the surface with different colormap\nsurf2 = ax2.plot_surface(X, Y, Z, cmap='plasma', edgecolor='none')\nfig.colorbar(surf2, shrink=0.5, aspect=5)\n\n# Set labels\nax2.set_xlabel('X')\nax2.set_ylabel('Y')\nax2.set_zlabel('Z')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 6, 100)\ny = np.linspace(0, 6, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis', linewidth=0, antialiased=False)\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('K')\nax.set_ylabel('T')\nax.set_zlabel('Accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Sample data for demonstration\nx = np.linspace(-100, 100, 200)\ny = np.linspace(-100, 100, 200)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with a larger size\nfig = plt.figure(figsize=(15.0, 10.0))\nax1 = fig.add_subplot(2, 2, 1, projection='3d')\nax2 = fig.add_subplot(2, 2, 2, projection='3d')\nax3 = fig.add_subplot(2, 2, 3, projection='3d')\nax4 = fig.add_subplot(2, 2, 4, projection='3d')\n\n# Plot the first graph\nax1.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\nax1.set_title('Origin')\nax1.set_xlabel('m')\nax1.set_ylabel('n')\nax1.set_zlabel('Freedom')\n\n# Plot the second graph\nax2.plot_surface(x, y, z, cmap='plasma', edgecolor='none')\nax2.set_title('MG (ours)')\nax2.set_xlabel('m')\nax2.set_ylabel('n')\nax2.set_zlabel('Freedom')\n\n# Plot the third graph\nax3.plot_surface(x, y, z, cmap='inferno', edgecolor='none')\nax3.set_title('Origin')\nax3.set_xlabel('m')\nax3.set_ylabel('n')\nax3.set_zlabel('Freedom')\n\n# Plot the fourth graph\nax4.plot_surface(x, y, z, cmap='coolwarm', edgecolor='none')\nax4.set_title('MG (ours)')\nax4.set_xlabel('m')\nax4.set_ylabel('n')\nax4.set_zlabel('Freedom')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nz = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(7.0, 7.0))\n\n# Plot the data with a specific style\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z, c='orange', marker='o')\n\n# Set labels for each axis\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\n# Add a title to the plot\nplt.title('3D Scatter Plot Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create data\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Time')\nax.set_ylabel('Bus')\nax.set_zlabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4])\ny = np.array([1, 2, 3, 4])\nz = np.array([1, 2, 3, 4])\ndx = np.array([0.5, 0.5, 0.5, 0.5])\ndy = np.array([0.5, 0.5, 0.5, 0.5])\ndz = np.array([1, 2, 3, 4])\n\n# Create a new figure with a specified size\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the bar chart\nax.bar3d(x, y, z, dx, dy, dz, color='b', shade=True)\n\n# Set labels for axes\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\n\n# Add a color bar which maps values to colors\ncbar = plt.colorbar(ax.collections[0], ax=ax)\ncbar.set_label('Color Scale')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ny = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105])\nz = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nscatter = ax.scatter(x, y, z, c='r', marker='o')\n\n# Set labels\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([15, 25, 35, 45, 55])\nz = np.array([-10, -20, -30, -40, -50])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nax.plot(x, y, z, label='Sample Line', color='blue')\n\n# Set labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Time (s)')\nax.set_zlabel('Depth (m)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(-20, 20, 400)\ny = np.linspace(-20, 20, 400)\nX, Y = np.meshgrid(x, y)\nZ_out = np.exp(-(X**2 + Y**2) / (2 * 2))  # Example Gaussian distribution\nZ_in = np.exp(-(X**2 + Y**2) / (2 * 1))   # Another Gaussian distribution\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with different colors and transparency\nc1 = ax.contourf(X, Y, Z_out, cmap='Blues', alpha=0.7)\nc2 = ax.contourf(X, Y, Z_in, cmap='Reds', alpha=0.7)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(c1, ax=ax)\ncbar.set_label('Density')\n\n# Set labels and title\nax.set_xlabel('LR Test')\nax.set_ylabel('m^*')\nax.set_title('Density Plot of Out and In')\n\n# Add a grid for better readability\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([150, 200, 250, 300, 350, 400])\ny_low = np.array([10, 15, 20, 25, 30, 35])\ny_middle = np.array([12, 18, 24, 30, 36, 42])\ny_high = np.array([14, 21, 28, 35, 42, 49])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data points\nax.scatter(x, y_low, color='blue', label='Low')\nax.scatter(x, y_middle, color='orange', label='Middle')\nax.scatter(x, y_high, color='green', label='High')\n\n# Add a line of best fit\nz = np.polyfit(x, y_low, 1)\np = np.poly1d(z)\nax.plot(x, p(x), \"r--\")\n\n# Set labels and title\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('ATE RMSE')\nax.set_title('Severity')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([8, 4, 2, 1])\ny = np.array([0.1, 0.2, 0.3, 0.4])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.scatter(x, y, color='blue', label='Data Points')\n\n# Add a line of best fit\nz = np.polyfit(x, y, 1)\np = np.poly1d(z)\nax.plot(x, p(x), \"r--\", label='Line of Best Fit')\n\n# Set labels and title\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\nax.set_title('Scatter Plot with Line of Best Fit')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='sin(x)', color='red', linestyle='-', linewidth=2)\nax.plot(x, y2, label='cos(x)', color='green', linestyle='--', linewidth=2)\nax.plot(x, y3, label='tan(x)', color='blue', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='exp(x)', color='purple', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot with Multiple Lines')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny_snacks = np.array([0.7, 0.8, 0.9, 0.6, 0.5])\ny_nav = np.array([0.6, 0.7, 0.8, 0.9, 0.7])\ny_qsel = np.array([0.5, 0.6, 0.7, 0.8, 0.9])\ny_objcount = np.array([0.4, 0.5, 0.6, 0.7, 0.8])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y_snacks, label='snacks', color='tab:blue', linestyle='--', marker='o')\nax.plot(x, y_nav, label='navigate', color='tab:orange', linestyle='-.', marker='s')\nax.plot(x, y_qsel, label='question_selection', color='tab:green', linestyle=':', marker='^')\nax.plot(x, y_objcount, label='object_counting', color='tab:red', linestyle='-', marker='D')\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(0.0, 1.5, 0.2)\ny1 = np.random.rand(len(x)) * 100\ny2 = np.random.rand(len(x)) * 100\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, color='blue', linestyle='-', linewidth=2, label='H-w ard - centers-cos')\nax.plot(x, y2, color='pink', linestyle='--', linewidth=2, label='random')\n\n# Set labels and title\nax.set_xlabel('norm size')\nax.set_ylabel('count')\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Incomparable', 'Different', 'Same']\nsizes = [73.3, 23.7, 3.0]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    shadow=True, \n    startangle=140,\n    textprops=dict(color=\"black\")\n)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Comparison of Responses')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'SEAC': [46.5, 47.2, 48.1, 49.3, 49.8],\n    'SAC(20Hz)': [47.8, 48.5, 49.1, 49.6, 50.2]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.scatter(data['SEAC'], data['SAC(20Hz)'], color='blue', label='Data Points')\n\n# Set labels and title\nax.set_xlabel('Time Cost (Seconds)')\nax.set_ylabel('Algorithms')\nax.set_title('Comparison of Algorithms')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmethods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0']\ncodebert_scores = [63.64, 80.08, 84.27]\nchatgpt_scores = [87.20, 90.12, 90.12]\ncodeagent_scores = [90.11, 90.11, 90.11]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(methods, codebert_scores, label='CodeBERT', marker='o', linestyle='-', color='b')\nax.plot(methods, chatgpt_scores, label='ChatGPT-3.5', marker='o', linestyle='--', color='r')\nax.plot(methods, codeagent_scores, label='CodeAgent', marker='o', linestyle='-.', color='g')\n\n# Set labels and title\nax.set_xlabel('Average Recall Scores by Method')\nax.set_ylabel('Scores')\nax.set_title('Average F1 Scores by Method')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([4, 8, 12, 16, 20, 24, 28, 32])\ny1 = np.array([84, 86, 88, 90, 92, 94, 96, 98])\ny2 = np.array([82, 84, 86, 88, 90, 92, 94, 96])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Trained w Few-Shot Ex', color='b', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Def Deduce+Ex Gen', color='r', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\nax.set_title('Comparison of Few-Shot Learning Models')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Vehicle efficiency vs. vehicle parameter size\nvehicle_sizes = np.array([60, 62, 65, 70, 75])\nefficiencies = np.array([60, 62, 65, 70, 75])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(vehicle_sizes, efficiencies, marker='o', linestyle='-', color='red', label='Cars')\nax.scatter(80, 80, color='blue', marker='*', s=100, label='Truck A')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Vehicle Parameter Size (units)', fontsize=12)\nax.set_ylabel('Efficiency (%)', fontsize=12)\nax.set_title('Vehicle Efficiency vs. Parameter Size', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Set limits for axes\nax.set_xlim(0, 85)\nax.set_ylim(50, 85)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsimple_trend = [0, 6, 16, 20, 12, 10]\nsimple = [0, 6, 12, 20, 12, 10]\ncomplex_ = [0, 4, 8, 18, 26, 20]\ncode = [0, 4, 4, 10, 12, 4]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(simple_trend, label='Simple Trend', color='magenta')\nax.plot(simple, label='Simple', color='darkorange')\nax.plot(complex_, label='Complex', color='salmon')\nax.plot(code, label='Code', color='lightgrey')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\nax.set_title('Encoding/Decoding Schelling Points by Model')\n\n# Set x-ticks and labels\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models)\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 100)\ny = np.sin(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'o-', color='black', label='Calibration curve')\nax.scatter(x, y, color='orange', alpha=0.5, label='Subgroups')\n\n# Set labels and title\nax.set_xlabel('Reduced probability')\nax.set_ylabel('Fraction of positives')\nax.set_title('Calibration plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the plot\nx = np.linspace(-6, 6, 100)\ny1 = np.exp(-(x + 2)**2 / 2)\ny2 = np.exp(-(x - 2)**2 / 2)\ny3 = np.exp(-(x)**2 / 2)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Proposed', color='blue')\nax.plot(x, y2, label='FOD-Net', color='orange')\nax.plot(x, y3, label='SS3T', color='green')\n\n# Fill between curves with varying transparency\nax.fill_between(x, y1, y2, where=(y1 > y2), interpolate=True, color='lightblue', alpha=0.5)\nax.fill_between(x, y2, y3, where=(y2 > y3), interpolate=True, color='lightcoral', alpha=0.5)\nax.fill_between(x, y1, y3, where=(y1 < y3), interpolate=True, color='lightgreen', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('ACC')\nax.set_ylabel('Probability')\nax.set_title('Model Comparison')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the plots\nx = np.array([1340, 1360, 1380, 1400, 1420, 1440, 1460])\ny = np.array([1659.02, 1625, 1675, 1700, 1725, 1750, 1775])\nz = np.array([1397.72, 1360, 1380, 1400, 1420, 1440, 1460])\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot 1: Total\naxes[0, 0].bar(x, y, color='blue', alpha=0.7)\naxes[0, 0].set_title('Total')\naxes[0, 0].set_xlabel('Daily reward (Ether)')\naxes[0, 0].set_ylabel('Probability')\n\n# Plot 2: Proposer\nproposer_data = np.array([\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n])\naxes[0, 1].imshow(proposer_data, cmap='hot', interpolation='nearest')\naxes[0, 1].set_title('Proposer')\naxes[0, 1].set_xlabel('Daily reward (Ether)')\naxes[0, 1].set_ylabel('Probability')\n\n# Plot 3: Attestor\nattestor_data = np.array([\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n])\naxes[1, 0].imshow(attestor_data, cmap='coolwarm', interpolation='nearest')\naxes[1, 0].set_title('Attestor')\naxes[1, 0].set_xlabel('Daily reward (Ether)')\naxes[1, 0].set_ylabel('Probability')\n\n# Plot 4: Sync committee member\nsync_committee_member_data = np.array([\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n])\naxes[1, 1].imshow(sync_committee_member_data, cmap='viridis', interpolation='nearest')\naxes[1, 1].set_title('Sync committee member')\naxes[1, 1].set_xlabel('Daily reward (Ether)')\naxes[1, 1].set_ylabel('Probability')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ntrainable_sizes = np.array([0, 50, 100, 150])\nrmse_values = np.array([1.30, 1.27, 1.28, 1.29])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data\nax.plot(trainable_sizes, rmse_values, marker='o', linestyle='-', color='red')\n\n# Set labels and title\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\nax.set_title('Llama 2 13B')\n\n# Set y-axis limits\nax.set_ylim(1.15, 1.30)\n\n# Add grid for better readability\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Execution duration and distribution\nexecution_durations = np.array([40, 60, 80, 100, 120, 140, 160])\ndistribution = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(execution_durations, distribution, marker='o', linestyle='-', color='blue', linewidth=2, markersize=8)\n\n# Set labels with improved font sizes and styles\nax.set_xlabel('Execution Duration (clock)', fontsize=12, fontweight='bold')\nax.set_ylabel('Distribution', fontsize=12, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for axes\nax.set_xlim(30, 170)\nax.set_ylim(0, 0.4)\n\n# Add a title with a descriptive caption\nax.set_title('Execution Duration Distribution', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([15, 20, 30, 40, 50, 60])\ny1 = np.array([18, 14, 13, 12, 9, 5])\ny2 = np.array([0, 0, 0, 0, 0, 0])\ny3 = np.array([100, 100, 100, 100, 100, 100])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='PetriRL', color='green', marker='o')\nax.plot(x, y2, label='GAM', color='orange', marker='s')\nax.plot(x, y3, label='GIN', color='blue', marker='^')\n\n# Set labels and title\nax.set_xlabel('Instance size (step)')\nax.set_ylabel('Makespan (step)')\nax.set_title('Comparison of Different Methods')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 3, 5, 7, 11])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.scatter(x, y, color='blue', label='Data Points')\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Sample Scatter Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([70, 80, 90, 100, 110])\ny2 = np.array([60, 70, 80, 90, 100])\ny3 = np.array([50, 60, 70, 80, 90])\ny4 = np.array([40, 50, 60, 70, 80])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Adidas', color='teal', linestyle='-', marker='o', markersize=8)\nax.plot(x, y2, label='Nike', color='orange', linestyle='--', marker='s', markersize=8)\nax.plot(x, y3, label='New Balance', color='royalblue', linestyle='-.', marker='^', markersize=8)\nax.plot(x, y4, label='Our Brand', color='magenta', linestyle=':', marker='D', markersize=8)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel('Time to Market (Days)', fontsize=12)\nax.set_ylabel('Median Time to Market', fontsize=12)\nax.set_title('Comparison of Brands Over Time', fontsize=14, fontweight='bold')\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nera = ['Early 20th Century', 'Mid 20th Century', 'Turn of the Century']\ndensity = [0.005, 0.015, 0.025]\nearly_20th = [1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990]\nmid_20th = [1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000]\nturn_of_century = [1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(density, early_20th, color='blue', label='Early 20th Century')\nax.plot(density, mid_20th, color='orange', label='Mid 20th Century')\nax.plot(density, turn_of_century, color='green', label='Turn of the Century')\n\n# Set labels and title\nax.set_xlabel('Density')\nax.set_ylabel('Year')\nax.set_title('Era')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Nano', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'Al']\nvalues_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\nvalues_2022 = [90, 50, 150, 100, 180, 250, 400, 200, 300, 500]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for the first dataset\nbars1 = ax.bar(index - bar_width/2, values_2013, bar_width, label='2013', color='skyblue')\n\n# Plot the bars for the second dataset\nbars2 = ax.bar(index + bar_width/2, values_2022, bar_width, label='2022', color='salmon')\n\n# Add labels and title\nax.set_xlabel('Technology')\nax.set_ylabel('Number of Patents')\nax.set_title('Patent Filings in 2013 and 2022')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 5, round(yval), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 100)\ny = np.sin(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data points\nax.scatter(x, y, color='red', label='Data points')\n\n# Plot the calibration curve\nax.plot(x, np.sin(x), color='black', label='Calibration curve')\n\n# Set labels and title\nax.set_xlabel('Predicted probability')\nax.set_ylabel('Fraction of positives')\nax.set_title('Calibration plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\ncompanies = ['Tesla', 'Benz', 'BYD', 'Porsche']\nearnings = [\n    [250, 270, 300, 280],\n    [200, 220, 240, 230],\n    [150, 170, 190, 180],\n    [300, 320, 340, 330]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different colors and styles\nfor i, company in enumerate(companies):\n    ax.plot(quarters, earnings[i], marker='o', linestyle='-', color=plt.cm.tab10(i), label=company)\n\n# Set labels and title\nax.set_xlabel('Quarter')\nax.set_ylabel('Earnings ($1000s)')\nax.set_title('Company Earnings Over Quarters')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(title='Companies')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmethods = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ntrain_sec_img = [0.25, 0.3, 0.4, 0.5, 0.6, 0.7]\ninference_gflops = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nparam_log10 = [0.75, 0.8, 0.85, 0.9, 0.95, 1.0]\ntrain_memory = [0.7, 0.75, 0.8, 0.85, 0.9, 0.95]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different colors and styles\nax.plot(train_sec_img, label='Train sec / img', color='b', marker='o')\nax.plot(inference_gflops, label='Inference GFLOPs', color='orange', marker='s')\nax.plot(param_log10, label='Param, log10', color='g', marker='^')\nax.plot(train_memory, label='Train Memory', color='r', marker='x')\n\n# Set labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Comparison of Different Methods')\n\n# Set x-ticks to be more readable\nax.set_xticks(range(len(methods)))\nax.set_xticklabels(methods)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.scatter(x, y, color='blue', s=10)\n\n# Set labels and title\nax.set_xlabel('TM-score')\nax.set_ylabel('Seq-ident')\nax.set_title('Scatter Plot of TM-score vs Seq-ident')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(25, 45, 100)\ny = np.sin(x) * np.cos(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with different styles\nax.scatter(x, y, c='red', label='Data Points')\nax.plot(x, y, color='blue', linestyle='--', linewidth=2, label='Sine-Cosine Curve')\n\n# Set labels and title\nax.set_xlabel('Relative Cluster Size')\nax.set_ylabel('Average Norm of Difference Vectors')\nax.set_title('Sample Scatter Plot with Line')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Age vs. Heart Rate\nages = np.array([0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80])\nheart_rates = np.array([99.6, 96.0, 92.3, 90.9, 92.5, 91.3, 90.9, 92.3, 93.3, 96.0, 98.7])\n\n# Create a new figure with specified size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nplt.plot(ages, heart_rates, marker='o', linestyle='-', color='b', linewidth=2, markersize=8, label='Heart Rate')\n\n# Set labels with improved font size and style\nplt.xlabel('Age (years)', fontsize=12, fontweight='bold')\nplt.ylabel('Heart Rate (bpm)', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nplt.title('Heart Rate Trend Over Age', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with improved location and font size\nplt.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nax.plot(x, y, label='Sine Wave')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Sine Wave Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([4211, 2411, 2141, 1124])\ny1 = np.array([0.9628, 0.9604, 0.9624, 0.9592])\ny2 = np.array([0.9640, 0.9624, 0.9624, 0.9561])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='SRCC', color='blue', linestyle='-', linewidth=2, marker='o', markersize=8)\nax.plot(x, y2, label='PLCC', color='green', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\nax.set_title('SRCC and PLCC values with their sum for different modes')\n\n# Add a legend\nax.legend()\n\n# Set grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set x-axis limits\nax.set_xlim(min(x) - 100, max(x) + 100)\n\n# Set y-axis limits\nax.set_ylim(0.955, 0.975)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 17"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Define the data for the plot\nx = np.linspace(-10, 10, 400)\ny = np.sin(x) * np.exp(-0.1 * x**2)\n\n# Plot the data with specific styling\nplt.plot(x, y, color='blue', linestyle='-', linewidth=2, label='SINDy')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Compact Spiral with Elliptical Hollow Center')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1e-1, 1e0, 1e1])\ny1 = np.array([1e-10, 1e-5, 1e0])\ny2 = np.array([1e-9, 1e-4, 1e1])\ny3 = np.array([1e-8, 1e-3, 1e2])\ny4 = np.array([1e-7, 1e-2, 1e3])\ny5 = np.array([1e-6, 1e-1, 1e4])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='explicit, random', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='explicit, block size 10', color='orange', linestyle='--', marker='s')\nax.plot(x, y3, label='explicit, block size 100', color='g', linestyle='-.', marker='^')\nax.plot(x, y4, label='implicit, random', color='m', linestyle=':', marker='>')\nax.plot(x, y5, label='implicit, block size 10', color='c', linestyle='-', marker='<')\n\n# Set labels and title\nax.set_xlabel('Flops/byte')\nax.set_ylabel('Flows/s')\nax.set_title('DAXPY memory bandwidth')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Satisfy constraints', 'No severe errors', 'Lengthy', 'Contain rich info', 'No moderate errors', 'Grammatical correctness', 'No minor errors', 'Clear', 'Non-repetitive', 'Support stances', '19 other features']\nvalues = [0.76, 0.18, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('f(x)')\nax.set_title('Feature Importance')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the Venn diagram\ncigarR = 24\nchatRepair = 45\noverlap = 8\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the positions of the circles\ncircle1 = plt.Circle((0, 0), radius=np.sqrt(cigarR), color='pink', alpha=0.7)\ncircle2 = plt.Circle((1, 0), radius=np.sqrt(chatRepair), color='orange', alpha=0.7)\n\n# Add circles to the plot\nax.add_artist(circle1)\nax.add_artist(circle2)\n\n# Set the limits of the plot\nax.set_xlim(-2, 3)\nax.set_ylim(-2, 2)\n\n# Draw the overlap area\noverlap_circle = plt.Circle((0.5, 0), radius=np.sqrt(overlap), color='green', alpha=0.5)\nax.add_artist(overlap_circle)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\ncategories = ['GPT4V', 'Gemini Pro']\nvalues = [15, 25]\ncolors = ['#FF9999','#66B3FF']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Add a title\nax.set_title('Qwen-VL-Max', fontsize=12, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([10, 20, 30, 40, 50])\ny2 = np.array([15, 25, 35, 45, 55])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='s = 19', color='purple', marker='o')\nax.plot(x, y2, label='s = 50', color='orange', marker='s')\n\n# Set labels and title\nax.set_xlabel('Number of matvecs m')\nax.set_ylabel('Approximation error ||A - \\hat{A}||_F')\nax.set_title('Comparison of Approximation Errors')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'Retrive.PassKey']\nsizes = [15, 30, 45, 10]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Pie Chart Example', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 140, 100)\ny1 = np.sin(x / 20)\ny2 = np.cos(x / 20)\ny3 = np.tan(x / 20)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Sine', color='green', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Cosine', color='orange', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Tangent', color='blue', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Trigonometric Functions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6])\ny = np.array([2.5, 3.5, 3.0, 3.5, 4.0, 4.5, 4.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, xerr=0.1, yerr=0.1, fmt='o', color='black', ecolor='gray', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Sample Number')\nax.set_ylabel('Thermal Conductivity (W/m.K)')\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Set limits for axes\nax.set_xlim(0, 6)\nax.set_ylim(1.5, 4.5)\n\n# Add grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores_a = [28, 20, 10, 22, 28]\nscores_b = [35, 26, 20, 25, 30]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nbars_a = ax.bar(games, scores_a, color='darkorange', label='Player A')\nbars_b = ax.bar(games, scores_b, bottom=scores_a, color='forestgreen', label='Player B')\n\n# Add labels and title\nax.set_xlabel('Games')\nax.set_ylabel('Scores by number of game and players')\nax.set_title('Scores by number of game and players')\nax.legend()\n\n# Add annotations for clarity\nfor bar in bars_a:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, int(yval), ha='center', va='bottom')\n\nfor bar in bars_b:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, int(yval), ha='center', va='bottom')\n\n# Set y-axis limits\nax.set_ylim(0, 60)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(-6, 6, 100)\ny = np.linspace(-6, 6, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\nax = fig.add_subplot(111)\n\n# Plot the contourf with a color map\ncontour = ax.contourf(X, Y, Z, cmap='coolwarm', levels=20)\n\n# Add a color bar\ncbar = plt.colorbar(contour)\ncbar.set_label('Time')\n\n# Set labels and title\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\nax.set_title('Contour Plot of a Function')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([[5.7, 6.0, 5.1], [6.2, 6.0, 5.2], [5.2, 5.6, 4.9], [7.5, 7.0, 7.8], [7.0, 6.9, 7.4]])\nlabels = ['gpt-3.5-turbo-0613', 'gpt-3.5-turbo-instruct', 'gpt-4', 'llama-2-13b', 'llama-2-70b']\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different colors and styles\nfor i in range(y.shape[1]):\n    ax.plot(x, y[:, i], label=labels[i], marker='o', linestyle='-', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Trustee Scenario')\nax.set_ylabel('Average Amount Sent ($)')\nax.set_title('Impact of Different Models on Average Amount Sent')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend with a shadow effect\nax.legend(title='Model', loc='upper left', shadow=True)\n\n# Set x-axis ticks and labels\nax.set_xticks(x)\nax.set_xticklabels(['Female Player', 'Male Player', 'LLM Player', 'Person Player'])\n\n# Set y-axis limits\nax.set_ylim(3, 8)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Athlete Jim', 'Athlete Bill']\nrunning_times = [120, 140]\ninterrupted_times = [30, 20]\nrest_times = [10, 15]\nrunning2_times = [150, 160]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define colors for each category\ncolors = ['#008000', '#FFA500', '#FF0000', '#00FF00']\n\n# Plot bars for each category\nbar_width = 0.2\nindex = np.arange(len(categories))\nbars = []\n\n# Plot running times\nbars.append(ax.bar(index, running_times, bar_width, label='Running', color=colors[0]))\n# Plot interrupted times\nbars.append(ax.bar(index + bar_width, interrupted_times, bar_width, label='Interrupted', color=colors[1]))\n# Plot rest times\nbars.append(ax.bar(index + 2 * bar_width, rest_times, bar_width, label='Rest', color=colors[2]))\n# Plot running2 times\nbars.append(ax.bar(index + 3 * bar_width, running2_times, bar_width, label='Running2', color=colors[3]))\n\n# Set labels and title\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Time (seconds)')\nax.set_title('Endurance Race Performance Analysis')\nax.set_xticks(index + 1.5 * bar_width)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate the chart with arrows and text\nfor i, bar in enumerate(bars):\n    for j, v in enumerate(bar.get_height()):\n        if j == 1:  # Only annotate the second bar for demonstration\n            ax.text(j + i * bar_width + bar_width / 2, v + 5, str(v), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncontrol_group = np.random.normal(loc=0, scale=1, size=100)\ntreatment_group_1 = np.random.normal(loc=2, scale=1, size=100)\ntreatment_group_2 = np.random.normal(loc=4, scale=1, size=100)\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 3, figsize=(7.0, 5.0))\n\n# Plot the first subplot\naxes[0].hist(control_group, bins=20, color='green', alpha=0.7)\naxes[0].set_title('Control Group')\naxes[0].set_xlabel('Number of Observations')\naxes[0].set_ylabel('Value Range')\n\n# Plot the second subplot\naxes[1].scatter(treatment_group_1, control_group, color='red', alpha=0.6)\naxes[1].set_title('Treatment Group 1')\naxes[1].set_xlabel('Number of Observations')\naxes[1].set_ylabel('Value Range')\n\n# Plot the third subplot\naxes[2].bar(range(len(treatment_group_2)), treatment_group_2, color='orange', alpha=0.8)\naxes[2].set_title('Treatment Group 2')\naxes[2].set_xlabel('Number of Observations')\naxes[2].set_ylabel('Value Range')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-300, -120, -100, -135, -50, 50, 200, 75, 100, 25, 350])\ny = np.array([350, 150, 200, 75, 50, 25, 100, 50, 20, 25, 150])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with specific styles\nax.plot(x, y, marker='o', linestyle='-', color='red', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Waterfall Chart')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2)) / (np.sqrt(X**2 + Y**2))\n\n# Plot the data using a contourf plot\nplt.contourf(X, Y, Z, levels=20, cmap='viridis')\n\n# Add a color bar to the plot\ncbar = plt.colorbar()\ncbar.set_label('Colorbar Label')\n\n# Set labels for the axes\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\n\n# Set a title for the plot\nplt.title('Contour Plot of a Function')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define data for the first subplot\nx1 = np.linspace(-4, 4, 100)\ny1 = np.linspace(-4, 4, 100)\nX1, Y1 = np.meshgrid(x1, y1)\nZ1 = np.sin(np.sqrt(X1**2 + Y1**2))\n\n# Add the first subplot\nax1 = fig.add_subplot(2, 2, 1)\nc1 = ax1.contourf(X1, Y1, Z1, cmap='viridis')\nfig.colorbar(c1, ax=ax1)\n\n# Define data for the second subplot\nx2 = np.linspace(-4, 4, 100)\ny2 = np.linspace(-4, 4, 100)\nX2, Y2 = np.meshgrid(x2, y2)\nZ2 = np.cos(np.sqrt(X2**2 + Y2**2))\n\n# Add the second subplot\nax2 = fig.add_subplot(2, 2, 2)\nc2 = ax2.contourf(X2, Y2, Z2, cmap='plasma')\nfig.colorbar(c2, ax=ax2)\n\n# Define data for the third subplot\nx3 = np.linspace(-4, 4, 100)\ny3 = np.linspace(-4, 4, 100)\nX3, Y3 = np.meshgrid(x3, y3)\nZ3 = np.exp(-(X3**2 + Y3**2))\n\n# Add the third subplot\nax3 = fig.add_subplot(2, 2, 3)\nc3 = ax3.contourf(X3, Y3, Z3, cmap='inferno')\nfig.colorbar(c3, ax=ax3)\n\n# Define data for the fourth subplot\nx4 = np.linspace(-4, 4, 100)\ny4 = np.linspace(-4, 4, 100)\nX4, Y4 = np.meshgrid(x4, y4)\nZ4 = np.log(np.sqrt(X4**2 + Y4**2))\n\n# Add the fourth subplot\nax4 = fig.add_subplot(2, 2, 4)\nc4 = ax4.contourf(X4, Y4, Z4, cmap='magma')\nfig.colorbar(c4, ax=ax4)\n\n# Set titles for each subplot\nax1.set_title('nearest')\nax2.set_title('nearest')\nax3.set_title('bilinear')\nax4.set_title('bilinear')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny1 = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\ny2 = np.array([150, 250, 350, 450, 550, 650, 750, 850, 950, 1050])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='Flickr30k', color='purple', linestyle='--', marker='o')\nax.plot(x, y2, label='MS-COCO', color='blue', linestyle='-', marker='s')\n\n# Set labels and title\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\nax.set_title('Comparison of Recall Sum for Different Datasets')\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='Monte Carlo', color='red', linestyle='-', linewidth=2, marker='o', markersize=4, markerfacecolor='white')\nax.plot(x, y2, label='\u00b1 3-\u03c3 of Prediction', color='gray', linestyle='--', linewidth=2, marker='s', markersize=4, markerfacecolor='white')\nax.plot(x, y3, label='Mean-Taylor', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=4, markerfacecolor='white')\n\n# Set labels and title\nax.set_xlabel('x (m)', fontsize=12)\nax.set_ylabel('y (m)', fontsize=12)\nax.set_title('Denser Points with Perfectly Circular Error Ellipses', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Set grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set axis limits\nax.set_xlim(0, 25)\nax.set_ylim(-3, 3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: a simple circle\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.ones_like(theta)\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(6.0, 6.0))\n\n# Plot the circle\nax.plot(theta, r, color='blue', linestyle='-', linewidth=2)\n\n# Set title and labels\nax.set_title(\"Simple Circle\", fontsize=14, va='bottom')\nax.set_xlabel(\"Theta (radians)\", fontsize=12)\nax.set_ylabel(\"Radius\", fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 7.0))\n\n# Define data for plotting\nx = np.linspace(0, 2, 100)\ny = np.linspace(0, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the data using a contour plot\ncontour = plt.contourf(X, Y, Z, cmap='viridis')\n\n# Add a color bar to the plot\ncbar = plt.colorbar(contour)\ncbar.set_label('Z Value')\n\n# Set labels for the axes\nplt.xlabel('Alpha')\nplt.ylabel('Beta')\n\n# Set a title for the plot\nplt.title('Contour Plot of Z = sin(X) * cos(Y)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x / 20) * 5\ny2 = np.cos(x / 20) * 5\ny3 = np.tan(x / 20) * 5\ny4 = np.exp(-x / 50) * 5\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Left', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Center Left', color='green', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Center Right', color='red', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='Right', color='orange', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\nax.set_title('Utility distribution per topic')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.array([-2, -1, 0, 1, 2, 3])\ny = np.array([0, 1, 2, 3, 2, 1])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y, 'o-', label='Sample Data', color='blue')\n\n# Set labels and title\nax.set_xlabel('Reactive-2 payoff')\nax.set_ylabel('Memory-2 payoff')\nax.set_title('Example Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different models\ndata_vicuna = np.array([\n    [2.5, 3.0, 4.5, 5.0, 6.0],\n    [3.5, 4.0, 5.5, 6.0, 7.0],\n    [4.5, 5.0, 6.5, 7.0, 8.0],\n    [5.5, 6.0, 7.5, 8.0, 9.0],\n    [6.5, 7.0, 8.5, 9.0, 10.0]\n])\n\ndata_alpaca = np.array([\n    [1.5, 2.0, 3.5, 4.0, 5.0],\n    [2.5, 3.0, 4.5, 5.0, 6.0],\n    [3.5, 4.0, 5.5, 6.0, 7.0],\n    [4.5, 5.0, 6.5, 7.0, 8.0],\n    [5.5, 6.0, 7.5, 8.0, 9.0]\n])\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first dataset\naxes[0].scatter(data_vicuna[:, 0], data_vicuna[:, 1], color='blue', label='Model = Vicuna')\naxes[0].set_title('Model = Vicuna')\naxes[0].set_xlabel('Perplexity Reduction')\naxes[0].set_ylabel('Rule')\naxes[0].legend()\n\n# Plot the second dataset\naxes[1].scatter(data_alpaca[:, 0], data_alpaca[:, 1], color='red', label='Model = Alpaca')\naxes[1].set_title('Model = Alpaca')\naxes[1].set_xlabel('Perplexity Reduction')\naxes[1].set_ylabel('Rule')\naxes[1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40])\ny = np.array([0.5, 1.2, 1.8, 2.5, 3.1, 3.7, 4.2, 4.6, 4.9, 4.8, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0, 1.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with specific styles\nax.scatter(x, y, color='green', marker='^', label='Data Points')\n\n# Set labels and title\nax.set_xlabel('\u0394 Robust Accuracy (%)')\nax.set_ylabel('\u0394 RNFR (%)')\nax.set_title('Scatter Plot of \u0394 Robust Accuracy vs \u0394 RNFR')\n\n# Add a grid for better readability\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 100, 200)\ny1 = np.exp(x / 50)\ny2 = np.sin(x / 10) + 3\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Line 3 (Random Noise)', color='green', linestyle='-', linewidth=2, marker='o', markersize=4, markevery=10)\nax.plot(x, y2, label='Line 4 (Exponential Focus)', color='red', linestyle='--', linewidth=2, marker='s', markersize=4, markevery=10)\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Exponential Scale')\nax.set_title('Comparison of Two Lines')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Predicted probabilities and actual outcomes\npredicted_probabilities = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]\nactual_outcomes = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the histogram with a bar width of 0.05\nbar_width = 0.05\nax.bar(predicted_probabilities, actual_outcomes, width=bar_width, color='blue', label='Unknown')\nax.bar(predicted_probabilities, [1 - x for x in actual_outcomes], bottom=actual_outcomes, width=bar_width, color='green', label='Known')\n\n# Set labels and title\nax.set_xlabel('Maximum predicted probability')\nax.set_ylabel('Number of examples')\nax.set_title('Histogram of Predicted Probabilities vs Actual Outcomes')\n\n# Add a legend\nax.legend()\n\n# Set grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set x-axis limits\nax.set_xlim(0.25, 0.95)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([2, 3, 4, 5, 6, 7, 8, 9, 10])\ny2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\ny3 = np.array([3, 4, 5, 6, 7, 8, 9, 10, 11])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='INT8', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='INT2', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='CodeLlama-7B-Instruct', color='green', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Data Type')\nax.set_ylabel('Bias Score')\nax.set_title('Bias Score by Data Type and Model')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.0, 0.2, 0.4, 0.6])\ny_known = np.array([1500, 800, 500, 300])\ny_unknown = np.array([1200, 700, 400, 200])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars_known = ax.bar(x - 0.2, y_known, width=0.4, color='orange', label='Known')\nbars_unknown = ax.bar(x + 0.2, y_unknown, width=0.4, color='blue', label='Unknown')\n\n# Add labels and title\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\nax.set_title('Comparison of Known vs Unknown Samples')\nax.set_xticks(x)\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6'])\nax.legend()\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2**6, 2**7, 2**8, 2**9, 2**10, 2**11])\ny1 = np.array([100000, 200000, 300000, 400000, 500000, 600000])\ny2 = np.array([150000, 250000, 350000, 450000, 550000, 650000])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Cos | n=200', color='green', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Cos | n=400', color='green', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\nax.set_title('Empirical Lipschitz Constant vs Width of Layer')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000])\ny1 = np.array([3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500])\ny2 = np.array([3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600])\ny3 = np.array([3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700])\ny4 = np.array([3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800])\ny5 = np.array([3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, color='red', linestyle='-', linewidth=2, marker='o', markersize=5, label='WI')\nax.plot(x, y2, color='green', linestyle='--', linewidth=2, marker='s', markersize=5, label='ISQ')\nax.plot(x, y3, color='purple', linestyle='-.', linewidth=2, marker='^', markersize=5, label='WIQL')\nax.plot(x, y4, color='blue', linestyle=':', linewidth=2, marker='D', markersize=5, label='Greedy')\n\n# Set labels and title\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\nax.set_title('Discounted Cumulative Reward Over Time')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 10) * 0.5 + 0.5\ny2 = np.cos(x / 10) * 0.5 + 0.5\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='WI', color='blue')\nax.plot(x, y2, label='ISQ', color='orange')\n\n# Set labels and title\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\nax.set_title('Discounted Cumulative Reward Over Time')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-3, -2, -1, 0, 1, 2, 3])\ny1 = np.array([1.5, 2.5, 3.5, 4.5, 3.5, 2.5, 1.5])\ny2 = np.array([0.5, 1.5, 2.5, 3.5, 2.5, 1.5, 0.5])\ny3 = np.array([-0.5, -1.5, -2.5, -3.5, -2.5, -1.5, -0.5])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with different markers and colors\nax.scatter(x, y1, color='orange', label='Daytime Sunny', marker='o')\nax.scatter(x, y2, color='blue', label='Night Rainy', marker='s')\nax.scatter(x, y3, color='green', label='PGST', marker='^')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Scatter Plot Example')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-7, -5, -3, -1, 1, 3, 5, 7])\ny = np.array([1, 2, 3, 4, 5, 6, 7, 8])\n\n# Create a new figure with specified size\nplt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.scatter(x, y, color='blue', label='Data Points')\n\n# Add grid for better readability\nplt.grid(True)\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Scatter Plot Example')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(10, 110, 10)\ny1 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105])\ny3 = np.array([20, 30, 40, 50, 60, 70, 80, 90, 100, 110])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='ActivityNet mIoU', color='darkred', linestyle='-', marker='o', linewidth=2, markersize=8)\nax.plot(x, y2, label='ActivityNet CIDER', color='orange', linestyle='--', marker='s', linewidth=2, markersize=8)\nax.plot(x, y3, label='Breakfast MoF', color='darkgreen', linestyle='-.', marker='^', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Time (seconds)', fontsize=12)\nax.set_ylabel('Performance Score', fontsize=12)\nax.set_title('Performance Metrics Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(10, 110, 10))\nax.set_yticks(np.arange(0, 120, 10))\n\n# Add legend\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ntime = np.array([0, 1, 2, 3])\nGT = np.array([0.96, 0.98, 0.99, 0.995])\nDRS = np.array([0.97, 0.99, 0.995, 0.998])\nPR_based = np.array([0.95, 0.97, 0.98, 0.99])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data with different styles and markers\nax.plot(time, GT, label='GT', color='green', linestyle='-', marker='o', linewidth=2, markersize=8)\nax.plot(time, DRS, label='DRS', color='blue', linestyle='--', marker='s', linewidth=2, markersize=8)\nax.plot(time, PR_based, label='PR-based', color='red', linestyle='-.', marker='^', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Time', fontsize=14)\nax.set_ylabel('Performance', fontsize=14)\nax.set_title('Performance Comparison Over Time', fontsize=16, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=12, shadow=True)\n\n# Customize the tick parameters\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 80, 100)\ny1 = np.sin(x / 10) + 0.5\ny2 = np.sin(x / 10 + np.pi / 3) + 0.5\ny3 = np.sin(x / 10 + np.pi / 6) + 0.5\ny4 = np.sin(x / 10 + np.pi / 4) + 0.5\ny5 = np.sin(x / 10 + np.pi / 2) + 0.5\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='clip', color='black', linewidth=2)\nax.plot(x, y2, label='laion (5k)', color='yellow', linestyle='--', linewidth=2)\nax.plot(x, y3, label='coco (5k)', color='blue', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='laion (10k)', color='green', linestyle=':', linewidth=2)\nax.plot(x, y5, label='coco (10k)', color='red', marker='o', markersize=5, linestyle='-', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', shadow=True)\n\n# Set limits for x and y axes\nax.set_xlim(0, 80)\nax.set_ylim(0.5, 0.76)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8])\ncontent = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\norganization = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\nlanguage = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles\nax.plot(n, content, label='Content', color='b', linestyle='-', linewidth=2)\nax.plot(n, organization, label='Organization', color='y', linestyle='--', linewidth=2)\nax.plot(n, language, label='Language', color='g', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Cumulative Performance Gain by Augmentation Level')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: World population by region over time\nyears = np.array([1950, 1960, 1970, 1980, 1990, 2000, 2010])\nafrica = np.array([100, 150, 200, 250, 300, 350, 400])\namericas = np.array([200, 250, 300, 350, 400, 450, 500])\nasia = np.array([300, 350, 400, 450, 500, 550, 600])\neurope = np.array([400, 450, 500, 550, 600, 650, 700])\noceania = np.array([500, 550, 600, 650, 700, 750, 800])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different colors and styles\nax.plot(years, africa, label='Africa', color='green', linestyle='-', linewidth=2)\nax.plot(years, americas, label='Americas', color='yellow', linestyle='--', linewidth=2)\nax.plot(years, asia, label='Asia', color='red', linestyle='-.', linewidth=2)\nax.plot(years, europe, label='Europe', color='orange', linestyle=':', linewidth=2)\nax.plot(years, oceania, label='Oceania', color='blue', linestyle='-', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\nax.set_title('World Population')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 20, 40])\ny1 = np.array([6.0, 3.0, 2.0])\ny2 = np.array([5.5, 2.5, 1.5])\ny3 = np.array([5.0, 2.0, 1.0])\ny4 = np.array([4.5, 1.5, 0.5])\ny5 = np.array([4.0, 1.0, 0.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Notre-Dame de Paris', color='darkblue', linestyle='-', linewidth=2, marker='o', markersize=8)\nax.plot(x, y2, label='Demi-Gods and Semi-Devils', color='royalblue', linestyle='--', linewidth=2, marker='s', markersize=8)\nax.plot(x, y3, label='The Count of Monte Cristo', color='tan', linestyle='-.', linewidth=2, marker='^', markersize=8)\nax.plot(x, y4, label='Game of Thrones', color='skyblue', linestyle=':', linewidth=2, marker='D', markersize=8)\nax.plot(x, y5, label='Attack on Titan', color='darkblue', linestyle='-', linewidth=2, marker='p', markersize=8)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Scores')\nax.set_title('Scores by Different Categories')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different models\nmodels = ['Which', 'What', 'How', 'Will', 'Is', 'Select', 'Identify', 'Fill']\naccuracy = [55, 45, 35, 25, 15, 60, 50, 40]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nbars = ax.bar(models, accuracy, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Model Accuracy Comparison')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nregion1_sales = [60, 40, 20, 80, 30]\nregion2_sales = [70, 50, 30, 90, 40]\nregion3_sales = [80, 60, 40, 100, 50]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Define colors for each region\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot bars for Region 1\nbars1 = ax.bar(products, region1_sales, color=colors[0], label='Region 1 Sales')\n\n# Plot bars for Region 2\nbars2 = ax.bar([p + 0.2 for p in range(len(products))], region2_sales, width=0.4, color=colors[1], label='Region 2 Sales')\n\n# Plot bars for Region 3\nbars3 = ax.bar([p + 0.4 for p in range(len(products))], region3_sales, width=0.4, color=colors[2], label='Region 3 Sales')\n\n# Set labels and title\nax.set_xlabel('Products')\nax.set_ylabel('Average Monthly Sales')\nax.set_title('Average Monthly Sales by Product Across Regions')\nax.set_xticks([p + 0.2 for p in range(len(products))])\nax.set_xticklabels(products)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, f'{yval}', ha='center', va='bottom')\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, f'{yval}', ha='center', va='bottom')\n\nfor bar in bars3:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, f'{yval}', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlengths = [0.9, 10.19, 20.29, 30.39, 40.49]\nspearmans = [-0.5, -0.4, -0.3, -0.2, -0.1]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(lengths, spearmans, color='blue', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Length')\nax.set_ylabel('Spearman')\nax.set_title('Spearman Correlation by Length')\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'CasER', 'GRU4Rec']\nvalues = [2.2, 11.2, 2.4, 19.9, 14.3]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values (%)')\nax.set_title('Bar Chart Example')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['Bactrian-X', 'Lima-X']\nen_scores = [3.5, 1.5]\nfr_scores = [4.4, 2.3]\nes_scores = [4.4, 1.5]\nde_scores = [3.5, 1.3]\nit_scores = [3.5, 1.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each language\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the data\nfor i, model in enumerate(models):\n    ax.barh([i], en_scores[i], color=colors[0], label='EN' if i == 0 else None)\n    ax.barh([i], fr_scores[i], left=en_scores[i], color=colors[1], label='FR' if i == 0 else None)\n    ax.barh([i], es_scores[i], left=[x + y for x, y in zip(en_scores, fr_scores)], color=colors[2], label='ES' if i == 0 else None)\n    ax.barh([i], de_scores[i], left=[x + y + z for x, y, z in zip(en_scores, fr_scores, es_scores)], color=colors[3], label='DE' if i == 0 else None)\n    ax.barh([i], it_scores[i], left=[x + y + z + w for x, y, z, w in zip(en_scores, fr_scores, es_scores, de_scores)], color=colors[4], label='IT' if i == 0 else None)\n\n# Set labels and title\nax.set_xlabel('Improvement [%]')\nax.set_title('ENDEFRRITES sampled')\nax.set_yticks(np.arange(len(models)))\nax.set_yticklabels(models)\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nllm = [0.82, 0.83, 0.81, 0.84, 0.86, 0.87]\nmacro_f1 = [0.85, 0.86, 0.84, 0.87, 0.89, 0.90]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nbars = ax.bar(pheme, macro_f1, color='blue', label='Macro F1-score')\n\n# Add error bars for LLM-mis\nfor bar, yval in zip(bars, llm):\n    ax.errorbar(bar.get_x() + bar.get_width()/2, yval, yerr=0.05, fmt='o', color='red', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Pheme')\nax.set_ylabel('Macro F1-score')\nax.set_title('Performance Metrics by Pheme')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['1', '2', '3', '4', '5', '6']\nvalues = [\n    [5, 10, 15, 20, 25, 30],\n    [4, 9, 14, 19, 24, 29],\n    [3, 8, 13, 18, 23, 28],\n    [2, 7, 12, 17, 22, 27],\n    [1, 6, 11, 16, 21, 26]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the data\nfor i, value in enumerate(values):\n    ax.bar(categories, value, color=colors[i], alpha=0.7, label=f'Category {i+1}')\n\n# Set labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['human', 'gpt4', 'gpt4-cot']\ns1_values = [200, 300, 500]\ns2_values = [100, 200, 400]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the data\nbars = ax.bar(categories, s1_values, color=colors, label='s1')\nax.bar(categories, s2_values, bottom=s1_values, color=[c.replace('#', '#88') for c in colors], label='s2')\n\n# Add labels and title\nax.set_xlabel('Role')\nax.set_ylabel('Count')\nax.set_title('Resonance Preference Plot for rich_context')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQA', 'Winogrande', 'Average']\naccuracies = [\n    [53.0, 51.3, 56.4],\n    [46.6, 45.8, 48.0],\n    [45.3, 45.6, 46.7],\n    [73.1, 70.4, 72.9],\n    [53.1, 53.7, 53.8]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot bars for each task\nfor i, task_accuracies in enumerate(accuracies):\n    ax.bar([j + i * 0.2 for j in range(len(task_accuracies))], task_accuracies, width=0.2, label=tasks[i], color=colors[i])\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Task Accuracy Comparison')\nax.set_xticks([i + 0.2 for i in range(len(accuracies[0]))])\nax.set_xticklabels(['LLaMA-2-7B', 'Evol-Instruct-70k', 'Evol-Instruct-AlpaGasus-1k', 'Evol-Instruct-1k-longest', 'LIMA-1k'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([3, 4, 5, 6, 7])\ny = np.array([\n    [50, 55, 60, 65, 70],\n    [52, 57, 62, 67, 72],\n    [54, 59, 64, 69, 74],\n    [56, 61, 66, 71, 76],\n    [58, 63, 68, 73, 78]\n])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different colors and line styles\nfor i in range(y.shape[0]):\n    ax.plot(x, y[i], label=f'M = {x[i]}', marker='o')\n\n# Set labels and title\nax.set_xlabel('M')\nax.set_ylabel('Performance')\nax.set_title('Performance vs M')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['DLMA-7B VS. LLAMa-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMa-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\ndlma_win = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\ntie = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\ndlma_lose = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the bar width\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the data\nbars1 = ax.bar(index, dlma_win, bar_width, label='DLMA win', color='#4caf50')\nbars2 = ax.bar(index + bar_width, tie, bar_width, label='Tie', color='#2196f3')\nbars3 = ax.bar(index + 2 * bar_width, dlma_lose, bar_width, label='DLMA lose', color='#f44336')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('DLMA vs. Baseline Methods On HHH (Evaluated by GPT4)', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ntime = np.array([0, 10, 20, 30, 40])\ntrot = np.array([0.5, 0.7, 0.8, 0.9, 0.95])\npace = np.array([0.3, 0.4, 0.5, 0.6, 0.7])\nbound = np.array([0.2, 0.3, 0.4, 0.5, 0.6])\npronk = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\ntransition = np.array([0.05, 0.1, 0.15, 0.2, 0.25])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data with different colors and labels\nax.plot(time, trot, color='green', label='trot')\nax.plot(time, pace, color='red', label='pace')\nax.plot(time, bound, color='purple', label='bound')\nax.plot(time, pronk, color='brown', label='pronk')\nax.plot(time, transition, color='gray', label='transition')\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nap1k_wins = [68, 82, 68, 72, 68]\ntie_wins = [24, 15, 22, 19, 23]\nag1k_wins = [8, 3, 10, 9, 9]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Plot the bars\nbars1 = ax.bar(r1, ap1k_wins, color='royalblue', width=bar_width, edgecolor='grey', label='AP-1k wins')\nbars2 = ax.bar(r2, tie_wins, color='mediumpurple', width=bar_width, edgecolor='grey', label='Tie')\nbars3 = ax.bar(r3, ag1k_wins, color='lightgrey', width=bar_width, edgecolor='grey', label='AG-1k wins')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Model', fontweight='bold')\nax.set_ylabel('Wins', fontweight='bold')\nax.set_title('Comparison of Model Wins', fontsize=15)\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of the bars\nfor p in bars1:\n    width = p.get_width()\n    ax.annotate(f'{width}',\n                xy=(p.get_x() + width / 2, p.get_height()),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nfor p in bars2:\n    width = p.get_width()\n    ax.annotate(f'{width}',\n                xy=(p.get_x() + width / 2, p.get_height()),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nfor p in bars3:\n    width = p.get_width()\n    ax.annotate(f'{width}',\n                xy=(p.get_x() + width / 2, p.get_height()),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nbenefits = [14.8, 29.6, 9.4, 24.1]\nreliability = [9.5, 26.2, 45.2, 14.3]\nsecurity = [12.0, 26.2, 38.1, 19.0]\nprivacy = [11.9, 20.4, 33.3, 14.3]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#FFA500', '#ADD8E6', '#87CEEB']\n\n# Plot the data\nbars = ax.bar(categories, benefits, color=colors[0], label='Strong Disagree')\nax.bar(categories, reliability, bottom=benefits, color=colors[1], label='Disagree')\nax.bar(categories, security, bottom=[sum(x) for x in zip(benefits, reliability)], color=colors[2], label='Neutral')\nax.bar(categories, privacy, bottom=[sum(x) for x in zip(benefits, reliability, security)], color=colors[3], label='Agree')\n\n# Add labels and title\nax.set_xlabel('Eye Movement')\nax.set_ylabel('Percentage (%)')\nax.set_title('Eye Movement Preferences by Category')\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 60)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-150, -120, -90, -60, 0, 30, 60, 90, 120, 150])\ny1 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Ours', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Saliency-based Sampling', color='purple', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Rotation Angle (\u00b0)', fontsize=12)\nax.set_ylabel('Rate of Gain Change (%)', fontsize=12)\nax.set_title('Comparison of Rate of Gain Change', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nax.set_xlim(-150, 150)\nax.set_ylim(-10, 110)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlabels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 2.8, 2.6, 2.4, 2.2, 1.8]\ncompleteness = [3.1, 2.7, 2.5, 2.3, 2.1, 1.7]\nconciseness = [3.0, 2.6, 2.4, 2.2, 2.0, 1.6]\nreadability = [2.9, 2.5, 2.3, 2.1, 1.9, 1.5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot bars for each category\nbar_width = 0.2\nindex = np.arange(len(labels))\nbars1 = ax.bar(index, accuracy, bar_width, label='Accuracy', color=colors[0], edgecolor='black')\nbars2 = ax.bar(index + bar_width, completeness, bar_width, label='Completeness', color=colors[1], edgecolor='black')\nbars3 = ax.bar(index + 2 * bar_width, conciseness, bar_width, label='Conciseness', color=colors[2], edgecolor='black')\nbars4 = ax.bar(index + 3 * bar_width, readability, bar_width, label='Readability', color=colors[3], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Language Models', fontsize=12)\nax.set_ylabel('Ratings', fontsize=12)\nax.set_title('Ratings of Language Models on a Scale from 1-4', fontsize=14, fontweight='bold')\nax.set_xticks(index + 1.5 * bar_width)\nax.set_xticklabels(labels, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add annotations on top of each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nfor bar in bars3:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nfor bar in bars4:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(models, accuracies, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 3), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nvalues1 = [78.8, 67.4, 44.2]\nvalues2 = [11.7, 18.1, 21.9]\nvalues3 = [9.5, 14.5, 33.9]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different colors and patterns\nbars1 = ax.bar(categories, values1, color='orange', label='Refined-Alpaca-1k-longest wins')\nbars2 = ax.bar(categories, values2, bottom=values1, color='blue', label='Alpaca-1k-longest wins')\nbars3 = ax.bar(categories, values3, bottom=[sum(x) for x in zip(values1, values2)], color='lightblue', label='Alpaca-1k-longest loses')\n\n# Add labels and title\nax.set_xlabel('GPT4-as-a-judge')\nax.set_ylabel('Values')\nax.set_title('Comparison of Different Models')\n\n# Add a legend\nax.legend()\n\n# Add value labels on top of each bar\nfor bar in bars1 + bars2 + bars3:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nemotions = ['Ang', 'Ct', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nnegative_values = [100, 50, 20, 30, 150, 350, 70, 10]\npositive_values = [200, 100, 50, 100, 100, 200, 50, 5]\nnone_values = [100, 100, 100, 100, 100, 100, 100, 100]\nmixed_values = [100, 100, 100, 100, 100, 100, 100, 100]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define colors for each category\ncolors = ['#FF0000', '#00FF00', '#808080', '#FFFF00']\n\n# Plot the bar chart with different colors and patterns\nax.bar(emotions, negative_values, color=colors[0], label='negative')\nax.bar(emotions, positive_values, bottom=negative_values, color=colors[1], label='positive')\nax.bar(emotions, none_values, bottom=[sum(x) for x in zip(negative_values, positive_values)], color=colors[2], label='none')\nax.bar(emotions, mixed_values, bottom=[sum(x) for x in zip(negative_values, positive_values, none_values)], color=colors[3], label='mixed')\n\n# Set labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency')\nax.set_title('Emotion Frequency Distribution')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['GPT-4V', 'RoboCodeX']\nsuccess_rates = [0.95, 0.85]\noccupancy_error = [0.02, 0.03]\ntrajectory_optimization_error = [0.01, 0.02]\ngripper_collision_error = [0.01, 0.01]\ngrasping_failed = [0.01, 0.01]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors for each category\ncolors = ['#006400', '#8B4513', '#808080', '#FFD700', '#800080']\n\n# Plot bars for each category\nbar_width = 0.2\nindex = np.arange(len(categories))\nbars = []\n\n# Plot success rates\nbars.append(ax.bar(index, success_rates, bar_width, label='Success', color=colors[0]))\n\n# Plot occupancy error\nbars.append(ax.bar(index + bar_width, occupancy_error, bar_width, label='Occupancy Error', color=colors[1]))\n\n# Plot trajectory optimization error\nbars.append(ax.bar(index + 2 * bar_width, trajectory_optimization_error, bar_width, label='Trajectory optimization Error', color=colors[2]))\n\n# Plot gripper collision error\nbars.append(ax.bar(index + 3 * bar_width, gripper_collision_error, bar_width, label='Gripper collision', color=colors[3]))\n\n# Plot grasping failed\nbars.append(ax.bar(index + 4 * bar_width, grasping_failed, bar_width, label='Grasping failed', color=colors[4]))\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage of total trials')\nax.set_title('Performance Metrics Comparison')\nax.set_xticks(index + 2 * bar_width)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndatasets = ['VOC 2012', 'COCO 2017']\ntransmission_delays = [\n    [3.2, 2.8, 2.4],  # Transmission delays for VOC 2012\n    [2.9, 2.5, 2.1]   # Transmission delays for COCO 2017\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with error bars\nbar_width = 0.35\nopacity = 0.8\nindex = np.arange(len(datasets))\nbar1 = ax.bar(index, [sum(delays) for delays in transmission_delays], bar_width,\n              alpha=opacity, color='b', label='JPEG',\n              yerr=[np.std(delays) for delays in transmission_delays],\n              capsize=5, hatch='///')\n\nbar2 = ax.bar(index + bar_width, [sum(delays) for delays in transmission_delays], bar_width,\n              alpha=opacity, color='r', label='DEEPJSCC w/ ofdm',\n              yerr=[np.std(delays) for delays in transmission_delays],\n              capsize=5, hatch='.')\n\nbar3 = ax.bar(index + 2 * bar_width, [sum(delays) for delays in transmission_delays], bar_width,\n              alpha=opacity, color='g', label='OURS',\n              yerr=[np.std(delays) for delays in transmission_delays],\n              capsize=5, hatch='*')\n\n# Set labels and title\nax.set_xlabel('Datasets')\nax.set_ylabel('Transmission Delay (ms)')\nax.set_title('Transmission Delay Comparison')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(datasets)\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\nvalues = [1.2, 1.3, 1.4, 1.5, 1.6, 1.7]\ncolors = ['#0000FF', '#FF0000', '#FFFF00']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('PDEs')\nax.set_ylabel('log L2')\nax.set_title('Comparison of Different PDEs')\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_data = [0.975, 0.975, 0.975, 0.985]\nsiciq_data = [0.975, 0.975, 0.975, 0.985]\ntid2013_data = [0.975, 0.975, 0.975, 0.985]\nlive_m_data = [0.975, 0.975, 0.975, 0.985]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data\nbars = ax.bar(models, live_data, color='blue', label='Live')\nax.bar(models, siciq_data, bottom=live_data, color='orange', label='SICIQ')\nax.bar(models, tid2013_data, bottom=[x + y for x, y in zip(live_data, siciq_data)], color='cyan', label='TID2013')\nax.bar(models, live_m_data, bottom=[x + y + z for x, y, z in zip(live_data, siciq_data, tid2013_data)], color='yellow', label='Live-M')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Metric Values')\nax.set_title('Models')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\nvalues = [6.11, 28.33, 31.11, 44.44, 56.11, 85.0, 60.56, 62.78, 42.78]\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Sample Bar Chart')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_values = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_values = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_values = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for each category\nbars1 = ax.bar(index - bar_width, win_values, bar_width, label='Win', color='skyblue')\nbars2 = ax.bar(index, tie_values, bar_width, label='Tie', color='lightgreen')\nbars3 = ax.bar(index + bar_width, loss_values, bar_width, label='Loss', color='salmon')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Comparison of Different Categories', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate the bars with their values\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars3:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color='blue')\n\n# Set labels and title\nax.set_xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nsteps = np.array([0, 1, 2, 3, 4])\navg_following_rate = np.array([100.0, 60.0, 29.8, 27.1, 26.7])\nfollowing_related_format_error_rate = np.array([100.0, 83.3, 50.7, 63.4, 60.8])\nfollowing_related_error_rate = np.array([100.0, 48.1, 50.7, 38.5, 30.7])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nbars = ax.bar(steps, avg_following_rate, color='darkgray', label='Avg. Following Rate')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom')\n\nbars = ax.bar(steps, following_related_format_error_rate, bottom=avg_following_rate, color='royalblue', label='Following-related Format Error Rate')\nfor bar in bars:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(yval, yval + 0.1, f'{bar.get_height():.1f}', ha='center', va='bottom')\n\nbars = ax.bar(steps, following_related_error_rate, bottom=avg_following_rate + following_related_format_error_rate, color='seagreen', label='Following-related Error Rate')\nfor bar in bars:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(yval, yval + 0.1, f'{bar.get_height():.1f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'coreutils': [50, 60, 70, 80, 90, 100],\n    'scp': [20, 30, 40, 50, 60, 70],\n    'tar': [10, 20, 30, 40, 50, 60],\n    'exim': [15, 25, 35, 45, 55, 65],\n    'memc': [25, 35, 45, 55, 65, 75],\n    'niginx': [30, 40, 50, 60, 70, 80],\n    'bzip2': [10, 20, 30, 40, 50, 60],\n    'liba': [15, 25, 35, 45, 55, 65],\n    'h264': [20, 30, 40, 50, 60, 70],\n    'gobmk': [10, 20, 30, 40, 50, 60],\n    'libm': [15, 25, 35, 45, 55, 65],\n    'libq': [20, 30, 40, 50, 60, 70],\n    'libp': [10, 20, 30, 40, 50, 60],\n    'libl': [15, 25, 35, 45, 55, 65],\n    'libh': [20, 30, 40, 50, 60, 70],\n    'libg': [10, 20, 30, 40, 50, 60],\n    'libf': [15, 25, 35, 45, 55, 65],\n    'libd': [20, 30, 40, 50, 60, 70],\n    'libc': [10, 20, 30, 40, 50, 60],\n    'libb': [15, 25, 35, 45, 55, 65],\n    'liba': [20, 30, 40, 50, 60, 70],\n    'libz': [10, 20, 30, 40, 50, 60],\n    'liby': [15, 25, 35, 45, 55, 65],\n    'libx': [20, 30, 40, 50, 60, 70],\n    'libw': [10, 20, 30, 40, 50, 60],\n    'libv': [15, 25, 35, 45, 55, 65],\n    'libu': [20, 30, 40, 50, 60, 70],\n    'libt': [10, 20, 30, 40, 50, 60],\n    'libs': [15, 25, 35, 45, 55, 65],\n    'libr': [20, 30, 40, 50, 60, 70],\n    'libq': [10, 20, 30, 40, 50, 60],\n    'libp': [15, 25, 35, 45, 55, 65],\n    'libo': [20, 30, 40, 50, 60, 70],\n    'libn': [10, 20, 30, 40, 50, 60],\n    'libm': [15, 25, 35, 45, 55, 65],\n    'libl': [20, 30, 40, 50, 60, 70],\n    'libk': [10, 20, 30, 40, 50, 60],\n    'libj': [15, 25, 35, 45, 55, 65],\n    'libi': [20, 30, 40, 50, 60, 70],\n    'libh': [10, 20, 30, 40, 50, 60],\n    'libg': [15, 25, 35, 45, 55, 65],\n    'libf': [20, 30, 40, 50, 60, 70],\n    'libe': [10, 20, 30, 40, 50, 60],\n    'libd': [15, 25, 35, 45, 55, 65],\n    'libc': [20, 30, 40, 50, 60, 70],\n    'libb': [10, 20, 30, 40, 50, 60],\n    'liba': [15, 25, 35, 45, 55, 65],\n    'libz': [20, 30, 40, 50, 60, 70],\n    'liby': [10, 20, 30, 40, 50, 60],\n    'libx': [15, 25, 35, 45, 55, 65],\n    'libw': [20, 30, 40, 50, 60, 70],\n    'libv': [10, 20, 30, 40, 50, 60],\n    'libu': [15, 25, 35, 45, 55, 65],\n    'libt': [20, 30, 40, 50, 60, 70],\n    'libs': [10, 20, 30, 40, 50, 60],\n    'libr': [15, 25, 35, 45, 55, 65],\n    'libq': [20, 30, 40, 50, 60, 70],\n    'libp': [10, 20, 30, 40, 50, 60],\n    'libo': [15, 25, 35, 45, 55, 65],\n    'libn': [20, 30, 40, 50, 60, 70],\n    'libm': [10, 20, 30, 40, 50, 60],\n    'libl': [15, 25, 35, 45, 55, 65],\n    'libk': [20, 30, 40, 50, 60, 70],\n    'libj': [10, 20, 30, 40, 50, 60],\n    'libi': [15, 25, 35, 45, 55, 65],\n    'libh': [20, 30, 40, 50, 60, 70],\n    'libg': [10, 20, 30, 40, 50, 60],\n    'libf': [15, 25, 35, 45, 55, 65],\n    'libe': [20, 30, 40, 50, 60, 70],\n    'libd': [10, 20, 30, 40, 50, 60],\n    'libc': [15, 25, 35, 45, 55, 65],\n    'libb': [20, 30, 40, 50, 60, 70],\n    'liba': [10, 20, 30, 40, 50, 60],\n    'libz': [15, 25, 35, 45, 55, 65],\n    'liby': [20, 30, 40, 50, 60, 70],\n    'libx': [10, 20, 30, 40, 50, 60],\n    'libw': [15, 25, 35, 45, 55, 65],\n    'libv': [20, 30, 40, 50, 60, 70],\n    'libu': [10, 20, 30, 40, 50, 60],\n    'libt': [15, 25, 35, 45, 55, 65],\n    'libs': [20, 30, 40, 50, 60, 70],\n    'libr': [10, 20, 30, 40, 50, 60],\n    'libq': [15, 25, 35, 45, 55, 65],\n    'libp': [20, 30, 40, 50, 60, 70],\n    'libo': [10, 20, 30, 40, 50, 60],\n    'libn': [15, 25, 35, 45, 55, 65],\n    'libm': [20, 30, 40, 50, 60, 70],\n    'libl': [10, 20, 30, 40, 50, 60],\n    'libk': [15, 25, 35, 45, 55, 65],\n    'libj': [20, 30, 40, 50, 60, 70],\n    'libi': [10, 20, 30, 40, 50, 60],\n    'libh': [15, 25, 35, 45, 55, 65],\n    'libg': [20, 30, 40, 50, 60, 70],\n    'libf': [10, 20, 30, 40, 50, 60],\n    'libe': [15, 25, 35, 45, 55, 65],\n    'libd': [20, 30, 40, 50, 60, 70],\n    'libc': [10, 20, 30, 40, 50, 60],\n    'libb': [15, 25, 35, 45, 55, 65],\n    'liba': [20, 30, 40, 50, 60, 70],\n    'libz': [10, 20, 30, 40, 50, 60],\n    'liby': [15, 25, 35, 45, 55, 65],\n    'libx': [20, 30, 40, 50, 60, 70],\n    'libw': [10, 20, 30, 40, 50, 60],\n    'libv': [15, 25, 35, 45, 55, 65],\n    'libu': [20, 30, 40, 50, 60, 70],\n    'libt': [10, 20, 30, 40, 50, 60],\n    'libs': [15, 25, 35, 45, 55, 65],\n    'libr': [20, 30, 40, 50, 60, 70],\n    'libq': [10, 20, 30, 40, 50, 60],\n    'libp': [15, 25, 35, 45, 55, 65],\n    'libo': [20, 30, 40, 50, 60, 70],\n    'libn': [10, 20, 30, 40, 50, 60],\n    'libm': [15, 25, 35, 45, 55, 65],\n    'libl': [20, 30, 40, 50, 60, 70],\n    'libk': [10, 20, 30, 40, 50, 60],\n    'libj': [15, 25, 35, 45, 55, 65],\n    'libi': [20, 30, 40, 50, 60, 70],\n    'libh': [10, 20, 30, 40, 50, 60],\n    'libg': [15, 25, 35, 45, 55, 65],\n    'libf': [20, 30, 40, 50, 60, 70],\n    'libe': [10, 20, 30, 40, 50, 60],\n    'libd': [15, 25, 35, 45, 55, 65],\n    'libc': [20, 30, 40, 50, 60, 70],\n    'libb': [10, 20, 30, 40, 50, 60],\n    'liba': [15, 25, 35, 45, 55, 65],\n    'libz': [20, 30, 40, 50, 60, 70],\n    'liby': [10, 20, 30, 40, 50, 60],\n    'libx': [15, 25, 35, 45, 55, 65],\n    'libw': [20, 30, 40, 50, 60, 70],\n    'libv': [10, 20, 30, 40, 50, 60],\n    'libu': [15, 25, 35, 45, 55, 65],\n    'libt': [20, 30, 40, 50, 60, 70],\n    'libs': [10, 20, 30, 40, 50, 60],\n    'libr': [15, 25, 35, 45, 55, 65],\n    'libq': [20, 30, 40, 50, 60, 70],\n    'libp': [10, 20, 30, 40, 50, 60],\n    'libo': [15, 25, 35, 45, 55, 65],\n    'libn': [20, 30, 40, 50, 60, 70],\n    'libm': [10, 20, 30, 40, 50, 60],\n    'libl': [15, 25, 35, 45, 55, 65],\n    'libk': [20, 30, 4"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Llama2', 'Mistral']\nscores = {\n    'Random': [5.52, 5.53, 5.83, 5.54, 5.84],\n    'Uniform': [5.52, 5.53, 5.83, 5.54, 5.84],\n    'G2S': [5.52, 5.53, 5.83, 5.54, 5.84],\n    'S2G': [5.52, 5.53, 5.83, 5.54, 5.84],\n    'ClusterClip': [7.08, 6.81, 6.75, 6.57, 6.9]\n}\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot each category's scores\nfor i, (category, scores) in enumerate(scores.items()):\n    ax.bar(range(len(categories)), scores, bottom=np.sum(scores[:i], axis=0), color=colors[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('MT-Bench Score')\nax.set_title('MT-Bench Score Comparison')\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([100, 1000])\ny1 = np.array([49.98, 49.63])\ny2 = np.array([51.05, 50.74])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Random Sampling', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='ClusterClip', color='orange', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\nax.set_title('Comparison of Different Sampling Techniques')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([1.0, 1.8, 2.6, 3.3, 4.6])\ny2 = np.array([1.0, 1.0, 1.9, 2.9, 3.4])\ny3 = np.array([1.0, 1.0, 1.6, 2.7, 2.8])\ny4 = np.array([1.0, 1.0, 1.6, 2.9, 2.8])\ny5 = np.array([1.0, 1.0, 1.6, 2.9, 2.8])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot the data with different colors and styles\nax.bar(x - 0.2, y1, width=0.2, color='pink', label='0%', edgecolor='black')\nax.bar(x, y2, width=0.2, color='orange', label='50%', edgecolor='black')\nax.bar(x + 0.2, y3, width=0.2, color='green', label='4:8', edgecolor='black')\nax.bar(x - 0.2, y4, width=0.2, color='cyan', label='6:8', edgecolor='black')\nax.bar(x, y5, width=0.2, color='purple', label='7:8', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Speedup')\nax.set_ylabel('Perturbation')\nax.set_title('Perturbation vs Speedup')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'CL-7b': [40, 20, 10, 30, 20],\n    'CL-13b': [30, 20, 10, 20, 10],\n    'CL-34b': [20, 10, 10, 10, 10],\n    'DS-6.7b': [60, 50, 40, 30, 20],\n    'DS-33b': [50, 40, 30, 20, 10],\n    'SC': [70, 60, 50, 40, 30]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define colors for each bar\ncolors = ['green', 'blue', 'red', 'purple', 'orange', 'cyan']\n\n# Plot bars with different styles\nfor i, (label, values) in enumerate(data.items()):\n    ax.bar(range(len(values)), values, color=colors[i], label=label, alpha=0.7, edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Test Cases')\nax.set_ylabel('Accuracy')\nax.set_title('LeetCode, DS-6.7b')\nax.set_xticks(range(len(values)))\nax.set_xticklabels(['Correct', 'Counterfeit (Test-Passing)', 'Counterfeit (Test-Failing)', 'Confused (Test-Failing)', 'Confused (Test-Passing)'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nrecost_wins = [53, 80, 116, 99, 179]\ntie_wins = [6, 33, 49, 50, 23]\nalpacawins_wins = [21, 67, 53, 103, 98]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars\nbars1 = ax.bar(index, recost_wins, bar_width, label='Recost (1% wins)', color='#FF5733')\nbars2 = ax.bar(index + bar_width, tie_wins, bar_width, label='Tie', color='#FFC300')\nbars3 = ax.bar(index + 2 * bar_width, alpacawins_wins, bar_width, label='Alpaca wins', color='#1E90FF')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Model')\nax.set_ylabel('Wins')\nax.set_title('Comparison of Model Wins')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+', 'Max', 'STARE']\nnon_aggregate_values = [35.15, 26.86, 19.08, 22.09, 20.67, 17.06, 38.38, 58.99, 66.19, 62.94]\naggregate_values = [36.63, 23.9, 26.38, 17.06, 58.99, 66.19, 42.5, 62.94, 48.38, 42.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the bar width and positions\nbar_width = 0.35\nindex = np.arange(len(categories))\n\n# Plot the bars for non-aggregated data\nbars_non_agg = ax.bar(index - bar_width/2, non_aggregate_values, bar_width, label='Non-Aggregate', color='tab:blue')\n\n# Plot the bars for aggregated data\nbars_agg = ax.bar(index + bar_width/2, aggregate_values, bar_width, label='Aggregate', color='tab:orange')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('FPR@90TPR')\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\nax.set_xticks(index)\nax.set_xticklabels(categories, rotation=45)\nax.legend()\n\n# Add a horizontal line at y=30\nax.axhline(y=30, color='gray', linestyle='--')\n\n# Add annotations for better readability\nfor bar in bars_non_agg:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\nfor bar in bars_agg:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [140, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1, 1, 1, 1, 1]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nx = np.array([5, 10, 20])\ny1 = np.array([66.3, 61.9, 53.8])\ny2 = np.array([10.1, 13.6, 13.7])\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Plot the data with different colors and styles\nbars1 = ax.bar(x - 0.2, y1, width=0.4, color='tab:blue', label='Truthful Recall')\nbars2 = ax.bar(x + 0.2, y2, width=0.4, color='tab:red', label='Misleading Recall')\n\n# Add labels and title\nax.set_xlabel('Misleading:Truthful')\nax.set_ylabel('Score')\nax.set_title('Misleading vs Truthful Recall Scores')\nax.set_xticks(x)\nax.set_xticklabels(['2:0', '2:1', '2:2'])\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SCIQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComQC', 'ComQC2.0', 'ComQC3.0', 'ComQC4.0', 'ComQC5.0', 'ComQC6.0', 'ComQC7.0', 'ComQC8.0', 'ComQC9.0', 'ComQC10.0', 'ComQC11.0', 'ComQC12.0', 'ComQC13.0', 'ComQC14.0', 'ComQC15.0', 'ComQC16.0', 'ComQC17.0', 'ComQC18.0', 'ComQC19.0', 'ComQC20.0', 'ComQC21.0', 'ComQC22.0', 'ComQC23.0', 'ComQC24.0', 'ComQC25.0', 'ComQC26.0', 'ComQC27.0', 'ComQC28.0', 'ComQC29.0', 'ComQC30.0', 'ComQC31.0', 'ComQC32.0', 'ComQC33.0', 'ComQC34.0', 'ComQC35.0', 'ComQC36.0', 'ComQC37.0', 'ComQC38.0', 'ComQC39.0', 'ComQC40.0', 'ComQC41.0', 'ComQC42.0', 'ComQC43.0', 'ComQC44.0', 'ComQC45.0', 'ComQC46.0', 'ComQC47.0', 'ComQC48.0', 'ComQC49.0', 'ComQC50.0', 'ComQC51.0', 'ComQC52.0', 'ComQC53.0', 'ComQC54.0', 'ComQC55.0', 'ComQC56.0', 'ComQC57.0', 'ComQC58.0', 'ComQC59.0', 'ComQC60.0', 'ComQC61.0', 'ComQC62.0', 'ComQC63.0', 'ComQC64.0', 'ComQC65.0', 'ComQC66.0', 'ComQC67.0', 'ComQC68.0', 'ComQC69.0', 'ComQC70.0', 'ComQC71.0', 'ComQC72.0', 'ComQC73.0', 'ComQC74.0', 'ComQC75.0', 'ComQC76.0', 'ComQC77.0', 'ComQC78.0', 'ComQC79.0', 'ComQC80.0', 'ComQC81.0', 'ComQC82.0', 'ComQC83.0', 'ComQC84.0', 'ComQC85.0', 'ComQC86.0', 'ComQC87.0', 'ComQC88.0', 'ComQC89.0', 'ComQC90.0', 'ComQC91.0', 'ComQC92.0', 'ComQC93.0', 'ComQC94.0', 'ComQC95.0', 'ComQC96.0', 'ComQC97.0', 'ComQC98.0', 'ComQC99.0', 'ComQC100.0']\ndelta_acc_values = [-3.5, -2.5, -2.0, -1.5, -1.0, -0.5, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different colors for different DeltaAcc values\nfor i, delta_acc in enumerate(delta_acc_values):\n    if delta_acc < -1:\n        color = 'blue'\n    elif delta_acc <= 1:\n        color = 'orange'\n    else:\n        color = 'green'\n    \n    ax.bar(models[i], delta_acc, color=color)\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('\u0394Acc (with rules)')\nax.set_title('Model = Vicuna')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([40, 50, 60, 70, 80, 90, 100])\ny1 = np.array([48.1, 57.2, 64.9, 72.3, 79.1, 54.3, 40])\ny2 = np.array([56.0, 62.2, 64.4, 66.4, 67.6, 58.0, 40])\ny3 = np.array([75.6, 73.6, 71.1, 63.6, 84.4, 66.7, 40])\ny4 = np.array([89.6, 83.2, 86.3, 83.6, 88.7, 86.9, 40])\ny5 = np.array([88.0, 83.1, 82.0, 80.4, 88.7, 83.8, 40])\ny6 = np.array([72.0, 71.0, 70.4, 70.0, 79.2, 74.3, 40])\ny7 = np.array([76.8, 71.0, 70.0, 70.0, 79.2, 74.3, 40])\ny8 = np.array([72.0, 71.0, 70.0, 70.0, 79.2, 74.3, 40])\ny9 = np.array([72.0, 71.0, 70.0, 70.0, 79.2, 74.3, 40])\ny10 = np.array([72.0, 71.0, 70.0, 70.0, 79.2, 74.3, 40])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot data\nax.bar(x, y1, color='lightcoral', label='MedMCQA')\nax.bar(x, y2, bottom=y1, color='lightsalmon', label='MedQA (USMLE)')\nax.bar(x, y3, bottom=y1 + y2, color='salmon', label='MMLU Anatomy')\nax.bar(x, y4, bottom=y1 + y2 + y3, color='darkorange', label='MMLU Clinical knowledge')\nax.bar(x, y5, bottom=y1 + y2 + y3 + y4, color='orangered', label='MMLU College biology')\nax.bar(x, y6, bottom=y1 + y2 + y3 + y4 + y5, color='tomato', label='MMLU Medical genetics')\nax.bar(x, y7, bottom=y1 + y2 + y3 + y4 + y5 + y6, color='coral', label='MMLU Professional medicine')\nax.bar(x, y8, bottom=y1 + y2 + y3 + y4 + y5 + y6 + y7, color='indianred', label='MMLU Medicine')\nax.bar(x, y9, bottom=y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8, color='firebrick', label='GPT-4')\nax.bar(x, y10, bottom=y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8 + y9, color='maroon', label='Gemini Pro')\n\n# Set labels and title\nax.set_xlabel('Dataset')\nax.set_ylabel('Performance Score (%)')\nax.set_title('Comparison of Different Models on Various Datasets')\nax.set_xticks(x)\nax.set_xticklabels(['LSTM-7/31b', 'Zephyr-7/31b', 'Qwen-7/31b', 'Qwen-7/31b', 'Qwen-7/31b', 'Qwen-7/31b', 'Qwen-7/31b', 'Qwen-7/31b', 'Qwen-7/31b', 'Qwen-7/31b'], rotation=45)\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Categories and their values for two different groups\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFG', 'AFH', 'AFI', 'AFIP', 'AFPK', 'AFP', 'AFPR', 'AFSC', 'AFSL', 'AFS', 'AFTH', 'AFVC', 'AFVT', 'DAH', 'IC', 'SS']\ngroup1_values = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120]\ngroup2_values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with customized colors and styles\nbars1 = ax.bar(categories, group1_values, color='royalblue', label='GPT-3.5-Turbo')\nbars2 = ax.bar(categories, group2_values, bottom=group1_values, color='orange', label='GPT-4')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Two Groups Across Different Categories')\nax.legend()\n\n# Add value labels on top of each bar\nfor bar in bars1 + bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 2), ha='center', va='bottom')\n\n# Set x-axis tick rotation for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([3, 5, 7, 10])\ny1 = np.array([-4.2, -6.5, -8.9, -10.2])\ny2 = np.array([-3.8, -5.1, -7.5, -8.8])\ny3 = np.array([-4.5, -6.8, -9.2, -10.5])\ny4 = np.array([-4.0, -6.3, -8.7, -10.0])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='LLAMA-Default', color='pink', linestyle='--', marker='o')\nax.plot(x, y2, label='LLAMA-HAG', color='red', linestyle='-', marker='s')\nax.plot(x, y3, label='Vicuna-Default', color='lightblue', linestyle='-.', marker='^')\nax.plot(x, y4, label='Vicuna-HAG', color='darkblue', linestyle=':', marker='*')\n\n# Set labels and title\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\nax.set_title('Taboo')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nvalues = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage (%)')\nax.set_title('Human Study')\n\n# Customize the grid\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['HH', 'Reddit', 'IMDB', 'AVG']\nwin_values = [22, 25, 30, 26]\ntie_values = [50, 40, 50, 50]\nlose_values = [28, 35, 60, 35]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#FF4500', '#FF69B4', '#FFD700', '#FFA500']\n\n# Plot the data\nbars = ax.bar(categories, win_values, color=colors[0], label='Win')\nax.bar(categories, tie_values, bottom=win_values, color=colors[1], label='Tie')\nax.bar(categories, lose_values, bottom=[sum(x) for x in zip(win_values, tie_values)], color=colors[2], label='Lose')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('COPR v.s. Golden (Human Eval)', fontsize=14, fontweight='bold')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Add legend\nax.legend(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Accuracy', 'Unfairness']\nmovielens_data = [np.array([32, 34, 35]), np.array([10, 11, 12])]\ntenrec_data = [np.array([18, 19, 20]), np.array([10, 11, 12])]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot for Movielens dataset\nfor i, data in enumerate(movielens_data):\n    axes[0].bar(categories, data, color=plt.cm.tab10(i), alpha=0.7)\naxes[0].set_title('Movielens')\naxes[0].set_ylabel('Score')\n\n# Plot for Tenrec dataset\nfor i, data in enumerate(tenrec_data):\n    axes[1].bar(categories, data, color=plt.cm.tab10(i), alpha=0.7)\naxes[1].set_title('Tenrec')\naxes[1].set_ylabel('Score')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\nmethods = ['ImageNet-1k', 'PAC-FNO', 'PAC-FNO']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nbars = ax.bar(resolutions, accuracies, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Accuracy (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Add a horizontal line at y=80\nax.axhline(y=80, color='black', linestyle='--')\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom')\n\n# Customize the legend\nax.legend(['ImageNet-1k', 'PAC-FNO', 'PAC-FNO'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Level 1', 'Level 2', 'Level 4']\nvalues = [50.0, 50.0, 50.0]\nsub_values = [\n    [30.0, 22.0, 16.8],\n    [28.0, 20.6, 16.8],\n    [22.9, 20.6, 16.8]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Define colors for each bar\ncolors = ['#F7DC6F', '#ADD8E6', '#FF6347']\n\n# Plot bars for each category\nfor i, (category, value) in enumerate(zip(categories, values)):\n    ax.barh(category, value, color=colors[i], height=0.5, label=f'{category} ({value})')\n\n# Add sub-values as text annotations\nfor i, (category, sub_value) in enumerate(zip(categories, sub_values)):\n    for j, (val, color) in enumerate(zip(sub_value, colors)):\n        ax.text(val + 0.5, i, f'{val}', va='center', ha='left', color=color)\n\n# Set labels and title\nax.set_xlabel('Uploads/PL/CoTTA')\nax.set_title('Uploads by Level and Sub-Category')\n\n# Add legend\nax.legend(title='Legend')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nx = np.arange(len(categories))\ny1 = [39.4, 32.84, 26.82]\ny2 = [35.18, 33.58, 30.84]\ny3 = [30, 28.0, 24.27]\ny4 = [22.4, 22, 22]\ny5 = [20.84, 20, 16]\ny6 = [19.66, 19, 14]\ny7 = [18.6, 12, 10]\ny8 = [17, 9, 7]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with different colors and styles\nbars1 = ax.bar(x - 0.3, y1, width=0.1, color='tab:orange', label='Category 1')\nbars2 = ax.bar(x - 0.2, y2, width=0.1, color='tab:blue', label='Category 2')\nbars3 = ax.bar(x - 0.1, y3, width=0.1, color='tab:green', label='Category 3')\nbars4 = ax.bar(x + 0.0, y4, width=0.1, color='tab:red', label='Category 4')\nbars5 = ax.bar(x + 0.1, y5, width=0.1, color='tab:purple', label='Category 5')\nbars6 = ax.bar(x + 0.2, y6, width=0.1, color='tab:brown', label='Category 6')\nbars7 = ax.bar(x + 0.3, y7, width=0.1, color='tab:pink', label='Category 7')\nbars8 = ax.bar(x + 0.4, y8, width=0.1, color='tab:cyan', label='Category 8')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Reward Values')\nax.set_title('Reward Values by Categories')\nax.set_xticks(x)\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Cleaning / Laundry', 'Crafting/ Knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/ Renovation', 'Household Management', 'Scooter Mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(12.0, 8.0))\n\n# Plot the bar chart with enhanced aesthetics\nbars = plt.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval + 100, int(yval), ha='center', va='bottom', fontsize=10)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Profession', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Videos', fontsize=12, fontweight='bold')\nplt.title('Number of Videos by Profession', fontsize=14, fontweight='bold')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Greeting', 'Request', 'Criticism', 'Apology', 'Persuasion', 'Thanking', 'Leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Define colors for the bars\ncolors = ['#FF6F61', '#88B04B', '#FFD347', '#DAF7A6', '#FF9F40', '#7DCEA0', '#FFB6C1']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bar chart with synthetic data\nbars_synthetic = ax.bar(categories, synthetic_data, color=colors, label='Synthetic data')\n\n# Plot the bar chart with human-authored data\nbars_human = ax.bar(categories, human_authored_data, bottom=synthetic_data, color=[c for c in colors if c != '#FF6F61'], label='Human-authored data')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.legend()\n\n# Add value labels on top of each bar\nfor bar in bars_synthetic + bars_human:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.0f}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'tiny', 'substantial', 'specific', 'large', 'medium', 'smaller', 'tall', 'short', 'tall', 'taller', 'tallest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest', 'tiniest"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Convertible', 'Coupe', 'Sedan', 'SUV', 'Truck']\nvalues = [0.15, 0.35, 0.25, 0.4, 0.3]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, values, color=['yellow', 'green', 'purple', 'blue', 'orange'])\n\n# Add labels and title\nax.set_xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_ylabel('Probability of Improvement')\n\n# Add a legend\nax.legend(['Baseline'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nvalues = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nbars = ax.bar(emotions, values, color='darkred')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Emotion', fontsize=12)\nax.set_ylabel('Frequency (%)', fontsize=12)\nax.set_title('Emotion Frequency Distribution', fontsize=14, fontweight='bold')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideo_counts = [450, 300, 500, 600, 700, 800]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with improved aesthetics\nbars = ax.bar(professions, video_counts, color=['red', 'orange', 'yellow', 'green', 'cyan', 'blue'], edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, int(yval), ha='center', va='bottom')\n\n# Set title and labels with enhanced font sizes and styles\nax.set_title('Number of Videos by Profession', fontsize=16, fontweight='bold')\nax.set_xlabel('Profession', fontsize=14)\nax.set_ylabel('Number of Videos', fontsize=14)\n\n# Customize the x-axis tick labels\nax.set_xticklabels(professions, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nus_values = [37.4, 5.2, 1.6, 49.8, 1.1, 1.4, 1.1]\nchina_values = [1.1, 3.2, 1.1, 1.1, 1.1, 1.1, 1.1]\neu_values = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1]\nbrazil_values = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1]\nindia_values = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the width of each bar\nbar_width = 0.15\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for each country\nbars_us = ax.bar(index, us_values, bar_width, label='US', color='#FF0000')\nbars_china = ax.bar(index + bar_width, china_values, bar_width, label='China', color='#0000FF')\nbars_eu = ax.bar(index + 2 * bar_width, eu_values, bar_width, label='EU', color='#FFFF00')\nbars_brazil = ax.bar(index + 3 * bar_width, brazil_values, bar_width, label='Brazil', color='#00FF00')\nbars_india = ax.bar(index + 4 * bar_width, india_values, bar_width, label='India', color='#FFA500')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\nax.set_title('Economic Indicators', fontsize=14, fontweight='bold')\nax.set_xticks(index + 2 * bar_width)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars_us)\nadd_value_labels(bars_china)\nadd_value_labels(bars_eu)\nadd_value_labels(bars_brazil)\nadd_value_labels(bars_india)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [55, 45, 35, 25, 15, 5]\ngood = [40, 30, 20, 10, 5, 0]\nmoderate = [25, 15, 10, 5, 0, 0]\npoor = [10, 5, 5, 0, 0, 0]\nvery_poor = [5, 0, 0, 0, 0, 0]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the width of each bar\nbar_width = 0.8\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(cities))\n\n# Plot the bars\nbars_excellent = ax.bar(index, excellent, bar_width, label='Excellent', color='#FF6347')\nbars_good = ax.bar(index + bar_width, good, bar_width, label='Good', color='#FFA07A')\nbars_moderate = ax.bar(index + 2 * bar_width, moderate, bar_width, label='Moderate', color='#D3D3D3')\nbars_poor = ax.bar(index + 3 * bar_width, poor, bar_width, label='Poor', color='#ADD8E6')\nbars_very_poor = ax.bar(index + 4 * bar_width, very_poor, bar_width, label='Very Poor', color='#87CEEB')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Cities', fontsize=12)\nax.set_ylabel('Number of People', fontsize=12)\nax.set_title('Quality of Life in Cities', fontsize=14, fontweight='bold')\nax.set_xticks(index + 2 * bar_width)\nax.set_xticklabels(cities, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations on top of each bar\nfor i in range(len(cities)):\n    ax.text(i + 2 * bar_width, excellent[i] + 1, str(excellent[i]), ha='center', va='bottom', fontsize=10)\n    ax.text(i + 2 * bar_width, good[i] + 1, str(good[i]), ha='center', va='bottom', fontsize=10)\n    ax.text(i + 2 * bar_width, moderate[i] + 1, str(moderate[i]), ha='center', va='bottom', fontsize=10)\n    ax.text(i + 2 * bar_width, poor[i] + 1, str(poor[i]), ha='center', va='bottom', fontsize=10)\n    ax.text(i + 2 * bar_width, very_poor[i] + 1, str(very_poor[i]), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [0, 10, 20, 30, 40, 50, 60]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the x-axis limits and ticks\nax.set_xlim(-80, 80)\nax.set_xticks(np.arange(-80, 90, 20))\n\n# Set the y-axis limits and ticks\nax.set_ylim(0, 90)\nax.set_yticks(np.arange(0, 100, 10))\n\n# Set labels for axes\nax.set_xlabel('Difference (%)')\nax.set_ylabel('Semantic Category')\n\n# Set title\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Define colors for the bars\ncolors = ['#FF6347', '#FFD700', '#90EE90', '#ADD8E6', '#FFA07A', '#87CEEB', '#FFB6C1']\n\n# Plot the bar chart\nbars = ax.bar(categories, positive_differences, color=colors, label='Positive Differences')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, f'{yval}', ha='center', va='bottom')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.01]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart with customized colors and edge colors\nbars = ax.bar(emotions, frequencies, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\nax.set_title('Emotion Frequency Distribution')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.2f}', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['FMLP-Rec', 'Bert4Rec', 'SASRec', 'CasER', 'GRU4Rec']\nvalues = [19.7, 4.8, -8.5, -15.9, 19.7]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color='lightgrey', edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Yelp')\nax.set_title('Comparison of Categories on Yelp')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Patents Filed', 'Research Investment', 'Smartphone Usage', 'Internet Penetration']\nvalues1 = [270, 260, 250, 240]\nvalues2 = [230, 220, 210, 200]\nvalues3 = [190, 180, 170, 160]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars with different colors and patterns\nbars1 = ax.bar(categories, values1, color='red', hatch='*', label='Internet Penetration (%)')\nbars2 = ax.bar(categories, values2, bottom=values1, color='green', hatch='/', label='Smartphone Usage (%)')\nbars3 = ax.bar(categories, values3, bottom=[sum(x) for x in zip(values1, values2)], color='blue', hatch='\\\\', label='Research Investment (%)')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Categories with Different Patterns')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Greeting', 'Request', 'Criticism', 'Apology', 'Persuasion', 'Thanking', 'Leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color=colors, label='Synthetic data')\nax.bar(categories, human_authored_data, bottom=synthetic_data, color=[c for c in colors if c != '#1f77b4'], label='Human-authored data')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\ntime_0 = [0.4, 0.5, 0.3, 0.2, 0.6]\ntime_20 = [0.3, 0.4, 0.2, 0.1, 0.5]\ntime_40 = [0.2, 0.3, 0.1, 0.05, 0.4]\ntime_60 = [0.1, 0.2, 0.05, 0.02, 0.3]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with different colors and labels\nax.bar(categories, time_0, color='darkblue', label='Time 0')\nax.bar(categories, time_20, bottom=time_0, color='royalblue', label='Time 20')\nax.bar(categories, time_40, bottom=[sum(x) for x in zip(time_0, time_20)], color='skyblue', label='Time 40')\nax.bar(categories, time_60, bottom=[sum(x) for x in zip(time_0, time_20, time_40)], color='lightblue', label='Time 60')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\nax.set_title('Scores by Category Over Time')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nregions = ['West', 'East', 'South', 'North']\nco2_levels = [40.44, 54.46, 92.15, 65.49]\npm_levels = [11.59, 25.36, 32.84, 22.89]\nso2_levels = [17.38, 32.19, 48.23, 37.12]\nno2_levels = [39.63, 36.03, 96.03, 66.49]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define colors for each region\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot bars for CO2 levels\nbars_co2 = ax.bar(regions, co2_levels, color=colors[0], label='CO2 (ppm)', edgecolor='black')\n\n# Plot bars for PM levels\nbars_pm = ax.bar(regions, pm_levels, bottom=co2_levels, color=colors[1], label='PM (\u00b5g/m\u00b3)', edgecolor='black')\n\n# Plot bars for SO2 levels\nbars_so2 = ax.bar(regions, so2_levels, bottom=[sum(x) for x in zip(co2_levels, pm_levels)], color=colors[2], label='SO2 (\u00b5g/m\u00b3)', edgecolor='black')\n\n# Plot bars for NO2 levels\nbars_no2 = ax.bar(regions, no2_levels, bottom=[sum(x) for x in zip(co2_levels, pm_levels, so2_levels)], color=colors[3], label='NO2 (\u00b5g/m\u00b3)', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Regions')\nax.set_ylabel('Air Quality Metrics by Region')\nax.set_title('Air Quality Metrics by Region')\nax.set_xticks(range(len(regions)))\nax.set_xticklabels(regions)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars_co2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\nfor bar in bars_pm:\n    yval = bar.get_height() + sum([x for x in co2_levels])\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval - sum([x for x in co2_levels]), 2), ha='center', va='bottom')\n\nfor bar in bars_so2:\n    yval = bar.get_height() + sum([x for x in co2_levels]) + sum([x for x in pm_levels])\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval - sum([x for x in co2_levels]) - sum([x for x in pm_levels]), 2), ha='center', va='bottom')\n\nfor bar in bars_no2:\n    yval = bar.get_height() + sum([x for x in co2_levels]) + sum([x for x in pm_levels]) + sum([x for x in so2_levels])\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval - sum([x for x in co2_levels]) - sum([x for x in pm_levels]) - sum([x for x in so2_levels]), 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores_3_constraint_words = [-2.2, -2.3, -3.3, -3.2]\nscores_5_constraint_words = [-1.9, -1.7, -1.9, -1.9]\nscores_7_constraint_words = [-1.8, -1.6, -1.1, -1.1]\nscores_10_constraint_words = [-1.4, -1.4, -0.8, -0.8]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#ADD8E6']\n\n# Plot bars for each category\nbar_width = 0.2\nindex = np.arange(len(categories))\nbars1 = ax.bar(index, scores_3_constraint_words, bar_width, label='3 Constraint Words', color=colors[0])\nbars2 = ax.bar(index + bar_width, scores_5_constraint_words, bar_width, label='5 Constraint Words', color=colors[1])\nbars3 = ax.bar(index + 2 * bar_width, scores_7_constraint_words, bar_width, label='7 Constraint Words', color=colors[2])\nbars4 = ax.bar(index + 3 * bar_width, scores_10_constraint_words, bar_width, label='10 Constraint Words', color=colors[3])\n\n# Add labels and title\nax.set_xlabel('Scores by group and constraint word count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\nax.set_xticks(index + 1.5 * bar_width)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: GDP growth rates for different countries over several years\ncountries = ['USA', 'China', 'Germany', 'Brazil']\nyears = [2018, 2019, 2020, 2021]\ngdp_growth = [\n    [-0.5, -0.3, -0.4, -0.2],  # USA\n    [-0.7, -0.6, -0.5, -0.4],  # China\n    [-0.3, -0.2, -0.1, 0.0],   # Germany\n    [-0.6, -0.5, -0.4, -0.3]   # Brazil\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits and ticks\nax.set_xlim(-1.0, 0.0)\nax.set_xticks(np.arange(-1.0, 0.1, 0.2))\nax.set_xticklabels(['-1.0', '-0.8', '-0.6', '-0.4', '-0.2', '0.0'])\n\n# Set the y-axis limits and ticks\nax.set_ylim(0, 4)\nax.set_yticks(np.arange(0, 5, 1))\nax.set_yticklabels(['0%', '1%', '2%', '3%', '4%'])\n\n# Set the title of the chart\nax.set_title('Negative GDP Growth Rates by Country and Year', fontsize=14, fontweight='bold')\n\n# Set the labels for the x and y axes\nax.set_xlabel('GDP Growth Rate (%)', fontsize=12)\nax.set_ylabel('Year', fontsize=12)\n\n# Define colors for each country\ncolors = ['#FF6347', '#90EE90', '#ADD8E6', '#FFD700']\n\n# Plot the data with bars\nfor i, country in enumerate(countries):\n    ax.barh(years, gdp_growth[i], color=colors[i], label=country, edgecolor='black')\n\n# Add a legend to the chart\nax.legend(title='Country', loc='upper right', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define colors for each bar\ncolors = ['#FF6347', '#FFD700', '#90EE90', '#ADD8E6', '#FF4500', '#8B008B', '#FFA500']\n\n# Plot the bar chart\nbars = ax.bar(models, performance, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Human Study', fontsize=16, fontweight='bold')\nax.set_xlabel('Model', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\n\n# Customize the x-axis ticks\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [\n    [50, 30, 70, 50],\n    [20, 20, 40, 80],\n    [30, 30, 30, 75],\n    [15, 20, 20, 90]\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot the data\nbars = []\nfor i, category in enumerate(categories):\n    bar = ax.barh(range(len(values[i])), values[i], left=np.sum(values[:i], axis=0), color=colors[i], label=category)\n    bars.append(bar)\n\n# Add labels and title\nax.set_xlabel('Values')\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_yticks(np.arange(len(values[0])))\nax.set_yticklabels(['Cars', 'Buses', 'Bikes', 'Pedestrians'])\n\n# Add a legend\nax.legend(title='Transportation Mode')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_data = [\n    [85, 60, 45, 30, 20, 10],\n    [70, 55, 40, 25, 15, 5],\n    [60, 45, 30, 15, 5, 0],\n    [50, 35, 20, 10, 5, 0],\n    [40, 25, 10, 5, 0, 0],\n    [30, 15, 5, 0, 0, 0],\n    [20, 10, 0, 0, 0, 0]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FF6666', '#FFFF99']\n\n# Plot the stacked bar chart\nbottom = np.zeros(len(categories))\nfor i, data in enumerate(sales_data):\n    ax.bar(categories, data, bottom=bottom, color=colors[i], label=f'Product {chr(65 + i)} Sales')\n    bottom += data\n\n# Set labels and title\nax.set_xlabel('Product Categories')\nax.set_ylabel('Sales Units')\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations\nfor i, data in enumerate(sales_data):\n    for j, value in enumerate(data):\n        ax.text(j, sum(sales_data[:i+1][j]) - value/2, f'{value}', ha='center', va='center', fontsize=10, color='black')\n\n# Add legend\nax.legend(title='Legend')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [0.83, 0.6, 0.11]\nobserved_fgt = [0.944, 0.12, 0.00]\nfeature_embedding_distance = [0.75, 0.379, 0.367]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#6a5acd', '#add8e6', '#ff6347']\n\n# Plot the bars\nbars = ax.bar(categories, probing_fgt, color=colors[0], label='Probing FGT')\nax.bar(categories, observed_fgt, bottom=probing_fgt, color=colors[1], label='Observed FGT')\nax.bar(categories, feature_embedding_distance, bottom=[p + o for p, o in zip(probing_fgt, observed_fgt)], color=colors[2], label='Feature Embedding Distance')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Feature Embedding Distance (%)')\nax.set_title('Feature Embedding Distance by Categories')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '2', '3', '4', '5', '6']\nscores = [\n    [10, 8, 12, 10, 6, 8],\n    [11, 5, 10, 10, 12, 15],\n    [10, 8, 12, 10, 6, 8],\n    [10, 5, 10, 10, 12, 15],\n    [10, 5, 10, 10, 12, 15],\n    [10, 5, 10, 10, 12, 15]\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#90EE90', '#FFD700', '#FF6347', '#ADD8E6', '#FFA07A', '#87CEEB']\n\n# Plot bars for each category\nfor i, score in enumerate(scores):\n    ax.bar(categories, score, color=colors[i], label=f'Score {i+1}')\n\n# Set labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet', 'perl']\nreg_opt = [95, 85, 75, 65, 55, 45, 35]\nbio_opt = [80, 70, 60, 50, 40, 30, 20]\nloop_opt = [100, 90, 80, 70, 60, 50, 40]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles\nax.bar(categories, reg_opt, color='seagreen', label='RegOpt')\nax.bar(categories, bio_opt, bottom=reg_opt, color='gold', label='BIOPt')\nax.bar(categories, loop_opt, bottom=[x + y for x, y in zip(reg_opt, bio_opt)], color='royalblue', label='LoopOpt')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Optimization Techniques')\n\n# Add grid lines\nax.yaxis.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlanguages = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance_improvement = [3.5, 2.3, 4.4, 1.3, 0.7]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bars with customized styles\nbars = ax.bar(languages, performance_improvement, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set labels and title\nax.set_xlabel('Model with Language', fontsize=12)\nax.set_ylabel('Model Performance Improvement [%]', fontsize=12)\nax.set_title('Model Performance Improvement by Language', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(languages)))\nax.set_xticklabels(languages, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add a legend\nlegend_labels = ['EN', 'DE', 'FR', 'IT', 'ES']\nax.legend(bars, legend_labels, title=\"Language\", loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nfiscal_quarters = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, 4.6]\nnasdaq_index = [-0.6, -0.8, -1.0, -1.2, -1.4]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different colors and styles\nax.plot(fiscal_quarters, dow_jones_index, color='green', linestyle='-', marker='o', label='Dow Jones Index')\nax.plot(fiscal_quarters, nasdaq_index, color='orange', linestyle='--', marker='s', label='Nasdaq Index')\n\n# Set labels and title\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\nax.set_title('Comparison of Dow Jones and Nasdaq Indices Over Fiscal Quarters')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add a legend to explain the lines\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([17, 19, 22.2, 26.8, 30.2, 34.6, 38.4])\ny = np.array([39.4, 35.18, 34.06, 32.84, 30.84, 28.0, 24.27])\ncategories = ['E16.6', 'L26.8', 'D19.7', 'L22.2', 'L22.2', 'L22.2', 'L22.2']\ncolors = ['pink', 'lightblue', 'lightgreen', 'orange', 'purple', 'brown', 'grey']\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with bars\nbars = ax.bar(x, y, color=colors)\n\n# Add category labels on top of each bar\nfor bar, category in zip(bars, categories):\n    height = bar.get_height()\n    ax.annotate(category,\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Series Labels')\nax.set_ylabel('Reward Values')\nax.set_title('Rewards for Different Series')\n\n# Set x-ticks\nax.set_xticks(x)\nax.set_xticklabels(categories, rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['Misleading:2:0', 'Misleading:3:0', 'Misleading:4:0', 'Misleading:5:0']\ntruthful_recall = [30.1, 34, 43.7, 46.3]\nmisleading_recall = [20, 19.4, 20, 53.8]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\n\n# Plot the bars\nax.bar(r1, truthful_recall, color='tab:blue', width=bar_width, edgecolor='grey', label='Truthful Recall')\nax.bar(r2, misleading_recall, color='tab:orange', width=bar_width, edgecolor='grey', label='Misleading Recall')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Misleading:Truth', fontweight='bold')\nax.set_ylabel('Recall', fontweight='bold')\nax.set_title('Misleading:Truth = 2:0', fontweight='bold')\nax.set_xticks([r + bar_width / 2 for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Environmental impact by sector\nsectors = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year_impact = [-1200, -800, -1400, -1600]\nprevious_year_impact = [-1300, -900, -1500, -1700]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the data with horizontal bars and shaded patterns\nbars = ax.barh(sectors, current_year_impact, color=colors[0], label='Current Year')\nax.barh(sectors, previous_year_impact, left=current_year_impact, color=colors[1], label='Previous Year')\n\n# Add grid lines for better readability\nax.xaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Environmental Impact (in thousands of metric tons)')\nax.set_title('Environmental Impact by Sector')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 14, 16, 18, 20]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nbars = ax.bar(cities, temperatures, color='skyblue')\n\n# Add title and labels\nax.set_title('Average City Temperatures')\nax.set_xlabel('City')\nax.set_ylabel('Average Temperature (\u00b0C)')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [150, 140, 160, 170]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different styles\nax.bar(regions, emissions_2020, color='darkred', label='2020 Emissions')\nax.bar(regions, emissions_2021, bottom=emissions_2020, color='royalblue', label='2021 Emissions')\n\n# Set labels and title\nax.set_xlabel('Regions')\nax.set_ylabel('Annual Pollution Emission Reductions')\nax.set_title('Annual Pollution Emission Reductions')\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5']\nresponses = [\n    [26.0, 10.0, 17.0, 10.0, 10.0],\n    [32.0, 10.0, 29.0, 15.0, 15.0],\n    [37.0, 22.0, 35.0, 32.0, 26.0],\n    [33.0, 19.0, 15.0, 14.0, 40.0],\n    [35.0, 10.0, 10.0, 13.0, 21.0]\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FFB6C1', '#90EE90', '#ADD8E6', '#FFD700', '#FFA07A']\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh(category, responses[i], color=colors[i], label=f'Category {i+1}')\n\n# Set labels and title\nax.set_xlabel('Percentage')\nax.set_title('Survey Responses by Question')\n\n# Add a legend\nax.legend(title='Legend')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of models for different numbers of super-families\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([0.95, 0.92, 0.88, 0.85, 0.82, 0.80, 0.78, 0.76, 0.74, 0.72])\n\n# Create a new figure with a specified size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with a solid line and markers\nplt.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Add a horizontal line at y=0.5 to indicate a threshold\nplt.axhline(y=0.5, color='r', linestyle='--', linewidth=1)\n\n# Set labels and title\nplt.xlabel('Top-10 super-families in training dataset')\nplt.ylabel('Accuracy')\nplt.title('Model Accuracy vs. Number of Super-Families')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores = [\n    [0.8, 0.6, 0.7, 0.9],\n    [0.5, 0.4, 0.3, 0.2],\n    [0.7, 0.6, 0.5, 0.4],\n    [0.9, 0.8, 0.7, 0.6]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for each category\ncolors = ['#4682B4', '#FFA500', '#ADD8E6', '#FFD700']\n\n# Plot the bar chart\nbars = ax.bar(categories, [np.mean(score) for score in scores], color=colors)\n\n# Add error bars to represent standard deviation\nfor i, bar in enumerate(bars):\n    yerr = np.std(scores[i])\n    ax.errorbar(categories[i], np.mean(scores[i]), yerr=yerr, fmt='o', color='black')\n\n# Set labels and title\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\nax.set_title('Taboo')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nlegend_labels = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nax.legend(bars, legend_labels, title=\"Legend\", loc=\"upper right\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\nca_recall = [46.3, 56.9, 53.8, 19.4]\nca_b_recall = [34, 34, 40, 27]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot bars for CaA Recall\nbars_ca = ax.bar(categories, ca_recall, color='blue', label='CaA Recall')\n\n# Plot bars for CaB Recall\nbars_cb = ax.bar(categories, ca_b_recall, bottom=ca_recall, color='green', label='CaB Recall')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Misleading Recall')\nax.set_title('Truthful: Misleading Recall = 2:0')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.7)\n\n# Add annotations for better readability\nfor bar in bars_ca:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nfor bar in bars_cb:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Convertible', 'Coupe', 'SUV', 'Sedan']\nvalues = [25, 20, 15, 10]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\ndisapprovals = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunbothered = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different colors and styles\nax.bar(emotions, disapprovals, color='red', label='Disapproval')\nax.bar(emotions, joy, bottom=disapprovals, color='orange', label='Joy')\nax.bar(emotions, relief, bottom=[d + j for d, j in zip(disapprovals, joy)], color='yellow', label='Relief')\nax.bar(emotions, gratitude, bottom=[d + j + r for d, j, r in zip(disapprovals, joy, relief)], color='green', label='Gratitude')\nax.bar(emotions, annoyance, bottom=[d + j + r + g for d, j, r, g in zip(disapprovals, joy, relief, gratitude)], color='cyan', label='Annoyance')\nax.bar(emotions, nervousness, bottom=[d + j + r + g + a for d, j, r, g, a in zip(disapprovals, joy, relief, gratitude, annoyance)], color='blue', label='Nervousness')\nax.bar(emotions, pride, bottom=[d + j + r + g + a + n for d, j, r, g, a, n in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness)], color='indigo', label='Pride')\nax.bar(emotions, sadness, bottom=[d + j + r + g + a + n + p for d, j, r, g, a, n, p in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness, pride)], color='violet', label='Sadness')\nax.bar(emotions, unbothered, bottom=[d + j + r + g + a + n + p + s for d, j, r, g, a, n, p, s in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], color='lightgrey', label='Unbothered')\nax.bar(emotions, amusement, bottom=[d + j + r + g + a + n + p + s + u for d, j, r, g, a, n, p, s, u in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unbothered)], color='darkgrey', label='Amusement')\n\n# Set labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency Metric 1 (%)')\nax.set_title('Emotion Frequency Distribution')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores_0 = [0.4, 0.3, 0.2, 0.5, 0.7]\nscores_20 = [0.6, 0.7, 0.8, 0.9, 0.8]\nscores_40 = [0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the chart\nax.set_title('Scores at Different Times')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(categories)\n\n# Plot the data\nbars = ax.bar(categories, scores_0, color='cyan', label='Score at Time 0')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(categories, scores_20, bottom=scores_0, color='orange', label='Score at Time 20')\nfor bar in bars:\n    yval = bar.get_height() + scores_0[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(categories, scores_40, bottom=[sum(x) for x in zip(scores_0, scores_20)], color='red', label='Score at Time 40')\nfor bar in bars:\n    yval = bar.get_height() + sum(x) for x in zip(scores_0, scores_20)\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Japan', 'Australia', 'Canada', 'Germany']\nvalues = [1600, 1700, 1500, 1900]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color='red')\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Total Energy Consumption (10^2 PJ)')\nax.set_title('Total Energy Consumption by Country')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 7, 24, 31, 8, 10]\nhuman_authored_data = [9, 16, 15, 11, 28, 16, 16]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the bar chart with different styles for each category\nfor i, (cat, syn, hum) in enumerate(zip(categories, synthetic_data, human_authored_data)):\n    ax.bar(i, syn, color=colors[i], label=f'{cat} (Synthetic)', alpha=0.7)\n    ax.bar(i, hum, bottom=syn, color=colors[i], hatch='///', label=f'{cat} (Human Authored)', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Synthetic and Human Authored Data')\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Beauty', 'Yelp', 'More']\nvalues = [5.1, 6, 19.7]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#4682B4', '#FFD700']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\nscores = [\n    [-3.2, -3.3, -3.2, -3.3],\n    [-2.2, -2.3, -2.2, -2.3],\n    [-1.9, -1.7, -1.9, -1.7],\n    [-0.8, -0.7, -0.6, -0.7]\n]\n\n# Define colors for each category\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#90EE90']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, [np.mean(score) for score in scores], color=colors)\n\n# Add error bars to represent standard deviation\nfor i, bar in enumerate(bars):\n    yerr = np.std(scores[i])\n    ax.errorbar(i, np.mean(scores[i]), yerr=yerr, fmt='o', color='black')\n\n# Set labels and title\nax.set_xlabel('Scores by group and constraint word count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.5)\n\n# Add annotations for clarity\nfor i, score in enumerate(scores):\n    avg_score = np.mean(score)\n    ax.annotate(f'{avg_score:.1f}', (i, avg_score), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny_train = np.array([0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3])\ny_test = np.array([0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y_train, label='Training', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y_test, label='Testing', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Number of Superfamilies in Training Dataset')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy on Different Numbers of Superfamilies')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nmanual_mapping = [50, 30, 40, 20, 70]\nllm_revision_wcot = [80, 60, 70, 40, 90]\nllm_revision_wcot = [60, 40, 50, 30, 80]\nverifner = [30, 20, 25, 10, 50]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, manual_mapping, color='pink', label='Manual Mapping')\nax.bar(categories, llm_revision_wcot, bottom=manual_mapping, color='orange', label='LLM-revision w/CoT')\nax.bar(categories, llm_revision_wcot, bottom=[x + y for x, y in zip(manual_mapping, llm_revision_wcot)], color='green', label='LLM-revision')\n\n# Add error bars\nerror_bars = [10, 5, 8, 3, 15]\nfor bar, error in zip(bars, error_bars):\n    ax.errorbar(bar.get_x() + bar.get_width() / 2, bar.get_height(), yerr=error, fmt='o', color='black')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Error correction rate (%)')\nax.set_title('GENIA')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [15.0, 10.0, 5.0, 10.0, 5.0, 10.0, 15.0]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(models, scores_a, color='skyblue', edgecolor='black', label='Score A (%)')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom')\n\n# Add a second y-axis for Score B\nax2 = ax.twinx()\nbars2 = ax2.bar(models, scores_b, color='salmon', edgecolor='black', alpha=0.7, label='Score B (%)')\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.0f}', ha='center', va='bottom')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Model', fontsize=12, fontweight='bold')\nax.set_ylabel('Score A (%)', fontsize=12, fontweight='bold')\nax.set_title('Human Study', fontsize=14, fontweight='bold')\n\n# Customize the legend\nlines, labels = ax.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax.legend(lines + lines2, labels + labels2, loc='upper left', fontsize=10)\n\n# Set y-axis limits and ticks\nax.set_ylim(0, 85)\nax.set_yticks(np.arange(0, 90, 10))\nax2.set_ylim(0, 20)\nax2.set_yticks(np.arange(0, 25, 5))\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\nax2.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET']\nmacro_f1_scores = [80, 85, 82, 88]\nparty_colors = ['blue', 'orange', 'red']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nbars = ax.bar(pheme, macro_f1_scores, color=party_colors)\n\n# Add labels and title\nax.set_xlabel('Pheme')\nax.set_ylabel('Macro F1-score')\nax.set_title('Macro F1-scores for Different Phemes')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.7)\n\n# Add annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['human', 'gpt4', 'gpt4-cot']\nsubcategories = ['O1', 'T1', 'P1']\nvalues = [\n    [500, 300, 200],\n    [700, 400, 300],\n    [800, 500, 400]\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the width of each bar\nbar_width = 0.25\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for each subcategory\nbars = []\nfor i, subcat in enumerate(subcategories):\n    bars.append(ax.bar(index + i * bar_width, values[i], bar_width, label=subcat))\n\n# Add labels and title\nax.set_xlabel('Role')\nax.set_ylabel('Count')\nax.set_title('Resonance Preference Plot for rich context')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_values = [20.4, 23.8, 14.3, 16.7, 7.1]\nbrainwave_values = [29.6, 28.1, 14.3, 38.1, 7.7]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define colors for the bars\ncolors = ['#FF5733', '#FFC300', '#D3D3D3', '#33FF57', '#3333FF']\n\n# Plot the first bar chart\nax.bar(categories, effort_values, color=colors, label='Effort')\n\n# Plot the second bar chart\nax.bar(categories, brainwave_values, bottom=effort_values, color=colors, alpha=0.7, label='Brainwave')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Eye Movement')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0])\ny1 = np.array([10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85])\ny2 = np.array([5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Ours', color='red', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Saliency-based Sampling', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_title('Comparison of Rate of Gain Change')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlanguages = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement_en = [3.5, 2.3, 4.4, 1.3, -0.7]\nimprovement_de = [2.3, 0.3, 3.4, 3.3, -2.7]\nimprovement_fr = [4.4, 2.0, 3.4, -3.3, -2.7]\nimprovement_it = [1.3, 1.0, 0.3, -2.7, -2.7]\nimprovement_es = [-0.7, -1.0, -3.4, -3.3, -2.7]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different colors and patterns\nax.bar(languages, improvement_en, color='royalblue', hatch='///', label='EN')\nax.bar(languages, improvement_de, bottom=improvement_en, color='darkred', hatch='\\\\', label='DE')\nax.bar(languages, improvement_fr, bottom=[sum(x) for x in zip(improvement_en, improvement_de)], color='darkorange', hatch='x', label='FR')\nax.bar(languages, improvement_it, bottom=[sum(x) for x in zip(improvement_en, improvement_de, improvement_fr)], color='gold', hatch='o', label='IT')\nax.bar(languages, improvement_es, bottom=[sum(x) for x in zip(improvement_en, improvement_de, improvement_fr, improvement_it)], color='green', hatch='*', label='ES')\n\n# Set labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Model Performance Improvement by Language')\nax.set_title('Model Performance Improvement by Language')\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-5, 5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Random', 'Ours', 'SOTA']\nvalues_random = [66.3, 61.9, 53.8]\nvalues_ours = [49.3, 45.7, 41.6]\nvalues_sota = [36.3, 31.5, 0]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars\nbars1 = ax.bar(index - bar_width, values_random, bar_width, label='Random', color='blue')\nbars2 = ax.bar(index, values_ours, bar_width, label='Ours', color='orange')\nbars3 = ax.bar(index + bar_width, values_sota, bar_width, label='SOTA', color='green')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Misleading')\nax.set_ylabel('Score')\nax.set_title('Truthful: Misleading = 2:0')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['1', '2', '3', '4', '5', '6']\nhuman_annotator_1 = [10, 20, 30, 40, 50, 60]\nhuman_annotator_2 = [15, 25, 35, 45, 55, 65]\nhuman_annotator_3 = [12, 22, 32, 42, 52, 62]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot bars for each category with different colors and patterns\nbars1 = ax.bar(categories, human_annotator_1, color='tab:purple', label='Human Labeling and Agreement Bias Checking 1')\nbars2 = ax.bar(categories, human_annotator_2, bottom=human_annotator_1, color='tab:orange', label='Human Labeling and Agreement Bias Checking 2')\nbars3 = ax.bar(categories, human_annotator_3, bottom=[sum(x) for x in zip(human_annotator_1, human_annotator_2)], color='tab:green', label='Human Labeling and Agreement Bias Checking 3')\n\n# Add labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xticks(categories)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 2), ha='center', va='bottom')\n\nadd_labels(bars1)\nadd_labels(bars2)\nadd_labels(bars3)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_scores = [54.9, 71.5, 79.2, 60.3, 54.5, 56.8, 92.6, 89.2, 83.3]\nbeam_scores = [38.3, 79.2, 60.3, 52.9, 54.5, 56.8, 92.6, 89.2, 83.3]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styles\nbar_width = 0.35\nindex = np.arange(len(models))\n\n# Plot contrastive search scores\nbars1 = ax.bar(index - bar_width/2, contrastive_scores, bar_width, label='Contrastive Search', color='tab:blue', edgecolor='black')\n\n# Plot beam search scores\nbars2 = ax.bar(index + bar_width/2, beam_scores, bar_width, label='Beam Search', color='tab:orange', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Performance Comparison by Model', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\nax.legend(fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate bars with their values\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Traffic Flow', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues1 = [150.0, 180.0, 90.0, 80.0]\nvalues2 = [2.5, 2.0, 1.5, 2.0]\nvalues3 = [60.0, 55.0, 70.0, 72.0]\nvalues4 = [80.0, 75.0, 90.0, 88.0]\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first dataset\naxes[0, 0].bar(categories, values1, color='orange')\naxes[0, 0].set_title('Dataset 1')\naxes[0, 0].set_xlabel('Categories')\naxes[0, 0].set_ylabel('Values')\n\n# Plot the second dataset\naxes[0, 1].bar(categories, values2, color='blue')\naxes[0, 1].set_title('Dataset 2')\naxes[0, 1].set_xlabel('Categories')\naxes[0, 1].set_ylabel('Values')\n\n# Plot the third dataset\naxes[1, 0].bar(categories, values3, color='green')\naxes[1, 0].set_title('Dataset 3')\naxes[1, 0].set_xlabel('Categories')\naxes[1, 0].set_ylabel('Values')\n\n# Plot the fourth dataset\naxes[1, 1].bar(categories, values4, color='purple')\naxes[1, 1].set_title('Dataset 4')\naxes[1, 1].set_xlabel('Categories')\naxes[1, 1].set_ylabel('Values')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['neutral', 'yellow high', 'green low', 'blue high', 'red low']\nvalues = [\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(range(len(values[i])), values[i], label=category, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('SAM Rating')\nax.set_ylabel('Color')\nax.set_title('Dominance')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([20, 30, 40, 50, 60, 70, 80, 90])\ny1 = np.array([10, 15, 20, 25, 30, 35, 40, 45])\ny2 = np.array([5, 10, 15, 20, 25, 30, 35, 40])\ny3 = np.array([2, 4, 6, 8, 10, 12, 14, 16])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, 'o-', label='Gaming Duration', color='darkgreen')\nax.plot(x, y2, 's--', label='Exercise Duration', color='darkblue')\nax.plot(x, y3, '^-.', label='Reading Duration', color='darkred')\n\n# Set labels and title\nax.set_xlabel('Duration (minutes)')\nax.set_ylabel('Activity')\nax.set_title('Daily Activity Durations')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Llama-70b (T2TT)', 'Llama-70b (S2TT)']\nbleu_scores = [18.5, 19.2]\nbless_scores = [21.3, 20.8]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot BLEU scores\nax.bar(categories, bleu_scores, color='skyblue', label='BLEU')\n\n# Plot BLESS scores\nax.bar(categories, bless_scores, bottom=bleu_scores, color='orange', label='BLEU')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Comparison of BLEU and BLESS Scores for Llama-70b Models')\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'AlphaBeta': [4.5, 4.2, 4.8, 4.3],\n    'z+': [4.1, 4.4, 4.7, 4.2],\n    'Gamma(\u03b3=0.05)': [4.3, 4.6, 4.9, 4.4],\n    'Gamma(\u03b3=0.1)': [4.2, 4.5, 4.8, 4.3]\n}\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each dataset with different colors and markers\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nmarkers = ['o', 's', '^', 'D']\n\nfor i, (key, values) in enumerate(data.items()):\n    ax.scatter(range(len(values)), values, color=colors[i], marker=markers[i], label=key)\n\n# Set labels and title\nax.set_xlabel('Sample Index')\nax.set_ylabel('Value')\nax.set_title('Comparison of Different Datasets')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\nvalues = [875, 850, 825, 800, 775]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='teal')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 10, round(yval, 2), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Execution Accuracy')\nax.set_title('Execution Accuracy by Category')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'DENSE (ref)': [0.88, 0.87, 0.83],\n    'Joint Multimodal Framework (ours)': [6.91, 9.33, 9.00],\n    'CINE': [0.88, 0.87, 0.83]\n}\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor i, (label, values) in enumerate(data.items()):\n    ax.boxplot(values, positions=[i], widths=0.6, patch_artist=True, boxprops=dict(facecolor='lightblue', edgecolor='black'), medianprops=dict(color='red'))\n\n# Set labels and title\nax.set_xlabel('Region Classification Accuracy')\nax.set_ylabel('Slice Mean Error (ms)')\nax.set_title('Region Classification Accuracy')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Customize ticks\nax.set_xticks(range(len(data)))\nax.set_xticklabels(list(data.keys()), rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'w/o att': [3.2, 4.1, 2.9, 3.5],\n    'w/o DP': [2.8, 3.7, 2.6, 3.3],\n    '1xQ': [4.5, 5.4, 4.3, 4.9],\n    '20xQ': [12.1, 13.2, 11.9, 12.5],\n    '200xQ': [18.3, 19.4, 18.1, 18.7]\n}\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data using box plots\nboxplots = ax.boxplot(data.values(), patch_artist=True)\n\n# Customize the colors of the boxes\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\nfor patch, color in zip(boxplots['boxes'], colors):\n    patch.set_facecolor(color)\n    patch.set_alpha(0.7)\n\n# Add horizontal lines to indicate thresholds\nthresholds = [5, 10, 15]\nfor threshold in thresholds:\n    ax.axhline(y=threshold, color='red', linestyle='--')\n\n# Set labels and title\nax.set_xlabel('Dataset')\nax.set_ylabel('Z-Score')\nax.set_title('Comparison of Z-Scores Across Different Datasets')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [\n    [1.2, 1.3, 1.4, 1.5, 1.6, 1.7],\n    [1.8, 1.9, 2.0, 2.1, 2.2, 2.3],\n    [2.4, 2.5, 2.6, 2.7, 2.8, 2.9],\n    [3.0, 3.1, 3.2, 3.3, 3.4, 3.5],\n    [3.6, 3.7, 3.8, 3.9, 4.0, 4.1],\n    [4.2, 4.3, 4.4, 4.5, 4.6, 4.7]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data\nbar_width = 0.8\nindex = np.arange(len(categories))\nbars = ax.bar(index, values[0], bar_width, label='Category 1')\nfor i in range(1, len(values)):\n    bars = ax.bar(index + i * bar_width / len(values), values[i], bar_width, label=f'Category {i+2}')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Categories')\nax.set_xticks(index + bar_width / (2 * len(values)))\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Run 1': [50, 60, 70, 80, 90],\n    'Run 2': [40, 50, 60, 70, 80],\n    'Run 3': [30, 40, 50, 60, 70],\n    'Run 4': [20, 30, 40, 50, 60],\n    'Run 5': [10, 20, 30, 40, 50],\n    'Run 6': [50, 60, 70, 80, 90],\n    'Run 7': [40, 50, 60, 70, 80],\n    'Run 8': [30, 40, 50, 60, 70],\n    'Run 9': [20, 30, 40, 50, 60],\n    'Run 10': [10, 20, 30, 40, 50]\n}\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data using box plots\nboxplot = ax.boxplot(data.values(), patch_artist=True)\n\n# Customize the colors of the boxes\ncolors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'lavender', 'lightgreen', 'lightcoral', 'lightskyblue', 'lavender', 'lightgreen']\nfor patch, color in zip(boxplot['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add horizontal lines for the median values\nmedians = [np.median(x) for x in data.values()]\nfor median, line in zip(medians, boxplot['medians']):\n    line.set_color('black')\n    line.set_linewidth(2)\n\n# Add vertical lines for the mean values\nmeans = [np.mean(x) for x in data.values()]\nfor mean, line in zip(means, boxplot['means']):\n    line.set_color('red')\n    line.set_linewidth(2)\n    line.set_marker('o')\n\n# Set labels and title\nax.set_xticklabels(data.keys())\nax.set_xlabel('Runs')\nax.set_ylabel('Value')\nax.set_title('Box Plot of Runs')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['AR', 'LSTMAlpha', 'LSTMBeta', 'AE', 'EncDecAD', 'SRCNN', 'AnomalyTransformer', 'TimesNet', 'Donut', 'TFAD']\nvalues = [\n    [0.8, 0.9, 0.7],\n    [0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4],\n    [0.1, 0.2, 0.3],\n    [0.05, 0.1, 0.15],\n    [0.02, 0.03, 0.04],\n    [0.01, 0.02, 0.03]\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh([i], values[i], color=plt.cm.viridis(i / len(categories)), label=category)\n\n# Set labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Category')\nax.set_title('Sample Bar Chart')\n\n# Add a legend\nax.legend(title='Legend')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Bert Base', 'MacBERT', 'English HLM']\nsubcategories = ['Bert Base', 'MacBERT', 'English HLM']\ndata = [\n    [0.85, 0.92, 0.78],\n    [0.88, 0.95, 0.80],\n    [0.76, 0.85, 0.72]\n]\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot each category with different colors and labels\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\nfor i, category in enumerate(categories):\n    ax = axes[i]\n    ax.scatter(range(len(subcategories)), data[i], color=colors[i], label=subcategories)\n    ax.set_title(category)\n    ax.set_xlabel('Subcategory')\n    ax.set_ylabel('Value')\n    ax.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata1 = np.array([[2.5, 2.7, 2.9], [2.3, 2.4, 2.6]])\ndata2 = np.array([[2.6, 2.8, 2.9], [2.4, 2.5, 2.7]])\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Plot the first subplot\naxes[0, 0].boxplot(data1)\naxes[0, 0].set_title('Our Model')\naxes[0, 0].set_ylabel('Ratings')\n\n# Plot the second subplot\naxes[0, 1].boxplot(data2)\naxes[0, 1].set_title('NTM+CL')\naxes[0, 1].set_ylabel('Ratings')\n\n# Plot the third subplot\naxes[1, 0].boxplot(data1)\naxes[1, 0].set_title('Our Model')\naxes[1, 0].set_ylabel('Intrusion')\n\n# Plot the fourth subplot\naxes[1, 1].boxplot(data2)\naxes[1, 1].set_title('NTM+CL')\naxes[1, 1].set_ylabel('Intrusion')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.array([['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target', 'Group'], ['target',"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmethods = ['BG', 'IBP', 'SSP', 'NBP']\naccuracy = [85, 75, 65, 55]\nstd_dev = [2, 3, 4, 5]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the bar chart with error bars\nbars = ax.bar(methods, accuracy, yerr=std_dev, capsize=5, color=['tab:blue', 'tab:orange', 'tab:green', 'tab:red'], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('Prediction Accuracy vD1')\nax.set_title('Comparison of Prediction Methods')\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([50, 100, 150, 200, 350])\ny = np.array([-0.04, -0.02, 0.00, 0.02, 0.04])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with specific styling\nax.bar(x, y, color='blue', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\nax.set_title('Reward vs Search Depth')\n\n# Set limits for x and y axes\nax.set_xlim(0, 400)\nax.set_ylim(-0.06, 0.06)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 38.1, 29.5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the data using a bar chart\nbars = ax.bar(activities, durations, color=['pink', 'orange', 'lightgreen', 'lightblue'])\n\n# Add labels and title\nax.set_xlabel('Activity')\nax.set_ylabel('Duration (minutes)')\nax.set_title('Daily Activity Durations')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Nutrition', 'Environment']\nvalues1 = [2.3, 2.5, 2.1, 1.9, 2.4, 2.6]\nvalues2 = [2.1, 2.3, 2.2, 1.8, 2.0, 2.5]\nvalues3 = [2.2, 2.4, 2.3, 1.9, 2.1, 2.7]\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first subplot\naxes[0, 0].bar(categories, values1, color='lightblue')\naxes[0, 0].set_title('Mean Value')\n\n# Plot the second subplot\naxes[0, 1].bar(categories, values2, color='lightgreen')\naxes[0, 1].set_title('Median Value')\n\n# Plot the third subplot\naxes[1, 0].bar(categories, values3, color='lightcoral')\naxes[1, 0].set_title('IQR Mean')\n\n# Plot the fourth subplot\naxes[1, 1].bar(categories, values3, color='lightskyblue')\naxes[1, 1].set_title('IQR Median')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-40, -20, 0, 20, 40])\ny = np.array([0.5, 0.3, 0.8, 0.2, 0.7])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y, marker='o', linestyle='-', color='b', label='Sample Data')\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3])\ny = np.array([40, 50, 60])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with specific styles\nax.bar(x, y, color='red', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Sample Bar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'REM (ours)': [0.4, 0.6, 0.8],\n    'IRIS': [0.2, 0.4, 0.6],\n    'STORM': [0.3, 0.5, 0.7],\n    'TWM': [0.1, 0.3, 0.5],\n    'DreamerV3': [0.2, 0.4, 0.6],\n    'SimPLe': [0.1, 0.3, 0.5]\n}\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 3.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.scatter(values, np.arange(len(values)), label=label, s=100, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Human Normalized Score')\nax.set_ylabel('Sample Index')\nax.set_title('Comparison of Different Models')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])\ny1 = np.array([20, 25, 30, 35, 40, 45, 50])\ny2 = np.array([15, 20, 25, 30, 35, 40, 45])\ny3 = np.array([10, 15, 20, 25, 30, 35, 40])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='SOCP Learning (Proposed)', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='SOCP No Learning', color='orange', linestyle='--', linewidth=2)\nax.plot(x, y3, label='FMPC', color='red', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Angular Frequency [rad/s]', fontsize=12)\nax.set_ylabel('Thrust Angle [\u00b0]', fontsize=12)\nax.set_title('Comparison of Thrust Angles for Different Control Methods', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 3, 5, 7, 11])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'o-', label='Data Points')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'D-avg': [100, 120, 130, 140, 150],\n    'P-avg': [110, 115, 120, 125, 130],\n    'SAA': [90, 95, 100, 105, 110],\n    'CSA': [80, 85, 90, 95, 100],\n    'RSA': [70, 75, 80, 85, 90]\n}\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(25.0, 8.0))\n\n# Plot the first subplot\naxes[0].boxplot([data['D-avg'], data['P-avg'], data['SAA'], data['CSA'], data['RSA']], patch_artist=True)\naxes[0].set_title('Linear travel times')\naxes[0].set_xlabel('Travel Time')\naxes[0].set_ylabel('Time (ms)')\naxes[0].set_xticklabels(['D-avg', 'P-avg', 'SAA', 'CSA', 'RSA'])\naxes[0].grid(True)\n\n# Plot the second subplot\naxes[1].scatter([data['D-avg'], data['P-avg'], data['SAA'], data['CSA'], data['RSA']], \n                [data['D-avg'], data['P-avg'], data['SAA'], data['CSA'], data['RSA']], color='blue')\naxes[1].set_title('Exponential travel times')\naxes[1].set_xlabel('Travel Time')\naxes[1].set_ylabel('Time (ms)')\naxes[1].set_xticks([])\naxes[1].set_yticks([])\naxes[1].grid(True)\n\n# Plot the third subplot\naxes[2].bar([data['D-avg'], data['P-avg'], data['SAA'], data['CSA'], data['RSA']], \n            [data['D-avg'], data['P-avg'], data['SAA'], data['CSA'], data['RSA']], color='red')\naxes[2].set_title('Sigmoidal travel times')\naxes[2].set_xlabel('Travel Time')\naxes[2].set_ylabel('Time (ms)')\naxes[2].set_xticks([])\naxes[2].set_yticks([])\naxes[2].grid(True)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Only WSI Modality': [89.5, 87.3, 86.2, 84.1],\n    'Only CNV Modality': [88.4, 86.1, 85.0, 83.9],\n    'WSI+CNV Modality': [91.2, 89.0, 87.8, 85.6]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data\nbars = ax.bar(range(len(data)), data['Only WSI Modality'], color='skyblue', label='Only WSI Modality')\nax.bar(range(len(data)), data['Only CNV Modality'], bottom=data['Only WSI Modality'], color='lightgreen', label='Only CNV Modality')\nax.bar(range(len(data)), data['WSI+CNV Modality'], bottom=[sum(x) for x in zip(data['Only WSI Modality'], data['Only CNV Modality'])], color='salmon', label='WSI+CNV Modality')\n\n# Set labels and title\nax.set_xlabel('Modality')\nax.set_ylabel('AUC')\nax.set_title('Comparison of AUC for Different Modalities')\nax.set_xticks(range(len(data)))\nax.set_xticklabels(['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality'])\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Vanilla DIP': [22.8, 22.6, 22.4],\n    'SGLD DIP': [23.2, 23.0, 22.8],\n    'Ours': [19.8, 19.6, 19.4]\n}\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plotting the first subplot\naxes[0].boxplot(data.values(), patch_artist=True)\naxes[0].set_title('0.25 HIAR')\naxes[0].set_xlabel('Algorithms')\naxes[0].set_ylabel('PSNR (dB)')\naxes[0].set_xticklabels(data.keys())\naxes[0].grid(True)\n\n# Plotting the second subplot\naxes[1].boxplot(data.values(), patch_artist=True)\naxes[1].set_title('0.1 HIAR')\naxes[1].set_xlabel('Algorithms')\naxes[1].set_ylabel('PSNR (dB)')\naxes[1].set_xticklabels(data.keys())\naxes[1].grid(True)\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-80, 80, 100)\ny = np.linspace(-80, 80, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2)) / (np.sqrt(X**2 + Y**2))\n\n# Plot the data using a contourf plot\ncontour = plt.contourf(X, Y, Z, cmap='coolwarm', levels=20)\n\n# Add a colorbar to the plot\nplt.colorbar(contour)\n\n# Set the title of the plot\nplt.title('T-SNE plot for the output variable Y3')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define the grid of points\nx1 = np.linspace(0, 1, 100)\nx2 = np.linspace(0, 1, 100)\nX1, X2 = np.meshgrid(x1, x2)\n\n# Define the function to plot\ndef f(X1, X2):\n    return np.sin(np.pi * X1) * np.cos(np.pi * X2)\n\n# Compute the function values\nZ = f(X1, X2)\n\n# Plot the contourf\nplt.contourf(X1, X2, Z, levels=20, cmap='viridis')\n\n# Add color bar\ncbar = plt.colorbar()\ncbar.set_label('\u03bb(x, z)')\n\n# Set labels and title\nplt.xlabel('x1')\nplt.ylabel('x2')\nplt.title('Contour Plot of \u03bb(x, z)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Blood Pressure (DBP) and Systolic Blood Pressure (SBP) over time\ntime = np.linspace(0, 150, 100)\nfemale_dbp = 70 + 20 * np.sin(time / 10)\nmale_dbp = 80 + 20 * np.sin(time / 10 + np.pi / 3)\nfemale_sbp = 120 + 10 * np.sin(time / 10)\nmale_sbp = 130 + 10 * np.sin(time / 10 + np.pi / 3)\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with enhanced styling\nax.plot(time, female_dbp, label='Female', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(time, male_dbp, label='Male', color='red', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels with improved formatting\nax.set_xlabel('Time (minutes)', fontsize=12)\nax.set_ylabel('Blood Pressure (mmHg)', fontsize=12)\nax.set_title('Blood Pressure Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Customize the tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.linspace(-4, 4, 100)\ny = np.sin(x)\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced styling\nplt.plot(x, y, color='blue', linewidth=2, linestyle='-', marker='o', markersize=5, label='Sine Wave')\n\n# Set labels and title with improved formatting\nplt.xlabel('X-axis', fontsize=12)\nplt.ylabel('Y-axis', fontsize=12)\nplt.title('Simple Sine Wave Plot', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nplt.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the contourf with a specific number of levels and colormap\ncontourf = ax.contourf(X, Y, Z, levels=10, cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contourf)\n\n# Set labels for the axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set a title for the plot\nax.set_title('Contour Plot with Colorbar')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(8, 15, 100)\ny = np.linspace(8, 15, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the contourf with a colormap\ncontour = ax.contourf(X, Y, Z, cmap='coolwarm', levels=20)\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contour, ax=ax, orientation='vertical')\ncbar.set_label('Iteration')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Contour Plot of Iteration')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.plot(x, y, color='pink', linewidth=2)\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Sine Wave')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(-1.0, 1.0, 100)\ny = np.exp(-(x**2))  # Example function: Gaussian distribution\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y, color='blue', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(7, 15, 100)\ny1 = np.exp(-(x - 10)**2 / (2 * 2**2))\ny2 = np.exp(-(x - 12)**2 / (2 * 3**2))\ny3 = np.exp(-(x - 14)**2 / (2 * 1.5**2))\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Random Bundle', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Increase Price', color='pink', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Strategic (Ours)', color='green', linestyle='-.', linewidth=2)\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle=':', linewidth=1)\n\n# Set labels and title\nax.set_xlabel('p')\nax.set_ylabel('Shape Density')\nax.set_title('Probability Density Functions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x * np.pi / 2)\ny2 = np.cos(x * np.pi / 2)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Gucci', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Chanel', color='green', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Density')\nax.set_ylabel('Value')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-0.5, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.819])\ny = np.array([-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.819])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y, 'o-', color='green', label='Distributional')\nax.plot(x, y, 's--', color='orange', label='Deterministic')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 4, 8])\ny1 = np.array([5, 6, 7, 6])\ny2 = np.array([5, 6, 7, 6])\ny3 = np.array([5, 6, 7, 6])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Baseline', color='b', linestyle='-', linewidth=2)\nax.plot(x, y2, label='SoftMoE (unchanged)', color='g', linestyle='--', linewidth=2)\nax.plot(x, y3, label='SoftMoE (\u2202 NumExperts)', color='m', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human Normalized Score')\nax.set_title('Expert dimension')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3])\ny1 = np.array([0.748, 0.762, 0.709])\ny2 = np.array([0.759, 0.748, 0.687])\ny3 = np.array([0.78, 0.78, 0.713])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Baseline 1', color='b', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Baseline 2', color='r', linestyle='--', linewidth=2)\nax.plot(x, y3, label='FedMM', color='g', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Hospital')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by hospital and method')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([1, 2, 3])\ny1 = np.array([-10, -20, -30])\ny2 = np.array([-15, -25, -35])\ny3 = np.array([-20, -30, -40])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot data with different styles\nax.plot(x, y1, label='GPT-4', color='orange', linestyle='--', marker='o')\nax.plot(x, y2, label='Claude-2.1', color='teal', linestyle='-', marker='s')\nax.plot(x, y3, label='Claude-2', color='red', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y, marker='o', linestyle='-', color='b')\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Medium', 'Medium-replay', 'Medium-expert']\naug_values = [85, 82, 88]\nte_values = [78, 76, 80]\nqual_values = [90, 88, 92]\ndiffstitch_values = [87, 85, 89]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors for each bar\ncolors = ['#FFA500', '#FFFF00', '#0000FF']\n\n# Plot bars for each category\nbar_width = 0.2\nindex = np.arange(len(categories))\nbars = [\n    ax.bar(index + i * bar_width, [aug_values[i], te_values[i], qual_values[i], diffstitch_values[i]], width=bar_width, color=colors[i], label=categories[i]) for i in range(len(categories))\n]\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Performance')\nax.set_title('Performance Metrics by Category')\nax.set_xticks(index + bar_width * 1.5)\nax.set_xticklabels(['Aug', 'TEstimation', 'Qualification', 'DiffStitch'])\nax.legend()\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['128/0.5/0.0001', '128/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001']\nvalues = [\n    [0.7, 0.3, 0.1],\n    [0.6, 0.2, 0.1],\n    [0.5, 0.1, 0.1],\n    [0.4, 0.1, 0.1],\n    [0.3, 0.1, 0.1],\n    [0.2, 0.1, 0.1],\n    [0.1, 0.1, 0.1],\n    [0.05, 0.1, 0.1]\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nbars = ax.bar(categories, [sum(v) for v in values], color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Metric')\nax.set_title('FashionMNIST (NEURAL)')\n\n# Add grid lines\nax.yaxis.grid(True)\n\n# Add annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [27, 18, 15, 23, 34]\nvalues2 = [10, 12, 14, 16, 18]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create the bar chart\nbars1 = ax.bar(categories, values1, width=bar_width, color='purple', label='Higher Education Enrollment Rate')\nbars2 = ax.bar([i + bar_width for i in range(len(categories))], values2, width=bar_width, color='blue', label='Student-Teacher Ratio')\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Values')\nax.set_title('Higher Education Enrollment Rate vs Student-Teacher Ratio')\nax.set_xticks([i + bar_width / 2 for i in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 10400, 3200]\nforest_coverage = [21, 34, 25, 25, 38]\nland_area = [52, 52, 34, 38, 52]\nenergy_consumption = [18, 28, 25, 25, 34]\nrenewable_energy_usage = [18, 28, 25, 25, 34]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 2, figsize=(6.0, 9.0))\n\n# Plot 1: Annual Carbon Dioxide Emissions\nbars_emissions = axes[0, 0].bar(categories, emissions, color='lightgrey')\naxes[0, 0].set_title('Annual Carbon Dioxide Emissions')\naxes[0, 0].set_ylabel('Millions of Metric Tons')\n\n# Add value labels on top of each bar\nfor bar in bars_emissions:\n    yval = bar.get_height()\n    axes[0, 0].text(bar.get_x() + bar.get_width()/2, yval + 100, round(yval, 1), ha='center', va='bottom')\n\n# Plot 2: Forest Coverage Rate\nbars_forest = axes[0, 1].bar(categories, forest_coverage, color='lightgreen')\naxes[0, 1].set_title('Forest Coverage Rate')\naxes[0, 1].set_ylabel('% of Land Area')\n\n# Add value labels on top of each bar\nfor bar in bars_forest:\n    yval = bar.get_height()\n    axes[0, 1].text(bar.get_x() + bar.get_width()/2, yval + 1, str(int(yval)) + '%', ha='center', va='bottom')\n\n# Plot 3: Renewable Energy Usage\nbars_renewable = axes[1, 0].bar(categories, renewable_energy_usage, color='lightblue')\naxes[1, 0].set_title('Renewable Energy Usage')\naxes[1, 0].set_ylabel('% of Total Energy Consumption')\n\n# Add value labels on top of each bar\nfor bar in bars_renewable:\n    yval = bar.get_height()\n    axes[1, 0].text(bar.get_x() + bar.get_width()/2, yval + 1, str(int(yval)) + '%', ha='center', va='bottom')\n\n# Plot 4: Energy Consumption\nbars_energy = axes[1, 1].bar(categories, energy_consumption, color='salmon')\naxes[1, 1].set_title('Energy Consumption')\naxes[1, 1].set_ylabel('% of Total Energy Consumption')\n\n# Add value labels on top of each bar\nfor bar in bars_energy:\n    yval = bar.get_height()\n    axes[1, 1].text(bar.get_x() + bar.get_width()/2, yval + 1, str(int(yval)) + '%', ha='center', va='bottom')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\nvalues = [50, 60, 70, 80]\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#FFA500']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Metrics')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [45, 55, 65, 75, 85],\n    [35, 45, 55, 65, 75],\n    [25, 35, 45, 55, 65],\n    [15, 25, 35, 45, 55]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with a bar chart\nbar_width = 0.2\nindex = np.arange(data.shape[1])\nbars = []\nfor i in range(data.shape[0]):\n    bars.append(ax.bar(index + i * bar_width, data[i], bar_width, label=f'Group {i+1}'))\n\n# Add labels and title\nax.set_xlabel('Judge')\nax.set_ylabel('Judge Accuracy (%)')\nax.set_title('Comparison of Judge Accuracies')\nax.set_xticks(index + bar_width * (data.shape[0] - 1) / 2)\nax.set_xticklabels(['GPT-3.5-Turbo', 'GPT-4-Turbo', 'Human'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\nspring_temperatures = [12, 14, 16, 18]\nautumn_temperatures = [10, 12, 14, 16]\nspring_rainfall = [300, 400, 500, 600]\nautumn_rainfall = [200, 300, 400, 500]\nwind_speeds = [5, 6, 7, 8]\nair_quality_index = [50, 60, 70, 80]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0), sharex=True, sharey=True)\n\n# Plot 1: Annual Average Temperature\naxes[0, 0].bar(cities, spring_temperatures, color='orange', label='Spring')\naxes[0, 0].bar(cities, autumn_temperatures, bottom=spring_temperatures, color='lightblue', label='Autumn')\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].legend()\n\n# Plot 2: Annual Rainfall\naxes[0, 1].bar(cities, spring_rainfall, color='green', label='Spring')\naxes[0, 1].bar(cities, autumn_rainfall, bottom=spring_rainfall, color='lightgreen', label='Autumn')\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].legend()\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, wind_speeds, color='skyblue', label='Wind Speed')\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_xlabel('City')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].legend()\n\n# Plot 4: Air Quality Index\naxes[1, 1].bar(cities, air_quality_index, color='purple', label='Air Quality Index')\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_xlabel('City')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Germany', 'China', 'USA', 'India', 'Brazil']\nvalues1 = [20, 15, 10, 5, 3]\nvalues2 = [25, 20, 15, 10, 5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars\nbars1 = ax.bar(index, values1, bar_width, label='Total Energy Consumption by Country', color='purple')\nbars2 = ax.bar(index + bar_width, values2, bar_width, label='Renewable Energy Usage by Country', color='cyan')\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (Petajoules)')\nax.set_title('Total Energy Consumption by Country vs Renewable Energy Usage by Country')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Refrigerator', 'Washing Machine', 'Dishwasher']\nvalues = [\n    [0.15, 0.25, 0.30],\n    [-0.10, -0.05, -0.05],\n    [0.05, 0.05, 0.20]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#90EE90', '#ADD8E6']\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh(i, values[i], color=colors[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Energy Efficiency Rating')\nax.set_title('Energy Efficiency Ratings by Appliance Model')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Appliance Model')\n\n# Set y-axis limits and ticks\nax.set_yticks(range(len(categories)))\nax.set_yticklabels(categories)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Wind', 'Solar', 'Hydro', 'Nuclear']\nefficiency_scores = [\n    [85, 75, 90],  # Installation Efficiency, Maintenance Costs, Environmental Impact\n    [90, 80, 85],\n    [70, 60, 75],\n    [80, 70, 80]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot bars for each category\nfor i, category in enumerate(categories):\n    ax.bar(range(len(efficiency_scores[0])), efficiency_scores[i], color=colors[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Efficiency Metrics')\nax.set_ylabel('Score')\nax.set_title('Energy Assessment Entity')\nax.set_xticks(range(len(efficiency_scores[0])))\nax.set_xticklabels(['Installation Efficiency', 'Maintenance Costs', 'Environmental Impact'])\nax.legend()\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 90, 75, 80, 70, 65, 75, 85, 70, 60]\nhigher_education_enrollment = [95, 90, 85, 80, 75, 70, 75, 85, 70, 60]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different colors and styles\nbars = ax.bar(regions, high_school_graduation, color='lightgreen', label='High School Graduation')\nax.bar(regions, higher_education_enrollment, bottom=high_school_graduation, color='gold', label='Higher Education Enrollment')\n\n# Add labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage (%)')\nax.set_title('Educational Metrics by Region')\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nproducts = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 57.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34.0, 53.7, 20.0]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title and labels\nax.set_title('Comparison of Recall Rates Across Products')\nax.set_xlabel('Products')\nax.set_ylabel('Recall Rate (%)')\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the data\nbars = ax.bar(products, truthful_recall, color=colors[0], label='Truthful Recall')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom')\n\nbars = ax.bar(products, misleading_recall, bottom=truthful_recall, color=colors[1], label='Misleading Recall')\nfor bar in bars:\n    yval = bar.get_height() + truthful_recall[products.index(bar.get_x())]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\ncomplaint_rates = [15, 18, 20, 12, 17, 10, 8]\nsatisfaction_scores = [75, 82, 78, 85, 80, 88, 90]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, complaint_rates, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Complaint Rates')\nax.set_ylabel('Satisfaction Scores')\nax.set_title('Customer Satisfaction by Complaint Rate')\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 85, 88, 90, 80]\ndisagree_rates = [15, 18, 20, 12, 10, 8, 17]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#F4A582', '#A1C4FD']\n\n# Plot the agree rates\nbars_agree = ax.bar(categories, agree_rates, color=colors, label='Agree Rates')\n\n# Plot the disagree rates\nbars_disagree = ax.bar(categories, disagree_rates, bottom=agree_rates, color=[c.replace('FF', 'AA') for c in colors], label='Disagree Rates')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Customer Satisfaction by Category')\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars_agree + bars_disagree:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set the x-ticks to be more readable\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Watering Frequency', 'Planting Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nvalues = [\n    [0.05, 0.03, 0.04, 0.02, 0.01],\n    [0.06, 0.04, 0.05, 0.03, 0.02],\n    [0.07, 0.05, 0.06, 0.04, 0.03],\n    [0.08, 0.06, 0.07, 0.05, 0.04],\n    [0.09, 0.07, 0.08, 0.06, 0.05],\n    [0.10, 0.08, 0.09, 0.07, 0.06],\n    [0.11, 0.09, 0.10, 0.08, 0.07],\n    [0.12, 0.10, 0.11, 0.09, 0.08],\n    [0.13, 0.11, 0.12, 0.10, 0.09],\n    [0.14, 0.12, 0.13, 0.11, 0.10]\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nbars = ax.bar(categories, [np.mean(val) for val in values], yerr=[np.std(val) for val in values], capsize=5, color='lightgreen', edgecolor='black')\n\n# Add error bars\nfor bar, yerr in zip(bars, [np.std(val) for val in values]):\n    ax.errorbar(bar.get_x() + bar.get_width() / 2, bar.get_height(), yerr=yerr, fmt='o', color='black', ecolor='gray', elinewidth=1, capsize=5)\n\n# Set labels and title\nax.set_xlabel('Environmental Factors')\nax.set_ylabel('Impact on Plant Growth (\u0394 to control)')\nax.set_title('Impact of Environmental Factors on Plant Growth')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nnew_york_values = [220, 175, 200]\nlos_angeles_values = [210, 160, 190]\nchicago_values = [230, 180, 210]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot for New York\naxes[0].bar(categories, new_york_values, color=['green', 'blue', 'red'])\naxes[0].set_title('New York')\naxes[0].set_ylabel('Metric Values')\n\n# Plot for Los Angeles\naxes[1].bar(categories, los_angeles_values, color=['green', 'blue', 'red'])\naxes[1].set_title('Los Angeles')\n\n# Plot for Chicago\naxes[2].bar(categories, chicago_values, color=['green', 'blue', 'red'])\naxes[2].set_title('Chicago')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data\nax.plot(x, y, color='blue', linewidth=2.5, linestyle='-', marker='o', markersize=8, markerfacecolor='red')\n\n# Set labels and title\nax.set_xlabel('X-axis Label', fontsize=14)\nax.set_ylabel('Y-axis Label', fontsize=14)\nax.set_title('Sample Plot', fontsize=16)\n\n# Add grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(-1, 1.1, 0.2))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [-4.0, -3.0, -2.0, -1.0]\nwater_quality_scores = [0.0, 0.5, 1.0, 1.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars for air quality scores\nbars = ax.bar(categories, air_quality_scores, color='red', label='Air Quality')\n\n# Add error bars for better visualization\nerror_air = np.array([0.5, 0.5, 0.5, 0.5])\nax.errorbar(categories, air_quality_scores, yerr=error_air, fmt='o', color='black', capsize=5)\n\n# Plot the bars for water quality scores\nfor i, score in enumerate(water_quality_scores):\n    ax.bar(categories[i], score, bottom=air_quality_scores[i], color='green', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Cities')\nax.set_ylabel('Environmental Impact Scores')\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\nvalues = [84.97, 102.67, 78.22, 85.17, 67.17]\nvalues2 = [80.67, 78.22, 67.17, 85.17, 78.22]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the first bar chart\nbars1 = ax.bar(categories, values, color='lightgreen', edgecolor='black', label='Speak duration of roles')\n\n# Plot the second bar chart\nbars2 = ax.bar(categories, values2, bottom=values, color='skyblue', edgecolor='black', label='Speak tokens of roles')\n\n# Add labels and title\nax.set_xlabel('Character')\nax.set_ylabel('Tokens (s)')\nax.set_title('Character Tokens Distribution')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Add annotations for better readability\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 2), ha='center', va='bottom')\n\nfor bar in bars2:\n    yval = bar.get_height() + bar.get_bottom()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([5, 10, 20, 30, 40, 50])\ny = np.array([63.77, 64.17, 64.31, 64.98, 65.82, 65.78])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.bar(x, y, color='skyblue', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Size of Data for Training and Validation (%)')\nax.set_ylabel('True+ info (%)')\nax.set_title('Comparison of True+ Info with Different Dataset Sizes')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(56, 67, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'const']\nvalues_all = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\nvalues_arg_causal = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\nvalues_test_0 = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\nvalues_test_1 = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\nvalues_test_2 = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\nvalues_test_3 = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\nvalues_test_4 = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\nvalues_test_5 = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\nvalues_test_6 = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\nvalues_const = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nax.bar(categories, values_all, color='red', label='All')\nax.bar(categories, values_arg_causal, color='blue', label='arg.causal')\nax.bar(categories, values_test_0, color='green', label='test.0')\nax.bar(categories, values_test_1, color='orange', label='test.1')\nax.bar(categories, values_test_2, color='purple', label='test.2')\nax.bar(categories, values_test_3, color='cyan', label='test.3')\nax.bar(categories, values_test_4, color='magenta', label='test.4')\nax.bar(categories, values_test_5, color='yellow', label='test.5')\nax.bar(categories, values_test_6, color='grey', label='test.6')\nax.bar(categories, values_const, color='brown', label='const')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Categories', fontsize=12, fontweight='bold')\nax.set_ylabel('Out-of-domain accuracy', fontsize=12, fontweight='bold')\nax.set_title('Out-of-domain accuracy', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [\n    [0.7, 0.8, 0.9, 0.6, 0.5],\n    [0.6, 0.7, 0.8, 0.5, 0.4],\n    [0.5, 0.6, 0.7, 0.4, 0.3],\n    [0.4, 0.5, 0.6, 0.3, 0.2],\n    [0.3, 0.4, 0.5, 0.2, 0.1]\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, [np.mean(v) for v in values], color='skyblue', yerr=[np.std(v) for v in values], capsize=5)\n\n# Add error bars\nfor bar, yerr in zip(bars, [np.std(v) for v in values]):\n    ax.errorbar(bar.get_x() + bar.get_width() / 2, bar.get_height(), yerr=yerr, fmt='o', color='black')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Objective Value')\nax.set_title('Mini Crosswords Performance')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width() / 2, yval + 0.05, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the legend\nax.legend(['ToT (0.675)'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'BART', 'DeBERTa', 'Albert', 'Llama2']\nground_truth_labels = [65, 60, 55, 50, 45, 40, 35, 30, 25]\nweak_labels = [75, 70, 65, 60, 55, 50, 45, 40, 35]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data\nbars = ax.bar(categories, ground_truth_labels, color='r', label='Ground-truth labels')\nax.bar(categories, weak_labels, bottom=ground_truth_labels, color='b', label='Weak labels')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.7)\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Model Accuracy')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Disourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\nvalues = [\n    [1.25, 1.35, 1.45, 1.50],  # Purple bars\n    [1.20, 1.30, 1.40, 1.50],  # Purple bars\n    [1.25, 1.35, 1.45, 1.50],  # Purple bars\n    [1.20, 1.30, 1.40, 1.50],  # Purple bars\n    [1.25, 1.35, 1.45, 1.50],  # Purple bars\n    [1.20, 1.30, 1.40, 1.50],  # Purple bars\n    [1.25, 1.35, 1.45, 1.50]   # Purple bars\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with specific colors and styles\nbars = ax.bar(categories, [np.mean(val) for val in values], color='purple', edgecolor='black')\n\n# Add error bars to represent standard deviation\nfor bar, val in zip(bars, values):\n    yerr = np.std(val)\n    ax.errorbar(bar.get_x() + bar.get_width() / 2, bar.get_height(), yerr=yerr, fmt='o', color='black', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('A')\nax.set_title('Your Chart Title Here')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nshouting_fractions = [0.12, 0.14, 0.16, 0.18, 0.10, 0.08]\nmeans = [0.13, 0.15, 0.17, 0.19, 0.11, 0.09]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(categories, shouting_fractions, label='Dataset mean', color='blue', marker='o')\nax.plot(categories, means, label='Mean', color='red', marker='s')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Shouting Fraction (Fraction of videos)')\nax.set_title('Comparison of Shouting Fractions and Means')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\ny1 = np.array([15.49, 17.15, 16.03, 15.45, 14.24, 16.46, 15.49, 17.15, 16.03, 15.45, 14.24, 16.46, 15.49, 17.15, 16.03, 15.45, 14.24, 16.46, 15.49, 17.15])\ny2 = np.array([19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38])\ny3 = np.array([23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Variable, Symmetric Error', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Variable, Symmetric Error', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='Variable, Symmetric Error', color='green', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Variable, Symmetric Error')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA']\nincivility_values = [0.17, 0.21, 0.23, 0.25]\nmean_values = [0.18, 0.22, 0.24, 0.26]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(categories, incivility_values, yerr=0.01, fmt='o-', color='darkblue', label='Dataset mean')\nax.errorbar(categories, mean_values, yerr=0.01, fmt='o-', color='darkred', label='Mean')\n\n# Set labels and title\nax.set_xlabel('Incivility (Fraction of Videos)')\nax.set_ylabel('Pulwama-Balakot')\nax.set_title('Comparison of Incivility and Mean Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-19.6, -19.5, -19.4, -19.3])\ny = np.array([-19.353, -19.394, -19.404, -19.314])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, xerr=0.078, yerr=0.028, fmt='o', color='black')\n\n# Set labels and title\nax.set_xlabel('M$_B$')\nax.set_ylabel('M$_{B^*}$')\nax.set_title('Sample Data with Error Bars')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics']\nunique_speaker_counts = [12, 14, 10, 8, 6, 4]\nunique_shouter_counts = [15, 13, 9, 7, 5, 3]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(categories, unique_speaker_counts, marker='o', linestyle='-', color='b', label='Unique speaker count mean')\nax.plot(categories, unique_shouter_counts, marker='o', linestyle='--', color='r', label='Unique shouter count mean')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Number of speakers')\nax.set_title('Dataset unique shouter count mean')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we have data about the number of videos watched by different countries during a specific period\ncountries = ['Kashmir', 'COVID/Lockdown', 'Sports', 'China']\nfemale_face_presence = [0.12, 0.15, 0.18, 0.22]  # Hypothetical data for female face presence\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(countries, female_face_presence, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Country', fontsize=12, fontweight='bold')\nax.set_ylabel('Fraction of Videos (Dataset Mean)', fontsize=12, fontweight='bold')\nax.set_title('Female Face Presence in Different Countries', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([1.2, 2.5, 3.8, 4.1, 5.3])\nyerr_upper = np.array([0.3, 0.4, 0.5, 0.6, 0.7])\nyerr_lower = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=[yerr_lower, yerr_upper], fmt='o', ecolor='black', capsize=5)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Errorbar upper and lower limits')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5])\ny1 = np.array([100, 120, 130, 140, 150, 160, 170, 180])\ny2 = np.array([105, 115, 125, 135, 145, 155, 165, 175])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, 'o-', color='purple', label='variable, symmetric error')\nax.plot(x, y2, 's-', color='green', label='variable, symmetric error')\n\n# Set labels and title\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title('variable, symmetric error')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 2, 4, 6, 8, 10])\ny = np.array([2.957, 3.587, 3.704, 3.777, 3.777, 3.777])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y, marker='o', linestyle='-', color='green')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 5, 10, 15, 20])\ny = np.array([-2.1, -2.6, -1.2, -1.0, -2.7])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=0.5, fmt='o-', color='purple', ecolor='gray', capsize=5)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Variable, Asymmetric Error')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny = np.array([0, 1, 4, 9, 16, 25, 36, 49, 64, 81])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data with specific line style and marker\nplt.plot(x, y, linestyle='--', marker='o', color='b')\n\n# Set labels for axes\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Set title of the plot\nplt.title('Simple Line Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Define the number of points and their positions\nn = 20\ntheta = np.linspace(0, 2 * np.pi, n, endpoint=False)\nr = np.linspace(0.5, 1.5, n)\n\n# Create a polar plot\nax = fig.add_subplot(111, projection='polar')\n\n# Plot the points with lines connecting them\nfor i in range(n):\n    ax.plot([theta[i], theta[(i + 1) % n]], [r[i], r[(i + 1) % n]], color='gray', linestyle='-', linewidth=0.5)\n\n# Add scatter plot for the points\nax.scatter(theta, r, color='pink', s=50)\n\n# Set the title of the plot\nax.set_title(\"Complex Network Visualization\", fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(x, y, label='Sine Wave')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Simple Sine Wave Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the vertices of the triangle\nx = np.array([0, 2, 1])\ny = np.array([0, 0, 3])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the triangle\nplt.plot(x, y, 'b-o')\n\n# Set labels for the axes\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Set a title for the plot\nplt.title('Triangle Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the vertices of the triangle\nA = np.array([0, 0])\nB = np.array([2, 0])\nC = np.array([1, np.sqrt(3)])\n\n# Plot the triangle\nplt.figure(figsize=(10.0, 8.0))\nplt.plot([A[0], B[0], C[0], A[0]], [A[1], B[1], C[1], A[1]], 'b-', lw=2)\n\n# Mark the vertices\nplt.scatter(A[0], A[1], color='red', s=100)\nplt.scatter(B[0], B[1], color='red', s=100)\nplt.scatter(C[0], C[1], color='red', s=100)\n\n# Annotate the vertices\nplt.annotate('1', (A[0], A[1]), textcoords=\"offset points\", xytext=(0,10), ha='center')\nplt.annotate('2', (B[0], B[1]), textcoords=\"offset points\", xytext=(0,10), ha='center')\nplt.annotate('0', (C[0], C[1]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Triangle with Vertices at (0,0), (2,0), and (1,\u221a3)')\n\n# Show the plot\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.61, 0.74, 0.70, 0.70, 0.57],\n    [1.00, 0.69, 0.64, 0.67, 0.45],\n    [1.00, 0.77, 0.88, 0.62, 0.69],\n    [1.00, 0.72, 1.00, 0.54, 1.00]\n])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='YlOrBr')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\n\n# Set labels for the ticks\nax.set_xticklabels(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\nax.set_yticklabels(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [15.7, 28.1, 2.6, 0.5, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    [50.8, 12.2, 0.6, 6.2, 15.5, 13.9],\n    [50.3, 12.0, 0.9, 7.8, 17.3, 16.3]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf', 'Abstain'])\nax.set_yticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf', 'Abstain'])\nax.set_title('Heatmap of Votes')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: a 2D array representing some values\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data using a heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add a color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set labels for the x and y axes\nax.set_xlabel('Players')\nax.set_ylabel('Players')\n\n# Set the title of the plot\nax.set_title('Heatmap Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [10, 20, 30, 40],\n    [5, 15, 25, 35],\n    [1, 10, 20, 30],\n    [0, 5, 15, 25]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['A', 'B', 'C', 'D'])\nax.set_yticklabels(['X', 'Y', 'Z', 'W'])\nax.set_title('Heatmap Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [10, 10, 10],\n    [7, 7, 7],\n    [4, 4, 4]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='YlGnBu')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['D2', 'D1', 'D0'])\nax.set_yticklabels(['LOH0', 'LOH1', 'LOH2'])\nax.set_title('Heatmap Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.7, 0.8, 0.9, 1.0, 0.1],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.9, 1.0, 0.1, 0.2, 0.3],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the heatmap with a color map\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Add a color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set labels for the x and y axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\n\n# Set labels for the x and y axis ticks\nax.set_xticklabels(['A', 'B', 'C', 'D', 'E'])\nax.set_yticklabels(['X', 'Y', 'Z', 'W', 'V'])\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data with a colormap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add a color bar to the plot\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xlabel('To layer')\nax.set_ylabel('Start removing from layer')\nax.set_title('Perplexity=7.59')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 588, 327],\n    [459, 274, 797, 665, 605],\n    [784, 637, 523, 435, 405],\n    [935, 945, 739, 856, 243],\n    [729, 651, 388, 488, 184],\n    [863, 700, 644, 650, 760],\n    [292, 949, 365, 142, 473]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='hot', interpolation='nearest')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_title('Sales Performance Heatmap')\nax.set_xlabel('Product and Quarter')\nax.set_ylabel('Sales Rank')\n\n# Define custom labels for x-axis\nx_labels = ['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3']\nax.set_xticks(np.arange(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 3.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.2, 0.4, 0.6, 0.8, 0.9],\n    [0.1, 0.3, 0.5, 0.7, 0.8],\n    [0.2, 0.4, 0.6, 0.8, 0.9],\n    [0.1, 0.3, 0.5, 0.7, 0.8],\n    [0.2, 0.4, 0.6, 0.8, 0.9]\n])\n\n# Create a heatmap using imshow\nheatmap = plt.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Add a colorbar to the side of the heatmap\ncbar = plt.colorbar(heatmap)\ncbar.set_label('Values')\n\n# Set labels for the x-axis and y-axis\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n\n# Set a title for the plot\nplt.title('Heatmap Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.55, 0.72, 0.6, 0.6, 0.89],\n    [0.42, 0.65, 0.44, 0.79, 0.09],\n    [0.96, 0.38, 0.7, 0.07, 0.54],\n    [0.96, 0.93, 0.09, 0.53, 0.77],\n    [0.57, 0.98, 0.83, 0.78, 0.87]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='YlOrBr')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['96', '192', '336', '720'])\nax.set_yticklabels(['96', '192', '336', '720'])\nax.set_title('Weather')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [\n    [15.7, 28.1, 2.6, 14.5, 28.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 15.5, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 13.4, 16.3],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Plot the data\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.add_patch(plt.Circle((j + 0.5, i + 0.5), 0.4, color=plt.cm.viridis(data[i][j] / 100)))\n\n# Set labels and title\nax.set_xticks(np.arange(0.5, len(data[0]) + 0.5))\nax.set_yticks(np.arange(0.5, len(data) + 0.5))\nax.set_xticklabels(['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Abstain'])\nax.set_yticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'])\nax.set_title('Role voting in the Werewolf game', fontsize=16, fontweight='bold')\n\n# Add a colorbar\nsm = plt.cm.ScalarMappable(cmap=plt.cm.viridis, norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Percentage', fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nresponses = [\n    [169, 547, 662, 271, 1248],\n    [115, 439, 753, 239, 1355],\n    [219, 585, 557, 259, 1269],\n    [67, 941, 708, 432, 732],\n    [177, 554, 661, 235, 1246]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('viridis')\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(range(len(responses[i])), responses[i], color=cmap(i / len(categories)), label=category)\n\n# Set labels and title\nax.set_xlabel('Response Action Category')\nax.set_ylabel('Value')\nax.set_title('Question Type: All three types of questions')\nax.legend()\n\n# Set x-ticks and labels\nax.set_xticks(range(len(responses[0])))\nax.set_xticklabels(['0', '1', '2', '3', '5'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for the original and adjusted values\nbars_original = ax.bar(index - bar_width/2, original_values, bar_width, label='Original', color='skyblue')\nbars_adjusted = ax.bar(index + bar_width/2, adjusted_values, bar_width, label='Adjusted', color='lightcoral')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Emotion', fontsize=12)\nax.set_ylabel('Intensity', fontsize=12)\nax.set_title('Comparison of Emotion Intensity', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars_original)\nadd_value_labels(bars_adjusted)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\nvotess = ['Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', 'Vottee', '"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [17, 24, 23],\n    [3, 8, 17],\n    [5, 10, 1],\n    [13, 20, 9],\n    [15, 24, 1]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='YlGnBu', interpolation='nearest')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['#17', '#24', '#23'])\nax.set_yticklabels(['#3', '#8', '#17'])\nax.set_title('LLaMA')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny = np.array([0.1, 0.22, 0.3, 0.44, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with specific styling\nax.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Sample Plot')\n\n# Add grid for better readability\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley']\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021]\nvalues = [\n    [0.8, 2.4, 2.5, 3.9, 0.0],\n    [2.4, 0.0, 4.0, 1.0, 0.0],\n    [1.1, 2.4, 0.8, 4.3, 0.0],\n    [0.6, 0.0, 0.3, 3.1, 0.0],\n    [0.7, 1.7, 0.6, 2.6, 0.0],\n    [1.3, 1.2, 0.0, 0.0, 0.0],\n    [0.1, 2.0, 0.0, 0.0, 0.0]\n]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('Blues')\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(years, values[i], bottom=np.sum(values[:i], axis=0), label=category, color=cmap(i / len(categories)))\n\n# Add labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Harvest [t/year]')\nax.set_title('Harvest by Category Over Years')\nax.legend(title='Category')\n\n# Set the x-ticks\nax.set_xticks(years)\nax.set_xticklabels([str(year) for year in years])\n\n# Set the y-limits\nax.set_ylim(0, 6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvest = [0.8, 2.4, 1.1, 0.6, 0.7, 0.1]\nweekly_sales = [6, 50, 30, 20, 10, 5]\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the first y-axis (weekly sales)\ncolor = 'tab:red'\nax1.set_xlabel('Product')\nax1.set_ylabel('Weekly Sales', color=color)\nax1.bar(categories, weekly_sales, color=color, alpha=0.7)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for another dataset\nax2 = ax1.twinx()\ncolor = 'tab:blue'\nax2.set_ylabel('Harvest', color=color)\nax2.plot(categories, harvest, color=color, marker='o', linestyle='--', linewidth=2, markersize=8)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Set title and labels\nplt.title('Harvest vs Weekly Sales by Product')\nax1.set_xticks(range(len(categories)))\nax1.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9]\n])\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(nrows=3, ncols=5, figsize=(9.0, 6.0))\n\n# Plot each dataset\nfor i in range(3):\n    for j in range(5):\n        ax = axes[i, j]\n        ax.imshow(data, cmap='viridis', interpolation='nearest')\n        ax.set_title(f'Plot {i*5 + j + 1}')\n        ax.axis('off')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with a colormap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add a color bar\nfig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes']\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\nsales_data = [\n    [1.5, 2.2, 1.8, 3.2, 0.5, 3.8, 0.3],\n    [2.8, 0.5, 3.6, 1.8, 0.6, 0.7, 0.6],\n    [1.0, 2.1, 0.9, 4.0, 1.5, 4.2, 0.4],\n    [0.7, 0.6, 0.4, 3.4, 2.3, 3.1, 0.6],\n    [0.9, 1.6, 2.0, 5.9, 1.6, 5.1, 0.5],\n    [1.2, 1.3, 0.5, 2.0, 2.3, 3.1, 0.8],\n    [0.3, 1.9, 0.6, 0.8, 1.8, 1.3, 5.9]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nfor i, vendor in enumerate(vendors):\n    ax.barh(categories, sales_data[i], left=np.sum(sales_data[:i], axis=0), color=plt.cm.viridis(i / len(vendors)), label=vendor)\n\n# Set labels and title\nax.set_xlabel('Sales (in tons/year)')\nax.set_title('Sales of vendors (in tons/year)')\n\n# Add a legend\nax.legend(title='Vendors')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Low', 'Medium', 'High']\nvalues = [17, 36, 28, 23]\nheights = [79, 53, 34, 35]\nwidths = [4, 5, 0, 75]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the bar chart with customized parameters\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Degree of acceptance of a product')\nax.set_ylabel('Number of responses')\nax.set_title('Degree of acceptance of a product')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [0.95, 0.85, 0.75, 0.65, 0.55],\n    [0.85, 0.75, 0.65, 0.55, 0.45],\n    [0.75, 0.65, 0.55, 0.45, 0.35],\n    [0.65, 0.55, 0.45, 0.35, 0.25],\n    [0.55, 0.45, 0.35, 0.25, 0.15]\n])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['a', 'b', 'c', 'd', 'e'])\nax.set_yticklabels(['a', 'b', 'c', 'd', 'e'])\n\n# Add grid lines\nax.grid(True, which='both', linestyle='-', linewidth=0.5)\n\n# Add annotations\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.text(j, i, f'{data[i][j]:.2f}', ha='center', va='center', color='white' if data[i][j] > 0.5 else 'black')\n\n# Set title and labels\nax.set_title('Sample Heatmap')\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2],\n    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4],\n    [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5],\n    [0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6],\n    [0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7],\n    [0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8],\n    [1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9]\n])\n\n# Create a heatmap using imshow\nheatmap = plt.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add a colorbar to the heatmap\ncbar = plt.colorbar(heatmap)\ncbar.set_label('Value')\n\n# Set labels for the axes\nplt.xlabel('Timeshift')\nplt.ylabel('Scales')\n\n# Set title of the plot\nplt.title(\"ROC's AUC\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 3.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Create a heatmap using imshow\nplt.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Add colorbar to the plot\ncbar = plt.colorbar()\ncbar.set_label('Intensity')\n\n# Set labels for the x and y axes\nplt.xlabel('Count')\nplt.ylabel('Categories')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [\n    [44, 12, 0, 0],\n    [35, 8, 24, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['Kokkos', 'Raja', 'OMP', 'OACC', 'SYCL', 'Native Port']\ndata = [\n    [876, 136, 435, 534, 322, 804],\n    [750, 1737, 742, 375, 750, 1825],\n    [764, 676, 782, 421, 925, 911],\n    [482, 120, 843, 1170, 925, 911]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#FFD700', '#FFA500', '#FF6347', '#FF4500', '#FF0000', '#8B0000']\n\n# Plot the data\nfor i, row in enumerate(data):\n    ax.bar(labels, row, bottom=np.sum(data[:i], axis=0), color=colors[i], label=f'Row {i+1}')\n\n# Set labels and title\nax.set_xlabel('Programming Model')\nax.set_ylabel('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_title('BabelStream triad Average Memory Bandwidth')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for correlation coefficients\ndata = np.array([\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.71, 0.82],\n    [0.90, 1.00, 0.93, 0.92, 0.67, 0.69, 0.72, 0.82],\n    [0.89, 0.93, 1.00, 0.95, 0.66, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 1.00, 0.68, 0.69, 0.72, 0.82],\n    [0.64, 0.65, 0.66, 0.68, 1.00, 0.85, 0.90, 0.86],\n    [0.65, 0.69, 0.69, 0.69, 0.85, 1.00, 0.90, 0.86],\n    [0.71, 0.72, 0.72, 0.72, 0.90, 0.90, 1.00, 0.89],\n    [0.82, 0.82, 0.82, 0.82, 0.86, 0.86, 0.89, 1.00]\n])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap with a color map\ncax = ax.matshow(data, cmap='coolwarm', fignum=1)\n\n# Add a color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(data)))\nax.set_yticks(np.arange(len(data)))\n\n# Set labels for each tick\nax.set_xticklabels(['en', 'fr', 'es', 'pt', 'bn', 'ur', 'hi', 'zh'])\nax.set_yticklabels(['en', 'fr', 'es', 'pt', 'bn', 'ur', 'hi', 'zh'])\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add a title to the plot\nplt.title('Correlation Coefficients')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.19, 0.62, 0.53, 0.52],\n    [0.16, 0.53, 0.50, 0.39],\n    [0.03, 0.24, 0.24, 0.20],\n    [0.07, 0.28, 0.26, 0.21],\n    [0.05, 0.26, 0.20, 0.06]\n])\n\n# Define labels for the x and y axes\nx_labels = ['ROUGE', 'BertScore', 'SimCSE', 'PMI']\ny_labels = ['LexRank', 'BERTScore', 'SimCSE', 'GPT-3.5', 'CrossAttn', 'PPL']\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='Blues')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(x_labels)))\nax.set_yticks(np.arange(len(y_labels)))\n\n# Set labels for the ticks\nax.set_xticklabels(x_labels)\nax.set_yticklabels(y_labels)\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add a title to the plot\nplt.title('Heatmap of LexRank vs Other Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=(5.0, 6.0))\n\n# Plot the first subplot\nim1 = axes[0].imshow(data, cmap='viridis', interpolation='nearest')\naxes[0].set_title('No / The')\naxes[0].set_xlabel('Layers')\naxes[0].set_ylabel('Endofoffset')\n\n# Add colorbar to the first subplot\ncbar1 = fig.colorbar(im1, ax=axes[0], orientation='vertical')\n\n# Plot the second subplot\nim2 = axes[1].imshow(data, cmap='viridis', interpolation='nearest')\naxes[1].set_title('No / The')\naxes[1].set_xlabel('Layers')\naxes[1].set_ylabel('Endofoffset')\n\n# Add colorbar to the second subplot\ncbar2 = fig.colorbar(im2, ax=axes[1], orientation='vertical')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of pairs vs Test Winning Distance\npairs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nwinning_distances = [\n    [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n    [15, 25, 35, 45, 55, 65, 75, 85, 95, 105],\n    [20, 30, 40, 50, 60, 70, 80, 90, 100, 110],\n    [25, 35, 45, 55, 65, 75, 85, 95, 105, 115],\n    [30, 40, 50, 60, 70, 80, 90, 100, 110, 120],\n    [35, 45, 55, 65, 75, 85, 95, 105, 115, 125],\n    [40, 50, 60, 70, 80, 90, 100, 110, 120, 130],\n    [45, 55, 65, 75, 85, 95, 105, 115, 125, 135],\n    [50, 60, 70, 80, 90, 100, 110, 120, 130, 140],\n    [55, 65, 75, 85, 95, 105, 115, 125, 135, 145]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with different colors and line styles\nfor i, data in enumerate(winning_distances):\n    ax.plot(pairs, data, label=f'Data Set {i+1}', linestyle='-', linewidth=2, marker='o', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Number of Pairs')\nax.set_ylabel('Test Winning Distance')\nax.set_title('Sample Data Visualization')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the plot\ncosine_similarity = np.array([\n    [0.95, 0.85],\n    [0.75, 0.65],\n    [0.55, 0.45],\n    [0.35, 0.25],\n    [0.15, 0.05]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data with a colormap\ncax = ax.imshow(cosine_similarity, cmap='viridis', interpolation='nearest')\n\n# Add a color bar to the plot\ncbar = fig.colorbar(cax)\n\n# Set labels and title\nax.set_xlabel('Cosine Similarity')\nax.set_ylabel('Cosine Similarity')\nax.set_title('Cosine Similarity Matrix')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.5, 2.5, 10)\ny = np.linspace(0.5, 2.5, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X) * np.cos(Y)\nZ2 = np.cos(X) * np.sin(Y)\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first subplot\ncax1 = axes[0, 0].contourf(X, Y, Z1, cmap='YlOrBr')\ncax2 = axes[0, 1].contourf(X, Y, Z2, cmap='Blues')\n\n# Add colorbars to each subplot\nfig.colorbar(cax1, ax=axes[0, 0], orientation='vertical')\nfig.colorbar(cax2, ax=axes[0, 1], orientation='vertical')\n\n# Set titles for each subplot\naxes[0, 0].set_title('Baseline')\naxes[0, 1].set_title('MIRL w/ MULT')\n\n# Plot the second subplot\ncax3 = axes[1, 0].contourf(X, Y, Z1 + Z2, cmap='YlOrBr')\ncax4 = axes[1, 1].contourf(X, Y, Z1 - Z2, cmap='Blues')\n\n# Add colorbars to each subplot\nfig.colorbar(cax3, ax=axes[1, 0], orientation='vertical')\nfig.colorbar(cax4, ax=axes[1, 1], orientation='vertical')\n\n# Set titles for each subplot\naxes[1, 0].set_title('MIRL + OCLR w/ MUL')\naxes[1, 1].set_title('MIRL + OCLR w/ DOTLA')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ndata = {\n    'MATHWELL': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'Llama-2': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'Lamma-2 MaC': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'LLEMMMA': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'LLEMMMA MaC': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'MAMmoTH': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'MAMmoTH MaC': (np.random.rand(100) * 10, np.random.rand(100) * 10)\n}\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(nrows=4, ncols=2, figsize=(7.0, 8.0), constrained_layout=True)\n\n# Plot each dataset in a separate subplot\nfor i, (name, (x, y)) in enumerate(data.items()):\n    ax = axes[i // 2, i % 2]\n    ax.scatter(x, y, alpha=0.5, label=name)\n    ax.set_title(name)\n    ax.set_xlabel('FKGL')\n    ax.set_ylabel('Density')\n    ax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Camels', 'Kangaroos']\nvalues = [\n    [100, 200, 300, 400, 500],\n    [150, 250, 350, 450, 550]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data\nbars = ax.bar(categories, values[0], color='blue', label='Camels')\nax.bar(categories, values[1], bottom=values[0], color='orange', label='Kangaroos')\n\n# Set labels and title\nax.set_xlabel('Species')\nax.set_ylabel('Frequency')\nax.set_title('Desert Animals in the Wild')\n\n# Add grid for better readability\nax.yaxis.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [10, 20, 30, 40, 50, 60, 70, 80],\n    [15, 25, 35, 45, 55, 65, 75, 85]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with a bar chart\nbar_width = 0.35\nindex = np.arange(len(data[0]))\nbars1 = ax.bar(index, data[0], bar_width, label='Uniform data', color='red')\nbars2 = ax.bar(index + bar_width, data[1], bar_width, label='Normal data', color='blue')\n\n# Add labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Frequency')\nax.set_title('Comparison of Uniform and Normal Distributions')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(['0', '2', '4', '6', '8', '10', '12', '14'])\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, int(yval), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Wind speed measurements\nwind_speeds = np.array([-2, -1, 0, 1, 2, 3, 4, 5, 6])\nmeasurements = np.array([100, 150, 200, 250, 300, 350, 400, 450, 500])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the histogram with specific parameters\nax.hist(measurements, bins=10, color='lightblue', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Wind Speed (km/h)')\nax.set_ylabel('Number of Measurements')\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['Category 1', 'Category 2', 'Category 3', 'Category 4']\nvalues = [120, 80, 60, 40]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Sample Bar Chart')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['XSum', 'CNN/DailyMail', 'NarrativeQA', 'NaturalQuestions - Closed-book', 'NaturalQuestions - Open-book', 'QuAC']\ntest_winning_distances = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\nnumber_of_pairs = [\n    [100, 90, 80, 70, 60, 50],\n    [110, 100, 90, 80, 70, 60],\n    [120, 110, 100, 90, 80, 70],\n    [130, 120, 110, 100, 90, 80],\n    [140, 130, 120, 110, 100, 90],\n    [150, 140, 130, 120, 110, 100]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh(test_winning_distances, number_of_pairs[i], left=np.arange(len(number_of_pairs[0])), height=0.2, label=category)\n\n# Set labels and title\nax.set_xlabel('Number of Pairs')\nax.set_ylabel('Test Winning Distance')\nax.set_title('Number of Pairs by Test Winning Distance and Category')\n\n# Add a legend\nax.legend(title='Category')\n\n# Set x-axis limits\nax.set_xlim(0, 160)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of nominations for different categories\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\nyears = [0, 50, 100, 150, 200, 250]\nnominations = [\n    [10, 15, 20, 25, 30, 35],  # Record of the Year\n    [5, 10, 15, 20, 25, 30],   # Album of the Year\n    [8, 12, 16, 20, 24, 28],   # Song of the Year\n    [7, 11, 15, 19, 23, 27],   # Best New Artist\n    [6, 10, 14, 18, 22, 26]    # Best Pop Solo Performance\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nfor i, category in enumerate(categories):\n    ax.barh(years, nominations[i], left=np.array(nominations[:i]).sum(axis=0), height=5, label=category, alpha=0.7)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Number of Nominations', fontsize=12, fontweight='bold')\nax.set_ylabel('Year', fontsize=12, fontweight='bold')\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add a legend with a more descriptive title\nax.legend(title='Categories', title_fontsize='12', fontsize='10')\n\n# Set x-axis limits for better focus\nax.set_xlim(0, 30)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 0.3, 100)\ny = np.linspace(0, 0.3, 100)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-10 * (X**2 + Y**2))\nZ2 = np.exp(-10 * ((X - 0.2)**2 + (Y - 0.2)**2))\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10.0, 7.0), constrained_layout=True)\n\n# Plot the first subplot\ncax1 = axes[0].contourf(X, Y, Z1, cmap='Blues')\ncax2 = axes[0].contourf(X, Y, Z2, cmap='Oranges', alpha=0.8)\naxes[0].set_title('MNIST - Defect Detection')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\n\n# Add colorbar to the first subplot\nfig.colorbar(cax1, ax=axes[0], orientation='vertical', label='Intensity')\n\n# Plot the second subplot\ncax3 = axes[1].contourf(X, Y, Z1, cmap='Greens')\ncax4 = axes[1].contourf(X, Y, Z2, cmap='Reds', alpha=0.8)\naxes[1].set_title('FashionMNIST - Defect Detection')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\n\n# Add colorbar to the second subplot\nfig.colorbar(cax3, ax=axes[1], orientation='vertical', label='Intensity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny1 = np.array([20, 30, 40, 50, 60, 70, 80])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75])\ny3 = np.array([10, 20, 30, 40, 50, 60, 70])\ny4 = np.array([5, 15, 25, 35, 45, 55, 65])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='SAM-dependent methyltransferase', color='royalblue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Thioredoxin-like', color='teal', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Tetratricopeptide-like helical domain', color='forestgreen', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='CheY-like', color='darkolivegreen', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('TM-score')\nax.set_ylabel('Frequency')\nax.set_title('Comparison of Different Models')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ndata = {\n    'Swiss': [0.2, 0.3, 0.4, 0.5, 0.6],\n    'New Zealand': [0.7, 0.8, 0.9, 1.0, 1.1]\n}\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plotting the first subplot\naxes[0, 0].bar(range(len(data['Swiss'])), data['Swiss'], color='blue', label='Swiss')\naxes[0, 0].bar(range(len(data['New Zealand'])), data['New Zealand'], color='orange', label='New Zealand', bottom=data['Swiss'])\naxes[0, 0].set_title('a. Milk Chocolate')\naxes[0, 0].set_xlabel('Sweetness')\naxes[0, 0].set_ylabel('Density')\naxes[0, 0].legend()\n\n# Plotting the second subplot\naxes[0, 1].bar(range(len(data['Swiss'])), data['Swiss'], color='blue', label='Swiss')\naxes[0, 1].bar(range(len(data['New Zealand'])), data['New Zealand'], color='orange', label='New Zealand', bottom=data['Swiss'])\naxes[0, 1].set_title('b. Dark Chocolate')\naxes[0, 1].set_xlabel('Sweetness')\naxes[0, 1].set_ylabel('Density')\naxes[0, 1].legend()\n\n# Plotting the third subplot\naxes[1, 0].bar(range(len(data['Swiss'])), data['Swiss'], color='blue', label='Swiss')\naxes[1, 0].bar(range(len(data['New Zealand'])), data['New Zealand'], color='orange', label='New Zealand', bottom=data['Swiss'])\naxes[1, 0].set_title('c. White Chocolate')\naxes[1, 0].set_xlabel('Sweetness')\naxes[1, 0].set_ylabel('Density')\naxes[1, 0].legend()\n\n# Plotting the fourth subplot\naxes[1, 1].bar(range(len(data['Swiss'])), data['Swiss'], color='blue', label='Swiss')\naxes[1, 1].bar(range(len(data['New Zealand'])), data['New Zealand'], color='orange', label='New Zealand', bottom=data['Swiss'])\naxes[1, 1].set_title('d. Ruby Chocolate')\naxes[1, 1].set_xlabel('Sweetness')\naxes[1, 1].set_ylabel('Density')\naxes[1, 1].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Class']\ndata = [\n    [1000, 100, 10, 1, 0.1, 0.01]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nbars = ax.bar(categories, data[0], color=['green', 'pink'])\n\n# Set labels and title\nax.set_xlabel('Concept Weight')\nax.set_ylabel('Count')\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\nx = np.array([-5.0, -2.5, 0.0, 2.5, 5.0, 7.5, 10.0])\ny_center = np.array([100, 80, 60, 40, 20, 10, 5])\ny_random = np.array([90, 70, 50, 30, 10, 5, 2])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data with different colors and styles\nax.bar(x, y_center, color='yellow', label='Center')\nax.bar(x, y_random, bottom=y_center, color='blue', label='Random')\n\n# Set labels and title\nax.set_xlabel('Distance Difference (Random vs. Center)')\nax.set_ylabel('Number of Examples')\nax.set_title('Comparison of Center and Random Samples')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.0, 2.5, 5.0, 7.5, 10.0])\ny = np.array([1000, 800, 600, 400, 200])\n\n# Create a new figure with specified size\nplt.figure(figsize=(4.0, 3.0))\n\n# Plot the data with a bar chart\nplt.bar(x, y, color='orange')\n\n# Set labels and title\nplt.xlabel('Number of Repetition')\nplt.ylabel('Number of Clusters')\nplt.title('Clusters vs Number of Repetition')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Confusion matrix for a classification model\ndata = np.array([[400, 10], [20, 8]])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the confusion matrix using a heatmap\ncax = ax.matshow(data, cmap='Blues', interpolation='nearest')\n\n# Add color bar to the plot\nfig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xlabel('Predicted')\nax.set_ylabel('Actual')\n\n# Set title of the plot\nax.set_title('Confusion Matrix')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Calibration error and confidence intervals\ncalibration_errors = [0.31]\nconfidence_intervals = [\n    [0.2, 0.4],\n    [0.4, 0.6],\n    [0.6, 0.8],\n    [0.8, 1.0]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the calibration error with a vertical line\nax.axvline(x=calibration_errors[0], color='red', linestyle='--', linewidth=2, label='Calibration Error')\n\n# Plot the confidence intervals as horizontal bars\nfor ci in confidence_intervals:\n    ax.barh([ci[0], ci[1]], [1, 1], left=[0, 0], height=0.2, color='lightgray', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Confidence in bin')\nax.set_ylabel('Calibration Error')\nax.set_title('Cascade')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of images overlapped and their frequency\nimages_overlapped = [0.2, 0.4, 0.6, 0.8]\nfrequency = [100, 200, 300, 400]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(images_overlapped, frequency, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('% images overlap')\nax.set_ylabel('Number of queries')\nax.set_title('Distribution of Queries Based on Image Overlap')\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, int(yval), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.random.normal(0.1, 0.05, 1000)\ny = np.random.normal(0.1, 0.05, 1000)\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10.0, 7.0))\n\n# Plot the first histogram\naxes[0].hist2d(x, y, bins=30, cmap='Blues')\naxes[0].set_title('MNIST')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\n\n# Plot the second histogram\naxes[1].hist2d(x, y, bins=30, cmap='Blues')\naxes[1].set_title('FashionMNIST')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: SNR (Signal-to-Noise Ratio) vs. Classification Accuracy\nsnr = np.array([5, 10, 15, 20])\naccuracy_jpegldpc = np.array([20, 40, 60, 80])\naccuracy_deepjssc_wofdm = np.array([30, 50, 70, 90])\naccuracy_deepjssc_owfdm = np.array([40, 60, 80, 100])\naccuracy_ours = np.array([50, 70, 90, 100])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(snr, accuracy_jpegldpc, label='JPEG+LDPC', color='b', linestyle='-', marker='o')\nax.plot(snr, accuracy_deepjssc_wofdm, label='DEEPJSCC w/o ofdm', color='orange', linestyle='--', marker='s')\nax.plot(snr, accuracy_deepjssc_owfdm, label='DEEPJSCC w/ ofdm', color='g', linestyle='-.', marker='^')\nax.plot(snr, accuracy_ours, label='OURS', color='r', linestyle=':', marker='*')\n\n# Set labels and title\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\nax.set_title('Comparison of Different Approaches for Image Classification')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn = np.arange(8)\ncontent = [1, 2, 3, 4, 5, 6, 7, 8]\norganization = [2, 3, 4, 5, 6, 7, 8, 9]\nlanguage = [3, 4, 5, 6, 7, 8, 9, 10]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(n, content, label='Content', color='b', linestyle='-', linewidth=2, marker='o')\nax.plot(n, organization, label='Organization', color='orange', linestyle='--', linewidth=2, marker='s')\nax.plot(n, language, label='Language', color='g', linestyle='-.', linewidth=2, marker='^')\n\n# Set labels and title\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Performance Metrics Over Time')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndecomposition_norms = np.arange(0, 81, 10)\nvocab_sizes = [10, 5]\naccuracies = {\n    'coco (10k)': [0.55, 0.6, 0.65, 0.7, 0.75],\n    'laion (10k)': [0.55, 0.6, 0.65, 0.7, 0.75],\n    'coco (5k)': [0.55, 0.6, 0.65, 0.7, 0.75],\n    'laion (5k)': [0.55, 0.6, 0.65, 0.7, 0.75]\n}\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot each line with different styles and colors\nfor vocab_size, accs in accuracies.items():\n    ax.plot(decomposition_norms, accs, label=vocab_size, marker='o', linestyle='-', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\nax.set_title('Effect of Vocabulary on Zero Shot Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.25, 0.5, 0.75, 1.0])\ny1 = np.array([0.03, 0.02, 0.01, 0.005])\ny2 = np.array([0.04, 0.03, 0.02, 0.015])\ny3 = np.array([0.05, 0.04, 0.03, 0.025])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='MAXN=512', color='green', marker='^', linestyle='-', linewidth=2)\nax.plot(x, y2, label='MAXN=1024', color='red', marker='s', linestyle='--', linewidth=2)\nax.plot(x, y3, label='MAXN=2048', color='blue', marker='o', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\nax.set_title('Comparison of Different MAXN Values')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 201)\ny1_base = np.sin(x / 50) + 0.3\ny1_ours = np.sin(x / 50) + 0.4\ny2_base = np.cos(x / 50) + 0.3\ny2_ours = np.cos(x / 50) + 0.4\ny3_base = np.tan(x / 50) + 0.3\ny3_ours = np.tan(x / 50) + 0.4\ny4_base = np.exp(-x / 100) + 0.3\ny4_ours = np.exp(-x / 100) + 0.4\ny5_base = np.log(x + 1) + 0.3\ny5_ours = np.log(x + 1) + 0.4\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(nrows=5, ncols=1, figsize=(8.0, 10.0), sharex=True)\n\n# Plot each dataset on a separate subplot\naxes[0].plot(x, y1_base, label='base', color='blue')\naxes[0].plot(x, y1_ours, label='ours', color='orange')\naxes[0].set_title('FID (dJ)')\naxes[0].set_ylabel('FID (dJ)')\naxes[0].legend()\n\naxes[1].plot(x, y2_base, label='base', color='blue')\naxes[1].plot(x, y2_ours, label='ours', color='orange')\naxes[1].set_title('IS (t)')\naxes[1].set_ylabel('IS (t)')\naxes[1].legend()\n\naxes[2].plot(x, y3_base, label='base', color='blue')\naxes[2].plot(x, y3_ours, label='ours', color='orange')\naxes[2].set_title('CS (t)')\naxes[2].set_ylabel('CS (t)')\naxes[2].legend()\n\naxes[3].plot(x, y4_base, label='base', color='blue')\naxes[3].plot(x, y4_ours, label='ours', color='orange')\naxes[3].set_title('CW-FID (t)')\naxes[3].set_ylabel('CW-FID (t)')\naxes[3].legend()\n\naxes[4].plot(x, y5_base, label='base', color='blue')\naxes[4].plot(x, y5_ours, label='ours', color='orange')\naxes[4].set_title('CAS (t)')\naxes[4].set_xlabel('Training iterations')\naxes[4].set_ylabel('CAS (t)')\naxes[4].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\ny1 = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55])\ny2 = np.array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, color='red', linestyle='-', linewidth=2, marker='o', markersize=5, label='Auto-profiled')\nax.plot(x, y2, color='blue', linestyle='--', linewidth=2, marker='s', markersize=5, label='Manually-analyzed')\n\n# Set labels and title\nax.set_xlabel('Week')\nax.set_ylabel('Normalized Value')\nax.set_title('Comparison of Auto-profiled vs Manually-analyzed')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average accuracy of different models over tasks\ntasks = np.arange(1, 21)\nba_ce = np.array([95, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75])\nlwf = np.array([85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66])\newc = np.array([75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56])\nseq = np.array([60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(tasks, ba_ce, label='BaCE', color='blue', marker='s', linestyle='-', linewidth=2)\nax.plot(tasks, lwf, label='LWF', color='red', marker='o', linestyle='--', linewidth=2)\nax.plot(tasks, ewc, label='EWC', color='purple', marker='^', linestyle='-.', linewidth=2)\nax.plot(tasks, seq, label='SEQ', color='pink', marker='D', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Comparison of Different Models Over Tasks')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the lines\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 10)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Oesense', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='KWS', color='r', linestyle='--', marker='s')\nax.plot(x, y3, label='ECG5000', color='g', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Unertainty threshold')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Models')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 120, 13)\ny = np.log10(1000 / (x + 1))\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y, color='b', linestyle='-', linewidth=2)\n\n# Set labels\nax.set_xlabel('Number of Parameters')\nax.set_ylabel('Log KL Divergence')\n\n# Set limits for better visualization\nax.set_xlim(0, 120)\nax.set_ylim(-5, -3)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 2000, 100)\ny1 = np.sin(x / 500) * 0.8 + 0.6\ny2 = np.sin(x / 500) * 0.6 + 0.4\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='7B', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='7B (Fine-tuned)', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Iterations')\nax.set_ylabel('Attack Success Rate')\nax.set_title('GPT-4 Evaluation')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(-2, 0, 10)\ny1 = np.array([40, 50, 60, 70, 80, 90, 95, 98, 99, 100])\ny2 = np.array([45, 55, 65, 75, 85, 95, 97, 99, 99.5, 100])\ny3 = np.array([50, 60, 70, 80, 90, 95, 98, 99, 99.5, 100])\n\n# Create a new figure with specified size\nplt.figure(figsize=(5.0, 4.0))\n\n# Plot the data with different styles\nplt.plot(x, y1, label='Full', color='green', linestyle='-', marker='o')\nplt.plot(x, y2, label='SPT', color='red', linestyle='--', marker='s')\nplt.plot(x, y3, label='VPT', color='blue', linestyle='-.', marker='^')\n\n# Set labels and title\nplt.xlabel('Fraction of training data (log scale)')\nplt.ylabel('Test accuracy (%)')\nplt.title('Comparison of Test Accuracy')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 50, 100, 150, 200])\ny1 = np.array([0.5, 1.2, 1.8, 1.5, 0.7])\ny2 = np.array([1.0, 1.5, 1.3, 0.9, 0.6])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Dataset 1', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Dataset 2', color='orange', linestyle='--', linewidth=2)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Performance')\nax.set_title('Comparison of Two Datasets')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nratio_r = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\nperformance_molhiv = np.array([\n    [0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72],\n    [0.70, 0.70, 0.70, 0.70, 0.70]\n])\n\nperformance_mnist75sp = np.array([\n    [0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72],\n    [0.70, 0.70, 0.70, 0.70, 0.70]\n])\n\nperformance_spmotif05 = np.array([\n    [0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72],\n    [0.70, 0.70, 0.70, 0.70, 0.70]\n])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(16.0, 8.0))\n\n# Plot the first subplot\naxes[0, 0].plot(ratio_r, performance_molhiv[0], label='PNA + ours', color='purple')\naxes[0, 0].plot(ratio_r, performance_molhiv[1], label='GIN + ours', color='orange')\naxes[0, 0].plot(ratio_r, performance_molhiv[2], label='PNA + GSAT', color='purple', linestyle='--')\naxes[0, 0].plot(ratio_r, performance_molhiv[3], label='GIN + GSAT', color='orange', linestyle='--')\naxes[0, 0].set_title('MOLHIV')\naxes[0, 0].set_xlabel('Ratio r')\naxes[0, 0].set_ylabel('Performance')\naxes[0, 0].legend()\n\n# Plot the second subplot\naxes[0, 1].plot(ratio_r, performance_mnist75sp[0], label='PNA + ours', color='purple')\naxes[0, 1].plot(ratio_r, performance_mnist75sp[1], label='GIN + ours', color='orange')\naxes[0, 1].plot(ratio_r, performance_mnist75sp[2], label='PNA + GSAT', color='purple', linestyle='--')\naxes[0, 1].plot(ratio_r, performance_mnist75sp[3], label='GIN + GSAT', color='orange', linestyle='--')\naxes[0, 1].set_title('MNIST-75SP')\naxes[0, 1].set_xlabel('Ratio r')\naxes[0, 1].set_ylabel('Performance')\naxes[0, 1].legend()\n\n# Plot the third subplot\naxes[1, 0].plot(ratio_r, performance_spmotif05[0], label='PNA + ours', color='purple')\naxes[1, 0].plot(ratio_r, performance_spmotif05[1], label='GIN + ours', color='orange')\naxes[1, 0].plot(ratio_r, performance_spmotif05[2], label='PNA + GSAT', color='purple', linestyle='--')\naxes[1, 0].plot(ratio_r, performance_spmotif05[3], label='GIN + GSAT', color='orange', linestyle='--')\naxes[1, 0].set_title('SPMotif-0.5')\naxes[1, 0].set_xlabel('Ratio r')\naxes[1, 0].set_ylabel('Performance')\naxes[1, 0].legend()\n\n# Plot the fourth subplot\naxes[1, 1].plot(ratio_r, performance_spmotif05[0], label='PNA + ours', color='purple')\naxes[1, 1].plot(ratio_r, performance_spmotif05[1], label='GIN + ours', color='orange')\naxes[1, 1].plot(ratio_r, performance_spmotif05[2], label='PNA + GSAT', color='purple', linestyle='--')\naxes[1, 1].plot(ratio_r, performance_spmotif05[3], label='GIN + GSAT', color='orange', linestyle='--')\naxes[1, 1].set_title('SPMotif-0.5')\naxes[1, 1].set_xlabel('Ratio r')\naxes[1, 1].set_ylabel('Performance')\naxes[1, 1].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nimbalance_ratios = np.array([120, 90, 60, 30, 1])\nours_accuracies = np.array([75.0, 80.0, 82.5, 85.0, 87.5])\nacr_accuracies = np.array([77.5, 80.0, 82.5, 85.0, 87.5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(imbalance_ratios, ours_accuracies, 'bo-', label='Ours', linewidth=2, markersize=8)\nax.plot(imbalance_ratios, acr_accuracies, 'go-', label='ACR', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Comparison of Ours and ACR on Imbalanced Datasets')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([40, 50, 60, 70, 80, 90, 100])\ny1 = np.array([2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94])\ny2 = np.array([3.11, 3.32, 3.53, 3.63, 3.74, 3.94, 4.14])\ny3 = np.array([3.32, 3.53, 3.63, 3.74, 3.94, 4.14, 4.34])\ny4 = np.array([3.53, 3.63, 3.74, 3.94, 4.14, 4.34, 4.54])\ny5 = np.array([3.63, 3.74, 3.94, 4.14, 4.34, 4.54, 4.74])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='APTQ', color='b', linestyle='-', linewidth=2)\nax.plot(x, y2, label='LLaMa-7B (FP16): 5.22', color='m', linestyle='--', linewidth=2)\nax.plot(x, y3, label='OWQ-4bit: 5.56', color='y', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='GPTQ-4bit: 5.62', color='g', linestyle=':', linewidth=2)\nax.plot(x, y5, label='LLM-QAT-4bit: 7.4', color='r', linestyle='-', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\nax.set_title('Perplexity vs. Ratio of 4-bit Utilization')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7])\ny = np.array([67.32, 82.98, 89.53, 90.47, 92.41, 93.7, 96.75])\n\n# Create a new figure with specified size\nplt.figure(figsize=(5.0, 2.0))\n\n# Plot the data with specific styling\nplt.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=5)\n\n# Set labels and title\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.exp(-x / 2)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with a line style and color\nax.plot(x, y, label='Average', color='b', linestyle='-', linewidth=2)\n\n# Add a shaded region to represent standard deviation\nstd_dev = 0.1 * y\nax.fill_between(x, y - std_dev, y + std_dev, color='lightblue', alpha=0.5, label='Standard Deviation')\n\n# Set labels and title\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\nax.set_title('Convergence of N-ELBO over Iterations')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6])\ny2 = np.array([2.5, 2.7, 2.9, 3.1, 3.3, 3.5, 3.7, 3.9])\ny3 = np.array([2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Baseline', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='SoftMoE', color='green', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Top1-MoE', color='purple', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN')\nax.set_title('IQM Human Normalized Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nvocab_sizes = np.array([256, 512, 1024, 2048, 4096, 8192, 16384])\ntpr_bpe = np.array([0.4, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98])\ntpr_wordpunct = np.array([0.45, 0.65, 0.75, 0.85, 0.95, 0.97, 0.99])\ntpr_whitespace = np.array([0.5, 0.7, 0.8, 0.9, 0.95, 0.96, 0.995])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(vocab_sizes, tpr_bpe, label='BPE', color='b', linestyle='-', marker='o')\nax.plot(vocab_sizes, tpr_wordpunct, label='Wordpunct', color='orange', linestyle='--', marker='s')\nax.plot(vocab_sizes, tpr_whitespace, label='Whitespaces', color='green', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Vocabulary Size')\nax.set_ylabel('Test set TPR | FPR = 10^-4')\nax.set_title('Test set TPR | FPR = 10^-4')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncompression_rate = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\nword_error_rate_cnn = np.array([26.0, 28.6, 30.2, 32.7, 34.4, 36.8, 38.6, 40.2, 41.9, 43.5, 45.0, 46.5, 48.0, 49.5, 51.0, 52.5, 54.0, 55.5, 57.0, 58.5, 60.0, 61.5, 63.0, 64.5, 66.0, 67.5, 69.0, 70.5, 72.0, 73.5])\nword_error_rate_cif = np.array([17.9, 19.8, 21.7, 23.6, 25.5, 27.4, 29.3, 31.2, 33.1, 35.0, 36.9, 38.8, 40.7, 42.6, 44.5, 46.4, 48.3, 50.2, 52.1, 54.0, 55.9, 57.8, 59.7, 61.6, 63.5, 65.4, 67.3, 69.2, 71.1, 73.0])\nword_error_rate_star = np.array([15.8, 17.7, 19.6, 21.5, 23.4, 25.3, 27.2, 29.1, 31.0, 32.9, 34.8, 36.7, 38.6, 40.5, 42.4, 44.3, 46.2, 48.1, 50.0, 51.9, 53.8, 55.7, 57.6, 59.5, 61.4, 63.3, 65.2, 67.1, 69.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(compression_rate, word_error_rate_cnn, label='CNN', color='orange', linestyle='--', marker='o')\nax.plot(compression_rate, word_error_rate_cif, label='CIF', color='purple', linestyle='-', marker='s')\nax.plot(compression_rate, word_error_rate_star, label='STAR', color='black', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\nax.set_title('Word Error Rate vs Compression Rate')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([25, 50, 75, 100, 125, 150, 175, 200])\ny1 = np.array([0.85, 0.88, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97])\ny2 = np.array([0.75, 0.78, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87])\ny3 = np.array([0.70, 0.73, 0.77, 0.78, 0.79, 0.80, 0.81, 0.82])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, 'ro-', label='PILOTE')\nax.plot(x, y2, 'bo-', label='Re-trained model')\nax.plot(x, y3, 'go-', label='Pre-trained model accuracy')\n\n# Set labels and title\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\nax.set_title('Comparison of Models')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(21)\ny1 = np.linspace(0.1, 2.75, 21)\ny2 = np.linspace(0.1, 2.75, 21)\n\n# Create a new figure with specified size\nplt.figure(figsize=(4.0, 3.0))\n\n# Plot the data with different styles\nplt.plot(x, y1, color='navy', linestyle='-', linewidth=2, marker='o', markersize=5, label='xLLM')\nplt.plot(x, y2, color='red', linestyle='--', linewidth=2, marker='s', markersize=5, label='Single-Pass LLM')\n\n# Set labels and title\nplt.xlabel('# of Steps')\nplt.ylabel('Avg Fidelity')\nplt.title('Fidelity vs Number of Steps')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7])\ny1 = np.array([80, 70, 60, 50, 40, 30, 20])\ny2 = np.array([70, 60, 50, 40, 30, 20, 10])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='ogbl-collab', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='ogbl-ppa', color='r', linestyle='--', marker='s')\n\n# Set labels and title\nax.set_xlabel('Hits@50')\nax.set_ylabel('Values')\nax.set_title('Comparison of Two Metrics')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 4, 6, 8, 10, 12])\ny1 = np.array([0.05, 0.05, 0.05, 0.05, 0.05, 0.05])\ny2 = np.array([0.035, 0.035, 0.035, 0.035, 0.035, 0.035])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='outside-code-diff', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='inside-code-diff', color='r', linestyle='--', marker='s')\n\n# Set labels and title\nax.set_xlabel('Layer')\nax.set_ylabel('Value')\nax.set_title('Android')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([6, 7, 8, 9])\ny1 = np.array([0.5, 0.7, 0.8, 0.9])\ny2 = np.array([0.4, 0.6, 0.7, 0.8])\ny3 = np.array([0.3, 0.5, 0.6, 0.7])\ny4 = np.array([0.2, 0.4, 0.5, 0.6])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Direct (100 samples)', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='RFFT (100 samples)', color='g', linestyle='--', marker='s')\nax.plot(x, y3, label='Scratchpad (100 samples)', color='y', linestyle='-.', marker='^')\nax.plot(x, y4, label='Scratchpad (5000 samples)', color='r', linestyle=':', marker='D')\n\n# Set labels and title\nax.set_xlabel('Digit Length')\nax.set_ylabel('Digit Accuracy')\nax.set_title('Digit Recognition Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 80, 100)\ny1 = 0.325 * x + 0.225\ny2 = 0.325 * x + 0.225\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, 'o', label='iaon')\nax.plot(x, y2, '-', label='CLIP')\n\n# Set labels and title\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([20, 40, 60, 80, 100])\ny1 = np.array([0.5, 0.55, 0.6, 0.65, 0.7])\ny2 = np.array([0.52, 0.57, 0.62, 0.67, 0.72])\ny3 = np.array([0.53, 0.58, 0.63, 0.68, 0.73])\ny4 = np.array([0.54, 0.59, 0.64, 0.69, 0.74])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='CNN', color='orange', marker='o', linestyle='-', linewidth=2)\nax.plot(x, y2, label='CNN+HMM', color='red', marker='^', linestyle='--', linewidth=2)\nax.plot(x, y3, label='RF', color='blue', marker='s', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='RF+HMM', color='purple', marker='D', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\nax.set_title('Performance Comparison')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51])\ny2 = np.array([6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.1])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='LibriCSS (test)', color='royalblue', linestyle='-', marker='o', markersize=8)\nax.plot(x, y2, label='AMI (dev)', color='darkorange', linestyle='--', marker='^', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\nax.set_title('WER vs Number of Microphones')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Set limits for x and y axes\nax.set_xlim(1, 9)\nax.set_ylim(2, 28)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(-7, -4, 100)\ny1 = np.exp(x) + np.random.normal(0, 0.1, 100)\ny2 = np.exp(x) + np.random.normal(0, 0.1, 100)\ny3 = np.exp(x) + np.random.normal(0, 0.1, 100)\ny4 = np.exp(x) + np.random.normal(0, 0.1, 100)\ny5 = np.exp(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, color='orange', linestyle='--', linewidth=2, label='M-LVQ-4x8-10')\nax.plot(x, y2, color='green', linestyle='--', linewidth=2, label='M-LVQ-4x8-100')\nax.plot(x, y3, color='orange', linestyle='-', linewidth=2, label='M-LVQ-4x8-256')\nax.plot(x, y4, color='purple', linestyle='--', linewidth=2, label='M-LVQ-4x8')\nax.plot(x, y5, color='blue', linestyle='-', linewidth=2, label='empirical relat. (B2=8.0)')\n\n# Set labels and title\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\nax.set_title('Comparison of Different Models')\n\n# Add a legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.1, 1.0, 10)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='PNA + ours', color='purple', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Gin + ours', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\nax.set_title('SPMotif-0.5')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nensemble_sizes = np.array([6, 9, 12, 15, 18, 21, 24, 27, 30])\naccuracies = np.array([74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0])\n\n# Create a new figure with specified size\nplt.figure(figsize=(6.0, 5.0))\n\n# Plot the data\nplt.plot(ensemble_sizes, accuracies, color='blue', linewidth=2)\n\n# Set labels and title\nplt.xlabel('Ensemble Size')\nplt.ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([3, 10, 30])\ny1 = np.array([0.5, 0.4, 0.6])\ny2 = np.array([0.7, 0.8, 0.9])\ny3 = np.array([0.3, 0.4, 0.5])\n\n# Create a new figure with specified size\nplt.figure(figsize=(6.0, 3.0))\n\n# Plot the data with different styles and labels\nplt.plot(x, y1, label='GPT-Neo', color='darkred', linestyle='--', marker='o')\nplt.plot(x, y2, label='5', color='orange', linestyle='-', marker='s')\nplt.plot(x, y3, label='3', color='green', linestyle='-.', marker='^')\n\n# Set labels and title\nplt.xlabel('# Epochs')\nplt.ylabel('MA')\nplt.title('Performance Metrics Over Epochs')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([96, 192, 336, 720])\ny1 = np.array([0.135, 0.145, 0.145, 0.155])\ny2 = np.array([0.135, 0.145, 0.145, 0.155])\ny3 = np.array([0.135, 0.145, 0.145, 0.155])\ny4 = np.array([0.135, 0.145, 0.145, 0.155])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(15.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='pred_length=96', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='pred_length=192', color='orange', linestyle='--', marker='s')\nax.plot(x, y3, label='pred_length=336', color='g', linestyle='-.', marker='^')\nax.plot(x, y4, label='pred_length=720', color='r', linestyle=':', marker='*')\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_title('Sample Plot')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([224, 128, 64, 32])\ny1 = np.array([70, 50, 30, 10])\ny2 = np.array([80, 60, 40, 20])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='ImageNet-1k', color='orange', linestyle='-', marker='o')\nax.plot(x, y2, label='ImageNet-C/P (Fog)', color='darkorange', linestyle='--', marker='s')\n\n# Set labels and title\nax.set_xlabel('n')\nax.set_ylabel('Top-1 Acc.')\nax.set_title('Serial (n=8, m=1) vs Parallel (n=2, m=4)')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([5.0, 7.0, 10.0, 12.5, 15.0, 20.0, 22.5, 25.0])\ny1 = np.array([95, 85, 75, 65, 55, 45, 35, 25])\ny2 = np.array([85, 75, 65, 55, 45, 35, 25, 15])\ny3 = np.array([75, 65, 55, 45, 35, 25, 15, 5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='JPEG+LDPC', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='DEEPJSCC w/o OFDM', color='orange', linestyle='--', marker='^')\nax.plot(x, y3, label='DEEPJSCC w/ OFDM', color='green', linestyle='-.', marker='s')\n\n# Set labels and title\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\nax.set_title('Comparison of Different Techniques')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 50) + np.random.normal(0, 0.1, 100)\ny2 = x**2 / 10000 + np.random.normal(0, 0.1, 100)\ny3 = np.exp(x / 50) + np.random.normal(0, 0.1, 100)\ny4 = np.log(x + 1) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Line 1 (Sinusoidal)', color='purple', linestyle='-', marker='o', markersize=5, linewidth=2)\nax.plot(x, y2, label='Line 2 (Quadratic)', color='blue', linestyle='--', marker='s', markersize=5, linewidth=2)\nax.plot(x, y3, label='Line 3 (Random Noise)', color='green', linestyle='-.', marker='^', markersize=5, linewidth=2)\nax.plot(x, y4, label='Line 4 (Exponential Focus)', color='red', linestyle=':', marker='D', markersize=5, linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Performance Value')\nax.set_title('Comparison of Different Line Styles')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 50, 100, 150, 200])\ny1 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\ny2 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\ny3 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, 'o-', label='Line 1', color='orange')\nax.plot(x, y2, 's-', label='Line 2', color='blue')\nax.plot(x, y3, '^--', label='Line 3', color='green')\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\nax.set_title('Comparison of Polynomial Trends')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([60, 65, 70, 75, 80, 85, 90, 95, 100, 105])\ny2 = np.array([55, 60, 65, 70, 75, 80, 85, 90, 95, 100])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='ogbl-collab 2022', color='blue', linestyle='-', marker='o')\nax.plot(x, y2, label='ogbl-collab 2023', color='green', linestyle='--', marker='s')\n\n# Set labels and title\nax.set_xlabel('Epoch')\nax.set_ylabel('Hits@50')\nax.set_title('ogbl-collab Results')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60])\ny1 = np.array([1e-10, 1e-8, 1e-6, 1e-4, 1e-2, 1e-1])\ny2 = np.array([1e-12, 1e-10, 1e-8, 1e-6, 1e-4, 1e-2])\ny3 = np.array([1e-14, 1e-12, 1e-10, 1e-8, 1e-6, 1e-4])\ny4 = np.array([1e-16, 1e-14, 1e-12, 1e-10, 1e-8, 1e-6])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Standard', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='Constrained', color='r', linestyle='--', marker='s')\nax.plot(x, y3, label='Experimental', color='g', linestyle='-.', marker='^')\nax.plot(x, y4, label='Hypothetical', color='m', linestyle=':', marker='p')\n\n# Set labels and title\nax.set_xlabel('N')\nax.set_ylabel('Precision')\nax.set_title('Comparison of Different Models')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nN = np.array([1, 2, 3, 4, 5, 6])\nPeak_Performance_1 = np.array([1.2, 1.5, 1.8, 2.1, 2.4, 2.7])\nPrecision_1 = np.array([1.1, 1.4, 1.7, 2.0, 2.3, 2.6])\n\nPeak_Performance_2 = np.array([1.3, 1.6, 1.9, 2.2, 2.5, 2.8])\nPrecision_2 = np.array([1.2, 1.5, 1.8, 2.1, 2.4, 2.7])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(12.0, 8.0))\n\n# Plot the first graph\nplt.subplot(2, 2, 1)\nplt.plot(N, Peak_Performance_1, label='Peak Performance', color='purple')\nplt.scatter(N, Peak_Performance_1, color='purple', marker='o')\nplt.title('Graph Variation 1')\nplt.xlabel('N')\nplt.ylabel('Peak Performance')\nplt.legend()\n\n# Plot the second graph\nplt.subplot(2, 2, 2)\nplt.plot(N, Precision_1, label='Precision', color='purple')\nplt.scatter(N, Precision_1, color='purple', marker='o')\nplt.title('Graph Variation 1')\nplt.xlabel('N')\nplt.ylabel('Precision')\nplt.legend()\n\n# Plot the third graph\nplt.subplot(2, 2, 3)\nplt.plot(N, Peak_Performance_2, label='Peak Performance', color='purple')\nplt.scatter(N, Peak_Performance_2, color='purple', marker='o')\nplt.title('Graph Variation 2')\nplt.xlabel('N')\nplt.ylabel('Peak Performance')\nplt.legend()\n\n# Plot the fourth graph\nplt.subplot(2, 2, 4)\nplt.plot(N, Precision_2, label='Precision', color='purple')\nplt.scatter(N, Precision_2, color='purple', marker='o')\nplt.title('Graph Variation 2')\nplt.xlabel('N')\nplt.ylabel('Precision')\nplt.legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the first dataset with a blue color and a dashed line style\nax.plot(x, y1, color='b', linestyle='--', label='Standard Activity')\n\n# Plot the second dataset with a red color and a solid line style\nax.plot(x, y2, color='r', linestyle='-', label='Innovative Activity')\n\n# Set labels for the axes\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\n\n# Set a title for the plot\nax.set_title('Daytime Activity Monitoring')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 12, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Standard Performance', color='blue', linewidth=2)\nax.plot(x, y2, label='Innovative Performance', color='red', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Time (Months)')\nax.set_ylabel('Performance Index')\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Add a legend\nax.legend()\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Monthly sales and average temperature over a year\nmonths = np.arange(1, 13)\nmonthly_sales = np.array([1200, 1150, 1100, 1050, 1000, 950, 900, 850, 800, 750, 700, 650])\naverage_temperature = np.array([20, 21, 22, 23, 24, 25, 26, 25, 24, 23, 22, 21])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(months, monthly_sales, label='Monthly Sales', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=8, markerfacecolor='white')\nax.plot(months, average_temperature, label='Average Temperature', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=8, markerfacecolor='white')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Month', fontsize=12, fontweight='bold')\nax.set_ylabel('Sales and Temperature (\u00b0C)', fontsize=12, fontweight='bold')\nax.set_title('Sales and Temperature Correlation Over a Year', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(months)\nax.set_yticks(np.arange(800, 1300, 100))\nax.set_yticklabels([f'{y}' for y in range(800, 1300, 100)], fontsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ntime = np.arange(10)\ngrowth_values = np.array([1.2, 0.8, 0.5, 0.3, 0.2, 0.15, 0.1, 0.08, 0.05, 0.03])\ndecay_values = np.array([1.2, 0.8, 0.6, 0.4, 0.3, 0.25, 0.2, 0.18, 0.15, 0.12])\noscillation_values = np.array([1.0, 0.8, 0.6, 0.4, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005])\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(6.0, 9.0))\n\n# Plot the first subplot\naxes[0].plot(time, growth_values, color='green', marker='o', linestyle='-', linewidth=2, markersize=5)\naxes[0].set_title('Exponential Growth Over Time')\naxes[0].set_xlabel('Time')\naxes[0].set_ylabel('Value')\n\n# Plot the second subplot\naxes[1].plot(time, decay_values, color='red', marker='x', linestyle='--', linewidth=2, markersize=5)\naxes[1].set_title('Exponential Decay Over Time')\naxes[1].set_xlabel('Time')\naxes[1].set_ylabel('Value')\n\n# Plot the third subplot\naxes[2].plot(time, oscillation_values, color='blue', marker='s', linestyle='-.', linewidth=2, markersize=5)\naxes[2].set_title('Oscillatory Behavior Over Time')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Value')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\ny3 = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='5-shot direct', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='5-shot scratchpad', color='r', linestyle='--', marker='s')\nax.plot(x, y3, label='5-shot rule-following', color='g', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Different Models')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 20, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.cos(x) + np.random.normal(0, 0.1, 100)\ny3 = np.cumsum(y1)\ny4 = np.cumsum(y2)\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(5.0, 10.0))\n\n# Plot the first subplot: Smoothed Data\naxes[0].plot(x, y1, color='purple', label='Smoothed Data')\naxes[0].set_title('Smoothed Representation')\naxes[0].set_xlabel('Time')\naxes[0].set_ylabel('Value')\naxes[0].legend()\n\n# Plot the second subplot: First Difference of Data\naxes[1].plot(x, y2, color='orange', label='Difference Data')\naxes[1].set_title('First Difference of Data')\naxes[1].set_xlabel('Time')\naxes[1].set_ylabel('Delta Value')\naxes[1].legend()\n\n# Plot the third subplot: Cumulative Sum Over Time\naxes[2].plot(x, y3, color='green', label='Cumulative Sum')\naxes[2].plot(x, y4, color='darkgreen', linestyle='--', label='Cumulative Sum')\naxes[2].set_title('Cumulative Sum Over Time')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Cumulative Value')\naxes[2].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.exp(-x / 5)\ny4 = np.log(x + 1)\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(nrows=4, ncols=1, figsize=(6.0, 12.0))\n\n# Plot the first subplot: Sin Wave\naxes[0].plot(x, y1, color='purple', label='Sin Wave')\naxes[0].set_title('Sin Wave')\naxes[0].set_xlabel('Time')\naxes[0].set_ylabel('Amplitude')\naxes[0].legend()\n\n# Plot the second subplot: Cos Wave\naxes[1].plot(x, y2, color='green', label='Cos Wave')\naxes[1].set_title('Cos Wave')\naxes[1].set_xlabel('Time')\naxes[1].set_ylabel('Amplitude')\naxes[1].legend()\n\n# Plot the third subplot: Exp Decay\naxes[2].plot(x, y3, color='blue', label='Exp Decay')\naxes[2].set_title('Exponential Decay')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Value')\naxes[2].legend()\n\n# Plot the fourth subplot: Log Growth\naxes[3].plot(x, y4, color='red', label='Log Growth')\naxes[3].set_title('Logarithmic Growth')\naxes[3].set_xlabel('Time')\naxes[3].set_ylabel('Value')\naxes[3].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 10)\ny1 = np.sin(x * np.pi / 2)\ny2 = np.cos(x * np.pi / 2)\ny3 = np.tan(x * np.pi / 2)\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9.0, 6.0))\n\n# Plot the first subplot\naxes[0, 0].plot(x, y1, 'b-', label='Positive bound')\naxes[0, 0].set_title('a')\naxes[0, 0].set_xlabel('X-axis')\naxes[0, 0].set_ylabel('Y-axis')\n\n# Plot the second subplot\naxes[0, 1].plot(x, y2, 'r-', label='Negative bound')\naxes[0, 1].set_title('b')\naxes[0, 1].set_xlabel('X-axis')\naxes[0, 1].set_ylabel('Y-axis')\n\n# Plot the third subplot\naxes[1, 0].plot(x, y3, 'g-', label='Contrastive loss weight')\naxes[1, 0].set_title('d')\naxes[1, 0].set_xlabel('X-axis')\naxes[1, 0].set_ylabel('Y-axis')\n\n# Plot the fourth subplot\naxes[1, 1].plot(x, y1 + y2 + y3, 'm-', label='Fuzzy coefficient')\naxes[1, 1].set_title('c')\naxes[1, 1].set_xlabel('X-axis')\naxes[1, 1].set_ylabel('Y-axis')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.0, 1.0, 100)\ny1 = np.sin(x * np.pi / 2)\ny2 = np.cos(x * np.pi / 2)\ny3 = np.tan(x * np.pi / 2)\ny4 = np.exp(-x)\ny5 = np.log(x + 1)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=3, figsize=(12.0, 8.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0, 0].plot(x, y1, color='red', label='Positive Bound')\naxes[0, 0].set_title('Positive Bound')\naxes[0, 0].set_xlabel('X-axis')\naxes[0, 0].set_ylabel('Y-axis')\naxes[0, 0].legend()\n\n# Plot the second subplot\naxes[0, 1].plot(x, y2, color='green', label='Negative Bound')\naxes[0, 1].set_title('Negative Bound')\naxes[0, 1].set_xlabel('X-axis')\naxes[0, 1].set_ylabel('Y-axis')\naxes[0, 1].legend()\n\n# Plot the third subplot\naxes[0, 2].plot(x, y3, color='blue', label='Contrastive Loss Weight')\naxes[0, 2].set_title('Contrastive Loss Weight')\naxes[0, 2].set_xlabel('X-axis')\naxes[0, 2].set_ylabel('Y-axis')\naxes[0, 2].legend()\n\n# Plot the fourth subplot\naxes[1, 0].plot(x, y4, color='purple', label='Fuzzy Coefficient')\naxes[1, 0].set_title('Fuzzy Coefficient')\naxes[1, 0].set_xlabel('X-axis')\naxes[1, 0].set_ylabel('Y-axis')\naxes[1, 0].legend()\n\n# Plot the fifth subplot\naxes[1, 1].plot(x, y5, color='orange', label='Additional Metric 1')\naxes[1, 1].set_title('Additional Metric 1')\naxes[1, 1].set_xlabel('X-axis')\naxes[1, 1].set_ylabel('Y-axis')\naxes[1, 1].legend()\n\n# Plot the sixth subplot\naxes[1, 2].plot(x, y5, color='cyan', label='Additional Metric 2')\naxes[1, 2].set_title('Additional Metric 2')\naxes[1, 2].set_xlabel('X-axis')\naxes[1, 2].set_ylabel('Y-axis')\naxes[1, 2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nrelaxation_levels = [1.2, 1.1, 1.3, 1.4]\nsnow_vs_fog = [1.0, 0.9, 1.1, 1.2]\nrain_vs_snow = [0.8, 0.7, 0.9, 1.0]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(12.0, 4.0))\n\n# Plot the first subplot\naxes[0].plot(driving_styles, relaxation_levels, marker='o', linestyle='-', color='red')\naxes[0].set_title('Dry vs Rain')\naxes[0].set_xlabel('Driving Style')\naxes[0].set_ylabel('Relaxation Level')\n\n# Plot the second subplot\naxes[1].plot(driving_styles, snow_vs_fog, marker='s', linestyle='--', color='green')\naxes[1].set_title('Snow vs Fog')\naxes[1].set_xlabel('Driving Style')\naxes[1].set_ylabel('Relaxation Level')\n\n# Plot the third subplot\naxes[2].plot(driving_styles, rain_vs_snow, marker='^', linestyle='-.', color='blue')\naxes[2].set_title('Rain vs Snow')\naxes[2].set_xlabel('Driving Style')\naxes[2].set_ylabel('Relaxation Level')\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn_aug = np.array([0.125, 0.25, 0.5, 1, 2, 4, 8])\ncontent_gain = np.array([6.5, 7.5, 6, 8, 7, 6, 5])\norganization_gain = np.array([4, 5, 4, 5, 4, 3, 2])\nlanguage_gain = np.array([2, 3, 2, 3, 2, 1, 0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data with different styles and markers\nax.plot(n_aug, content_gain, label='Content', color='b', linestyle='-', marker='o')\nax.plot(n_aug, organization_gain, label='Organization', color='r', linestyle='--', marker='s')\nax.plot(n_aug, language_gain, label='Language', color='g', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 80, 10)\ny1 = np.array([0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1])\ny2 = np.array([0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05])\ny3 = np.array([0.62, 0.67, 0.72, 0.77, 0.82, 0.87, 0.92, 0.97, 1.02, 1.07])\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(9.0, 3.0))\n\n# Plot the first subplot\naxes[0].plot(x, y1, 'r-', label='COCO (10k)')\naxes[0].set_title('COCO 10K')\naxes[0].set_xlabel('Decomposition IO Norm')\naxes[0].set_ylabel('Accuracy')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y2, 'b-', label='LAION (10k)')\naxes[1].set_title('LAION 10K')\naxes[1].set_xlabel('Decomposition IO Norm')\naxes[1].set_ylabel('Accuracy')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(x, y3, 'g-', label='COCO (5k)')\naxes[2].plot(x, y4, 'r--', label='LAION (5k)')\naxes[2].set_title('COCO & LAION 5K')\naxes[2].set_xlabel('Decomposition IO Norm')\naxes[2].set_ylabel('Accuracy')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.01, 0.3, 50)\ny1 = 0.18 - x**2 + 0.05 * np.sin(10 * x)\ny2 = 0.16 - x**2 + 0.05 * np.cos(10 * x)\ny3 = 0.14 - x**2 + 0.05 * np.tan(10 * x)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=3, figsize=(12.0, 9.0))\n\n# Plot the first subplot\naxes[0, 0].plot(x, y1, label='Error Rate vs. Learning Rate (Batch Size=64)', color='purple', linestyle='--')\naxes[0, 0].plot(x, y2, label='Error Rate vs. Learning Rate (Batch Size=128)', color='red', linestyle='--')\naxes[0, 0].set_xlabel('Parameter Rate')\naxes[0, 0].set_ylabel('Error Rate')\naxes[0, 0].set_title('Error Rate vs. Learning Rate')\naxes[0, 0].legend()\naxes[0, 0].grid(True)\n\n# Plot the second subplot\naxes[0, 1].plot(x, y1, label='Accuracy vs. Dropout (Batch Size=64)', color='green', linestyle='-')\naxes[0, 1].plot(x, y2, label='Accuracy vs. Dropout (Batch Size=128)', color='orange', linestyle='-')\naxes[0, 1].set_xlabel('Parameter Rate')\naxes[0, 1].set_ylabel('Accuracy')\naxes[0, 1].set_title('Accuracy vs. Dropout')\naxes[0, 1].legend()\naxes[0, 1].grid(True)\n\n# Plot the third subplot\naxes[0, 2].plot(x, y1, label='Error Rate vs. Learning Rate (Batch Size=64)', color='purple', linestyle='--')\naxes[0, 2].plot(x, y2, label='Error Rate vs. Learning Rate (Batch Size=128)', color='red', linestyle='--')\naxes[0, 2].plot(x, y3, label='Error Rate vs. Learning Rate (Batch Size=128)', color='blue', linestyle='--')\naxes[0, 2].set_xlabel('Parameter Rate')\naxes[0, 2].set_ylabel('Error Rate')\naxes[0, 2].set_title('Error Rate vs. Learning Rate')\naxes[0, 2].legend()\naxes[0, 2].grid(True)\n\n# Plot the fourth subplot\naxes[1, 0].plot(x, y1, label='Accuracy vs. Dropout (Batch Size=64)', color='green', linestyle='-')\naxes[1, 0].plot(x, y2, label='Accuracy vs. Dropout (Batch Size=128)', color='orange', linestyle='-')\naxes[1, 0].plot(x, y3, label='Accuracy vs. Dropout (Batch Size=128)', color='purple', linestyle='-')\naxes[1, 0].set_xlabel('Parameter Rate')\naxes[1, 0].set_ylabel('Accuracy')\naxes[1, 0].set_title('Accuracy vs. Dropout')\naxes[1, 0].legend()\naxes[1, 0].grid(True)\n\n# Plot the fifth subplot\naxes[1, 1].plot(x, y1, label='Error Rate vs. Learning Rate (Batch Size=64)', color='purple', linestyle='--')\naxes[1, 1].plot(x, y2, label='Error Rate vs. Learning Rate (Batch Size=128)', color='red', linestyle='--')\naxes[1, 1].plot(x, y3, label='Error Rate vs. Learning Rate (Batch Size=128)', color='blue', linestyle='--')\naxes[1, 1].set_xlabel('Parameter Rate')\naxes[1, 1].set_ylabel('Error Rate')\naxes[1, 1].set_title('Error Rate vs. Learning Rate')\naxes[1, 1].legend()\naxes[1, 1].grid(True)\n\n# Plot the sixth subplot\naxes[1, 2].plot(x, y1, label='Accuracy vs. Dropout (Batch Size=64)', color='green', linestyle='-')\naxes[1, 2].plot(x, y2, label='Accuracy vs. Dropout (Batch Size=128)', color='orange', linestyle='-')\naxes[1, 2].plot(x, y3, label='Accuracy vs. Dropout (Batch Size=128)', color='purple', linestyle='-')\naxes[1, 2].set_xlabel('Parameter Rate')\naxes[1, 2].set_ylabel('Accuracy')\naxes[1, 2].set_title('Accuracy vs. Dropout')\naxes[1, 2].legend()\naxes[1, 2].grid(True)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 201)\ny1 = np.sin(x / 50) * 0.6 + 0.3\ny2 = np.sin(x / 50) * 0.7 + 0.3\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Base Model', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Our Model', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\nax.set_title('Metric 1')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 10) + 0.5\ny2 = np.sin(x / 10) + 0.7\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Base Model', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Our Model', color='green', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\nax.set_title('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = np.array([10**i for i in range(1, 7)])\ny1 = np.array([10**(-i) for i in range(1, 7)])\ny2 = np.array([10**(-i) for i in range(1, 7)])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Standard', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='Constrained', color='r', linestyle='--', marker='s')\n\n# Set labels and title\nax.set_xlabel('N')\nax.set_ylabel('Value')\nax.set_title('Comparison of Standard and Constrained Methods')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Performance', color='navy', linestyle='-', linewidth=2, marker='o', markersize=5, markerfacecolor='white')\nax.plot(x, y2, label='Efficiency', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=5, markerfacecolor='white')\n\n# Set labels and title\nax.set_xlabel('Weeks', fontsize=12)\nax.set_ylabel('Performance and Efficiency', fontsize=12)\nax.set_title('Performance and Efficiency Over Weeks', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, frameon=True, shadow=True)\n\n# Set limits for x and y axes\nax.set_xlim(0, 25)\nax.set_ylim(-1.5, 1.5)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x) * np.exp(-x / 10)\ny2 = np.cos(x) * np.exp(-x / 10)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Performance', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markerfacecolor='white')\nax.plot(x, y2, label='Efficiency', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=5, markerfacecolor='white')\n\n# Set labels and title\nax.set_xlabel('Weeks')\nax.set_ylabel('Values')\nax.set_title('Performance and Efficiency Analysis')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nweeks = np.arange(31)\nperformance = np.array([0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0, 6.2, 6.4, 6.6, 6.8, 7.0])\nefficiency = np.array([0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0, 6.2, 6.4, 6.6, 6.8, 7.0])\ngrowth = np.array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(weeks, performance, label='Performance', color='b', linestyle='-', marker='o', linewidth=2, markersize=8)\nax.plot(weeks, efficiency, label='Efficiency', color='r', linestyle='--', marker='s', linewidth=2, markersize=8)\nax.plot(weeks, growth, label='Growth', color='g', linestyle='-.', marker='^', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Weeks')\nax.set_ylabel('Efficiency')\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the lines\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Data Series 1', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Data Series 2 with Gradient', color='green', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.plot(x, y3, label='Data Series 3', color='magenta', linestyle='-.', linewidth=2, marker='^', markersize=4)\n\n# Set labels and title\nax.set_xlabel('Weeks')\nax.set_ylabel('Normalized Value')\nax.set_title('Dynamic Data Presentation Across Weeks')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the lines\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([95, 85, 75, 65, 55, 45, 35, 25, 15, 5])\ny2 = np.array([80, 70, 60, 50, 40, 30, 20, 10, 0, 0])\ny3 = np.array([70, 60, 50, 40, 30, 20, 10, 0, 0, 0])\ny4 = np.array([60, 50, 40, 30, 20, 10, 0, 0, 0, 0])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='BaCE', marker='s', linestyle='-', color='blue')\nax.plot(x, y2, label='LWF', marker='^', linestyle='--', color='cyan')\nax.plot(x, y3, label='EWC', marker='o', linestyle='-.', color='green')\nax.plot(x, y4, label='SEQ', marker='v', linestyle=':', color='magenta')\n\n# Set labels and title\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Comparison of Different Models')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([85, 80, 75, 70, 65, 60, 55, 50, 45, 40])\ny2 = np.array([88, 83, 78, 73, 68, 63, 58, 53, 48, 43])\ny3 = np.array([90, 85, 80, 75, 70, 65, 60, 55, 50, 45])\ny4 = np.array([92, 87, 82, 77, 72, 67, 62, 57, 52, 47])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='BaCE', color='blue', marker='o')\nax.plot(x, y2, label='EWC', color='cyan', marker='s')\nax.plot(x, y3, label='LWF', color='red', marker='^')\nax.plot(x, y4, label='SEQ', color='magenta', marker='D')\n\n# Set labels and title\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Performance Comparison')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 2000, 100)\ny1 = np.sin(x / 500) * 0.8 + 0.6\ny2 = np.cos(x / 500) * 0.8 + 0.6\ny3 = np.sin(x / 500) * 0.8 + 0.4\ny4 = np.cos(x / 500) * 0.8 + 0.4\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9.0, 7.0))\n\n# Plot the first subplot\naxes[0, 0].plot(x, y1, label='model1 Series 1', color='blue')\naxes[0, 0].plot(x, y2, label='model1 Series 2', color='pink')\naxes[0, 0].set_title('model1 Performance')\naxes[0, 0].set_xlabel('Iterations')\naxes[0, 0].set_ylabel('Success Rate')\naxes[0, 0].legend()\n\n# Plot the second subplot\naxes[0, 1].plot(x, y3, label='model2 Series 1', color='blue')\naxes[0, 1].plot(x, y4, label='model2 Series 2', color='pink')\naxes[0, 1].set_title('model2 Performance')\naxes[0, 1].set_xlabel('Iterations')\naxes[0, 1].set_ylabel('Success Rate')\naxes[0, 1].legend()\n\n# Plot the third subplot\naxes[1, 0].plot(x, y1, label='model3 Series 1', color='blue')\naxes[1, 0].plot(x, y2, label='model3 Series 2', color='pink')\naxes[1, 0].set_title('model3 Performance')\naxes[1, 0].set_xlabel('Iterations')\naxes[1, 0].set_ylabel('Success Rate')\naxes[1, 0].legend()\n\n# Plot the fourth subplot\naxes[1, 1].plot(x, y3, label='model4 Series 1', color='blue')\naxes[1, 1].plot(x, y4, label='model4 Series 2', color='pink')\naxes[1, 1].set_title('model4 Performance')\naxes[1, 1].set_xlabel('Iterations')\naxes[1, 1].set_ylabel('Success Rate')\naxes[1, 1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5])\ny2 = np.array([2.0, 2.8, 3.6, 4.4, 5.2, 6.0, 6.8])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='IHM', marker='^', linestyle='-', color='blue')\nax.plot(x, y2, label='SDM', marker='^', linestyle='--', color='orange')\n\n# Set labels and title\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER(%)')\nax.set_title('WER vs Number of Microphones')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5])\ny2 = np.array([2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])\ny3 = np.array([1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='IHM Trend', color='darkgreen', linestyle='-', marker='o', markersize=8)\nax.plot(x, y2, label='SDM Trend', color='purple', linestyle='--', marker='s', markersize=8)\nax.plot(x, y3, label='LibriCSS (test)', color='royalblue', linestyle='-.', marker='^', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\nax.set_title('Comparison of Different Trends')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\ny2 = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\ny3 = np.array([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Highlight 3', color='orange', linestyle='-', marker='o')\nax.plot(x, y2, label='Highlight 5', color='blue', linestyle='--', marker='s')\nax.plot(x, y3, label='Highlight 7', color='red', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('WER vs Number of Microphones')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.0, 1.0, 100)\ny1 = np.sin(x * np.pi * 2)\ny2 = np.cos(x * np.pi * 2)\ny3 = np.tan(x * np.pi * 2)\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(nrows=1, ncols=4, figsize=(12.0, 4.0))\n\n# Plot the first subplot\naxes[0].plot(x, y1, color='blue', linewidth=2)\naxes[0].fill_between(x, y1, where=(y1 > 0), color='lightblue', alpha=0.5)\naxes[0].set_title('Positive bound.')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\n\n# Plot the second subplot\naxes[1].plot(x, y2, color='blue', linewidth=2)\naxes[1].fill_between(x, y2, where=(y2 < 0), color='lightgreen', alpha=0.5)\naxes[1].set_title('Negative bound.')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\n\n# Plot the third subplot\naxes[2].plot(x, y3, color='blue', linewidth=2)\naxes[2].fill_between(x, y3, where=(y3 > 0), color='lightcoral', alpha=0.5)\naxes[2].set_title('Contrastive loss weight.')\naxes[2].set_xlabel('X-axis')\naxes[2].set_ylabel('Y-axis')\n\n# Plot the fourth subplot\naxes[3].plot(x, y3, color='blue', linewidth=2)\naxes[3].fill_between(x, y3, where=(y3 < 0), color='lightgrey', alpha=0.5)\naxes[3].set_title('Fuzzy coefficient.')\naxes[3].set_xlabel('X-axis')\naxes[3].set_ylabel('Y-axis')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\ny2 = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='LibriCSS WER', color='gold', linestyle='-', linewidth=2, marker='o', markersize=8)\nax.plot(x, y2, label='Threshold', color='red', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('WER vs Number of Microphones')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nratio_r = np.linspace(0.1, 1.0, 10)\nperformance_pna = np.sin(ratio_r) + 0.5\nperformance_gin = np.cos(ratio_r) + 0.5\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(6.0, 12.0))\n\n# Plot the first subplot\naxes[0].plot(ratio_r, performance_pna, label='PNA', color='b', marker='o')\naxes[0].plot(ratio_r, performance_gin, label='GIN', color='g', marker='^')\naxes[0].set_title('SPMotif-0.5')\naxes[0].set_xlabel('Ratio r')\naxes[0].set_ylabel('Performance')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(ratio_r, performance_pna, label='PNA', color='b', marker='o')\naxes[1].plot(ratio_r, performance_gin, label='GIN', color='g', marker='^')\naxes[1].set_title('SPMotif-0.7')\naxes[1].set_xlabel('Ratio r')\naxes[1].set_ylabel('Performance')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(ratio_r, performance_pna, label='PNA', color='b', marker='o')\naxes[2].plot(ratio_r, performance_gin, label='GIN', color='g', marker='^')\naxes[2].set_title('SPMotif-0.9')\naxes[2].set_xlabel('Ratio r')\naxes[2].set_ylabel('Performance')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.1, 1.0, 10)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, color='purple', linestyle='-', linewidth=2, marker='o', markersize=5, label='PNA + ours')\nax.plot(x, y2, color='orange', linestyle='--', linewidth=2, marker='s', markersize=5, label='GIN + ours')\n\n# Set labels and title\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\nax.set_title('Dynamic Performance Trends')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny1 = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4])\ny2 = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='PNA + ours', color='purple', marker='o')\nax.plot(x, y2, label='GIN + ours', color='orange', marker='o')\n\n# Set labels and title\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\nax.set_title('Modern Linear Performance Evaluation')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nr_values = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\nperformance_pna = np.array([0.9, 0.7, 0.5, 0.3, 0.1])\nperformance_gin = np.array([0.8, 0.6, 0.4, 0.2, 0.0])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(r_values, performance_pna, label='PNA + ours', marker='o', linestyle='-', color='b')\nax.plot(r_values, performance_gin, label='GIN + ours', marker='s', linestyle='--', color='r')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Ratio r', fontsize=12, fontweight='bold')\nax.set_ylabel('Performance', fontsize=12, fontweight='bold')\nax.set_title('Dynamic Model Performance', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Set limits for x and y axes\nax.set_xlim(0, 1.1)\nax.set_ylim(0, 1.1)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nensemble_sizes = np.array([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\nmodel1_mean_accuracy = np.array([80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 99, 99.5, 100])\nmodel2_mean_accuracy = np.array([75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 98])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(ensemble_sizes, model1_mean_accuracy, label='Model 1 Mean Accuracy', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(ensemble_sizes, model2_mean_accuracy, label='Model 2 Mean Accuracy', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Ensemble Size', fontsize=12, fontweight='bold')\nax.set_ylabel('Accuracy', fontsize=12, fontweight='bold')\nax.set_title('Comparison of Model Accuracies', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10, frameon=True, shadow=True)\n\n# Set limits for x and y axes\nax.set_xlim(min(ensemble_sizes), max(ensemble_sizes))\nax.set_ylim(min(np.concatenate((model1_mean_accuracy, model2_mean_accuracy))), max(np.concatenate((model1_mean_accuracy, model2_mean_accuracy))))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\niterations = np.arange(1, 10)\nperformance_x = np.array([\n    [93, 94, 95, 96, 97, 98, 99, 100, 101],\n    [92, 93, 94, 95, 96, 97, 98, 99, 100],\n    [91, 92, 93, 94, 95, 96, 97, 98, 99]\n])\nperformance_y = np.array([\n    [75, 76, 77, 78, 79, 80, 81, 82, 83],\n    [74, 75, 76, 77, 78, 79, 80, 81, 82],\n    [73, 74, 75, 76, 77, 78, 79, 80, 81]\n])\nperformance_z = np.array([\n    [85, 86, 87, 88, 89, 90, 91, 92, 93],\n    [84, 85, 86, 87, 88, 89, 90, 91, 92],\n    [83, 84, 85, 86, 87, 88, 89, 90, 91]\n])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=(8.0, 12.0))\n\n# Plot the first subplot\naxes[0].plot(iterations, performance_x.T, marker='o', linestyle='-', color='red')\naxes[0].set_title('Performance of Model X')\naxes[0].set_xlabel('Iteration')\naxes[0].set_ylabel('Score')\naxes[0].grid(True)\n\n# Plot the second subplot\naxes[1].plot(iterations, performance_y.T, marker='o', linestyle='-', color='blue')\naxes[1].set_title('Performance of Model Y')\naxes[1].set_xlabel('Iteration')\naxes[1].set_ylabel('Score')\naxes[1].grid(True)\n\n# Plot the third subplot\naxes[2].plot(iterations, performance_z.T, marker='o', linestyle='-', color='green')\naxes[2].set_title('Performance of Model Z')\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\naxes[2].grid(True)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\niterations = np.array([2, 4, 6, 8, 10])\nperformance_lla = np.array([75.5, 77.3, 79.1, 80.9, 82.7])\nperformance_falcon = np.array([65.2, 67.0, 68.8, 70.6, 72.4])\nperformance_qwen = np.array([70.1, 71.9, 73.7, 75.5, 77.3])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(3, 1, figsize=(8.0, 12.0), sharex=True)\n\n# Plot the first subplot\naxes[0].plot(iterations, performance_lla, marker='o', linestyle='-', color='pink', label='Config A - Llama')\naxes[0].plot(iterations, performance_falcon, marker='s', linestyle='--', color='lightgreen', label='Config B - Llama')\naxes[0].plot(iterations, performance_qwen, marker='^', linestyle='-.', color='lightblue', label='Config C - Llama')\naxes[0].set_title('Performance of Llama')\naxes[0].set_xlabel('Iteration')\naxes[0].set_ylabel('Score')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(iterations, performance_lla, marker='o', linestyle='-', color='pink', label='Config A - Falcon')\naxes[1].plot(iterations, performance_falcon, marker='s', linestyle='--', color='lightgreen', label='Config B - Falcon')\naxes[1].plot(iterations, performance_qwen, marker='^', linestyle='-.', color='lightblue', label='Config C - Falcon')\naxes[1].set_title('Performance of Falcon')\naxes[1].set_xlabel('Iteration')\naxes[1].set_ylabel('Score')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(iterations, performance_lla, marker='o', linestyle='-', color='pink', label='Config A - Qwen')\naxes[2].plot(iterations, performance_falcon, marker='s', linestyle='--', color='lightgreen', label='Config B - Qwen')\naxes[2].plot(iterations, performance_qwen, marker='^', linestyle='-.', color='lightblue', label='Config C - Qwen')\naxes[2].set_title('Performance of Qwen')\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\naxes[2].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nsales_a = [1.2, 1.5, 1.8, 2.1]\nsales_b = [1.3, 1.6, 1.9, 2.2]\nsales_c = [1.4, 1.7, 2.0, 2.3]\nsales_d = [1.5, 1.8, 2.1, 2.4]\nsales_e = [1.6, 1.9, 2.2, 2.5]\nsales_f = [1.7, 2.0, 2.3, 2.6]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(10.0, 10.0), sharex=True, sharey=True)\n\n# Plot each brand's sales growth\naxes[0, 0].plot(quarters, sales_a, marker='o', linestyle='-', color='r', label='Brand A Sales Growth')\naxes[0, 0].set_title('Brand A')\naxes[0, 0].set_ylabel('Sales Growth')\n\naxes[0, 1].plot(quarters, sales_b, marker='^', linestyle='--', color='b', label='Brand B Sales Growth')\naxes[0, 1].set_title('Brand B')\n\naxes[1, 0].plot(quarters, sales_c, marker='s', linestyle='-.', color='g', label='Brand C Sales Growth')\naxes[1, 0].set_title('Brand C')\n\naxes[1, 1].plot(quarters, sales_d, marker='D', linestyle=':', color='c', label='Brand D Sales Growth')\naxes[1, 1].set_title('Brand D')\n\naxes[2, 0].plot(quarters, sales_e, marker='p', linestyle='-', color='m', label='Brand E Sales Growth')\naxes[2, 0].set_title('Brand E')\naxes[2, 0].set_xlabel('Quarter')\naxes[2, 0].set_ylabel('Sales Growth')\n\naxes[2, 1].plot(quarters, sales_f, marker='h', linestyle='--', color='y', label='Brand F Sales Growth')\naxes[2, 1].set_title('Brand F')\n\n# Add legends to each subplot\nfor ax in axes.flat:\n    ax.legend(loc='upper left')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([100, 300, 500, 700])\ny1 = np.array([0.5, 0.6, 0.8, 1.2])\ny2 = np.array([0.4, 0.7, 0.9, 1.1])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 4, figsize=(18.0, 4.0))\n\n# Plot the first subplot\naxes[0].plot(x, y1, 'b-', label='ECL Run 1')\naxes[0].plot(x, y2, 'r-', label='ECL Run 2')\naxes[0].set_title('Traffic Performance')\naxes[0].set_xlabel('Time (s)')\naxes[0].set_ylabel('Metric Value')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y1, 'b-', label='ECL Run 1')\naxes[1].plot(x, y2, 'r-', label='ECL Run 2')\naxes[1].set_title('ETMm2 Performance')\naxes[1].set_xlabel('Time (s)')\naxes[1].set_ylabel('Metric Value')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(x, y1, 'b-', label='ECL Run 1')\naxes[2].plot(x, y2, 'r-', label='ECL Run 2')\naxes[2].set_title('ETTh2 Performance')\naxes[2].set_xlabel('Time (s)')\naxes[2].set_ylabel('Metric Value')\naxes[2].legend()\n\n# Plot the fourth subplot\naxes[3].plot(x, y1, 'b-', label='ECL Run 1')\naxes[3].plot(x, y2, 'r-', label='ECL Run 2')\naxes[3].set_title('ECL Performance')\naxes[3].set_xlabel('Time (s)')\naxes[3].set_ylabel('Metric Value')\naxes[3].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Driving styles and their corresponding relaxation levels\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nrelaxation_levels = [\n    [1.4, 1.2, 1.0, 0.8],  # Weather\n    [1.2, 1.0, 0.8, 0.6],  # Dry\n    [1.0, 0.8, 0.6, 0.4]   # Rain\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nfor i, style in enumerate(driving_styles):\n    ax.plot(relaxation_levels[i], label=style, marker='o')\n\n# Set labels and title\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\nax.set_title('Relaxation Levels by Driving Style')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([20, 30, 40, 50, 60])\ny2 = np.array([15, 25, 35, 45, 55])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Run 1', color='tab:blue')\nax.plot(x, y2, label='Run 2', color='tab:orange')\n\n# Set labels and title\nax.set_xlabel('Phase')\nax.set_ylabel('Cumulative Value')\nax.set_title('Category A Growth')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([4, 6, 10, 30])\ny1 = np.array([1.08, 1.04, 1.06, 1.02])\ny2 = np.array([1.08, 1.04, 1.06, 1.02])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Standard', color='b', marker='o')\nax.plot(x, y2, label='Constrained', color='r', marker='x')\n\n# Set labels and title\nax.set_xlabel('N')\nax.set_ylabel('Value')\nax.set_title('Comparison of Standard and Constrained Methods')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nregions = ['South', 'North', 'East', 'West']\npercentages = [25, 40, 15, 10]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(regions, percentages, color=['skyblue', 'lightgreen', 'lavender', 'lightcoral'])\n\n# Add labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage')\nax.set_title('Literacy Rate by Region')\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [1.5, 0.7, 0.3, 0.9, 0.4],\n    [0.6, 1.2, 0.8, 0.5, 0.2],\n    [0.3, 0.8, 1.0, 0.6, 0.1],\n    [0.9, 0.5, 0.6, 1.1, 0.3],\n    [0.4, 0.2, 0.1, 0.3, 1.4]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm', fignum=1)\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data)))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['A', 'B', 'C', 'D', 'E'])\nax.set_yticklabels(['A', 'B', 'C', 'D', 'E'])\nax.set_title('Heatmap Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\neng = [44.15, 44.05, 41.55, 40.95, 36.7]\nzhang = [44.05, 0.0, 5.15, 2.80, 2.50]\nrice = [41.55, 0.0, 0.0, 6.30, 2.95]\nrde = [40.95, 5.90, 0.0, 5.75, 4.95]\nhend = [40.65, 7.75, 6.25, 7.25, 4.95]\nadep = [39.45, 7.40, 6.95, 7.15, 4.00]\ncarmon = [36.7, 9.90, 9.15, 7.15, 0.00]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#008000', '#00FF00', '#FFFF00', '#FF0000', '#0000FF']\n\n# Plot the data\nbars = ax.bar(range(len(eng)), eng, color=colors[0], label='Engstrom (M1)')\nax.bar(range(len(zhang)), zhang, bottom=eng, color=colors[1], label='Zhang (M2)')\nax.bar(range(len(rice)), rice, bottom=[sum(x) for x in zip(eng, zhang)], color=colors[2], label='Rice (M3)')\nax.bar(range(len(rde)), rde, bottom=[sum(x) for x in zip(eng, zhang, rice)], color=colors[3], label='Rade (M4)')\nax.bar(range(len(hend)), hend, bottom=[sum(x) for x in zip(eng, zhang, rice, rde)], color=colors[4], label='Hendrycks (M5)')\nax.bar(range(len(adep)), adep, bottom=[sum(x) for x in zip(eng, zhang, rice, rde, hend)], color=colors[0], label='Addep. (M6)')\nax.bar(range(len(carmon)), carmon, bottom=[sum(x) for x in zip(eng, zhang, rice, rde, hend, adep)], color=colors[1], label='Carmon (M7)')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Robust Error (%)')\nax.set_title('Robust Error (%)')\nax.set_xticks(range(len(eng)))\nax.set_xticklabels(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)'])\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 180, 100)\ny1 = np.sin(x * np.pi / 180)\ny2 = np.cos(x * np.pi / 180)\ny3 = np.tan(x * np.pi / 180)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='VGG16 Cartesian', color='red', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Resnet101 Cartesian', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='Resnet101 Retinotopic', color='orange', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Rotation angle (\u00b0)', fontsize=12)\nax.set_ylabel('Invariance', fontsize=12)\nax.set_title('Cortical Invariance of VGG16 and Resnet101', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Set limits for x and y axes\nax.set_xlim(0, 180)\nax.set_ylim(-1.5, 1.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [1.1, 1.2, 1.3, 1.4, 1.5],\n    [1.6, 1.7, 1.8, 1.9, 2.0]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with a colormap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add a color bar to the plot\nfig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xlabel('Sensitive Attribute')\nax.set_ylabel('Attribute')\n\n# Set the title of the plot\nax.set_title('Heatmap Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the plot\nx = np.array([0, 10, 20, 30, 40, 50])\ny = np.array([-8.5, -9.2, -9.8, -10.3, -9.7, -8.9])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the line graph\nax.plot(x, y, marker='o', linestyle='-', color='b')\n\n# Add a shaded region to the plot\nax.fill_between(x, y - 0.5, y + 0.5, color='gray', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('GPT2 Tokenizer rank')\nax.set_ylabel('Token rarity')\nax.set_title('Token rarity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Correlation')\nax.set_title('Correlation of Categories')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1355, 1908, 2670, 3540])\ny = np.array([0.45, 0.40, 0.55, 0.50])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=0.05, fmt='o', color='orange', ecolor='black', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('OMLA KPA')\nax.set_title('OMLA KPA over Years')\n\n# Add grid for better readability\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart\ncategories = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humans', 'Finance']\nvalues = [65, 25, 280, 100, 120, 150, 220]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nbars = ax1.bar(categories, values, color=colors, edgecolor='black')\n\n# Set labels and title\nax1.set_xlabel('Domain')\nax1.set_ylabel('Number of Publications by Domain', color='tab:blue')\nax1.set_title('Number of Publications by Domain')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 5, int(yval), ha='center', va='bottom', fontsize=10)\n\n# Customize the y-axis\nax1.set_ylim(0, 300)\nax1.yaxis.set_major_locator(plt.MaxNLocator(5))\n\n# Create a second y-axis for the second chart\nax2 = ax1.twinx()\n\n# Data for the second chart\nstudy_levels = [0, 1, 2, 3, 4, 5]\nknowledge_increase = [20, 40, 60, 80, 100, 120]\n\n# Plot the second chart\nax2.plot(study_levels, knowledge_increase, color='orange', marker='o', linestyle='--', linewidth=2, markersize=8)\n\n# Set labels for the second chart\nax2.set_ylabel('Cumulative Knowledge Increase (%)', color='tab:orange')\n\n# Customize the x-axis\nax2.set_xlim(0, 5)\nax2.xaxis.set_major_locator(plt.MaxNLocator(6))\n\n# Add grid lines\nax1.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\nax2.grid(False)\n\n# Add a legend\nax1.legend(['Number of Publications'], loc='upper left')\nax2.legend(['Cumulative Knowledge Increase'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nyears = np.array([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022])\nhardware = np.array([10, 20, 30, 40, 50, 60, 70, 80])\nsoftware = np.array([15, 25, 35, 45, 55, 65, 75, 85])\nai = np.array([20, 30, 40, 50, 60, 70, 80, 90])\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the first line graph\nax1.plot(years, hardware, color='blue', label='Hardware', linewidth=2)\nax1.plot(years, software, color='orange', label='Software', linewidth=2)\nax1.plot(years, ai, color='green', label='AI', linewidth=2)\n\n# Set labels and title for the first subplot\nax1.set_xlabel('Year')\nax1.set_ylabel('Progress (%)', color='black')\nax1.set_title('Technological Advancements', fontsize=14, fontweight='bold')\n\n# Add a legend for the first subplot\nax1.legend(loc='upper left')\n\n# Create a second y-axis for the second subplot\nax2 = ax1.twinx()\n\n# Sample data for the second subplot\nsectors = ['Big Tech', 'Startups', 'Academia', 'Government']\ninnovation_gaps = [30, 40, 20, 10]\ninnovation_gaps_percentage = [50, 60, 40, 30]\n\n# Plot the second bar chart\nbars = ax2.bar(sectors, innovation_gaps, color='red', alpha=0.7, label='Innovation Gap (Years)')\nax2.bar_label(bars, padding=3, fmt='%d')\n\n# Set labels and title for the second subplot\nax2.set_ylabel('Innovation Gap (Years)', color='red')\nax2.set_title('Innovation Gaps Across Different Sectors in Technology', fontsize=14, fontweight='bold')\n\n# Add a legend for the second subplot\nax2.legend(loc='upper right')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.7, 2.9, 2.6]\nfraud_rates = [120, 115, 110, 105, 100, 95]\n\n# Create a new figure with a larger size\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\n\n# Plotting the first dataset (Crime rates)\ncolor = 'tab:orange'\nax1.set_xlabel('Country')\nax1.set_ylabel('Average Crime Rates per 100,000 Inhabitants', color=color)\nax1.bar(countries, crime_rates, color=color, alpha=0.7, label='Crime Rate')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\ncolor = 'tab:blue'\nax2.set_ylabel('Average Fraud Rates per 100,000 Inhabitants', color=color)\nax2.plot(countries, fraud_rates, color=color, marker='o', linestyle='--', linewidth=2, markersize=8, label='Fraud Rate')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Set title and legend\nplt.title('Average Legal Crime Rates by Country', fontsize=14, fontweight='bold')\nfig.tight_layout()\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Public School', 'Private School']\nvalues = [80, 60]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=['blue', 'orange'])\n\n# Add labels and title\nax.set_xlabel('Student Performance')\nax.set_ylabel('Score')\nax.set_title('Student Performance in Schools')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, int(yval), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\ny = np.array([0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.010])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with a scatter plot\nscatter = ax.scatter(x, y, c='blue', s=50, alpha=0.7)\n\n# Set labels for clarity\nax.set_xlabel('Elevation (m)')\nax.set_ylabel('Density')\nax.set_title('Geographical Elevation Distribution')\n\n# Add a color bar to indicate the density scale\ncbar = plt.colorbar(scatter)\ncbar.set_label('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart\ncategories = ['Stocks', 'Bonds', 'Real Estate']\nvalues = [200, 175, 150]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99']\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Investment Type')\nax.set_ylabel('Number of Accounts (%)')\nax.set_title('Investment Growth Over Time')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}%', ha='center', va='bottom')\n\n# Set the limits for the y-axis\nax.set_ylim(0, 400)\n\n# Add a grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4])\ny1 = np.array([85, 90, 95, 98])\ny2 = np.array([75, 80, 85, 90])\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the first dataset\ncolor = 'tab:blue'\nax1.set_xlabel('Model', color=color)\nax1.set_ylabel('Success Rate (%)', color=color)\nax1.plot(x, y1, color=color, marker='o', linestyle='-', linewidth=2, markersize=8)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\ncolor = 'tab:green'\nax2.set_ylabel('Efficiency (%)', color=color)\nax2.plot(x, y2, color=color, marker='s', linestyle='--', linewidth=2, markersize=8)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Set title and labels\nplt.title('AI Task Success Rates', fontsize=16, fontweight='bold')\nax1.set_xticks(x)\nax1.set_xticklabels(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'])\n\n# Add grid lines for better readability\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.grid(False)\n\n# Add a legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the first chart\nx = np.array([100, 200, 300, 400, 500])\ny1 = np.array([10, 20, 30, 40, 50])\ny2 = np.array([15, 25, 35, 45, 55])\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data with different colors and styles\nax.bar(x, y1, color='orange', label='Morning Traffic')\nax.bar(x, y2, bottom=y1, color='green', label='Evening Traffic')\n\n# Set labels and title\nax.set_xlabel('Number of Vehicles')\nax.set_ylabel('Traffic Volume by Time of Day')\nax.set_title('Traffic Volume by Time of Day')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nsizes = [10, 30, 25, 15]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Distribution of Arts Education Programs')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nsales = [\n    [25000, 15000, 10000, 5000, 2000],\n    [22000, 18000, 12000, 6000, 2500],\n    [21000, 17000, 11000, 5500, 2200],\n    [20000, 16000, 10500, 5200, 2100],\n    [19000, 15500, 10000, 5000, 2000]\n]\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the first dataset\nbar_width = 0.2\nindex = np.arange(len(regions))\nbars1 = ax1.bar(index, [sum(region) for region in sales], bar_width, color='green', label='Known Sales')\nax1.set_xlabel('Regions')\nax1.set_ylabel('Total Sales', color='green')\nax1.set_title('Sales by Region and Product')\nax1.set_xticks(index)\nax1.set_xticklabels(regions)\nax1.legend(loc='upper left')\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\nbars2 = ax2.bar(index + bar_width, [max(region) for region in sales], bar_width, color='blue', alpha=0.7, label='Unknown Sales')\nax2.set_ylabel('Max Sales', color='blue')\nax2.legend(loc='upper right')\n\n# Add annotations for better readability\nfor i, v in enumerate([sum(region) for region in sales]):\n    ax1.text(i, v + 1000, str(v), ha='center', va='bottom', fontsize=10)\n\nfor i, v in enumerate([max(region) for region in sales]):\n    ax2.text(i + bar_width, v + 1000, str(v), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the histogram\ndata = np.random.normal(loc=0.5, scale=0.4, size=1000)\ndata2 = np.random.normal(loc=-0.5, scale=0.4, size=1000)\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the histogram with different colors and labels\nax.hist(data, bins=30, color='green', alpha=0.7, label='Gains')\nax.hist(data2, bins=30, color='red', alpha=0.7, label='Losses')\n\n# Set labels and title\nax.set_xlabel('Returns')\nax.set_ylabel('Frequency')\nax.set_title('Histogram of Stock Returns')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a specified size\nfig = plt.figure(figsize=(8.0, 10.0))\n\n# Plot the surface plot\nax = fig.add_subplot(121, projection='3d')\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels for the axes\nax.set_xlabel('Relative Year')\nax.set_ylabel('Relative Month')\nax.set_zlabel('Energy Consumption (GWh)')\n\n# Plot the contour plot\nax2 = fig.add_subplot(122, projection='3d')\ncontour = ax2.contourf(X, Y, Z, zdir='z', offset=-1.5, cmap='viridis')\n\n# Add a color bar for the contour plot\nfig.colorbar(contour, shrink=0.5, aspect=5)\n\n# Set labels for the axes\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Literature', 'Renaissance Texts']\nsizes = [15, 35, 20, 30]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax1.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax1.axis('equal')  \n\n# Add a title\nax1.set_title('Historical Document Types in Library')\n\n# Create a second subplot for the scatter plot\nax2 = fig.add_subplot(122)\n\n# Sample data for the scatter plot\nx = np.array([150, 200, 250, 300])\ny = np.array([160, 170, 180, 190])\n\n# Plot the scatter plot\nax2.scatter(x, y, color='purple', s=100)\n\n# Set labels and title for the scatter plot\nax2.set_xlabel('Year')\nax2.set_ylabel('Number of Documents')\nax2.set_title('Document Count Over Historical Periods')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1000, 1200, 1400, 1600, 1800, 2000])\ny1 = np.array([8.5, 8.7, 8.9, 9.1, 9.3, 9.5])\ny2 = np.array([8.0, 8.2, 8.4, 8.6, 8.8, 9.0])\ny3 = np.array([7.5, 7.7, 7.9, 8.1, 8.3, 8.5])\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the first dataset\ncolor = 'tab:purple'\nax1.set_xlabel('Average Price ($)')\nax1.set_ylabel('Popularity Index', color=color)\nax1.plot(x, y1, color=color, marker='o', linestyle='-', linewidth=2, markersize=8)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\ncolor = 'tab:orange'\nax2.set_ylabel('Customer Satisfaction', color=color)\nax2.plot(x, y2, color=color, marker='s', linestyle='--', linewidth=2, markersize=8)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a third dataset with a different style\nax3 = ax1.twinx()\ncolor = 'tab:blue'\nax3.set_ylabel('Prada', color=color)\nax3.plot(x, y3, color=color, marker='^', linestyle='-.', linewidth=2, markersize=8)\nax3.tick_params(axis='y', labelcolor=color)\n\n# Set title and legend\nplt.title('Luxury Brand Popularity vs Price')\nfig.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart\naccuracy = [75.32, 77.11, 77.03, 76.86, 74.52]\nrobustness = [60.5, 59.3, 59.1, 58.35, 55.5]\naccuracy_diff = [0.02, -0.08, -0.17, -0.23, 0.0]\nrobustness_diff = [-0.08, -0.17, -0.25, -0.23, 0.0]\n\n# Data for the second chart\naccuracy_2 = [0.0, 0.0, 0.0, 0.0, 0.0]\nrobustness_2 = [0.0, 0.0, 0.0, 0.0, 0.0]\naccuracy_diff_2 = [0.0, 0.0, 0.0, 0.0, 0.0]\nrobustness_diff_2 = [0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 7.0))\n\n# Plot the first chart\nbars = axes[0].bar(range(len(accuracy)), accuracy, color='green', edgecolor='black')\naxes[0].set_title('Accuracy (%)')\naxes[0].set_xlabel('Model')\naxes[0].set_ylabel('Accuracy (%)')\naxes[0].set_xticks(range(len(accuracy)))\naxes[0].set_xticklabels(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engrycks2019'], rotation=45)\nfor bar, acc, acc_diff in zip(bars, accuracy, accuracy_diff):\n    yval = bar.get_height()\n    axes[0].text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{acc_diff:.2f}', ha='center', va='bottom')\n\n# Plot the second chart\nbars = axes[1].bar(range(len(accuracy_2)), robustness, color='red', edgecolor='black')\naxes[1].set_title('Robust Accuracy (%)')\naxes[1].set_xlabel('Model')\naxes[1].set_ylabel('Robust Accuracy (%)')\naxes[1].set_xticks(range(len(robustness)))\naxes[1].set_xticklabels(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engrycks2019'], rotation=45)\nfor bar, rob, rob_diff in zip(bars, robustness, robustness_diff):\n    yval = bar.get_height()\n    axes[1].text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{rob_diff:.2f}', ha='center', va='bottom')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(26)\ny1 = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4])\ny2 = np.array([0.03, 0.06, 0.09, 0.12, 0.15, 0.18, 0.21, 0.24, 0.27, 0.3, 0.33, 0.36, 0.39, 0.42, 0.45, 0.48, 0.51, 0.54, 0.57, 0.6, 0.63, 0.66, 0.69, 0.72, 0.75, 0.78, 0.81])\ny3 = np.array([0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56])\ny4 = np.array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(7.0, 9.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='Random', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='No Context', color='green', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='Partial Context', color='orange', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(x, y4, label='Full Context', color='purple', linestyle=':', linewidth=2, marker='D', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Trials')\nax.set_ylabel('Average Regret')\nax.set_title('Comparison of Algorithms')\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 200, 400])\ny = np.array([0, 100, 200])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(x, y, marker='o', linestyle='-', color='b')\n\n# Set labels and title\nax.set_xlabel('Elo Rating')\nax.set_ylabel('Correct Rating - Incorrect Rating')\nax.set_title('Debaters')\n\n# Add a legend\nax.legend(['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [30.5, 29.8, 10.6, 11.3, 13.2, 4.6]\nlabels = ['Green', 'Blue', 'Purple', 'Yellow', 'Orange', 'Gray']\ncolors = ['#00FF00', '#0000FF', '#800080', '#FFFF00', '#FFA500', '#808080']\nexplode = (0.1, 0, 0, 0, 0, 0)  # Explode the first slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle\nax.axis('equal')\n\n# Add a title\nax.set_title('Pie Chart Example', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nsizes = [90, 225, 1, 60, 1/2, 100]\nlabels = ['90 g sugar', '225 g flour', '1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk']\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99','#C2C2F0','#F0E68C']\nexplode = (0.1, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nplt.figure(figsize=(6.0, 4.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Add title\nplt.title('Matplotlib bakery: A donut')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Transport', 'Food', 'Utilities', 'Others', 'Entertainment']\nsizes = [37.5, 29.2, 16.7, 10.0, 10.0]\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#90EE90', '#FF4500']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Expenses - Company vs. Project')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first pie chart\nlabels1 = ['Unused', 'Model', 'Optimiser', 'Gradient']\nsizes1 = [31.4, 15.7, 19.9, 33.0]\ncolors1 = ['#FFD700', '#FF6347', '#87CEEB', '#90EE90']\nexplode1 = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Data for the second pie chart\nlabels2 = ['Unused', 'Model', 'Optimiser', 'Gradient']\nsizes2 = [54.8, 10.5, 6.3, 28.4]\ncolors2 = ['#FFD700', '#FF6347', '#87CEEB', '#90EE90']\nexplode2 = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first pie chart\naxes[0].pie(sizes1, explode=explode1, labels=labels1, colors=colors1,\n            autopct='%1.1f%%', shadow=True, startangle=140)\naxes[0].set_title('LoRA')\n\n# Plot the second pie chart\naxes[1].pie(sizes2, explode=explode2, labels=labels2, colors=colors2,\n            autopct='%1.1f%%', shadow=True, startangle=140)\naxes[1].set_title('QLoRA')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie charts\ndata1 = [25.1, 26.4, 12.6, 15.9]\ndata2 = [46.2, 23.9, 4.6, 5.3]\n\n# Define colors for the pie charts\ncolors1 = ['#FFA500', '#90EE90', '#ADD8E6', '#FFD700']\ncolors2 = ['#FFA500', '#90EE90', '#ADD8E6', '#FFD700']\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 2, figsize=(5.0, 8.0))\n\n# Plot the first pie chart\naxes[0].pie(data1, colors=colors1, startangle=90, autopct='%1.1f%%', shadow=True)\naxes[0].set_title('Full Finetuning', fontsize=12, fontweight='bold')\naxes[0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Plot the second pie chart\naxes[1].pie(data2, colors=colors2, startangle=90, autopct='%1.1f%%', shadow=True)\naxes[1].set_title('QLoRA', fontsize=12, fontweight='bold')\naxes[1].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a legend to the first pie chart\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\naxes[0].legend(labels1, loc='upper right', bbox_to_anchor=(1.2, 1), fontsize=8)\n\n# Add a legend to the second pie chart\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\naxes[1].legend(labels2, loc='upper right', bbox_to_anchor=(1.2, 1), fontsize=8)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Fruits', 'Proteins', 'Grains', 'Vegetables', 'Dairy']\nsizes = [25.0, 35.0, 10.0, 20.0, 10.0]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nplt.title('Nutritional Distribution')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 35.7, 37.5]\ncolors = ['#FFA500', '#00BFFF', '#00FF00']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Market Share by Sector - External vs. Internal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nsizes = [40, 33.3, 33.3, 10, 10]\nlabels = ['Hogs 30%', 'Frogs 15%', 'Dogs 45%', 'Logs 10%', 'Frogs 15%']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Add a title\nax.set_title('Hogs 30%', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [29, 11, 20, 40]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes,\n    labels=labels,\n    colors=colors,\n    autopct='%1.1f%%',\n    startangle=140,\n    textprops={'color': 'white'}\n)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle\nax.axis('equal')\n\n# Add a title\nax.set_title('Pie Chart Example', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\nlabels = ['France', 'Germany', 'Italy', 'UK']\nsizes = [18, 12, 28, 42]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Add title\nplt.title('Countries in Europe')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [26.2, 13.3, 14.3, 19.0, 21.4]\nlabels = ['Slice 1', 'Slice 2', 'Slice 3', 'Slice 4', 'Slice 5']\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nplt.title('Slice of a pie chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [35.4, 12.4, 17.2, 24.7, 10.3]\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Add a title to the chart\nax.set_title('Pie Chart of Various Categories', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 35, 10, 20]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Add title\nplt.title('Social Media Usage')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP', 'ACL']\nsizes = [25.4, 7.4, 20.3, 12.2, 34.7]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle\nax.axis('equal')\n\n# Add a title\nax.set_title('NLP Conference Influence', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Coal', 'Hydro', 'Solar', 'Wind']\nsizes = [25.0, 15.0, 37.5, 30.0]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nplt.title('Energy Consumption - National vs. Project')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(10)\ny1 = np.array([-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, -0.05, 0.25, 0.78])\ny2 = np.array([-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, -0.05, 0.25, 0.78])\ny3 = np.array([-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, -0.05, 0.25, 0.78])\ny4 = np.array([-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, -0.05, 0.25, 0.78])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, 'ro-', label='English (Collectivism)', linewidth=2, markersize=8)\nax.plot(x, y2, 'bo-', label='French (Individualism)', linewidth=2, markersize=8)\nax.plot(x, y3, 'go-', label='German (Collectivism)', linewidth=2, markersize=8)\nax.plot(x, y4, 'mo-', label='Japanese (Individualism)', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\ny1 = np.array([-4.00, -3.22, -2.44, -2.00, -1.50, -1.00, -0.50, 0.00, 0.50])\ny2 = np.array([-3.00, -2.50, -2.00, -1.50, -1.00, -0.50, 0.00, 0.50, 1.00])\ny3 = np.array([-2.00, -1.50, -1.00, -0.50, 0.00, 0.50, 1.00, 1.50, 2.00])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with specific styles\nax.plot(x, y1, color='red', marker='o', linestyle='-', label='English')\nax.plot(x, y2, color='red', marker='o', linestyle='--', label='French')\nax.plot(x, y3, color='red', marker='o', linestyle='-.', label='German')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx1 = np.linspace(0, 0.6, 100)\nx2 = np.linspace(0, 0.6, 100)\nX1, X2 = np.meshgrid(x1, x2)\nZ1 = np.sin(X1) * np.cos(X2)\nZ2 = np.sin(X1) * np.sin(X2)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\ncontour1 = ax.contourf(X1, X2, Z1, cmap='viridis', alpha=0.7)\ncontour2 = ax.contour(X1, X2, Z2, colors='black', linewidths=0.5)\n\n# Add color bar\ncbar = fig.colorbar(contour1, ax=ax)\ncbar.set_label('Contour Level')\n\n# Set labels and title\nax.set_xlabel('X1')\nax.set_ylabel('X2')\nax.set_title('Contour Plot of Two Functions')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 4.0))\n\n# Define the grid of points\nx = np.linspace(-1, 1, 20)\ny = np.linspace(-1, 1, 20)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the vector field components\nU = -Y\nV = X\n\n# Plot the vector field\nplt.quiver(X, Y, U, V, color='b', scale=20)\n\n# Set labels for the axes\nplt.xlabel('X')\nplt.ylabel('Y')\n\n# Set the title of the plot\nplt.title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 5.0))\n\n# Define the grid of points\nx = np.linspace(-2.0, 2.0, 100)\ny = np.linspace(-2.0, 2.0, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the vector field components\nU = -Y / (X**2 + Y**2)\nV = X / (X**2 + Y**2)\n\n# Plot the vector field\nplt.quiver(X, Y, U, V, color='b', scale=20)\n\n# Set labels for the axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Set the title of the plot\nplt.title('Magnetic Field \\u03B2 in Tesla units')\n\n# Add a grid for better readability\nplt.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlabels = ['VQA', 'SQA-I', 'TextVQA', 'SQA']\nsizes = [79.9, 86.8, 78.2, 59.1]\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#FF4500']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Sample Pie Chart', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['fr', 'hi', 'ru', 'th', 'tr', 'ur', 'vi', 'zh']\nvalues = [20, 40, 60, 80, 100, 120, 140, 160]\nnum_vars = len(categories)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Calculate the angle for each category\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Speed-up ratio: 4')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Understanding', 'Memory', 'Reasoning', 'Questioning', 'Paraphrasing', 'Reflection']\nvalues = [8, 10, 6, 4, 2, 0]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 4.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.plot(np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist() + [np.linspace(0, 2 * np.pi, len(categories), endpoint=False)[0]], \n        values + [values[0]], color='white', linewidth=2)\nax.fill(np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist() + [np.linspace(0, 2 * np.pi, len(categories), endpoint=False)[0]], \n        values + [values[0]], color=colors[0], alpha=0.3)\n\n# Set the category labels\nax.set_xticks(np.linspace(0, 2 * np.pi, len(categories), endpoint=False))\nax.set_xticklabels(categories, fontsize=8)\n\n# Add a title\nax.set_title('Interference', fontsize=10, y=1.05)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ndata = np.array([\n    [0.43, 0.24, 0.28, 0.29],\n    [0.37, 0.22, 0.24, 0.36],\n    [0.46, 0.22, 0.24, 0.48],\n    [0.5, 0.22, 0.24, 0.48]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with a colormap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xlabel('NTP')\nax.set_ylabel('NFF')\nax.set_title('Sample Data Visualization')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['video game', 'programming world', 'universe', 'fairy tale', 'general', 'movie', 'city', 'special place', 'landscape', 'cultural event']\nN = len(categories)\nvalues = [0.8, 0.6, 0.4, 0.2, 0.6, 0.8, 0.2, 0.4, 0.6, 0.8]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the data on the radar chart\nax.plot(np.append(values, values[0]), np.append(categories, categories[0]), 'o-', lw=2, color='b')\nax.fill(np.append(values, values[0]), np.append(categories, categories[0]), alpha=0.25, color='b')\n\n# Set the title of the chart\nax.set_title('Llama-2-70B', y=1.1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Reasoning', 'Writing', 'Math', 'Coding', 'Humanities', 'STEM']\nN = len(categories)\nvalues = [\n    [1, 2, 3, 4, 5, 6],  # GPT-J-6B\n    [2, 3, 4, 5, 6, 7],  # TinyLLaMA-1.1B\n    [3, 4, 5, 6, 7, 8],  # OpenLLaMA-3B\n    [4, 5, 6, 7, 8, 9],  # OpenMoE-8B/32E\n    [5, 6, 7, 8, 9, 10]  # Humanities\n]\n\n# Convert data to a format suitable for plotting\nvalues += values[:1]  # Repeat the first value to close the loop\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot each dataset\nfor i, value in enumerate(values):\n    ax.plot(angles, value, linewidth=1, linestyle='solid', label=f'Dataset {i+1}')\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Nutrition', 'Purity', 'Allergen', 'Pollution', 'Storage', 'Recall', 'Material']\nN = len(categories)\nvalues = [0.5, 0.7, 0.3, 0.6, 0.4, 0.8, 0.2]\nvalues += values[:1]  # Repeat the first value to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.plot(np.linspace(0, 2 * np.pi, N, endpoint=False).tolist() + [np.linspace(0, 2 * np.pi, N, endpoint=False)[0]], \n        values, linewidth=2, linestyle='solid', color='red')\nax.fill(np.linspace(0, 2 * np.pi, N, endpoint=False).tolist() + [np.linspace(0, 2 * np.pi, N, endpoint=False)[0]], \n        values, alpha=0.25, color='red')\n\n# Set the category labels\nax.set_xticks(np.linspace(0, 2 * np.pi, N, endpoint=False))\nax.set_xticklabels(categories)\n\n# Customize the plot\nax.set_title('MUJI vs Nestle in Food Safety', fontsize=14, fontweight='bold', pad=20)\nax.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Add a legend\nax.legend(['MUJI'], loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Apple', 'Samsung', 'Huawei']\nN = len(categories)\nvalues = [85.8, 86.4, 80.9]\n\n# Convert values to angles\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nvalues += values[:1]  # Repeat the first value to close the shape\nangles += angles[:1]  # Repeat the first angle to close the shape\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values, linewidth=1, linestyle='solid')\nax.fill(angles, values, alpha=0.25)\n\n# Set category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Set title and labels\nax.set_title('Radar Chart Example', size=16, color='b', y=1.1)\nax.set_rlabel_position(0)\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Blow Molding', 'Injection', 'Extrusion', 'Compression']\nvalues1 = [1, 2, 3, 4]\nvalues2 = [2, 3, 4, 5]\nvalues3 = [3, 4, 5, 6]\nvalues4 = [4, 5, 6, 7]\n\n# Number of variables and their order\nN = len(categories)\n\n# Convert category labels into position on X axis\nangles = [n / float(N) * 2 * np.pi for n in range(N)]\nangles += angles[:1]  # repeat the first value to close the circular chart\n\n# Initialize the spider plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot each individual line.\nax.plot(angles, values1 + values1[:1], linewidth=1, linestyle='solid', label='Rotational')\nax.fill(angles, values1 + values1[:1], 'r', alpha=0.1)\n\nax.plot(angles, values2 + values2[:1], linewidth=1, linestyle='solid', label='Injection Molding')\nax.fill(angles, values2 + values2[:1], 'g', alpha=0.1)\n\nax.plot(angles, values3 + values3[:1], linewidth=1, linestyle='solid', label='Blow Molding')\nax.fill(angles, values3 + values3[:1], 'b', alpha=0.1)\n\nax.plot(angles, values4 + values4[:1], linewidth=1, linestyle='solid', label='Compression Molding')\nax.fill(angles, values4 + values4[:1], 'y', alpha=0.1)\n\n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], categories)\nplt.yticks([1, 2, 3, 4, 5], [\"1\", \"2\", \"3\", \"4\", \"5\"], color=\"grey\", size=7)\nplt.ylim(0, 5)\n\n# Add a title\nplt.title(\"Radar Chart Example\", size=11, color=\"black\", y=1.1)\n\n# Show the legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Food Quality', 'Shows', 'Staff', 'Family Rides', 'Cleanliness', 'Thrill Rides', 'Wait Times', 'Parking', 'Ticket Price', 'Souvenirs']\nN = len(categories)\n\n# Data for Disney and Universal Studios\ndisney_data = [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0, 0.8]\nuniversal_studios_data = [0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6]\n\n# Normalize the data\nmax_value = max(max(disney_data), max(universal_studios_data))\ndisney_data = [x / max_value for x in disney_data]\nuniversal_studios_data = [x / max_value for x in universal_studios_data]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the data for Disney\nax.plot(np.arange(N) + np.pi / N, disney_data + disney_data[:1], label='Disney', color='orange')\nax.fill(np.arange(N) + np.pi / N, disney_data + disney_data[:1], alpha=0.25, color='orange')\n\n# Plot the data for Universal Studios\nax.plot(np.arange(N) + np.pi / N, universal_studios_data + universal_studios_data[:1], label='Universal Studios', color='purple')\nax.fill(np.arange(N) + np.pi / N, universal_studios_data + universal_studios_data[:1], alpha=0.25, color='purple')\n\n# Set the category labels\nax.set_xticks(np.arange(N) + np.pi / N)\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set the title\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Creativity', 'Versatility', 'Longevity', 'Sillage', 'Projection', 'Value', 'Popularity', 'Packaging']\nvalues = [9, 5, 7, 3, 1, 5, 1, 3]\ncolors = ['#FFA500', '#87CEEB', '#90EE90', '#FFD700', '#FF4500', '#ADD8E6', '#FF69B4', '#2E8B57']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Calculate the number of categories and create an array of angles\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', color='black')\nax.fill(angles, values + values[:1], facecolor='grey', alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Customize the plot\nax.set_title('Radar Chart Example', size=14, color='black', y=1.1)\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['TinyLaMA', 'StableLM', 'Phi-2']\nvalues = [78.7, 76.1, 85.8]\ncolors = ['#FF5733', '#33FF57', '#3357FF']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the radar chart\nax.bar(categories, values, color=colors, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Radar Chart of Model Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the radar chart\ncategories = ['Versatility', 'Longevity', 'Sillage', 'Projection', 'Value', 'Packaging']\nChanel = [5, 7, 9, 3, 1, 5]\nDior = [3, 5, 7, 1, 7, 3]\nGucci = [1, 9, 5, 7, 1, 9]\n\n# Number of variables\nN = len(categories)\n\n# Convert list of categories into label positions\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # repeat the first value to close the circular chart\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(18.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot each brand's data\nax.plot(angles, Chanel + Chanel[:1], linewidth=1, linestyle='solid', label='Chanel')\nax.fill(angles, Chanel + Chanel[:1], alpha=0.25)\nax.plot(angles, Dior + Dior[:1], linewidth=1, linestyle='solid', label='Dior')\nax.fill(angles, Dior + Dior[:1], alpha=0.25)\nax.plot(angles, Gucci + Gucci[:1], linewidth=1, linestyle='solid', label='Gucci')\nax.fill(angles, Gucci + Gucci[:1], alpha=0.25)\n\n# Draw one axe per variable and add labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a grid\nax.yaxis.grid(True)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set title\nplt.title('Perfume Brand Comparison', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Loadings for two different conditions\nloadings_pc1 = np.array([0.6, 0.4, 0.2, 0.8, 0.6])\nloadings_pc2 = np.array([0.2, 0.4, 0.6, 0.8, 0.6])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the radar chart for PC1\nax.plot(np.arange(len(loadings_pc1)), loadings_pc1, label='Loadings PC1', color='black', marker='o')\nax.fill_between(np.arange(len(loadings_pc1)), loadings_pc1, alpha=0.3, color='gray')\n\n# Plot the radar chart for PC2\nax.plot(np.arange(len(loadings_pc2)), loadings_pc2, label='Loadings PC2', color='red', marker='o')\nax.fill_between(np.arange(len(loadings_pc2)), loadings_pc2, alpha=0.3, color='pink')\n\n# Set the title and labels\nax.set_title('Radar Chart of Loadings for Two Conditions', fontsize=14, fontweight='bold')\nax.set_xlabel('Variables', fontsize=12)\nax.set_ylabel('Loadings', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(loadings_pc1)))\nax.set_xticklabels(['Var1', 'Var2', 'Var3', 'Var4', 'Var5'], rotation=45, fontsize=10)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Privacy', 'Query Error']\nvalues1 = [3, 2]\nvalues2 = [4, 3]\nvalues3 = [5, 4]\n\n# Number of variables and their positions\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the first radar chart\nax.plot(angles, values1 + values1[:1], linewidth=2, linestyle='solid', label='Fidelity(D_train)')\nax.fill(angles, values1 + values1[:1], alpha=0.25)\n\n# Plot the second radar chart\nax.plot(angles, values2 + values2[:1], linewidth=2, linestyle='dashed', label='Fidelity(D_test)')\nax.fill(angles, values2 + values2[:1], alpha=0.25)\n\n# Plot the third radar chart\nax.plot(angles, values3 + values3[:1], linewidth=2, linestyle='dashdot', label='TVAE')\nax.fill(angles, values3 + values3[:1], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Baseline', 'Retro(Syn2)', 'Oxidations', 'Reductions', 'Deprotects', 'Acylation and related processes', 'Heteroatom alkylation and arylation', 'Functional group addition, FGA', 'Functional group interconversion, FGI']\nN = len(categories)\nvalues = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(np.append(values, values[0]), np.append(categories, categories[0]), linewidth=2, linestyle='solid', color='orange')\nax.fill(np.append(values, values[0]), np.append(categories, categories[0]), alpha=0.25, color='orange')\n\n# Set the title of the chart\nax.set_title('Radar Chart Example', size=16, color='black', y=1.1)\n\n# Customize the grid lines\nax.set_rgrids(range(0, 100, 10))\nax.set_yticks(range(N))\nax.set_yticklabels(categories)\n\n# Set the axis limits\nax.set_ylim(-0.5, N - 0.5)\n\n# Add a legend\nax.legend(['Data'], loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F']\npredicted_scores = [0.07, 0.03, 0.05, 0.07, 0.03, 0.07]\nhelpful_scores = [0.03, 0.03, 0.03, 0.03, 0.03, 0.03]\nresult_scores = [0.07, 0.03, 0.05, 0.07, 0.03, 0.07]\nrating_scores = [0.1, 0.05, 0.07, 0.1, 0.05, 0.07]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define colors for each model\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot the data\nfor i, model in enumerate(models):\n    ax.plot([i], [predicted_scores[i]], 'o', color=colors[i], label=f'{model} predicted score')\n    ax.plot([i], [helpful_scores[i]], 'x', color=colors[i], label=f'{model} helpful score')\n    ax.plot([i], [result_scores[i]], '^', color=colors[i], label=f'{model} result score')\n    ax.plot([i], [rating_scores[i]], 's', color=colors[i], label=f'{model} rating score')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Comparison of Model Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['rose', 'candlestick', 'multi-axes', 'bubble', 'radar', 'area', 'pie', 'funnel', 'bar', 'box', 'treemap', 'heatmap']\nvalues = [3, 4, 2, 5, 1, 2, 3, 4, 5, 1, 2, 3]\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#90EE90', '#FFA500', '#ADD8E6', '#FF4500', '#87CEEB', '#FF69B4', '#2F4F4F', '#FFD700', '#FF6347']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the radar chart\nax.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the chart\nax.set_title('3D-bar', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(categories, loc='upper right', bbox_to_anchor=(1.2, 1), fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Anomaly Detection', 'Long-horizon Forecasting', 'Short-horizon Forecasting']\nvalues = [\n    [0.2, 0.3, 0.4],\n    [0.5, 0.6, 0.7],\n    [0.8, 0.9, 1.0]\n]\n\n# Convert data to polar coordinates\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # repeat the first value to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nfor i, (category, value) in enumerate(zip(categories, values)):\n    ax.plot(angles, value + [value[0]], label=category, linewidth=2, linestyle='-', marker='o')\n    ax.fill(angles, value + [value[0]], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['POPE', 'MM-Vet', 'TextVQA', 'GQA']\nvalues = [72.9, 56.9, 62.8, 49.3]\ncolors = ['#FF5733', '#33FF57', '#3357FF', '#F333FF']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nwedges, texts, autotexts = ax.pie(values, explode=explode, labels=categories, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Sample Pie Chart', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hf_falcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nvalues = [\n    [0.5, 0.8, 1.2, 1.5, 1.8],\n    [0.6, 0.9, 1.3, 1.6, 1.9],\n    [0.7, 1.0, 1.4, 1.7, 2.0],\n    [0.8, 1.1, 1.5, 1.8, 2.1],\n    [0.9, 1.2, 1.6, 1.9, 2.2],\n    [1.0, 1.3, 1.7, 2.0, 2.3],\n    [1.1, 1.4, 1.8, 2.1, 2.4],\n    [1.2, 1.5, 1.9, 2.2, 2.5],\n    [1.3, 1.6, 2.0, 2.3, 2.6]\n]\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(nrows=1, ncols=5, figsize=(12.0, 4.0))\n\n# Plot each model's data\nfor i, ax in enumerate(axes):\n    ax.scatter(range(len(values[i])), values[i], color='blue')\n    ax.set_title(models[i])\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Model-Basedness')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 100, 200, 3000])\ny = np.array([77, 79, 81, 85])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with specific styles\nax.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Pre-training GPU Hours')\nax.set_ylabel('Accuracy [%]')\nax.set_title('ImageNet-1K Linear Probing')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ninference_times = np.array([10, 20, 30, 40, 50, 60])\naverage_scores = np.array([0.85, 0.80, 0.75, 0.70, 0.65, 0.60])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nscatter = ax.scatter(inference_times, average_scores, c=average_scores, cmap='viridis', s=100, edgecolor='w', alpha=0.7)\n\n# Add a color bar to indicate the scale of the scores\ncbar = plt.colorbar(scatter)\ncbar.set_label('Average Score')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Inference Time (seconds)', fontsize=12, fontweight='bold')\nax.set_ylabel('Average Score', fontsize=12, fontweight='bold')\nax.set_title('Bubble Size: Number of Anomalies Detected', fontsize=14, fontweight='bold')\n\n# Customize grid lines\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([25, 30, 40, 45, 50])\ny = np.array([40, 45, 50, 55, 60])\nlabels = ['MC-VIT-B', 'Bard + ImageViT', 'ShortViT', 'Bard + ShortViT', 'MC-ViT-L']\ncolors = ['blue', 'green', 'red', 'purple', 'orange']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the scatter plot with enhanced aesthetics\nscatter = ax.scatter(x, y, c=colors, s=100, edgecolor='black', linewidth=1.5, alpha=0.7)\n\n# Add labels and title\nax.set_xlabel('EgoSchema VQA accuracy')\nax.set_ylabel('Perception Test VQA accuracy')\nax.set_title('Number of parameters')\n\n# Add annotations for each point\nfor i, txt in enumerate(labels):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Customize the grid\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Set limits for axes\nax.set_xlim(20, 50)\nax.set_ylim(35, 60)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\ny1 = np.array([0.08, 0.07, 0.06, 0.05, 0.04])\ny2 = np.array([0.08, 0.07, 0.06, 0.05, 0.04])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, 'bo-', label='Single LSTM', linewidth=2, markersize=8)\nax.plot(x, y2, 'g^-', label='Ensemble LSTM', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Test Case Index')\nax.set_ylabel('Average Relative Error, u')\nax.set_title('Average Relative Error, u')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\nmajority_accuracies = [0.85, 0.92, 0.78, 0.65, 0.90, 0.88, 0.75, 0.80]\nminority_accuracies = [0.70, 0.75, 0.60, 0.55, 0.85, 0.80, 0.70, 0.75]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.plot(classes, majority_accuracies, label='Majority', marker='o', linestyle='-', color='blue')\nax.plot(classes, minority_accuracies, label='Minority', marker='o', linestyle='--', color='red')\n\n# Set labels and title\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Add a legend\nax.legend()\n\n# Set grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([50, 30, 20, 10, 0])\ny = np.array([68, 66, 64, 62, 60])\nz = np.array([68, 66, 64, 62, 60])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.scatter(x, y, color='blue', label='Accuracy')\nax.scatter(x, z, color='red', label='TFLOPs')\n\n# Set labels and title\nax.set_xlabel('Token cost($)')\nax.set_ylabel('Accuracy(%)')\nax.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([15, 20, 25, 30, 35, 40, 45, 50])\ny = np.array([5, 10, 15, 20, 25, 30, 35, 40])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with various styles\nax.plot(x, y, label='Data Line', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\nax.set_title('Energy Source vs Carbon Reduction')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-30, -20, -10, 0, 10, 20, 30])\ny = np.array([5, 15, 25, 35, 45, 55, 65])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Scatter plot with different sizes and colors\nscatter = ax.scatter(x, y, s=100, c=y, cmap='viridis', alpha=0.7)\n\n# Add a color bar which maps values to colors\ncbar = plt.colorbar(scatter)\ncbar.set_label('Value')\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Scatter Plot with Color Mapping')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: two sets of points with different colors\nx = np.array([2, 4, 6, 8, 10, 12, 14, 16])\ny1 = np.array([95, 90, 85, 80, 75, 70, 65, 60])\ny2 = np.array([105, 100, 95, 90, 85, 80, 75, 70])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different markers and colors\nax.plot(x, y1, 'bo', label='Day 1')\nax.plot(x, y2, 'ro', label='Day 2')\n\n# Set labels for axes\nax.set_xlabel('Time (hours)')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Add a title to the plot\nax.set_title('Temperature Variation Over Time')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 4, 6, 8, 10, 12, 14, 16])\ny = np.array([95, 90, 85, 80, 75, 70, 65, 60])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.scatter(x, y, color='green', label='Data Points')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Scatter Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([175, 200, 225, 250, 275, 300])\ny1 = np.array([140, 160, 180, 200, 220, 240])\ny2 = np.array([150, 170, 190, 210, 230, 250])\ny3 = np.array([160, 180, 200, 220, 240, 260])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Solar Energy', color='blue', linestyle='-', marker='o')\nax.plot(x, y2, label='Wind Energy', color='red', linestyle='--', marker='s')\nax.plot(x, y3, label='Hydropower', color='gray', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\nax.set_title('Energy Production Trends')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90])\ny = np.array([20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with specific styling\nscatter = ax.scatter(x, y, c=y, cmap='viridis', s=100, alpha=0.7)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(scatter)\ncbar.set_label('Intensity')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Scatter plot with colorbar')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx1 = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.9, 0.8, 0.8, 0.7, 0.6, 0.9, 0.9])\n\nx2 = np.array([2, 3, 4, 5, 6, 7, 8])\ny2 = np.array([0.9, 0.8, 0.8, 0.7, 0.6, 0.9, 0.9])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the first dataset\nax.plot(x1, y1, 'bo-', label='LibriCSS WER', linewidth=2, markersize=8)\n\n# Plot the second dataset\nax.plot(x2, y2, 'ro-', label='AMI WER', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('LibriCSS vs Additional Data 1')\n\n# Add a legend\nax.legend()\n\n# Set x and y limits\nax.set_xlim(1, 9)\nax.set_ylim(0.2, 1.0)\n\n# Customize grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'claude-2', 'claude-1', 'text-bison@002', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nexploration_values = [0.85, 0.9, 0.88, 0.92, 0.87, 0.91, 0.93, 0.89, 0.94, 0.86]\nrisk_taking_values = [0.15, 0.1, 0.12, 0.08, 0.13, 0.09, 0.07, 0.11, 0.06, 0.14]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data with enhanced styling\nax.scatter(exploration_values, risk_taking_values, c='green', label='Exploration')\nax.scatter(exploration_values, risk_taking_values, c='red', marker='x', label='Risk Taking')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Exploration', fontsize=12)\nax.set_ylabel('Risk Taking', fontsize=12)\nax.set_title('Performance Comparison', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend with a more descriptive title\nax.legend(title='Strategy Traits', loc='upper right', fontsize=10)\n\n# Set x and y limits for better focus\nax.set_xlim(0.0, 1.0)\nax.set_ylim(0.0, 1.0)\n\n# Add annotations for each point\nfor i, model in enumerate(models):\n    ax.annotate(model, (exploration_values[i], risk_taking_values[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['Model-Basedness', 'Meta-Cognition', 'Exploration', 'Risk Taking']\ngpt4_scores = [1.5, 1.75, 1.25, 1.0]\nmptb_scores = [1.6, 1.7, 1.3, 1.1]\nlma270b_scores = [1.5, 1.6, 1.2, 1.0]\ndavinci40b_scores = [1.4, 1.5, 1.1, 0.9]\nclade2_scores = [1.3, 1.4, 1.0, 0.8]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first subplot: Model-Basedness vs Meta-Cognition\naxes[0, 0].plot(models, gpt4_scores, label='GPT-4', color='blue')\naxes[0, 0].plot(models, mptb_scores, label='MPT-B', color='green')\naxes[0, 0].plot(models, lma270b_scores, label='Llama2-70B', color='orange')\naxes[0, 0].plot(models, davinci40b_scores, label='Davinci-40B', color='purple')\naxes[0, 0].plot(models, clade2_scores, label='Claude-2', color='red')\n\n# Set labels and title for the first subplot\naxes[0, 0].set_xlabel('Models')\naxes[0, 0].set_ylabel('Score')\naxes[0, 0].set_title('Model-Basedness')\naxes[0, 0].legend()\n\n# Plot the second subplot: Exploration vs Risk Taking\naxes[0, 1].plot(models, gpt4_scores, label='GPT-4', color='green')\naxes[0, 1].plot(models, mptb_scores, label='MPT-B', color='red')\naxes[0, 1].plot(models, lma270b_scores, label='Llama2-70B', color='orange')\naxes[0, 1].plot(models, davinci40b_scores, label='Davinci-40B', color='purple')\naxes[0, 1].plot(models, clade2_scores, label='Claude-2', color='blue')\n\n# Set labels and title for the second subplot\naxes[0, 1].set_xlabel('Models')\naxes[0, 1].set_ylabel('Score')\naxes[0, 1].set_title('Exploration')\naxes[0, 1].legend()\n\n# Plot the third subplot: Model-Basedness vs Risk Taking\naxes[1, 0].plot(models, gpt4_scores, label='GPT-4', color='red')\naxes[1, 0].plot(models, mptb_scores, label='MPT-B', color='green')\naxes[1, 0].plot(models, lma270b_scores, label='Llama2-70B', color='orange')\naxes[1, 0].plot(models, davinci40b_scores, label='Davinci-40B', color='purple')\naxes[1, 0].plot(models, clade2_scores, label='Claude-2', color='blue')\n\n# Set labels and title for the third subplot\naxes[1, 0].set_xlabel('Models')\naxes[1, 0].set_ylabel('Score')\naxes[1, 0].set_title('Model-Basedness')\naxes[1, 0].legend()\n\n# Plot the fourth subplot: Exploration vs Meta-Cognition\naxes[1, 1].plot(models, gpt4_scores, label='GPT-4', color='blue')\naxes[1, 1].plot(models, mptb_scores, label='MPT-B', color='red')\naxes[1, 1].plot(models, lma270b_scores, label='Llama2-70B', color='green')\naxes[1, 1].plot(models, davinci40b_scores, label='Davinci-40B', color='orange')\naxes[1, 1].plot(models, clade2_scores, label='Claude-2', color='purple')\n\n# Set labels and title for the fourth subplot\naxes[1, 1].set_xlabel('Models')\naxes[1, 1].set_ylabel('Score')\naxes[1, 1].set_title('Risk Taking')\naxes[1, 1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx_values = [70, 75, 80, 90]\ny_values = [75, 80, 85, 90]\ncolor_scale = [30, 40, 50, 60]\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Scatter Plot - Deepskyblue\naxes[0].scatter(x_values, y_values, c=color_scale, cmap='deepskyblue', s=100)\naxes[0].set_title('Scatter Plot - deepskyblue')\naxes[0].set_xlabel('X Values')\naxes[0].set_ylabel('Y Values')\n\n# Scatter Plot - Magenta\naxes[1].scatter(x_values, y_values, c=color_scale, cmap='magenta', s=100)\naxes[1].set_title('Scatter Plot - magenta')\naxes[1].set_xlabel('X Values')\naxes[1].set_ylabel('Y Values')\n\n# Scatter Plot - Limegreen\naxes[2].scatter(x_values, y_values, c=color_scale, cmap='limegreen', s=100)\naxes[2].set_title('Scatter Plot - limegreen')\naxes[2].set_xlabel('X Values')\naxes[2].set_ylabel('Y Values')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([70, 72, 74, 76, 78, 80, 82, 84, 86, 88])\ny1 = np.array([30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5, 50, 52.5])\ny2 = np.array([27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5, 50])\ny3 = np.array([25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5])\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Plot the first subplot\naxes[0].plot(x, y1, 'o-', color='purple', label='ViT Pose (sc)')\naxes[0].set_title('ViT Pose (sc) Performance')\naxes[0].set_xlabel('Average Precision on MSCOCO (%)')\naxes[0].set_ylabel('Average Precision on HumanArt (%)')\naxes[0].legend()\naxes[0].grid(True)\n\n# Plot the second subplot\naxes[1].plot(x, y2, 'o-', color='purple', label='ViT Pose (ft)')\naxes[1].set_title('ViT Pose (ft) Performance')\naxes[1].set_xlabel('Average Precision on MSCOCO (%)')\naxes[1].set_ylabel('Average Precision on HumanArt (%)')\naxes[1].legend()\naxes[1].grid(True)\n\n# Plot the third subplot\naxes[2].plot(x, y3, 'o-', color='purple', label='VLPose')\naxes[2].set_title('VLPose Performance')\naxes[2].set_xlabel('Average Precision on MSCOCO (%)')\naxes[2].set_ylabel('Average Precision on HumanArt (%)')\naxes[2].legend()\naxes[2].grid(True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.5, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0])\ny = np.array([1.0, 2.5, 10.0, 20.0, 25.0, 1.0, 2.5, 10.0, 20.0, 25.0, 1.0, 2.5, 10.0, 20.0, 25.0, 1.0, 2.5, 10.0, 20.0, 25.0, 1.0, 2.5, 10.0, 20.0, 25.0, 1.0])\ncolors = ['red', 'green', 'blue', 'purple', 'orange', 'gray', 'cyan', 'magenta', 'yellow', 'black']\nsizes = [100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different colors and sizes\nfor i in range(len(x)):\n    ax.scatter(x[i], y[i], s=sizes[i], c=colors[i % len(colors)], alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Diversity')\nax.set_ylabel('Token cost ($)')\nax.set_title('TFLOPS')\n\n# Add a legend\nlegend_labels = ['CoT', 'DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'SP', 'ToT', 'Self-refine', 'MAD+judge', 'CoT', 'DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'SP', 'ToT', 'Self-refine', 'MAD+judge', 'CoT', 'DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge']\nax.legend(legend_labels, loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(5.0, 5.0))\n\n# Generate random data for the scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\narea = np.pi * (15 * np.random.rand(100))**2  # Radius varies from 0 to 15\n\n# Create a scatter plot with varying colors and sizes\nscatter = plt.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Set labels for the axes\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n\n# Add a title to the plot\nplt.title('Scatter Plot with Varying Colors and Sizes')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2])\ny = np.array([800, 700, 600, 500, 400, 300, 200, 100])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y, 'bo-', label='SIREN')\nax.plot(x, y + 100, 'co--', label='WIRE')\nax.plot(x, y + 200, 'ro-.', label='FFN')\nax.plot(x, y + 300, 'go:', label='SZ3')\nax.plot(x, y + 400, 'mo-', label='NNComp')\nax.plot(x, y + 500, 'yo--', label='Ours')\n\n# Set labels and title\nax.set_xlabel('Bit per pixel (BPP)')\nax.set_ylabel('WRMSE vs BPP')\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: three different conditions with varying densities of points\nx1 = np.random.randn(100)\ny1 = np.random.randn(100)\n\nx2 = np.random.randn(50)\ny2 = np.random.randn(50)\n\nx3 = np.random.randn(75)\ny3 = np.random.randn(75)\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with different markers and colors\nax.scatter(x1, y1, c='orange', label='Daytime Sunny')\nax.scatter(x2, y2, c='blue', label='Night Rainy')\nax.scatter(x3, y3, c='green', label='PGST')\n\n# Set labels for clarity\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Scatter Plot with Three Conditions')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn_params = np.array([0.5, 1.0, 2.0, 3.0, 4.0, 5.0])\nnmae = np.array([15.0, 18.0, 22.0, 25.0, 28.0, 30.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data with enhanced aesthetics\nax.scatter(n_params, nmae, c='blue', marker='o', s=100, edgecolor='black', linewidth=1.5, alpha=0.7)\n\n# Set labels with improved font size and style\nax.set_xlabel('Number of parameters (M)', fontsize=12, fontweight='bold')\nax.set_ylabel('NMAE on QM9', fontsize=12, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Set limits for axes\nax.set_xlim(0.0, 5.5)\nax.set_ylim(10.0, 35.0)\n\n# Add a title with enhanced font size and style\nax.set_title('Number of params. vs. NMAE on QM9', fontsize=14, fontweight='bold', pad=15)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\narea = (30 * np.random.rand(100))**2  # 0 to 15 point radii\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Scatter plot with different colors and sizes\nscatter = ax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\nax.set_title('Legend')\n\n# Add a legend\nlegend_labels = ['ar', 'de', 'fr', 'he']\nlegend_handles = [plt.Line2D([0], [0], marker='o', color='w', label=label, \n                           markerfacecolor=color, markersize=10) for color, label in zip(['b', 'p', 'y', 'g'], legend_labels)]\nax.legend(handles=legend_handles, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.6, 0.7, 0.8, 0.9, 1.0])\ny = np.array([0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Plot the data with different markers and colors\nax.scatter(x, y, c='green', marker='o', label='iTrm-All')\nax.scatter(x, y, c='cyan', marker='s', label='iTrm-En')\nax.scatter(x, y, c='orange', marker='^', label='PatchTST')\nax.scatter(x, y, c='red', marker='v', label='TiDE')\nax.scatter(x, y, c='darkred', marker='x', label='TimeXer')\n\n# Set labels and title\nax.set_xlabel('CKA Similarity')\nax.set_ylabel('MSE')\nax.set_title('DE')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['physicsforums.com', 'gmatclub.com', 'mathhelpboards.com', 'stackexchange.com', 'mathoverflow.net', 'proofwiki.org']\nsizes = [18.42, 6.26, 6.15, 30.6, 10.91, 8.54]\ncolors = ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462']\nexplode = (0.1, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Pie Chart of Website Popularity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Java', 'Python', 'JavaScript', 'C++', 'Other']\nsizes = [10, 20, 27, 23, 8]\ncolors = ['#9467bd', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Programming Language Usage', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Adidas', 'Nike', 'Puma', 'Reebok']\nsizes = [13.42, 30.6, 14.21, 10.91]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Add a title to the chart\nax.set_title('Market Share of Top Brands', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C']\nvalues = [50, 15, 20]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=['#FFA07A', '#ADD8E6', '#90EE90'])\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart Example')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nsizes = [15, 18, 10, 12, 25, 20]\nlabels = ['European', 'Australian', 'South American', 'African', 'Asian', 'North American']\ncolors = ['#FFD700', '#ADD8E6', '#90EE90', '#FF6347', '#FFB6C1', '#87CEEB']\nexplode = (0.1, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Add a title\nax.set_title('Pie Chart of Different Regions')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([2.5, 3.5, 4.5, 5.5, 6.5])\ny2 = np.array([1.5, 2.5, 3.5, 4.5, 5.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with different colors and markers\nax.scatter(x, y1, color='blue', label='Llama2')\nax.scatter(x, y2, color='orange', label='Llama2 (In-Chat)')\n\n# Set labels and title\nax.set_xlabel('Number of examples')\nax.set_ylabel('logP/CL')\nax.set_title('Comparison of Llama2 and Llama2 (In-Chat)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nefficiency = np.array([0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\ncomfort = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4])\nsafety = np.array([0.7, 0.6, 0.5, 0.4, 0.3, 0.2])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different colors and markers\nax.plot(efficiency, label='Efficiency', color='blue', marker='o')\nax.plot(comfort, label='Comfort', color='orange', marker='o')\nax.plot(safety, label='Safety', color='green', marker='o')\n\n# Set labels and title\nax.set_xlabel('Features')\nax.set_ylabel('Score')\nax.set_title('Comparison of Scores with and without Memory')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Efficiency vs Comfort and Safety scores with and without memory\nefficiency = np.array([0.3, 0.4, 0.5])\ncomfort = np.array([0.2, 0.3, 0.4])\nsafety = np.array([0.1, 0.2, 0.3])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different colors for better distinction\nax.bar(range(len(efficiency)), efficiency, color='pink', label='Without Memory')\nax.bar(range(len(comfort)), comfort, bottom=efficiency, color='lightblue', label='With Memory')\n\n# Set labels and title\nax.set_xlabel('Criteria')\nax.set_ylabel('Score')\nax.set_title('Criteria Scores with and without Memory')\nax.set_xticks(range(len(efficiency)))\nax.set_xticklabels(['Efficiency', 'Comfort', 'Safety'])\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([0.3, 0.4, 0.5, 0.6, 0.7])\ny2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='GPT-4V(Vis)', color='green', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Gemini', color='orange', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['jTrans', 'PalmTree', 'CLAP']\nvalues = [0.75, 0.85, 0.95]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color=['pink', 'lightblue', 'lavender'])\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 2), ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([0.5, 0.7, 0.8, 0.9, 1.0])\ny2 = np.array([0.3, 0.4, 0.5, 0.6, 0.7])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Teacher-Style', color='blue', linestyle='-', linewidth=2)\nax.fill_between(x, y1, color='lightblue', alpha=0.3)\n\nax.plot(x, y2, label='Standardize', color='orange', linestyle='--', linewidth=2)\nax.fill_between(x, y2, color='lightcoral', alpha=0.3)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Comparison of Teacher-Style and Standardize')\n\n# Add legend\nax.legend()\n\n# Highlight specific points\nhighlight_indices = [1, 3]\nfor idx in highlight_indices:\n    ax.scatter(idx, y1[idx], color='yellow', marker='*', s=100)\n    ax.scatter(idx, y2[idx], color='yellow', marker='*', s=100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 3, 5, 7, 11])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with a scatter plot\nax.scatter(x, y, color='blue', marker='o', s=100, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Sample Scatter Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 4, 6, 8, 10])\ny1 = np.array([163, 201, 176, 159, 97])\ny2 = np.array([97, 201, 176, 159, 97])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Group l0', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='AGIS', color='orange', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Number of Features')\nax.set_ylabel('% Decrease in Test MSE vs. FLAM-GL')\nax.set_title('Comparison of % Decrease in Test MSE vs. FLAM-GL')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.88, 0.85, 0.79, 0.67, 0.57])\ny = np.array([0.18, 0.19, 0.19, 0.16, 0.16])\nsizes = np.array([3.33, 3.33, 10.67, 29.10, 16.95])\ncolors = np.array([0.18, 0.19, 0.19, 0.16, 0.16])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the scatter plot with enhanced aesthetics\nscatter = ax.scatter(x, y, s=sizes * 100, c=colors, cmap='viridis', alpha=0.7)\n\n# Add a color bar to the plot\ncbar = plt.colorbar(scatter)\ncbar.set_label('Pearson R')\n\n# Set labels and title\nax.set_xlabel('Decimated Sampling Rate')\nax.set_ylabel('KCC')\nax.set_title('Scatter Plot of KCC vs Decimated Sampling Rate')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the plots\ndata_boys_class1 = np.random.normal(loc=75, scale=10, size=100)\ndata_girls_class1 = np.random.normal(loc=85, scale=10, size=100)\n\ndata_boys_class2 = np.random.normal(loc=90, scale=10, size=100)\ndata_girls_class2 = np.random.normal(loc=95, scale=10, size=100)\n\ndata_boys_class3 = np.random.normal(loc=100, scale=10, size=100)\ndata_girls_class3 = np.random.normal(loc=105, scale=10, size=100)\n\ndata_boys_class4 = np.random.normal(loc=110, scale=10, size=100)\ndata_girls_class4 = np.random.normal(loc=115, scale=10, size=100)\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 8.0))\n\n# Plot the first subplot\naxes[0, 0].hist(data_boys_class1, bins=10, color='lightblue', edgecolor='black')\naxes[0, 0].set_title('Distribution of Grades: Class 1')\naxes[0, 0].set_xlabel('Grades')\naxes[0, 0].set_ylabel('Frequency')\n\n# Plot the second subplot\naxes[0, 1].hist(data_girls_class1, bins=10, color='lightgreen', edgecolor='black')\naxes[0, 1].set_title('Distribution of Grades: Class 1')\naxes[0, 1].set_xlabel('Grades')\naxes[0, 1].set_ylabel('Frequency')\n\n# Plot the third subplot\naxes[1, 0].hist(data_boys_class2, bins=10, color='lightcoral', edgecolor='black')\naxes[1, 0].set_title('Distribution of Grades: Class 2')\naxes[1, 0].set_xlabel('Grades')\naxes[1, 0].set_ylabel('Frequency')\n\n# Plot the fourth subplot\naxes[1, 1].hist(data_girls_class2, bins=10, color='lightseagreen', edgecolor='black')\naxes[1, 1].set_title('Distribution of Grades: Class 2')\naxes[1, 1].set_xlabel('Grades')\naxes[1, 1].set_ylabel('Frequency')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
