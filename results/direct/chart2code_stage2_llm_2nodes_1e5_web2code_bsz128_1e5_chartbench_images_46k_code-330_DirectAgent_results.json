{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0, 10, 11)\ny_targets = np.array([0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2])\ny_predictions = np.array([0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1, 2.3])\n\n# Create figure and axis\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot data\nax.plot(x, y_targets, zs=0, zdir='z', label='Targets', color='orange')\nax.plot(x, y_predictions, zs=0, zdir='z', label='Predictions', color='blue')\n\n# Set labels\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_zlabel('Measure')\n\n# Set title\nax.set_title('Targets vs Predictions')\n\n# Set legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Data\nx = np.array([0.5, 1.5, 2.5, 3.5])\ny = np.array([0.5, 1.5, 2.5, 3.5])\nz = np.zeros(4)\ndx = np.ones(4)\ndy = np.ones(4)\ndz = np.array([1, 1, 1, 1])\n\n# Create figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot bars\nax.bar3d(x, y, z, dx, dy, dz, color='red', shade=True)\n\n# Set labels\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\n\n# Set limits\nax.set_xlim(0, 4)\nax.set_ylim(0, 4)\nax.set_zlim(0, 4)\n\n# Set grid\nax.grid(True, which='both', linestyle='-', linewidth=0.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sqrt(x**2 + y**2)\n\n# Create figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot surface\nsurface = ax.plot_surface(x, y, z, cmap='magma', edgecolor='none')\n\n# Add color bar which maps values to colors\ncbar = fig.colorbar(surface, ax=ax, shrink=0.5, aspect=5)\ncbar.set_label('Intensity')\n\n# Set labels\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\n# Set limits\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.set_zlim(0, 14)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data points\nx = [-4, -2, 0, 2, 4]\ny = [0, 0, 0, 0, 0]\nz = [-4, -2, 0, 2, 4]\n\n# Create a figure and a 3D subplot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data points\nax.scatter(x, y, z, color='red', label='Discrete Points')\n\n# Plot the fit line\nax.plot(x, y, z, color='blue', label='Fit Line')\n\n# Set labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Set title\nax.set_title('3D Scatter Plot with Fit Line')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = ['2010', '2012', '2014', '2016', '2018']\nprivate_schools = [0.3, 0.4, 0.5, 0.6, 0.7]\npublic_schools = [0.2, 0.3, 0.4, 0.5, 0.6]\n\n# Create a figure and a 3D axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define colors for each bar\ncolors = ['orange', 'orange', 'orange', 'orange', 'orange']\n\n# Plot bars\nxpos = np.arange(len(years))\nypos = np.zeros(len(years))\nzpos = np.zeros(len(years))\n\ndx = dy = 0.5\ndz_private = private_schools\ndz_public = public_schools\n\nax.bar3d(xpos, ypos, zpos, dx, dy, dz_private, color=colors, label='Private Schools')\nax.bar3d(xpos, ypos + dz_private, zpos, dx, dy, dz_public, color='lightblue', label='Public Schools')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\n\n# Set ticks\nax.set_xticks(xpos)\nax.set_xticklabels(years)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data\nx = np.array([0, 2, 4, 6, 8, 10])\ny = np.array([0, 0, 0, 0, 0, 0])\nz = np.array([0, 0, 0, 0, 0, 0])\ndx = np.array([2, 2, 2, 2, 2, 2])\ndy = np.array([1, 1, 1, 1, 1, 1])\ndz = np.array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1])\n\n# Create figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot\nax.bar3d(x, y, z, dx, dy, dz, color=['purple', 'cyan', 'green', 'red', 'orange', 'brown'], alpha=0.5)\n\n# Labels\nax.set_xlabel('Age')\nax.set_ylabel('Vaccination Number')\nax.set_zlabel('Incidence Rate')\n\n# Title\nax.set_title('Incidence Rate by Age and Vaccination Number')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot (3D bar chart)\nyears = ['2010', '2012', '2014', '2016', '2018']\nsectors = ['AI', 'CS', 'Other']\nvalues = [\n    [10, 15, 20],  # 2010\n    [12, 17, 22],  # 2012\n    [14, 19, 24],  # 2014\n    [16, 21, 26],  # 2016\n    [18, 23, 28]   # 2018\n]\n\nfig = plt.figure(figsize=(10.0, 8.0))\nax = fig.add_subplot(121, projection='3d')\n\nxpos = np.arange(len(years))\nypos = np.arange(len(sectors))\nxpos, ypos = np.meshgrid(xpos, ypos)\n\nxpos = xpos.flatten()\nypos = ypos.flatten()\nzpos = np.zeros_like(xpos)\n\ndx = dy = 0.5\ndz = values.flatten()\n\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=['green', 'blue', 'cyan'], shade=True)\n\nax.set_xlabel('Year')\nax.set_ylabel('Sector')\nax.set_zlabel('Investment (Billion USD)')\nax.set_xticks(xpos + dx / 2)\nax.set_xticklabels(years)\nax.set_yticks(ypos + dy / 2)\nax.set_yticklabels(sectors)\n\n# Data for the second plot (3D scatter plot)\ntime_since_introduction = np.array([0, 2, 4, 6, 8, 10])\ntechnology_level = np.array([0, 1, 2, 3, 4, 5])\nadoption_rate = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6])\n\ncolors = np.array(['blue', 'purple', 'orange'])\n\nfig.add_subplot(122, projection='3d')\n\nax2 = fig.add_subplot(122, projection='3d')\nax2.scatter(time_since_introduction, technology_level, adoption_rate, c=colors, s=100)\n\nax2.set_xlabel('Time Since Introduction (Years)')\nax2.set_ylabel('Technology Level')\nax2.set_zlabel('Adoption Rate')\nax2.set_xlim(0, 10)\nax2.set_ylim(0, 5)\nax2.set_zlim(0, 1)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data for f(x)\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\nz = x**2 + y**2\n\n# Data for solution\nx_sol = np.linspace(-1, 1, 50)\ny_sol = np.linspace(-1, 1, 50)\nx_sol, y_sol = np.meshgrid(x_sol, y_sol)\nz_sol = np.sin(np.sqrt(x_sol**2 + y_sol**2))\n\n# Create figure and subplots\nfig = plt.figure(figsize=(10.0, 7.0))\nax1 = fig.add_subplot(1, 2, 1, projection='3d')\nax2 = fig.add_subplot(1, 2, 2, projection='3d')\n\n# Plot f(x)\nsurf = ax1.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\nax1.set_title('f(x)')\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.set_zlabel('z')\nfig.colorbar(surf, ax=ax1, shrink=0.5, aspect=5)\n\n# Plot solution\nsurf_sol = ax2.plot_surface(x_sol, y_sol, z_sol, cmap='coolwarm', edgecolor='none')\nax2.set_title('solution')\nax2.set_xlabel('x')\nax2.set_ylabel('y')\nax2.set_zlabel('z')\nfig.colorbar(surf_sol, ax=ax2, shrink=0.5, aspect=5)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data for plotting\nx = np.array([1, 2, 3, 4, 5, 6])\ny = np.array([1, 2, 3, 4, 5, 6])\nz = np.array([1, 2, 3, 4, 5, 6])\ndx = np.ones_like(x)\ndy = np.ones_like(y)\ndz = np.random.rand(6) * 8 + 80  # Random values between 80 and 88\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the bar chart\nax.bar3d(x, y, z, dx, dy, dz, color='orange', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('t')\nax.set_ylabel('k')\nax.set_zlabel('tau')\nax.set_title('CIFAR10 Spiking ResNet18 T = 6')\n\n# Set the limits for each axis\nax.set_xlim(1, 6)\nax.set_ylim(1, 6)\nax.set_zlim(80, 94)\n\n# Add grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data for plotting\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a figure with subplots\nfig = plt.figure(figsize=(15.0, 10.0))\nfig.suptitle('3D Plots', fontsize=16)\n\n# Plot 1: Origin\nax1 = fig.add_subplot(2, 2, 1, projection='3d')\nsurf1 = ax1.plot_surface(x, y, z, cmap='coolwarm', edgecolor='none')\nax1.set_title('Origin')\nax1.set_xlabel('m')\nax1.set_ylabel('n')\nax1.set_zlabel('Freedom')\n\n# Plot 2: MG (ours)\nax2 = fig.add_subplot(2, 2, 2, projection='3d')\nsurf2 = ax2.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\nax2.set_title('MG (ours)')\nax2.set_xlabel('m')\nax2.set_ylabel('n')\nax2.set_zlabel('Freedom')\n\n# Plot 3: Origin\nax3 = fig.add_subplot(2, 2, 3, projection='3d')\nsurf3 = ax3.plot_surface(x, y, z, cmap='plasma', edgecolor='none')\nax3.set_title('Origin')\nax3.set_xlabel('m')\nax3.set_ylabel('n')\nax3.set_zlabel('Freedom')\n\n# Plot 4: MG (ours)\nax4 = fig.add_subplot(2, 2, 4, projection='3d')\nsurf4 = ax4.plot_surface(x, y, z, cmap='inferno', edgecolor='none')\nax4.set_title('MG (ours)')\nax4.set_xlabel('m')\nax4.set_ylabel('n')\nax4.set_zlabel('Freedom')\n\n# Adjust layout and display\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Data for plotting\nx = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\ny = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\nz = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nax.plot(x, y, z, 'o-', color='orange', label='Targets')\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nax.set_title('3D Scatter Plot')\n\n# Add grid lines\nax.grid(True)\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create data\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create figure and axis\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot surface\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm', linewidth=0, antialiased=False)\n\n# Add color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\ncbar.set_label('Intensity')\n\n# Set labels\nax.set_xlabel('Bus')\nax.set_ylabel('Time')\nax.set_zlabel('Intensity')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '2', '3', '4']\nvalues = [5, 7, 9, 11]\ncolors = ['brown', 'teal', 'green', 'cyan']\n\n# Create a figure and a 3D axis\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot bars\nxpos = np.arange(len(categories))\nypos = np.zeros(len(categories))\nzpos = np.zeros(len(categories))\n\ndx = dy = 0.5\ndz = values\n\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors)\n\n# Set labels\nax.set_xticks(xpos)\nax.set_xticklabels(categories)\nax.set_xlabel('Categories')\nax.set_ylabel('X Axis')\nax.set_zlabel('Y Axis')\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap='coolwarm', norm=plt.Normalize(vmin=min(values), vmax=max(values)))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', shrink=0.5, aspect=5)\ncbar.set_label('Z Axis')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data\nage = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\nincome = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ndebt = np.array([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100])\n\n# Create figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Scatter plot\nax.scatter(age, income, debt, c='red', marker='o', label='Debt')\nax.scatter(age, income, debt, c='blue', marker='^', label='Age')\nax.scatter(age, income, debt, c='orange', marker='s', label='Income')\n\n# Labels\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Title\nax.set_title('Scatter Plot in 3D')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data\ntime = np.array([10, 20, 30, 40, 50])\ntemperature = np.array([10, 15, 20, 25, 30])\ndepth = np.array([-20, -25, -30, -35, -40])\n\n# Create figure and 3D axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot lines\nax.plot(time, temperature, depth, 'r-', label='Red Line')\nax.plot(time, temperature + 5, depth + 5, 'b-', label='Blue Line')\nax.plot(time, temperature + 10, depth + 10, 'y-', label='Yellow Line')\n\n# Set labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Temperature (\u00b0C)')\nax.set_zlabel('Depth (m)')\n\n# Set title\nax.set_title('3D Line Plot')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(-20, 20, 41)\ny_out = np.random.normal(0, 1, 41)\ny_in = np.random.normal(0, 1, 41)\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Scatter plot for Out\nax.scatter(x, y_out, color='blue', label='Out')\n\n# Scatter plot for In\nax.scatter(x, y_in, color='red', label='In')\n\n# Labels and title\nax.set_xlabel('LR Test')\nax.set_ylabel('Density')\nax.set_title('Density Plot of LR Test')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\norb_feature_numbers = [150, 200, 250, 300, 350, 400]\nlog_atr_rmse_low = [-4, -4, -4, -4, -4, -4]\nlog_atr_rmse_middle = [-4, -4, -4, -4, -4, -4]\nlog_atr_rmse_high = [-4, -4, -4, -4, -4, -4]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot data points\nax.plot(orb_feature_numbers, log_atr_rmse_low, 'bo', label='Low')\nax.plot(orb_feature_numbers, log_atr_rmse_middle, 'o', color='orange', label='Middle')\nax.plot(orb_feature_numbers, log_atr_rmse_high, 'go', label='High')\n\n# Add labels and title\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\nax.set_title('Severity')\n\n# Add legend\nax.legend()\n\n# Set grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndepth = np.array([-3, -2.5, -2, -1.5, -1, -0.5, 0])\nate_rms = np.array([1.5, 1.8, 2.1, 2.4, 2.7, 3, 3.3])\n\n# Plot\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Scatter plot\nax.scatter(depth, ate_rms, color='brown', label='1x')\n\n# Line plot\nax.plot(depth, ate_rms, color='black', linewidth=2)\n\n# Fill between\nax.fill_between(depth, -1, 1, color='lightgray', alpha=0.5)\n\n# Labels and title\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\nax.set_title('Correlation: -0.47')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['0.0', '0.2', '0.4', '0.6', '0.8']\nbenign = [1, 2, 3, 4, 5]\nbadnets = [2, 3, 4, 5, 6]\nbenign_kde = [3, 4, 5, 6, 7]\nbadnets_kde = [4, 5, 6, 7, 8]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars\nax.bar(categories, benign, color='lightgreen', label='Benign')\nax.bar(categories, badnets, bottom=benign, color='lightcoral', label='BadNets')\nax.bar(categories, benign_kde, bottom=np.array(benign) + np.array(badnets), color='salmon', label='Benign KDE')\nax.bar(categories, badnets_kde, bottom=np.array(benign) + np.array(badnets) + np.array(benign_kde), color='darkred', label='BadNets KDE')\n\n# Add labels and title\nax.set_xlabel('Avg Top-5 Persistence of 1D')\nax.set_ylabel('Density')\nax.set_title('T-test p-value = 0.0000')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntasks = ['snacks', 'navigate', 'question_selection', 'object_counting']\nscores = {\n    'Apo-trend': [7.5, 7.8, 7.6, 7.9],\n    'Apo-step1-APE': [7.2, 7.5, 7.3, 7.6],\n    'Apo-step2-APE': [7.4, 7.7, 7.5, 7.8],\n    'Apo-best': [7.6, 7.9, 7.7, 8.0],\n    'Iterative-APE-best': [7.8, 8.1, 8.0, 8.2],\n    'Apo-Sum-best': [7.9, 8.2, 8.1, 8.3]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot each task's scores\nfor i, task in enumerate(tasks):\n    ax.plot(scores.keys(), scores[task], label=task, marker='o')\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.arange(0, 1.5, 0.2)\nhward = [40, 30, 20, 10, 8, 6, 4, 2, 0]\nrandom = [50, 40, 30, 20, 10, 8, 6, 4, 2]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.bar(x, hward, color='lightblue', label='H-w ard - centers-cos')\nax.bar(x, random, bottom=hward, color='pink', label='random')\n\n# Add title and labels\nax.set_title('summary xsum:temperature=0.3,device=cuda')\nax.set_xlabel('norm size')\nax.set_ylabel('count')\nax.set_xticks(x)\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'])\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Incomparable', 'Different', 'Same']\nsizes = [73.3, 23.7, 3.0]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99']\n\n# Data for the bar chart\nbar_labels = ['English', 'German', 'both']\nbar_values = [11.1, 44.4, 44.4]\nbar_colors = ['#66b3ff', '#99ff99', '#ccff99']\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 4.0))\n\n# Plot the pie chart\nax1.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nax1.set_title('Incomparable')\n\n# Plot the bar chart\nax2.barh(bar_labels, bar_values, color=bar_colors)\nax2.set_xlabel('Percentage')\nax2.set_ylabel('Language')\nax2.set_title('Language Comparison')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['SEAC', 'SAC(20Hz)']\ntime_costs = [48, 50]\nnum_points = [10, 15]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot horizontal bar chart\nax.barh(categories, time_costs, color=['lightgreen', 'lightcoral'], edgecolor='black')\n\n# Scatter plot for each category\nfor i, (category, num_point) in enumerate(zip(categories, num_points)):\n    if category == 'SEAC':\n        ax.scatter(np.random.normal(time_costs[i], 1, num_point), \n                   np.random.normal(0, 1, num_point), \n                   color='darkgreen', marker='o')\n    elif category == 'SAC(20Hz)':\n        ax.scatter(np.random.normal(time_costs[i], 1, num_point), \n                   np.random.normal(0, 1, num_point), \n                   color='brown', marker='o')\n\n# Add labels and title\nax.set_xlabel('Time Cost (Seconds)')\nax.set_ylabel('Algorithms')\nax.set_title('Comparison of Algorithms')\n\n# Set y-axis limits\nax.set_ylim(-1, len(categories))\n\n# Show grid\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmethods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0']\ncodebert_scores = [63.64, 80.08, 84.27]\nchatgpt_3_5_scores = [80.08, 87.20, 90.12]\nchatgpt_4_0_scores = [84.27, 90.12, 93.89]\n\n# Create the figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for Average Recall Scores by Method\nax1.bar(methods, codebert_scores, color='lightblue', label='CodeBERT')\nax1.plot(methods, chatgpt_3_5_scores, marker='o', color='blue', label='ChatGPT-3.5')\nax1.plot(methods, chatgpt_4_0_scores, marker='o', color='black', label='ChatGPT-4.0')\n\n# Set labels and title for the first plot\nax1.set_xlabel('Method')\nax1.set_ylabel('Scores')\nax1.set_title('Average Recall Scores by Method')\nax1.legend()\n\n# Plot for Average F1 Scores by Method\nax2.bar(methods, [75.00, 87.20, 90.12], color='lightblue', label='CodeBERT')\nax2.plot(methods, [80.08, 87.20, 90.12], marker='o', color='red', label='ChatGPT-3.5')\nax2.plot(methods, [84.27, 90.12, 93.89], marker='o', color='darkblue', label='ChatGPT-4.0')\n\n# Set labels and title for the second plot\nax2.set_xlabel('Method')\nax2.set_ylabel('Scores')\nax2.set_title('Average F1 Scores by Method')\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([4, 8, 12, 16, 20, 24, 28, 32])\ny1 = np.array([84, 86, 88, 90, 92, 94, 96, 98])\ny2 = np.array([82, 84, 86, 88, 90, 92, 94, 96])\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot lines\nax.plot(x, y1, 'bo-', label='Trained w Few-Shot Ex')\nax.plot(x, y2, 'ro-', label='Def Deduce+Ex Gen')\n\n# Fill between\nax.fill_between(x, y1, y2, color='lightblue', alpha=0.5)\n\n# Annotations\nax.annotate('4', (4, 84), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nax.annotate('8', (8, 86), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nax.annotate('12', (12, 88), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nax.annotate('16', (16, 90), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nax.annotate('20', (20, 92), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nax.annotate('24', (24, 94), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nax.annotate('28', (28, 96), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nax.annotate('32', (32, 98), textcoords=\"offset points\", xytext=(-10,10), ha='center')\n\n# Labels and title\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\nax.set_title('Comparison of Few-Shot Learning Models')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nvehicle_sizes = [60, 62, 65, 70, 75]\nefficiencies = [60, 62, 65, 70, 75]\ncar_types = ['Car A', 'Car B', 'Car C', 'Car D', 'Car E']\ncolors = ['red', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data\nfor i in range(len(vehicle_sizes)):\n    ax.plot([vehicle_sizes[i]], [efficiencies[i]], marker='o', color=colors[i % len(colors)], label=car_types[i])\n\n# Set labels and title\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\nax.set_title('80 Truck A\\n\\n50 Cars')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Set limits\nax.set_xlim(0, 50)\nax.set_ylim(50, 85)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsimple_trend = [0, 6, 16, 20, 12, 10]\nsimple = [0, 6, 12, 20, 12, 10]\ncomplex_ = [0, 4, 8, 18, 26, 20]\ncode = [0, 4, 8, 18, 26, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nax.bar(models, simple_trend, color='magenta', label='Simple Trend')\nax.bar(models, simple, bottom=simple_trend, color='brown', label='Simple')\nax.bar(models, complex_, bottom=[sum(x) for x in zip(simple_trend, simple)], color='tan', label='Complex')\nax.bar(models, code, bottom=[sum(x) for x in zip(simple_trend, simple, complex_)], color='lightgrey', label='Code')\n\n# Add trend line\ntrend_line = [0, 6, 12, 20, 26, 32]\nax.plot(models, trend_line, color='purple', marker='o', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\nax.set_title('Encoding/Decoding Schelling Points by Model')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0, 1, 10)\ny = np.linspace(0, 1, 10)\ny2 = np.linspace(0, 1, 10)\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot data\nax1.plot(x, y, 'k-', label='Calibration curve')\nax1.scatter(x, y, color='orange', label='Data points')\n\n# Set labels and title\nax1.set_xlabel('reduced probability')\nax1.set_ylabel('fraction of positives', color='orange')\nax1.set_title('Calibration Curve vs Fraction of Positives')\n\n# Create a second y-axis for the bar chart\nax2 = ax1.twinx()\nbars = ax2.bar(x, y2, color='pink', alpha=0.7, label='Subgroups')\n\n# Add legend\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Model', 'FOD-Net', 'SS3T']\nvalues = [2, 1, 1]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('ACC')\nax.set_ylabel('Count')\nax.set_title('Model Comparison')\n\n# Add legend\nax.legend(['Proposed', 'FOD-Net', 'SS3T'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.array([1340, 1360, 1380, 1400, 1420, 1440, 1460])\ny = np.array([0.005, 0.007, 0.009, 0.011, 0.013, 0.015, 0.017])\nz = np.array([0.005, 0.007, 0.009, 0.011, 0.013, 0.015, 0.017])\n\n# Create a figure with a specified size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot 1: Total\naxes[0, 0].bar(x, y, color='blue', label='Total')\naxes[0, 0].set_title('Total')\naxes[0, 0].set_xlabel('Daily reward (Ether)')\naxes[0, 0].set_ylabel('Probability')\naxes[0, 0].set_ylim(0, 0.2)\naxes[0, 0].legend()\n\n# Plot 2: Proposer\naxes[0, 1].bar(x, z, color='brown', label='Proposer')\naxes[0, 1].set_title('Proposer')\naxes[0, 1].set_xlabel('Daily reward (Ether)')\naxes[0, 1].set_ylabel('Probability')\naxes[0, 1].set_ylim(0, 0.2)\naxes[0, 1].legend()\n\n# Plot 3: Attestor\naxes[1, 0].bar(x, y, color='green', label='Attestor')\naxes[1, 0].set_title('Attestor')\naxes[1, 0].set_xlabel('Daily reward (Ether)')\naxes[1, 0].set_ylabel('Probability')\naxes[1, 0].set_ylim(0, 0.2)\naxes[1, 0].legend()\n\n# Plot 4: Sync committee member\naxes[1, 1].bar(x, z, color='yellow', label='Sync committee member')\naxes[1, 1].set_title('Sync committee member')\naxes[1, 1].set_xlabel('Daily reward (Ether)')\naxes[1, 1].set_ylabel('Probability')\naxes[1, 1].set_ylim(0, 0.2)\naxes[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntrainable_sizes = [0, 50, 100, 150]\nrmse_values = [1.30, 1.21, 1.19, 1.15]\nlabels = ['LlaSMol Lite', 'LlaSMol Attn', 'LlaSMol Large', 'LlaSMol Plus']\ncolors = ['red', 'blue', 'black', 'red']\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\nfor i, (size, rmse, label, color) in enumerate(zip(trainable_sizes, rmse_values, labels, colors)):\n    ax.plot(size, rmse, marker='o', markersize=7, color=color, label=label if i == 0 else None)\n\n# Set labels and title\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\nax.set_title('Llama 2 7B vs Llama 2 13B')\n\n# Set y-axis limits\nax.set_ylim(1.15, 1.30)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([40, 60, 80, 100, 120, 140, 160])\ny = np.array([0.03, 0.05, 0.07, 0.09, 0.11, 0.13, 0.15])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'o-', color='blue')\n\n# Set labels and title\nax.set_xlabel('Execution Duration (clock)')\nax.set_ylabel('Distribution')\nax.set_title('D0')\n\n# Set y-axis limits\nax.set_ylim(0, 0.16)\n\n# Add grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ninstance_sizes = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x15', '60x20']\npetriRL = [18, 14, 13, 12, 11, 10, 9]\nGAM = [0, 0, 0, 0, 0, 0, 0]\nGIN = [1000, 1000, 1000, 1000, 1000, 1000, 1000]\nDGERD = [0, 0, 0, 0, 0, 0, 0]\n\n# Create the plot\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\n\n# Plotting the data\nax1.plot(instance_sizes, petriRL, 'o-', color='green', label='PetriRL')\nax1.plot(instance_sizes, GAM, 'o-', color='orange', label='GAM')\nax1.plot(instance_sizes, GIN, 'o-', color='blue', label='GIN')\nax1.plot(instance_sizes, DGERD, 'o-', color='purple', label='DGERD')\n\n# Setting the labels and title\nax1.set_xlabel('Instance size (step)')\nax1.set_ylabel('Makespan (step)', color='black')\nax1.set_title('Comparison of Different Methods')\n\n# Creating a second y-axis for the second dataset\nax2 = ax1.twinx()\nax2.set_ylabel('Improvement (%)', color='black')\n\n# Plotting the second dataset on the second y-axis\nax2.plot(instance_sizes, [0, 0, 0, 0, 0, 0, 0], 'o-', color='red')\n\n# Adding legends\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = ['SEAC', 'CTCO']\ny1 = [2.5, 3.5]\ny2 = [1.5, 2.5]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Scatter plot for SEAC\nax.scatter(x[0], y1, color='green', label='SEAC')\n\n# Scatter plot for CTCO\nax.scatter(x[1], y2, color='orange', label='CTCO')\n\n# Set labels and title\nax.set_xlabel('Algorithms')\nax.set_ylabel('Time Cost (Seconds)')\nax.set_title('Comparison of Algorithms')\n\n# Set y-axis limits\nax.set_ylim(-1, 4)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\ntime_to_market = [80, 70, 60, 50]\nmedian_time_to_market = [90, 80, 70, 60]\n\n# Colors\ncolors = ['#4682B4', '#FFA500', '#FF6347', '#1E90FF']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nbars = ax.bar(brands, time_to_market, color=colors, edgecolor='black')\n\n# Add stars at specific positions\nfor bar in bars:\n    yval = bar.get_height()\n    if bar.get_x() == 0:  # Adidas\n        ax.text(bar.get_x() + bar.get_width()/2, yval, '*', ha='center', va='bottom', color='red')\n    elif bar.get_x() == 2:  # New Balance\n        ax.text(bar.get_x() + bar.get_width()/2, yval, '*', ha='center', va='bottom', color='red')\n    elif bar.get_x() == 3:  # Our Brand\n        ax.text(bar.get_x() + bar.get_width()/2, yval, '*', ha='center', va='bottom', color='red')\n\n# Plot line\nax.plot(brands, median_time_to_market, marker='o', color='black', linestyle='-', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Time to Market (Days)')\nax.set_ylabel('Median Time to Market')\nax.set_title('Time to Market to Median Time to Market')\n\n# Set legend\nax.legend(['Adidas', 'Nike', 'New Balance', 'Our Brand'], loc='upper left')\n\n# Set grid\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\nax.xaxis.grid(False)\n\n# Set limits\nax.set_ylim(40, 120)\nax.set_xlim(-0.5, 3.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the line plot\nyears = np.array([1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960])\nearly_20th_century = np.array([0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05])\nmid_20th_century = np.array([0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05])\nturn_of_the_century = np.array([0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05])\n\n# Data for the bar plot\nbar_years = np.array([1900, 1925])\nearly_20th_century_bar = np.array([1900, 1900])\nmid_20th_century_bar = np.array([1925, 1925])\nturn_of_the_century_bar = np.array([1900, 1925])\n\n# Create the figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the line chart\nax1.plot(years, early_20th_century, 'b-', label='Early 20th Century')\nax1.plot(years, mid_20th_century, 'y-', label='Mid 20th Century')\nax1.plot(years, turn_of_the_century, 'g-', label='Turn of the Century')\n\n# Fill between lines\nax1.fill_between(years, early_20th_century, mid_20th_century, color='orange', alpha=0.3)\nax1.fill_between(years, mid_20th_century, turn_of_the_century, color='green', alpha=0.3)\n\n# Set labels and title\nax1.set_xlabel('Density')\nax1.set_ylabel('Year')\nax1.set_title('Era')\nax1.legend()\n\n# Plot the bar chart\nax2.bar(bar_years, early_20th_century_bar, color='blue', label='Early 20th Century')\nax2.bar(bar_years, mid_20th_century_bar, bottom=early_20th_century_bar, color='orange', label='Mid 20th Century')\nax2.bar(bar_years, turn_of_the_century_bar, bottom=early_20th_century_bar + mid_20th_century_bar, color='green', label='Turn of the Century')\n\n# Set labels and title\nax2.set_xlabel('Year')\nax2.set_ylabel('Population')\nax2.set_title('Population by Era')\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Nano', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\nyears_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\nyears_2022 = [90, 50, 150, 100, 180, 250, 300, 200, 400, 500]\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot data for 2013\nax1.barh(categories, years_2013, color='lightblue', label='2013')\nax1.set_xlabel('Number of Patents')\nax1.set_ylabel('Technology')\nax1.set_title('Patent Filings in 2013')\n\n# Create a second y-axis for 2022 data\nax2 = ax1.twinx()\nax2.plot(years_2022, categories, color='orange', marker='o', linestyle='--', linewidth=2, markersize=8)\nax2.set_ylabel('Number of Patents', color='orange')\n\n# Set limits for both y-axes\nax1.set_xlim(0, 120)\nax2.set_ylim(-1, len(categories))\n\n# Add legend\nax1.legend(loc='upper left')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0, 1, 10)\ny_data_points = np.random.normal(0.5, 0.1, 10)\ny_bin_edges = np.random.normal(0.5, 0.1, 10)\ny_calibration_curve = np.linspace(0.2, 0.8, 10)\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(6.0, 6.0))\n\n# Bar plot for Data points\nax1.bar(x, y_data_points, color='orange', alpha=0.7, label='Data points')\nax1.set_xlabel('Predicted probability')\nax1.set_ylabel('Fraction of positives', color='black')\nax1.tick_params(axis='y', labelcolor='black')\n\n# Twin axes for Bin edges\nax2 = ax1.twinx()\nax2.bar(x, y_bin_edges, color='orange', alpha=0.3, label='Bin edges')\nax2.tick_params(axis='y', labelcolor='black')\n\n# Calibration curve\nax1.plot(x, y_calibration_curve, 'k-', label='Calibration curve')\n\n# Legend\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Title\nplt.title('Calibration Curve')\n\n# Colorbar\ncbar = plt.colorbar(ax1.images[0], ax=ax1, orientation='vertical', fraction=0.046, pad=0.04)\ncbar.set_label('Colorbar Label')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\ntesla = [250, 270, 290, 310]\nbenz = [200, 220, 240, 260]\nbyd = [150, 170, 190, 210]\nporsche = [100, 120, 140, 160]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plotting the bars\nax.bar(quarters, tesla, color='green', label='Tesla')\nax.bar(quarters, benz, bottom=tesla, color='orange', label='Benz')\nax.bar(quarters, byd, bottom=np.array(tesla) + np.array(benz), color='blue', label='BYD')\nax.bar(quarters, porsche, bottom=np.array(tesla) + np.array(benz) + np.array(byd), color='purple', label='Porsche')\n\n# Plotting the line graph\nax.plot(quarters, tesla, marker='o', color='red', linestyle='-', linewidth=2, markersize=8)\n\n# Adding labels and title\nax.set_xlabel('Quarter')\nax.set_ylabel('Earnings ($1000s)')\nax.set_title('Growth')\n\n# Adding legend\nax.legend()\n\n# Setting y-axis limits\nax.set_ylim(0, 400)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmethods = ['Linear probing', 'BitFit', 'Prompt Tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ntrain_sec_img = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\ninference_gflops = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\nparam_log10 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ntrain_memory = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plotting the data\nax.plot(methods, train_sec_img, label='Train sec / img', color='blue')\nax.plot(methods, inference_gflops, label='Inference GFLOPs', color='orange')\nax.plot(methods, param_log10, label='Param, log10', color='green')\nax.plot(methods, train_memory, label='Train Memory', color='red')\n\n# Adding markers at specific points\nax.plot(['Prompt Tuning'], [120], marker='o', color='black')\nax.plot(['Full finetuning'], [100], marker='o', color='black')\nax.plot(['Ours (LoSA)'], [74], marker='o', color='black')\n\n# Setting labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Accuracy, iNaturalist 2021')\n\n# Setting y-axis limits\nax.set_ylim(0, 80)\n\n# Adding legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ntm_scores = np.linspace(0, 10, 11)\nseq_idents = np.linspace(0, 10, 11)\nx = np.random.rand(11, 100) * 10\ny = np.random.rand(11, 100) * 10\n\n# Create the figure and axes\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i in range(len(tm_scores)):\n    ax.scatter(x[i], y[i], label=f'Seq {i}', color='blue', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('TM-score')\nax.set_ylabel('Seq-ident')\nax.set_title('Scatter Plot of TM-score vs Seq-ident')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(25, 45, 10)\ny_teenagers = np.random.normal(0, 1, 10)\ny_children = np.random.normal(0, 1, 10)\ny_adults = np.random.normal(0, 1, 10)\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Scatter plot for each species\nax.scatter(x, y_teenagers, color='red', label='teenagers')\nax.scatter(x, y_children, color='green', label='children')\nax.scatter(x, y_adults, color='blue', label='adults')\n\n# Set labels and title\nax.set_xlabel('Relative Cluster Size')\nax.set_ylabel('Average Norm of Difference Vectors')\nax.set_title('Species')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120]\ny = [99.6, 99.9, 99.9, 99.6, 99.6, 99.6, 99.6, 99.6, 99.6, 99.6, 99.6, 99.6, 98.7, 98.7, 98.7, 98.7]\n\n# Create the plot\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y, 'o-', color='blue', label='HC_first')\nplt.scatter(x, y, color='blue')\n\n# Add labels and title\nplt.xlabel('HC_first (before aging)')\nplt.ylabel('HC_first (after aging)')\nplt.title('HC_first (after aging) vs HC_first (before aging)')\n\n# Set the limits for x and y axes\nplt.xlim(0, 128)\nplt.ylim(0, 128)\n\n# Add grid\nplt.grid(True)\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntmscore = np.arange(0.1, 1.1, 0.1)\nsequence_id = np.arange(0.1, 0.6, 0.1)\ndata = np.random.rand(len(sequence_id), len(tmscore))\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Hexbin plot\nhexbin = ax.hexbin(tmscore, sequence_id, C=data, gridsize=20, cmap='Blues')\n\n# Colorbar\ncbar = fig.colorbar(hexbin, ax=ax)\ncbar.set_label('Intensity')\n\n# Labels and title\nax.set_xlabel('TMScore')\nax.set_ylabel('Sequence ID')\nax.set_title('Hexbin Plot Example')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [4211, 2411, 2141, 1124]\nsrcc_values = [0.9628, 0.9604, 0.9624, 0.9561]\nplcc_values = [0.9624, 0.9604, 0.9624, 0.9561]\nsum_values = [0.9641, 0.9641, 0.9641, 0.9592]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot SRCC values\nax1.bar(years, srcc_values, color='blue', label='SRCC')\nax1.set_ylabel('Values')\n\n# Create a second y-axis for PLCC values\nax2 = ax1.twinx()\nax2.bar(years, plcc_values, color='green', alpha=0.7, label='PLCC')\n\n# Plot Sum values with a line plot\nax1.plot(years, sum_values, 'ro-', label='Sum (SRCC + PLCC)')\n\n# Set labels and title\nax1.set_xlabel('Modes')\nax1.set_title('SRCC and PLCC values with their sum for different modes')\n\n# Add legend\nfig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.85))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nclients = ['Client 0', 'Client 1', 'Client 2', 'Client 3', 'Client 4']\ndepth = [176, 0, 0, 0, 0]\nedge = [176, 176, 176, 176, 176]\nnormals = [176, 176, 176, 176, 176]\nsemseg = [176, 176, 176, 176, 176]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot data\nax.barh(clients, depth, color='blue', label='Depth')\nax.barh(clients, edge, left=depth, color='cyan', label='Edge')\nax.barh(clients, normals, left=np.array(depth) + np.array(edge), color='green', label='Normals')\nax.barh(clients, semseg, left=np.array(depth) + np.array(edge) + np.array(normals), color='pink', label='Semseg')\n\n# Add labels and title\nax.set_xlabel('Client')\nax.set_ylabel('Client')\nax.set_title('IIID-1 SDMT')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the parameters for the spiral\nt = np.linspace(0, 10, 100)\nr = 5 + 2 * np.cos(3 * t)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the spiral\nax.plot(t, r, color='blue', label='SINDy')\n\n# Set the title and labels\nax.set_title('Compact Spiral with Elliptical Hollow Center')\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude')\n\n# Set the limits for the y-axis\nax.set_ylim(-10, 7.5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['explicit, random', 'explicit, block size 10', 'explicit, block size 100', 'implicit, random', 'implicit, block size 10', 'implicit, block size 100']\nx = [10**-1, 10**0, 10**1, 10**0, 10**0, 10**1]\ny = [10**11, 10**11, 10**11, 10**11, 10**11, 10**11]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot data\nax.plot(x, y, marker='o', linestyle='-', color='black')\n\n# Set labels and title\nax.set_xlabel('Flops/byte')\nax.set_ylabel('Flows/s')\nax.set_title('DAXPY memory bandwidth')\n\n# Set y-axis scale\nax.set_yscale('log')\n\n# Add legend\nax.legend(labels, loc='upper left')\n\n# Set background color\nax.set_facecolor('#e6f2ff')  # Light blue\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Satisfy constraints', 'No severe errors', 'Lengthy', 'Contain rich info', 'No moderate errors', 'Grammatical correctness', 'No minor errors', 'Clear', 'Non-repetitive', 'Support stances', '19 other features']\nvalues = [0.76, 0.68, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55]\n\n# Create horizontal bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.barh(categories, values, color='lightgrey')\n\n# Add labels and title\nax.set_xlabel('f(x) = 0.50')\nax.set_ylabel('f(x) = 0.50')\nax.set_title('f(x) = 0.50')\n\n# Add value labels\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, f'{width:.2f}', va='center', ha='left')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncigar_r = 45\nchat_repair = 8\noverlap = 24\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors\ncolors = ['#FFC0CB', '#FFA500', '#90EE90']\n\n# Plot the circles\ncircle1 = plt.Circle((0, 0), cigar_r, color=colors[0], alpha=0.7)\ncircle2 = plt.Circle((0, 0), chat_repair, color=colors[1], alpha=0.7)\n\n# Add the circles to the plot\nax.add_artist(circle1)\nax.add_artist(circle2)\n\n# Add the overlap\noverlap_circle = plt.Circle((0, 0), overlap, color=colors[2], alpha=0.7)\nax.add_artist(overlap_circle)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove axes\nax.axis('off')\n\n# Add labels\nplt.text(-10, 0, 'ChatRepair', fontsize=12, ha='center', va='center')\nplt.text(10, 0, 'CigaR', fontsize=12, ha='center', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\nvalues = [10, 15, 20, 25, 30]\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#FFFF99']\n\n# Number of levels\nnum_levels = len(categories)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw={'projection': 'polar'})\n\n# Calculate angles for each category\nangles = np.linspace(0, 2 * np.pi, num_levels, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the plot\n\n# Plot data\nax.bar(angles, values, color=colors, alpha=0.7)\n\n# Set category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add title\nplt.title('Qwen-VL-Max', size=15, y=1.1)\n\n# Add legend\nax.legend(categories, loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.logspace(1, 2, 10)\ny_s19 = 10**(-np.log10(x) + 10)\ny_s50 = 10**(-np.log10(x) + 10)\ny_s76 = 10**(-np.log10(x) + 10)\ny_s142 = 10**(-np.log10(x) + 10)\ny_s232 = 10**(-np.log10(x) + 10)\n\n# Create figure and subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot on the first subplot\nax1.plot(x, y_s19, 'o-', color='purple', label='s = 19')\nax1.plot(x, y_s50, 'o-', color='pink', label='s = 50')\nax1.plot(x, y_s76, 'o-', color='brown', label='s = 76')\nax1.plot(x, y_s142, 'o-', color='orange', label='s = 142')\nax1.plot(x, y_s232, 'o-', color='gold', label='s = 232')\n\nax1.set_xscale('log')\nax1.set_xlabel('number of matvecs m')\nax1.set_ylabel('approximation error ||A - \\u03B1\\u03BB\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nlabels = ['Retrieval.KV', 'Retrieve.Number', 'Retrieve.PassKey', 'En.Sum', 'En.QA']\nsizes = [30, 25, 20, 15, 10]\ncolors = ['#66b3ff', '#99ff99', '#ffff99', '#cc99ff', '#ffcc99']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, labels=labels, colors=colors, startangle=90, wedgeprops=dict(width=0.3))\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\nplt.title('Pie Chart Example')\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x / 20)\ny2 = np.cos(x / 20)\ny3 = np.tan(x / 20)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, color='green', label='Green')\nax.plot(x, y2, color='orange', label='Orange')\nax.plot(x, y3, color='blue', label='Blue')\n\n# Fill between the curves\nax.fill_between(x, y1, y2, where=y1 < y2, color='green', alpha=0.5)\nax.fill_between(x, y2, y3, where=y2 < y3, color='orange', alpha=0.5)\nax.fill_between(x, y3, y1, where=y3 < y1, color='blue', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Stacked Area Chart')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nsample_numbers = [0, 1, 2, 3, 4, 5, 6]\nthermal_conductivity = [3.2, 3.5, 3.8, 4.1, 4.4, 4.7, 5.0]\nuncertainty = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot bars\nbars = ax.bar(sample_numbers, thermal_conductivity, yerr=uncertainty, capsize=5, color='lightblue', edgecolor='black')\n\n# Add error bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', va='center', ha='center')\n\n# Set labels and title\nax.set_xlabel('Sample Number')\nax.set_ylabel('Thermal Conductivity (W/m.K)')\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Set y-axis limits\nax.set_ylim(1.5, 4.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [28, 20, 10, 22, 28]\nplayer_b_scores = [35, 26, 20, 25, 30]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot bars for Player A\nax.bar(games, player_a_scores, color='white', edgecolor='black', label='Player A')\n\n# Plot bars for Player B\nax.bar(games, player_b_scores, bottom=player_a_scores, color='green', edgecolor='black', label='Player B')\n\n# Set labels and title\nax.set_xlabel('Games')\nax.set_ylabel('Scores by number of game and players')\nax.set_title('Scores by number of game and players')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = np.linspace(-6, 6, 100)\ny = np.linspace(-6, 6, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nc = ax.contourf(X, Y, Z, levels=20, cmap='coolwarm')\n\n# Add colorbar\ncbar = fig.colorbar(c, ax=ax, orientation='vertical')\ncbar.set_label('Time')\n\n# Set labels and title\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\nax.set_title('Contour Plot of Variable 2 over Variable 1')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nfemale_player = [5.7, 6.0, 5.2, 3.4]\nmale_player = [5.7, 6.2, 5.8, 3.1]\nllm_player = [7.0, 7.5, 7.6, 4.2]\nperson_player = [7.4, 7.0, 7.2, 6.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot data\nax.bar(categories, female_player, color='lightpink', label='gpt-3.5-turbo-0613')\nax.bar(categories, male_player, bottom=female_player, color='cornflowerblue', label='gpt-3.5-turbo-instruct')\nax.bar(categories, llm_player, bottom=np.array(female_player) + np.array(male_player), color='lightgreen', label='gpt-4')\nax.bar(categories, person_player, bottom=np.array(female_player) + np.array(male_player) + np.array(llm_player), color='skyblue', label='llama-2-13b')\n\n# Add labels and title\nax.set_xlabel('Trustee Scenario')\nax.set_ylabel('Average Amount Sent ($)')\nax.set_title('Trusty Scenario')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Athlete Jim', 'Athlete Bill']\nrunning_times = [120, 130]\ninterrupted_times = [10, 15]\nrest_times = [20, 25]\nrunning2_times = [150, 160]\n\n# Bar width\nbar_width = 0.2\n\n# Positions of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Create bars\nax.bar(r1, running_times, color='green', width=bar_width, edgecolor='grey', label='Running')\nax.bar(r2, interrupted_times, color='red', width=bar_width, edgecolor='grey', label='Interrupted')\nax.bar(r3, rest_times, color='orange', width=bar_width, edgecolor='grey', label='Rest')\nax.bar(r4, running2_times, color='darkgreen', width=bar_width, edgecolor='grey', label='Running2')\n\n# Add labels and title\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Time (seconds)')\nax.set_title('Endurance Race Performance Analysis')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show grid\nax.yaxis.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['Category 1', 'Category 2', 'Category 3']\ncontrol_group = [4, 6, 8]\ntreatment_group_1 = [5, 7, 9]\ntreatment_group_2 = [6, 8, 10]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(7.0, 5.0))\n\n# Plot for Control Group\naxes[0].barh(categories, control_group, color='green')\naxes[0].set_title('Control Group')\naxes[0].set_xlabel('Number of Observations')\naxes[0].set_ylabel('Categories')\n\n# Plot for Treatment Group 1\naxes[1].barh(categories, treatment_group_1, color='red')\naxes[1].set_title('Treatment Group 1')\naxes[1].set_xlabel('Number of Observations')\naxes[1].set_ylabel('Categories')\n\n# Plot for Treatment Group 2\naxes[2].barh(categories, treatment_group_2, color='orange')\naxes[2].set_title('Treatment Group 2')\naxes[2].set_xlabel('Number of Observations')\naxes[2].set_ylabel('Categories')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = [-300, -120, -100, -75, -50, -25]\nvalues = [350, 200, 100, 75, 50, 25]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nbars = ax.bar(categories, values, color=['green', 'red', 'green', 'red', 'green', 'red'])\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval), va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Value')\nax.set_title('Waterfall Chart')\n\n# Set y-axis limits\nax.set_ylim(700, 1300)\n\n# Show grid\nax.grid(True, axis='y', linestyle='--', linewidth=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a grid of points\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(-1, 1, 100)\ntheta_grid, r_grid = np.meshgrid(theta, r)\n\n# Calculate the function values\nz = np.sin(r_grid) * np.cos(theta_grid)\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(8.0, 6.0))\n\n# Plot the data\ncax = ax.contourf(theta_grid, r_grid, z, cmap='coolwarm', levels=20)\n\n# Add a colorbar\ncbar = fig.colorbar(cax, ax=ax, orientation='vertical')\ncbar.set_label('Colorbar Label')\n\n# Set the title\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nX, Y = np.meshgrid(x, y)\nZ_nearest = np.sin(np.sqrt(X**2 + Y**2))\nZ_bilinear = np.cos(np.sqrt(X**2 + Y**2))\n\n# Create the figure and subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0), constrained_layout=True)\n\n# Plot nearest\ncax_nearest = axes[0, 0].imshow(Z_nearest, extent=[-4, 4, -4, 4], origin='lower', cmap='coolwarm')\naxes[0, 0].set_title('nearest')\nfig.colorbar(cax_nearest, ax=axes[0, 0])\n\n# Plot nearest (same data)\ncax_nearest_same = axes[0, 1].imshow(Z_nearest, extent=[-4, 4, -4, 4], origin='lower', cmap='coolwarm')\naxes[0, 1].set_title('nearest')\nfig.colorbar(cax_nearest_same, ax=axes[0, 1])\n\n# Plot bilinear\ncax_bilinear = axes[1, 0].imshow(Z_bilinear, extent=[-4, 4, -4, 4], origin='lower', cmap='plasma')\naxes[1, 0].set_title('bilinear')\nfig.colorbar(cax_bilinear, ax=axes[1, 0])\n\n# Plot bilinear (same data)\ncax_bilinear_same = axes[1, 1].imshow(Z_bilinear, extent=[-4, 4, -4, 4], origin='lower', cmap='plasma')\naxes[1, 1].set_title('bilinear')\nfig.colorbar(cax_bilinear_same, ax=axes[1, 1])\n\n# Set labels\nfor ax in axes.flat:\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx1 = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny1 = np.array([400, 450, 500, 550, 600, 550, 500, 450, 400, 350])\n\nx2 = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny2 = np.array([300, 350, 400, 450, 500, 550, 600, 550, 500, 450])\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for Flickr30k\nbars1 = ax1.bar(x1, y1, color=['#FFB3BA', '#FFD7B5', '#FFA500', '#FF6347', '#FF4500', '#FF6347', '#FFA500', '#FFD7B5', '#FFB3BA', '#FF6347'])\nax1.set_title('Flickr30k')\nax1.set_xlabel('Number of bits')\nax1.set_ylabel('Recall sum')\nax1.set_xticks(x1)\nax1.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\nax1.set_ylim(0, 600)\n\n# Add labels to each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\n# Plot for MS-COCO\nbars2 = ax2.bar(x2, y2, color=['#FFB3BA', '#FFD7B5', '#FFA500', '#FF6347', '#FF4500', '#FF6347', '#FFA500', '#FFD7B5', '#FFB3BA', '#FF6347'])\nax2.set_title('MS-COCO')\nax2.set_xlabel('Number of bits')\nax2.set_ylabel('Recall sum')\nax2.set_xticks(x2)\nax2.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\nax2.set_ylim(0, 600)\n\n# Add labels to each bar\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\ny_mean_taylor = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0]\ny_monte_carlo = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0]\ny_prediction = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0]\n\n# Plot\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y_mean_taylor, 'bo-', label='Mean-Taylor')\nplt.plot(x, y_monte_carlo, 'ro-', label='Monte Carlo')\nplt.plot(x, y_prediction, 'ko-', label=r'$\\pm 3-\\sigma$ of Prediction')\n\n# Labels and title\nplt.xlabel('x (m)')\nplt.ylabel('y (m)')\nplt.title('Denser Points with Perfectly Circular Error Ellipses')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nangles = np.linspace(0, 2 * np.pi, 100)\nradii = np.ones_like(angles)\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(6.0, 6.0))\n\n# Plot the circle\nax.plot(angles, radii, color='blue', marker='o')\n\n# Set the title and labels\nax.set_title('Circle with 100 Points', va='bottom')\nax.set_rticks([])  # Remove radial ticks\nax.set_yticklabels([])  # Remove radial tick labels\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of values for alpha and beta\nalpha = np.linspace(0, 2, 100)\nbeta = np.linspace(0, 2, 100)\nalpha_grid, beta_grid = np.meshgrid(alpha, beta)\n\n# Calculate the value of Delta_t for each point\ndelta_t = alpha_grid - beta_grid\n\n# Define a colormap\ncmap = plt.get_cmap('coolwarm')\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the heatmap\nheatmap = ax.pcolormesh(alpha_grid, beta_grid, delta_t, cmap=cmap, shading='auto')\n\n# Add a colorbar\ncbar = fig.colorbar(heatmap, ax=ax)\ncbar.set_label(r'$\\Delta t$')\n\n# Set labels and title\nax.set_xlabel(r'$\\alpha$')\nax.set_ylabel(r'$\\beta$')\nax.set_title('Heatmap of $\\Delta t$')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\nusers = np.linspace(0, 100, 10)\nutility = np.array([\n    -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5\n])\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plotting the utility distribution per topic\nax.plot(users, utility, 'b-', label='Left')\nax.plot(users, utility + 1, 'c-', label='Center Left')\nax.plot(users, utility + 2, 'g-', label='Center')\nax.plot(users, utility + 3, 'r-', label='Center Right')\nax.plot(users, utility + 4, 'm-', label='Right')\n\n# Setting the title and labels\nax.set_title('Utility distribution per topic')\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\n\n# Adding legend\nax.legend()\n\n# Creating the user preference matrix\nmatrix_data = np.array([\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n])\n\n# Define the positions of the items\nitems = ['L', 'CL', 'C', 'CR', 'R']\n\n# Create a grid of points\nx = np.arange(len(items))\ny = np.arange(len(items))\nX, Y = np.meshgrid(x, y)\n\n# Flatten the grid for plotting\nX_flat = X.flatten()\nY_flat = Y.flatten()\n\n# Plot the matrix\nplt.scatter(X_flat, Y_flat, c='white', edgecolors='black', s=100)\nfor i in range(len(items)):\n    for j in range(len(items)):\n        plt.text(j, i, items[j], ha='center', va='center', fontsize=10)\n\n# Set the limits and labels for the matrix\nplt.xlim(-1, len(items))\nplt.ylim(-1, len(items))\nplt.xticks(np.arange(len(items)), items)\nplt.yticks(np.arange(len(items)), items)\n\n# Add a colorbar\ncbar = plt.colorbar()\ncbar.set_label('User Preference')\n\n# Add a title for the matrix\nplt.title('User preference matrix (M)', loc='right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata = {\n    'Reactive-2 payoff': [-2, -1, 0, 1, 2, 3, 4],\n    'Memory-2 payoff': [-2, -1, 0, 1, 2, 3, 4],\n    'num of points': [5, 3, 5, 3, 5, 3, 5]\n}\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot 1: Reactive-2 payoff vs Memory-2 payoff\naxes[0].scatter(data['Reactive-2 payoff'], data['Memory-2 payoff'], c='red', label='num of points = 5')\naxes[0].set_title('Reactive-2 payoff')\naxes[0].set_xlabel('Reactive-2 payoff')\naxes[0].set_ylabel('Memory-2 payoff')\naxes[0].legend()\n\n# Plot 2: Reactive-2 payoff vs Memory-2 payoff\naxes[1].scatter(data['Reactive-2 payoff'], data['Memory-2 payoff'], c='red', label='num of points = 3')\naxes[1].set_title('Reactive-2 payoff')\naxes[1].set_xlabel('Reactive-2 payoff')\naxes[1].set_ylabel('Memory-2 payoff')\naxes[1].legend()\n\n# Plot 3: Reactive-2 payoff vs Memory-2 payoff\naxes[2].scatter(data['Reactive-2 payoff'], data['Memory-2 payoff'], c='red', label='num of points = 3')\naxes[2].set_title('Reactive-2 payoff')\naxes[2].set_xlabel('Reactive-2 payoff')\naxes[2].set_ylabel('Memory-2 payoff')\naxes[2].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncategories = ['story', 'rule']\nvicuna_data = np.array([[5, 7, 9], [3, 5, 7]])\nalpaca_data = np.array([[6, 8, 10], [4, 6, 8]])\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for Model = Vicuna\naxes[0].barh(categories, vicuna_data[0], color='lightblue', label='category1')\naxes[0].barh(categories, vicuna_data[1], left=vicuna_data[0], color='brown', label='category2')\naxes[0].set_title('Model = Vicuna')\naxes[0].set_xlabel('Perplexity Reduction')\naxes[0].set_ylabel('Categories')\naxes[0].legend()\n\n# Plot for Model = Alpaca\naxes[1].barh(categories, alpaca_data[0], color='lightblue', label='category1')\naxes[1].barh(categories, alpaca_data[1], left=alpaca_data[0], color='brown', label='category2')\naxes[1].set_title('Model = Alpaca')\naxes[1].set_xlabel('Perplexity Reduction')\naxes[1].set_ylabel('Categories')\naxes[1].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [-40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\ny = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\ncolors = ['green', 'blue', 'green', 'blue', 'green', 'blue', 'green', 'blue', 'green', 'blue', 'green', 'blue', 'green', 'blue', 'green', 'blue', 'green']\nsizes = [100] * 16\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the scatter plot\nscatter = ax.scatter(x, y, c=colors, s=sizes, edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('\u0394 Robust Accuracy (%)')\nax.set_ylabel('\u0394 RNFR (%)')\nax.set_title('Scatter Plot of \u0394 Robust Accuracy vs \u0394 RNFR')\n\n# Set the limits for x and y axes\nax.set_xlim(-40, 40)\nax.set_ylim(-5, 5)\n\n# Add grid lines\nax.grid(True)\n\n# Add a legend\nlegend_labels = ['Group 1', 'Group 2', 'Group 3', 'Group 4', 'Group 5', 'Group 6', 'Group 7', 'Group 8', 'Group 9', 'Group 10', 'Group 11', 'Group 12', 'Group 13', 'Group 14', 'Group 15', 'Group 16']\nlegend_handles = [plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=color, markersize=10) for color in colors]\nax.legend(legend_handles, legend_labels, loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0, 200, 100)\ny1 = np.exp(x / 50)\ny2 = np.exp(x / 75)\ny3 = np.exp(x / 100)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot lines\nax.plot(x, y1, 'g-', label='Line 3 (Random Noise)')\nax.plot(x, y2, 'r-', label='Line 4 (Exponential Focus)')\n\n# Annotate with a shaded region\nax.fill_between(x, 1.5, 2.5, where=(x >= 50) & (x <= 100), color='lightgreen', alpha=0.5)\nax.fill_between(x, 2.5, 3.5, where=(x >= 100) & (x <= 150), color='lightcoral', alpha=0.5)\nax.fill_between(x, 3.5, 4.5, where=(x >= 150) & (x <= 200), color='lightgreen', alpha=0.5)\n\n# Add markers\nax.plot([50, 100, 150], [2, 3, 4], 'g^', markersize=8)\nax.plot([50, 100, 150], [2, 3, 4], 'r*', markersize=8)\n\n# Add legend\nax.legend()\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Exponential Scale')\nax.set_title('Line 3 (Random Noise)\\nLine 4 (Exponential Focus)')\n\n# Add annotation with a box\nannotation_text = \"\"\"\nLine 3 (Random Noise)\nLine 4 (Exponential Focus)\n\"\"\"\nax.text(0, 0, annotation_text, transform=ax.transAxes, fontsize=10, verticalalignment='bottom', horizontalalignment='left', bbox=dict(facecolor='white', edgecolor='black'))\n\n# Add arrow\narrow_props = dict(facecolor='black', shrink=0.05)\nax.annotate('', xy=(0, 0), xytext=(50, 0), arrowprops=arrow_props)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['0.2', '0.35', '0.4', '0.45', '0.5', '0.55', '0.6', '0.65', '0.7', '0.8']\nknown_counts = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500]\nunknown_counts = [100, 150, 200, 250, 300, 350, 400, 450, 500, 550]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.barh(categories, known_counts, color='green', label='Known')\nax.barh(categories, unknown_counts, left=known_counts, color='blue', label='Unknown')\n\n# Add labels and title\nax.set_xlabel('Maximum predicted probability')\nax.set_ylabel('Number of examples')\nax.set_title('Known vs Unknown')\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 10)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Bfloat16', 'INT8', 'INT4', 'INT2']\ny1 = [9, 8, 7, 9]\ny2 = [8, 7, 6, 8]\ny3 = [7, 6, 5, 7]\ny4 = [6, 5, 4, 6]\ny5 = [5, 4, 3, 5]\ny6 = [4, 3, 2, 4]\n\n# Create the plot\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plotting the lines\nax1.plot(x, y1, 'o-', color='red', label='Qwen-7B-Chat')\nax1.plot(x, y2, 'o-', color='blue', label='Llama2-7B-Chat')\nax1.plot(x, y3, 'o-', color='green', label='MPT-7B-Chat')\nax1.plot(x, y4, 'o-', color='yellow', label='CodeLlama-7B-Instruct')\n\n# Setting the y-axis limits for the first subplot\nax1.set_ylim(2, 9)\nax1.set_ylabel('Bias Score', color='black')\nax1.tick_params(axis='y', labelcolor='black')\n\n# Creating a second y-axis for the inset\nax2 = ax1.twinx()\nax2.plot(x, y5, 'o-', color='brown', label='INT8')\nax2.plot(x, y6, 'o-', color='orange', label='INT2')\n\n# Setting the y-axis limits for the second subplot\nax2.set_ylim(2, 9)\nax2.set_ylabel('Bias Score', color='black')\nax2.tick_params(axis='y', labelcolor='black')\n\n# Adding legend\nfig.legend(loc='upper right', bbox_to_anchor=(1.1, 1.05), bbox_transform=ax1.transAxes)\n\n# Adding title and labels\nplt.title('Bias Score by Data Type and Model')\nplt.xlabel('Data Type')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['0.0', '0.2', '0.4', '0.6']\nknown_counts = [500, 300, 200, 100]\nunknown_counts = [1000, 800, 600, 400]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for Known and Unknown\nax.barh(categories, known_counts, color='orange', label='Known')\nax.barh(categories, unknown_counts, left=known_counts, color='steelblue', label='Unknown')\n\n# Add labels and title\nax.set_xlabel('Number of samples')\nax.set_ylabel('Maximum predicted probability')\nax.set_title('Known vs Unknown')\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-0.5, 3.5)\n\n# Add grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2**6, 2**7, 2**8, 2**9, 2**10, 2**11]\ny1 = [100000, 200000, 300000, 400000, 500000, 600000]\ny2 = [100000, 200000, 300000, 400000, 500000, 600000]\ny3 = [100000, 200000, 300000, 400000, 500000, 600000]\ny4 = [100000, 200000, 300000, 400000, 500000, 600000]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot lines\nax.plot(x, y1, 'g-', label='Cos | n0 = 200', marker='x')\nax.plot(x, y2, 'g-', label='Cos | n0 = 400', marker='x')\nax.plot(x, y3, 'b-', label='ReLU | n0 = 200', marker='o')\nax.plot(x, y4, 'b-', label='ReLU | n0 = 400', marker='o')\n\n# Add legend\nax.legend()\n\n# Set labels and title\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\nax.set_title('Empirical Lipschitz Constant vs Width of Layer')\n\n# Set y-axis limits\nax.set_ylim(0, 400000)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntime_steps = [0, 2000, 4000, 6000, 8000, 10000]\nwi = [35000, 45000, 55000, 65000, 75000, 80000]\nisq = [36000, 46000, 56000, 66000, 76000, 81000]\nwiql = [37000, 47000, 57000, 67000, 77000, 82000]\ngreedy = [38000, 48000, 58000, 68000, 78000, 83000]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(time_steps, wi, 'bo-', label='WI', color='red')\nplt.plot(time_steps, isq, 'go-', label='ISQ', color='green')\nplt.plot(time_steps, wiql, 'mo-', label='WIQL', color='purple')\nplt.plot(time_steps, greedy, 'co-', label='Greedy', color='blue')\n\n# Adding annotations\nplt.annotate('71000', (10000, 71000), textcoords=\"offset points\", xytext=(-10, -10), ha='center')\nplt.annotate('69000', (10000, 69000), textcoords=\"offset points\", xytext=(-10, -10), ha='center')\nplt.annotate('67000', (10000, 67000), textcoords=\"offset points\", xytext=(-10, -10), ha='center')\nplt.annotate('65000', (10000, 65000), textcoords=\"offset points\", xytext=(-10, -10), ha='center')\nplt.annotate('63000', (10000, 63000), textcoords=\"offset points\", xytext=(-10, -10), ha='center')\nplt.annotate('61000', (10000, 61000), textcoords=\"offset points\", xytext=(-10, -10), ha='center')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Setting labels and title\nplt.xlabel('Time Steps')\nplt.ylabel('Discounted Cumulative Reward')\nplt.title('Discounted Cumulative Reward over Time')\n\n# Displaying grid\nplt.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntime_steps = [0, 25, 50, 75, 100, 125, 150, 175, 200]\nwi_values = [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15]\nisq_values = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot WI data\nax1.plot(time_steps, wi_values, 'b-', label='WI')\nax1.set_xlabel('Time Steps')\nax1.set_ylabel('Discounted cumulative reward', color='b')\nax1.tick_params(axis='y', labelcolor='b')\n\n# Create a second y-axis for ISQ data\nax2 = ax1.twinx()\nax2.plot(time_steps, isq_values, 'r-', label='ISQ')\nax2.set_ylabel('Discounted cumulative reward', color='r')\nax2.tick_params(axis='y', labelcolor='r')\n\n# Add legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.85))\n\n# Set title\nplt.title('Discounted Cumulative Reward')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [-4, -3, -2, -1, 0, 1, 2, 3, 4]\ny_daytime_sunny = [0.5, 1.5, 2.5, 3.5, 4.5, 3.5, 2.5, 1.5, 0.5]\ny_night_rainy = [0.2, 0.8, 1.8, 2.8, 3.8, 2.8, 1.8, 0.8, 0.2]\ny_pgst = [0.3, 0.9, 1.9, 2.9, 3.9, 2.9, 1.9, 0.9, 0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Scatter plots\nax.scatter(x, y_daytime_sunny, color='orange', label='Daytime Sunny')\nax.scatter(x, y_night_rainy, color='blue', label='Night Rainy')\nax.scatter(x, y_pgst, color='green', label='PGST')\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Scatter Plot Example')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for each subplot\ndata1 = [[-2, -1, 0], [-1, 0, 1], [0, 1, 2]]\ndata2 = [[-3, -2, -1], [-2, -1, 0], [-1, 0, 1]]\ndata3 = [[-4, -3, -2], [-3, -2, -1], [-2, -1, 0]]\ndata4 = [[-5, -4, -3], [-4, -3, -2], [-3, -2, -1]]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(6.0, 6.0))\n\n# Plot data on each subplot\naxes[0, 0].scatter(data1[0], data1[1], color='red', label='Data 1')\naxes[0, 0].set_title('Subplot 1')\naxes[0, 0].set_xlabel('X Label')\naxes[0, 0].set_ylabel('Y Label')\n\naxes[0, 1].scatter(data2[0], data2[1], color='blue', label='Data 2')\naxes[0, 1].set_title('Subplot 2')\naxes[0, 1].set_xlabel('X Label')\naxes[0, 1].set_ylabel('Y Label')\n\naxes[1, 0].scatter(data3[0], data3[1], color='green', label='Data 3')\naxes[1, 0].set_title('Subplot 3')\naxes[1, 0].set_xlabel('X Label')\naxes[1, 0].set_ylabel('Y Label')\n\naxes[1, 1].scatter(data4[0], data4[1], color='purple', label='Data 4')\naxes[1, 1].set_title('Subplot 4')\naxes[1, 1].set_xlabel('X Label')\naxes[1, 1].set_ylabel('Y Label')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([10, 50, 100, 500, 1000])\ny1 = np.array([10, 20, 30, 40, 50])\ny2 = np.array([15, 25, 35, 45, 55])\ny3 = np.array([20, 30, 40, 50, 60])\ny4 = np.array([25, 35, 45, 55, 65])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Plot the data with different colors and labels\nax.plot(x, y1, 'o-', color='brown', label='ActivityNet mIoU')\nax.plot(x, y2, 'o-', color='orange', label='Breakfast MoF')\nax.plot(x, y3, 'o-', color='darkblue', label='ActivityNet CIDER')\nax.plot(x, y4, 'o-', color='gray', label='QVHighlights mAP')\n\n# Fill between lines with different colors\nax.fill_between(x, y1, y2, color='pink', alpha=0.5)\nax.fill_between(x, y2, y3, color='lightgreen', alpha=0.5)\nax.fill_between(x, y3, y4, color='lightgray', alpha=0.5)\n\n# Set the title and labels\nax.set_title('Comparison of Different Models')\nax.set_xlabel('Number of Parameters (K)')\nax.set_ylabel('Performance Score')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntime_steps = [0, 1, 2, 3]\nGT = [98, 96, 94, 92]\nDRS = [100, 98, 96, 94]\nPR_based = [102, 100, 98, 96]\n\n# Create a figure and axis with specified size\nfig, ax1 = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the first line\nax1.plot(time_steps, GT, 'o-', color='green', label='GT')\nax1.set_xlabel('time step')\nax1.set_ylabel('CR', color='black')\n\n# Create a second y-axis for the second line\nax2 = ax1.twinx()\nax2.plot(time_steps, DRS, 'o-', color='blue', label='DRS')\nax2.plot(time_steps, PR_based, 'o-', color='red', label='PR-based')\n\n# Set the limits for the y-axes\nax1.set_ylim(0.96, 1)\nax2.set_ylim(0, 100)\n\n# Add legends\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Set the title\nplt.title('RSA vs Time')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0, 80, 4)\ny_clip = np.array([0.53, 0.6, 0.65, 0.7, 0.75])\ny_laion_5k = np.array([0.55, 0.62, 0.67, 0.72, 0.77])\ny_coco_5k = np.array([0.58, 0.65, 0.7, 0.75, 0.8])\ny_laion_10k = np.array([0.6, 0.67, 0.72, 0.77, 0.82])\ny_coco_10k = np.array([0.62, 0.69, 0.74, 0.79, 0.84])\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot each dataset\nax.plot(x, y_clip, color='black', label='clip')\nax.fill_between(x, y_clip, color='lightcoral', alpha=0.5)\n\nax.plot(x, y_laion_5k, color='yellow', label='laion (5k)')\nax.fill_between(x, y_clip, y_laion_5k, color='lightcoral', alpha=0.5)\n\nax.plot(x, y_coco_5k, color='blue', label='coco (5k)')\nax.fill_between(x, y_laion_5k, y_coco_5k, color='lightcoral', alpha=0.5)\n\nax.plot(x, y_laion_10k, color='green', label='laion (10k)')\nax.fill_between(x, y_coco_5k, y_laion_10k, color='lightcoral', alpha=0.5)\n\nax.plot(x, y_coco_10k, color='pink', label='coco (10k)')\nax.fill_between(x, y_laion_10k, y_coco_10k, color='lightcoral', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nn = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8])\ncontent = np.array([1, 2, 3, 4, 5, 4, 3, 2, 1])\norganization = np.array([1, 2, 3, 4, 5, 4, 3, 2, 1])\nlanguage = np.array([1, 2, 3, 4, 5, 4, 3, 2, 1])\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\nax.plot(n, content, label='Content', color='blue')\nax.plot(n, organization, label='Organization', color='orange')\nax.plot(n, language, label='Language', color='teal')\n\n# Fill between lines\nax.fill_between(n, content, color='lightgreen', alpha=0.5)\nax.fill_between(n, content, organization, color='lightblue', alpha=0.5)\nax.fill_between(n, organization, color='lightseagreen', alpha=0.5)\n\n# Labels and title\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Cumulative Performance Gain by Augmentation Level')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [1000, 1500, 2000, 2500, 3000, 3500, 4000]\namericas = [1000, 1200, 1400, 1600, 1800, 2000, 2200]\nasia = [1000, 1200, 1400, 1600, 1800, 2000, 2200]\neurope = [1000, 1200, 1400, 1600, 1800, 2000, 2200]\noceania = [1000, 1200, 1400, 1600, 1800, 2000, 2200]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot data\nax.plot(years, africa, label='Africa', color='lightgreen')\nax.plot(years, americas, label='Americas', color='yellow')\nax.plot(years, asia, label='Asia', color='darkred')\nax.plot(years, europe, label='Europe', color='orange')\nax.plot(years, oceania, label='Oceania', color='lightblue')\n\n# Fill between lines\nax.fill_between(years, 0, africa, color='lightgreen', alpha=0.5)\nax.fill_between(years, 0, africa + americas, color='salmon', alpha=0.5)\nax.fill_between(years, 0, africa + americas + asia, color='lightblue', alpha=0.5)\nax.fill_between(years, 0, africa + americas + asia + europe, color='lightgrey', alpha=0.5)\nax.fill_between(years, 0, africa + americas + asia + europe + oceania, color='lightcoral', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\nax.set_title('World population')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Notre-Dame de Paris', 'Demi-Gods and Semi-Devils', 'The Count of Monte Cristo', 'Game of Thrones', 'Attack on Titan']\nscores = {\n    'Notre-Dame de Paris': [6.5, 6.0, 5.5, 5.0, 4.5],\n    'Demi-Gods and Semi-Devils': [6.0, 5.5, 5.0, 4.5, 4.0],\n    'The Count of Monte Cristo': [5.5, 5.0, 4.5, 4.0, 3.5],\n    'Game of Thrones': [5.0, 4.5, 4.0, 3.5, 3.0],\n    'Attack on Titan': [4.5, 4.0, 3.5, 3.0, 2.5]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot each category\nfor i, (category, scores_list) in enumerate(scores.items()):\n    ax.barh(categories, scores_list, left=np.arange(len(scores_list)), height=0.8, label=category)\n\n# Set labels and title\nax.set_xlabel('Scores')\nax.set_ylabel('Categories')\nax.set_title('Scores by Category')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\nvalues = [50, 40, 30, 20, 10, 0, 0, 0, 0, 0]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='lightblue')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Bar Chart of Accuracy')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', linewidth=0.7, color='gray', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nregions = ['Region 1 Sales', 'Region 2 Sales', 'Region 3 Sales']\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales_region_1 = [60, 40, 20, 80, 10]\nsales_region_2 = [80, 60, 40, 100, 80]\nsales_region_3 = [100, 80, 60, 80, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Plot each product's sales for each region\nbar_width = 0.2\nindex = np.arange(len(products))\n\nax.bar(index, sales_region_1, bar_width, label='Product A', color='green')\nax.bar(index + bar_width, sales_region_2, bar_width, label='Product B', color='cyan')\nax.bar(index + 2 * bar_width, sales_region_3, bar_width, label='Product C', color='magenta')\n\n# Add labels and title\nax.set_xlabel('Products')\nax.set_ylabel('Sales')\nax.set_title('Average Monthly Sales by Product Across Regions')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(products)\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 100)\n\n# Show grid lines\nax.yaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlengths = ['0-9', '10-19', '20-29', '30-39', '40-49']\nspearmans = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a horizontal bar chart\nplt.figure(figsize=(6.0, 6.0))\nbars = plt.barh(lengths, spearmans, color='blue')\n\n# Add labels and title\nplt.xlabel('length')\nplt.ylabel('speaman')\nplt.title('Spearmans correlation between length and other variables')\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    plt.text(width, bar.get_y() + bar.get_height()/2, f'{width:.2f}', va='center', ha='left')\n\n# Set y-axis limits\nplt.ylim(-1.0, 0.75)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nbeauty_values = [2.2, 2.4, 2.4, 19.9, 14.3]\nmovielens_values = [3.0, 3.0, 4.1, 2.9, 3.1]\nyelp_values = [5.1, 5.1, 4.4, 4.8, 4.8]\n\n# Bar width\nbar_width = 0.2\n\n# Positions of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars\nax.bar(r1, beauty_values, color='black', width=bar_width, edgecolor='grey', label='Beauty')\nax.bar(r2, movielens_values, color='red', width=bar_width, edgecolor='grey', label='MovieLens-1M')\nax.bar(r3, yelp_values, color='darkred', width=bar_width, edgecolor='grey', label='Yelp')\n\n# Add labels and title\nax.set_xlabel('Categories', fontweight='bold')\nax.set_ylabel('Percentage (%)', fontweight='bold')\nax.set_title('Comparison of Categories')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nen_scores = [3.5, 1.5, 1.5, 1.3]\nfr_scores = [3.5, 2.3, 0.8, 0.9]\nes_scores = [3.5, 1.5, 1.3, 1.3]\nde_scores = [3.5, 1.5, 1.3, 1.3]\nit_scores = [3.5, 1.5, 1.3, 1.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.barh(models, en_scores, color='navy', label='EN')\nax.barh(models, fr_scores, left=en_scores, color='orangered', label='FR')\nax.barh(models, es_scores, left=np.array(en_scores) + np.array(fr_scores), color='green', label='ES')\nax.barh(models, de_scores, left=np.array(en_scores) + np.array(fr_scores) + np.array(es_scores), color='brown', label='DE')\nax.barh(models, it_scores, left=np.array(en_scores) + np.array(fr_scores) + np.array(es_scores) + np.array(de_scores), color='gold', label='IT')\n\n# Set labels and title\nax.set_xlabel('Improvement [%]')\nax.set_ylabel('Model')\nax.set_title('ENDEFRRITES sampled')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-4, 4)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nmacro_f1_scores = [82, 83, 84, 85, 86, 87]\nmixed_scores = [80, 81, 82, 83, 84, 85]\nrepublican_scores = [81, 82, 83, 84, 85, 86]\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(7.0, 5.0))\n\n# Plotting\nax1.barh(pheme, macro_f1_scores, color='blue', label='Democratic')\nax1.set_xlabel('Macro F1-score')\n\n# Twin axes for mixed and republican scores\nax2 = ax1.twiny()\nax2.barh(pheme, mixed_scores, left=macro_f1_scores, color='gray', label='Mixed')\nax2.barh(pheme, republican_scores, left=[x + y for x, y in zip(macro_f1_scores, mixed_scores)], color='red', label='Republican')\n\n# Set labels and title\nax1.set_ylabel('Pheme')\nax1.set_title('Pheme vs Macro F1-score')\n\n# Add legend\nax1.legend(loc='upper right')\nax2.legend(loc='lower right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '2', '3', '4', '5', '6']\nscores = [\n    [5, 4, 3, 2, 1],  # Blue\n    [5, 4, 3, 2, 1],  # Light Blue\n    [5, 4, 3, 2, 1],  # Green\n    [5, 4, 3, 2, 1],  # Yellow\n    [5, 4, 3, 2, 1],  # Orange\n    [5, 4, 3, 2, 1]   # Red\n]\n\n# Colors\ncolors = [\n    '#1f77b4',  # Blue\n    '#aec7e8',  # Light Blue\n    '#98df8a',  # Green\n    '#ffbb78',  # Yellow\n    '#ff9896',  # Orange\n    '#d62728'   # Red\n]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\nbottom = np.zeros(len(categories))\nfor i, score in enumerate(scores):\n    ax.bar(categories, score, color=colors[i], bottom=bottom, label=f'{i+1}')\n    bottom += score\n\n# Labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Legend\nax.legend(title='Scores')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['human', 'gpt4', 'gpt4-cot']\nO = [100, 100, 100]\nT = [200, 200, 200]\nP = [500, 500, 500]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars\nax.barh(categories, O, color='lightblue', label='O')\nax.barh(categories, T, left=O, color='yellow', label='T')\nax.barh(categories, P, left=np.array(O) + np.array(T), color='pink', label='P')\n\n# Set labels and title\nax.set_xlabel('Count')\nax.set_ylabel('Role')\nax.set_title('Resonance Preference Plot for rich-context\\ns1')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winograd', 'Average']\naccuracies = {\n    'LLaMA-2-7B': [53.0, 51.3, 48.6, 73.1, 53.1],\n    'Evol-Instruct-70k': [51.3, 51.4, 51.5, 73.2, 53.2],\n    'Evol-Instruct-AlpaGasus-1k': [51.4, 51.5, 51.6, 73.3, 53.3],\n    'Evol-Instruct-1k-longest': [51.5, 51.6, 51.7, 73.4, 53.4],\n    'LIMA-1k': [51.6, 51.7, 51.8, 73.5, 53.5]\n}\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot data\nfor i, (label, values) in enumerate(accuracies.items()):\n    ax.barh(tasks, values, left=np.arange(len(values)), height=0.8, label=label, alpha=0.8)\n\n# Set labels and title\nax.set_xlabel('Accuracy (%)')\nax.set_ylabel('Tasks')\nax.set_title('Model Accuracy Comparison')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['GSM8K', 'MNLI', 'race@High']\nM3 = [50, 55, 50]\nM4 = [55, 60, 55]\nM5 = [60, 65, 60]\nM6 = [65, 70, 65]\nM7 = [70, 75, 70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.bar(categories, M3, color='lightblue', label='M = 3')\nax.bar(categories, M4, bottom=M3, color='skyblue', label='M = 4')\nax.bar(categories, M5, bottom=[sum(x) for x in zip(M3, M4)], color='cadetblue', label='M = 5')\nax.bar(categories, M6, bottom=[sum(x) for x in zip(M3, M4, M5)], color='steelblue', label='M = 6')\nax.bar(categories, M7, bottom=[sum(x) for x in zip(M3, M4, M5, M6)], color='darkblue', label='M = 7')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Performance')\nax.set_title('Performance Comparison of Models')\nax.set_ylim(35, 75)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['DLMA-7B VS. LLAMa-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMa-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\ndlma_win = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 30.9]\ntie = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 38.7]\ndlma_lose = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 30.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plotting the data\nax.barh(categories, dlma_win, color='green', label='DLMA win')\nax.barh(categories, tie, left=dlma_win, color='blue', label='Tie')\nax.barh(categories, dlma_lose, left=[sum(x) for x in zip(dlma_win, tie)], color='red', label='DLMA lose')\n\n# Adding labels and title\nax.set_xlabel('Percentage')\nax.set_ylabel('DLMA vs. Baseline Methods On HHH (Evaluated by GPT4)')\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)')\n\n# Adding legend\nax.legend(loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntime = np.array([0, 10, 20, 30, 40])\ntrot = np.array([0.5, 0.7, 0.8, 0.9, 1.0])\npace = np.array([0.3, 0.4, 0.5, 0.6, 0.7])\nbound = np.array([0.2, 0.3, 0.4, 0.5, 0.6])\npronk = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\ntransition = np.array([0.05, 0.1, 0.15, 0.2, 0.25])\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\nax.bar(time, trot, color='green', label='trot')\nax.bar(time, pace, bottom=trot, color='red', label='pace')\nax.bar(time, bound, bottom=trot + pace, color='purple', label='bound')\nax.bar(time, pronk, bottom=trot + pace + bound, color='brown', label='pronk')\nax.bar(time, transition, bottom=trot + pace + bound + pronk, color='gray', label='transition')\n\n# Labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nap1k_wins = [68, 82, 68, 72, 68]\ntie_wins = [24, 15, 22, 19, 23]\nag1k_wins = [8, 3, 10, 9, 9]\n\n# Bar width\nbar_width = 0.35\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nax.bar(categories, ap1k_wins, bar_width, label='AP-1k wins', color='#1f77b4')\nax.bar(categories, tie_wins, bar_width, bottom=ap1k_wins, label='Tie', color='#6a51a3')\nax.bar(categories, ag1k_wins, bar_width, bottom=np.array(ap1k_wins) + np.array(tie_wins), label='AG-1k wins', color='#c49c94')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Wins')\nax.set_title('Comparison of Categories')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nstrong_disagree = [14.8, 9.4, 8.3, 24.1]\ndisagree = [29.6, 24.1, 14.8, 29.6]\nneutral = [18.5, 40.7, 40.7, 16.7]\nagree = [33.3, 27.8, 33.3, 9.3]\nstrong_agree = [8.4, 9.0, 9.3, 9.5]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.barh(categories, strong_disagree, color='darkred', label='Strong Disagree')\nax.barh(categories, disagree, left=strong_disagree, color='orange', label='Disagree')\nax.barh(categories, neutral, left=np.array(strong_disagree) + np.array(disagree), color='gray', label='Neutral')\nax.barh(categories, agree, left=np.array(strong_disagree) + np.array(disagree) + np.array(neutral), color='skyblue', label='Agree')\nax.barh(categories, strong_agree, left=np.array(strong_disagree) + np.array(disagree) + np.array(neutral) + np.array(agree), color='dodgerblue', label='Strong Agree')\n\n# Add labels and title\nax.set_xlabel('Percentage')\nax.set_ylabel('Categories')\nax.set_title('Eye Movement')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrightness = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\nrate_of_change_ours = [-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]\nrate_of_change_saliency = [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]\n\n# Create a figure and axis with specified size\nfig, ax1 = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the first dataset\nax1.bar(brightness, rate_of_change_ours, color='blue', label='Ours')\nax1.set_xlabel('Brightness')\nax1.set_ylabel('Rate of Change (%)', color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\nax2.bar(brightness, rate_of_change_saliency, color='lightblue', alpha=0.7, label='Saliency-based Sampling')\nax2.set_ylabel('Rate of Change (%)', color='lightblue')\nax2.tick_params(axis='y', labelcolor='lightblue')\n\n# Set the title\nplt.title('Rate of Change (%)')\n\n# Add a legend\nfig.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 3.1, 3.0, 3.1, 3.0, 3.0]\ncompleteness = [3.0, 2.8, 2.7, 2.6, 2.5, 2.5]\nconciseness = [3.0, 2.8, 2.7, 2.6, 2.5, 2.5]\nreadability = [3.0, 2.8, 2.7, 2.6, 2.5, 2.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot bars\nax.bar(models, accuracy, color='navy', label='Accuracy')\nax.bar(models, completeness, bottom=accuracy, color='orange', label='Completeness')\nax.bar(models, conciseness, bottom=[a + c for a, c in zip(accuracy, completeness)], color='darkred', label='Conciseness')\nax.bar(models, readability, bottom=[a + c + k for a, c, k in zip(accuracy, completeness, conciseness)], color='lightseagreen', label='Readability')\n\n# Add labels and title\nax.set_xlabel('Language Models')\nax.set_ylabel('Ratings')\nax.set_title('Ratings of Language Models on a Scale from 1-4')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 3.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nbars = plt.bar(models, accuracies, color=['blue', 'darkblue', 'teal', 'darkgreen', 'lightgreen', 'yellow', 'gold'])\n\n# Add labels and title\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\nplt.title('Model Accuracy')\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 3), va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMA-1k*']\ngpt4_as_a_judge = [78.8, 67.4, 59.8]\nalpacas_1k_longest_wins = [11.7, 18.1, 21.0]\nalpacas_1k_longest_loses = [9.5, 14.5, 19.2]\nalpacas_1k_shortest_wins = [77.6, 68.3, 62.9]\nalpacas_1k_shortest_loses = [4.4, 8.0, 13.5]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Bar width\nbar_width = 0.2\n\n# Set positions of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\nr5 = [x + bar_width for x in r4]\n\n# Create horizontal bars\nax.barh(r1, gpt4_as_a_judge, color='blue', edgecolor='grey', height=bar_width, label='GPT4-as-a-judge')\nax.barh(r2, alpacas_1k_longest_wins, color='lightblue', edgecolor='grey', height=bar_width, label='Alpacas-1k-longest wins')\nax.barh(r3, alpacas_1k_longest_loses, color='orange', edgecolor='grey', height=bar_width, label='Alpacas-1k-longest loses')\nax.barh(r4, alpacas_1k_shortest_wins, color='darkorange', edgecolor='grey', height=bar_width, label='Alpacas-1k-shortest wins')\nax.barh(r5, alpacas_1k_shortest_loses, color='lightcoral', edgecolor='grey', height=bar_width, label='Alpacas-1k-shortest loses')\n\n# Add labels\nax.set_yticks([r + bar_width for r in range(len(categories))], categories)\nax.set_xlabel('Scores')\nax.set_ylabel('Categories')\nax.set_title('GPT4-as-a-judge')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Ang', 'Cn', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nnegative = [500, 300, 200, 100, 100, 300, 100, 50]\npositive = [100, 100, 100, 100, 100, 100, 100, 100]\nnone = [100, 100, 100, 100, 100, 100, 100, 100]\nmixed = [100, 100, 100, 100, 100, 100, 100, 100]\n\n# Bar width\nbar_width = 0.2\n\n# Positions of bars on x-axis\nr1 = range(len(emotions))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Create bars\nax.bar(r1, negative, color='red', edgecolor='grey', width=bar_width, label='negative')\nax.bar(r2, positive, color='green', edgecolor='grey', width=bar_width, label='positive')\nax.bar(r3, none, color='gray', edgecolor='grey', width=bar_width, label='none')\nax.bar(r4, mixed, color='orange', edgecolor='grey', width=bar_width, label='mixed')\n\n# Add labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency')\nax.set_title('Emotion Analysis')\nax.set_xticks([r + bar_width * 1.5 for r in range(len(emotions))])\nax.set_xticklabels(emotions)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['GPT-4V', 'RoboCodeX']\nsuccess = [0.8, 0.9]\noccupancy_error = [0.1, 0.1]\ngrounding_error = [0.1, 0.1]\ntrajectory_optimization_error = [0.1, 0.1]\ngrasping_failed = [0.1, 0.1]\n\n# Bar width\nbar_width = 0.5\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars\nax.barh(categories, success, color='green', label='Success')\nax.barh(categories, occupancy_error, left=success, color='orange', label='Occupancy Error')\nax.barh(categories, grounding_error, left=[i + j for i, j in zip(success, occupancy_error)], color='gray', label='Grounding Error')\nax.barh(categories, trajectory_optimization_error, left=[i + j + k for i, j, k in zip(success, occupancy_error, grounding_error)], color='blue', label='Trajectory optimization Error')\nax.barh(categories, grasping_failed, left=[i + j + k + l for i, j, k, l in zip(success, occupancy_error, grounding_error, trajectory_optimization_error)], color='purple', label='Grasping failed')\n\n# Add labels and title\nax.set_xlabel('Percentage of total trials')\nax.set_ylabel(' ')\nax.set_title('Gripper performance metrics')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndatasets = ['VOC 2012', 'COCO 2017']\njpeg = [3.5, 2.5]\ndeepjscss = [3.0, 2.0]\nours = [3.0, 2.0]\n\n# Bar width\nbar_width = 0.35\n\n# Positions of bars on x-axis\nr1 = np.arange(len(datasets))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot each dataset\nax.bar(r1, jpeg, color='lightgreen', edgecolor='black', width=bar_width, label='JPEG')\nax.bar(r2, deepjscss, color='brown', edgecolor='black', width=bar_width, label='DEEPJSCC w/ ofdm')\nax.bar(r3, ours, color='darkgreen', edgecolor='black', width=bar_width, label='OURS')\n\n# Add labels and title\nax.set_xlabel('Datasets')\nax.set_ylabel('Transmission Delay (ms)')\nax.set_title('Comparison of Different Datasets')\nax.set_xticks([r + bar_width for r in range(len(datasets))])\nax.set_xticklabels(datasets)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\nrbf_int_values = [1e-2, 1e-3, 1e-4, 1e-3, 1e-2, 1e-1]\nrbf_pol_values = [1e-2, 1e-3, 1e-4, 1e-3, 1e-2, 1e-1]\nrbf_com_values = [1e-2, 1e-3, 1e-4, 1e-3, 1e-2, 1e-1]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.bar(categories, rbf_int_values, color='purple', label='RBF-INT')\nax.bar(categories, rbf_pol_values, bottom=rbf_int_values, color='pink', label='RBF-POL')\nax.bar(categories, rbf_com_values, bottom=np.array(rbf_int_values) + np.array(rbf_pol_values), color='orange', label='RBF-COM')\n\n# Set labels and title\nax.set_ylabel('log L2')\nax.set_xlabel('PDEs')\nax.set_title('Comparison of RBF-INT, RBF-POL, and RBF-COM')\n\n# Set y-axis limits\nax.set_ylim(1e-4, 1e-1)\n\n# Set y-axis ticks\nax.set_yticks([1e-4, 1e-3, 1e-2])\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['PICC', 'SROCC']\nwodarqn = [0.965, 0.965]\nwocprn = [0.94, 0.94]\nwocqnc = [0.95, 0.95]\nfull_model = [0.97, 0.97]\n\n# Bar width\nbar_width = 0.2\n\n# Positions of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Create bars\nax.bar(r1, wodarqn, color='blue', width=bar_width, edgecolor='grey', label='w/o DaQRN')\nax.bar(r2, wocprn, color='orange', width=bar_width, edgecolor='grey', label='w/o CPRN')\nax.bar(r3, wocqnc, color='cyan', width=bar_width, edgecolor='grey', label='w/o QCN')\nax.bar(r4, full_model, color='tan', width=bar_width, edgecolor='grey', label='Full model')\n\n# Add labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Metric Values')\nax.set_title('Models')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\nzero_shot = [6.11, 28.33, 60.56]\none_shot = [31.11, 56.11, 60.56]\nds_agent = [85.0, 85.0, 99.44]\n\n# Bar width\nbar_width = 0.25\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot bars\nax.bar(categories, zero_shot, bar_width, label='Zero-shot', color='brown')\nax.bar([p + bar_width for p in range(len(categories))], one_shot, bar_width, label='One-shot', color='lightblue')\nax.bar([p + 2 * bar_width for p in range(len(categories))], ds_agent, bar_width, label='DS-Agent', color='purple')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('One pass rate (%)')\nax.set_title('One Pass Rate by Category')\nax.set_xticks([p + bar_width for p in range(len(categories))])\nax.set_xticklabels(categories)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_percentages = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_percentages = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_percentages = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Bar width\nbar_width = 0.25\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.bar(categories, win_percentages, color='steelblue', label='Win', width=bar_width)\nax.bar([p + bar_width for p in range(len(categories))], tie_percentages, color='lightgreen', label='Tie', width=bar_width)\nax.bar([p + 2 * bar_width for p in range(len(categories))], loss_percentages, color='salmon', label='Loss', width=bar_width)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Win, Tie, and Loss Percentages')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), va='bottom')\n\n# Set y-axis limits\nax.set_ylim(0, 1)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 27.7, 27.1, 26.7]\nfollowing_related_format_error_rate = [100.0, 83.3, 50.7, 63.4, 60.8]\nfollowing_related_error_rate = [100.0, 100.0, 50.7, 63.4, 60.8]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the first bar chart\nax1.bar(steps, avg_following_rate, color='gray', label='Avg. Following Rate')\nax1.set_ylabel('Scores')\n\n# Create a second y-axis for the second bar chart\nax2 = ax1.twinx()\nax2.bar(steps, following_related_format_error_rate, color='blue', alpha=0.7, label='Following-related Format Error Rate')\nax2.set_ylabel('Scores')\n\n# Create a third y-axis for the third bar chart\nax3 = ax1.twinx()\nax3.bar(steps, following_related_error_rate, color='green', alpha=0.7, label='Following-related Error Rate')\nax3.spines['right'].set_position(('outward', 60))  # Adjust the position of the third y-axis\n\n# Set the title and labels\nplt.title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax1.set_xlabel('Steps')\n\n# Add a legend\nfig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['coreutils', 'scp', 'tar', 'exim', 'menc', 'niginx', 'bzip2', 'astar', 'gcc', 'gobmk', 'h264', 'liba', 'libm', 'libmm', 'libo', 'libp', 'libq', 'libr', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', '"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Llama2', 'Mistral']\nrandom_scores = [5.52, 5.53]\nuniform_scores = [5.53, 5.54]\ng2s_scores = [5.83, 5.84]\ns2g_scores = [5.54, 5.54]\nclusterclip_scores = [6.57, 6.75]\n\n# Bar width\nbar_width = 0.15\n\n# Positions of bars on x-axis\nr1 = range(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\nr5 = [x + bar_width for x in r4]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plotting each category\nax.bar(r1, random_scores, color='purple', width=bar_width, edgecolor='grey', label='Random')\nax.bar(r2, uniform_scores, color='brown', width=bar_width, edgecolor='grey', label='Uniform')\nax.bar(r3, g2s_scores, color='green', width=bar_width, edgecolor='grey', label='G2S')\nax.bar(r4, s2g_scores, color='orange', width=bar_width, edgecolor='grey', label='S2G')\nax.bar(r5, clusterclip_scores, color='blue', width=bar_width, edgecolor='grey', label='ClusterClip')\n\n# Adding labels and title\nax.set_xlabel('MT-Bench Score')\nax.set_ylabel('Score')\nax.set_title('Comparison of Different Models')\nax.set_xticks([r + bar_width * 2 for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclusters = [100, 1000]\nrandom_sampling = [49.98, 49.63]\nuniform = [51.05, 50.74]\ncluster_clip = [51.05, 50.74]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot bars for each method\nax.bar(clusters, random_sampling, color='blue', label='Random Sampling')\nax.bar(clusters, uniform, bottom=random_sampling, color='brown', label='Uniform')\nax.bar(clusters, cluster_clip, bottom=[x + y for x, y in zip(random_sampling, uniform)], color='saddlebrown', label='ClusterClip')\n\n# Add horizontal line at 50\nax.axhline(y=50, color='green', linestyle='--')\n\n# Set labels and title\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\nax.set_title('Random Sampling')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['ResNet18', 'AlexNet', 'ResNet50']\nperturbations = ['0%', '50%', '4:8', '6:8', '75%', '87.50%', '7:8']\nvalues = [\n    [1.0, 1.8, 2.6, 3.3, 4.6, 4.5, 7.4],\n    [1.0, 1.9, 2.9, 3.4, 5.2, 6.1, 8.7],\n    [1.0, 1.6, 2.7, 2.8, 3.9, 4.3, 4.3]\n]\n\n# Colors\ncolors = ['#FFA500', '#ADD8E6', '#FF6347', '#87CEEB', '#FFD700', '#FF69B4', '#FFC0CB']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot bars\nfor i, (category, values) in enumerate(zip(categories, values)):\n    ax.barh(perturbations, values, color=colors[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Speedup')\nax.set_ylabel('Perturbation')\nax.set_title('Perturbation')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\ncorrect = [80, 70, 60, 50, 40, 30]\ncounterfeit_passing = [20, 30, 40, 50, 60, 70]\ncounterfeit_failing = [0, 0, 0, 0, 0, 0]\nconfused = [0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot bars\nax.bar(categories, correct, color='lightgreen', label='Correct')\nax.bar(categories, counterfeit_passing, bottom=correct, color='lightblue', label='Counterfeit (Test-Passing)')\nax.bar(categories, counterfeit_failing, bottom=[i + j for i, j in zip(correct, counterfeit_passing)], color='salmon', label='Counterfeit (Test-Failing)')\nax.bar(categories, confused, bottom=[i + j + k for i, j, k in zip(correct, counterfeit_passing, counterfeit_failing)], color='lavender', label='Confused (Test-Failing)')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Accuracy')\nax.set_title('LeetCode, DS-6.7b')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 100)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nrecost_wins = [53, 80, 116, 99, 179]\ntie_wins = [6, 33, 49, 50, 23]\nalpacawins_wins = [21, 67, 53, 103, 98]\n\n# Bar width\nbar_width = 0.2\n\n# Positions of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plotting the bars\nax.bar(r1, recost_wins, color='orangered', width=bar_width, edgecolor='grey', label='Recost (1% wins)')\nax.bar(r2, tie_wins, color='yellow', width=bar_width, edgecolor='grey', label='Tie')\nax.bar(r3, alpacawins_wins, color='steelblue', width=bar_width, edgecolor='grey', label='Alpaca wins')\n\n# Adding labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Wins')\nax.set_title('Model Performance')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'Stare', 'Wass Combo', 'Alti+', 'STARE']\nnon_aggregate = [35.15, 26.86, 19.08, 22.09, 20.67, 17.06, 19.08, 20.67, 17.06]\naggregate = [36.63, 26.38, 20.67, 23.9, 26.38, 27.06, 28.38, 30.67, 31.06]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nax.bar(categories, non_aggregate, color='lightgreen', label='Non-Aggregate')\nax.bar(categories, aggregate, bottom=non_aggregate, color='saddlebrown', label='Aggregate')\n\n# Add horizontal line\nax.axhline(y=30, color='black', linestyle='--')\n\n# Set title and labels\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\nax.set_xlabel('Categories')\nax.set_ylabel('FPR@90TPR')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [140, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1]\n\n# Colors for each bar\ncolors = ['#1f77b4', '#aec7e8', '#c7c7c7', '#bcbd22', '#98df8a', '#ffbb78', '#ff9896', '#c5b0d5', '#9edae5', '#c49c94', '#e377c2', '#f7b6d2', '#c7c7c7', '#c5b0d5', '#9edae5', '#c49c94', '#e377c2']\n\n# Create the bar chart\nplt.figure(figsize=(10.0, 5.0))\nbars = plt.barh(categories, values, color=colors)\n\n# Add labels and title\nplt.xlabel('Difference (%)')\nplt.ylabel('Semantic Category')\nplt.title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['5', '10', '20']\ntruthful_recall = [66.3, 61.9, 53.8]\nmisleading_recall = [10.1, 13.6, 13.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Plot bars\nax.bar(categories, truthful_recall, color='navy', label='Truthful Recall')\nax.bar(categories, misleading_recall, bottom=truthful_recall, color='firebrick', label='Misleading Recall')\n\n# Add labels and title\nax.set_xlabel('Misleading:Truthful')\nax.set_ylabel('Score')\nax.set_title('Misleading:Truthful = 2:0')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-80, 80)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = [\n    'PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SCIQ', 'NumSense', 'CoQA', 'ComQA2.0', \n    'ComQC', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', \n    'ComQC2.0', 'ComQC2.0', '"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['LSTM-2/7b/0.1', 'Zephyr-7b/0.1', 'Qwen-7b/0.1', 'Qwen-7b/0.2', 'Qwen-7b/0.3', 'Qwen-7b/0.4', 'Qwen-7b/0.5', 'Qwen-7b/0.6', 'Qwen-7b/0.7', 'Qwen-7b/0.8', 'Qwen-7b/0.9']\nperformance_scores = [48.1, 70.4, 75.6, 76.6, 78.5, 78.6, 78.8, 79.8, 80.0, 80.0, 80.0]\ngptq_scores = [74.4, 75.8, 76.8, 77.0, 78.0, 78.5, 78.8, 79.0, 79.0, 79.0, 79.0]\npubmed_scores = [77.7, 78.0, 78.3, 78.5, 78.8, 79.0, 79.2, 79.2, 79.2, 79.2, 79.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot bars for each category\nax.barh(categories, performance_scores, color='brown', label='Performance Score')\nax.barh(categories, gptq_scores, left=performance_scores, color='darkred', label='GPTQ Score')\nax.barh(categories, pubmed_scores, left=[x + y for x, y in zip(performance_scores, gptq_scores)], color='maroon', label='PubMed Score')\n\n# Add labels and title\nax.set_xlabel('Score (%)')\nax.set_ylabel('Categories')\nax.set_title('Scores by Category')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFIG', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSC', 'AFSL', 'AFSI', 'AFTH', 'AFVC', 'AFVS', 'AFWT', 'DAH', 'IC', 'SS']\ngpt35_turbo = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]\ngpt4 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars for GPT-3.5-Turbo\nbars = ax.bar(categories, gpt35_turbo, color='blue', label='GPT-3.5-Turbo')\n\n# Plot bars for GPT-4\nfor i, (category, value) in enumerate(zip(categories, gpt4)):\n    ax.bar(category, value, bottom=gpt35_turbo[i], color='orange', label='GPT-4' if i == 0 else None)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Non-NLAs')\nax.set_title('Non-NLAs by Categories')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [3, 5, 7, 10]\ny1 = [-4, -6, -8, -10]\ny2 = [-5, -7, -9, -11]\ny3 = [-6, -8, -10, -12]\ny4 = [-7, -9, -11, -13]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot data\nax.plot(x, y1, label='LLAMA-Default', color='#FFA07A')\nax.plot(x, y2, label='LLAMA-HAG', color='#FF6347')\nax.plot(x, y3, label='Vicuna-Default', color='#ADD8E6')\nax.plot(x, y4, label='Vicuna-HAG', color='#87CEEB')\n\n# Set labels and title\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\nax.set_title('Taboo')\n\n# Set y-axis limits\nax.set_ylim(-3.5, 0.5)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nvalues = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(categories, values, color='lightblue')\n\n# Add labels and title\nplt.xlabel('Percentage (%)')\nplt.ylabel('Categories')\nplt.title('Human Study')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), va='bottom', ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['HH', 'Reddit', 'IMDB', 'AVG']\nwin = [45, 50, 50, 38]\ntie = [20, 20, 20, 20]\nlose = [35, 30, 30, 42]\n\n# Bar width\nbar_width = 0.25\n\n# Position of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Create horizontal bars\nax.barh(r1, win, color='brown', edgecolor='grey', height=bar_width, label='Win')\nax.barh(r2, tie, color='orange', edgecolor='grey', height=bar_width, label='Tie')\nax.barh(r3, lose, color='lightpink', edgecolor='grey', height=bar_width, label='Lose')\n\n# Add labels\nax.set_yticks([r + bar_width for r in range(len(categories))], categories)\nax.set_xlabel('Percentage')\nax.set_ylabel('COPR v.s. Golden (Human Eval)')\nax.set_title('COPR v.s. Golden (GPT-4 Eval)')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Accuracy', 'Unfairness']\nmovielens_scores = [35, 10]\ntenrec_scores = [18, 12]\n\n# Bar width\nbar_width = 0.35\n\n# Positions of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plotting\nax1.bar(r1, movielens_scores, color=['purple', 'brown'], width=bar_width, edgecolor='grey', label='Movielens')\nax1.bar(r2, tenrec_scores, color=['purple', 'brown'], width=bar_width, edgecolor='grey', label='Tenrec')\n\n# Adding labels and title\nax1.set_xlabel('Categories')\nax1.set_ylabel('Scores')\nax1.set_title('a\\n(Movielens)')\nax1.set_xticks([r + bar_width / 2 for r in range(len(categories))])\nax1.set_xticklabels(categories)\nax1.legend()\n\nax2.bar(r1, movielens_scores, color=['blue', 'brown'], width=bar_width, edgecolor='grey', label='Movielens')\nax2.bar(r2, tenrec_scores, color=['blue', 'brown'], width=bar_width, edgecolor='grey', label='Tenrec')\n\nax2.set_xlabel('Categories')\nax2.set_ylabel('Scores')\nax2.set_title('b\\n(Tenrec)')\nax2.set_xticks([r + bar_width / 2 for r in range(len(categories))])\nax2.set_xticklabels(categories)\nax2.legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nresolutions = [224, 128, 64, 32]\nimageNet_1k = [29, 29, 29, 29]\nimageNet_F = [29, 29, 29, 29]\npacFNO = [29, 29, 29, 29]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars\nax.bar(resolutions, imageNet_1k, color='steelblue', label='ImageNet-1k')\nax.bar(resolutions, imageNet_F, bottom=imageNet_1k, color='orange', label='ImageNet (F)')\nax.bar(resolutions, pacFNO, bottom=np.array(imageNet_1k) + np.array(imageNet_F), color='tan', label='PAC-FNO')\n\n# Add labels and title\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Acc. (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 80)\n\n# Add horizontal line at 80\nax.axhline(y=80, color='blue', linestyle='--')\n\n# Add vertical line at 32\nax.axvline(x=32, color='black', linestyle='--')\n\n# Add text annotations\nax.text(224, 85, '87%', ha='center', va='bottom', fontsize=10)\nax.text(128, 85, '87%', ha='center', va='bottom', fontsize=10)\nax.text(64, 85, '87%', ha='center', va='bottom', fontsize=10)\nax.text(32, 85, '87%', ha='center', va='bottom', fontsize=10)\n\n# Add text annotations for the arrows\nax.annotate('', xy=(32, 87), xytext=(32, 180),\n             arrowprops=dict(facecolor='red', shrink=0.05))\nax.text(32, 180, '180%', ha='center', va='bottom', fontsize=10)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Level 1', 'Level 2', 'Level 4']\nvalues_tent_pl_coatta = [50.0, 50.0, 50.0]\nvalues_eta = [30.0, 28.0, 22.9]\nvalues_cetta = [22.0, 20.6, 16.8]\n\n# Bar width\nbar_width = 0.25\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot bars\nax.bar(categories, values_tent_pl_coatta, bar_width, label='Tent/PL CoTTA', color='#ffff99')\nax.bar([p + bar_width for p in range(len(categories))], values_eta, bar_width, label='ETA', color='#1f77b4')\nax.bar([p + 2 * bar_width for p in range(len(categories))], values_cetta, bar_width, label='CETTA (ours)', color='#d62728')\n\n# Add labels and title\nax.set_xlabel('# Avg Uploaded Samples')\nax.set_ylabel('')\nax.set_title('')\n\n# Set y-axis limits\nax.set_ylim(0, 55)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nx = np.arange(len(categories))\nvalues = [\n    [39.4, 32.84, 26.82, 22, 0],\n    [35.18, 33.58, 30, 22, 0],\n    [30, 28, 20, 14, 0]\n]\n\n# Colors for each bar\ncolors = ['#FFB3BA', '#C2E6FB', '#D7FCD4']\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\nfor i, value in enumerate(values):\n    ax.barh(x, value, left=np.sum(values[:i], axis=0), color=colors[i], label=f'Category {i+1}')\n\n# Labels and title\nax.set_yticks(x)\nax.set_yticklabels(categories)\nax.set_xlabel('Reward Values')\nax.set_ylabel('Categories')\nax.set_title('Reward Values by Categories')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create horizontal bar chart\nplt.figure(figsize=(12.0, 8.0))\nbars = plt.barh(categories, values, color='navy')\n\n# Add labels and title\nplt.xlabel('Number of Videos by Profession')\nplt.ylabel('')\nplt.title('Number of Videos by Profession')\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    plt.text(width, bar.get_y() + bar.get_height()/2, f'{width}', va='center', ha='left')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Bar width\nbar_width = 0.35\n\n# Position of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\n\n# Create stacked bar chart\nplt.figure(figsize=(6.0, 6.0))\nplt.bar(r1, synthetic_data, color='purple', width=bar_width, edgecolor='grey', label='synthetic data')\nplt.bar(r2, human_authored_data, bottom=synthetic_data, color='orange', width=bar_width, edgecolor='grey', label='human-authored data')\n\n# Add labels and title\nplt.xlabel('synthetic data', fontweight='bold')\nplt.ylabel('human-authored data', fontweight='bold')\nplt.xticks([r + bar_width / 2 for r in range(len(categories))], categories)\nplt.title('Comparison of Categories')\n\n# Show legend\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'tiny', 'small', 'substantial', 'tall', 'short', 'medium', 'long', 'wide', 'narrow', 'high', 'low']\nhuman_distribution = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\nmodel_distribution = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.barh(words, human_distribution, color='lightcoral', edgecolor='black', label='Human Distribution')\nax.barh(words, model_distribution, left=human_distribution, color='lightblue', edgecolor='black', label='Model Distribution')\n\n# Set labels and title\nax.set_xlabel('Probability')\nax.set_ylabel('Word')\nax.set_title('Context: The human body can tolerate only a')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-1, len(words))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Coupe', 'SUV', 'Truck', 'Sedan']\nvalues = [0.3, 0.4, 0.5, 0.2]\n\n# Create a horizontal bar chart\nplt.figure(figsize=(6.0, 2.0))\nbars = plt.barh(categories, values, color=['green', 'blue', 'cyan', 'purple'])\n\n# Add labels and title\nplt.xlabel('Probability of Improvement')\nplt.ylabel('Vehicle Type')\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    plt.text(width, bar.get_y() + bar.get_height()/2, f'{width:.1f}', va='center', ha='left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a horizontal bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.barh(emotions, frequencies, color='lightcoral')\n\n# Add labels and title\nplt.xlabel('Frequency (%)')\nplt.ylabel('Emotion')\nplt.title('Emotional Frequencies')\n\n# Add data labels\nfor bar in bars:\n    plt.text(bar.get_width(), bar.get_y() + bar.get_height()/2,\n             f'{bar.get_width():.1f}', va='center', ha='left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideos = [4000, 5000, 6000, 7000, 8000, 9000]\n\n# Create horizontal bar chart\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nbars = ax.barh(professions, videos, color=['maroon', 'orange', 'khaki', 'lightgreen', 'lightblue', 'cornflowerblue'])\n\n# Add labels and title\nax.set_xlabel('Number of Videos')\nax.set_ylabel('Profession')\nax.set_title('Number of Videos by Profession')\n\n# Add grid lines\nax.xaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nus_values = [30, 25, 20, 15, 10, 5, 0]\nchina_values = [20, 15, 10, 5, 0, 0, 0]\neu_values = [10, 5, 0, 0, 0, 0, 0]\nbrazil_values = [5, 0, 0, 0, 0, 0, 0]\nindia_values = [0, 0, 0, 0, 0, 0, 0]\n\n# Bar width\nbar_width = 0.8\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nax.barh(categories, us_values, color='red', label='US')\nax.barh(categories, china_values, left=us_values, color='steelblue', label='China')\nax.barh(categories, eu_values, left=np.array(us_values) + np.array(china_values), color='lightyellow', label='EU')\nax.barh(categories, brazil_values, left=np.array(us_values) + np.array(china_values) + np.array(eu_values), color='skyblue', label='Brazil')\nax.barh(categories, india_values, left=np.array(us_values) + np.array(china_values) + np.array(eu_values) + np.array(brazil_values), color='lightgreen', label='India')\n\n# Add labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Categories')\nax.set_title('Economic Indicators')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [20, 30, 40, 50, 60, 70]\ngood = [10, 15, 10, 10, 10, 10]\nmoderate = [5, 5, 5, 5, 5, 5]\npoor = [5, 5, 5, 5, 5, 5]\nvery_poor = [5, 5, 5, 5, 5, 5]\n\n# Bar width\nbar_width = 0.8\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.barh(cities, excellent, color='brown', label='Excellent')\nax.barh(cities, good, left=excellent, color='pink', label='Good')\nax.barh(cities, moderate, left=np.array(excellent) + np.array(good), color='lightgrey', label='Moderate')\nax.barh(cities, poor, left=np.array(excellent) + np.array(good) + np.array(moderate), color='lightblue', label='Poor')\nax.barh(cities, very_poor, left=np.array(excellent) + np.array(good) + np.array(moderate) + np.array(poor), color='darkblue', label='Very Poor')\n\n# Add labels and title\nax.set_xlabel('Number of People')\nax.set_ylabel('Cities')\nax.set_title('City Satisfaction Scores')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [0, 0, 0, 0, 0, 0, 0]\n\n# Bar width\nbar_width = 0.35\n\n# Position of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create horizontal bars\nax.barh(r1, positive_differences, color='green', edgecolor='grey', height=bar_width, label='Positive Differences')\nax.barh(r2, negative_differences, color='red', edgecolor='grey', height=bar_width, label='Negative Differences')\n\n# Add labels\nax.set_yticks([r + bar_width / 2 for r in range(len(categories))])\nax.set_yticklabels(categories)\nax.set_xlabel('Difference (%)')\nax.set_ylabel('Semantic Category')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6]\n\n# Create a horizontal bar chart\nplt.figure(figsize=(8.0, 8.0))\nplt.barh(emotions, frequencies, color='lightblue')\n\n# Add labels and title\nplt.xlabel('Frequency (%)')\nplt.ylabel('Emotion')\nplt.title('Emotion Frequency Distribution')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'CaseR', 'GRU4Rec']\nvalues = [-0.7, -15.9, -8.5, -15.9, 19.7]\ncolors = ['#FF6347', '#FF6347', '#FF6347', '#FF6347', '#000000']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nbars = ax.barh(categories, values, color=colors)\n\n# Add grid lines\nax.xaxis.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Set labels and title\nax.set_xlabel('Yelp')\nax.set_ylabel('Categories')\nax.set_title('Bar Chart with Striped Bars')\n\n# Add legend\nax.legend(['Striped'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Internet Penetration', 'Research Investment', 'Smartphone Usage']\ninternet_penetration = [270, 260, 250]\nresearch_investment = [280, 270, 260]\nsmartphone_usage = [290, 280, 270]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nax.barh(categories, internet_penetration, color='darkred', label='Internet Penetration (%)')\nax.barh(categories, research_investment, left=internet_penetration, color='darkgreen', label='Research Investment (%)')\nax.barh(categories, smartphone_usage, left=np.array(internet_penetration) + np.array(research_investment), color='navy', label='Smartphone Usage (%)')\n\n# Add labels and title\nax.set_xlabel('Percentage of GDP')\nax.set_ylabel('Categories')\nax.set_title('Internet Penetration (%)')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Bar width\nbar_width = 0.35\n\n# Position of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create bars\nax.barh(r1, synthetic_data, color='lightblue', edgecolor='black', height=bar_width, label='synthetic data')\nax.barh(r2, human_authored_data, color='lightcoral', edgecolor='black', height=bar_width, label='human-authored data')\n\n# Add labels\nax.set_yticks([r + bar_width / 2 for r in range(len(categories))])\nax.set_yticklabels(categories)\n\n# Add title and labels\nax.set_title('Comparison of Sentiment Categories')\nax.set_xlabel('Sentiment')\nax.set_ylabel('Categories')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\ntime_0 = [0.4, 0.5, 0.3, 0.2, 0.6]\ntime_20 = [0.3, 0.4, 0.2, 0.1, 0.5]\ntime_40 = [0.2, 0.3, 0.1, 0.1, 0.4]\ntime_60 = [0.1, 0.2, 0.1, 0.1, 0.3]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot bars\nax.barh(categories, time_0, color='black', label='Time 0')\nax.barh(categories, time_20, left=time_0, color='blue', label='Time 20')\nax.barh(categories, time_40, left=[sum(x) for x in zip(time_0, time_20)], color='darkblue', label='Time 40')\nax.barh(categories, time_60, left=[sum(x) for x in zip(time_0, time_20, time_40)], color='lightblue', label='Time 60')\n\n# Set labels and title\nax.set_xlabel('Scores')\nax.set_ylabel('Categories')\nax.set_title('Scores by Category Over Time')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-1, len(categories))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nregions = ['West', 'East', 'South', 'North']\nco2 = [40.44, 32.19, 48.23, 65.49]\npm = [11.59, 17.38, 39.63, 32.84]\nso2 = [25.36, 32.15, 36.03, 22.89]\nno2 = [54.46, 56.03, 92.15, 65.49]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot bars\nbars = ax.barh(regions, co2, color='lightblue', label='CO2 (ppm)')\nax.barh(regions, pm, left=co2, color='salmon', label='PM (\u00b5g/m\u00b3)')\nax.barh(regions, so2, left=[i + j for i, j in zip(co2, pm)], color='skyblue', label='SO2 (\u00b5g/m\u00b3)')\nax.barh(regions, no2, left=[i + j + k for i, j, k in zip(co2, pm, so2)], color='lavender', label='NO2 (\u00b5g/m\u00b3)')\n\n# Add labels and title\nax.set_xlabel('Concentration')\nax.set_ylabel('Regions')\nax.set_title('Air Quality Metrics by Region')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-1, len(regions))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores_3_constraint_words = [-2.2, -3.3, -3.2, -3.2]\nscores_5_constraint_words = [-1.9, -2.2, -1.9, -1.9]\nscores_7_constraint_words = [-1.8, -2.2, -1.9, -1.9]\nscores_10_constraint_words = [-1.4, -2.3, -1.1, -1.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.bar(categories, scores_3_constraint_words, color='red', label='3 Constraint Words')\nax.bar(categories, scores_5_constraint_words, bottom=scores_3_constraint_words, color='blue', label='5 Constraint Words')\nax.bar(categories, scores_7_constraint_words, bottom=[sum(x) for x in zip(scores_3_constraint_words, scores_5_constraint_words)], color='orange', label='7 Constraint Words')\nax.bar(categories, scores_10_constraint_words, bottom=[sum(x) for x in zip(scores_3_constraint_words, scores_5_constraint_words, scores_7_constraint_words)], color='lightblue', label='10 Constraint Words')\n\n# Set labels and title\nax.set_xlabel('Score by group and constraint word count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['USA', 'China', 'Germany', 'Brazil']\nyears = [2018, 2019, 2020, 2021]\ngdp_growth_2018 = [-0.5, -0.3, -0.4, -0.2]\ngdp_growth_2019 = [-0.4, -0.2, -0.3, -0.1]\ngdp_growth_2020 = [-0.3, -0.1, -0.2, 0.0]\ngdp_growth_2021 = [-0.2, 0.0, -0.1, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for each year\nbars = []\nfor i in range(len(years)):\n    bar = ax.barh(countries, gdp_growth_2018[i], color='lightcoral', label=str(years[i]))\n    bars.append(bar)\n\n# Add labels and title\nax.set_xlabel('GDP Growth Rate (%)')\nax.set_ylabel('Country')\nax.set_title('Negative GDP Growth Rates by Country and Year')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'LaVIA']\npercentages = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a horizontal bar chart\nplt.figure(figsize=(12.0, 8.0))\nbars = plt.barh(models, percentages, color=['#FF6347', '#FFA500', '#90EE90', '#ADD8E6', '#87CEEB', '#FFD700', '#FF69B4'])\n\n# Add labels and title\nplt.xlabel('Percentage (%)')\nplt.ylabel('Model')\nplt.title('Human Study')\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    plt.text(width, bar.get_y() + bar.get_height()/2, f'{width:.1f}', va='center', ha='left')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\ncars = [50, 30, 50, 70]\nbuses = [15, 20, 40, 80]\nbikes = [30, 30, 30, 30]\npedestrians = [10, 20, 20, 20]\n\n# Stack the data\nstacked_data = np.vstack([cars, buses, bikes, pedestrians])\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the stacked bar chart\nax.bar(categories, cars, label='Cars', color='blue')\nax.bar(categories, buses, bottom=cars, label='Buses', color='cyan')\nax.bar(categories, bikes, bottom=np.add(cars, buses), label='Bikes', color='lightblue')\nax.bar(categories, pedestrians, bottom=np.add(cars, buses, bikes), label='Pedestrians', color='lightgrey')\n\n# Add labels and title\nax.set_ylabel('Values')\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 300)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_a = [80, 60, 40, 20, 0, 0, 0]\nsales_c = [70, 50, 30, 10, 0, 0, 0]\nsales_e = [60, 40, 20, 0, 0, 0, 0]\nsales_g = [50, 30, 10, 0, 0, 0, 0]\n\n# Stack the data\nsales = np.array([sales_a, sales_c, sales_e, sales_g])\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Create the stacked bar chart\nax.bar(categories, sales[0], color='white', edgecolor='black')\nax.bar(categories, sales[1], bottom=sales[0], color='#FFA500', edgecolor='black')\nax.bar(categories, sales[2], bottom=sales[0] + sales[1], color='#FF4500', edgecolor='black')\nax.bar(categories, sales[3], bottom=sales[0] + sales[1] + sales[2], color='#FFD700', edgecolor='black')\n\n# Annotate each bar with its value\nfor i, category in enumerate(categories):\n    ax.text(i, sum(sales[:, i]) / 2, f'{sum(sales[:, i]):.0f}', ha='center', va='center', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Product Categories')\nax.set_ylabel('Sales Units')\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Add legend\nax.legend(['Product A Sales', 'Product C Sales', 'Product E Sales', 'Product G Sales'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [84.3, 9.12, 37.9]\nobserved_fgt = [9.44, -9.12, -3.67]\nfeature_embedding_distance = [0.83, 0.6, 0.11]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars for each category\nax.bar(categories, probing_fgt, color='brown', label='Probing FGT')\nax.bar(categories, observed_fgt, bottom=probing_fgt, color='tan', label='Observed FGT')\nax.bar(categories, feature_embedding_distance, bottom=[sum(x) for x in zip(probing_fgt, observed_fgt)], color='white', edgecolor='black', label='Feature Embedding Distance')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Feature Embedding Distance (%)')\nax.set_title('Feature Embedding Distance')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-100, 100)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '2', '3', '4', '5', '6']\nscores_1 = [10, 10, 8, 8, 10, 10]\nscores_2 = [8, 8, 8, 8, 6, 8]\nscores_3 = [12, 12, 12, 12, 12, 12]\nscores_4 = [15, 15, 15, 15, 15, 15]\nscores_5 = [7, 7, 7, 7, 7, 7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nax.barh(categories, scores_1, color='darkgreen', label='Score 1')\nax.barh(categories, scores_2, left=scores_1, color='lightgreen', label='Score 2')\nax.barh(categories, scores_3, left=np.array(scores_1) + np.array(scores_2), color='mediumseagreen', label='Score 3')\nax.barh(categories, scores_4, left=np.array(scores_1) + np.array(scores_2) + np.array(scores_3), color='paleturquoise', label='Score 4')\nax.barh(categories, scores_5, left=np.array(scores_1) + np.array(scores_2) + np.array(scores_3) + np.array(scores_4), color='lightcyan', label='Score 5')\n\n# Add labels and title\nax.set_xlabel('Scores')\nax.set_ylabel('Human Annotator')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-1, len(categories))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['coreutils', 'gizip', 'scp', 'libq', 'mcf', 'omnet', 'perl']\nregopt = [100, 90, 80, 70, 60, 50, 40]\nbiopt = [80, 70, 60, 50, 40, 30, 20]\nloopopt = [60, 50, 40, 30, 20, 10, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.barh(categories, regopt, color='seagreen', label='RegOpt')\nax.barh(categories, biopt, left=regopt, color='khaki', label='BIOpt')\nax.barh(categories, loopopt, left=np.array(regopt) + np.array(biopt), color='steelblue', label='LoopOpt')\n\n# Add labels and title\nax.set_xlabel('Percentage')\nax.set_ylabel('Categories')\nax.set_title('Comparison of Options')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, 0.7]\ncolors = ['#1f77b4', '#d62728', '#e377c2', '#7f7f7f', '#2ca02c']\n\n# Create the bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(models, improvement, color=colors)\n\n# Add labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Improvement [%]')\nax.set_title('Model Performance Improvement by Language')\n\n# Add language labels on the right side of the plot\nax.set_yticks([])\nax.set_yticklabels([])\nax.yaxis.set_label_position(\"right\")\nax.set_ylabel('Language', rotation=270, labelpad=20)\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom', ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nquarters = [1, 2, 3, 4, 5]\ndow_jones = [0.5, 1.5, 2.2, 3.9, 4.6]\nnasdaq = [-0.8, -0.6, -0.4, -0.8, -1.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for Dow Jones Index\nax.bar(quarters, dow_jones, color='seagreen', label='Dow Jones Index')\n\n# Plot bars for Nasdaq Index\nax.bar(quarters, nasdaq, bottom=dow_jones, color='darkorange', label='Nasdaq Index')\n\n# Set labels and title\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\nax.set_title('Dow Jones Index vs Nasdaq Index')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\nvalues_006 = [39.4, 35.18, 32.84, 34.06]\nvalues_008 = [35.18, 34.06, 30.84, 34.06]\nvalues_001 = [34.06, 33.84, 28.0, 34.06]\nvalues_000 = [33.84, 33.6, 24.27, 34.06]\nvalues_0000 = [33.6, 33.4, 20.84, 34.06]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nbars = ax.barh(categories, values_006, color='lightcoral', label=r'$\\lambda=0.06$')\nax.barh(categories, values_008, left=values_006, color='lightyellow', label=r'$\\lambda=0.08$')\nax.barh(categories, values_001, left=np.array(values_006) + np.array(values_008), color='lightseagreen', label=r'$\\lambda=0.01$')\nax.barh(categories, values_000, left=np.array(values_006) + np.array(values_008) + np.array(values_001), color='lightblue', label=r'$\\lambda=0.00$')\nax.barh(categories, values_0000, left=np.array(values_006) + np.array(values_008) + np.array(values_001) + np.array(values_000), color='lightgreen', label=r'$\\lambda=0.000$')\n\n# Add labels and title\nax.set_xlabel('Reward Values')\nax.set_ylabel('Series Labels')\nax.set_title('Categories')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-40, 40)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Misleading:2:0', 'Misleading:3:0', 'Misleading:4:0', 'Misleading:5:0']\ntruthful_recall = [30.1, 34, 43.7, 46.3]\nmisleading_recall = [20, 20, 19.4, 19.4]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot bars\nax.bar(categories, truthful_recall, color='brown', label='Truthful Recall')\nax.bar(categories, misleading_recall, bottom=truthful_recall, color='pink', label='Misleading Recall')\n\n# Add labels and title\nax.set_ylabel('Misleading Recall')\nax.set_title('Truthful:Misleading = 2:0')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-40, 0)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nindustries = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year = [-1200, -1400, -1600, -1800]\nprevious_year = [-1300, -1500, -1700, -1900]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for current year\nbars_current = ax.bar(industries, current_year, color='navy', label='Current Year')\n\n# Plot bars for previous year\nbars_previous = ax.bar(industries, previous_year, bottom=current_year, color='saddlebrown', label='Previous Year')\n\n# Add horizontal lines\nfor i, (c, p) in enumerate(zip(current_year, previous_year)):\n    ax.plot([industries[i], industries[i]], [c, p], 'k--', linewidth=1)\n\n# Set labels and title\nax.set_xlabel('Industry Sectors')\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\nax.set_title('Environmental Impact by Sector')\n\n# Add legend\nax.legend()\n\n# Show grid\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [10, 15, 15, 20, 18]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nbars = plt.bar(cities, temperatures, color='lightblue')\n\n# Add title and labels\nplt.title('Average City Temperatures')\nplt.xlabel('City')\nplt.ylabel('Average Temperature (\u00b0C)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [150, 140, 160, 170]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for 2020 emissions\nax.bar(regions, emissions_2020, color='brown', label='2020 Emissions')\n\n# Plot bars for 2021 emissions\nax.bar(regions, emissions_2021, bottom=emissions_2020, color='steelblue', label='2021 Emissions')\n\n# Set labels and title\nax.set_xlabel('Regions')\nax.set_ylabel('Annual Pollution Emission Reductions')\nax.set_title('Annual Pollution Emission Reductions')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-200, 0)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5']\nresponses = [\n    [26, 10, 17, 10, 10],  # Question 1\n    [32, 10, 15, 10, 10],  # Question 2\n    [26, 22, 29, 35, 21],  # Question 3\n    [37, 12, 15, 33, 29],  # Question 4\n    [40, 14, 13, 15, 21]   # Question 5\n]\n\n# Colors for each response\ncolors = ['#ADD8E6', '#90EE90', '#FFA500', '#FFC0CB', '#D3D3D3']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot each category\nfor i, category in enumerate(categories):\n    ax.barh(category, responses[i], color=colors[i], label=f'Question {i+1}')\n\n# Set labels and title\nax.set_xlabel('Responses (%)')\nax.set_ylabel('Questions')\nax.set_title('Responses to Questions')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 1.0]\n\n# Create the plot\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(x, y, color='lightblue')\n\n# Add horizontal line\nplt.axhline(y=0.8, color='red', linestyle='--')\n\n# Set labels and title\nplt.xlabel('Top-10 super families in training dataset')\nplt.ylabel('Accuracy')\nplt.title('Model Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['3', '5', '7', '9', '10']\nllama_default_scores = [1, 1, 1, 1, 1]\nllama_hag_scores = [1, 1, 1, 1, 1]\nvicuna_default_scores = [1, 1, 1, 1, 1]\nvicuna_hag_scores = [1, 1, 1, 1, 1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nax.bar(categories, llama_default_scores, color='lightseagreen', label='LLAMA-Default')\nax.bar(categories, llama_hag_scores, bottom=llama_default_scores, color='orange', label='LLAMA-HAG')\nax.bar(categories, vicuna_default_scores, bottom=np.array(llama_default_scores) + np.array(llama_hag_scores), color='lightblue', label='Vicuna-Default')\nax.bar(categories, vicuna_hag_scores, bottom=np.array(llama_default_scores) + np.array(llama_hag_scores) + np.array(vicuna_default_scores), color='brown', label='Vicuna-HAG')\n\n# Add labels and title\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\nax.set_title('Taboo')\nax.set_ylim(-2, 2)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\nca_recall = [45, 34, 40, 20]\nmisleading_recall = [30.1, 34, 43.7, 20]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot Ca Recall data\nax1.bar(categories, ca_recall, color='blue', label='CaA Recall')\nax1.set_ylabel('Misleading Recall', color='red')\nax1.set_ylim(0, 60)\nax1.tick_params(axis='y', labelcolor='red')\n\n# Create a second y-axis for CaB Recall\nax2 = ax1.twinx()\nax2.bar(categories, misleading_recall, color='green', alpha=0.5, label='CaB Recall')\nax2.set_ylim(0, 60)\nax2.tick_params(axis='y', labelcolor='black')\n\n# Add labels and title\nplt.title('Truthful: Misleading Recall = 2:0')\nax1.set_xlabel('Truthful')\n\n# Add legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Sedan', 'Coupe', 'Truck', 'SUV', 'Convertible']\nvalues = [10, 15, 20, 25, 30]\n\n# Create a horizontal bar chart\nplt.figure(figsize=(6.0, 6.0))\nbars = plt.barh(categories, values, color=['#FFC0CB', '#ADD8E6', '#ADD8E6', '#ADD8E6', '#008000'])\n\n# Add labels and title\nplt.xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.ylabel('Category')\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    plt.text(width, bar.get_y() + bar.get_height()/2, f'{width:.0f}', va='center', ha='left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nvalues1 = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nvalues2 = [7.1, 7.0, 6.5, 6.5, 5.5, 5.0, 4.6, 5.0, 3.0, 2.6]\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the first set of data\nbars1 = ax1.bar(emotions, values1, color='pink', label='Frequency Metric 1')\n\n# Create a second y-axis\nax2 = ax1.twinx()\n\n# Plot the second set of data\nbars2 = ax2.bar(emotions, values2, color='lightblue', alpha=0.8, label='Frequency Metric 2')\n\n# Set labels and title\nax1.set_xlabel('Emotion')\nax1.set_ylabel('Frequency Metric 1 (%)', color='black')\nax2.set_ylabel('Frequency Metric 2 (%)', color='black')\nplt.title('Emotion vs Frequency Metrics')\n\n# Add legend\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores_time_0 = [0.3, 0.4, 0.5, 0.6, 0.7]\nscores_time_20 = [0.4, 0.5, 0.6, 0.7, 0.8]\nscores_time_40 = [0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nbars = ax.barh(categories, scores_time_0, color='lightblue', label='Score at Time 0')\nax.barh(categories, scores_time_20, left=scores_time_0, color='orange', label='Score at Time 20')\nax.barh(categories, scores_time_40, left=np.array(scores_time_0) + np.array(scores_time_20), color='red', label='Score at Time 40')\n\n# Add labels and title\nax.set_xlabel('Scores')\nax.set_ylabel('Movies')\nax.set_title('Movie Scores at Different Times')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\ntotal_energy = [1600, 1500, 1400, 1300, 1200, 1100, 1000, 900]\nelectricity_production = [1000, 900, 800, 700, 600, 500, 400, 300]\nrenewable_energy_ratio = [10, 15, 20, 25, 30, 35, 40, 45]\nelectricity_consumption = [100, 150, 200, 250, 300, 350, 400, 450]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot bars for each country\nax.barh(countries, total_energy, color='red', label='Total Energy Consumption (10^2 PJ)')\nax.barh(countries, electricity_production, left=total_energy, color='blue', label='Electricity Production (10^1 TWh)')\nax.barh(countries, renewable_energy_ratio, left=[sum(x) for x in zip(total_energy, electricity_production)], color='yellow', label='Renewable Energy Ratio (%)')\nax.barh(countries, electricity_consumption, left=[sum(x) for x in zip(total_energy, electricity_production, renewable_energy_ratio)], color='green', label='Electricity Consumption (10^1 TWh)')\n\n# Set labels and title\nax.set_xlabel('Energy (TWh)')\nax.set_ylabel('Country')\nax.set_title('Total Energy Consumption (10^2 PJ)\\nElectricity Production (10^1 TWh)\\nRenewable Energy Ratio (%)\\nElectricity Consumption (10^1 TWh)')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 24, 31, 8, 8]\nhuman_authored_data = [9, 16, 15, 11, 16, 16, 16]\n\n# Bar width\nbar_width = 0.35\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for synthetic data\nsynthetic_bars = ax.bar(categories, synthetic_data, bar_width, label='synthetic data', color=['blue', 'green', 'red', 'orange', 'purple', 'brown', 'yellow'])\n\n# Plot bars for human-authored data\nhuman_authored_bars = ax.bar(categories, human_authored_data, bar_width, bottom=synthetic_data, label='human-authored data', color=['cyan', 'magenta', 'lime', 'pink', 'grey', 'olive', 'khaki'])\n\n# Add labels and title\nax.set_xlabel('Original')\nax.set_ylabel('Percentage')\nax.set_title('Original vs New')\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-20, 20)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Beauty', 'Yelp', 'More']\nsubcategories = [-5, -4.1, -3, -2, -1, 0]\nvalues = [\n    [5.1, 3.0, 2.9, 2.8, 2.7, 2.6],\n    [6.0, 4.8, 4.4, 4.0, 3.6, 3.1],\n    [5.9, 5.7, 5.5, 5.3, 5.1, 4.9]\n]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot bars\nbar_width = 0.8\nx = np.arange(len(categories))\nfor i, value in enumerate(values):\n    ax.barh(x + i * bar_width, value, height=bar_width, label=subcategories[i], edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Percentage')\nax.set_ylabel('Categories')\nax.set_title('MovieLens-1M')\nax.set_yticks(x + bar_width * (len(values) - 1) / 2)\nax.set_yticklabels(categories)\n\n# Add legend\nax.legend(title='Subcategories')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\nvicuna_hag_scores = [-3.2, -3.3, -2.3, -2.2]\nvicuna_default_scores = [-3.3, -3.3, -2.2, -2.2]\nllama_hag_scores = [-3.2, -3.3, -2.3, -2.2]\nllama_default_scores = [-3.2, -3.3, -2.3, -2.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot bars\nax.barh(categories, vicuna_hag_scores, color='red', label='Vicuna-HAG')\nax.barh(categories, vicuna_default_scores, left=vicuna_hag_scores, color='green', label='Vicuna-Default')\nax.barh(categories, llama_hag_scores, left=np.array(vicuna_hag_scores) + np.array(vicuna_default_scores), color='purple', label='LLAMA-HAG')\nax.barh(categories, llama_default_scores, left=np.array(vicuna_hag_scores) + np.array(vicuna_default_scores) + np.array(llama_hag_scores), color='blue', label='LLAMA-Default')\n\n# Set labels and title\nax.set_xlabel('Score')\nax.set_ylabel('Constraint Words')\nax.set_title('Scores by group and constraint word count')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\ntrain_data = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\nrecall_data = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\naccuracy_data = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot data\nax.bar(categories, train_data, color='purple', label='Train')\nax.bar(categories, recall_data, bottom=train_data, color='pink', label='Recall')\nax.bar(categories, accuracy_data, bottom=[sum(x) for x in zip(train_data, recall_data)], color='blue', label='Accuracy')\n\n# Add horizontal line\nax.axhline(y=0.5, color='red', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Top-10 super families in training dataset')\nax.set_ylabel('Scores')\nax.set_title('Scores by Super Family')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nmanual_mapping = [80, 70, 60, 50, 40]\nllm_revision_wcot = [90, 80, 70, 60, 50]\nllm_revision_wcot = [100, 90, 80, 70, 60]\nverifner = [20, 30, 40, 50, 60]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot bars\nax.bar(categories, manual_mapping, color='pink', label='Manual Mapping')\nax.bar(categories, llm_revision_wcot, bottom=manual_mapping, color='orange', label='LLM-revision w/CoT')\nax.bar(categories, llm_revision_wcot, bottom=np.array(manual_mapping) + np.array(llm_revision_wcot), color='lightgreen', label='LLM-revision')\n\n# Add labels and title\nax.set_ylabel('Error correction rate (%)')\nax.set_title('GENIA')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscore_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscore_b = [15, 10, 5, 15, 10, 15, 10]\n\n# Create a figure and axis with specified size\nfig, ax1 = plt.subplots(figsize=(12.0, 8.0))\n\n# Plotting Score A\nax1.bar(models, score_a, color='brown', label='Score A')\nax1.set_ylabel('Score A (%)', color='brown')\nax1.tick_params(axis='y', labelcolor='brown')\n\n# Create a second y-axis for Score B\nax2 = ax1.twinx()\nax2.bar(models, score_b, color='pink', alpha=0.7, label='Score B')\nax2.set_ylabel('Score B (%)', color='pink')\nax2.tick_params(axis='y', labelcolor='pink')\n\n# Set title and labels\nplt.title('Human Study')\nplt.xlabel('Model')\n\n# Add legend\nfig.legend(loc=\"upper right\", bbox_to_anchor=(1,1), bbox_transform=ax1.transAxes)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nphemes = ['GCN', 'RvNN', 'Hyphen', 'GET']\ndemocrat_scores = [75, 75, 75, 75]\nmixed_scores = [80, 80, 80, 80]\nrepublican_scores = [85, 85, 85, 85]\n\n# Create a figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for Pheme\nbars1 = ax1.barh(phemes, democrat_scores, color='blue', label='Democratic')\nbars2 = ax1.barh(phemes, mixed_scores, left=democrat_scores, color='orange', label='Mixed')\nbars3 = ax1.barh(phemes, republican_scores, left=[sum(x) for x in zip(democrat_scores, mixed_scores)], color='red', label='Republican')\n\n# Add labels and title\nax1.set_xlabel('Macro F1-score')\nax1.set_ylabel('Pheme')\nax1.set_title('Pheme')\nax1.legend()\n\n# Set y-axis limits\nax1.set_ylim(-0.5, len(phemes) - 0.5)\n\n# Plot for LLM-mis\nbars4 = ax2.barh(phemes, democrat_scores, color='blue', label='Democratic')\nbars5 = ax2.barh(phemes, mixed_scores, left=democrat_scores, color='orange', label='Mixed')\nbars6 = ax2.barh(phemes, republican_scores, left=[sum(x) for x in zip(democrat_scores, mixed_scores)], color='red', label='Republican')\n\n# Add labels and title\nax2.set_xlabel('Macro F1-score')\nax2.set_ylabel('LLM-mis')\nax2.legend()\n\n# Set y-axis limits\nax2.set_ylim(-0.5, len(phemes) - 0.5)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['human', 'gpt4', 'gpt4-cot']\nO1 = [50, 30, 20]\nT1 = [100, 70, 50]\nP1 = [150, 100, 80]\n\n# Bar width\nbar_width = 0.25\n\n# Positions of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plotting the bars\nax.bar(r1, O1, color='lightgreen', width=bar_width, edgecolor='grey', label='O1')\nax.bar(r2, T1, color='salmon', width=bar_width, edgecolor='grey', label='T1')\nax.bar(r3, P1, color='orange', width=bar_width, edgecolor='grey', label='P1')\n\n# Adding labels and title\nax.set_xlabel('Role')\nax.set_ylabel('Count')\nax.set_title('Resonance Preference Plot for rich context')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_values = [20.4, 23.8, 14.3, 16.7, 7.1]\nbrainwave_values = [29.6, 28.1, 14.3, 38.1, 7.1]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot Effort data\nax.barh(categories, effort_values, color='red', label='Effort')\n\n# Plot Brainwave data\nax.barh(categories, brainwave_values, left=effort_values, color='green', label='Brainwave')\n\n# Add labels and title\nax.set_xlabel('Percentage')\nax.set_ylabel('Categories')\nax.set_title('Eye Movement')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nx = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0])\ny_ours = np.array([-10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85])\ny_saliency = np.array([-10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85])\n\n# Data for the second plot\nx_rotation = np.array([-150, -120, -90, -60, -30, 0, 30, 60, 90, 120])\ny_ours_rotation = np.array([50, 40, 30, 20, 10, 0, -10, -20, -30, -40])\ny_saliency_rotation = np.array([40, 30, 20, 10, 0, -10, -20, -30, -40, -50])\n\n# Create the figure and subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10.0, 6.0))\n\n# Plot 1\nbars_ours = ax1.bar(x, y_ours, color='red', label='Ours')\nbars_saliency = ax1.bar(x, y_saliency, color='blue', alpha=0.5, label='Saliency-based Sampling')\n\nax1.set_title('Rate of Gain Change(%)')\nax1.set_xlabel('Brightness')\nax1.set_ylabel('Rate of Gain Change(%)')\nax1.set_ylim(-50, 0)\nax1.set_xticks(x)\nax1.set_xticklabels(['0.5', '0.6', '0.7', '0.8', '0.9', '1.0', '1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7', '1.8', '1.9', '2.0'])\nax1.legend()\n\n# Plot 2\nbars_ours_rotation = ax2.bar(x_rotation, y_ours_rotation, color='red', label='Ours')\nbars_saliency_rotation = ax2.bar(x_rotation, y_saliency_rotation, color='blue', alpha=0.5, label='Saliency-based Sampling')\n\nax2.set_title('Rate of Gain Change(%)')\nax2.set_xlabel('Rotation Angle (\u00b0)')\nax2.set_ylabel('Rate of Gain Change(%)')\nax2.set_ylim(-20, 0)\nax2.set_xticks(x_rotation)\nax2.set_xticklabels(['-150', '-120', '-90', '-60', '-30', '0', '30', '60', '90', '120'])\nax2.legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nen_scores = [-1.0, 0.3, 3.4, -3.3, -2.7]\nde_scores = [3.5, 2.3, 0.3, -3.0, -2.0]\nfr_scores = [0.0, 0.0, 0.0, 0.0, 0.0]\nit_scores = [0.0, 0.0, 0.0, 0.0, 0.0]\nes_scores = [0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.barh(models, en_scores, color='navy', label='EN')\nax.barh(models, de_scores, left=en_scores, color='maroon', label='DE')\nax.barh(models, fr_scores, left=[sum(x) for x in zip(en_scores, de_scores)], color='orange', label='FR')\nax.barh(models, it_scores, left=[sum(x) for x in zip(en_scores, de_scores, fr_scores)], color='gold', label='IT')\nax.barh(models, es_scores, left=[sum(x) for x in zip(en_scores, de_scores, fr_scores, it_scores)], color='green', label='ES')\n\n# Add labels and title\nax.set_xlabel('Improvement [%]')\nax.set_ylabel('Model with Language')\nax.set_title('Model Performance Improvement by Language')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-4, 4)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Random', 'Ours', 'SOTA']\nrandom_values = [66.3, 61.9, 53.8]\nours_values = [49.3, 41.7, 40.6]\nsota_values = [36.3, 31.5, 41.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot bars\nbars_random = ax.bar(categories, random_values, color='blue', label='Random')\nbars_ours = ax.bar(categories, ours_values, bottom=random_values, color='red', label='Ours')\nbars_sota = ax.bar(categories, sota_values, bottom=[sum(x) for x in zip(random_values, ours_values)], color='brown', label='SOTA')\n\n# Add labels and title\nax.set_ylabel('Misleading (%)')\nax.set_title('Truthful: Misleading = 2:0')\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-80, 80)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '2', '3', '4', '5', '6']\nannotators = ['Human Labeling and Agreement Bias Checking 1', 'Human Labeling and Agreement Bias Checking 2', 'Human Labeling and Agreement Bias Checking 3', 'Human Labeling and Agreement Bias Checking 4']\nscores = [\n    [50, 40, 30, 20, 10, 0],\n    [60, 50, 40, 30, 20, 10],\n    [60, 50, 40, 30, 20, 10],\n    [60, 50, 40, 30, 20, 10]\n]\n\n# Colors for each annotator\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot each annotator's data\nfor ax, annotator, score_data in zip(axes.flatten(), annotators, scores):\n    ax.bar(categories, score_data, color=colors[annotators.index(annotator)], label=annotator)\n    ax.set_title(f'{annotator} Score')\n    ax.set_xlabel('Human Annotator')\n    ax.set_ylabel('Scores')\n    ax.set_ylim(0, 60)\n    ax.legend()\n\n# Add a main title\nplt.suptitle('Human Labeling and Agreement Bias Checking')\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_scores = [54.9, 71.5, 79.2, 60.3, 54.5, 42.4, 7.1, 8.7, 2.0]\nbeam_scores = [38.3, 79.2, 60.3, 56.8, 92.6, 89.2, 83.3, 96.4, 83.3]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for contrastive search scores\nax.bar(models, contrastive_scores, color='lightseagreen', label='Contrastive Search')\n\n# Plot bars for beam search scores\nax.bar(models, beam_scores, bottom=contrastive_scores, color='saddlebrown', label='Beam Search')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Performance Comparison by Model')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 100)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ndata1 = [150.0, 180.0, 75.0, 90.0, 80.0]\ndata2 = [2.5, 2.0, 1.5, 2.0, 2.8]\n\n# Bar width\nbar_width = 0.35\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot bars for Dataset 1\nbars1 = ax.bar(categories, data1, bar_width, label='Dataset 1', color='orange')\n\n# Plot bars for Dataset 2\nbars2 = ax.bar([i + bar_width for i in range(len(categories))], data2, bar_width, label='Dataset 2', color='lightblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Dataset 1')\nax.set_xticks([i + bar_width / 2 for i in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['neutral', 'yellow high', 'yellow low', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'orange high', 'orange low']\nvalues = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plotting the data\nfor i, category in enumerate(categories):\n    ax.barh(category, values[i], color='black')\n\n# Set labels and title\nax.set_xlabel('SAM rating')\nax.set_ylabel('color')\nax.set_title('Dominance')\n\n# Set x-axis limits\nax.set_xlim(1, 9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Gaming Duration', 'Exercise Duration', 'Reading Duration', 'Music Playtime']\nx = np.array([20, 30, 40, 50, 60, 70, 80, 90])\ny = np.array([10, 15, 20, 25, 30, 35, 40, 45])\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot data\nax.plot(x, y, 'o-', color='teal')\n\n# Set labels and title\nax.set_xlabel('Duration (minutes)')\nax.set_ylabel('Duration (minutes)')\nax.set_title('Daily Activity Durations')\n\n# Add categories as annotations\nfor i, category in enumerate(categories):\n    ax.annotate(category, xy=(x[i], y[i]), xytext=(-20, 10),\n                textcoords='offset points', ha='right', va='bottom',\n                bbox=dict(boxstyle='round,pad=0.5', fc='white', ec='black', lw=1),\n                arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))\n\n# Set limits\nax.set_xlim(20, 90)\nax.set_ylim(10, 50)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Llama-70b (T2TT)', 'Llama-70b (S2TT)']\nbleu_scores = [18, 20]\nblessing_scores = [19, 18]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot horizontal bars\nax.barh(categories, bleu_scores, color='black', label='BLEU')\nax.barh(categories, blessing_scores, left=bleu_scores, color='orange', label='BLESU')\n\n# Add labels and title\nax.set_xlabel('Score')\nax.set_ylabel('Model')\nax.set_title('Comparison of BLEU and BLESU Scores')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 25)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['AlphaBeta', 'z+', 'Gamma(\u03b3=0.05)', 'Gamma(\u03b3=0.1)', 'Gamma(\u03b3=0.25)']\nx_values = [30, 40, 50, 60, 70]\ny_values = [40, 45, 50, 55, 60]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(categories, y_values, color='white', edgecolor='black')\n\n# Add horizontal lines for each category\nfor i, (category, y) in enumerate(zip(categories, y_values)):\n    ax.plot([category, category], [y, y], color='orange', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Gamma(\u03b3)')\nax.set_ylabel('(t) \u0394AF')\nax.set_title('Plot Title')\n\n# Set y-axis limits\nax.set_ylim(25, 65)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LOP+PoT']\nvalues = [825, 875, 850, 830, 840]\nerrors = [10, 10, 10, 10, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plotting the data\nax.errorbar(categories, values, yerr=errors, fmt='o-', capsize=5, color='teal')\n\n# Setting labels and title\nax.set_xlabel('Execution Accuracy')\nax.set_ylabel('Model')\nax.set_title('Execution Accuracy of Models')\n\n# Set y-axis limits\nax.set_ylim(750, 900)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\nregion_accuracy = [0.88, 0.87, 0.83]\nslice_mean_error = [9.00, 9.33, 9.00]\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot region accuracy\nax1.barh(categories, region_accuracy, color='lightgrey', edgecolor='black', label='Region Classification Accuracy')\nax1.set_xlabel('Region Classification Accuracy')\nax1.set_ylabel('LMA Region Classification Accuracy')\n\n# Create second y-axis for slice mean error\nax2 = ax1.twinx()\nax2.barh(categories, slice_mean_error, color='lightgreen', edgecolor='black', alpha=0.6, label='Slice Mean Error (ms)')\nax2.set_ylabel('Slice Mean Error (ms)')\n\n# Set limits\nax1.set_xlim(0.6, 1.0)\nax2.set_ylim(5.0, 22.5)\n\n# Add legend\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Title\nplt.title('Region Classification Accuracy')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['w/o att', 'w/o DP', '1xQ', '20xQ', '200xQ']\nz_scores = [5, 10, 15, 20, 25]\nthreshold = 15\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot horizontal bars\nbars = ax.barh(categories, z_scores, color=['blue', 'orange', 'green', 'red', 'purple'])\n\n# Add threshold line\nax.axhline(y=threshold, color='red', linestyle='--')\n\n# Add labels and title\nax.set_xlabel('Z-Score')\nax.set_ylabel('Categories')\nax.set_title('Z-Score Distribution with Threshold')\n\n# Add legend\nax.legend(['Threshold'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [\n    [1, 0, 0, 0, 0, 0],  # REM\n    [0, 1, 0, 0, 0, 0],  # No POP\n    [0, 0, 1, 0, 0, 0],  # Separate M emb.\n    [0, 0, 0, 1, 0, 0],  # 4 x 4 tokenizer\n    [0, 0, 0, 0, 1, 0],  # No latent space C\n    [0, 0, 0, 0, 0, 1]   # C w/o action inputs\n]\n\n# Colors for each category\ncolors = ['#1f77b4', '#aec7e8', '#2ca02c', '#ffbb78', '#98df8a', '#d62728']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot bars\nfor i, value in enumerate(values):\n    ax.bar(categories, value, color=colors[i], label=categories[i])\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Mean')\nax.set_title('Mean')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\nvalues = [\n    [50, 60, 70, 80, 90, 100, 110, 120, 130, 140],\n    [40, 50, 60, 70, 80, 90, 100, 110, 120, 130],\n    [30, 40, 50, 60, 70, 80, 90, 100, 110, 120],\n    [20, 30, 40, 50, 60, 70, 80, 90, 100, 110],\n    [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n    [0, 10, 20, 30, 40, 50, 60, 70, 80, 90],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot each category\nfor i, value in enumerate(values):\n    ax.boxplot(value, positions=[i], widths=0.5, patch_artist=True, boxprops=dict(facecolor='lightblue', edgecolor='black'), medianprops=dict(color='orange'))\n\n# Add data points\nfor i, value in enumerate(values):\n    ax.plot(i, np.mean(value), 'ro')\n\n# Set labels and title\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\nax.set_ylabel('Value')\nax.set_title('Boxplot with Data Points')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['AR', 'LSTMAlpha', 'LSTMBeta', 'AE', 'EncDecAD', 'SRCNN', 'AnomalyTransformer', 'TimesNet', 'Donut', 'TFAD']\nvalues = [\n    [0.8, 0.6, 0.4, 0.2],\n    [0.9, 0.7, 0.5, 0.3],\n    [0.85, 0.65, 0.45, 0.25],\n    [0.7, 0.5, 0.3, 0.1],\n    [0.6, 0.4, 0.2, 0.0],\n    [0.75, 0.55, 0.35, 0.15],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.9, 0.7, 0.5, 0.3],\n    [0.85, 0.65, 0.45, 0.25],\n    [0.7, 0.5, 0.3, 0.1]\n]\n\n# Colors for each category\ncolors = [\n    '#8B0000', '#FFA500', '#FFA500', '#FFFF00', '#90EE90', '#90EE90', '#ADD8E6', '#ADD8E6', '#00008B', '#00008B'\n]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plotting the bar chart\nfor i, (category, value) in enumerate(zip(categories, values)):\n    ax.barh(category, value, color=colors[i], label=category)\n\n# Adding labels and title\nax.set_xlabel('one by one')\nax.set_ylabel('all in one')\nax.set_title('Comparison of Models')\n\n# Adding legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Bert Base', 'MacBERT', 'English HLM']\neme_sents = [np.random.normal(0.8, 0.2, 50), np.random.normal(0.9, 0.2, 50), np.random.normal(0.7, 0.2, 50)]\nneutral_sents = [np.random.normal(0.8, 0.2, 50), np.random.normal(0.9, 0.2, 50), np.random.normal(0.7, 0.2, 50)]\nme_sents = [np.random.normal(0.8, 0.2, 50), np.random.normal(0.9, 0.2, 50), np.random.normal(0.7, 0.2, 50)]\n\n# Create figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot each category\nfor ax, category, eme, neutral, me in zip(axes, categories, eme_sents, neutral_sents, me_sents):\n    ax.scatter(eme, neutral, color='black')\n    ax.scatter(eme, me, color='black')\n    ax.set_title(category)\n    ax.set_xlabel('EME sentences')\n    ax.set_ylabel('ME sentences')\n    ax.set_ylim(0, 1.2)\n    ax.set_xlim(0, 1.2)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Our Model', 'NTM+CL']\nintrusion_data = [np.array([2.5, 2.7, 2.9]), np.array([2.4, 2.6, 2.8])]\nratings_data = [np.array([2.5, 2.7, 2.9]), np.array([2.4, 2.6, 2.8])]\n\n# Create subplots\nfig, axes = plt.subplots(1, 4, figsize=(8.0, 6.0), sharey=True)\n\n# Plot Intrusion data\nfor i, ax in enumerate(axes):\n    ax.boxplot(intrusion_data[i], positions=[i], patch_artist=True, boxprops=dict(facecolor='lightgreen'))\n    ax.set_title('Intrusion')\n    ax.set_ylabel('Intrusion')\n\n# Plot Ratings data\nfor i, ax in enumerate(axes[2:], start=2):\n    ax.boxplot(ratings_data[i-2], positions=[i], patch_artist=True, boxprops=dict(facecolor='lightcoral'))\n    ax.set_title('Ratings')\n\n# Set x-axis labels\nfor ax in axes:\n    ax.set_xticks([0, 1])\n    ax.set_xticklabels(categories)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['target', 'control']\ngroups = ['Group', 'Group']\ncorrect_response_ratio = [0.8, 0.7]\nreaction_time = [1.2, 1.1]\ncorrect_word_reaction_time = [6, 5]\nlexical_decision = [0.9, 0.8]\ndigit_span = [8, 7]\n\n# Create subplots\nfig, axes = plt.subplots(1, 4, figsize=(10.0, 5.0), sharey=True)\n\n# Plot 1: Correct Word Reaction Time\naxes[0].boxplot(correct_word_reaction_time, positions=np.arange(len(categories)), widths=0.6)\naxes[0].set_title('Correct word reaction time')\naxes[0].set_ylabel('Correct word reaction time (s)')\naxes[0].set_xticks(np.arange(len(categories)))\naxes[0].set_xticklabels(categories)\naxes[0].grid(True)\n\n# Plot 2: Lexical Decision\naxes[1].boxplot(lexical_decision, positions=np.arange(len(categories)), widths=0.6)\naxes[1].set_title('Lexical decision')\naxes[1].set_ylabel('Lexical decision (s)')\naxes[1].set_xticks(np.arange(len(categories)))\naxes[1].set_xticklabels(categories)\naxes[1].grid(True)\n\n# Plot 3: Reaction Time\naxes[2].boxplot(reaction_time, positions=np.arange(len(categories)), widths=0.6)\naxes[2].set_title('Reaction time')\naxes[2].set_ylabel('Reaction time (s)')\naxes[2].set_xticks(np.arange(len(categories)))\naxes[2].set_xticklabels(categories)\naxes[2].grid(True)\n\n# Plot 4: Time per tap\naxes[3].boxplot(digit_span, positions=np.arange(len(categories)), widths=0.6)\naxes[3].set_title('Time per tap')\naxes[3].set_ylabel('Time per tap (s)')\naxes[3].set_xticks(np.arange(len(categories)))\naxes[3].set_xticklabels(categories)\naxes[3].grid(True)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['NBP', 'IBP', 'SSP', 'BG']\nvalues = [\n    [20, 30],  # NBP\n    [10, 40],  # IBP\n    [15, 25],  # SSP\n    [30, 50]   # BG\n]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot horizontal bar chart\nax.barh(categories, [sum(v) for v in values], color=['purple', 'green', 'blue', 'brown'])\n\n# Add labels and title\nax.set_xlabel('Prediction Accuracy vD1')\nax.set_ylabel('Methods')\nax.set_title('Methods')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['50', '100', '150', '200', '350']\nvalues = [0.04, 0.04, 0.02, 0.02, 0.06]\nerrors = [0.02, 0.02, 0.01, 0.01, 0.03]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot bars\nbars = ax.bar(categories, values, yerr=errors, capsize=5, color='blue')\n\n# Add error bars\nfor bar, error in zip(bars, errors):\n    ax.errorbar(bar.get_x() + bar.get_width()/2, bar.get_height(), yerr=error, fmt='o', color='black')\n\n# Set labels and title\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\nax.set_title('Reward vs Search Depth')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\nvalues = [65.1, 55.7, 38.1, 29.5]\nerrors = [10, 10, 10, 10]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plotting\nbars = ax.barh(categories, values, xerr=errors, color=['#FFC0CB', '#F0E68C', '#90EE90', '#ADD8E6'], edgecolor='black')\n\n# Adding labels and title\nax.set_xlabel('Duration (minutes)')\nax.set_ylabel('Activity')\nax.set_title('Daily Activity Durations')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment']\nmean_values = [18, 20, 22, 24, 26]\nmedian_values = [16, 18, 20, 22, 24]\niqr_mean_values = [14, 16, 18, 20, 22]\niqr_median_values = [12, 14, 16, 18, 20]\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), sharex=True)\n\n# Plot Mean Value\naxes[0, 0].bar(categories, mean_values, color=['lightgreen', 'yellow', 'lightblue', 'orange', 'brown'])\naxes[0, 0].set_title('Mean Value')\naxes[0, 0].set_ylabel('Value')\n\n# Plot Median Value\naxes[0, 1].bar(categories, median_values, color=['lightgreen', 'yellow', 'lightblue', 'orange', 'brown'])\naxes[0, 1].set_title('Median Value')\naxes[0, 1].set_ylabel('Value')\n\n# Plot IQR Mean\naxes[1, 0].bar(categories, iqr_mean_values, color=['lightgreen', 'yellow', 'lightblue', 'orange', 'brown'])\naxes[1, 0].set_title('IQR Mean')\naxes[1, 0].set_ylabel('Value')\n\n# Plot IQR Median\naxes[1, 1].bar(categories, iqr_median_values, color=['lightgreen', 'yellow', 'lightblue', 'orange', 'brown'])\naxes[1, 1].set_title('IQR Median')\naxes[1, 1].set_ylabel('Value')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['SOCP No Learning', 'SOCP (Proposed)', 'FMPC']\ntheta_max = [20, 30, 40]\ntheta_min = [-20, -30, -40]\nfmcp = [5, 6, 7]\nsocp_no_learning = [10, 15, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.barh(categories, fmcp, color='lightgreen', label='FMPC')\nax.barh(categories, socp_no_learning, left=fmcp, color='steelblue', label='SOCP No Learning')\n\n# Add error bars\nax.errorbar(theta_max, np.arange(len(categories)), xerr=2, fmt='o', color='darkred', label=r'$\\theta_{max}$')\nax.errorbar(theta_min, np.arange(len(categories)), xerr=2, fmt='o', color='navy', label=r'$\\theta_{min}$')\n\n# Set labels and title\nax.set_xlabel('Thrust Angle [\u00b0]')\nax.set_ylabel('Optimality Infeasible')\nax.set_title('Comparison of SOCP Learning and FMPC')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\nmetrics = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\nvalues = {\n    'ST_CVRP': [25, 25],\n    'ST_VRPTW': [35, 35],\n    'ST_All': [45, 45],\n    'Ours': [55, 55]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plotting\nfor i, category in enumerate(categories):\n    ax.barh(metrics[i], values[category], color='red' if category == 'Ours' else 'orange')\n\n# Set labels and title\nax.set_xlabel('Performance Gap (%)')\nax.set_ylabel('Metrics')\nax.set_title('Performance Metrics Comparison')\n\n# Add legend\nax.legend(['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\nhuman_scores = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2]\nmean_scores = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nmedian_scores = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ninterquartile_mean_scores = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\noptimal_gap_scores = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\n\n# Colors for each category\ncolors = ['#FFA500', '#FFFF00', '#ADD8E6', '#87CEEB', '#8B4513', '#2E8B57']\n\n# Create subplots\nfig, axes = plt.subplots(1, 4, figsize=(12.0, 3.0))\n\n# Plot each subplot\nfor ax, category, human_score, mean_score, median_score, interquartile_mean_score, optimal_gap_score, color in zip(\n    axes, categories, human_scores, mean_scores, median_scores, interquartile_mean_scores, optimal_gap_scores, colors\n):\n    ax.plot([human_score], [mean_score], 'o', color=color)\n    ax.plot([human_score], [median_score], 'o', color=color)\n    ax.plot([human_score], [interquartile_mean_score], 'o', color=color)\n    ax.plot([human_score], [optimal_gap_score], 'o', color=color)\n\n    # Set labels and title\n    ax.set_xlabel('Human Normalized Score')\n    ax.set_ylabel('Mean (\u2191)')\n    ax.set_title(category)\n    ax.set_xticks(human_scores)\n    ax.set_xticklabels([f'{score:.1f}' for score in human_scores])\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['2.0', '2.5', '3.0', '3.5', '4.0', '4.5', '5.0']\nx_values = [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]\ny_values = [\n    [10, 20, 30],  # SOCP Learning (Proposed)\n    [15, 25, 35],  # SOCP No Learning\n    [20, 30, 40]   # FMPC\n]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each category\nfor i, y in enumerate(y_values):\n    ax.violinplot(y, positions=[i], showmeans=False, showmedians=True, showextrema=True)\n\n# Set labels and title\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\nax.set_ylabel('Thrust Angle (\u00b0)')\nax.set_xlabel('Angular Frequency [rad/s]')\nax.set_title('Comparison of Thrust Angle')\n\n# Add legend\nax.legend(['SOCP Learning (Proposed)', 'SOCP No Learning', 'FMPC'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Perfect', 'GMM (25%-75%)', 'GML (25%-75%)', 'AO (25%-75%)']\nx_positions = np.arange(len(categories))\ny_values = [9, 10, 9, 8]\ny_errors = [1, 1, 1, 1]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars with error bars\nax.errorbar(x_positions, y_values, yerr=y_errors, fmt='o', capsize=5, ecolor='black', elinewidth=1, color='black')\n\n# Set labels and title\nax.set_xlabel('CEE (dB)')\nax.set_ylabel('SE (bps/Hz)')\nax.set_title('Method')\nax.set_xticks(x_positions)\nax.set_xticklabels(categories)\n\n# Add legend\nax.legend(['GMML (25%-75%)', 'GML (25%-75%)', 'AO (25%-75%)'], loc='upper right')\n\n# Set grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['D-avg', 'P-avg', 'SAA', 'CSA', 'RSA', 'P-NN']\nsubplots = [1, 2, 3]\ncolors = ['blue', 'red', 'purple']\n\nfig, axes = plt.subplots(1, 3, figsize=(25, 8))\n\nfor ax, color in zip(axes, colors):\n    for i, category in enumerate(categories):\n        ax.errorbar([i], [np.random.randint(50, 100)], yerr=np.random.randint(10, 20), fmt='o', color=color)\n    ax.set_title('Exponential travel times')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Travel time (min)')\n    ax.set_xticks(np.arange(len(categories)))\n    ax.set_xticklabels(categories)\n    ax.set_ylim(-50, 150)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\nhospital1 = [85, 80, 75]\nhospital2 = [90, 85, 80]\nhospital3 = [95, 90, 85]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot bars\nax.barh(categories, hospital1, color='steelblue', label='Hospital 1')\nax.barh(categories, hospital2, left=hospital1, color='lightgreen', label='Hospital 2')\nax.barh(categories, hospital3, left=np.array(hospital1) + np.array(hospital2), color='pink', label='Hospital 3')\n\n# Add labels and title\nax.set_xlabel('AUC')\nax.set_ylabel('Modality')\nax.set_title('AUC by Modality')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Vanilla DIP', 'SGLD DIP', 'Ours']\npsnr_values = [22.8, 23.0, 23.2]\npsnr_errors = [0.2, 0.1, 0.1]\n\n# Create subplots\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for 0.25 HIAR\naxes[0].errorbar(categories, psnr_values, yerr=psnr_errors, fmt='o', capsize=5, color='black')\naxes[0].set_title('0.25 HIAR')\naxes[0].set_xlabel('Method')\naxes[0].set_ylabel('PSNR (dB)')\naxes[0].set_ylim(19.0, 23.4)\naxes[0].grid(True)\n\n# Plot for 0.1 HIAR\naxes[1].errorbar(categories, psnr_values, yerr=psnr_errors, fmt='o', capsize=5, color='black')\naxes[1].set_title('0.1 HIAR')\naxes[1].set_xlabel('Method')\naxes[1].set_ylabel('PSNR (dB)')\naxes[1].set_ylim(19.0, 23.4)\naxes[1].grid(True)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = np.linspace(-80, 80, 100)\ny = np.linspace(-80, 80, 100)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(np.sqrt(X**2 + Y**2))\nZ2 = np.cos(np.sqrt(X**2 + Y**2))\n\n# Plot the data\nc1 = ax.contourf(X, Y, Z1, cmap='Oranges', alpha=0.5)\nc2 = ax.contourf(X, Y, Z2, cmap='Blues', alpha=0.5)\n\n# Add colorbar\ncbar = fig.colorbar(c1, ax=ax, orientation='vertical')\ncbar.set_label('Ground Truth')\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the grid\nx1 = np.linspace(0, 1, 100)\nx2 = np.linspace(0, 1, 100)\nX1, X2 = np.meshgrid(x1, x2)\n\n# Define the function\ndef f(X1, X2):\n    return np.sin(np.pi * X1) * np.cos(np.pi * X2)\n\n# Compute the function values\nZ = f(X1, X2)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the contourf\nc = ax.contourf(X1, X2, Z, cmap='coolwarm', levels=20)\n\n# Add colorbar\ncbar = fig.colorbar(c, ax=ax)\ncbar.set_label('\u03bb(x, z)')\n\n# Set labels and title\nax.set_xlabel('x1')\nax.set_ylabel('x2')\nax.set_title('\u03bb(x, z)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(100, 160, 10)\ny_female = np.sin(x / 10) * 70 + 80\ny_male = np.sin(x / 10) * 70 + 80\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plotting\nax.plot(x, y_female, 'b-', label='Female', linewidth=2)\nax.plot(x, y_male, 'r-', label='Male', linewidth=2)\n\n# Adding circles\nfor i in range(len(x)):\n    circle_female = plt.Circle((x[i], y_female[i]), 10, color='blue', fill=False)\n    circle_male = plt.Circle((x[i], y_male[i]), 10, color='red', fill=False)\n    ax.add_artist(circle_female)\n    ax.add_artist(circle_male)\n\n# Setting labels and title\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\nax.set_title('Systolic and Diastolic Blood Pressure')\nax.legend()\n\n# Grid\nax.grid(True, linestyle='--')\n\n# Set limits\nax.set_xlim(100, 160)\nax.set_ylim(50, 100)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ntheta = np.linspace(0, 2 * np.pi, 100)\nradii = [2, 4, 6, 8, 10]\ncolors = ['blue', 'cyan', 'magenta', 'lime', 'teal']\n\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(6.0, 6.0))\n\nfor r, color in zip(radii, colors):\n    ax.plot(theta, np.ones_like(theta) * r, color=color, linewidth=2)\n\nax.set_rticks([])\nax.set_yticklabels([])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the radii of the circles\nradii = [2, 4, 6, 8, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the circles\nfor radius in radii:\n    circle = plt.Circle((0, 0), radius, color='lightblue', alpha=0.5)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Add labels for each circle\nlabels = ['2', '4', '6', '8', '10']\nfor i, label in enumerate(labels):\n    ax.text(0, -radii[i] - 0.5, label, ha='center', va='center')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Add a title\nplt.title('Nested Circles with Labels')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nx = np.linspace(8, 15, 100)\ny = np.linspace(0, 25, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\nc = ax.contourf(X, Y, Z, cmap='coolwarm', levels=20)\n\n# Colorbar\ncbar = fig.colorbar(c, ax=ax)\ncbar.set_label('Iteration')\n\n# Labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Iteration')\nax.set_title('Heatmap of Iteration Over Time')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the range of x values\nx = np.linspace(0, 10, 100)\n\n# Define the function y = x^2\ny = x**2\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the function with a pink color\nax.plot(x, y, color='pink')\n\n# Fill the area under the curve with a light pink color\nax.fill_between(x, y, color='lightpink')\n\n# Set the title and labels\nax.set_title('Graph of $y = x^2$')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(-1.0, 1.0, 100)\ny = np.exp(-(x**2)) * (x + 1)  # Example function for demonstration\n\n# Plot\nplt.figure(figsize=(8.0, 4.0))\nplt.plot(x, y, color='cyan', linewidth=2)\nplt.fill_between(x, y, where=(y > 0), color='lightcyan', alpha=0.5)\n\n# Labels and title\nplt.xlabel('Spearman Coefficient')\nplt.ylabel('Density')\nplt.title('KDE Plot of Spearman Coefficient Distribution')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\n# Data\nx = np.array([7, 8, 9, 10, 11, 12, 13, 14, 15])\ny = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])\nwidth = 0.5\ncolors = ['purple', 'pink', 'brown', 'lightgreen', 'cyan', 'blue', 'gray', 'orange', 'red']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot each bar\nfor i in range(len(x)):\n    ax.bar(x[i], y[i], width, color=colors[i], label=f'p={x[i]}')\n\n# Add labels and title\nax.set_xlabel('p')\nax.set_ylabel('Shape Density')\nax.set_title('Random Bundle\\nIncrease Price\\nStrategic (Ours)\\nReserved price p_i')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Set grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set x-axis limits\nax.set_xlim(7, 15)\n\n# Set y-axis limits\nax.set_ylim(0, 0.7)\n\n# Add vertical lines\nax.axvline(x=9, color='black', linestyle='--', linewidth=0.5)\nax.axvline(x=10, color='black', linestyle='--', linewidth=0.5)\nax.axvline(x=11, color='black', linestyle='--', linewidth=0.5)\n\n# Add horizontal lines\nax.axhline(y=0.1, color='black', linestyle='--', linewidth=0.5)\nax.axhline(y=0.2, color='black', linestyle='--', linewidth=0.5)\nax.axhline(y=0.3, color='black', linestyle='--', linewidth=0.5)\nax.axhline(y=0.4, color='black', linestyle='--', linewidth=0.5)\nax.axhline(y=0.5, color='black', linestyle='--', linewidth=0.5)\nax.axhline(y=0.6, color='black', linestyle='--', linewidth=0.5)\nax.axhline(y=0.7, color='black', linestyle='--', linewidth=0.5)\n\n# Add annotations\nax.annotate('Random Bundle', xy=(7, 0.0), xytext=(7, 0.05),\n             arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('Increase Price', xy=(8, 0.0), xytext=(8, 0.05),\n             arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('Strategic (Ours)', xy=(9, 0.0), xytext=(9, 0.05),\n             arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('Reserved price p_i', xy=(10, 0.0), xytext=(10, 0.05),\n             arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Add red line\nax.plot([9, 11], [0.6, 0.6], color='red', linestyle='-', linewidth=1)\n\n# Add grid lines\nax.xaxis.set_major_locator(plt.MultipleLocator(1))\nax.yaxis.set_major_locator(plt.MultipleLocator(0.1))\n\n# Add colorbar\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\ncax.axis('off')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndensity = np.linspace(0, 0.5, 10)\ngucci_values = np.array([14, 12, 10, 8, 6, 4, 2, 0.5, 0.3, 0.1])\nchanel_values = np.array([10, 8, 6, 4, 2, 0.5, 0.3, 0.1, 0.05, 0.02])\n\n# Plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Fill between lines\nax.fill_between(density, gucci_values, color='lightblue', alpha=0.7, label='Gucci')\nax.fill_between(density, gucci_values, chanel_values, color='lightgreen', alpha=0.7, label='Chanel')\n\n# Plot lines\nax.plot(density, gucci_values, color='navy', label='Gucci')\nax.plot(density, chanel_values, color='darkgreen', label='Chanel')\n\n# Labels and title\nax.set_xlabel('Density')\nax.set_ylabel('Value')\nax.set_title('Gucci vs Chanel')\nax.legend()\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Deep Ens', 'Dropout', 'Laplace', 'SNP', 'HET-XL', 'Baseline', 'GP', 'Shallow Ens', 'DUQ', 'Corr Pred']\ndistributional_values = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.590, -0.819]\ndeterministic_values = [-0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot bars for distributional values\nbars_distributional = ax.bar(categories, distributional_values, color='green', label='Distributional')\n\n# Plot bars for deterministic values\nbars_deterministic = ax.bar(categories, deterministic_values, bottom=distributional_values, color='orange', label='Deterministic')\n\n# Add labels and title\nax.set_ylabel('Log Probability')\nax.set_title('Comparison of Distributional and Deterministic Models')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-2.0, 0.0)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 4, 8]\ny1 = [5, 6, 7, 6]\ny2 = [6, 7, 6, 7]\ny3 = [7, 6, 5, 6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plotting\nax.bar(x, y1, color='green', label='Baseline')\nax.bar(x, y2, bottom=y1, color='darkviolet', label='SoftMoE (unchanged)')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='mediumpurple', label='SoftMoE (\u2202 NumExperts)')\n\n# Adding labels and title\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human Normalized Score')\nax.set_title('Expert dimension')\n\n# Adding legend\nax.legend()\n\n# Setting y-axis limits\nax.set_ylim(5, 7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Hospital 1', 'Hospital 2', 'Hospital 3']\nbaseline_1 = [0.748, 0.762, 0.709]\nbaseline_2 = [0.759, 0.748, 0.687]\nfedmm = [0.78, 0.78, 0.713]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nbars = ax.bar(categories, baseline_1, color='lightblue', label='Baseline 1')\nax.bar(categories, baseline_2, bottom=baseline_1, color='salmon', label='Baseline 2')\nax.bar(categories, fedmm, bottom=np.array(baseline_1) + np.array(baseline_2), color='lightgreen', label='FedMM')\n\n# Add error bars\nax.errorbar(categories, baseline_1, yerr=0.01, fmt='o', color='black', capsize=5)\nax.errorbar(categories, baseline_2, yerr=0.01, fmt='o', color='black', capsize=5)\nax.errorbar(categories, fedmm, yerr=0.01, fmt='o', color='black', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Hospital')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by hospital and method')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['GPT-4 Buyer (valuation 40)', 'Claude-2.1 Buyer (valuation 40)', 'Claude-2 Buyer (valuation 40)', 'GPT-3.5 Buyer (valuation 40)']\ngpt4_values = [-15, -10, -5, 0]\nclaude21_values = [-10, -5, 0, 5]\nclaude2_values = [-5, 0, 5, 10]\ngpt35_values = [0, 5, 10, 15]\n\n# Bar width\nbar_width = 0.2\n\n# Positions of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\nax.barh(r1, gpt4_values, color='orange', edgecolor='black', height=bar_width, label='GPT-4')\nax.barh(r2, claude21_values, color='teal', edgecolor='black', height=bar_width, label='Claude-2.1')\nax.barh(r3, claude2_values, color='red', edgecolor='black', height=bar_width, label='Claude-2')\nax.barh(r4, gpt35_values, color='blue', edgecolor='black', height=bar_width, label='GPT-3.5')\n\n# Adding labels\nax.set_yticks([r + bar_width for r in range(len(categories))])\nax.set_yticklabels(categories)\nax.set_xlabel('Valuation')\nax.set_ylabel('Sellers (valuation 60)')\nax.set_title('Buyer (valuation 40)')\n\n# Adding legend\nax.legend()\n\n# Setting limits\nax.set_xlim(-20, 20)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['[m]', '[m]', '[m]', '[m]', '[m]']\nsubcategories = ['[none]', '[none]', '[none]', '[none]', '[none]']\nvalues = [0.95, 0.96, 0.97, 0.98, 0.99]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plotting the bars\nbars = ax.barh(categories, values, color='gray')\n\n# Adding labels and title\nax.set_xlabel('DNN x red (k=1)')\nax.set_ylabel('DNN x red (k=2)')\nax.set_title('DNN x red (k=1)\\n\\nDNN x red (k=2)')\n\n# Adding text annotations\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, f'{width:.1%}', va='center', ha='left')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\nvalues = [1.5, 1.2, 1.1, 1.0, 0.9]\nerrors = [0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plotting the bars with error bars\nax.bar(categories, values, yerr=errors, capsize=5, color=['lightblue', 'lightgreen', 'lightcoral', 'lightyellow', 'lightgrey'])\n\n# Adding labels and title\nax.set_ylabel('Posterior accuracy (\u0394 to no prompting)')\nax.set_xlabel('Categories')\nax.set_title('Bar Chart with Error Bars')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Medium', 'Medium-replay', 'Medium-expert']\naug_values = [85, 80, 85]\nte_values = [75, 70, 75]\nqual_values = [90, 85, 90]\ndiff_values = [80, 75, 80]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars\nbar_width = 0.2\nx = np.arange(len(categories))\n\nax.bar(x - bar_width, aug_values, bar_width, label='AUG', color='#FF6F61')\nax.bar(x, te_values, bar_width, label='T-Estimation', color='#FFC600')\nax.bar(x + bar_width, qual_values, bar_width, label='Qualification', color='#1f77b4')\nax.bar(x + 2*bar_width, diff_values, bar_width, label='Diff-Stitch', color='#1f77b4')\n\n# Add labels and title\nax.set_xlabel('Performance')\nax.set_ylabel('Score')\nax.set_title('Comparison of Different Models')\nax.set_xticks(x)\nax.set_xticklabels(categories)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['128/0.5/0.0001', '128/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001']\nvalues = [\n    [0.9, 0.7, 0.5, 0.3, 0.1],\n    [0.8, 0.6, 0.4, 0.2, 0.0],\n    [0.7, 0.5, 0.3, 0.1, 0.0],\n    [0.6, 0.4, 0.2, 0.0, 0.0],\n    [0.5, 0.3, 0.1, 0.0, 0.0],\n    [0.4, 0.2, 0.0, 0.0, 0.0],\n    [0.3, 0.1, 0.0, 0.0, 0.0],\n    [0.2, 0.0, 0.0, 0.0, 0.0]\n]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot bars\nfor i, category in enumerate(categories):\n    ax.barh(category, values[i], color=plt.cm.Paired(i / len(categories)))\n\n# Set labels and title\nax.set_xlabel('Metric')\nax.set_ylabel('Hyperparameters')\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set y-axis limits\nax.set_ylim(-0.5, len(categories) - 0.5)\n\n# Add grid lines\nax.grid(True, linestyle='--', linewidth=0.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues = [25, 15, 10, 6, 8]\ncolors = ['#4B0082', '#9932CC', '#32CD32', '#1E90FF', '#4B0082']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot bars\nbars = ax.barh(countries, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Student-Teacher Ratio')\nax.set_ylabel('Country')\nax.set_title('Higher Education Enrollment Rate')\n\n# Add text annotations\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, f'{width:.1f}', va='center', ha='left')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 10400, 3200]\nforest_coverage = [21, 34, 25, 25, 38]\nland_area = [18, 28, 20, 30, 34]\nenergy_consumption = [18, 28, 25, 25, 34]\n\n# Bar width\nbar_width = 0.2\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot emissions data\nax1.bar(categories, emissions, color='brown', alpha=0.7, label='Carbon Dioxide Emissions')\nax1.set_ylabel('Millions of Metric Tons', color='black')\nax1.set_ylim(0, 10000)\nax1.set_yticks(np.arange(0, 10001, 2000))\nax1.set_yticklabels(['0', '2000', '4000', '6000', '8000', '10000'])\n\n# Create a second y-axis for forest coverage\nax2 = ax1.twinx()\nax2.bar(categories, forest_coverage, color='tan', alpha=0.7, label='Forest Coverage Rate', width=bar_width)\nax2.set_ylabel('Percent of Land Area', color='black')\nax2.set_ylim(0, 60)\nax2.set_yticks(np.arange(0, 61, 10))\nax2.set_yticklabels(['0', '10', '20', '30', '40', '50', '60'])\n\n# Create a third y-axis for land area\nax3 = ax1.twinx()\nax3.bar(categories, land_area, color='lightgreen', alpha=0.7, label='Land Area', width=bar_width)\nax3.set_ylabel('Percent of Total Energy Consumption', color='black')\nax3.set_ylim(0, 50)\nax3.set_yticks(np.arange(0, 51, 10))\nax3.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Add labels and title\nplt.title('Annual Carbon Dioxide Emissions')\nax1.set_xlabel('Region')\n\n# Show legend\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\nax3.legend(loc='lower right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\nvalues_detroit = [50, 60, 80, 70]\nvalues_philadelphia = [40, 50, 70, 60]\nvalues_baltimore = [30, 40, 60, 50]\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 1, figsize=(10.0, 9.0))\n\n# Plot for Detroit\nbars_detroit = axes[0].bar(categories, values_detroit, color=['purple', 'blue', 'red', 'yellow'])\naxes[0].set_title('Detroit')\naxes[0].set_ylabel('Percentage')\n\n# Plot for Philadelphia\nbars_philadelphia = axes[1].bar(categories, values_philadelphia, color=['purple', 'blue', 'red', 'yellow'])\naxes[1].set_title('Philadelphia')\naxes[1].set_ylabel('Percentage')\n\n# Plot for Baltimore\nbars_baltimore = axes[2].bar(categories, values_baltimore, color=['purple', 'blue', 'red', 'yellow'])\naxes[2].set_title('Baltimore')\naxes[2].set_ylabel('Percentage')\n\n# Add legend\nfig.legend(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'], loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\njudges = ['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human']\nexpert_scores = [80, 70, 90, 85]\nblind_scores = [75, 65, 85, 80]\nconsultancy_scores = [60, 50, 70, 65]\ndebate_scores = [50, 40, 60, 55]\ninteractive_consultancy_scores = [40, 30, 50, 45]\ninteractive_debate_scores = [30, 20, 40, 35]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.barh(judges, expert_scores, color='lightblue', label='Expert')\nax.barh(judges, blind_scores, left=expert_scores, color='steelblue', label='Blind')\nax.barh(judges, consultancy_scores, left=np.array(expert_scores) + np.array(blind_scores), color='tan', label='Consultancy')\nax.barh(judges, debate_scores, left=np.array(expert_scores) + np.array(blind_scores) + np.array(consultancy_scores), color='brown', label='Debate')\nax.barh(judges, interactive_consultancy_scores, left=np.array(expert_scores) + np.array(blind_scores) + np.array(consultancy_scores) + np.array(debate_scores), color='lightgreen', label='Interactive Consultancy')\nax.barh(judges, interactive_debate_scores, left=np.array(expert_scores) + np.array(blind_scores) + np.array(consultancy_scores) + np.array(debate_scores) + np.array(interactive_consultancy_scores), color='pink', label='Interactive Debate')\n\n# Add labels and title\nax.set_xlabel('Judge Accuracy (%)')\nax.set_ylabel('Judge')\nax.set_title('Protocol')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-1, len(judges))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\nspring_temp = [12, 14, 13, 16]\nautumn_temp = [10, 12, 11, 15]\nspring_rainfall = [800, 900, 700, 1100]\nautumn_rainfall = [700, 800, 600, 1000]\nwind_speed = [5, 4, 3, 6]\nair_quality_index = [50, 40, 30, 70]\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0), gridspec_kw={'width_ratios': [1, 1], 'height_ratios': [1, 1]})\n\n# Plot 1: Annual Average Temperature\naxes[0, 0].bar(cities, spring_temp, color='orange', label='Spring')\naxes[0, 0].bar(cities, autumn_temp, bottom=spring_temp, color='pink', label='Autumn')\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].legend()\n\n# Plot 2: Annual Rainfall\naxes[0, 1].bar(cities, spring_rainfall, color='green', label='Spring')\naxes[0, 1].bar(cities, autumn_rainfall, bottom=spring_rainfall, color='cyan', label='Autumn')\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].legend()\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, wind_speed, color='brown', label='Wind Speed')\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].legend()\n\n# Plot 4: Air Quality Index\naxes[1, 1].bar(cities, air_quality_index, color='purple', label='Air Quality Index')\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [0, 0, 0, 0, 0]\nrenewable_energy_usage = [25, 20, 15, 10, 5]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot energy consumption\nax1.barh(countries, energy_consumption, color='purple', label='Energy Consumption (Petajoules)')\nax1.set_xlabel('Energy Consumption (Petajoules)')\nax1.set_ylabel('Country')\nax1.set_yticks(np.arange(len(countries)))\nax1.set_yticklabels(countries)\nax1.set_xlim(-6000, 0)\n\n# Create a second y-axis for renewable energy usage\nax2 = ax1.twinx()\nax2.barh(countries, renewable_energy_usage, color='lightgreen', alpha=0.7, label='Renewable Energy Usage (%)')\nax2.set_xlabel('Renewable Energy Usage (%)')\n\n# Add legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc='upper right')\n\n# Set title\nplt.title('Total Energy Consumption by Country\\nRenewable Energy Usage by Country')\n\n# Show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Refrigerator', 'Washing Machine', 'Dishwasher']\nstandard_model = [-0.10, -0.05, 0.05]\nadvanced_model = [0.05, 0.05, 0.05]\noptimal_model = [0.15, 0.15, 0.20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plotting the bars\nax.bar(categories, standard_model, color='red', label='Standard Model')\nax.bar(categories, advanced_model, bottom=standard_model, color='green', label='Advanced Model')\nax.bar(categories, optimal_model, bottom=np.array(standard_model) + np.array(advanced_model), color='blue', label='Optimal Model')\n\n# Adding labels and title\nax.set_ylabel('Energy Efficiency Ratings')\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Adding legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Wind', 'Solar', 'Hydro', 'Nuclear']\nefficiency_scores = {\n    'Installation Efficiency': [85, 75, 90, 80],\n    'Maintenance Costs': [60, 55, 65, 50],\n    'Operational Efficiency': [70, 60, 75, 65],\n    'Environmental Impact': [50, 45, 55, 40],\n    'Safety Standards': [40, 35, 45, 30]\n}\n\n# Number of categories\nnum_categories = len(categories)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Bar width\nbar_width = 0.2\n\n# Index for each category\nindex = np.arange(num_categories)\n\n# Plot each bar\ncolors = ['blue', 'green', 'purple', 'orange', 'cyan']\nfor i, (label, scores) in enumerate(efficiency_scores.items()):\n    ax.bar(index + i * bar_width, scores, bar_width, label=label, color=colors[i])\n\n# Set labels and title\nax.set_xlabel('Energy Assessment Entity')\nax.set_ylabel('Efficiency and Cost Scores')\nax.set_title('Energy Assessment Entity')\n\n# Set x-ticks\nax.set_xticks(index + bar_width * (len(efficiency_scores) - 1) / 2)\nax.set_xticklabels(categories)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 90, 75, 80, 70, 65, 75, 80, 70, 65]\nhigher_education_enrollment = [35, 40, 25, 30, 20, 15, 25, 30, 20, 15]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for High School Graduation\nbars1 = ax.bar(regions, high_school_graduation, color='lightgreen', label='High School Graduation')\n\n# Plot bars for Higher Education Enrollment\nbars2 = ax.bar(regions, higher_education_enrollment, bottom=high_school_graduation, color='lightyellow', label='Higher Education Enrollment')\n\n# Add labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage (%)')\nax.set_title('Educational Metrics by Region')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 120)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 30.1, 53.8, 19.4]\nmisleading_recall = [34.0, 57.9, 43.7, 20.0]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nax.barh(brands, truthful_recall, color='steelblue', label='Truthful Recall')\nax.barh(brands, misleading_recall, left=truthful_recall, color='orangered', label='Misleading Recall')\n\n# Add labels and title\nax.set_xlabel('Recall Rate (%)')\nax.set_ylabel('Brands')\nax.set_title('Comparison of Recall Rates Across Products')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-1, len(brands))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [15, 18, 20, 12, 17, 10, 8]\ncolors = ['#1f77b4', '#2ca02c', '#1f77b4', '#9467bd', '#8c564b', '#1f77b4', '#1f77b4']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars\nbars = ax.barh(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Complaint Rates')\nax.set_ylabel('Satisfaction Scores')\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, f'{width}%', va='center', ha='left')\n\n# Set y-axis limits\nax.set_ylim(-0.5, len(categories)-0.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\ndisagree_rates = [75, 82, 78, 78, 85, 80, 90]\nagree_rates = [15, 18, 20, 12, 10, 8, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for disagree rates\nax.bar(categories, disagree_rates, color='lightcoral', label='Disagree rates')\n\n# Plot bars for agree rates\nax.bar(categories, agree_rates, bottom=disagree_rates, color='lightyellow', label='Agree rates')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Rates')\nax.set_title('Customer Satisfaction by Categories')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nvalues = [\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15]\n]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot bars\nbars = ax.barh(categories, values[0], color='lightgreen', edgecolor='black')\nfor i in range(1, len(values)):\n    ax.barh(categories, values[i], left=np.array(values[:i]).sum(axis=0), color='lightgreen', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Impact on Plant Growth (\u0394 to control)')\nax.set_ylabel('Environmental Factors')\nax.set_title('Impact of Environmental Factors on Plant Growth')\n\n# Add legend\nax.legend(['Factor 1', 'Factor 2', 'Factor 3', 'Factor 4', 'Factor 5', 'Factor 6', 'Factor 7', 'Factor 8', 'Factor 9', 'Factor 10'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nnew_york_values = [250, 200, 200]\nlos_angeles_values = [200, 150, 100]\nchicago_values = [150, 100, 50]\n\n# Bar width\nbar_width = 0.25\n\n# Positions of bars on x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plotting\nax.bar(r1, new_york_values, color='green', width=bar_width, edgecolor='grey', label='New York')\nax.bar(r2, los_angeles_values, color='red', width=bar_width, edgecolor='grey', label='Los Angeles')\nax.bar(r3, chicago_values, color='blue', width=bar_width, edgecolor='grey', label='Chicago')\n\n# Adding labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Metric Values')\nax.set_title('Traffic Metrics Comparison')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\n\n# Adding legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001', '128/1/0.0001']\nvalues = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot horizontal bars\nbars = ax.barh(categories, values, color='lightblue')\n\n# Add labels and title\nax.set_xlabel('Metric')\nax.set_ylabel('Hyperparameters')\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set y-axis limits\nax.set_ylim(-0.5, len(categories) - 0.5)\n\n# Add grid lines\nax.grid(True, linestyle='--', linewidth=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [-3.0, -4.0, -2.0, -1.0]\nwater_quality_scores = [0.0, 0.0, 0.0, 0.0]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot air quality scores\nax1.bar(categories, air_quality_scores, color='brown', label='Air Quality')\nax1.set_ylabel('Air Quality Score', color='brown')\nax1.tick_params(axis='y', labelcolor='brown')\n\n# Create a second y-axis for water quality scores\nax2 = ax1.twinx()\nax2.plot(categories, water_quality_scores, color='green', marker='o', label='Water Quality')\nax2.set_ylabel('Water Quality Score', color='green')\nax2.tick_params(axis='y', labelcolor='green')\n\n# Set the title\nplt.title('Environmental Impact Scores Across Cities')\n\n# Add legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Set the x-axis limits\nax1.set_xlim(-0.5, len(categories) - 0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\nwerewolf_tokens = [84.97, 102.67, 67.17, 78.22, 85.17]\nwerewolf_speech_duration = [80, 80, 80, 80, 80]\n\nseer_tokens = [449.33, 780.67, 67.17, 78.22, 85.17]\nseer_speech_duration = [80, 80, 80, 80, 80]\n\nwitch_tokens = [449.33, 780.67, 67.17, 78.22, 85.17]\nwitch_speech_duration = [80, 80, 80, 80, 80]\n\nhunter_tokens = [449.33, 780.67, 67.17, 78.22, 85.17]\nhunter_speech_duration = [80, 80, 80, 80, 80]\n\nvillager_tokens = [449.33, 780.67, 67.17, 78.22, 85.17]\nvillager_speech_duration = [80, 80, 80, 80, 80]\n\n# Create a figure and axis with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for tokens\nbars1 = ax1.bar(categories, werewolf_tokens, color='lightgreen', label='Wererewolf')\nax1.errorbar(categories, werewolf_tokens, yerr=werewolf_speech_duration, fmt='o', color='black', capsize=5)\nax1.set_ylabel('Tokens (s)')\nax1.set_title('(a) Speak duration of roles')\n\n# Plot for speech duration\nbars2 = ax2.bar(categories, seer_tokens, color='lightblue', label='Seer')\nax2.errorbar(categories, seer_tokens, yerr=seer_speech_duration, fmt='o', color='black', capsize=5)\nax2.set_ylabel('Tokens (s)')\nax2.set_title('(b) Speak tokens of roles')\n\n# Add legend\nax1.legend()\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['(40 samples)', '(81 samples)', '(163 samples)', '(245 samples)', '(326 samples)', '(408 samples)']\nvalues = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot bars\nbars = ax.bar(categories, values, color='lightblue')\n\n# Add labels and title\nax.set_xlabel('Size of Data for Training and Validation')\nax.set_ylabel('True+ info (%)')\nax.set_title('Comparison of True+ Info for Different Sample Sizes')\n\n# Add grid lines\nax.yaxis.grid(True)\n\n# Add legend\nax.legend(['Data'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'const']\nvalues_all = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_arg_causal = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_0 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_1 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_2 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_3 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_4 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_5 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_6 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_const = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for Out-of-domain accuracy\nbars1 = ax1.bar(categories, values_all, color='red')\nax1.set_title('Out-of-domain accuracy')\nax1.set_ylabel('Accuracy')\nax1.set_ylim(0.824, 0.834)\nax1.yaxis.grid(True)\n\n# Plot for Shift gap\nbars2 = ax2.bar(categories, values_all, color='red')\nax2.set_title('Shift gap')\nax2.set_ylabel('Gap')\nax2.set_ylim(0.000, 0.050)\nax2.yaxis.grid(True)\n\n# Add labels\nfor bar in bars1:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 3), va='bottom')\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 3), va='bottom')\n\n# Show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Initial Distribution', 'Best-of-Three']\nvalues = [0.05, 0.01]\ncolors = ['#1f77b4', '#1f77b4']\n\n# Create a horizontal bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.barh(categories, values, color=colors)\n\n# Add labels and title\nplt.xlabel('Objective Value')\nplt.ylabel('Categories')\nplt.title('Mini Crosswords Performance')\n\n# Add legend\nplt.legend(['ToT (0.675)'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'Llama2']\nground_truth_labels = [65, 60, 60, 65, 60, 60, 70, 65, 60]\nweak_labels = [55, 50, 50, 55, 50, 50, 60, 55, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars for ground truth labels\nax.bar(categories, ground_truth_labels, color='red', label='Ground-truth labels')\n\n# Plot bars for weak labels\nax.bar(categories, weak_labels, bottom=ground_truth_labels, color='blue', label='Weak labels')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Ground-Truth and Weak Labels')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Disourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\nvalues = [\n    [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9],  # Purple bars\n    [1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8],  # Black bars\n    [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7],  # Purple bars\n    [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6],  # Black bars\n    [1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],  # Purple bars\n    [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],  # Black bars\n    [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]   # Purple bars\n]\n\n# Colors\ncolors = ['#808080', '#808080']  # Black color for all bars\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot bars\nfor i, category in enumerate(categories):\n    ax.barh(range(len(values)), values[i], color=colors[i % len(colors)], label=category)\n\n# Set labels and title\nax.set_xlabel('A')\nax.set_ylabel('Categories')\nax.set_title('Your Chart Title Here')\n\n# Set y-ticks and labels\nax.set_yticks(np.arange(len(categories)))\nax.set_yticklabels(categories)\n\n# Set x-axis limits\nax.set_xlim(-3.5, -2.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nmean_values = [10, 12, 14, 16, 18, 20]\nstd_values = [2, 2, 2, 2, 2, 2]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plotting\nax.errorbar(categories, mean_values, yerr=std_values, fmt='o-', color='b', ecolor='gray', capsize=5)\n\n# Labels and title\nax.set_xlabel('Dataset mean')\nax.set_ylabel('Mean')\nax.set_title('Shouting Fraction (Fraction of videos)')\n\n# Set y-axis limits\nax.set_ylim(0, 20)\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nx1 = np.array([0, 5, 10, 15, 20])\ny1 = np.array([15.49, 17.15, 16.03, 15.45, 16.46])\n\n# Data for the second plot\nx2 = np.array([0, 5, 10, 15, 20])\ny2 = np.array([19.38, 19.38, 19.38, 19.38, 19.38])\n\n# Data for the third plot\nx3 = np.array([0, 5, 10, 15, 20])\ny3 = np.array([23.92, 23.92, 23.92, 23.92, 23.92])\n\n# Data for the fourth plot\nx4 = np.array([0, 5, 10, 15, 20])\ny4 = np.array([24.64, 24.64, 24.64, 24.64, 24.64])\n\n# Data for the fifth plot\nx5 = np.array([0, 5, 10, 15, 20])\ny5 = np.array([22.92, 22.92, 22.92, 22.92, 22.92])\n\n# Data for the sixth plot\nx6 = np.array([0, 5, 10, 15, 20])\ny6 = np.array([20.29, 20.29, 20.29, 20.29, 20.29])\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 9.0))\n\n# Plot the first subplot\nax1.plot(x1, y1, 'o-', color='red', label='Variable, Symmetric Error')\nax1.set_title('Variable, Symmetric Error')\nax1.set_xlabel('X')\nax1.set_ylabel('Y')\nax1.legend()\n\n# Plot the second subplot\nax2.plot(x2, y2, 'o-', color='blue', label='Variable, Symmetric Error')\nax2.set_title('Variable, Symmetric Error')\nax2.set_xlabel('X')\nax2.set_ylabel('Y')\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility = [0.16, 0.18, 0.2, 0.22, 0.24]\ndata_mean = [0.17, 0.19, 0.21, 0.23, 0.25]\nmean = [0.18, 0.20, 0.22, 0.24, 0.26]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot data\nax.plot(categories, incivility, marker='o', color='blue', label='Dataset mean')\nax.plot(categories, data_mean, marker='o', color='red', label='Mean')\n\n# Set labels and title\nax.set_xlabel('Incivility (Fraction of Videos)')\nax.set_ylabel('Pulwama-Balakot')\nax.set_title('Pulwama-Balakot')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['This work*', 'Shah et al.', 'Shah et al.', 'Banerjee et al.', 'Favale et al.', 'Favale et al.', 'Gomez-Valent', 'Gomez-Valent', 'Benisty et al.', 'Benisty et al.']\nx_values = [-19.6, -19.5, -19.4, -19.3, -19.2, -19.1, -19.0, -18.9, -18.8, -18.7]\ny_values = [-19.353, -19.394, -19.404, -19.314, -19.344, -19.362, -19.374, -19.362, -19.38, -19.38]\nerrors = [0.073, 0.018, 0.017, 0.050, 0.099, 0.060, 0.078, 0.060, 0.200, 0.200]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.errorbar(x_values, y_values, yerr=errors, fmt='o-', capsize=5, color='black')\n\n# Set the title and labels\nax.set_title('CC+Pantheon+')\nax.set_xlabel('M$_B$')\nax.set_ylabel('M$_{\\\\rm BAO}$ + d$_{\\\\rm Pantheon}$')\n\n# Set the limits for x-axis\nax.set_xlim(-19.6, -19.0)\n\n# Add a vertical line at x = -19.2\nax.axvline(x=-19.2, color='red', linestyle='--', linewidth=2)\n\n# Add a legend\nax.legend(['CC+Pantheon+'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics']\nunique_speaker_count_mean = [12, 14, 10, 8, 6, 4]\nunique_shouter_count_mean = [15, 13, 11, 9, 7, 5]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot data\nax.plot(categories, unique_speaker_count_mean, 'bo-', label='Unique speaker count mean')\nax.plot(categories, unique_shouter_count_mean, 'ro-', label='Unique shouter count mean')\n\n# Set labels and title\nax.set_xlabel('Dataset unique shouter count mean')\nax.set_ylabel('Number of speakers')\nax.set_title('Dataset unique shouter count mean')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA']\ndataset_mean = [21, 23, 20, 25]\nmean = [15, 17, 19, 21]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(categories, dataset_mean, marker='o', color='blue', label='Dataset mean')\nax.plot(categories, mean, marker='o', color='magenta', label='Mean')\n\n# Set labels and title\nax.set_xlabel('PULWAMA-BALAKOT')\nax.set_ylabel('Female Face presence (Fraction of videos)')\nax.set_title('Comparison of Female Face Presence')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '2', '3', '4', '5']\nstandard = [1.5, 2.5, 3.5, 4.5, 5.5]\nupper_limits = [2.5, 3.5, 4.5, 5.5, 6.5]\nlower_limits = [0.5, 1.5, 2.5, 3.5, 4.5]\nupper_and_lower_limits = [1.0, 2.0, 3.0, 4.0, 5.0]\nrandom = [0.5, 1.5, 2.5, 3.5, 4.5]\n\n# Plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plotting each category\nax.errorbar(categories, standard, yerr=0.5, fmt='o', ecolor='b', capsize=5, label='standard')\nax.errorbar(categories, upper_limits, yerr=0.5, fmt='o', ecolor='y', capsize=5, label='upper limits')\nax.errorbar(categories, lower_limits, yerr=0.5, fmt='o', ecolor='r', capsize=5, label='lower limits')\nax.errorbar(categories, upper_and_lower_limits, yerr=0.5, fmt='o', ecolor='m', capsize=5, label='upper and lower limits')\nax.errorbar(categories, random, yerr=0.5, fmt='o', ecolor='c', capsize=5, label='random')\n\n# Setting labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Errorbar upper and lower limits')\n\n# Adding legend\nax.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\nx = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5])\ny1 = np.array([170, 160, 150, 140, 130, 120, 110, 100])\ny2 = np.array([100, 90, 80, 70, 60, 50, 40, 30])\n\n# Create a figure with two subplots side by side\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first subplot\nax1.plot(x, y1, 'o-', color='purple', label='variable, symmetric error')\nax1.set_title('variable, symmetric error')\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.set_ylim(0, 180)\nax1.legend()\n\n# Plot the second subplot\nax2.plot(x, y2, 'o-', color='green', label='variable, symmetric error')\nax2.set_title('variable, symmetric error')\nax2.set_xlabel('x')\nax2.set_ylabel('y')\nax2.set_ylim(0, 100)\nax2.legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([0, 2, 4, 6, 8, 10])\ny = np.array([\n    [2.957, 3.587, 4.375, 4.375, 4.375, 4.375],\n    [2.598, 3.704, 4.375, 4.375, 4.375, 4.375],\n    [1.923, 3.777, 4.375, 4.375, 4.375, 4.375],\n    [2.561, 4.777, 4.375, 4.375, 4.375, 4.375],\n    [2.237, 2.261, 2.261, 2.261, 2.261, 2.261],\n    [1.237, 2.061, 2.061, 2.061, 2.061, 2.061],\n    [1.287, 1.829, 1.829, 1.829, 1.829, 1.829]\n])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot each series\nfor i in range(y.shape[0]):\n    ax.errorbar(x, y[i], fmt='o', ecolor='black', capsize=5)\n\n# Set labels and title\nax.set_xlabel('variable')\nax.set_ylabel('asymmetric error')\nax.set_title('variable, asymmetric error')\n\n# Set y-axis limits\nax.set_ylim(15, 35)\n\n# Add horizontal line at y=25\nax.axhline(y=25, color='yellow', linestyle='--')\n\n# Add legend\nax.legend(['+4.334', '+4.498', '+4.498', '+4.498', '+4.498', '+4.498', '+4.498'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([0, 5, 10, 15, 20])\ny = np.array([-2.1, -2.6, -2.9, -3.0, -3.1])\ny_err = np.array([0.5, 0.4, 0.5, 0.5, 0.5])\n\n# Create plot\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot errorbar\nax.errorbar(x, y, yerr=y_err, fmt='o', color='purple', ecolor='black', capsize=5)\n\n# Set labels and title\nax.set_xlabel('variable')\nax.set_ylabel('asymmetric error')\nax.set_title('variable, asymmetric error')\n\n# Set y-axis limits\nax.set_ylim(14, 19)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Number of points in the polygon\nn = 6\n\n# Radius of the circle\nradius = 1\n\n# Angles for each point (in radians)\nangles = np.linspace(0, 2 * np.pi, n, endpoint=False)\n\n# Coordinates of the points\nx = radius * np.cos(angles)\ny = radius * np.sin(angles)\n\n# Plotting the polygon\nplt.figure(figsize=(8.0, 8.0))\nplt.plot(x, y, 'b-', marker='o', markersize=10, markerfacecolor='none')\n\n# Adding labels\nlabels = ['0', '1', '2', '3', '4', '5']\nfor i, label in enumerate(labels):\n    plt.text(x[i], y[i], label, fontsize=12, ha='center', va='center')\n\n# Setting equal aspect ratio\nplt.gca().set_aspect('equal', adjustable='box')\n\n# Title and labels\nplt.title('Hexagon with Equal Side Lengths')\nplt.xlabel('X')\nplt.ylabel('Y')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a graph\nG = nx.Graph()\n\n# Add nodes\nnodes = [f'Node {i}' for i in range(1, 21)]\nG.add_nodes_from(nodes)\n\n# Add edges\nedges = [\n    ('Node 1', 'Node 2'), ('Node 1', 'Node 3'), ('Node 1', 'Node 4'), ('Node 1', 'Node 5'),\n    ('Node 2', 'Node 6'), ('Node 2', 'Node 7'), ('Node 2', 'Node 8'), ('Node 2', 'Node 9'),\n    ('Node 3', 'Node 10'), ('Node 3', 'Node 11'), ('Node 3', 'Node 12'), ('Node 3', 'Node 13'),\n    ('Node 4', 'Node 14'), ('Node 4', 'Node 15'), ('Node 4', 'Node 16'), ('Node 4', 'Node 17'),\n    ('Node 5', 'Node 18'), ('Node 5', 'Node 19'), ('Node 5', 'Node 20')\n]\nG.add_edges_from(edges)\n\n# Draw the graph\nplt.figure(figsize=(8.0, 8.0))\npos = nx.spring_layout(G)  # positions for all nodes\nnx.draw_networkx_nodes(G, pos, node_size=500, node_color='pink')\nnx.draw_networkx_edges(G, pos, edge_color='gray')\nnx.draw_networkx_labels(G, pos, font_size=10, font_family='sans-serif')\n\nplt.title('Complex Network Diagram')\nplt.axis('off')  # Turn off axis\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Number of points\nn = 12\n\n# Angles for each point\ntheta = np.linspace(0, 2 * np.pi, n, endpoint=False)\n\n# Radius of the circle\nr = 10\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the circle\nax.plot(r * np.cos(theta), r * np.sin(theta), 'o-', lw=2, markersize=10, color='yellow')\n\n# Add labels\nlabels = [str(i) for i in range(n)]\nfor i, label in enumerate(labels):\n    ax.text(r * np.cos(theta[i]), r * np.sin(theta[i]), label, fontsize=12, ha='center', va='center')\n\n# Set equal aspect ratio\nax.set_aspect('equal')\n\n# Remove axes\nax.axis('off')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a graph\nG = nx.Graph()\n\n# Add nodes with positions\npositions = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 0.5)}\nG.add_nodes_from(positions.keys())\n\n# Add edges\nedges = [(0, 1), (0, 2), (1, 3), (2, 3), (3, 4), (4, 0)]\nG.add_edges_from(edges)\n\n# Draw the graph\nplt.figure(figsize=(10.0, 8.0))\nnx.draw(G, pos=positions, with_labels=True, node_color=['pink']*5, edge_color='gray', node_size=1000, font_size=16, font_weight='bold')\n\n# Set title\nplt.title('Triangle', fontsize=20)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates of the vertices\nx = [0, 2, 1]\ny = [0, 0, 1]\n\n# Plot the triangle\nax.plot(x, y, 'k-', lw=2)\n\n# Add markers for each vertex\nax.plot(x, y, 'o', color='orange', markersize=10)\n\n# Annotate each vertex with its label\nfor i, txt in enumerate(['0', '1', '2']):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set equal aspect ratio\nax.set_aspect('equal')\n\n# Remove axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse']\nvalues = [\n    [0.61, 0.74, 0.70, 0.70, 0.57],\n    [1.00, 0.69, 0.77, 0.88, 0.62],\n    [1.00, 1.00, 1.00, 1.00, 0.54],\n    [1.00, 1.00, 1.00, 1.00, 0.69],\n    [1.00, 1.00, 1.00, 1.00, 0.60]\n]\n\n# Colors for each category\ncolors = ['#FFA07A', '#FF6347', '#FF4500', '#FFD700', '#FF69B4']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot each category\nbottom = np.zeros(len(categories))\nfor i, (category, color) in enumerate(zip(categories, colors)):\n    ax.barh(categories, values[i], left=bottom, color=color, label=category)\n    bottom += values[i]\n\n# Add labels and title\nax.set_xlabel('Average')\nax.set_ylabel('Category')\nax.set_title('Comparison of Categories')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\ntees = ['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Abstain']\ndata = [\n    [15.7, 28.1, 2.6, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 8.1, 9.2],\n    [50.8, 12.2, 0.9, 6.2, 13.9],\n    [49.2, 11.2, 0.6, 7.8, 16.3],\n    [50.3, 12.0, 0.9, 7.0, 13.4]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nim = ax.imshow(data, cmap='Blues')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Percentage', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xticks(np.arange(len(tees)))\nax.set_yticks(np.arange(len(voters)))\nax.set_xticklabels(tees)\nax.set_yticklabels(voters)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Add a title\nax.set_title('Voter Preferences by Tee')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\nteams = ['T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\ndata = np.array([\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot heatmap\ncax = ax.matshow(data, cmap='YlOrBr')\n\n# Add colorbar\ncbar = fig.colorbar(cax)\ncbar.set_label('Score')\n\n# Set labels\nax.set_xticks(np.arange(len(players)))\nax.set_yticks(np.arange(len(teams)))\nax.set_xticklabels(players)\nax.set_yticklabels(teams)\n\n# Set title\nplt.title('Heatmap of Player Scores')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Predicted category']\nlive = [10, 20, 30, 40]\ncqi = [20, 30, 40, 50]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot bars\nax.barh(categories, live, color='purple', label='Live')\nax.barh(categories, cqi, left=live, color='blue', label='CQI')\n\n# Add labels and title\nax.set_xlabel('Label Function Similarity')\nax.set_ylabel('Predicted category')\nax.set_title('Label Function Similarity')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['LOH0', 'LOH1', 'LOH2', 'LOMLP']\nsubcategories = ['D\\'2', 'D\\'1', 'D\\'0']\ndata = np.array([\n    [4.0, 8.0, 10.0],\n    [3.0, 4.0, 12.0],\n    [1.0, 2.0, 28.0]\n])\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot bars\nbar_width = 0.5\nx = np.arange(len(categories))\ncolors = ['#6a9945', '#4575b4', '#fdae61', '#d7191c']\n\nfor i, (category, color) in enumerate(zip(categories, colors)):\n    ax.barh(x + i * bar_width, data[i], height=bar_width, label=category, color=color)\n\n# Set labels and title\nax.set_xlabel('Percentage')\nax.set_ylabel('Categories')\nax.set_title('Heatmap of Categories')\n\n# Set y-ticks and labels\nax.set_yticks(x + bar_width)\nax.set_yticklabels(categories)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\nsubcategories = ['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4', 'CODI']\nvalues = [\n    [0.2, 0.3, 0.4, 0.5, 0.6],  # Academia\n    [0.3, 0.4, 0.5, 0.6, 0.7],  # Agriculture\n    [0.4, 0.5, 0.6, 0.7, 0.8],  # Construction and Real Estate\n    [0.5, 0.6, 0.7, 0.8, 0.9],  # Corporate\n    [0.6, 0.7, 0.8, 0.9, 1.0],  # Entertainment\n    [0.7, 0.8, 0.9, 1.0, 1.1],  # Finance\n    [0.8, 0.9, 1.0, 1.1, 1.2],  # Government\n    [0.9, 1.0, 1.1, 1.2, 1.3],  # Hospitality\n    [1.0, 1.1, 1.2, 1.3, 1.4],  # Legal Services\n    [1.1, 1.2, 1.3, 1.4, 1.5]   # Life Sciences\n]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot horizontal bar chart\nbar_width = 0.5\ny_pos = np.arange(len(categories))\nfor i, subcat in enumerate(subcategories):\n    ax.barh(y_pos + i * bar_width, values[i], height=bar_width, label=subcat)\n\n# Set labels and title\nax.set_yticks(y_pos + bar_width * (len(subcategories) - 1) / 2)\nax.set_yticklabels(categories)\nax.set_xlabel('Value')\nax.set_ylabel('Categories')\nax.set_title('Category Comparison')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '3', '5', '9', '12']\nvalues = [\n    [1, 1, 1, 1, 1],  # Black\n    [1, 1, 1, 1, 1],  # Purple\n    [1, 1, 1, 1, 1],  # Dark Purple\n    [1, 1, 1, 1, 1],  # Light Purple\n    [1, 1, 1, 1, 1]   # Dark Red\n]\n\n# Colors\ncolors = [\n    '#000000',  # Black\n    '#4B0082',  # Purple\n    '#6A0DAD',  # Dark Purple\n    '#9400D3',  # Medium Purple\n    '#C21463'   # Dark Red\n]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot bars\nfor i, (category, value) in enumerate(zip(categories, values)):\n    ax.barh(category, value, color=colors[i], label=f'{category} {value}')\n\n# Set labels and title\nax.set_xlabel('Increase in perpexity')\nax.set_ylabel('To layer')\nax.set_title('mbert\u2192sat Perplexity=7.59')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nproducts = ['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3']\nquarters = ['Q1', 'Q2', 'Q3']\nsales = np.array([\n    [659, 777, 807],\n    [784, 637, 729],\n    [863, 700, 650],\n    [935, 945, 949],\n    [729, 700, 717],\n    [863, 700, 650]\n])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(sales, cmap='coolwarm')\n\n# Add colorbar\ncbar = fig.colorbar(cax)\n\n# Set labels\nax.set_xticks(np.arange(len(quarters)))\nax.set_yticks(np.arange(len(products)))\nax.set_xticklabels(quarters)\nax.set_yticklabels(products)\n\n# Set title\nplt.title('Sales Performance Heatmap')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['context', 'option', 'cot', 'last']\nvalues = [0.2, 0.4, 0.6, 0.8]\n\n# Create a horizontal bar chart\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\nbars = ax.barh(categories, values, color=['green', 'orange', 'purple', 'brown'])\n\n# Add labels and title\nax.set_xlabel('Values')\nax.set_ylabel('Context')\nax.set_title('Horizontal Bar Chart')\n\n# Add colorbar\ncmap = plt.cm.get_cmap('coolwarm', len(categories))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=min(values), vmax=max(values)))\nsm.set_array([])\nplt.colorbar(sm, ax=ax, orientation='vertical', label='Colors')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['96', '192', '336', '720']\nautoformer = np.array([0.55, 0.65, 0.96, 0.54])\ninformer = np.array([0.02, 0.83, 0.78, 0.87])\nreformer = np.array([0.46, 0.62, 0.68, 0.62])\ntransformer = np.array([0.32, 0.36, 0.44, 0.44])\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Plot bars\nax.barh(categories, autoformer, color='brown', label='Autoformer')\nax.barh(categories, informer, left=autoformer, color='orange', label='Informer')\nax.barh(categories, reformer, left=autoformer + informer, color='darkorange', label='Reformer')\nax.barh(categories, transformer, left=autoformer + informer + reformer, color='gold', label='Transformer')\n\n# Add labels and title\nax.set_xlabel('Correlation coefficient')\nax.set_ylabel('Weather')\nax.set_title('Weather')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Wererewolf', 'Seer', 'Witch', 'Villager', 'Abstain']\nroles = ['Wererewolf', 'Seer', 'Witch', 'Villager', 'Abstain']\ndata = {\n    'Wererewolf': [15.7, 12.0, 7.6, 5.0, 0.3],\n    'Seer': [11.2, 12.0, 7.8, 7.0, 0.9],\n    'Witch': [14.3, 11.2, 7.6, 7.0, 0.9],\n    'Villager': [28.6, 13.4, 17.3, 28.1, 16.3],\n    'Abstain': [0.9, 0.6, 0.5, 10.5, 0.1]\n}\n\n# Create a figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20.0, 8.0))\n\n# Plot for Role voting in the Werewolf game\ncolors = ['#1f77b4', '#aec7e8', '#c6dbef', '#deebf7', '#eff3ff']\nfor i, role in enumerate(roles):\n    ax1.barh(categories, data[role], color=colors[i], label=role)\nax1.set_title('a\\nRole voting in the Werewolf game')\nax1.set_xlabel('Percentage')\nax1.set_ylabel('Roles')\nax1.legend(loc='upper right')\n\n# Plot for Final state of roles\nfor i, role in enumerate(roles):\n    ax2.barh(categories, data[role], color=colors[i], label=role)\nax2.set_title('b\\nFinal state of roles')\nax2.set_xlabel('Percentage')\nax2.set_ylabel('Roles')\nax2.legend(loc='upper right')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nresponses = np.array([\n    [169, 547, 662, 271, 1248],\n    [115, 439, 753, 239, 1355],\n    [219, 585, 557, 259, 1269],\n    [67, 941, 708, 432, 732],\n    [177, 554, 661, 235, 1246]\n])\n\n# Colors for each category\ncolors = ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#1f77b4']\n\n# Plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create stacked bar chart\nax.barh(categories, responses[:, 0], color=colors[0], label='Response 0')\nfor i in range(1, responses.shape[1]):\n    ax.barh(categories, responses[:, i], left=responses[:, :i].sum(axis=1), color=colors[i], label=f'Response {i}')\n\n# Add labels and title\nax.set_xlabel('Response Action Category')\nax.set_ylabel('Question Type: All three types of questions')\nax.set_title('Question Type: All three types of questions')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-1, len(categories))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'feart', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10.0, 8.0), sharex=True)\n\n# Plot Original data\nbars1 = ax1.bar(categories, original_values, color=['lightblue', 'blue', 'pink', 'lightblue', 'lightblue', 'red', 'darkred', 'lightblue'])\nax1.set_title('Original')\nax1.set_ylabel('Score')\n\n# Plot Adjusted data\nbars2 = ax2.bar(categories, adjusted_values, color=['lightblue', 'blue', 'pink', 'lightblue', 'lightblue', 'red', 'darkred', 'lightblue'])\nax2.set_title('Adjusted')\nax2.set_ylabel('Score')\n\n# Add legend\nax1.legend(['Original'], loc='upper right')\nax2.legend(['Adjusted'], loc='upper right')\n\n# Set x-axis labels\nplt.xticks(rotation=45)\n\n# Show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\ntees = ['Abstain', 'Villager', 'Seer', 'Witch', 'Hunter']\ndata = [\n    [15.7, 28.1, 2.6, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 13.9],\n    [49.2, 11.2, 0.6, 7.8, 16.3],\n    [50.3, 12.0, 0.9, 7.0, 13.4]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nim = ax.imshow(data, cmap='Blues')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Percentage', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xticks(np.arange(len(tees)))\nax.set_yticks(np.arange(len(voters)))\nax.set_xticklabels(tees)\nax.set_yticklabels(voters)\n\n# Set title and labels\nax.set_title('Voter Preferences')\nax.set_xlabel('Tee')\nax.set_ylabel('Voter')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['Baseline', 'Reversed Order', 'Reversed IDs']\nvalues = [\n    [17, 24, 23],\n    [5, 8, 10],\n    [13, 16, 19]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.barh(categories, values[0], color='orange', label='#17')\nax.barh(categories, values[1], left=values[0], color='brown', label='#24')\nax.barh(categories, values[2], left=np.array(values[0]) + np.array(values[1]), color='darkorange', label='#23')\n\n# Add labels and title\nax.set_xlabel('Rank')\nax.set_ylabel('Baseline\\nReversed Order\\nReversed IDs')\nax.set_title('LLaMA')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['0.10', '0.08', '0.30', '0.60', '0.00', '0.50', '0.07', '0.10']\nvalues = [0.10, 0.08, 0.30, 0.60, 0.00, 0.50, 0.07, 0.10]\ncolors = ['#f2f2f2', '#d9d9d9', '#bfbfbf', '#a0a0a0', '#808080', '#606060', '#404040', '#202020']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bars\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart with Custom Colors')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley']\nyears = ['Upland Bros.', 'Smith Gardening', 'Agrifun', 'BioGoods Ltd.', 'Cornylee Corp.']\n\n# Values for each category and year\ndata = np.array([\n    [0.8, 2.4, 2.5, 3.9, 0.0],  # Cucumber\n    [2.4, 0.0, 4.0, 1.0, 0.0],  # Tomato\n    [1.1, 2.4, 0.8, 4.3, 0.0],  # Lettuce\n    [0.6, 0.0, 0.3, 0.0, 0.0],  # Asparagus\n    [0.7, 1.7, 0.6, 0.0, 0.0],  # Potato\n    [1.3, 1.2, 0.0, 0.0, 0.0],  # Wheat\n    [0.1, 2.0, 0.0, 0.0, 0.0]   # Barley\n])\n\n# Colors for each category\ncolors = ['#FFFFCC', '#C2E699', '#A6D96A', '#82B34A', '#669933', '#4D7F2F', '#33661A']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh(years, data[i], color=colors[i], label=category)\n\n# Set labels and title\nax.set_xlabel('harvest [t/year]')\nax.set_ylabel('Farmer Joe')\nax.set_title('Harvest by Farmer Joe')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nyears = ['Cycle 1', 'Cycle 2', 'Cycle 3', 'Cycle 4', 'Cycle 5']\nbook1 = [46, 23, 60, 39, 71, 11]\nbook2 = [49, 38, 67, 41, 79, 34]\nbook3 = [66, 48, 69, 49, 81, 41]\nbook4 = [69, 49, 74, 66, 84, 43]\nbook5 = [85, 51, 88, 66, 90, 51]\nbook6 = [83, 62, 90, 70, 92, 67]\nbook7 = [88, 72, 90, 74, 94, 76]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the first bar chart\nax1.barh(categories, book1, color='brown', label='Book 1')\nax1.set_xlabel('weekly sold copies')\nax1.set_ylabel('harvest [t/yr]')\nax1.set_title('Harvest vs Weekly Sold Copies')\n\n# Create a second y-axis for the second bar chart\nax2 = ax1.twinx()\nax2.barh(categories, book7, color='darkviolet', alpha=0.5, label='Book 7')\n\n# Set the limits for the second y-axis\nax2.set_xlim(0, 10)\nax2.set_ylim(-1, 1)\n\n# Add labels and title for the second y-axis\nax2.set_ylabel('correlation coefficient')\nax2.set_title('Correlation Coefficient')\n\n# Add a legend\nfig.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for each model\ndata = {\n    'spline36': np.random.rand(10, 10),\n    'hanning': np.random.rand(10, 10),\n    'hamming': np.random.rand(10, 10),\n    'hermite': np.random.rand(10, 10),\n    'kaiser': np.random.rand(10, 10),\n    'quadratic': np.random.rand(10, 10),\n    'catrom': np.random.rand(10, 10),\n    'gaussian': np.random.rand(10, 10),\n    'bessel': np.random.rand(10, 10),\n    'mitchell': np.random.rand(10, 10),\n    'sinc': np.random.rand(10, 10),\n    ' lanczos': np.random.rand(10, 10)\n}\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(nrows=4, ncols=4, figsize=(9.0, 6.0))\n\n# Plot each model's data\nfor i, (model, ax) in enumerate(axes.flat):\n    ax.imshow(data[model], cmap='viridis', interpolation='nearest')\n    ax.set_title(model)\n    ax.axis('off')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\nvalues = [3, 2, 4, 5, 6]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=['purple', 'orange', 'pink', 'blue', 'yellow'])\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('default: no edges')\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes']\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\ndata = [\n    [1.5, 2.2, 1.8, 3.2, 0.5, 3.8, 0.3],  # apples\n    [2.8, 0.5, 3.6, 1.8, 0.6, 4.0, 0.6],  # bananas\n    [1.0, 2.1, 0.9, 4.0, 0.7, 2.3, 0.4],  # cherries\n    [0.7, 0.6, 0.4, 3.4, 0.5, 2.0, 0.6],  # dates\n    [0.9, 1.6, 1.5, 2.3, 0.7, 1.6, 0.5],  # elderberries\n    [1.2, 1.3, 0.5, 2.0, 0.7, 1.3, 0.8],  # figs\n    [0.3, 1.9, 0.6, 0.8, 0.9, 1.8, 0.9]   # grapes\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nim = ax.imshow(data, cmap='YlOrBr')\n\n# Add labels\nax.set_xticks(np.arange(len(vendors)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(vendors)\nax.set_yticklabels(categories)\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Sales (in tons/year)', rotation=-90, va=\"bottom\")\n\n# Set title\nax.set_title('Sales of vendors (in tons/year)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Low', 'Medium', 'High']\nvalues = [np.array([17, 36, 28, 23]), np.array([79, 53, 34, 35]), np.array([42, 38, 0, 55])]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot bars\nbars = []\nfor i, category in enumerate(categories):\n    bar = ax.barh(categories, values[i], left=np.sum(values[:i], axis=0), color=plt.cm.Blues(i))\n    bars.append(bar)\n\n# Add labels and title\nax.set_xlabel('Degree of acceptance of a product')\nax.set_ylabel('Age')\nax.set_title('Degree of acceptance of a product')\n\n# Add legend\nax.legend([bar[0] for bar in bars], ['Low', 'Medium', 'High'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['ada', 'mistral', 'distilroberta', 'mpnet', 'MiniLM', 'qa-distilbert']\nsubcategories = ['ada', 'mis', 'dis', 'mpn', 'Min', 'qad']\ndata = np.array([\n    [0.95, 0.85, 0.75, 0.65, 0.55, 0.45],\n    [0.90, 0.80, 0.70, 0.60, 0.50, 0.40],\n    [0.85, 0.75, 0.65, 0.55, 0.45, 0.35],\n    [0.80, 0.70, 0.60, 0.50, 0.40, 0.30],\n    [0.75, 0.65, 0.55, 0.45, 0.35, 0.25],\n    [0.70, 0.60, 0.50, 0.40, 0.30, 0.20]\n])\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot heatmap\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set labels\nax.set_xticks(np.arange(len(subcategories)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(subcategories)\nax.set_yticklabels(categories)\n\n# Set title and labels\nax.set_title('Bottleneck Distance')\nax.set_xlabel('Wasserstein Distance')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.random.rand(10, 12) * 10  # Random data scaled between 0 and 10\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='coolwarm', vmin=0, vmax=10)\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['0', '2', '4', '6', '8', '10', '12'])\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\nax.set_title('ROC\\'s AUC')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation', 'Last']\ncounts = [0, 4, 8, 12, 16, 20, 24, 28]\nvalues = [\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the heatmap\ncax = ax.matshow(values, cmap='Greens')\n\n# Set labels\nax.set_xticks(np.arange(len(counts)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(counts)\nax.set_yticklabels(categories)\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set title and labels\nplt.title('Heatmap Example')\nplt.xlabel('Count')\nplt.ylabel('Categories')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['0', '1', '2', '3']\nlive_data = np.array([\n    [44, 12, 0, 0],\n    [5, 42, 8, 0],\n    [0, 0, 23, 9],\n    [0, 0, 0, 44]\n])\ncqi_data = np.array([\n    [33, 17, 5, 3],\n    [100, 24, 14, 16],\n    [27, 67, 88, 184],\n    [13, 347, 11, 0]\n])\nkoniq_data = np.array([\n    [339, 17, 5, 3],\n    [100, 24, 14, 16],\n    [27, 67, 88, 184],\n    [13, 347, 11, 0]\n])\nlive_m_data = np.array([\n    [339, 17, 5, 3],\n    [100, 24, 14, 16],\n    [27, 67, 88, 184],\n    [13, 347, 11, 0]\n])\npipal_data = np.array([\n    [339, 17, 5, 3],\n    [100, 24, 14, 16],\n    [27, 67, 88, 184],\n    [13, 347, 11, 0]\n])\n\n# Create figure and axis\nfig, axes = plt.subplots(3, 3, figsize=(12.0, 6.0), constrained_layout=True)\n\n# Plot each subplot\nfor ax, data, title in zip(axes.flatten(), [live_data, cqi_data, koniq_data, live_m_data, pipal_data], \n                          ['LIVE', 'CQI', 'KonIQ', 'LIVE-M', 'PipAL']):\n    im = ax.imshow(data, cmap='plasma', interpolation='nearest')\n    ax.set_title(title)\n    ax.set_xticks(np.arange(len(categories)))\n    ax.set_yticks(np.arange(len(categories)))\n    ax.set_xticklabels(categories)\n    ax.set_yticklabels(categories)\n    ax.set_xlabel('Predicted category')\n    ax.set_ylabel('Ground truth category')\n\n# Add colorbar\ncbar_ax = fig.add_axes([0.92, 0.15, 0.02, 0.7])\nfig.colorbar(im, cax=cbar_ax)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['Kokkos', 'Raja', 'Omp', 'Oacc', 'Sycl', 'Native Port']\nsummit = [876, 136, 435, 534, 322, 804]\npermuter = [750, 1737, 742, 375, 750, 1825]\ncorona = [764, 676, 782, 421, 925, 911]\nfrontier = [482, 120, 843, 1170, 925, 911]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.barh(models, summit, color='lightpink', label='Summit')\nax.barh(models, permuter, left=summit, color='salmon', label='Permuter')\nax.barh(models, corona, left=np.array(summit) + np.array(permuter), color='peachpuff', label='Corona')\nax.barh(models, frontier, left=np.array(summit) + np.array(permuter) + np.array(corona), color='lightgrey', label='Frontier')\n\n# Add labels and title\nax.set_xlabel('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_ylabel('Programming Model')\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-1, len(models))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['en', 'fr', 'es', 'pt', 'bn', 'ur', 'hi', 'ar', 'zh']\nvalues = [\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.67, 0.68, 0.71, 0.82],\n    [0.90, 0.90, 0.93, 0.95, 0.66, 0.69, 0.68, 0.72, 0.82],\n    [0.89, 0.93, 0.95, 0.95, 0.66, 0.69, 0.68, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 1.00, 0.68, 0.69, 0.68, 0.72, 0.82],\n    [0.64, 0.67, 0.68, 1.00, 0.64, 0.67, 0.68, 0.71, 0.82],\n    [0.66, 0.69, 0.69, 1.00, 0.65, 0.69, 0.68, 0.72, 0.82],\n    [0.68, 0.70, 0.72, 1.00, 0.68, 0.70, 0.70, 0.72, 0.82],\n    [0.71, 0.72, 0.75, 1.00, 0.71, 0.72, 0.75, 0.75, 0.82],\n    [0.82, 0.82, 0.85, 1.00, 0.82, 0.85, 0.86, 0.89, 1.00]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(values, cmap='coolwarm')\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set labels\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\nax.set_yticklabels(categories)\n\n# Set title\nplt.title('Correlation Coefficients')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['ROUGE', 'BertScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL']\nmetrics = ['LexRank', 'ROUGE', 'BertScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL']\nvalues = [\n    [0.19, 0.19, 0.26, 0.52, 0.50, 0.39, 0.34, 0.20],\n    [0.19, 0.62, 0.53, 0.52, 0.50, 0.39, 0.34, 0.20],\n    [0.16, 0.26, 0.24, 0.24, 0.20, 0.16, 0.10, 0.07],\n    [0.03, 0.24, 0.24, 0.20, 0.10, 0.06, 0.06, 0.28],\n    [0.03, 0.24, 0.24, 0.20, 0.10, 0.06, 0.06, 0.28],\n    [0.03, 0.24, 0.24, 0.20, 0.10, 0.06, 0.06, 0.28],\n    [0.03, 0.24, 0.24, 0.20, 0.10, 0.06, 0.06, 0.28]\n]\n\n# Convert data to numpy arrays for easier manipulation\nvalues = np.array(values)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot horizontal bar chart\nbars = []\nfor i in range(len(categories)):\n    bar = ax.barh(categories, values[i], left=np.sum(values[:i], axis=0), color=plt.cm.Blues(i / len(categories)))\n    bars.append(bar)\n\n# Add labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Categories')\nax.set_title('Metric Scores by Category')\n\n# Add legend\nax.legend([bar[0] for bar in bars], metrics, loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-0.05, 0.7)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['<endofext>', '<endofext>']\nsubcategories = ['No / The', 'athlete', 'that', 'loved', 'the', 'ministers', 'has', 'landed']\nlayers = np.arange(16)\ndata = np.array([\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n])\n\n# Plot\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=(5.0, 6.0))\n\nfor ax, category in zip(axes, categories):\n    ax.imshow(data, cmap='Blues', interpolation='nearest')\n    ax.set_xticks(layers)\n    ax.set_yticks(np.arange(len(subcategories)))\n    ax.set_xticklabels(layers)\n    ax.set_yticklabels(subcategories)\n    ax.set_title(category)\n    ax.set_xlabel('Layers')\n    ax.set_ylabel('Subcategories')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['XSUm', 'CNN/DailyMail', 'NarrativeQA', 'NaturalQuestions - Closed-book', 'NaturalQuestions - Open-book', 'QuAC']\ntest_distances = [0.0, 0.2, 0.4, 0.6, 0.8]\nnum_pairs = [\n    [100, 90, 80, 70, 60, 50],\n    [90, 80, 70, 60, 50, 40],\n    [80, 70, 60, 50, 40, 30],\n    [70, 60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20, 10],\n    [50, 40, 30, 20, 10, 0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh(test_distances, num_pairs[i], left=np.sum(num_pairs[:i], axis=0), color=plt.cm.tab20(i), label=category)\n\n# Set labels and title\nax.set_xlabel('Number of Pairs')\nax.set_ylabel('Test Winning Distance')\nax.set_title('Performance Metrics by Test Distance')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncosine_similarity = np.linspace(-0.2, 0.8, 10)\ninter_class = np.random.randint(20, 80, size=10)\nintra_class = np.random.randint(20, 80, size=10)\n\n# Create the figure and subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Plot for Inter Class\nbars1 = ax1.barh(cosine_similarity, inter_class, color='lightblue', label='Inter Class')\nax1.set_xlabel('Cosine Similarity')\nax1.set_ylabel('Cosine Similarity')\nax1.set_title('Inter Class')\nax1.legend()\n\n# Plot for Intra Class\nbars2 = ax2.barh(cosine_similarity, intra_class, color='lightgreen', label='Intra Class')\nax2.set_xlabel('Cosine Similarity')\nax2.set_ylabel('Cosine Similarity')\nax2.set_title('Intra Class')\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([0.5, 1.0, 1.5, 2.0, 2.5])\ny1_positive = np.array([0.6, 0.7, 0.8, 0.9, 1.0])\ny1_negative = np.array([0.4, 0.5, 0.6, 0.7, 0.8])\ny2_positive = np.array([1.2, 1.3, 1.4, 1.5, 1.6])\ny2_negative = np.array([1.0, 1.1, 1.2, 1.3, 1.4])\n\n# Plot\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), sharex=True, sharey=True)\n\n# Panel (a)\naxes[0, 0].bar(x, y1_positive, color='gold', label='V-I positive')\naxes[0, 0].bar(x, y1_negative, bottom=y1_positive, color='lightblue', label='V-I negative')\naxes[0, 0].set_title('Baseline')\naxes[0, 0].set_ylabel('Density')\naxes[0, 0].set_xlabel('Euclidean Distance')\naxes[0, 0].legend()\n\n# Panel (b)\naxes[0, 1].bar(x, y2_positive, color='gold', label='V-I positive')\naxes[0, 1].bar(x, y2_negative, bottom=y2_positive, color='lightblue', label='V-I negative')\naxes[0, 1].set_title('MIRL w/ MULT')\naxes[0, 1].set_ylabel('Density')\naxes[0, 1].set_xlabel('Euclidean Distance')\naxes[0, 1].legend()\n\n# Panel (c)\naxes[1, 0].bar(x, y1_positive, color='gold', label='V-I positive')\naxes[1, 0].bar(x, y1_negative, bottom=y1_positive, color='lightblue', label='V-I negative')\naxes[1, 0].set_title('MIRL + OCLR w/ MULT')\naxes[1, 0].set_ylabel('Density')\naxes[1, 0].set_xlabel('Euclidean Distance')\naxes[1, 0].legend()\n\n# Panel (d)\naxes[1, 1].bar(x, y2_positive, color='gold', label='V-I positive')\naxes[1, 1].bar(x, y2_negative, bottom=y2_positive, color='lightblue', label='V-I negative')\naxes[1, 1].set_title('MIRL + OCLR w/ DOTLA')\naxes[1, 1].set_ylabel('Density')\naxes[1, 1].set_xlabel('Euclidean Distance')\naxes[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for each plot\ndata_sets = {\n    'MATHWELL': {'blue': [0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'red': [0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9]},\n    'Llama-2': {'red': [0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9]},\n    'LLEMMMA': {'purple': [0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9]},\n    'MAMmoTH': {'yellow': [0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9]},\n}\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(3, 2, figsize=(7.0, 8.0))\n\n# Plot each dataset\nfor i, (name, data) in enumerate(data_sets.items()):\n    ax = axes[i // 2, i % 2]\n    ax.set_title(name)\n    ax.set_xlabel('FKGL')\n    ax.set_ylabel('Density')\n    \n    for color, values in data.items():\n        ax.hist(values, bins=10, alpha=0.5, color=color, label=color)\n\n    # Add a legend if there are multiple colors\n    if len(data) > 1:\n        ax.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Camels', 'Kangaroos']\nweights = [0.02, 0.04, 0.06, 0.08]\nvalues_camel = [100, 200, 300, 400]\nvalues_kangaroo = [150, 250, 350, 450]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot bars\nbars = ax.barh(categories, values_camel, color='steelblue', label='Camels')\nax.barh(categories, values_kangaroo, left=values_camel, color='orange', label='Kangaroos')\n\n# Add labels and title\nax.set_xlabel('Animal Weight (Tons)')\nax.set_ylabel('Species')\nax.set_title('Desert Animals in the Wild')\n\n# Add legend\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-0.5, len(categories) - 0.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['0', '2', '4', '6', '8']\nuniform_data = [10, 20, 30, 40, 50]\nnormal_data = [20, 30, 40, 50, 60]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot bars\nax.barh(categories, uniform_data, color='red', label='Uniform data')\nax.barh(categories, normal_data, left=uniform_data, color='blue', label='Normal data')\n\n# Add labels and title\nax.set_xlabel('Frequency')\nax.set_ylabel('Value')\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nwind_speeds = [-2, -1, 0, 1, 2, 3, 4, 5]\nmeasurements = [100, 150, 200, 250, 300, 350, 400, 450]\nmedian = 197\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot histogram\nax.barh(wind_speeds, measurements, color='lightblue', edgecolor='black')\n\n# Add median line\nax.axvline(x=median, color='magenta', linestyle='-', linewidth=2)\n\n# Add text annotations\nfor i, speed in enumerate(wind_speeds):\n    ax.text(median, speed, f'{speed} km/h', va='center', ha='right', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Number of Measurements')\nax.set_ylabel('Wind Speed (km/h)')\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Add legend\nax.legend(['Median: 197'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['0.0', '0.5', '1.0', '1.5', '2.0', '2.5', '3.0']\nbaguette = [10, 20, 30, 40, 50, 60, 70]\nyoutiao = [80, 70, 60, 50, 40, 30, 20]\n\n# Bar width\nbar_width = 0.35\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot bars\nax.bar(categories, baguette, bar_width, label='Baguette', color='blue')\nax.bar(categories, youtiao, bar_width, bottom=baguette, label='Youtiao', color='orange')\n\n# Add labels and title\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Frequency')\nax.set_title('Baking Accuracy Analysis')\nax.set_xticks(categories)\nax.set_yticks(np.arange(0, 160, 25))\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['XSUm', 'CNN/DailyMail', 'NarrativeQA', 'NaturalQuestions - Closed-book', 'NaturalQuestions - Open-book', 'QuAC']\ntest_winning_distances = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\nnum_pairs = [\n    [50, 30, 20, 10, 5, 2],  # XSUm\n    [40, 20, 10, 5, 2, 1],  # CNN/DailyMail\n    [30, 15, 10, 5, 2, 1],  # NarrativeQA\n    [20, 10, 5, 2, 1, 0],   # NaturalQuestions - Closed-book\n    [10, 5, 2, 1, 0, 0],     # NaturalQuestions - Open-book\n    [5, 2, 1, 0, 0, 0]       # QuAC\n]\n\n# Colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#d62728', '#9467bd', '#8c564b', '#1f77b4']\n\n# Create a figure and axis with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16.0, 7.0))\n\n# Plotting the first subplot\nfor i, (category, color) in enumerate(zip(categories, colors)):\n    ax1.barh(test_winning_distances, num_pairs[i], left=np.sum(num_pairs[:i], axis=0), color=color, label=category)\n\nax1.set_xlabel('Number of Pairs')\nax1.set_ylabel('Test Winning Distance')\nax1.set_title('Modified XSum')\nax1.legend(loc='upper right')\n\n# Plotting the second subplot\nfor i, (category, color) in enumerate(zip(categories, colors)):\n    ax2.barh(test_winning_distances, num_pairs[i], left=np.sum(num_pairs[:i], axis=0), color=color, label=category)\n\nax2.set_xlabel('Number of Pairs')\nax2.set_ylabel('Test Winning Distance')\nax2.set_title('Modified CNN/DailyMail')\nax2.legend(loc='upper right')\n\n# Set the y-ticks and labels\nax1.set_yticks(test_winning_distances)\nax1.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\nax2.set_yticks(test_winning_distances)\nax2.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\nyears = [0, 50, 100, 150, 200, 250]\ndata = {\n    'Record of the Year': [10, 15, 20, 25, 30, 35],\n    'Album of the Year': [12, 17, 22, 27, 32, 37],\n    'Song of the Year': [14, 19, 24, 29, 34, 39],\n    'Best New Artist': [16, 21, 26, 31, 36, 41],\n    'Best Pop Solo Performance': [18, 23, 28, 33, 38, 43]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plotting the data\nbottom = np.zeros(len(years))\ncolors = ['#FFA500', '#FF6347', '#FFD700', '#FFC0CB', '#FFB6C1']\n\nfor i, (category, values) in enumerate(data.items()):\n    ax.barh(categories, values, left=bottom, color=colors[i], label=category)\n    bottom += values\n\n# Adding labels and title\nax.set_xlabel('Number of Nominations')\nax.set_ylabel('Categories')\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\nax.legend(loc='upper right')\n\n# Setting the y-axis limits\nax.set_ylim(-1, len(categories))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.linspace(0, 0.3, 100)\ny1 = np.exp(-x**2)\ny2 = np.exp(-(x-0.1)**2)\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 7.0))\n\n# Plot 1: MNIST - Defect Detection\nax1.barh(x, y1, color='blue', label='Non-defective')\nax1.barh(x, y2, left=y1, color='orange', label='Defective')\nax1.set_xlabel('Percentage')\nax1.set_ylabel('MNIST - Defect Detection')\nax1.set_title('MNIST - Defect Detection')\nax1.set_xlim(0, 0.2)\nax1.set_ylim(0, 0.3)\nax1.legend()\n\n# Plot 2: FashionMNIST - Defect Detection\nax2.barh(x, y1, color='green', label='Non-defective')\nax2.barh(x, y2, left=y1, color='red', label='Defective')\nax2.set_xlabel('Percentage')\nax2.set_ylabel('FashionMNIST - Defect Detection')\nax2.set_title('FashionMNIST - Defect Detection')\nax2.set_xlim(0, 0.2)\nax2.set_ylim(0, 0.3)\nax2.legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0']\nsam = [20, 30, 40, 50, 60, 70, 80]\nthioredoxin_like = [10, 20, 30, 40, 50, 60, 70]\ntetracopeptide_like_helical_domain = [15, 25, 35, 45, 55, 65, 75]\ncheY_like = [12, 22, 32, 42, 52, 62, 72]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot bars\nax.bar(categories, sam, color='steelblue', label='SAM-dependent methyltransferase')\nax.bar(categories, thioredoxin_like, bottom=sam, color='skyblue', label='Thioredoxin-like')\nax.bar(categories, tetracopeptide_like_helical_domain, bottom=np.array(sam) + np.array(thioredoxin_like), color='lightgreen', label='Tetracopeptide-like helical domain')\nax.bar(categories, cheY_like, bottom=np.array(sam) + np.array(thioredoxin_like) + np.array(tetracopeptide_like_helical_domain), color='olivedrab', label='CheY-like')\n\n# Add labels and title\nax.set_xlabel('TM-score')\nax.set_ylabel('Frequency')\nax.set_title('Comparison of Different Models')\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncategories = ['Sweet', 'New Zealand']\nswiss_data = [np.array([0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.4, 0.5, 0.6, 0.7, 0.8])]\nnz_data = [np.array([0.3, 0.4, 0.5, 0.6, 0.7]), np.array([0.2, 0.3, 0.4, 0.5, 0.6])]\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), sharex=True, sharey=True)\n\n# Plotting the data\nfor ax, (swiss, nz) in zip(axes.flatten(), zip(swiss_data, nz_data)):\n    ax.barh(categories, swiss, color='lightblue', label='Swiss')\n    ax.barh(categories, nz, left=swiss, color='orange', label='New Zealand')\n    ax.set_title('Dark Chocolate')\n    ax.set_xlabel('Density')\n    ax.set_ylabel('Sweetness')\n    ax.legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['0.00', '0.05', '0.10', '0.15']\ncamel_counts = [100, 90, 80, 70]\nkangaroo_counts = [20, 30, 40, 50]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot bars\nax.bar(categories, camel_counts, color='green', label='Camel')\nax.bar(categories, kangaroo_counts, bottom=camel_counts, color='pink', label='Kangaroo')\n\n# Set labels and title\nax.set_xlabel('Concept Weight')\nax.set_ylabel('Count')\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['-5.0', '-2.5', '0.0', '2.5', '5.0', '7.5', '10.0']\ncenter_values = [100, 80, 60, 40, 20, 10, 5]\nrandom_values = [90, 70, 50, 30, 10, 5, 0]\n\n# Bar width\nbar_width = 0.35\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot bars\ncenter_bars = ax.bar(categories, center_values, bar_width, label='Center', color='yellow')\nrandom_bars = ax.bar(categories, random_values, bar_width, bottom=center_values, label='Random', color='darkviolet')\n\n# Add labels and title\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Examples')\nax.set_title('Comparison of Center and Random')\nax.set_xticks(categories)\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['0.0', '2.5', '5.0', '7.5', '10.0']\nvalues = [1000, 800, 600, 400, 200]\n\n# Create the plot\nplt.figure(figsize=(4.0, 3.0))\nbars = plt.bar(categories, values, color='brown')\n\n# Add labels and title\nplt.xlabel('Number of Repetition')\nplt.ylabel('Number of Clusters')\nplt.title('Clusters vs Number of Repetition')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndistances = [0, 1, 2, 3, 4]\ncorrectly_classified = [400, 300, 200, 100, 0]\nmisclassified = [100, 200, 300, 400, 500]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot bars\nax.barh(distances, correctly_classified, color='blue', label='Correctly classified')\nax.barh(distances, misclassified, left=correctly_classified, color='orange', label='Misclassified')\n\n# Add labels and title\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Distance to threshold')\nax.set_title('Classification Accuracy by Distance')\n\n# Add legend\nax.legend()\n\n# Set y-ticks\nax.set_yticks(distances)\nax.set_yticklabels(['0', '1', '2', '3', '4'])\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nconfidences = [0.2, 0.4, 0.6, 0.8]\naccuracies = [0.2, 0.4, 0.6, 0.8]\nerrors = [0.31, 0.31, 0.31, 0.31]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot horizontal bar chart\nbars = ax.barh(confidences, accuracies, color='saddlebrown', edgecolor='black')\n\n# Add error lines\nfor bar, error in zip(bars, errors):\n    ax.plot([bar.get_width(), bar.get_width()], [bar.get_y(), bar.get_y() + bar.get_height()], 'k--', lw=1)\n\n# Set labels and title\nax.set_xlabel('Confidence in bin')\nax.set_ylabel('Accuracy in bin')\nax.set_title('Calibration Error: 0.31')\n\n# Set y-axis limits\nax.set_ylim(0, 1.0)\n\n# Add calibration error line\nax.plot([0, 1], [0.31, 0.31], 'r--', lw=2, label='Calibration Error')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['0.2', '0.4', '0.6', '0.8', '1.0']\nvalues = [1000, 2000, 3000, 4000, 5000]\n\n# Create the bar chart\nplt.figure(figsize=(6.0, 5.0))\nbars = plt.bar(categories, values, color='lightblue')\n\n# Add labels and title\nplt.xlabel('% images overlap')\nplt.ylabel('Number of queries')\nplt.title('Number of Queries by % Images Overlap')\n\n# Add data labels\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\nx = np.linspace(0, 0.25, 100)\ny = np.exp(-x**2)\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10.0, 7.0))\n\n# Plot the first subplot\nax1.plot(x, y, color='blue')\nax1.set_title('MNIST')\nax1.set_xlabel('X Label')\nax1.set_ylabel('Y Label')\n\n# Plot the second subplot\nax2.plot(x, y, color='blue')\nax2.set_title('FashionMNIST')\nax2.set_xlabel('X Label')\nax2.set_ylabel('Y Label')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsnr = [5, 10, 15, 20]\njpeg_ldpc = [20, 40, 60, 80]\ndeepjscss_wofdm = [30, 50, 70, 90]\nours = [40, 60, 80, 100]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot lines\nax.plot(snr, jpeg_ldpc, 'bo-', label='JPEG+LDPC')\nax.plot(snr, deepjscss_wofdm, 'o-', color='orange', label='DEEPJSCC w/o ofdm')\nax.plot(snr, ours, 'o-', color='red', label='OURS')\n\n# Add markers at specific points\nax.plot(5, 20, 'ro', markersize=10)\nax.plot(10, 40, 'ro', markersize=10)\nax.plot(15, 60, 'ro', markersize=10)\nax.plot(20, 80, 'ro', markersize=10)\n\n# Set labels and title\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\nax.set_title('Comparison of Different Models')\n\n# Set y-axis limits\nax.set_ylim(0, 100)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nn = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ncontent = [1, 2, 3, 4, 5, 6, 5, 4, 3]\norganization = [2, 3, 2, 1, 2, 3, 2, 1, 2]\nlanguage = [3, 2, 1, 2, 3, 2, 1, 2, 3]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each line with different colors and labels\nax.plot(n, content, color='blue', label='Content')\nax.plot(n, organization, color='orange', label='Organization')\nax.plot(n, language, color='teal', label='Language')\n\n# Set the title and labels\nax.set_title('Performance Gain (%)')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Set the grid\nax.grid(True)\n\n# Set the legend\nax.legend()\n\n# Set the limits for x and y axes\nax.set_xlim(0, 8)\nax.set_ylim(0, 7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 20, 40, 60, 80]\ny_coco_10k = [0.55, 0.65, 0.75, 0.85, 0.95]\ny_laion_10k = [0.55, 0.65, 0.75, 0.85, 0.95]\ny_coco_5k = [0.55, 0.65, 0.75, 0.85, 0.95]\ny_laion_5k = [0.55, 0.65, 0.75, 0.85, 0.95]\ny_clip = [0.55, 0.65, 0.75, 0.85, 0.95]\n\n# Create the plot\nplt.figure(figsize=(6.0, 6.0))\nplt.plot(x, y_coco_10k, 'ro-', label='coco (10k)', linewidth=2)\nplt.plot(x, y_laion_10k, 'go-', label='laion (10k)', linewidth=2)\nplt.plot(x, y_coco_5k, 'bo-', label='coco (5k)', linewidth=2)\nplt.plot(x, y_laion_5k, 'yo-', label='laion (5k)', linewidth=2)\nplt.plot(x, y_clip, 'k-', label='CLIP', linewidth=2)\n\n# Add labels and title\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\nplt.title('Effect of Vocabulary on Zero Shot Accuracy')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.25, 0.5, 0.75, 1.0])\ny1 = np.array([0.03, 0.02, 0.01, 0.01])  # Green line\ny2 = np.array([0.04, 0.03, 0.02, 0.02])  # Blue line\ny3 = np.array([0.05, 0.04, 0.03, 0.03])  # Red line\n\n# Create plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot lines with markers\nax.plot(x, y1, 'g-o', label='MAXN=512')\nax.plot(x, y2, 'b-o', label='MAXN=1024')\nax.plot(x, y3, 'r-o', label='MAXN=2048')\n\n# Add markers at specific points\nax.plot(0.5, 0.02, 'r^', markersize=10)\nax.plot(0.75, 0.03, 'r^', markersize=10)\nax.plot(1.0, 0.01, 'r^', markersize=10)\n\n# Set labels and title\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\nax.set_title('Plot Title')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\nbase_fid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\nours_fid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\n\nbase_is = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\nours_is = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\n\nbase_cwfid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\nours_cwfid = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\n\nbase_cas = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\nours_cas = [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\n\n# Create subplots\nfig, axes = plt.subplots(3, 3, figsize=(8.0, 10.0))\n\n# Plot FID\naxes[0, 0].plot(x, base_fid, 'b-', label='base')\naxes[0, 0].plot(x, ours_fid, 'y-', label='ours')\naxes[0, 0].set_title('FID (dB)')\naxes[0, 0].set_xlabel('Training iterations')\naxes[0, 0].set_ylabel('FID (dB)')\naxes[0, 0].legend()\n\n# Plot IS\naxes[0, 1].plot(x, base_is, 'b-', label='base')\naxes[0, 1].plot(x, ours_is, 'y-', label='ours')\naxes[0, 1].set_title('IS (t)')\naxes[0, 1].set_xlabel('Training iterations')\naxes[0, 1].set_ylabel('IS (t)')\naxes[0, 1].legend()\n\n# Plot CW-FID\naxes[0, 2].plot(x, base_cwfid, 'b-', label='base')\naxes[0, 2].plot(x, ours_cwfid, 'y-', label='ours')\naxes[0, 2].set_title('CW-FID (t)')\naxes[0, 2].set_xlabel('Training iterations')\naxes[0, 2].set_ylabel('CW-FID (t)')\naxes[0, 2].legend()\n\n# Plot FID\naxes[1, 0].plot(x, base_fid, 'b-', label='base')\naxes[1, 0].plot(x, ours_fid, 'y-', label='ours')\naxes[1, 0].set_title('FID (dB)')\naxes[1, 0].set_xlabel('Training iterations')\naxes[1, 0].set_ylabel('FID (dB)')\naxes[1, 0].legend()\n\n# Plot IS\naxes[1, 1].plot(x, base_is, 'b-', label='base')\naxes[1, 1].plot(x, ours_is, 'y-', label='ours')\naxes[1, 1].set_title('IS (t)')\naxes[1, 1].set_xlabel('Training iterations')\naxes[1, 1].set_ylabel('IS (t)')\naxes[1, 1].legend()\n\n# Plot CW-FID\naxes[1, 2].plot(x, base_cwfid, 'b-', label='base')\naxes[1, 2].plot(x, ours_cwfid, 'y-', label='ours')\naxes[1, 2].set_title('CW-FID (t)')\naxes[1, 2].set_xlabel('Training iterations')\naxes[1, 2].set_ylabel('CW-FID (t)')\naxes[1, 2].legend()\n\n# Plot FID\naxes[2, 0].plot(x, base_fid, 'b-', label='base')\naxes[2, 0].plot(x, ours_fid, 'y-', label='ours')\naxes[2, 0].set_title('FID (dB)')\naxes[2, 0].set_xlabel('Training iterations')\naxes[2, 0].set_ylabel('FID (dB)')\naxes[2, 0].legend()\n\n# Plot IS\naxes[2, 1].plot(x, base_is, 'b-', label='base')\naxes[2, 1].plot(x, ours_is, 'y-', label='ours')\naxes[2, 1].set_title('IS (t)')\naxes[2, 1].set_xlabel('Training iterations')\naxes[2, 1].set_ylabel('IS (t)')\naxes[2, 1].legend()\n\n# Plot CAS\naxes[2, 2].plot(x, base_cas, 'b-', label='base')\naxes[2, 2].plot(x, ours_cas, 'y-', label='ours')\naxes[2, 2].set_title('CAS (t)')\naxes[2, 2].set_xlabel('Training iterations')\naxes[2, 2].set_ylabel('CAS (t)')\naxes[2, 2].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nweeks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\nauto_profiled = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nmanually_analyzed = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\nax.plot(weeks, auto_profiled, 'o-', color='red', label='Auto-profiled')\nax.plot(weeks, manually_analyzed, 'o-', color='blue', label='Manually-analyzed')\n\n# Annotations\nax.annotate('Release new product', xy=(25, 0.2), xytext=(25, 0.3),\n            arrowprops=dict(facecolor='blue', shrink=0.05))\n\n# Labels and title\nax.set_xlabel('Week')\nax.set_ylabel('Normalized Value')\nax.set_title('Realize the trend')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nba_ce = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\nlwf = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\newc = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\nseq = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each dataset\nax.plot(tasks, ba_ce, 's-', color='blue', label='BaCE')\nax.plot(tasks, lwf, 's-', color='#FF6F61', label='LWF')\nax.plot(tasks, ewc, 's-', color='#C70039', label='EWC')\nax.plot(tasks, seq, 's-', color='#FFA07A', label='SEQ')\n\n# Set labels and title\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Average Accuracy of Different Models Over Tasks')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nuncertainty = np.array([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\noesense = np.array([0.99, 0.98, 0.97, 0.96, 0.95, 0.94])\nkws = np.array([0.96, 0.95, 0.94, 0.93, 0.92, 0.91])\necg5000 = np.array([0.93, 0.92, 0.91, 0.90, 0.89, 0.88])\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nax.plot(uncertainty, oesense, 'bo-', label='Oesense', markersize=8)\nax.plot(uncertainty, kws, 'ro-', label='KWS', markersize=8)\nax.plot(uncertainty, ecg5000, 'go-', label='ECG5000', markersize=8)\n\n# Markers\nfor i, txt in enumerate(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0']):\n    ax.annotate(txt, (uncertainty[i], oesense[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n    ax.annotate(txt, (uncertainty[i], kws[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n    ax.annotate(txt, (uncertainty[i], ecg5000[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Labels and title\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Models')\nax.legend()\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 20, 40, 60, 80, 100, 120]\ny = [10**-5, 10**-4, 10**-3, 10**-2, 10**-1, 10**0, 10**1]\n\n# Create plot\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y, 'bo-', color='blue')\n\n# Labels and title\nplt.xlabel('Number of Parameters')\nplt.ylabel('Log KL Divergence')\nplt.title('Log KL Divergence vs Number of Parameters')\n\n# Grid\nplt.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\niterations = np.array([0, 500, 1000, 1500, 2000])\nattack_success_rate_gpt4 = np.array([0.2, 0.3, 0.4, 0.5, 0.6])\nattack_success_rate_llama = np.array([0.2, 0.3, 0.4, 0.5, 0.6])\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9.0, 4.0))\n\n# Plot for GPT-4 Evaluation\nax1.plot(iterations, attack_success_rate_gpt4, 'o-', color='blue', label='7B')\nax1.fill_between(iterations, 0, attack_success_rate_gpt4, color='lightblue', alpha=0.5)\nax1.set_title('GPT-4 Evaluation')\nax1.set_xlabel('Iterations')\nax1.set_ylabel('Attack Success Rate')\nax1.set_ylim(0, 1)\nax1.legend()\n\n# Plot for Llama Guard Evaluation\nax2.plot(iterations, attack_success_rate_llama, 'o-', color='magenta', label='7B (Fine-tuned)')\nax2.fill_between(iterations, 0, attack_success_rate_llama, color='lightpink', alpha=0.5)\nax2.set_title('Llama Guard Evaluation')\nax2.set_xlabel('Iterations')\nax2.set_ylabel('Attack Success Rate')\nax2.set_ylim(0, 1)\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.logspace(-2, 0, 10)\ny_full = np.linspace(40, 80, 10)\ny_spt = np.linspace(50, 90, 10)\ny_vpt = np.linspace(60, 100, 10)\n\n# Plotting\nplt.figure(figsize=(5.0, 4.0))\nplt.plot(x, y_full, 'bo-', label='Full')\nplt.plot(x, y_spt, 'ro-', label='SPT')\nplt.plot(x, y_vpt, 'bo-', label='VPT')\n\n# Adding markers at specific points\nplt.scatter([10**-2, 10**-1, 10**0], [40, 50, 60], color='blue', label='markers')\nplt.scatter([10**-2, 10**-1, 10**0], [70, 80, 90], color='green', label='markers')\nplt.scatter([10**-2, 10**-1, 10**0], [60, 70, 80], color='red', label='markers')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Adding title and labels\nplt.title('test accuracy')\nplt.xlabel('fraction of training data (log scale)')\nplt.ylabel('test accuracy (%)')\n\n# Grid\nplt.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([0, 50, 100, 150, 200])\ny1 = np.array([1, 1.5, 1, 1.5, 1])\ny2 = np.array([0.5, 1, 0.5, 1, 0.5])\ny3 = np.array([0.75, 1.25, 0.75, 1.25, 0.75])\n\n# Plot\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Fill between lines\nax.fill_between(x, y1, y2, color='lightblue', alpha=0.5)\nax.fill_between(x, y2, y3, color='lightgreen', alpha=0.5)\n\n# Plot lines\nax.plot(x, y1, 'o-', color='blue', label='Line 1')\nax.plot(x, y2, 'o-', color='orange', label='Line 2')\nax.plot(x, y3, 'o-', color='green', label='Line 3')\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Value')\nax.set_title('Comparison of Lines with Filled Areas')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nratios = [0.2, 0.4, 0.6, 0.8, 1.0]\nperformance_molhiv = [\n    [0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72],\n    [0.70, 0.70, 0.70, 0.70, 0.70]\n]\n\nperformance_mnist75sp = [\n    [0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72],\n    [0.70, 0.70, 0.70, 0.70, 0.70]\n]\n\nperformance_spmotif05 = [\n    [0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72],\n    [0.70, 0.70, 0.70, 0.70, 0.70]\n]\n\n# Plotting\nfig, axes = plt.subplots(2, 2, figsize=(16.0, 8.0))\n\n# Plot for each subplot\nfor ax, data, title in zip(axes.flatten(), [performance_molhiv, performance_mnist75sp, performance_spmotif05], ['MOLHIV', 'MNIST-75SP', 'SPMotif-0.5']):\n    ax.plot(ratios, data[0], label='PNA + ours', color='purple')\n    ax.plot(ratios, data[1], label='GIN + ours', color='orange')\n    ax.plot(ratios, data[2], label='PNA + GSAT', color='brown')\n    ax.plot(ratios, data[3], label='GIN + GSAT', color='yellow')\n\n    # Fill between lines\n    ax.fill_between(ratios, data[0], data[1], color='lightblue', alpha=0.5)\n    ax.fill_between(ratios, data[1], data[2], color='lightgreen', alpha=0.5)\n    ax.fill_between(ratios, data[2], data[3], color='lightcoral', alpha=0.5)\n\n    # Set labels and title\n    ax.set_xlabel('Ratio r')\n    ax.set_ylabel('Performance')\n    ax.set_title(title)\n    ax.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [120, 90, 60, 30, 1]\ny_ours = [75, 80, 85, 90, 95]\ny_acr = [77.5, 82.5, 87.5, 92.5, 95]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot lines\nax.plot(x, y_ours, 'o-', color='blue', label='Ours')\nax.plot(x, y_acr, 'o-', color='green', label='ACR')\n\n# Set labels and title\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Comparison of Top-1 Accuracy')\n\n# Add legend\nax.legend()\n\n# Show grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nratios = [40, 50, 60, 70, 80, 90, 100]\nperplexities = {\n    'AAPTQ': [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94],\n    'LLMa-7B (FP16)': [3.11, 3.32, 3.53, 3.63, 3.74, 3.94, 4.14],\n    'OWQ-4bit (FP16)': [3.32, 3.53, 3.63, 3.74, 3.94, 4.14, 4.34],\n    'GPTQ-4bit (FP16)': [3.53, 3.63, 3.74, 3.94, 4.14, 4.34, 4.54],\n    'LLM-QAT-4bit (FP16)': [3.63, 3.74, 3.94, 4.14, 4.34, 4.54, 4.74],\n    'LMM-QAT-4bit (INT8)': [3.74, 3.94, 4.14, 4.34, 4.54, 4.74, 4.94]\n}\n\n# Plotting\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\nfor model, perplexity in perplexities.items():\n    ax.plot(ratios, perplexity, label=model)\n\n# Adding annotations\nax.annotate('2.91 bit', xy=(40, 2.91), xytext=(45, 2.8),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('3.11 bit', xy=(40, 3.11), xytext=(45, 3.0),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('3.32 bit', xy=(40, 3.32), xytext=(45, 3.2),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('3.53 bit', xy=(40, 3.53), xytext=(45, 3.4),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('3.63 bit', xy=(40, 3.63), xytext=(45, 3.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('3.74 bit', xy=(40, 3.74), xytext=(45, 3.6),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('3.94 bit', xy=(40, 3.94), xytext=(45, 3.7),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Adding legend\nax.legend(loc='upper right')\n\n# Setting labels and title\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\nax.set_title('Perplexity vs Ratio of 4-bit Utilization')\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [67.32, 82.98, 89.53, 90.47, 92.41, 93.7, 96.75]\n\n# Create plot\nplt.figure(figsize=(5.0, 2.0))\nplt.plot(x, y, marker='o', color='blue')\n\n# Add labels and title\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\n\n# Set y-axis limits\nplt.ylim(70, 100)\n\n# Add grid\nplt.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\niterations = np.arange(9)\naverage = np.array([750, 740, 730, 720, 710, 700, 690, 680, 670])\nstd_dev = np.array([750, 740, 730, 720, 710, 700, 690, 680, 670])\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Fill between lines\nax.fill_between(iterations, average - std_dev, average + std_dev, color='lightblue', alpha=0.5)\n\n# Plot lines\nax.plot(iterations, average, 'bo-', label='Average')\nax.plot(iterations, std_dev, 'co-', label='Standard Deviation')\n\n# Labels and title\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\nax.set_title('N-ELBO vs Iterations')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nbaseline = np.array([5, 5, 5, 5, 5, 5, 5, 5])\nsoftmoe = np.array([6, 6, 6, 6, 6, 6, 6, 6])\ntop1moe = np.array([7, 7, 7, 7, 7, 7, 7, 7])\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plotting\nax1.plot(x, baseline, 'bo-', label='Baseline')\nax1.plot(x, softmoe, 'go-', label='SoftMoE')\nax1.plot(x, top1moe, 'mo-', label='Top1-MoE')\n\n# Setting labels and title\nax1.set_xlabel('Number of experts')\nax1.set_ylabel('Ribbon', color='b')\nax1.tick_params(axis='y', labelcolor='b')\n\nax2 = ax1.twinx()\nax2.plot(x, np.linspace(2.5, 3.5, len(x)), 'r-', label='DoN')\nax2.set_ylabel('DoN', color='r')\nax2.tick_params(axis='y', labelcolor='r')\n\n# Adding legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nvocab_sizes = [256, 512, 1024, 2048, 8192, 16384]\nbpe = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nwordpunct = [0.45, 0.55, 0.65, 0.75, 0.85, 0.95]\nwhitespace = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nax.plot(vocab_sizes, bpe, 'bo-', label='BPE')\nax.plot(vocab_sizes, wordpunct, 'o-', color='orange', label='Wordpunct')\nax.plot(vocab_sizes, whitespace, 'o-', color='green', label='Whitespaces')\n\n# Add markers for specific data points\nax.plot(256, 0.4, 'ro', markersize=5)\nax.plot(512, 0.5, 'ro', markersize=5)\nax.plot(1024, 0.6, 'ro', markersize=5)\nax.plot(2048, 0.7, 'ro', markersize=5)\nax.plot(8192, 0.8, 'ro', markersize=5)\nax.plot(16384, 0.9, 'ro', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Vocabulary Size')\nax.set_ylabel('Test set TPR | FPR = 10^-4')\nax.set_title('Test set TPR | FPR = 10^-4')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncompression_rate = [1, 2, 3, 4, 5, 6, 7]\nword_error_rate_cnn = [26.0, 28.0, 30.2, 32.4, 34.4, 36.8, 38.6]\nword_error_rate_cif = [17.9, 18.0, 18.2, 18.4, 18.6, 18.8, 19.0]\nword_error_rate_star = [15.8, 16.0, 16.2, 16.4, 16.6, 16.8, 17.0]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot each line with markers\nax.plot(compression_rate, word_error_rate_cnn, 'o-', color='lightpink', label='CNN')\nax.plot(compression_rate, word_error_rate_cif, 's-', color='purple', label='CIF')\nax.plot(compression_rate, word_error_rate_star, '^-', color='black', label='STAR')\n\n# Set labels and title\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\nax.set_title('Word Error Rate vs Compression Rate')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny_pilot = [80, 85, 90, 95, 90, 85, 80, 75]\ny_retrained_model = [75, 80, 85, 90, 95, 90, 85, 80]\ny_pretrained_model = [70, 75, 80, 85, 90, 95, 90, 85]\n\n# Create plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot lines\nax.plot(x, y_pilot, 'ro-', label='PILOTE')\nax.plot(x, y_retrained_model, 'bo-', label='Re-trained model')\nax.plot(x, y_pretrained_model, 'go-', label='Pre-trained model')\n\n# Add horizontal line\nax.axhline(y=75, color='g', linestyle='--')\n\n# Set labels and title\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\nax.set_title('Comparison of models')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 5, 10, 15, 20]\nxllm = [0.1, 0.12, 0.15, 0.18, 0.2]\nsingle_pass_llm = [0.1, 0.12, 0.15, 0.18, 0.2]\n\n# Plotting\nplt.figure(figsize=(4.0, 3.0))\nplt.plot(steps, xllm, 'o-', color='navy', label='xLLM')\nplt.plot(steps, single_pass_llm, 'o-', color='red', label='Single-Pass LLM')\n\n# Adding labels and title\nplt.xlabel('# of Steps')\nplt.ylabel('Avg Fidelity')\nplt.title('Fidelity vs Number of Steps')\n\n# Adding legend\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['All', 'MLP', 'GCN', 'NC', 'Neocgnn-Buddy', 'SEAL', 'Node2Vec']\nogbl_collab = [80, 75, 70, 65, 60, 55, 50]\nogbl_ppa = [80, 75, 70, 65, 60, 55, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot data\nax.plot(categories, ogbl_collab, marker='o', color='blue', label='ogbl-collab')\nax.plot(categories, ogbl_ppa, marker='o', color='orange', label='ogbl-ppa')\n\n# Set labels and title\nax.set_xlabel('Hits@50')\nax.set_ylabel('Hits@50')\nax.set_title('Hits@50')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlayers = [2, 4, 6, 8, 10, 12]\noutside_code_diff = [0.05, 0.05, 0.05, 0.05, 0.05, 0.05]\ninside_code_diff = [0.035, 0.035, 0.035, 0.035, 0.035, 0.035]\n\n# Create plot\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(layers, outside_code_diff, 'bo-', label='outside-code-diff')\nplt.plot(layers, inside_code_diff, 'ro-', label='inside-code-diff')\n\n# Add title and labels\nplt.title('Android')\nplt.xlabel('Layer')\nplt.ylabel('')\n\n# Add legend\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [6, 7, 8, 9]\ny_direct_100 = [0.5, 0.4, 0.3, 0.2]\ny_rfft_100 = [0.6, 0.5, 0.4, 0.3]\ny_scratchpad_100 = [0.7, 0.6, 0.5, 0.4]\ny_direct_5000 = [0.8, 0.7, 0.6, 0.5]\ny_scratchpad_5000 = [0.9, 0.8, 0.7, 0.6]\n\n# Create the plot\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y_direct_100, 'bo-', label='Direct (100 samples)')\nplt.plot(x, y_rfft_100, 'go-', label='RFFT (100 samples)')\nplt.plot(x, y_scratchpad_100, 'ro-', label='Scratchpad (100 samples)')\nplt.plot(x, y_direct_5000, 'co-', label='Direct (5000 samples)')\nplt.plot(x, y_scratchpad_5000, 'mo-', label='Scratchpad (5000 samples)')\n\n# Add legend\nplt.legend(loc='upper right')\n\n# Set labels and title\nplt.xlabel('Digit Length')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Different Sampling Techniques')\n\n# Show grid\nplt.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 20, 40, 60, 80]\ny_iaion = [0.225, 0.275, 0.325, 0.375, 0.425]\ny_clip = [0.225, 0.275, 0.325, 0.375, 0.425]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot lines\nax.plot(x, y_iaion, 'o-', label='iaion', color='orange')\nax.plot(x, y_clip, 's-', label='CLIP', color='black')\n\n# Set labels and title\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set y-axis limits\nax.set_ylim(0.2, 0.45)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny2 = [0.5, 0.55, 0.6, 0.65, 0.7]\ny3 = [0.5, 0.55, 0.6, 0.65, 0.7]\ny4 = [0.5, 0.55, 0.6, 0.65, 0.7]\ny5 = [0.5, 0.55, 0.6, 0.65, 0.7]\n\n# Plotting\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y1, 'o-', color='orange', label='CNN')\nplt.plot(x, y2, '^-', color='red', label='CNN+HMM')\nplt.plot(x, y3, 's-', color='blue', label='RF')\nplt.plot(x, y4, 'p-', color='cyan', label='RF+HMM')\n\n# Adding markers at specific points\nplt.scatter([20], [0.55], color='orange', marker='^')\nplt.scatter([40], [0.6], color='red', marker='^')\nplt.scatter([60], [0.65], color='blue', marker='^')\nplt.scatter([80], [0.7], color='cyan', marker='^')\nplt.scatter([100], [0.75], color='orange', marker='^')\n\n# Adding annotations\nplt.annotate('CNN', (20, 0.55), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nplt.annotate('CNN+HMM', (40, 0.6), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nplt.annotate('RF', (60, 0.65), textcoords=\"offset points\", xytext=(-10,10), ha='center')\nplt.annotate('RF+HMM', (80, 0.7), textcoords=\"offset points\", xytext=(-10,10), ha='center')\n\n# Adding vertical line\nplt.axvline(x=20, color='black', linestyle='--', linewidth=1)\n\n# Labels and title\nplt.xlabel('No. of Users in Development Set')\nplt.ylabel('F1')\nplt.title('Performance Metrics')\n\n# Legend\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.1]\n\n# Create the plot\nfig, ax1 = plt.subplots(figsize=(8.0, 7.0))\n\n# Plotting the first line with a blue color\ncolor = 'tab:blue'\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('WER (%)', color=color)\nax1.plot(x, y1, color=color, marker='o', label='IHM')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for AMI (dev)\nax2 = ax1.twinx()\ncolor = 'tab:orange'\nax2.set_ylabel('AMI (dev) (%)', color=color)\nax2.plot(x, y2, color=color, marker='^', label='SDM')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Adding grid lines\nax1.yaxis.grid(True, linestyle='--', linewidth=0.5)\nax2.yaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Adding markers and labels\nfor i, txt in enumerate(y1):\n    ax1.annotate(f'{txt:.2f}%', (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nfor i, txt in enumerate(y2):\n    ax2.annotate(f'{txt:.2f}%', (x[i], y2[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Adding legend\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Setting title\nplt.title('WAV2VEC 2.0')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.logspace(-7, -4, 10)\ny1 = np.linspace(1, 6, 10)\ny2 = np.linspace(1, 6, 10)\ny3 = np.linspace(1, 6, 10)\ny4 = np.linspace(1, 6, 10)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot lines\nax.plot(x, y1, 'o-', color='blue', label='empirical relat. (B2=8.0)')\nax.plot(x, y2, 'o-', color='orange', label='M-LVQ-4x8-10')\nax.plot(x, y3, 'o-', color='green', label='M-LVQ-4x8-100')\nax.plot(x, y4, 'o-', color='purple', label='M-LVQ-4x8-256')\n\n# Set labels and title\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\nax.set_title('')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Set grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nratios = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nperformance_pna_ours = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6])\nperformance_gin_ours = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6])\n\n# Create figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Plot for SPMotif-0.5\naxes[0].plot(ratios, performance_pna_ours, 'o-', color='purple', label='PNA + ours')\naxes[0].plot(ratios, performance_gin_ours, 'o-', color='orange', label='GIN + ours')\naxes[0].fill_between(ratios, performance_pna_ours, performance_gin_ours, color='lightblue', alpha=0.5)\naxes[0].set_title('SPMotif-0.5')\naxes[0].set_xlabel('Ratio r')\naxes[0].set_ylabel('Performance')\naxes[0].set_ylim(0.4, 1.0)\naxes[0].legend()\n\n# Plot for SPMotif-0.7\naxes[1].plot(ratios, performance_pna_ours, 'o-', color='purple', label='PNA + ours')\naxes[1].plot(ratios, performance_gin_ours, 'o-', color='orange', label='GIN + ours')\naxes[1].fill_between(ratios, performance_pna_ours, performance_gin_ours, color='lightcoral', alpha=0.5)\naxes[1].set_title('SPMotif-0.7')\naxes[1].set_xlabel('Ratio r')\naxes[1].set_ylabel('Performance')\naxes[1].set_ylim(0.4, 1.0)\naxes[1].legend()\n\n# Plot for SPMotif-0.9\naxes[2].plot(ratios, performance_pna_ours, 'o-', color='purple', label='PNA + ours')\naxes[2].plot(ratios, performance_gin_ours, 'o-', color='orange', label='GIN + ours')\naxes[2].fill_between(ratios, performance_pna_ours, performance_gin_ours, color='lightyellow', alpha=0.5)\naxes[2].set_title('SPMotif-0.9')\naxes[2].set_xlabel('Ratio r')\naxes[2].set_ylabel('Performance')\naxes[2].set_ylim(0.4, 1.0)\naxes[2].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nensemble_sizes = [6, 9, 12, 15, 18, 21, 24, 27, 30]\naccuracies = [74.5, 75.5, 76.5, 77.5, 78.5, 79.5, 80.5, 81.5, 82.5]\n\n# Create the plot\nplt.figure(figsize=(6.0, 5.0))\nplt.plot(ensemble_sizes, accuracies, color='blue', linewidth=2)\nplt.fill_between(ensemble_sizes, accuracies, color='lightblue', alpha=0.5)\n\n# Add labels and title\nplt.xlabel('Ensemble Size')\nplt.ylabel('Accuracy')\nplt.title('Model Accuracy vs Ensemble Size')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nepochs = np.array([3, 10, 30])\ngpt_neo = np.array([0.8, 0.7, 0.6])\ngpt_5 = np.array([0.7, 0.6, 0.5])\ngpt_3 = np.array([0.6, 0.5, 0.4])\ngpt_7 = np.array([0.5, 0.4, 0.3])\ngpt_10 = np.array([0.4, 0.3, 0.2])\ngpt_30 = np.array([0.3, 0.2, 0.1])\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\nax.plot(epochs, gpt_neo, 's-', color='black', label='GPT-Neo')\nax.plot(epochs, gpt_5, 'o-', color='yellow', label='5')\nax.plot(epochs, gpt_3, '^-', color='green', label='3')\nax.plot(epochs, gpt_7, 'D-', color='red', label='7')\nax.plot(epochs, gpt_10, 'p-', color='blue', label='10')\nax.plot(epochs, gpt_30, 'H-', color='brown', label='30')\n\n# Adding labels and title\nax.set_xlabel('# Epochs')\nax.set_ylabel('MA')\nax.set_title('Performance Metrics')\n\n# Adding legend\nax.legend(loc='upper left')\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([96, 192, 336, 720])\ny1 = np.array([0.135, 0.135, 0.135, 0.135])\ny2 = np.array([0.14, 0.14, 0.14, 0.14])\ny3 = np.array([0.145, 0.145, 0.145, 0.145])\ny4 = np.array([0.15, 0.15, 0.15, 0.15])\ny5 = np.array([0.155, 0.155, 0.155, 0.155])\ny6 = np.array([0.16, 0.16, 0.16, 0.16])\ny7 = np.array([0.165, 0.165, 0.165, 0.165])\ny8 = np.array([0.17, 0.17, 0.17, 0.17])\ny9 = np.array([0.175, 0.175, 0.175, 0.175])\ny10 = np.array([0.18, 0.18, 0.18, 0.18])\ny11 = np.array([0.185, 0.185, 0.185, 0.185])\ny12 = np.array([0.19, 0.19, 0.19, 0.19])\n\n# Plot\nfig, ax = plt.subplots(figsize=(15.0, 4.0))\n\nax.plot(x, y1, 'o-', color='blue', label='pred_length=96')\nax.plot(x, y2, 'o-', color='orange', label='pred_length=192')\nax.plot(x, y3, 'o-', color='green', label='pred_length=336')\nax.plot(x, y4, 'o-', color='red', label='pred_length=720')\n\n# Customize plot\nax.set_title('Traffic')\nax.set_xlabel('Time')\nax.set_ylabel('MSE')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [224, 128, 64, 32]\ny1 = [70, 60, 50, 40]\ny2 = [75, 65, 55, 45]\ny3 = [80, 70, 60, 50]\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 4))\n\n# Plot for Serial\nax1.plot(x, y1, 'o-', color='orange', label='ImageNet-1k')\nax1.plot(x, y2, 'o-', color='darkorange', label='ImageNet-C/P (Fog)')\nax1.set_title('Serial (n=8, m=1)')\nax1.set_xlabel('Time')\nax1.set_ylabel('Top-1 Acc. (%)')\nax1.set_yticks(range(0, 81, 10))\nax1.legend()\n\n# Plot for Parallel\nax2.plot(x, y3, 'o-', color='blue', label='ImageNet-1k (Fog)')\nax2.plot(x, y2, 'o-', color='cyan', label='ImageNet-C/P (Fog)')\nax2.set_title('Parallel (n=2, m=4)')\nax2.set_xlabel('Time')\nax2.set_ylabel('Top-1 Acc. (%)')\nax2.set_yticks(range(0, 81, 10))\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nsnr = np.array([5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0])\njpeglpd = np.array([90, 85, 80, 75, 70, 65, 60, 55, 50])\ndeepjscckwoofdm = np.array([80, 75, 70, 65, 60, 55, 50, 45, 40])\ndeepjscckwofdm = np.array([70, 65, 60, 55, 50, 45, 40, 35, 30])\nours = np.array([60, 55, 50, 45, 40, 35, 30, 25, 20])\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nax.plot(snr, jpeglpd, 'bo-', label='JPEGLPD')\nax.plot(snr, deepjscckwoofdm, 'o-', color='orange', label='DEEPJSCC w/o OFDM')\nax.plot(snr, deepjscckwofdm, 'o-', color='green', label='DEEPJSCC w/ OFDM')\nax.plot(snr, ours, 'ro-', label='OURS')\n\n# Fill between lines\nax.fill_between(snr, jpeglpd, 100, color='lightblue', alpha=0.5)\nax.fill_between(snr, jpeglpd, 80, color='lightgreen', alpha=0.5)\nax.fill_between(snr, jpeglpd, 60, color='lightcoral', alpha=0.5)\nax.fill_between(snr, jpeglpd, 40, color='lightyellow', alpha=0.5)\n\nax.fill_between(snr, deepjscckwoofdm, 100, color='lightblue', alpha=0.5)\nax.fill_between(snr, deepjscckwoofdm, 80, color='lightgreen', alpha=0.5)\nax.fill_between(snr, deepjscckwoofdm, 60, color='lightcoral', alpha=0.5)\nax.fill_between(snr, deepjscckwoofdm, 40, color='lightyellow', alpha=0.5)\n\nax.fill_between(snr, deepjscckwofdm, 100, color='lightblue', alpha=0.5)\nax.fill_between(snr, deepjscckwofdm, 80, color='lightgreen', alpha=0.5)\nax.fill_between(snr, deepjscckwofdm, 60, color='lightcoral', alpha=0.5)\nax.fill_between(snr, deepjscckwofdm, 40, color='lightyellow', alpha=0.5)\n\nax.fill_between(snr, ours, 100, color='lightblue', alpha=0.5)\nax.fill_between(snr, ours, 80, color='lightgreen', alpha=0.5)\nax.fill_between(snr, ours, 60, color='lightcoral', alpha=0.5)\nax.fill_between(snr, ours, 40, color='lightyellow', alpha=0.5)\n\n# Legend\nax.legend(loc='upper left')\n\n# Labels and title\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\nax.set_title('Comparison of Different Methods')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 50) * 2 + 1\ny2 = x**2 / 10000 + 1\ny3 = np.exp(x / 100) - 1\ny4 = np.log(x + 1)\n\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 8.0), sharex=True)\n\n# Plot Line 1\nax1.plot(x, y1, 'm-', label='Line 1 (Sinusoidal)')\nax1.set_title('Performance Value')\nax1.set_ylabel('Performance Scale')\nax1.legend()\n\n# Plot Line 2\nax1.plot(x, y2, 'b-', label='Line 2 (Quadratic)')\nax1.legend()\n\n# Plot Line 3\nax2.plot(x, y3, 'g-', label='Line 3 (Random Noise)')\nax2.set_title('Exponential Scale')\nax2.set_xlabel('Gradient Steps (62.5K)')\nax2.set_ylabel('Exponential Scale')\nax2.legend()\n\n# Plot Line 4\nax2.plot(x, y4, 'r-', label='Line 4 (Exponential Focus)')\nax2.legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for Line 1\nx_line1 = np.array([0, 50, 100, 150, 200])\ny_line1 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\n\n# Data for Line 2\nx_line2 = np.array([0, 50, 100, 150, 200])\ny_line2 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\n\n# Data for Line 3 (Polynomial Trend)\nx_line3 = np.array([0, 50, 100, 150, 200])\ny_line3 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\n\n# Create a figure with two subplots side by side\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot Line 1\nax1.plot(x_line1, y_line1, 'o-', color='orange', label='Line 1')\nax1.set_title('Line 1')\nax1.set_xlabel('Gradient Steps (x 62.5K)')\nax1.set_ylabel('Polynomial Value')\n\n# Plot Line 2\nax1.plot(x_line2, y_line2, 'bo-', color='blue', label='Line 2')\nax1.legend()\n\n# Plot Line 3 (Polynomial Trend)\nax2.plot(x_line3, y_line3, 'o-', color='green', label='Line 3')\nax2.set_title('Polynomial Trend (from Line 2)')\nax2.set_xlabel('Gradient Steps (x 62.5K)')\nax2.set_ylabel('Polynomial Value')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['All', 'MLP', 'GCN', 'NCN', 'NeoGNN-BUDDY', 'SEAL', 'Node2Vec']\nogbl_2022 = [70, 68, 65, 67, 72, 75, 73]\nogbl_2023 = [72, 70, 67, 69, 74, 77, 75]\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12.0, 5.0))\n\n# Plot for ogbl-collab 2022\nax1.plot(categories, ogbl_2022, 'o-', color='navy', label='ogbl-collab 2022')\nax1.set_title('ogbl-collab Results')\nax1.set_xlabel('Categories')\nax1.set_ylabel('Hits @ 50')\nax1.legend()\n\n# Plot for ogbl-collab 2023\nax2.plot(categories, ogbl_2023, 'o-', color='orange', label='ogbl-collab 2023')\nax2.set_title('ogbl-ppa Results')\nax2.set_xlabel('Categories')\nax2.set_ylabel('Hits @ 50')\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([10, 20, 30, 40, 50, 60])\ny_standard = np.array([10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10])\ny_constrained = np.array([10**-12, 10**-12, 10**-12, 10**-12, 10**-12, 10**-12])\ny_experimental = np.array([10**-14, 10**-14, 10**-14, 10**-14, 10**-14, 10**-14])\ny_hypothetical = np.array([10**-16, 10**-16, 10**-16, 10**-16, 10**-16, 10**-16])\n\n# Plot\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y_standard, 'bo-', label='Standard')\nplt.plot(x, y_constrained, 'or-', label='Constrained')\nplt.plot(x, y_experimental, 'g^-', label='Experimental')\nplt.plot(x, y_hypothetical, 'mp-', label='Hypothetical')\n\n# Markers\nplt.scatter(10, 10**-10, color='blue', marker='o', label='10')\nplt.scatter(20, 10**-12, color='orange', marker='o', label='20')\nplt.scatter(30, 10**-14, color='green', marker='o', label='30')\nplt.scatter(40, 10**-16, color='purple', marker='o', label='40')\nplt.scatter(50, 10**-18, color='blue', marker='o', label='50')\nplt.scatter(60, 10**-20, color='orange', marker='o', label='60')\n\n# Labels and title\nplt.xlabel('N')\nplt.ylabel('Precision')\nplt.title('Comparison of Different Models')\nplt.legend()\n\n# Grid\nplt.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([10**i for i in range(4)])\ny_standard = np.array([10**i for i in range(4)])\ny_constrained = np.array([10**i * 0.9 for i in range(4)])\ny_innovative = np.array([10**i * 0.8 for i in range(4)])\ny_experimental = np.array([10**i * 0.7 for i in range(4)])\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 8.0))\n\n# Plotting Graph Variation 1\naxes[0, 0].plot(x, y_standard, 'o-', color='b', label='Standard')\naxes[0, 0].plot(x, y_constrained, 'o-', color='m', label='Constrained')\naxes[0, 0].plot(x, y_innovative, 'o-', color='g', label='Innovative')\naxes[0, 0].plot(x, y_experimental, 'o-', color='y', label='Experimental')\naxes[0, 0].set_title('Graph Variation 1')\naxes[0, 0].set_xlabel('N')\naxes[0, 0].set_ylabel('Peak Performance')\naxes[0, 0].legend()\n\n# Plotting Graph Variation 2\naxes[0, 1].plot(x, y_standard, 'o-', color='b', label='Standard')\naxes[0, 1].plot(x, y_constrained, 'o-', color='m', label='Constrained')\naxes[0, 1].plot(x, y_innovative, 'o-', color='g', label='Innovative')\naxes[0, 1].plot(x, y_experimental, 'o-', color='y', label='Experimental')\naxes[0, 1].set_title('Graph Variation 2')\naxes[0, 1].set_xlabel('N')\naxes[0, 1].set_ylabel('Peak Performance')\naxes[0, 1].legend()\n\n# Plotting Graph Variation 3\naxes[1, 0].plot(x, y_standard, 'o-', color='b', label='Standard')\naxes[1, 0].plot(x, y_constrained, 'o-', color='m', label='Constrained')\naxes[1, 0].plot(x, y_innovative, 'o-', color='g', label='Innovative')\naxes[1, 0].plot(x, y_experimental, 'o-', color='y', label='Experimental')\naxes[1, 0].set_title('Graph Variation 3')\naxes[1, 0].set_xlabel('N')\naxes[1, 0].set_ylabel('Peak Performance')\naxes[1, 0].legend()\n\n# Plotting Graph Variation 4\naxes[1, 1].plot(x, y_standard, 'o-', color='b', label='Standard')\naxes[1, 1].plot(x, y_constrained, 'o-', color='m', label='Constrained')\naxes[1, 1].plot(x, y_innovative, 'o-', color='g', label='Innovative')\naxes[1, 1].plot(x, y_experimental, 'o-', color='y', label='Experimental')\naxes[1, 1].set_title('Graph Variation 4')\naxes[1, 1].set_xlabel('N')\naxes[1, 1].set_ylabel('Peak Performance')\naxes[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ntime = np.arange(0, 26)\nstandard_activity = np.sin(time / 5) * 0.5 + 0.5\ninnovative_activity = np.sin(time / 5 - np.pi / 2) * 0.5 + 0.5\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 10.0), sharex=True)\n\n# Plot the first subplot\nax1.plot(time, standard_activity, 'b-', label='Standard Activity')\nax1.set_title('Daytime Activity Monitoring')\nax1.set_ylabel('Activity Level')\nax1.set_ylim(-1.5, 1.5)\nax1.legend()\n\n# Plot the second subplot\nax2.plot(time, innovative_activity, 'r-', label='Innovative Activity')\nax2.set_title('Nighttime Activity Monitoring')\nax2.set_xlabel('Time (Hours)')\nax2.set_ylabel('Activity Level')\nax2.set_ylim(-1.5, 1.5)\nax2.legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntime = np.arange(0, 13)\nstandard_performance = np.array([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4])\ninnovative_performance = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6])\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot lines\nax.plot(time, standard_performance, 'b-', label='Standard Performance')\nax.plot(time, innovative_performance, 'r-', label='Innovative Performance')\n\n# Fill between lines with different colors\nax.fill_between(time, standard_performance, innovative_performance, where=standard_performance < innovative_performance, color='lightblue', alpha=0.5)\nax.fill_between(time, standard_performance, innovative_performance, where=standard_performance > innovative_performance, color='lightcoral', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Time (Months)')\nax.set_ylabel('Performance Index')\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nmonthly_sales = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100]\naverage_temperature = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(months, monthly_sales, 'o-', color='navy', label='Monthly Sales')\nplt.plot(months, average_temperature, 'o-', color='darkred', label='Average Temperature')\n\n# Marking specific points\nplt.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \n            [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], \n            color='navy')\nplt.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \n            [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], \n            color='darkred')\n\n# Adding labels and title\nplt.xlabel('Month')\nplt.ylabel('Temperature (\u00b0C)')\nplt.title('Sales and Temperature Correlation Over a Year')\nplt.legend()\n\n# Setting y-axis limits\nplt.ylim(800, 2100)\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for each plot\ntime = [0, 2, 4, 6, 8, 10]\ngrowth_values = [1.3, 0.8, 0.3, 0.3, 0.8, 1.0]\ndecay_values = [1.3, 0.8, 0.3, 0.3, 0.8, 1.0]\noscillation_values = [1.0, 1.2, 1.0, 1.2, 1.0, 1.2]\n\n# Create a figure with a specified size\nfig, axes = plt.subplots(3, 1, figsize=(6.0, 9.0), sharex=True)\n\n# Plot 1: Exponential Growth Over Time\naxes[0].plot(time, growth_values, 'g-', label='Growth')\naxes[0].set_title('Exponential Growth Over Time')\naxes[0].set_ylabel('Value')\naxes[0].legend()\n\n# Plot 2: Exponential Decay Over Time\naxes[1].plot(time, decay_values, 'r-', label='Decay')\naxes[1].set_title('Exponential Decay Over Time')\naxes[1].set_ylabel('Value')\naxes[1].legend()\n\n# Plot 3: Oscillatory Behavior Over Time\naxes[2].plot(time, oscillation_values, 'b-', label='Oscillation')\naxes[2].set_title('Oscillatory Behavior Over Time')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Value')\naxes[2].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny2 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny3 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot lines\nax.plot(x, y1, 'o-', color='blue', label='5-shot direct')\nax.plot(x, y2, 'o-', color='orange', label='5-shot scratchpad')\nax.plot(x, y3, 'o-', color='green', label='5-shot rule-following')\n\n# Set labels and title\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Different Shooting Methods')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ntime = [0.0, 2.5, 5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0]\nsmooth_data = [0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5]\ndiff_data = [100, 90, 80, 70, 60, 50, 40, 30, 20]\ncumulative_sum = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n# Create a figure with subplots\nfig, axes = plt.subplots(3, 1, figsize=(5.0, 10.0), sharex=True)\n\n# Plot 1: Smooth Data\naxes[0].plot(time, smooth_data, 'p-', color='purple', label='Smooth Data')\naxes[0].set_title('Smooth Representation')\naxes[0].set_ylabel('Value')\naxes[0].legend()\n\n# Plot 2: First Difference Data\naxes[1].plot(time, diff_data, 'o-', color='orange', label='Difference Data')\naxes[1].set_title('First Difference of Data')\naxes[1].set_ylabel('Delta Value')\naxes[1].legend()\n\n# Plot 3: Cumulative Sum Over Time\naxes[2].plot(time, cumulative_sum, 's-', color='green', label='Cumulative Sum')\naxes[2].set_title('Cumulative Sum Over Time')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Cumulative Value')\naxes[2].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for each plot\ntime = np.arange(10)\nsin_wave = np.sin(time)\ncos_wave = np.cos(time)\nexp_decay = np.exp(-time / 5)\nlog_growth = np.log(time + 1)\n\n# Create a figure with a specific size\nfig, axes = plt.subplots(nrows=4, ncols=1, figsize=(6.0, 12.0))\n\n# Plot 1: Sin Wave\naxes[0].plot(time, sin_wave, color='magenta', label='Sin Wave')\naxes[0].set_title('Sin Wave')\naxes[0].set_ylabel('Amplitude')\naxes[0].set_xlabel('Time')\n\n# Plot 2: Cosine Wave\naxes[1].plot(time, cos_wave, color='green', label='Cos Wave')\naxes[1].set_title('Cosine Pattern')\naxes[1].set_ylabel('Amplitude')\naxes[1].set_xlabel('Time')\n\n# Plot 3: Exponential Decay\naxes[2].plot(time, exp_decay, color='blue', label='Exp Decay')\naxes[2].set_title('Exponential Decay')\naxes[2].set_ylabel('Value')\naxes[2].set_xlabel('Time')\n\n# Plot 4: Logarithmic Growth\naxes[3].plot(time, log_growth, color='red', label='Log Growth')\naxes[3].set_title('Logarithmic Growth')\naxes[3].set_ylabel('Value')\naxes[3].set_xlabel('Time')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\ny_positive = np.array([79.0, 79.5, 80.0, 80.5, 81.0, 81.5])\ny_negative = np.array([79.0, 79.5, 80.0, 80.5, 81.0, 81.5])\ny_contrastive = np.array([76.0, 76.5, 77.0, 77.5, 78.0, 78.5])\ny_fuzzy = np.array([73.0, 73.5, 74.0, 74.5, 75.0, 75.5])\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(9.0, 6.0))\n\n# Plot Positive Bound\naxes[0, 0].plot(x, y_positive, 'o-', color='blue')\naxes[0, 0].set_title('Positive bound')\naxes[0, 0].set_xlabel('Time (s)')\naxes[0, 0].set_ylabel('Weight (kg)')\naxes[0, 0].set_ylim(74, 84)\naxes[0, 0].grid(True)\n\n# Plot Negative Bound\naxes[0, 1].plot(x, y_negative, 'o-', color='blue')\naxes[0, 1].set_title('Negative bound')\naxes[0, 1].set_xlabel('Time (s)')\naxes[0, 1].set_ylabel('Weight (kg)')\naxes[0, 1].set_ylim(74, 84)\naxes[0, 1].grid(True)\n\n# Plot Contrastive Loss Weight\naxes[1, 0].plot(x, y_contrastive, 'o-', color='blue')\naxes[1, 0].set_title('Contrastive loss weight')\naxes[1, 0].set_xlabel('Time (s)')\naxes[1, 0].set_ylabel('Weight (kg)')\naxes[1, 0].set_ylim(53, 85)\naxes[1, 0].grid(True)\n\n# Plot Fuzzy Coefficient\naxes[1, 1].plot(x, y_fuzzy, 'o-', color='blue')\naxes[1, 1].set_title('Fuzzy coefficient')\naxes[1, 1].set_xlabel('Time (s)')\naxes[1, 1].set_ylabel('Weight (kg)')\naxes[1, 1].set_ylim(53, 85)\naxes[1, 1].grid(True)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0.1, 1.0, 10)\ny1 = np.random.normal(75, 3, 10)\ny2 = np.random.normal(75, 3, 10)\ny3 = np.random.normal(75, 3, 10)\ny4 = np.random.normal(75, 3, 10)\ny5 = np.random.normal(75, 3, 10)\ny6 = np.random.normal(75, 3, 10)\n\n# Create figure and axis\nfig, axes = plt.subplots(nrows=2, ncols=3, figsize=(12.0, 8.0), sharex=True, sharey=True)\n\n# Plot each dataset\naxes[0, 0].plot(x, y1, 'r-', label='Positive Bound')\naxes[0, 0].set_title('Positive Bound')\naxes[0, 0].set_ylabel('Score')\n\naxes[0, 1].plot(x, y2, 'g-', label='Negative Bound')\naxes[0, 1].set_title('Negative Bound')\n\naxes[0, 2].plot(x, y3, 'b-', label='Contrastive Loss Weight')\naxes[0, 2].set_title('Contrastive Loss Weight')\n\naxes[1, 0].plot(x, y4, 'm-', label='Fuzzy Coefficient')\naxes[1, 0].set_title('Fuzzy Coefficient')\naxes[1, 0].set_xlabel('Time (s)')\naxes[1, 0].set_ylabel('Score')\n\naxes[1, 1].plot(x, y5, 'c-', label='Additional Metric 1')\naxes[1, 1].set_title('Additional Metric 1')\n\naxes[1, 2].plot(x, y6, 'y-', label='Additional Metric 2')\naxes[1, 2].set_title('Additional Metric 2')\n\n# Add legend to the first subplot\naxes[0, 0].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\ndry_levels = [1.2, 1.0, 0.8, 0.6]\nrain_levels = [1.3, 1.1, 0.9, 0.7]\nsnow_levels = [1.4, 1.2, 1.0, 0.8]\n\n# Create subplots\nfig, axes = plt.subplots(1, 3, figsize=(12, 4))\n\n# Plot for Dry vs Rain\naxes[0].plot(driving_styles, dry_levels, 'o-', color='red')\naxes[0].plot(driving_styles, rain_levels, 'o-', color='blue')\naxes[0].set_title('Dry vs Rain')\naxes[0].set_xlabel('Driving Style')\naxes[0].set_ylabel('Relaxation Level')\naxes[0].legend(['Dry', 'Rain'], loc='upper right')\n\n# Plot for Snow vs Fog\naxes[1].plot(driving_styles, snow_levels, 'o-', color='green')\naxes[1].set_title('Snow vs Fog')\naxes[1].set_xlabel('Driving Style')\naxes[1].set_ylabel('Relaxation Level')\naxes[1].legend(['Snow', 'Fog'], loc='upper right')\n\n# Plot for Rain vs Snow\naxes[2].plot(driving_styles, rain_levels, 'o-', color='red')\naxes[2].plot(driving_styles, snow_levels, 'o-', color='blue')\naxes[2].set_title('Rain vs Snow')\naxes[2].set_xlabel('Driving Style')\naxes[2].set_ylabel('Relaxation Level')\naxes[2].legend(['Rain', 'Snow'], loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nn_aug = np.array([0, 0.125, 0.25, 0.5, 1, 2, 4, 8])\ncontent = np.array([8, 7, 6, 5, 4, 3, 2, 1])\norganization = np.array([6, 5, 4, 3, 2, 1, 0, -1])\nlanguage = np.array([4, 3, 2, 1, 0, -1, -2, -3])\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\nax.plot(n_aug, content, 'bo-', label='Content')\nax.plot(n_aug, organization, 'ro-', label='Organization')\nax.plot(n_aug, language, 'go-', label='Language')\n\n# Markers\nfor i, txt in enumerate(['Aug 0', 'Aug 1', 'Aug 2', 'Aug 4', 'Aug 8']):\n    ax.annotate(txt, (n_aug[i], content[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Labels and title\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\nax.legend()\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndecomposition_norms = np.array([0, 20, 40, 60, 80])\naccuracy_coco_10k = np.array([0.60, 0.65, 0.70, 0.75, 0.80])\naccuracy_laion_10k = np.array([0.55, 0.60, 0.65, 0.70, 0.75])\naccuracy_coco_5k = np.array([0.55, 0.60, 0.65, 0.70, 0.75])\naccuracy_laion_5k = np.array([0.60, 0.65, 0.70, 0.75, 0.80])\n\n# Create figure and subplots\nfig, axes = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot 1: COCO 10K\naxes[0].plot(decomposition_norms, accuracy_coco_10k, 'ro-', label='COCO (10k)')\naxes[0].set_title('COCO 10K')\naxes[0].set_xlabel('Decomposition IO Norm')\naxes[0].set_ylabel('Accuracy')\naxes[0].set_ylim(0.55, 0.80)\naxes[0].legend()\n\n# Plot 2: LAION 10K\naxes[1].plot(decomposition_norms, accuracy_laion_10k, 'bo-', label='LAION (10k)')\naxes[1].set_title('LAION 10K')\naxes[1].set_xlabel('Decomposition IO Norm')\naxes[1].set_ylabel('Accuracy')\naxes[1].set_ylim(0.55, 0.80)\naxes[1].legend()\n\n# Plot 3: COCO & LAION 5K\naxes[2].plot(decomposition_norms, accuracy_coco_5k, 'go-', label='COCO (5k)')\naxes[2].plot(decomposition_norms, accuracy_laion_5k, 'mo-', label='LAION (5k)')\naxes[2].set_title('COCO & LAION 5K')\naxes[2].set_xlabel('Decomposition IO Norm')\naxes[2].set_ylabel('Accuracy')\naxes[2].set_ylim(0.55, 0.80)\naxes[2].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nparam_rate = np.array([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2])\nerror_rate_vs_learning_rate_64 = np.array([0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04])\nerror_rate_vs_learning_rate_128 = np.array([0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04])\n\naccuracy_vs_dropout_64 = np.array([0.86, 0.84, 0.82, 0.80, 0.78, 0.76, 0.74, 0.72])\naccuracy_vs_dropout_128 = np.array([0.86, 0.84, 0.82, 0.80, 0.78, 0.76, 0.74, 0.72])\n\n# Create figure and axis\nfig, axes = plt.subplots(3, 2, figsize=(12.0, 9.0))\n\n# Plot Error Rate vs Learning Rate\naxes[0, 0].plot(param_rate, error_rate_vs_learning_rate_64, 'b-', label='Error Rate vs Learning Rate (Batch Size=64)')\naxes[0, 0].plot(param_rate, error_rate_vs_learning_rate_128, 'm-', label='Error Rate vs Learning Rate (Batch Size=128)')\naxes[0, 0].set_title('Error Rate vs Learning Rate')\naxes[0, 0].set_xlabel('Parameter Rate')\naxes[0, 0].set_ylabel('Error Rate')\naxes[0, 0].set_ylim(0.08, 0.18)\naxes[0, 0].legend()\n\n# Plot Accuracy vs Dropout\naxes[0, 1].plot(param_rate, accuracy_vs_dropout_64, 'b-', label='Accuracy vs Dropout (Batch Size=64)')\naxes[0, 1].plot(param_rate, accuracy_vs_dropout_128, 'm-', label='Accuracy vs Dropout (Batch Size=128)')\naxes[0, 1].set_title('Accuracy vs Dropout')\naxes[0, 1].set_xlabel('Parameter Rate')\naxes[0, 1].set_ylabel('Accuracy')\naxes[0, 1].set_ylim(0.72, 0.86)\naxes[0, 1].legend()\n\n# Plot Metric vs Parameter Rate\naxes[1, 0].plot(param_rate, error_rate_vs_learning_rate_64, 'b-', label='Error Rate vs Learning Rate (Batch Size=64)')\naxes[1, 0].plot(param_rate, error_rate_vs_learning_rate_128, 'm-', label='Error Rate vs Learning Rate (Batch Size=128)')\naxes[1, 0].set_title('Metric vs Parameter Rate')\naxes[1, 0].set_xlabel('Parameter Rate')\naxes[1, 0].set_ylabel('Metric')\naxes[1, 0].set_ylim(0.08, 0.18)\naxes[1, 0].legend()\n\n# Plot Accuracy vs Dropout\naxes[1, 1].plot(param_rate, accuracy_vs_dropout_64, 'b-', label='Accuracy vs Dropout (Batch Size=64)')\naxes[1, 1].plot(param_rate, accuracy_vs_dropout_128, 'm-', label='Accuracy vs Dropout (Batch Size=128)')\naxes[1, 1].set_title('Accuracy vs Dropout')\naxes[1, 1].set_xlabel('Parameter Rate')\naxes[1, 1].set_ylabel('Accuracy')\naxes[1, 1].set_ylim(0.72, 0.86)\naxes[1, 1].legend()\n\n# Plot Error Rate vs Learning Rate\naxes[2, 0].plot(param_rate, error_rate_vs_learning_rate_64, 'b-', label='Error Rate vs Learning Rate (Batch Size=64)')\naxes[2, 0].plot(param_rate, error_rate_vs_learning_rate_128, 'm-', label='Error Rate vs Learning Rate (Batch Size=128)')\naxes[2, 0].set_title('Error Rate vs Learning Rate')\naxes[2, 0].set_xlabel('Parameter Rate')\naxes[2, 0].set_ylabel('Error Rate')\naxes[2, 0].set_ylim(0.08, 0.18)\naxes[2, 0].legend()\n\n# Plot Accuracy vs Dropout\naxes[2, 1].plot(param_rate, accuracy_vs_dropout_64, 'b-', label='Accuracy vs Dropout (Batch Size=64)')\naxes[2, 1].plot(param_rate, accuracy_vs_dropout_128, 'm-', label='Accuracy vs Dropout (Batch Size=128)')\naxes[2, 1].set_title('Accuracy vs Dropout')\naxes[2, 1].set_xlabel('Parameter Rate')\naxes[2, 1].set_ylabel('Accuracy')\naxes[2, 1].set_ylim(0.72, 0.86)\naxes[2, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_base_model_1 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\ny_our_model_1 = [0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.075, 0.035, 0.015]\n\ny_base_model_2 = [0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2]\ny_our_model_2 = [0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25]\n\n# Create a figure and axis with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot data on the first subplot\nax1.plot(x, y_base_model_1, 'bo-', label='Base Model')\nax1.plot(x, y_our_model_1, 'ro-', label='Our Model')\nax1.set_xlabel('Training Iterations')\nax1.set_ylabel('Metric Value')\nax1.set_title('Metric 1')\nax1.legend()\n\n# Plot data on the second subplot\nax2.plot(x, y_base_model_2, 'bo-', label='Base Model')\nax2.plot(x, y_our_model_2, 'ro-', label='Our Model')\nax2.set_xlabel('Training Iterations')\nax2.set_ylabel('Metric Value')\nax2.set_title('Metric 2')\n\n# Add a legend outside the plot area\nfig.legend(loc='upper right', bbox_to_anchor=(1.1, 1), bbox_transform=ax1.transAxes)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\nbase_model = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\nour_model = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Plotting\nplt.figure(figsize=(5.0, 3.0))\nplt.plot(x, base_model, label='Base Model', color='blue')\nplt.plot(x, our_model, label='Our Model', color='cyan')\n\n# Adding title and labels\nplt.title('Accuracy')\nplt.xlabel('Training Iterations')\nplt.ylabel('Metric Value')\n\n# Adding legend\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([10**1, 2*10**1, 3*10**1, 4*10**1, 6*10**1])\ny_standard = np.array([10**-1, 10**-4, 10**-7, 10**-10, 10**-13])\ny_constrained = np.array([10**-1, 10**-1, 10**-1, 10**-1, 10**-1])\n\n# Create plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot lines\nax.plot(x, y_standard, 'bo-', label='Standard')\nax.plot(x, y_constrained, 'ro-', label='Constrained')\n\n# Set labels and title\nax.set_xlabel('N')\nax.set_ylabel('10^N')\nax.set_title('Plot Title')\n\n# Set grid\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nweeks = [0, 5, 10, 15, 20, 25]\nperformance = [-1.5, -1.0, -0.5, 0.0, 0.5, 1.0]\nefficiency = [-1.5, -1.0, -0.5, 0.0, 0.5, 1.0]\n\n# Create the plot\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot performance data\ncolor = 'tab:blue'\nax1.set_xlabel('Weeks')\nax1.set_ylabel('Performance', color=color)\nax1.plot(weeks, performance, color=color, marker='x', linestyle='--')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for efficiency\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Efficiency', color=color)\nax2.plot(weeks, efficiency, color=color, marker='x', linestyle='--')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Title\nplt.title('Performance and Efficiency Over Weeks')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nweeks = np.arange(0, 26, 5)\nperformance = np.array([0.3, 0.7, 1.2, 0.8, 0.5, 0.9, 0.4])\nefficiency = np.array([-0.4, -0.8, -1.3, -0.9, -0.6, -0.2, 0.1])\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot lines\nax.plot(weeks, performance, 'o-', color='cyan', label='Performance')\nax.plot(weeks, efficiency, 'o-', color='lightcoral', label='Efficiency')\n\n# Fill between lines\nax.fill_between(weeks, performance, color='skyblue', alpha=0.5)\nax.fill_between(weeks, efficiency, color='pink', alpha=0.5)\n\n# Markers\nfor i, (p, e) in enumerate(zip(performance, efficiency)):\n    ax.text(weeks[i], p, f'P{i+1}', ha='center', va='bottom', color='black')\n    ax.text(weeks[i], e, f'E{i+1}', ha='center', va='top', color='black')\n\n# Labels and title\nax.set_xlabel('Weeks')\nax.set_ylabel('Values')\nax.set_title('Performance and Efficiency Analysis')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nweeks = np.arange(0, 31, 5)\nperformance = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2]\nefficiency = [0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4]\ngrowth = [0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot lines with markers\nax.plot(weeks, performance, 'o-', color='blue', label='Performance')\nax.plot(weeks, efficiency, 'o-', color='red', label='Efficiency')\nax.plot(weeks, growth, 'o-', color='green', label='Growth')\n\n# Add markers for data points\nfor i, (x, y) in enumerate(zip(weeks, performance)):\n    ax.text(x, y, f'X{i+1}', ha='center', va='bottom', color='black')\n\n# Set labels and title\nax.set_xlabel('Weeks')\nax.set_ylabel('Efficiency')\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set y-axis limits\nax.set_ylim(0, 12)\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nweeks = [0, 5, 10, 15, 20, 25]\nseries_1 = [0.4, 0.6, 0.8, 1.0, 0.8, 0.6]\nseries_2 = [0.2, 0.4, 0.6, 0.8, 0.6, 0.4]\nseries_3 = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Create the plot\nplt.figure(figsize=(12.0, 8.0))\nplt.plot(weeks, series_1, 'o-', color='cyan', label='Data Series 1')\nplt.plot(weeks, series_2, 'o-', color='green', label='Data Series 2 with Gradient')\nplt.plot(weeks, series_3, 'o-', color='magenta', label='Data Series 3')\n\n# Add title and labels\nplt.title('Dynamic Data Presentation Across Weeks')\nplt.xlabel('Weeks')\nplt.ylabel('Normalized Value')\n\n# Set y-axis limits\nplt.ylim(0, 10)\n\n# Add grid\nplt.grid(True)\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nba_ce = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50]\nlwf = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\newc = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\nseq = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot each dataset\nax.plot(tasks, ba_ce, 's-', color='blue', label='BaCE')\nax.plot(tasks, lwf, 's-', color='cyan', label='LWF')\nax.plot(tasks, ewc, 's-', color='green', label='EWC')\nax.plot(tasks, seq, 's-', color='lightgreen', label='SEQ')\n\n# Add markers for each data point\nfor i in range(len(tasks)):\n    ax.plot(tasks[i], ba_ce[i], 's', color='blue', markersize=8)\n    ax.plot(tasks[i], lwf[i], 's', color='cyan', markersize=8)\n    ax.plot(tasks[i], ewc[i], 's', color='green', markersize=8)\n    ax.plot(tasks[i], seq[i], 's', color='lightgreen', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Average Accuracy of Different Models Over Tasks')\n\n# Set legend\nax.legend()\n\n# Set grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntasks = np.arange(1, 11)\nba_ce = np.array([90, 85, 80, 75, 70, 65, 60, 55, 50, 45])\newc = np.array([80, 75, 70, 65, 60, 55, 50, 45, 40, 35])\nlwf = np.array([85, 80, 75, 70, 65, 60, 55, 50, 45, 40])\nseq = np.array([80, 75, 70, 65, 60, 55, 50, 45, 40, 35])\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot for BaCE vs EWC\nax1.plot(tasks, ba_ce, 'o-', color='lightblue', label='BaCE')\nax1.plot(tasks, ewc, 'o-', color='lightcyan', label='EWC')\nax1.set_xlabel('Task')\nax1.set_ylabel('Average Accuracy (%)')\nax1.set_title('Performance Comparison: BaCE vs EWC')\nax1.legend(loc='upper left')\n\n# Plot for LWF vs SEQ\nax2.plot(tasks, lwf, 'v-', color='salmon', label='LWF')\nax2.plot(tasks, seq, 'v-', color='pink', label='SEQ')\nax2.set_xlabel('Task')\nax2.set_ylabel('Average Accuracy (%)')\nax2.set_title('Performance Comparison: LWF vs SEQ')\nax2.legend(loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000]\ny1_model1 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\ny2_model1 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\ny1_model2 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\ny2_model2 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(9.0, 7.0))\n\n# Plot 1\naxes[0, 0].plot(x, y1_model1, 'b-', label='model1 Series 1')\naxes[0, 0].plot(x, y2_model1, 'm-', label='model1 Series 2')\naxes[0, 0].fill_between(x, y1_model1, y2_model1, color='lightblue', alpha=0.3)\naxes[0, 0].set_title('model1 Performance')\naxes[0, 0].set_xlabel('Iterations')\naxes[0, 0].set_ylabel('Success Rate')\naxes[0, 0].legend()\n\n# Plot 2\naxes[0, 1].plot(x, y1_model2, 'b-', label='model2 Series 1')\naxes[0, 1].plot(x, y2_model2, 'm-', label='model2 Series 2')\naxes[0, 1].fill_between(x, y1_model2, y2_model2, color='lightpink', alpha=0.3)\naxes[0, 1].set_title('model2 Performance')\naxes[0, 1].set_xlabel('Iterations')\naxes[0, 1].set_ylabel('Success Rate')\naxes[0, 1].legend()\n\n# Plot 3\naxes[1, 0].plot(x, y1_model1, 'b-', label='model3 Series 1')\naxes[1, 0].plot(x, y2_model1, 'm-', label='model3 Series 2')\naxes[1, 0].fill_between(x, y1_model1, y2_model1, color='lightblue', alpha=0.3)\naxes[1, 0].set_title('model3 Performance')\naxes[1, 0].set_xlabel('Iterations')\naxes[1, 0].set_ylabel('Success Rate')\naxes[1, 0].legend()\n\n# Plot 4\naxes[1, 1].plot(x, y1_model2, 'b-', label='model4 Series 1')\naxes[1, 1].plot(x, y2_model2, 'm-', label='model4 Series 2')\naxes[1, 1].fill_between(x, y1_model2, y2_model2, color='lightpink', alpha=0.3)\naxes[1, 1].set_title('model4 Performance')\naxes[1, 1].set_xlabel('Iterations')\naxes[1, 1].set_ylabel('Success Rate')\naxes[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [25, 23, 21, 19, 17, 15, 13]\ny2 = [27, 25, 23, 21, 19, 17, 15]\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(6.0, 5.0))\n\n# Plotting\ncolor = 'tab:blue'\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('AMII WER(%)', color=color)\nax1.plot(x, y1, 'o-', color=color, label='SDM')\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\ncolor = 'tab:orange'\nax2.set_ylabel('WER(%)', color=color)  # we already handled the x-label with ax1\nax2.plot(x, y2, 'o-', color=color, label='IHM')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.85), ncol=2)\n\n# Title\nplt.title('SDM vs IHM')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [22, 24, 26, 28, 29, 30, 31]  # WER\ny2 = [20, 22, 24, 26, 28, 30, 32]  # AMI WER\ny3 = [25, 27, 29, 31, 33, 35, 37]  # LibriCSS (test)\ny4 = [23, 25, 27, 29, 31, 33, 35]  # AMI (dev)\n\n# Create the plot\nfig, ax1 = plt.subplots(figsize=(8.0, 7.0))\n\n# Plotting\nax1.plot(x, y1, 'o-', color='blue', label='LibriCSS (test)')\nax1.plot(x, y2, 'o-', color='orange', label='AMI (dev)')\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('WER (%)', color='black')\nax1.tick_params(axis='y', labelcolor='black')\n\n# Create a second y-axis for AMI WER\nax2 = ax1.twinx()\nax2.plot(x, y3, 'o-', color='green', label='IHM Trend')\nax2.plot(x, y4, 'o-', color='purple', label='SDM Trend')\nax2.set_ylabel('AMI WER (%)', color='black')\nax2.tick_params(axis='y', labelcolor='black')\n\n# Add legend\nfig.legend(loc='upper right')\n\n# Title and labels\nplt.title('Trend Comparison')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\ny2 = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny3 = np.array([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot lines\nax.plot(x, y1, 'o-', color='orange', label='Highlight 3')\nax.plot(x, y2, 'o-', color='blue', label='Highlight 5')\nax.plot(x, y3, 'o-', color='red', label='Highlight 7')\n\n# Set title and labels\nax.set_title('Wavelength (nm)')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('Wavelength (%)')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Set grid\nax.grid(True)\n\n# Set limits\nax.set_xlim(2, 8)\nax.set_ylim(0.2, 1.0)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0.1, 1.0, 10)\ny1 = np.sin(x * np.pi / 2) * 80 + 75\ny2 = np.cos(x * np.pi / 2) * 80 + 75\ny3 = np.tan(x * np.pi / 2) * 80 + 75\ny4 = np.exp(-x) * 80 + 75\ny5 = np.log(x + 1) * 80 + 75\n\n# Create subplots\nfig, axes = plt.subplots(1, 4, figsize=(12, 4))\n\n# Plot 1\naxes[0].plot(x, y1, 'bo-', label='Positive bound.')\naxes[0].fill_between(x, y1, 80, where=y1 >= 80, color='lightblue', alpha=0.5)\naxes[0].set_title('a')\naxes[0].set_xlabel('Time (s)')\naxes[0].set_ylabel('Weight (kg)')\naxes[0].legend()\n\n# Plot 2\naxes[1].plot(x, y2, 'ro-', label='Negative bound.')\naxes[1].fill_between(x, y2, 80, where=y2 <= 80, color='lightgreen', alpha=0.5)\naxes[1].set_title('b')\naxes[1].set_xlabel('Time (s)')\naxes[1].set_ylabel('Weight (kg)')\naxes[1].legend()\n\n# Plot 3\naxes[2].plot(x, y3, 'go-', label='Contrastive loss weight.')\naxes[2].fill_between(x, y3, 80, where=y3 >= 80, color='lightcoral', alpha=0.5)\naxes[2].set_title('c')\naxes[2].set_xlabel('Time (s)')\naxes[2].set_ylabel('Weight (kg)')\naxes[2].legend()\n\n# Plot 4\naxes[3].plot(x, y4, 'bo-', label='Fuzzy coefficient.')\naxes[3].fill_between(x, y4, 80, where=y4 <= 80, color='lightgrey', alpha=0.5)\naxes[3].set_title('d')\naxes[3].set_xlabel('Time (s)')\naxes[3].set_ylabel('Weight (kg)')\naxes[3].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny_wer = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny_threshold = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(12.0, 5.0))\n\ncolor = 'tab:orange'\nax1.set_xlabel('Number of Microphones')\nax1.set_ylabel('WER (%)', color=color)\nax1.plot(x, y_wer, 'o-', color=color, label='LibriCSS WER')\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Threshold', color=color)\nax2.plot(x, y_threshold, 'o-', color=color, label='Threshold')\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # Adjust layout to make room for the labels\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nratio = np.linspace(0.1, 1.0, 10)\npna_performance = np.linspace(0.5, 0.9, 10)\ngin_performance = np.linspace(0.6, 1.0, 10)\n\n# Create figure and subplots\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(6.0, 12.0), sharex=True)\n\n# Plot for SPMotif-0.5\naxes[0].fill_between(ratio, 0.4, 0.8, color='lightblue', alpha=0.5)\naxes[0].plot(ratio, pna_performance, 'bo-', label='PNA')\naxes[0].plot(ratio, gin_performance, 'go-', label='GIN')\naxes[0].set_title('SPMotif-0.5')\naxes[0].set_ylabel('Performance')\naxes[0].legend()\n\n# Plot for SPMotif-0.7\naxes[1].fill_between(ratio, 0.4, 0.8, color='lightgreen', alpha=0.5)\naxes[1].plot(ratio, pna_performance, 'bo-', label='PNA')\naxes[1].plot(ratio, gin_performance, 'go-', label='GIN')\naxes[1].set_title('SPMotif-0.7')\naxes[1].set_ylabel('Performance')\naxes[1].legend()\n\n# Plot for SPMotif-0.9\naxes[2].fill_between(ratio, 0.4, 0.8, color='lightblue', alpha=0.5)\naxes[2].plot(ratio, pna_performance, 'bo-', label='PNA')\naxes[2].plot(ratio, gin_performance, 'go-', label='GIN')\naxes[2].set_title('SPMotif-0.9')\naxes[2].set_xlabel('Ratio r')\naxes[2].set_ylabel('Performance')\naxes[2].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nr_values = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\npna_ours = [-80, -60, -40, -20, 0, 20, 40, 60, 80, 100]\ngin_ours = [-80, -60, -40, -20, 0, 20, 40, 60, 80, 100]\n\n# Create the plot\nplt.figure(figsize=(10.0, 5.0))\nplt.plot(r_values, pna_ours, 'o-', color='magenta', label='PNA + ours')\nplt.plot(r_values, gin_ours, 'o-', color='yellow', label='GIN + ours')\n\n# Add labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Dynamic Performance Trends')\n\n# Set the y-axis limits\nplt.ylim(-80, 100)\n\n# Add grid lines\nplt.grid(True, linestyle='--', linewidth=0.5)\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nratios = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\npna_ours = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\ngin_ours = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n# Create the plot\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(ratios, pna_ours, 'o-', color='purple', label='PNA + ours')\nplt.plot(ratios, gin_ours, 'o-', color='orange', label='GIN + ours')\n\n# Add labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Modern Linear Performance Evaluation')\n\n# Add legend\nplt.legend()\n\n# Show grid\nplt.grid(True)\n\n# Set y-axis limits\nplt.ylim(0.1, 1.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nr_values = [0.2, 0.4, 0.6, 0.8, 1.0]\npna_ours = [8.5, 7.5, 6.5, 5.5, 4.5]\ngin_ours = [8.0, 7.0, 6.0, 5.0, 4.0]\n\n# Create the plot\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(r_values, pna_ours, 'bo-', label='PNA + ours', markerfacecolor='none')\nplt.plot(r_values, gin_ours, 'ro-', label='GIN + ours', markerfacecolor='none')\n\n# Add labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Dynamic Model Performance')\n\n# Add legend\nplt.legend()\n\n# Show grid\nplt.grid(True)\n\n# Set y-axis limits\nplt.ylim(0, 10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nensemble_sizes = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\nmodel_1_mean_accuracy = [80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104]\nmodel_2_mean_accuracy = [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot data\nax.plot(ensemble_sizes, model_1_mean_accuracy, label='Model 1 Mean Accuracy', color='steelblue')\nax.plot(ensemble_sizes, model_2_mean_accuracy, label='Model 2 Mean Accuracy', color='indianred')\n\n# Fill between lines\nax.fill_between(ensemble_sizes, model_1_mean_accuracy, model_2_mean_accuracy, where=model_1_mean_accuracy < model_2_mean_accuracy, color='lightsteelblue')\nax.fill_between(ensemble_sizes, model_1_mean_accuracy, model_2_mean_accuracy, where=model_1_mean_accuracy >= model_2_mean_accuracy, color='lightcoral')\n\n# Set labels and title\nax.set_xlabel('Ensemble Size')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Model Accuracies')\n\n# Add legend\nax.legend()\n\n# Show grid\nax.grid(True)\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\niterations = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconfig_a_model_x = [70, 75, 80, 85, 90, 95, 90, 85, 80, 75]\nconfig_b_model_x = [75, 80, 85, 90, 95, 90, 85, 80, 75, 70]\nconfig_c_model_x = [80, 85, 90, 95, 90, 85, 80, 75, 70, 65]\n\n# Create subplots\nfig, axes = plt.subplots(2, 1, figsize=(8.0, 12.0))\n\n# Plot for Performance of Model Y\naxes[0].plot(iterations, config_a_model_x, 'r-o', label='Config A - Model X')\naxes[0].plot(iterations, config_b_model_x, 'g-s', label='Config B - Model X')\naxes[0].plot(iterations, config_c_model_x, 'b^', label='Config C - Model X')\n\n# Set labels and title for the first subplot\naxes[0].set_xlabel('Iteration')\naxes[0].set_ylabel('Score')\naxes[0].set_title('Performance of Model Y')\naxes[0].legend()\n\n# Plot for Performance of Model Z\naxes[1].plot(iterations, config_a_model_x, 'r-o', label='Config A - Model X')\naxes[1].plot(iterations, config_b_model_x, 'g-s', label='Config B - Model X')\naxes[1].plot(iterations, config_c_model_x, 'b^', label='Config C - Model X')\n\n# Set labels and title for the second subplot\naxes[1].set_xlabel('Iteration')\naxes[1].set_ylabel('Score')\naxes[1].set_title('Performance of Model Z')\naxes[1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\niterations = [2, 4, 6, 8, 10]\nconfig_a_lama_scores = [75, 77, 79, 81, 83]\nconfig_b_lama_scores = [76, 78, 80, 82, 84]\nconfig_c_lama_scores = [77, 79, 81, 83, 85]\n\nconfig_a_falcon_scores = [65, 67, 69, 71, 73]\nconfig_b_falcon_scores = [66, 68, 70, 72, 74]\nconfig_c_falcon_scores = [67, 69, 71, 73, 75]\n\nconfig_a_qwen_scores = [55, 57, 59, 61, 63]\nconfig_b_qwen_scores = [56, 58, 60, 62, 64]\nconfig_c_qwen_scores = [57, 59, 61, 63, 65]\n\n# Create subplots\nfig, axes = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Plot Performance of Llama\naxes[0].plot(iterations, config_a_lama_scores, 'p-', color='pink', label='Config A - Llama')\naxes[0].plot(iterations, config_b_lama_scores, 'p-', color='lightgreen', label='Config B - Llama')\naxes[0].plot(iterations, config_c_lama_scores, 'p-', color='blue', label='Config C - Llama')\naxes[0].set_title('Performance of Llama')\naxes[0].set_xlabel('Iteration')\naxes[0].set_ylabel('Score')\naxes[0].legend()\n\n# Plot Performance of Falcon\naxes[1].plot(iterations, config_a_falcon_scores, 'p-', color='pink', label='Config A - Falcon')\naxes[1].plot(iterations, config_b_falcon_scores, 'p-', color='lightgreen', label='Config B - Falcon')\naxes[1].plot(iterations, config_c_falcon_scores, 'p-', color='blue', label='Config C - Falcon')\naxes[1].set_title('Performance of Falcon')\naxes[1].set_xlabel('Iteration')\naxes[1].set_ylabel('Score')\naxes[1].legend()\n\n# Plot Performance of Qwen\naxes[2].plot(iterations, config_a_qwen_scores, 'p-', color='pink', label='Config A - Qwen')\naxes[2].plot(iterations, config_b_qwen_scores, 'p-', color='lightgreen', label='Config B - Qwen')\naxes[2].plot(iterations, config_c_qwen_scores, 'p-', color='blue', label='Config C - Qwen')\naxes[2].set_title('Performance of Qwen')\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\naxes[2].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for each brand\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nbrand_a = [1.5, 1.6, 1.7, 1.8]\nbrand_b = [1.2, 1.3, 1.4, 1.5]\nbrand_c = [1.5, 1.6, 1.7, 1.8]\nbrand_d = [1.5, 1.6, 1.7, 1.8]\nbrand_e = [1.5, 1.6, 1.7, 1.8]\nbrand_f = [1.5, 1.6, 1.7, 1.8]\n\n# Create a figure with a specific size\nfig, axes = plt.subplots(3, 2, figsize=(10.0, 10.0))\n\n# Plot Brand A\naxes[0, 0].plot(quarters, brand_a, 'r-o', label='Brand A Sales Growth')\naxes[0, 0].set_title('Brand A')\naxes[0, 0].set_xlabel('Quarter')\naxes[0, 0].set_ylabel('Sales Growth')\naxes[0, 0].legend()\n\n# Plot Brand B\naxes[0, 1].plot(quarters, brand_b, 'c^--', label='Brand B Sales Growth')\naxes[0, 1].set_title('Brand B')\naxes[0, 1].set_xlabel('Quarter')\naxes[0, 1].set_ylabel('Sales Growth')\naxes[0, 1].legend()\n\n# Plot Brand C\naxes[1, 0].plot(quarters, brand_c, 'm^-', label='Brand C Sales Growth')\naxes[1, 0].set_title('Brand C')\naxes[1, 0].set_xlabel('Quarter')\naxes[1, 0].set_ylabel('Sales Growth')\naxes[1, 0].legend()\n\n# Plot Brand D\naxes[1, 1].plot(quarters, brand_d, 'g*-', label='Brand D Sales Growth')\naxes[1, 1].set_title('Brand D')\naxes[1, 1].set_xlabel('Quarter')\naxes[1, 1].set_ylabel('Sales Growth')\naxes[1, 1].legend()\n\n# Plot Brand E\naxes[2, 0].plot(quarters, brand_e, 'm>-', label='Brand E Sales Growth')\naxes[2, 0].set_title('Brand E')\naxes[2, 0].set_xlabel('Quarter')\naxes[2, 0].set_ylabel('Sales Growth')\naxes[2, 0].legend()\n\n# Plot Brand F\naxes[2, 1].plot(quarters, brand_f, 'y>-', label='Brand F Sales Growth')\naxes[2, 1].set_title('Brand F')\naxes[2, 1].set_xlabel('Quarter')\naxes[2, 1].set_ylabel('Sales Growth')\naxes[2, 1].legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntime = np.array([100, 300, 500, 700])\nmetric_value_1 = np.array([0.5, 0.6, 0.7, 0.8])\nmetric_value_2 = np.array([0.4, 0.5, 0.6, 0.7])\n\n# Create subplots\nfig, axes = plt.subplots(1, 4, figsize=(18, 4))\n\n# Plot 1\naxes[0].plot(time, metric_value_1, 'o-', color='blue', label='ECL Run 1')\naxes[0].plot(time, metric_value_2, 'o-', color='orange', label='ECL Run 2')\naxes[0].set_title('Traffic Performance')\naxes[0].set_xlabel('Time (s)')\naxes[0].set_ylabel('Metric Value')\naxes[0].set_ylim(0, 2)\naxes[0].grid(True)\n\n# Plot 2\naxes[1].plot(time, metric_value_1, 'o-', color='blue', label='ECL Run 1')\naxes[1].plot(time, metric_value_2, 'o-', color='orange', label='ECL Run 2')\naxes[1].set_title('ETMm2 Performance')\naxes[1].set_xlabel('Time (s)')\naxes[1].set_ylabel('Metric Value')\naxes[1].set_ylim(0, 2)\naxes[1].grid(True)\n\n# Plot 3\naxes[2].plot(time, metric_value_1, 'o-', color='blue', label='ECL Run 1')\naxes[2].plot(time, metric_value_2, 'o-', color='orange', label='ECL Run 2')\naxes[2].set_title('ETTh2 Performance')\naxes[2].set_xlabel('Time (s)')\naxes[2].set_ylabel('Metric Value')\naxes[2].set_ylim(0, 2)\naxes[2].grid(True)\n\n# Plot 4\naxes[3].plot(time, metric_value_1, 'o-', color='blue', label='ECL Run 1')\naxes[3].plot(time, metric_value_2, 'o-', color='orange', label='ECL Run 2')\naxes[3].set_title('ECL Performance')\naxes[3].set_xlabel('Time (s)')\naxes[3].set_ylabel('Metric Value')\naxes[3].set_ylim(0, 2)\naxes[3].grid(True)\n\n# Add legend\nfig.legend(loc='upper right')\n\n# Show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain']\ndata = {\n    'Dry': [14, 12, 10, 8],\n    'Rain': [12, 10, 8, 6]\n}\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot each data series\nfor condition, values in data.items():\n    ax.plot(driving_styles, values, marker='o', label=condition)\n\n# Set labels and title\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\nax.set_title('Relaxation Level by Driving Style')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nphases = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5']\nrun1_growth_a = [20, 25, 30, 35, 40]\nrun2_growth_a = [25, 30, 35, 40, 45]\nrun1_growth_b = [20, 25, 30, 35, 40]\nrun2_growth_b = [25, 30, 35, 40, 45]\nrun1_growth_c = [20, 25, 30, 35, 40]\nrun2_growth_c = [25, 30, 35, 40, 45]\nrun1_growth_d = [20, 25, 30, 35, 40]\nrun2_growth_d = [25, 30, 35, 40, 45]\nrun1_growth_e = [20, 25, 30, 35, 40]\nrun2_growth_e = [25, 30, 35, 40, 45]\nrun1_growth_f = [20, 25, 30, 35, 40]\nrun2_growth_f = [25, 30, 35, 40, 45]\n\n# Create subplots\nfig, axes = plt.subplots(2, 3, figsize=(9.0, 6.0), constrained_layout=True)\n\n# Plot for Category A Growth\naxes[0, 0].plot(phases, run1_growth_a, label='Run 1', color='cyan')\naxes[0, 0].plot(phases, run2_growth_a, label='Run 2', color='teal')\naxes[0, 0].set_title('Category A Growth')\naxes[0, 0].set_xlabel('Growth Phase')\naxes[0, 0].set_ylabel('Cumulative Value')\naxes[0, 0].legend()\n\n# Plot for Category B Growth\naxes[0, 1].plot(phases, run1_growth_b, label='Run 1', color='orange')\naxes[0, 1].plot(phases, run2_growth_b, label='Run 2', color='purple')\naxes[0, 1].set_title('Category B Growth')\naxes[0, 1].set_xlabel('Growth Phase')\naxes[0, 1].set_ylabel('Cumulative Value')\naxes[0, 1].legend()\n\n# Plot for Category C Growth\naxes[0, 2].plot(phases, run1_growth_c, label='Run 1', color='orange')\naxes[0, 2].plot(phases, run2_growth_c, label='Run 2', color='purple')\naxes[0, 2].set_title('Category C Growth')\naxes[0, 2].set_xlabel('Growth Phase')\naxes[0, 2].set_ylabel('Cumulative Value')\naxes[0, 2].legend()\n\n# Plot for Category D Growth\naxes[1, 0].plot(phases, run1_growth_d, label='Run 1', color='cyan')\naxes[1, 0].plot(phases, run2_growth_d, label='Run 2', color='teal')\naxes[1, 0].set_title('Category D Growth')\naxes[1, 0].set_xlabel('Growth Phase')\naxes[1, 0].set_ylabel('Cumulative Value')\naxes[1, 0].legend()\n\n# Plot for Category E Growth\naxes[1, 1].plot(phases, run1_growth_e, label='Run 1', color='cyan')\naxes[1, 1].plot(phases, run2_growth_e, label='Run 2', color='teal')\naxes[1, 1].set_title('Category E Growth')\naxes[1, 1].set_xlabel('Growth Phase')\naxes[1, 1].set_ylabel('Cumulative Value')\naxes[1, 1].legend()\n\n# Plot for Category F Growth\naxes[1, 2].plot(phases, run1_growth_f, label='Run 1', color='orange')\naxes[1, 2].plot(phases, run2_growth_f, label='Run 2', color='purple')\naxes[1, 2].set_title('Category F Growth')\naxes[1, 2].set_xlabel('Growth Phase')\naxes[1, 2].set_ylabel('Cumulative Value')\naxes[1, 2].legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [4, 6, 10, 30]\ny_standard = [10, 12, 14, 16]\ny_constrained = [8, 10, 12, 14]\n\n# Create plot\nplt.figure(figsize=(9.0, 6.0))\nplt.plot(x, y_standard, 'bo-', label='Standard')\nplt.plot(x, y_constrained, 'ro-', label='Constrained')\n\n# Add labels and title\nplt.xlabel('N')\nplt.ylabel('Value')\nplt.title('Comparison of Standard and Constrained Methods')\n\n# Add legend\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nregions = ['South', 'North', 'East', 'West']\nvalues = [25, 40, 15, 10]\ncolors = ['#98FB98', '#ADD8E6', '#FFD700', '#FFA07A']\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bar chart\nax1.bar(regions, values, color=colors, label='Regions')\nax1.set_ylabel('Percentage')\nax1.set_title('Literacy Rate by Region')\n\n# Data for the pie chart\nlabels = ['North', 'East', 'South', 'West', 'Central']\nsizes = [35, 25, 20, 15, 10]\ncolors_pie = ['#ADD8E6', '#FFD700', '#FFA07A', '#FF6347', '#FFB6C1']\n\n# Create a second y-axis for the pie chart\nax2 = ax1.twinx()\nax2.pie(sizes, labels=labels, colors=colors_pie, startangle=90, radius=0.5, wedgeprops=dict(width=0.3))\n\n# Set the title for the pie chart\nax2.set_title('')\n\n# Show legend\nax1.legend(loc='upper left')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive']\nsensitive_attributes = ['Sensitivity', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive']\ndata = np.array([\n    [1.5, 0.7, 0.6, 0.5, 0.4],\n    [0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.8, 0.7, 0.6, 0.5, 0.4],\n    [0.7, 0.6, 0.5, 0.4, 0.3],\n    [0.6, 0.5, 0.4, 0.3, 0.2]\n])\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Plot bars\nbars = []\nfor i, category in enumerate(categories):\n    bar = ax.barh(sensitive_attributes, data[i], left=np.sum(data[:i], axis=0), color=plt.cm.Paired(i))\n    bars.append(bar)\n\n# Add labels and title\nax.set_xlabel('I\u221e(Y, Z)')\nax.set_ylabel('Sensitive attribute')\nax.set_title('Sensitivity by Sensitive Attribute')\n\n# Add legend\nax.legend([bar[0] for bar in bars], categories, loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-0.5, len(sensitive_attributes) - 0.5)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nengstrom = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nzhang = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nrice = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nrare = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nhendrycks = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\naddep = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\ncarmon = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.barh(categories, engstrom, color='darkgreen', label='Engstrom (M1)')\nax.barh(categories, zhang, left=engstrom, color='teal', label='Zhang (M2)')\nax.barh(categories, rice, left=[sum(x) for x in zip(engstrom, zhang)], color='lightgreen', label='Rice (M3)')\nax.barh(categories, rare, left=[sum(x) for x in zip(engstrom, zhang, rice)], color='olive', label='Rade (M4)')\nax.barh(categories, hendrycks, left=[sum(x) for x in zip(engstrom, zhang, rice, rare)], color='darkolivegreen', label='Hendrycks (M5)')\nax.barh(categories, addep, left=[sum(x) for x in zip(engstrom, zhang, rice, rare, hendrycks)], color='lightblue', label='Addep. (M6)')\nax.barh(categories, carmon, left=[sum(x) for x in zip(engstrom, zhang, rice, rare, hendrycks, addep)], color='darkblue', label='Carmon (M7)')\n\n# Set labels and title\nax.set_xlabel('Robust Error (%)')\nax.set_ylabel('Models')\nax.set_title('Robust Error (%)')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Cartesian', 'Retinotopic']\nvalues = [0.551, 0.538, 0.195]\ncolors = ['#e6b8af', '#f7e9c4', '#d9d9d9']\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for VGG16\nbars = ax1.bar(categories, values, color=colors)\nax1.set_ylabel('Accuracy')\nax1.set_title('VGG16')\nax1.set_xticks(range(len(categories)))\nax1.set_xticklabels(categories)\n\n# Add labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 3), va='bottom')\n\n# Plot for Resnet101\nax2.plot([0, 90, 180], [0.8, 0.8, 0.8], label='VGG16 Cartesian', color='red', marker='x')\nax2.plot([0, 90, 180], [0.6, 0.6, 0.6], label='Resnet101 Cartesian', color='blue', marker='x')\nax2.plot([0, 90, 180], [0.8, 0.8, 0.8], label='VGG16 Retinotopic', color='orange', marker='x')\nax2.plot([0, 90, 180], [0.6, 0.6, 0.6], label='Resnet101 Retinotopic', color='cyan', marker='x')\nax2.plot([0, 90, 180], [0.8, 0.8, 0.8], label='Resnet101 Polar', color='lightgrey', marker='x')\nax2.set_xlabel('Rotation angle (\u00b0)')\nax2.set_ylabel('Rotation invariance')\nax2.set_title('Resnet101')\nax2.set_yticks(np.arange(0, 1.1, 0.2))\nax2.set_xticks([0, 90, 180])\nax2.set_xticklabels(['0', '90', '180'])\n\n# Add legend\nax2.legend(loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],\n    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3],\n    [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4],\n    [0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5],\n    [0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6],\n    [0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7]\n])\n\n# Labels for the heatmap\nx_labels = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White']\ny_labels = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Set the labels\nax.set_xticks(np.arange(len(x_labels)))\nax.set_yticks(np.arange(len(y_labels)))\nax.set_xticklabels(x_labels)\nax.set_yticklabels(y_labels)\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Title and labels\nplt.title('Heatmap')\nplt.xlabel('Sensitive attribute')\nplt.ylabel('sensitive attribute')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nx = np.array([0, 10, 20, 30, 40, 50])\ny = np.array([-8, -9, -9, -9, -9, -8])\n\n# Create the figure and axis objects\nfig, ax1 = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the line graph\nax1.plot(x, y, 'o-', color='black')\nax1.fill_between(x, y, -10, where=y < -10, color='lightgray', alpha=0.5)\nax1.set_xlabel('GPT2 Tokenizer rank')\nax1.set_ylabel('Token rarity', color='black')\nax1.set_title('(a) Token rarity')\n\n# Set the limits for the x-axis\nax1.set_xlim(0, 50)\n\n# Data for the second plot\ncategories = ['0', '10k', '20k', '30k', '40k']\nvalues = [8, 6, 8, 6, 8]\nerrors = [2, 2, 2, 2, 2]\n\n# Create a new subplot for the second plot\nax2 = fig.add_subplot(212, sharex=ax1)\n\n# Create a horizontal boxplot\nax2.boxplot(values, positions=np.arange(len(categories)), widths=0.5, patch_artist=True)\nax2.set_xticks(np.arange(len(categories)))\nax2.set_xticklabels(categories)\nax2.set_ylabel('Loss', color='black')\nax2.set_title('(b) Length = 20')\n\n# Set the limits for the y-axis\nax2.set_ylim(2, 10)\n\n# Add a legend\nax2.legend(['Documents'], loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Unchanged Mistake', 'New Mistake', 'News', 'Toxicity', 'Sentiment']\nvalues = [-0.24, -0.05, 0.17, -0.13, -0.40]\ncolors = ['#1f77b4', '#aec7e8', '#ff9896', '#c5b0d5', '#1f77b4']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_ylabel('Correlation')\nax.set_title('Sentiment Analysis')\n\n# Add legend\nax.legend(['Unfixed Mistake', 'New Mistake', 'News', 'Toxicity', 'Sentiment'], loc='upper right')\n\n# Set y-axis limits\nax.set_ylim(-1.0, 1.0)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['c1355', 'c1908', 'c2670', 'c3540']\nupper_threshold = [0.5, 0.5, 0.5, 0.5]\nlower_threshold = [0.45, 0.45, 0.45, 0.45]\nsuccess_rate = [0.4, 0.4, 0.4, 0.4]\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 6.0), gridspec_kw={'height_ratios': [2, 1]})\n\n# Bar plot for success rate\nax1.bar(categories, success_rate, color='lightblue', edgecolor='black')\nax1.set_ylabel('# successful adv. circuits')\nax1.set_title('Success Rate')\n\n# Box plot for thresholds\nax2.boxplot([upper_threshold, lower_threshold], positions=[0, 1], widths=0.5, patch_artist=True)\nax2.set_xticks([0.5, 1.5])\nax2.set_xticklabels(['Upper success threshold', 'Lower success threshold'])\nax2.set_ylabel('OMLA KPA')\nax2.yaxis.grid(True)\n\n# Add horizontal line between plots\nax1.axhline(y=0.5, color='red', linestyle='--', linewidth=1)\nax2.axhline(y=0.5, color='red', linestyle='--', linewidth=1)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance']\neducation = [20, 30, 50, 60, 70, 80, 90]\nlaw = [10, 20, 30, 40, 50, 60, 70]\ntechnology = [30, 40, 60, 70, 80, 90, 100]\nhistory = [10, 20, 30, 40, 50, 60, 70]\ngeography = [10, 20, 30, 40, 50, 60, 70]\nhumanities = [10, 20, 30, 40, 50, 60, 70]\nfinance = [10, 20, 30, 40, 50, 60, 70]\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for Cumulative Knowledge by Subject Area\nax1.barh(domains, education, color='blue', label='Education')\nax1.barh(domains, law, left=education, color='orange', label='Law')\nax1.barh(domains, technology, left=np.array(education) + np.array(law), color='yellow', label='Technology')\n\n# Add labels and title\nax1.set_xlabel('Cumulative Knowledge (%)')\nax1.set_ylabel('Study Level')\nax1.set_title('Knowledge Increase by Subject Area')\nax1.legend()\n\n# Plot for Number of Publications by Domain\nax2.barh(domains, education, color='blue', label='Education')\nax2.barh(domains, law, left=education, color='blue', label='Law')\nax2.barh(domains, technology, left=np.array(education) + np.array(law), color='blue', label='Technology')\nax2.barh(domains, history, left=np.array(education) + np.array(law) + np.array(technology), color='blue', label='History')\nax2.barh(domains, geography, left=np.array(education) + np.array(law) + np.array(technology) + np.array(history), color='blue', label='Geography')\nax2.barh(domains, humanities, left=np.array(education) + np.array(law) + np.array(technology) + np.array(history) + np.array(geography), color='blue', label='Humanities')\nax2.barh(domains, finance, left=np.array(education) + np.array(law) + np.array(technology) + np.array(history) + np.array(geography) + np.array(humanities), color='blue', label='Finance')\n\n# Add labels and title\nax2.set_xlabel('Number of Publications')\nax2.set_ylabel('Domain')\nax2.set_title('Number of Publications by Domain')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = ['2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022']\nhardware = [0, 0, 0, 0, 0, 0, 0, 0]\nsoftware = [0, 0, 0, 0, 0, 0, 0, 0]\nai = [0, 0, 0, 0, 0, 0, 0, 0]\n\n# Plotting the line graph\nplt.figure(figsize=(8.0, 10.0))\nplt.plot(years, hardware, label='Hardware', color='blue')\nplt.plot(years, software, label='Software', color='orange')\nplt.plot(years, ai, label='AI', color='green')\n\n# Adding labels and title\nplt.xlabel('Year')\nplt.ylabel('Progress (%)')\nplt.title('Technological Advancements')\n\n# Adding legend\nplt.legend()\n\n# Setting y-axis limits\nplt.ylim(0, 120)\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.7, 2.9, 2.6]\nvandalism_rates = [100, 110, 120, 130, 140, 150]\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8.0, 10.0), sharex=True)\n\n# Plot the first subplot\nbars = ax1.bar(countries, crime_rates, color='orange')\nax1.set_ylabel('Crime Rate per 100,000 Inhabitants')\nax1.set_title('Average Legal Crime Rates by Country')\n\n# Add data labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\n# Plot the second subplot\nax2.plot(countries, vandalism_rates, marker='o', color='teal', label='Vandalism')\nax2.set_ylabel('Vandalism Rate per 100,000 Inhabitants')\nax2.set_xlabel('Country')\nax2.set_title('Average Legal Crime Rates by Country')\n\n# Add data labels\nfor i, txt in enumerate(vandalism_rates):\n    ax2.annotate(txt, (countries[i], vandalism_rates[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Add a horizontal line for average vandalism rate\naverage_vandalism = np.mean(vandalism_rates)\nax2.axhline(y=average_vandalism, color='gray', linestyle='--')\n\n# Add legend\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the histogram\nbins = [40, 50, 60, 70, 80, 90, 100, 110, 120]\npublic_school_counts = [10, 15, 20, 25, 30, 35, 40, 45, 50]\nprivate_school_counts = [5, 10, 15, 20, 25, 30, 35, 40, 45]\n\n# Data for the pie chart\nlabels = ['Books', 'Facilities', 'Technology', 'Staff', 'Extracurricular']\nsizes = [20, 30, 25, 10, 15]\ncolors = ['#1f77b4', '#9467bd', '#8c564b', '#c7c7c7', '#e377c2']\nexplode = (0, 0, 0, 0, 0)\n\n# Create the figure and axis objects\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the histogram\nax1.barh(bins, public_school_counts, color='#1f77b4', label='Public School')\nax1.barh(bins, private_school_counts, left=public_school_counts, color='#ff7f0e', label='Private School')\nax1.set_xlabel('Number of Students')\nax1.set_ylabel('Score')\nax1.set_title('Student Performance in Schools')\nax1.legend()\n\n# Plot the pie chart\nax2.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax2.set_title('Resource Allocation in Schools')\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nregions = ['Region 1', 'Region 2']\ntemperatures = [20, 25]\nelevations = [100, 150]\ndensities = [0.003, 0.004]\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot 1: Geographical Distribution\nax1.set_title('Average Annual Temperature')\nax1.set_xlabel('Elevation (m)')\nax1.set_ylabel('Density')\n\n# Bar plot for Region 1\nax1.bar(regions[0], densities[0], color='lightblue', label='Lowland')\nax1.bar(regions[0], densities[0], bottom=densities[0], color='lightgreen', label='Highland')\nax1.bar(regions[0], densities[0], bottom=[d + d for d in densities], color='lightcoral', label='Plateau')\n\n# Bar plot for Region 2\nax1.bar(regions[1], densities[1], color='lightblue', label='Lowland')\nax1.bar(regions[1], densities[1], bottom=densities[1], color='lightgreen', label='Highland')\nax1.bar(regions[1], densities[1], bottom=[d + d for d in densities], color='lightcoral', label='Plateau')\n\n# Add labels and legend\nax1.set_xticks(range(len(regions)))\nax1.set_xticklabels(regions)\nax1.legend()\n\n# Plot 2: Geographical Elevation Distribution\nax2.set_title('Geographical Elevation Distribution')\nax2.set_xlabel('Elevation (m)')\nax2.set_ylabel('Density')\n\n# Histogram for Region 1\nax2.hist(elevations, bins=10, weights=densities, color='lightblue', alpha=0.7, label='Lowland')\nax2.hist(elevations, bins=10, weights=densities, bottom=densities, color='lightgreen', alpha=0.7, label='Highland')\nax2.hist(elevations, bins=10, weights=densities, bottom=[d + d for d in densities], color='lightcoral', alpha=0.7, label='Plateau')\n\n# Add labels and legend\nax2.set_xticks(np.arange(0, 200, 50))\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = ['2019', '2020', '2021', '2022']\nstocks = [300, 250, 200, 150]\nbonds = [250, 200, 150, 100]\nreal_estate = [200, 150, 100, 50]\n\n# Create a figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for Investment Growth Over Time\nax1.barh(years, stocks, color='green', label='Stocks')\nax1.barh(years, bonds, left=stocks, color='blue', label='Bonds')\nax1.barh(years, real_estate, left=np.array(stocks) + np.array(bonds), color='yellow', label='Real Estate')\n\nax1.set_xlabel('Number of Accounts (%)')\nax1.set_ylabel('Year')\nax1.set_title('Investment Growth Over Time')\nax1.legend()\n\n# Plot for Popularity of Financial Products\nlabels = ['Savings', 'CDs', 'Stocks', 'Bonds', 'ETFs', 'Mutual Funds']\nsizes = [400, 300, 200, 150, 100, 50]\ncolors = ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\n\nax2.pie(sizes, labels=labels, colors=colors, startangle=90, wedgeprops=dict(width=0.3))\n\nax2.set_title('Popularity of Financial Products')\n\n# Plot for Loan Amount Distribution by Region\nloan_labels = ['Urban Loans', 'Rural Loans']\nloan_sizes = [60, 40]\nloan_colors = ['lightcoral', 'lightsalmon']\n\nax3 = ax2.twinx()\nax3.pie(loan_sizes, labels=loan_labels, colors=loan_colors, startangle=90, wedgeprops=dict(width=0.3))\n\nax3.set_title('Loan Amount Distribution by Region')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\nvalues = [80, 80, 90, 95]\ncolors = ['#ADD8E6', '#ADD8E6', '#FFD700', '#ADD8E6']\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the bar chart\nbars = ax1.bar(categories, values, color=colors, edgecolor='black')\n\n# Set labels and title\nax1.set_xlabel('Algorithm Efficiency Scores')\nax1.set_ylabel('Success Rate (%)', color='black')\nax1.set_title('Al Task Success Rates')\n\n# Set y-axis limits\nax1.set_ylim(0, 100)\n\n# Add grid lines\nax1.yaxis.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Create a second y-axis for the line chart\nax2 = ax1.twinx()\n\n# Data for the line chart\nconditions = ['Dry Conditions', 'Wet Conditions']\nmodels = ['Model A', 'Model B', 'Model C', 'Model D']\nefficiency_scores = [90, 95, 90, 85]\nadaptability_scores = [95, 90, 85, 80]\n\n# Plot the line chart\nfor i, model in enumerate(models):\n    ax2.plot(conditions, [efficiency_scores[i], efficiency_scores[i]], marker='o', color='blue' if i % 2 == 0 else 'green', label=model)\n    ax2.plot(conditions, [adaptability_scores[i], adaptability_scores[i]], marker='o', color='blue' if i % 2 == 0 else 'green', linestyle='--')\n\n# Set labels for the second y-axis\nax2.set_ylabel('Adaptability Score (%)', color='black')\n\n# Set y-axis limits for the second y-axis\nax2.set_ylim(75, 100)\n\n# Add legend\nax2.legend(loc='upper left')\n\n# Add text annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom', ha='center', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Morning Traffic', 'Evening Traffic']\nurban_data = [50, 30]\nhighway_data = [70, 40]\n\n# Create a figure and axis\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10.0, 10.0))\n\n# Bar chart\nax1.bar(categories, urban_data, color='tan', label='Urban')\nax1.bar(categories, highway_data, bottom=urban_data, color='darkgreen', label='Highway')\nax1.set_title('Traffic Volume by Time of Day')\nax1.set_xlabel('Number of Vehicles')\nax1.set_ylabel('Frequency')\nax1.set_ylim(0, 200)\nax1.legend()\n\n# Speed distribution by location\nspeed_data = np.array([[80, 60], [90, 70]])\nlabels = ['Urban', 'Highway']\ncolors = ['lightblue', 'lightcyan']\nax2.pie(speed_data.flatten(), labels=np.repeat(labels, 2), colors=colors, startangle=90, radius=1.2)\nax2.set_title('Speed Distribution by Location')\nax2.axis('equal')\n\n# Elevation changes along a route\nelevation_data = np.array([0, 200, 400, 600, 800, 1000])\ndistance_data = np.array([0, 200, 400, 600, 800, 1000])\nax3.plot(distance_data, elevation_data, color='purple')\nax3.set_title('Elevation Changes Along a Route')\nax3.set_xlabel('Distance (km/h)')\nax3.set_ylabel('Elevation (m)')\nax3.set_xlim(0, 1000)\nax3.set_ylim(0, 1000)\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nsizes = [10, 30, 25, 15]\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFFF99']\n\n# Data for the radar chart\ncategories = ['Expression', 'Creativity', 'Collaboration', 'Dedication', 'Technique']\nvalues = [0.4, 0.8, 0.2, 0.6, 0.2]\nnum_vars = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the radar chart\nfig, ax = plt.subplots(figsize=(10, 5), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='grey', size=8)\nax.set_rlabel_position(0)\n\n# Plot data\nax.plot(angles, values + values[:1], linewidth=2, linestyle='solid', label='Student Performance')\nax.fill(angles, values + values[:1], 'b', alpha=0.1)\n\n# Add title\nplt.title('Student Performance in Arts Education', size=15, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nsales_probabilities = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\nknown_sales = [25000, 20000, 15000, 10000, 5000, 0]\nunknown_sales = [20000, 15000, 10000, 5000, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nbars = []\nfor i in range(len(products)):\n    bar = ax.barh(regions, known_sales, left=unknown_sales, color='green', label='Known Sales' if i == 0 else None)\n    bars.append(bar)\n    ax.barh(regions, unknown_sales, color='blue', label='Unknown Sales' if i == 0 else None)\n\n# Add labels and title\nax.set_xlabel('Sales Probability')\nax.set_ylabel('Regions')\nax.set_title('Sales by Region and Product')\n\n# Add legend\nax.legend()\n\n# Add grid\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the histogram\nreturns = [-0.6, -0.4, -0.2, 0.0, 0.2]\ngains = [100, 80, 60, 40, 20]\nlosses = [120, 100, 80, 60, 40]\n\n# Data for the scatter plot\ntech_stocks = np.random.normal(0, 1, 100)\nenergy_stocks = np.random.normal(0, 1, 100)\ntech_stocks = np.clip(tech_stocks, -1, 1)\nenergy_stocks = np.clip(energy_stocks, -1, 1)\n\n# Create the figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), gridspec_kw={'width_ratios': [3, 2]})\n\n# Histogram plot\nax1.barh(returns, gains, color='green', label='Gains')\nax1.barh(returns, losses, left=gains, color='red', label='Losses')\nax1.set_xlabel('Returns')\nax1.set_ylabel('Frequency')\nax1.set_title('Histogram of Stock Returns')\nax1.legend()\n\n# Scatter plot\nax2.scatter(tech_stocks, energy_stocks, color='blue', label='Tech Stocks')\nax2.scatter(tech_stocks, energy_stocks, color='yellow', label='Energy Stocks')\nax2.set_xlabel('Tech Stocks')\nax2.set_ylabel('Energy Stocks')\nax2.set_title('Investment Clusters')\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nx = np.linspace(0, 5, 10)\ny = np.sin(x)\nz = np.cos(x)\n\n# Create the first plot\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.plot(x, y, 'bo-')\nax.set_title('Energy Consumption (GWh)')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Energy Consumption (GWh)')\nax.set_ylim(-1.0, 1.0)\n\n# Data for the second plot\nx2 = np.linspace(-4, 4, 10)\ny2 = np.linspace(-2, 2, 10)\nx2, y2 = np.meshgrid(x2, y2)\nz2 = np.sin(np.sqrt(x2**2 + y2**2))\n\n# Create the second plot\nax2 = fig.add_subplot(122, projection='3d')\nax2.plot_surface(x2, y2, z2, cmap='Blues', alpha=0.7)\nax2.set_title('Renewable Energy Ratio (%)')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Literature', 'Renaissance Texts']\nsizes = [15, 35, 20, 30]\ncolors = ['#FFA500', '#FF6347', '#90EE90', '#ADD8E6']\n\n# Create a figure and axis for the pie chart\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax1.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax1.set_title('Historical Document Types in Library')\n\n# Create a second subplot for the scatter plot\nax2 = fig.add_subplot(122, sharey=ax1)\n\n# Data for the scatter plot\nyears = [400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]\ndocument_counts = [150, 200, 250, 300, 350, 400, 450, 500, 550]\n\n# Plot the scatter plot\nax2.scatter(years, document_counts, color='purple', label='Document Count')\n\n# Set the title and labels for the scatter plot\nax2.set_title('Document Count Over Historical Periods')\nax2.set_xlabel('Year')\nax2.set_ylabel('Number of Documents')\n\n# Add a legend to the scatter plot\nax2.legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nbrands = ['Louis Vuitton', 'Chanel', 'Dior', 'Prada', 'Gucci']\npopularity_index = [9.25, 9.0, 8.75, 7.5, 8.5]\naverage_price = [1000, 1200, 1400, 1600, 1800]\ncustomer_satisfaction = [10, 8, 6, 4, 2]\n\n# Create a figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0), gridspec_kw={'width_ratios': [1, 3]})\n\n# Plot 1: Popularity Index vs Average Price\nax1.barh(brands, popularity_index, color=['purple', 'green', 'yellow', 'blue', 'cyan'])\nax1.set_xlabel('Popularity Index')\nax1.set_ylabel('Average Price ($)')\nax1.set_title('Luxury Brand Popularity vs Price')\n\n# Plot 2: Customer Satisfaction Distribution Across Brands\nax2.barh(brands, customer_satisfaction, color=['lightblue', 'lightgreen', 'lightcyan', 'lightcoral', 'lightsteelblue'])\nax2.set_xlabel('Customer Satisfaction')\nax2.set_ylabel('Brands')\nax2.set_title('Customer Satisfaction Distribution Across Brands')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019', 'Addelpalli2021']\naccuracy = [75.32, 77.11, 77.03, 76.86, 74.52, 74.52, 55.5]\nrobust_accuracy = [60.5, 59.3, 58.35, 59.1, 60.5, 55.95, 55.5]\n\n# Colors for the bars\ncolors = ['#008000', '#008000', '#008000', '#008000', '#008000', '#008000', '#FF0000']\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot accuracy data\nax1.bar(categories, accuracy, color=colors, label='Accuracy (%)')\nax1.set_ylabel('Accuracy (%)', color='black')\nax1.tick_params(axis='y', labelcolor='black')\n\n# Create a second y-axis for robust accuracy\nax2 = ax1.twinx()\nax2.bar(categories, robust_accuracy, color=[plt.cm.Paired(i) for i in range(len(categories))], alpha=0.7, label='Robust Accuracy (%)')\nax2.set_ylabel('Robust Accuracy (%)', color='black')\nax2.tick_params(axis='y', labelcolor='black')\n\n# Set title and labels\nplt.title('Accuracy and Robust Accuracy (%)')\nax1.set_xlabel('')\n\n# Add legend\nfig.legend(loc=\"upper right\", bbox_to_anchor=(1.1, 1), bbox_transform=ax1.transAxes)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvalues = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\ncolors = ['#1f77b4', '#1f77b4', '#1f77b4', '#1f77b4', '#1f77b4', '#1f77b4']\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\n\nax1.bar(categories, values, color=colors, alpha=0.5)\nax1.set_ylabel('Generalized Variance')\nax1.set_ylim(0, 1.0)\nax1.set_title('Generalized Variance by Context')\n\n# Twin axes for the second y-axis\nax2 = ax1.twinx()\nax2.plot(categories, [0.3, 0.3, 0.3, 0.3, 0.3, 0.3], 'o-', color='green', label='Sobol')\nax2.plot(categories, [0.3, 0.3, 0.3, 0.3, 0.3, 0.3], 'o-', color='orange', label='Hcube')\nax2.plot(categories, [0.3, 0.3, 0.3, 0.3, 0.3, 0.3], 'o-', color='purple', label='Partial Context')\nax2.plot(categories, [0.3, 0.3, 0.3, 0.3, 0.3, 0.3], 'o-', color='magenta', label='Full Context')\nax2.plot(categories, [0.3, 0.3, 0.3, 0.3, 0.3, 0.3], 'o-', color='blue', label='Random')\nax2.set_ylabel('Average Regret')\nax2.set_ylim(0.0, 0.35)\n\n# Legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# X-axis ticks\nplt.xticks(rotation=45)\n\n# Show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nelo_ratings = np.array([0, 200, 400])\ngpt35_turbo = np.array([100, 150, 200])\nclaude_13 = np.array([120, 170, 220])\nclaude_21 = np.array([130, 180, 230])\ngpt4_turbo = np.array([140, 190, 240])\n\n# Create figure and axis\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot 1: Elo Rating vs Correct Rating - Incorrect Rating\nax1.plot(elo_ratings, gpt35_turbo, 'o-', color='blue', label='GPT-3.5-Turbo')\nax1.plot(elo_ratings, claude_13, 'o-', color='orange', label='Claude 1.3')\nax1.plot(elo_ratings, claude_21, 'o-', color='green', label='Claude 2.1')\nax1.plot(elo_ratings, gpt4_turbo, 'o-', color='brown', label='GPT-4-Turbo')\n\nax1.set_xlabel('Elo Rating')\nax1.set_ylabel('Correct Rating - Incorrect Rating')\nax1.set_title('Debaters')\nax1.legend()\n\n# Plot 2: Elo Rating vs Aggregate Elo Rating\nax2.scatter(elo_ratings, gpt35_turbo, color='blue', label='GPT-3.5-Turbo')\nax2.scatter(elo_ratings, claude_13, color='orange', label='Claude 1.3')\nax2.scatter(elo_ratings, claude_21, color='green', label='Claude 2.1')\nax2.scatter(elo_ratings, gpt4_turbo, color='brown', label='GPT-4-Turbo')\n\nax2.set_xlabel('Aggregate Elo Rating')\nax2.set_ylabel('Aggregate Elo Rating')\nax2.set_title('Debaters')\n\n# Plot 3: Judge vs Aggregate Elo Rating\nax3.plot([-200, 0], [40, 60], 'r-', linewidth=2)\nax3.scatter([-200, 0], [40, 60], color='black', marker='o')\n\nax3.set_xlabel('Judge: GPT-4-Turbo')\nax3.set_ylabel('Aggregate Elo Rating')\nax3.set_title('Debaters')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['30.5%', '4.6%', '10.6%', '11.3%', '13.2%', '29.8%']\nsizes = [30.5, 4.6, 10.6, 11.3, 13.2, 29.8]\ncolors = ['#1f77b4', '#aec7e8', '#c5b0d5', '#ffbb78', '#ff9896', '#98df8a']\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Add title\nplt.title('Pie Chart Example')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk', '90 g sugar', '225 g flour']\nsizes = [1, 60, 30, 100, 90, 225]\ncolors = ['#1f77b4', '#d62728', '#2ca02c', '#9467bd', '#ff7f0e', '#ffbb78']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.pie(sizes, labels=labels, colors=colors, startangle=90, wedgeprops=dict(width=0.3))\n\n# Set the title\nplt.title('Matplotlib bakery: A donut')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Transport', 'Food', 'Others', 'Utilities', 'Entertainment']\nsizes = [37.5, 29.2, 10, 16.7, 10]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nexplode = (0, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a donut chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\n       autopct='%1.1f%%', startangle=90, pctdistance=0.85)\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\nplt.title('Expenses - Company vs. Project')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlabels_lo_ra = ['Unused', 'Gradient', 'Model', 'Optimiser']\nsizes_lo_ra = [31.4, 33.0, 15.7, 19.9]\ncolors_lo_ra = ['#e6b88a', '#90ee90', '#add8e6', '#c2c2f0']\n\n# Data for QLoRA\nlabels_q_lo_ra = ['Unused', 'Gradient', 'Model', 'Optimiser']\nsizes_q_lo_ra = [54.8, 28.4, 10.5, 6.3]\ncolors_q_lo_ra = ['#e6b88a', '#90ee90', '#add8e6', '#c2c2f0']\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot LoRA\nwedges_lo_ra, texts_lo_ra, autotexts_lo_ra = ax1.pie(\n    sizes_lo_ra, labels=labels_lo_ra, colors=colors_lo_ra,\n    autopct='%1.1f%%', startangle=90, pctdistance=0.85,\n    wedgeprops=dict(width=0.3, edgecolor='w'), textprops={'fontsize': 10}\n)\n\n# Draw circle for donut\ncentre_circle_lo_ra = plt.Circle((0, 0), 0.70, fc='white')\nfig.gca().add_artist(centre_circle_lo_ra)\n\n# Plot QLoRA\nwedges_q_lo_ra, texts_q_lo_ra, autotexts_q_lo_ra = ax2.pie(\n    sizes_q_lo_ra, labels=labels_q_lo_ra, colors=colors_q_lo_ra,\n    autopct='%1.1f%%', startangle=90, pctdistance=0.85,\n    wedgeprops=dict(width=0.3, edgecolor='w'), textprops={'fontsize': 10}\n)\n\n# Draw circle for donut\ncentre_circle_q_lo_ra = plt.Circle((0, 0), 0.70, fc='white')\nfig.gca().add_artist(centre_circle_q_lo_ra)\n\n# Set titles\nax1.set_title('LoRA', fontsize=12)\nax2.set_title('QLoRA', fontsize=12)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax1.axis('equal')  \nax2.axis('equal')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first pie chart\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\nsizes1 = [25.1, 26.4, 12.6, 15.9]\ncolors1 = ['#f7e3b0', '#c7d8a7', '#a6d8a7', '#e6f5d0']\n\n# Data for the second pie chart\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\nsizes2 = [46.2, 23.9, 5.3, 4.6]\ncolors2 = ['#f7e3b0', '#c7d8a7', '#a6d8a7', '#e6f5d0']\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(5.0, 8.0))\n\n# Plot the first pie chart\nax1.pie(sizes1, labels=labels1, colors=colors1, startangle=90, wedgeprops=dict(width=0.3))\nax1.set_title('Full Finetuning')\n\n# Plot the second pie chart\nax2.pie(sizes2, labels=labels2, colors=colors2, startangle=90, wedgeprops=dict(width=0.3))\nax2.set_title('QLoRA')\n\n# Set the color of the labels\nfor label in ax1.get_xticklabels():\n    label.set_color('black')\nfor label in ax2.get_xticklabels():\n    label.set_color('black')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['Fruits', 'Proteins', 'Vegetables', 'Grains', 'Dairy']\nsizes = [25, 35, 20, 10, 10]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n\n# Create a pie chart\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Title of the chart\nplt.title('Nutritional Distribution')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 21.4, 37.5]\ncolors = ['#1f77b4', '#2ca02c', '#ffcc4c']\nexplode = (0, 0, 0.1)  # explode 3rd slice (i.e., Technology)\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', startangle=90, pctdistance=0.85)\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')\n\n# Title\nplt.title('Market Share by Sector - External vs. Internal')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Logs 10%', 'Frogs 15%', 'Hogs 30%', 'Dogs 45%']\nsizes = [10, 15, 30, 45]\ncolors = ['#87CEEB', '#FFB6C1', '#90EE90', '#98FB98']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, startangle=90, wedgeprops=dict(width=0.3))\n\n# Set the title of the chart\nax.set_title('Animals')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [29, 11, 20, 40]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Add title\nplt.title('Pie Chart of Names')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['UK', 'Italy', 'Germany', 'France']\nsizes = [42, 28, 12, 18]\ncolors = ['#006400', '#FFA500', '#1E90FF', '#FFD700']\nhatches = ['o', '.', '', '']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90, hatch=hatches)\n\n# Set the title\nax.set_title('Countries in Europe')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['5.7%', '13.3%', '14.3%', '19.0%', '21.4%', '26.2%']\nsizes = [5.7, 13.3, 14.3, 19.0, 21.4, 26.2]\ncolors = ['#f0e68c', '#ffa07a', '#ff6347', '#ff4500', '#8b0000', '#800000']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Title of the chart\nplt.title('Slice of a pie chart')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [35.4, 10.3, 24.7, 17.2, 12.4]\ncolors = ['#1f77b4', '#2ca02c', '#9edae5', '#ff7f0e', '#ffbb78']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Pie Chart Example')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn', 'Youtube']\nsizes = [25, 35, 10, 10, 20]\ncolors = ['#add8e6', '#add8e6', '#1e90ff', '#000000', '#87ceeb']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set title\nplt.title('Social Media Usage')\n\n# Add legend\nplt.legend(labels, loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['NAACL', 'EMNLP', 'EACL', 'COLING', 'ACL']\nsizes = [25.4, 20.3, 12.2, 7.4, 34.7]\ncolors = ['#1f77b4', '#2ca02c', '#9467bd', '#8c564b', '#ff7f0e']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add title\nplt.title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Solar', 'Wind', 'Other', 'Coal', 'Hydro']\nsizes = [20, 30, 10, 25, 15]\ncolors = ['#ffff99', '#99ff99', '#d9d9d9', '#ff9999', '#66b3ff']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nax.pie(sizes, labels=labels, colors=colors, startangle=90, wedgeprops=dict(width=0.3))\n\n# Set the title of the chart\nplt.title('Energy Consumption - National vs. Project')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['English', 'French', 'German', 'Japanese']\nout_group_bias = [np.array([-4.00, -3.22, -2.44, -4.75, -4.00]), \n                   np.array([-4.00, -3.22, -2.44, -4.75, -4.00]), \n                   np.array([-4.00, -3.22, -2.44, -4.75, -4.00]), \n                   np.array([-4.00, -3.22, -2.44, -4.75, -4.00])]\nin_group_bias = [np.array([1.88, 2.88, 3.38, 3.88, 4.38]), \n                 np.array([1.88, 2.88, 3.38, 3.88, 4.38]), \n                 np.array([1.88, 2.88, 3.38, 3.88, 4.38]), \n                 np.array([1.88, 2.88, 3.38, 3.88, 4.38])]\n\n# Colors\ncolors = ['red', 'blue', 'red', 'blue']\n\n# Plot\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\nfor ax, category, out_bias, in_bias, color in zip(axes, categories, out_group_bias, in_group_bias, colors):\n    ax.plot(out_bias, label='Out-group bias (Collectivism)', color=color)\n    ax.plot(in_bias, label='In-group bias (Individualism)', color='black')\n    ax.set_title(category)\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Bias')\n    ax.set_xticks(np.arange(len(categories)))\n    ax.set_xticklabels(categories)\n    ax.legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['English', 'French', 'German']\nvalues = [-4.00, -3.22, -2.44]\nerrors = [0.18, 0.18, 0.18]  # Assuming error bars are 0.18 for simplicity\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with error bars\nax.errorbar(categories, values, yerr=errors, fmt='o-', color='red', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Language')\nax.set_ylabel('Out-group bias (Collectivism)')\nax.set_title('Out-group bias (Collectivism)')\n\n# Add legend\nax.legend(['Out-group bias (Collectivism)'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx1 = np.linspace(0, 0.6, 10)\nx2 = np.linspace(0.1, 0.5, 10)\ny_true_field = np.sin(x1) * np.cos(x2)\ny_sindy_learned_field = np.sin(x1) * np.cos(x2) + 0.1\ny_train_sample = np.sin(x1) * np.cos(x2) - 0.1\ny_test_sample = np.sin(x1) * np.cos(x2) + 0.2\ny_sindy_train = np.sin(x1) * np.cos(x2) - 0.2\ny_sindy_test = np.sin(x1) * np.cos(x2) + 0.3\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Scatter plot for arrows\nax.quiver(x1, x2, np.cos(x1), np.sin(x2), color='purple', scale=20)\n\n# Plot lines\nax.plot(x1, y_true_field, label='True Field', color='red')\nax.plot(x1, y_sindy_learned_field, label='SINDy Learned Field', color='blue')\nax.plot(x1, y_train_sample, label='Train Sample', color='cyan')\nax.plot(x1, y_test_sample, label='Test Sample', color='orange')\nax.plot(x1, y_sindy_train, label='SINDy Train', color='green')\nax.plot(x1, y_sindy_test, label='SINDy Test', color='black')\n\n# Labels and title\nax.set_xlabel('X1')\nax.set_ylabel('X2')\nax.set_title('Vector Field Plot')\nax.legend()\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-1, 1, 20)\ny = np.linspace(-1, 1, 20)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field components\nU = -Y\nV = X\n\n# Plot the vector field\nplt.figure(figsize=(5.0, 4.0))\nplt.quiver(X, Y, U, V, color='blue', scale=20)\n\n# Set labels and title\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Set limits for x and y axes\nplt.xlim(-1, 1)\nplt.ylim(-1, 1)\n\n# Add grid lines\nplt.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field components\nU = -Y\nV = X\n\n# Plot the vector field\nplt.figure(figsize=(6.0, 5.0))\nplt.quiver(X, Y, U, V, color='green', scale=20)\n\n# Add labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Magnetic Field \\u03B2 in Tesla units')\n\n# Set the limits for x and y axes\nplt.xlim(-2, 2)\nplt.ylim(-2, 2)\n\n# Add a grid\nplt.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['VQA', 'MME', 'MM', 'LLaVA-W', 'POPE']\nvalues = [79.9, 64.9, 63.8, 86.4, 72.9]\ncolors = ['#FF0000', '#0000FF', '#808080', '#FFA500', '#800080']\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='black', size=10)\nax.set_yticklabels([])\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([50, 60, 70, 80, 90], [\"50\", \"60\", \"70\", \"80\", \"90\"], color=\"black\", size=10)\nplt.ylim(50, 90)\n\n# Plot data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='TextVQA')\nax.fill(angles, values + values[:1], color='grey', alpha=0.1)\n\n# Add a title\nplt.title('TextVQA', size=15, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['fr', 'hi', 'ru', 'th', 'tr', 'ur', 'vi', 'zh']\nvalues = [20, 40, 60, 80, 100, 120, 140, 160]\ncolors = ['#FF6347', '#90EE90', '#ADD8E6', '#FF6347', '#90EE90', '#ADD8E6', '#FF6347', '#90EE90']\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='grey', size=8)\nax.set_yticklabels([])\n\n# Plot data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='PABEE')\nax.fill(angles, values + values[:1], color='#90EE90', alpha=0.1)\n\n# Add a title\nplt.title('XLNI (speed-up ratio: 4)', size=11, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Memory', 'Understanding', 'Questioning', 'Reasoning', 'Paraphrasing', 'Reflection']\nvalues = [10, 8, 6, 4, 2, 0]\ncolors = ['#66b3ff', '#99ff99', '#66b3ff', '#99ff99', '#66b3ff', '#66b3ff']\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(4.0, 4.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='black', size=8)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([0, 2, 4, 6, 8, 10], [\"0\", \"2\", \"4\", \"6\", \"8\", \"10\"], color=\"black\", size=7)\nplt.ylim(0, 10)\n\n# Plot data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Interference')\nax.fill(angles, values + values[:1], 'b', alpha=0.1)\n\n# Add a title\nplt.title(\"Interference\", size=11, color='black', y=1.1)\n\n# Show the legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Data\ncategories = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']\nvalues = {\n    'GNN_k=1': [0.43, 0.24, 0.28, 0.22, 0.29, 0.24, 0.46, 0.5],\n    'GNN_k=2': [0.33, 0.24, 0.24, 0.22, 0.29, 0.24, 0.46, 0.5],\n    'GNN^': [0.37, 0.28, 0.24, 0.22, 0.29, 0.24, 0.46, 0.5]\n}\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = [n / float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Initialize the radar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [\"0.2\", \"0.3\", \"0.4\", \"0.5\", \"0.6\", \"0.7\", \"0.8\", \"0.9\"], color=\"grey\", size=7)\nplt.ylim(0, 1)\n\n# Plot each line\nfor (i, (category, values)) in enumerate(values.items()):\n    values += values[:1]  # Repeat the first value to close the loop\n    ax.plot(angles, values, linewidth=1, linestyle='solid', label=category)\n    ax.fill(angles, values, alpha=0.1)\n\n# Add a title\nplt.title(\"Radar Chart Example\", size=11, color=\"black\", y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['novel', 'programming world', 'mythology', 'universe', 'general', 'movie', 'city', 'landscape', 'special place', 'country', 'fairy tale', 'cultural event']\nvalues = [0.2, 0.8, 0.4, 0.6, 0.4, 0.6, 0.4, 0.6, 0.4, 0.6, 0.4, 0.6]\ncolors = ['#1f77b4'] * len(categories)\n\n# Create a radar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw the grid lines\nangles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()\nangles += angles[:1]  # To close the circle\nax.set_theta_offset(np.pi / 2)\nax.set_theta_direction(-1)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], labels=['0.2', '0.4', '0.6', '0.8'])\nax.set_yticklabels([])\nax.plot(angles, [0.2, 0.4, 0.6, 0.8, 0.6, 0.4, 0.6, 0.4, 0.6, 0.4, 0.6, 0.4], color='black', linewidth=1, linestyle='solid')\n\n# Plot data\nax.plot(angles, values + values[:1], color=colors[0], linewidth=2, linestyle='solid')\nax.fill(angles, values + values[:1], color=colors[0], alpha=0.25)\n\n# Add labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Title\nplt.title('Llama-2-70B', y=1.1)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Coding', 'Math', 'Reasoning', 'Writing', 'Humanities', 'STEM']\nvalues = {\n    'GPT-J-6B': [1, 2, 3, 4, 5, 6],\n    'TinyLLaMA-1.1B': [2, 3, 4, 5, 6, 7],\n    'OpenLLaMA-3B': [3, 4, 5, 6, 7, 8],\n    'OpenMoE-8B/32E': [4, 5, 6, 7, 8, 9]\n}\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Initialize the radar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='grey', size=8)\nax.set_yticklabels([])\n\n# Plot each line\nfor (name, color), values in values.items():\n    values += values[:1]  # Repeat the first value to close the loop\n    ax.plot(angles, values, linewidth=2, linestyle='solid', label=name, color=color)\n\n# Add a title\nplt.title('Roleplay', size=15, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Nutrition', 'Purity', 'Allergen', 'Pollution', 'Recall', 'Storage', 'Material', 'Labeling']\nnestle_values = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nmuji_values = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot each line\nax.plot(angles, nestle_values + nestle_values[:1], color='red', linewidth=2, label='Nestle')\nax.plot(angles, muji_values + muji_values[:1], color='green', linewidth=2, label='MUJI')\n\n# Fill area\nax.fill(angles, nestle_values + nestle_values[:1], color='red', alpha=0.2)\nax.fill(angles, muji_values + muji_values[:1], color='green', alpha=0.2)\n\n# Add labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set title\nplt.title('MUJI vs Nestle in Food Safety')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Apple', 'Samsung', 'Huawei']\nsizes = [85.8, 86.4, 80.9]\ncolors = ['#ffa500', '#1e90ff', '#228b22']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Pie Chart Example')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for the radar chart\ncategories = ['Blow Molding', 'Compression', 'Extrusion']\nvalues = [\n    [1, 2, 3],  # Injection\n    [4, 5, 6],  # Injection Molding\n    [7, 8, 9]   # Blow Molding\n]\n\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the radar chart\nfig, ax = plt.subplots(figsize=(10.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='grey', size=8)\nplt.yticks([1, 2, 3, 4, 5], [\"1\", \"2\", \"3\", \"4\", \"5\"], color=\"grey\", size=7)\nplt.ylim(0, 5)\n\n# Plot data\nax.plot(angles, values[0] + values[0][:1], linewidth=1, linestyle='solid', label='Injection')\nax.fill(angles, values[0] + values[0][:1], 'r', alpha=0.1)\n\nax.plot(angles, values[1] + values[1][:1], linewidth=1, linestyle='solid', label='Injection Molding')\nax.fill(angles, values[1] + values[1][:1], 'g', alpha=0.1)\n\nax.plot(angles, values[2] + values[2][:1], linewidth=1, linestyle='solid', label='Blow Molding')\nax.fill(angles, values[2] + values[2][:1], 'b', alpha=0.1)\n\n# Add a title\nplt.title('Radar Chart Example', size=15, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Data\ncategories = ['Food Quality', 'Shows', 'Staff', 'Cleanliness', 'Wait Times', 'Parking', 'Ticket Price', 'Souvenirs', 'Thrive Rides', 'Family Rides']\ndisney_scores = [0.2, 0.4, 0.6, 0.8, 1.0, 0.4, 0.2, 0.6, 0.8, 1.0]\nuniversal_scores = [0.4, 0.6, 0.8, 1.0, 0.4, 0.2, 0.6, 0.8, 1.0, 0.4]\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = [n / float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]  # Repeat the first value to close the circle\n\n# Initialize the radar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='black', size=10)\n\n# Draw ylabels at the end of each axis\nax.set_rlabel_position(0)\nplt.yticks([0.2, 0.4, 0.6, 0.8, 1.0], [\"0.2\", \"0.4\", \"0.6\", \"0.8\", \"1.0\"], color=\"grey\", size=7)\nplt.ylim(0, 1.0)\n\n# Plot data\nax.plot(angles, disney_scores + disney_scores[:1], linewidth=1, linestyle='solid', label='Disney')\nax.fill(angles, disney_scores + disney_scores[:1], 'orange', alpha=0.1)\n\nax.plot(angles, universal_scores + universal_scores[:1], linewidth=1, linestyle='solid', label='Universal Studios')\nax.fill(angles, universal_scores + universal_scores[:1], 'purple', alpha=0.1)\n\n# Add a title\nplt.title('Amusement Park Comparison: Disney vs Universal Studios', size=15, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Chanel', 'Dior', 'Gucci']\nvalues = [1, 3, 5]\ncolors = ['#F7DC6F', '#D3D3D3', '#2E8B57']\n\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([1, 3, 5], [\"\", \"\", \"\"], color=\"grey\", size=7)\nplt.ylim(0, 6)\n\n# Plot data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Data')\nax.fill(angles, values + values[:1], color='grey', alpha=0.1)\n\n# Add a title\nplt.title('Example', size=11, color='black', y=1.1)\n\n# Show the legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['TinyLaMA', 'StableLM', 'Phi-2']\nvalues = [85.0, 86.9, 86.4]\ncolors = ['#FF0000', '#0000FF', '#008000']\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='grey', size=8)\nplt.yticks([50, 60, 70, 80, 90], [\"50\", \"60\", \"70\", \"80\", \"90\"], color=\"grey\", size=7)\nplt.ylim(50, 90)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([50, 60, 70, 80, 90], [\"50\", \"60\", \"70\", \"80\", \"90\"], color=\"grey\", size=7)\n\n# Plot data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='POPE')\nax.fill(angles, values + values[:1], color='grey', alpha=0.1)\n\n# Add a title\nplt.title('POPE', size=11, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Data\ncategories = ['Versatility', 'Longevity', 'Sillage', 'Projection', 'Packaging', 'Value']\nchanel_data = [1, 3, 5, 7, 9, 1]\ndior_data = [5, 7, 9, 1, 3, 5]\ngucci_data = [9, 1, 3, 5, 7, 1]\n\n# Number of variables we're plotting\nN = len(categories)\n\n# What will be the angle of each axis in the plot? (we divide the plot / number of variable)\nangles = [n / float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]  # To complete the loop\n\n# Initialise the spider plot\nfig, ax = plt.subplots(figsize=(18.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='grey', size=8)\n\n# Draw ylabels\nax.set_rscale('linear')\nax.set_yticks([1, 3, 5, 7, 9])\nax.set_yticklabels(['1', '3', '5', '7', '9'], color='grey', size=8)\n\n# Plot each individual's data with a line\nax.plot(angles, chanel_data + chanel_data[:1], linewidth=2, linestyle='solid', label='Chanel', color='blue')\nax.fill(angles, chanel_data + chanel_data[:1], alpha=0.25, color='blue')\n\nax.plot(angles, dior_data + dior_data[:1], linewidth=2, linestyle='solid', label='Dior', color='darkblue')\nax.fill(angles, dior_data + dior_data[:1], alpha=0.25, color='darkblue')\n\nax.plot(angles, gucci_data + gucci_data[:1], linewidth=2, linestyle='solid', label='Gucci', color='green')\nax.fill(angles, gucci_data + gucci_data[:1], alpha=0.25, color='green')\n\n# Add a title\nplt.title('Perfume Brand Comparison', size=15, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nangles = np.linspace(0, 2 * np.pi, 10, endpoint=False).tolist() + [angles[0]]\nangles += np.pi / 2  # Shift angles to start from 90 degrees\n\n# Values for each variable\nvalues = [0.6, 0.4, 0.2, 0.8, 0.6, 0.4, 0.2, 0.8, 0.6, 0.4]\n\n# Create a radar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw the first layer\nax.plot(angles, values, 'o-', linewidth=2, color='black')\nax.fill(angles, values, 'lightgray', alpha=0.5)\n\n# Draw the second layer\nax.plot(angles, [0.2] * len(angles), 'o-', linewidth=2, color='red')\nax.fill(angles, [0.2] * len(angles), 'pink', alpha=0.5)\n\n# Add labels\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1.0'])\nax.set_xticks(angles[:-1])\nax.set_xticklabels(['0', '35', '70', '105', '140', '175', '210', '245', '280', '315'])\n\n# Add title\nplt.title('Loadings PC1\\nLoadings PC2', va='bottom')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Data\ncategories = ['Query Error', 'Privacy']\nfidelity_d_train = [1, 2]\nfidelity_d_test = [3, 4]\nprivsyn = [5, 3]\ntvae = [4, 5]\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = [n / float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Initialize the radar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot each dataset\nax.plot(angles, fidelity_d_train + fidelity_d_train[:1], label='Fidelity(D_train)', color='green')\nax.fill(angles, fidelity_d_train + fidelity_d_train[:1], alpha=0.25, color='green')\n\nax.plot(angles, fidelity_d_test + fidelity_d_test[:1], label='Fidelity(D_test)', color='purple')\nax.fill(angles, fidelity_d_test + fidelity_d_test[:1], alpha=0.25, color='purple')\n\nax.plot(angles, privsyn + privsyn[:1], label='PrivSyn', color='blue')\nax.fill(angles, privsyn + privsyn[:1], alpha=0.25, color='blue')\n\nax.plot(angles, tvae + tvae[:1], label='TVAE', color='cyan')\nax.fill(angles, tvae + tvae[:1], alpha=0.25, color='cyan')\n\n# Add labels\nplt.xticks(angles[:-1], categories)\nplt.yticks([1, 2, 3, 4, 5], [\"\", \"\", \"\", \"\", \"\"])\nplt.title('Comparison of Models', size=18, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Baseline', 'Retro(Syn2)']\nvalues = [35, 45]\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([30, 40, 50, 60, 70, 80, 90], [\"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\"], color=\"grey\", size=7)\nplt.ylim(0, 90)\n\n# Plot data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Heterocycle formation')\nax.fill(angles, values + values[:1], color='blue', alpha=0.1)\n\n# Add a title\nplt.title('Heterocycle formation', size=11, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F']\nvalues = {\n    'predicted_score': [0.07, 0.03, 0.07, 0.07, 0.03, 0.07],\n    'helpful_score': [0.03, 0.03, 0.03, 0.03, 0.03, 0.03],\n    'result_score': [0.05, 0.05, 0.05, 0.05, 0.05, 0.05],\n    'rating_score': [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n}\n\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Add a grid\nax.yaxis.grid(True)\n\n# Fill area\nax.fill(angles, values['predicted_score'], 'g', alpha=0.1)\nax.fill(angles, values['helpful_score'], 'y', alpha=0.1)\nax.fill(angles, values['result_score'], 'b', alpha=0.1)\nax.fill(angles, values['rating_score'], 'r', alpha=0.1)\n\n# Add data points\nax.plot(angles, values['predicted_score'], 'g-o')\nax.plot(angles, values['helpful_score'], 'y-o')\nax.plot(angles, values['result_score'], 'b-o')\nax.plot(angles, values['rating_score'], 'ro')\n\n# Add a center circle\nax.add_artist(plt.Circle((0.5, 0.5), 0.1, color='grey', alpha=0.5))\n\n# Add legend\nax.legend(['Predicted score', 'Helpful score', 'Result score', 'Rating score'], loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set title\nplt.title('Model Comparison', size=15, y=1.1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['rose', 'candlestick', 'line_num', 'pie', 'bubble', 'radar', 'area', 'funnel', 'box', 'treemap', 'heatmap']\nvalues = [3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]\ncolors = ['#FF6F61', '#6B459E', '#A05D56', '#4DBBD5', '#FDB462', '#76C7C0', '#8E44AD', '#2ECC71', '#F39C12', '#9B59B6', '#F1C40F']\n\n# Number of categories\nN = len(categories)\n\n# Compute angle for each category\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the circle\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='grey', size=8)\nax.set_yticklabels([])\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([1, 2, 3, 4, 5], [\"1\", \"2\", \"3\", \"4\", \"5\"], color=\"grey\", size=7)\nplt.ylim(0, 5)\n\n# Plot data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='QWen-VL')\nax.fill(angles, values + values[:1], color='#FF6F61', alpha=0.25)\n\n# Add a title\nplt.title(\"3D-bar\", size=11, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Anomaly Detection', 'Short-horizon Forecasting', 'Long-horizon Forecasting']\nvalues = [30, 20, 50]\ncolors = ['#FF6347', '#8B4513', '#9400D3']\n\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='black', size=10)\nax.set_yticklabels([])\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10, 20, 30, 40, 50], [\"10\", \"20\", \"30\", \"40\", \"50\"], color=\"grey\", size=7)\nplt.ylim(0, 50)\n\n# Plot data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='GPT4TS')\nax.fill(angles, values + values[:1], color='#F5DEB3', alpha=0.1)\n\n# Add a title\nplt.title(\"Imputation\", size=15, color='black', y=1.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['POPE', 'MM-Vet', 'TextVQA', 'GQA', 'SQA-I']\nvalues = [75.4, 65.0, 62.8, 72.9, 67.2]\ncolors = ['#FF3333', '#3333FF', '#FF6666', '#6666FF', '#FF9999']\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\n\n# The plot is a circle, so we need to \"complete the loop\"\nvalues += values[:1]\nangles += angles[:1]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nax.set_theta_offset(np.pi / 2)\nax.set_theta_direction(-1)\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([40, 50, 60, 70], [\"40\", \"50\", \"60\", \"70\"], color=\"grey\", size=7)\nplt.ylim(40, 70)\n\n# Plot data\nax.plot(angles, values, linewidth=1, linestyle='solid')\nax.fill(angles, values, 'b', alpha=0.1)\n\n# Add a title\nplt.title(\"TinyLLaVA-3.1B\", size=11, color=\"black\", y=1.1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nvalues = [np.random.randint(0, 2, 5) for _ in range(len(models))]\ncolors = ['blue', 'orange', 'green', 'blue', 'green', 'blue', 'orange', 'green', 'blue']\n\n# Create subplots\nfig, axes = plt.subplots(1, 4, figsize=(12, 4))\n\n# Plot each model's data\nfor ax, model, value, color in zip(axes, models, values, colors):\n    ax.scatter(np.arange(len(value)), value, color=color)\n    ax.set_title(model)\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Model-Basedness')\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [0, 1000, 2000, 3000]\ny = [77, 79, 81, 83]\n\n# Labels for each point\nlabels = ['iBOT', 'MoCo v3', 'MAE', 'D2V2']\n\n# Create the plot\nplt.figure(figsize=(8.0, 5.0))\nplt.plot(x, y, marker='o', linestyle='-', color='black')\n\n# Annotate each point with its label\nfor i, label in enumerate(labels):\n    plt.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set labels and title\nplt.xlabel('Pre-training GPU Hours')\nplt.ylabel('Accuracy [%]')\nplt.title('ImageNet-1K Linear Probing')\n\n# Set y-axis limits\nplt.ylim(77, 85)\n\n# Add grid lines\nplt.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ninference_time = [10, 20, 30, 40, 50, 60]\naverage_score = [0.55, 0.65, 0.70, 0.75, 0.80, 0.85]\nbubble_size = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Colors for each data point\ncolors = ['purple', 'blue', 'green', 'yellow', 'orange', 'red']\n\n# Create the plot\nplt.figure(figsize=(8.0, 6.0))\nscatter = plt.scatter(inference_time, average_score, s=bubble_size*1000, c=colors)\n\n# Add labels and title\nplt.xlabel('Inference Time (seconds)')\nplt.ylabel('Average Score')\nplt.title('Bubble Size: Number of Anomalies Detected')\n\n# Add legend\nlegend_labels = ['AR', 'LSTMAD-\u03b2', 'LSTMAD-\u03b1', 'AE', 'FITS', 'Donut']\nplt.legend(scatter.legend_elements(), legend_labels, loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['SeVILA', 'LongViT', 'ShortViT', 'Bard + ImageViT', 'Bard + ShortViT', 'MC-ViT-B', 'MC-ViT-L']\nx = [25, 30, 35, 40, 45, 50, 50]\ny = [40, 45, 50, 55, 55, 55, 55]\nsizes = [100, 100, 100, 100, 100, 100, 100]  # All circles have the same size for simplicity\ncolors = ['lightgrey', 'lightblue', 'lightblue', 'lightblue', 'lightblue', 'pink', 'lightcoral']\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Scatter plot with circles\nscatter = ax.scatter(x, y, s=sizes, c=colors, edgecolor='black')\n\n# Add labels\nfor i, label in enumerate(labels):\n    ax.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set title and labels\nax.set_title('Number of parameters')\nax.set_xlabel('EgoSchema VQA accuracy')\nax.set_ylabel('Perception Test VQA accuracy')\n\n# Set limits\nax.set_xlim(20, 50)\nax.set_ylim(35, 60)\n\n# Add legend\nlegend_labels = ['203M', '424M', '1B', '4B', '>4B']\nlegend_colors = ['lightgrey', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\nlegend_handles = [plt.Circle((0, 0), 1, color=color) for color in legend_colors]\nax.legend(legend_handles, legend_labels, loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_single_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_ensemble_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_caereconstruction = [0.08, 0.07, 0.06, 0.05, 0.04]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot data\nax.plot(x, y_single_lstm, 'b^', label='Single LSTM')\nax.plot(x, y_ensemble_lstm, 'g^', label='Ensemble LSTM')\nax.plot(x, y_caereconstruction, 'ko', label='CAE Reconstruction')\n\n# Set labels and title\nax.set_xlabel('Test Case Index, u')\nax.set_ylabel('Average Relative Error, u')\nax.set_title('Average Relative Error, u')\n\n# Set grid\nax.grid(True)\n\n# Set legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\nmajority = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\nminority = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot data\nax.plot(classes, majority, 'bo-', label='Majority')\nax.plot(classes, minority, 'ro-', label='Minority')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Set labels and title\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies for the ImageNet Classes (ClarifAI)')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [50, 30, 20, 10, 0]\ny = [68, 66, 64, 62, 60]\nlabels = ['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine']\ncolors = ['brown', 'red', 'orange', 'purple', 'green']\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot on the first subplot\nfor i, label in enumerate(labels):\n    ax1.scatter(x[i], y[i], color=colors[i], label=label)\nax1.set_xlabel('Token cost($)')\nax1.set_ylabel('Accuracy(%)')\nax1.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\nax1.legend()\n\n# Plot on the second subplot\nfor i, label in enumerate(labels):\n    ax2.scatter(x[i], y[i], color=colors[i], label=label)\nax2.set_xlabel('TFLOPS')\nax2.set_ylabel('Accuracy(%)')\nax2.set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nefficiency = [15, 20, 25, 30, 35, 40, 45, 50]\ncarbon_reduction = [0, 0, 0, 0, 0, 0, 0, 0]\nenergy_sources = ['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave']\ncolors = ['#ffff99', '#1f77b4', '#1f77b4', '#1f77b4', '#2ca02c', '#ff7f0e', '#9467bd', '#d62728']\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot each data point\nfor i, (eff, cr, src, col) in enumerate(zip(efficiency, carbon_reduction, energy_sources, colors)):\n    ax.plot(eff, cr, marker='o', color=col, label=src)\n\n# Set labels and title\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\nax.set_title('Energy Source')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [-30, -20, -10, 0, 10, 20, 30]\ny = [15, 25, 10, 5, 20, 15, 10]\ncolors = ['blue', 'green', 'purple', 'orange', 'cyan', 'magenta', 'yellow']\nsizes = [100, 150, 100, 75, 125, 100, 75]\n\n# Create scatter plot\nplt.figure(figsize=(9.0, 6.0))\nscatter = plt.scatter(x, y, s=sizes, c=colors, alpha=0.7)\n\n# Add labels and title\nplt.xlabel('\u0394 Robust Accuracy (%)')\nplt.ylabel('\u0394 RNFR (%)')\nplt.title('Scatter Plot of \u0394 Robust Accuracy vs \u0394 RNFR')\n\n# Set grid\nplt.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points for Day 1 and Day 2\nday1 = [2, 4, 6, 8, 10, 12, 14, 16]\nday2 = [3, 5, 7, 9, 11, 13, 15, 17]\n\n# Create a figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data points\nax.plot(day1, 'bo-', label='Day 1')\nax.plot(day2, 'ro-', label='Day 2')\n\n# Set the title and labels\nax.set_title('Scatter Plot of Temperatures')\nax.set_xlabel('Time (hours)')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Set the grid\nax.grid(True)\n\n# Set the limits for x and y axes\nax.set_xlim(1, 17)\nax.set_ylim(75, 115)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny = [95, 90, 85, 80, 75, 70, 65, 60]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'o-', color='green')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Set grid\nax.grid(True)\n\n# Set limits for x and y axes\nax.set_xlim(0, 18)\nax.set_ylim(60, 110)\n\n# Add color bar\ncbar = plt.colorbar(ax=ax, orientation='vertical', fraction=0.046, pad=0.04)\ncbar.set_label('Color Bar Label')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncapacity = [175, 200, 225, 250, 275, 300]\nsolar_energy = [140, 160, 180, 200, 220, 240]\nwind_energy = [150, 170, 190, 210, 230, 250]\nhydro_power = [160, 180, 200, 220, 240, 260]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot lines\nax.plot(capacity, solar_energy, 'o-', color='cyan', label='Solar Energy')\nax.plot(capacity, wind_energy, 'o-', color='magenta', label='Wind Energy')\nax.plot(capacity, hydro_power, 'o-', color='gray', label='Hydropower')\n\n# Add markers for specific points\nax.plot(250, 200, 'o', color='cyan', markersize=10)\nax.plot(275, 220, 'o', color='magenta', markersize=10)\nax.plot(300, 240, 'o', color='gray', markersize=10)\n\n# Set labels and title\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\nax.set_title('Energy Production Trends')\n\n# Set y-axis limits\nax.set_ylim(140, 260)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [10, 20, 30, 40, 50, 60, 70, 80, 90]\ny = [20, 60, 40, 80, 60, 80, 60, 40, 20]\ncolors = ['green', 'cyan', 'green', 'cyan', 'green', 'cyan', 'green', 'cyan', 'green']\nsizes = [100, 60, 60, 60, 60, 60, 60, 60, 60]\n\n# Create scatter plot\nplt.figure(figsize=(8.0, 6.0))\nscatter = plt.scatter(x, y, s=sizes, c=colors, alpha=0.7)\n\n# Add colorbar\ncbar = plt.colorbar(scatter)\ncbar.set_label('Colorbar')\n\n# Set labels and title\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Scatter plot with colorbar')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx1 = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.8, 0.9, 0.8, 0.9, 0.9]\ncolors1 = ['cyan', 'blue', 'blue', 'blue', 'blue', 'blue', 'cyan']\n\nx2 = [2, 3, 4, 5, 6, 7, 8]\ny2 = [0.9, 0.8, 0.8, 0.9, 0.8, 0.9, 0.9]\ncolors2 = ['magenta', 'red', 'red', 'red', 'red', 'red', 'magenta']\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for LibriCSS vs Additional Data 1\nscatter1 = ax1.scatter(x1, y1, color=colors1)\nax1.set_title('LibriCSS vs Additional Data 1')\nax1.set_xlabel('Number of Microphones')\nax1.set_ylabel('WER (%)')\nax1.set_ylim(0.2, 0.9)\nax1.set_xlim(2, 8)\n\n# Plot for AMI vs Additional Data 2\nscatter2 = ax2.scatter(x2, y2, color=colors2)\nax2.set_title('AMI vs Additional Data 2')\nax2.set_xlabel('Number of Microphones')\nax2.set_ylabel('WER (%)')\nax2.set_ylim(0.2, 0.9)\nax2.set_xlim(2, 8)\n\n# Add legend\nlegend_labels = ['LibriCSS WER', 'Additional Data 1', 'AMI WER', 'Additional Data 2']\nlegend_handles = [plt.Line2D([0], [0], marker='o', color='w', label=label, markerfacecolor=color) for label, color in zip(legend_labels, colors1 + colors2)]\nax1.legend(handles=legend_handles, loc='upper left')\n\n# Show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nexploration_values = [0.8, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\nrisk_taking_values = [0.6, 0.7, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot data\nax.plot(models, exploration_values, 'o-', color='green', label='Exploration')\nax.plot(models, risk_taking_values, 'o-', color='red', label='Risk Taking')\n\n# Add labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Value')\nax.set_title('Performance Comparison')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nmodels = ['MIXTAL-8x7B', 'MIXTAL-7B', 'LAMMA2-70B', 'FALCOM-40B', 'Davinci-003', 'Davinci-002', 'Claude-2', 'Claude-1']\ngpt4_scores = [190, 180, 170, 160, 150, 140, 130, 120]\nmeta_cognition_scores = [180, 170, 160, 150, 140, 130, 120, 110]\nexploration_scores = [100, 90, 80, 70, 60, 50, 40, 30]\nrisk_taking_scores = [100, 90, 80, 70, 60, 50, 40, 30]\n\n# Create a figure with subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot 1: Model-Basedness\naxes[0, 0].plot(models, gpt4_scores, label='Model-Basedness', color='blue')\naxes[0, 0].set_title('Model-Basedness')\naxes[0, 0].set_xlabel('Models')\naxes[0, 0].set_ylabel('Score')\naxes[0, 0].legend()\n\n# Plot 2: Meta-Cognition\naxes[0, 1].plot(models, meta_cognition_scores, label='Meta-Cognition', color='yellow')\naxes[0, 1].set_title('Meta-Cognition')\naxes[0, 1].set_xlabel('Models')\naxes[0, 1].set_ylabel('Score')\naxes[0, 1].legend()\n\n# Plot 3: Exploration\naxes[1, 0].plot(models, exploration_scores, label='Exploration', color='green')\naxes[1, 0].set_title('Exploration')\naxes[1, 0].set_xlabel('Models')\naxes[1, 0].set_ylabel('Score')\naxes[1, 0].legend()\n\n# Plot 4: Risk Taking\naxes[1, 1].plot(models, risk_taking_scores, label='Risk Taking', color='red')\naxes[1, 1].set_title('Risk Taking')\naxes[1, 1].set_xlabel('Models')\naxes[1, 1].set_ylabel('Score')\naxes[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx_values = [70, 80, 90]\ny_values = [30, 20, 10]\ncolor_scale_for_x = [70, 80, 90]\ncolor_scale_for_y = [35, 25, 15]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\n# Scatter Plot - Deepskyblue\naxes[0].scatter(x_values, y_values, color='purple', s=color_scale_for_x)\naxes[0].set_title('Scatter Plot - deepskyblue')\naxes[0].set_xlabel('X Values')\naxes[0].set_ylabel('Y Values')\naxes[0].set_xlim(70, 90)\naxes[0].set_ylim(30, 40)\naxes[0].set_xticks([70, 80, 90])\naxes[0].set_yticks([35, 25, 15])\n\n# Scatter Plot - Magenta\naxes[1].scatter(x_values, y_values, color='magenta', s=color_scale_for_x)\naxes[1].set_title('Scatter Plot - magenta')\naxes[1].set_xlabel('X Values')\naxes[1].set_ylabel('Y Values')\naxes[1].set_xlim(70, 90)\naxes[1].set_ylim(30, 40)\naxes[1].set_xticks([70, 80, 90])\naxes[1].set_yticks([35, 25, 15])\n\n# Scatter Plot - Limegreen\naxes[2].scatter(x_values, y_values, color='limegreen', s=color_scale_for_x)\naxes[2].set_title('Scatter Plot - limegreen')\naxes[2].set_xlabel('X Values')\naxes[2].set_ylabel('Y Values')\naxes[2].set_xlim(70, 90)\naxes[2].set_ylim(30, 40)\naxes[2].set_xticks([70, 80, 90])\naxes[2].set_yticks([35, 25, 15])\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [30, 35, 40, 45, 50, 55, 60, 65, 70, 75]\ny2 = [27.5, 32.5, 37.5, 42.5, 47.5, 52.5, 57.5, 62.5, 67.5, 72.5]\ny3 = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]\n\n# Create subplots\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot 1: ViT Pose (sc) Performance\naxes[0].plot(x, y1, 'o-', color='magenta', label='ViT Pose (sc)')\naxes[0].set_title('ViT Pose (sc) Performance')\naxes[0].set_xlabel('Average Precision on MSCOCO (%)')\naxes[0].set_ylabel('Average Precision on HumanArt (%)')\naxes[0].set_ylim(30, 50)\naxes[0].legend()\n\n# Plot 2: ViT Pose (ft) Performance\naxes[1].plot(x, y2, 'o-', color='magenta', label='ViT Pose (ft)')\naxes[1].set_title('ViT Pose (ft) Performance')\naxes[1].set_xlabel('Average Precision on MSCOCO (%)')\naxes[1].set_ylabel('Average Precision on HumanArt (%)')\naxes[1].set_ylim(30, 50)\naxes[1].legend()\n\n# Plot 3: VLPose Performance\naxes[2].plot(x, y3, 'o-', color='magenta', label='VLPose')\naxes[2].set_title('VLPose Performance')\naxes[2].set_xlabel('Average Precision on MSCOCO (%)')\naxes[2].set_ylabel('Average Precision on HumanArt (%)')\naxes[2].set_ylim(30, 50)\naxes[2].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [1.0, 2.5, 10.0, 16.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0, 100.0]\ncolors = ['brown', 'purple', 'green', 'red', 'blue', 'orange', 'gray', 'pink', 'cyan', 'magenta', 'lime', 'olive', 'navy', 'black', 'silver', 'gold', 'brown', 'purple', 'green', 'red', 'blue', 'orange', 'gray', 'pink']\nlabels = ['CoT', 'DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'SP', 'ToT', 'MAD+judge', 'SP', 'Self-refine', 'ToT', 'MAD+judge', 'SP', 'ToT', 'MAD+judge', 'SP', 'ToT', 'MAD+judge', 'SP', 'ToT', 'MAD+judge', 'SP', 'ToT']\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot data\nfor i in range(len(x)):\n    ax1.scatter(x[i], y[i], color=colors[i], label=labels[i])\n\n# Set labels and title\nax1.set_xlabel('Diversity')\nax1.set_ylabel('Token cost ($)')\nax1.set_title('TFLOPS')\n\n# Create second y-axis for accuracy\nax2 = ax1.twinx()\nax2.set_ylabel('Accuracy (%)')\n\n# Add legend\nax1.legend(loc='upper left')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data points\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Define the colors for each point\ncolors = np.random.choice(['red', 'green', 'blue', 'yellow', 'orange', 'purple'], size=100)\n\n# Plot the points with varying sizes and colors\nfor i in range(len(x)):\n    ax.scatter(x[i], y[i], color=colors[i], s=20)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny_siren = [800, 750, 700, 650, 600, 550, 500, 450]\ny_wire = [800, 750, 700, 650, 600, 550, 500, 450]\ny_ffn = [800, 750, 700, 650, 600, 550, 500, 450]\ny_sz3 = [800, 750, 700, 650, 600, 550, 500, 450]\ny_nncomp = [800, 750, 700, 650, 600, 550, 500, 450]\ny_ours = [800, 750, 700, 650, 600, 550, 500, 450]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot data\nax.plot(x, y_siren, 'bo', label='SIREN')\nax.plot(x, y_wire, 'co', label='WIRE')\nax.plot(x, y_ffn, 'ro', label='FFN')\nax.plot(x, y_sz3, 'go', label='SZ3')\nax.plot(x, y_nncomp, 'mo', label='NNComp')\nax.plot(x, y_ours, 'yo', label='Ours')\n\n# Set labels and title\nax.set_xlabel('Bit per pixel (BPP)')\nax.set_ylabel('WRMSE vs BPP')\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Scatter plot for each category\nax.scatter(x, y, color='orange', label='Daytime Sunny')\nax.scatter(x, y, color='blue', label='Night Rainy')\nax.scatter(x, y, color='green', label='PGST')\n\n# Set labels and title\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_title('Weather Data')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LNO', 'GNO', 'InfGCN', 'DeepDFT2', 'GPW-NO']\nnmae_values = [15, 18, 22, 10, 7]\nparameters = [6, 10, 15, 12, 8]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plotting the data\nax.scatter(parameters, nmae_values, c=['gray', 'red', 'purple', 'green', 'orange'], s=100)\n\n# Adding labels and title\nax.set_xlabel('Number of parameters (M)')\nax.set_ylabel('NMAE (%)')\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Adding legend\nax.legend(categories, loc='upper left')\n\n# Show grid\nax.grid(True, linestyle='--', linewidth=0.5)\n\n# Set y-axis limits\nax.set_ylim(0, 35)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx1 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny1 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nx2 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny2 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nx3 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny3 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nx4 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny4 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Scatter plots\nax.scatter(x1, y1, color='blue', label='ar')\nax.scatter(x2, y2, color='pink', label='de')\nax.scatter(x3, y3, color='yellow', label='fr')\nax.scatter(x4, y4, color='green', label='he')\n\n# Set labels and title\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\nax.set_title('Legend')\n\n# Set legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for DE plot\nde_x = [0.6, 0.7, 0.8, 0.9, 1.0]\nde_y = [0.11, 0.12, 0.10, 0.10, 0.11]\nde_labels = ['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer']\nde_colors = ['green', 'green', 'cyan', 'orange', 'red']\n\n# Data for PJM plot\npjm_x = [0.6, 0.7, 0.8, 0.9, 1.0]\npjm_y = [0.55, 0.55, 0.55, 0.55, 0.55]\npjm_labels = ['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer']\npjm_colors = ['green', 'green', 'cyan', 'orange', 'red']\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(7.0, 10.0))\n\n# Plot DE data\nscatter1 = ax1.scatter(de_x, de_y, color=de_colors, label=de_labels)\nax1.set_title('DE')\nax1.set_xlabel('CKA Similarity')\nax1.set_ylabel('MSE')\nax1.set_xlim(0.5, 1.1)\nax1.set_ylim(0.09, 0.13)\nax1.grid(True)\n\n# Plot PJM data\nscatter2 = ax2.scatter(pjm_x, pjm_y, color=pjm_colors, label=pjm_labels)\nax2.set_title('PJM')\nax2.set_xlabel('CKA Similarity')\nax2.set_ylabel('MSE')\nax2.set_xlim(0.5, 1.1)\nax2.set_ylim(0.45, 0.65)\nax2.grid(True)\n\n# Add legend\nfig.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['physicsforums.com', 'stackexchange.com', 'mathoverflow.net', 'mathhelpforum.com']\nvalues = [18.42, 30.6, 10.91, 14.21]\ncolors = ['#87CEEB', '#98FB98', '#ADD8E6', '#ADD8E6']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data\nbars = ax.barh(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Percentage')\nax.set_ylabel('Websites')\nax.set_title('Stack Exchange Sites')\n\n# Add percentage labels on top of each bar\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, f'{width:.2f}%', va='center', ha='left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Java', 'Python', 'JavaScript', 'C++', 'Other']\nsizes = [10, 20, 27, 23, 8]\ncolors = ['#964B00', '#8B008B', '#FFD700', '#FFA500', '#F0E68C']\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Programming Languages Usage')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Adidas', 'Nike', 'Puma', 'Reebok']\nadidas = [13.42, 8.54, 6.26]\nnike = [30.6, 10.91, 14.21]\npuma = [0, 0, 0]\nreebok = [0, 0, 0]\n\n# Stack the data\nstacked_data = np.array([adidas, nike, puma, reebok]).T\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot each category\nax.barh(categories, stacked_data[:, 0], color='lightblue', label='Under Armour')\nax.barh(categories, stacked_data[:, 1], left=stacked_data[:, 0], color='orange', label='New Balance')\nax.barh(categories, stacked_data[:, 2], left=stacked_data[:, 0] + stacked_data[:, 1], color='lightgreen', label='Reebok')\nax.barh(categories, stacked_data[:, 3], left=stacked_data[:, 0] + stacked_data[:, 1] + stacked_data[:, 2], color='yellow', label='Puma')\n\n# Add labels and title\nax.set_xlabel('Percentage')\nax.set_ylabel('Brands')\nax.set_title('Brand Distribution')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the horizontal bar chart\ncategories = ['Category A', 'Category B', 'Category C']\nvalues = [50, 15, 20]\n\n# Create a horizontal bar chart\nplt.figure(figsize=(4.0, 6.0))\nbars = plt.barh(categories, values, color=['#FFA07A', '#ADD8E6', '#90EE90'])\n\n# Add labels and title\nplt.xlabel('Percentage')\nplt.ylabel('Categories')\nplt.title('Horizontal Bar Chart Example')\n\n# Add percentage labels on top of each bar\nfor bar in bars:\n    width = bar.get_width()\n    plt.text(width, bar.get_y() + bar.get_height()/2, f'{width}%', va='center', ha='left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [25, 15, 10, 12, 20]\nlabels = ['Asian', 'European', 'South American', 'African', 'North American']\ncolors = ['#FFC0CB', '#FFFF99', '#ADD8E6', '#87CEEB', '#90EE90']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart of Population Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '2', '3', '4', '5']\nlog_pcl = [np.log1p([1, 2, 3, 4, 5]), \n           np.log1p([2, 3, 4, 5, 6]), \n           np.log1p([3, 4, 5, 6, 7]), \n           np.log1p([4, 5, 6, 7, 8]), \n           np.log1p([5, 6, 7, 8, 9])]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plotting\nfor i, data in enumerate(log_pcl):\n    ax.barh(categories, data, color=['blue', 'brown'], alpha=0.5, label=f'Llama{i+2}')\n\n# Labels and title\nax.set_xlabel('Number of examples')\nax.set_ylabel(r'$\\log_{10}(P_{CL})$')\nax.set_title('Llama2 vs Llama2 (In-Chat)')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Efficiency', 'Comfort', 'Safety']\nwithout_memory_scores = [0.5, 0.7, 0.3]\nwith_memory_scores = [0.8, 0.9, 0.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot bars\nax.barh(categories, without_memory_scores, color='blue', label='Without Memory')\nax.barh(categories, with_memory_scores, left=without_memory_scores, color='orange', label='With Memory')\n\n# Add stars at specific positions\nfor i, (eff, comf, saf) in enumerate(zip(without_memory_scores, with_memory_scores, with_memory_scores)):\n    ax.plot([eff, eff], [i, i], 'k*', markersize=10)\n    ax.plot([comf, comf], [i, i], 'k*', markersize=10)\n    ax.plot([saf, saf], [i, i], 'k*', markersize=10)\n\n# Set labels and title\nax.set_xlabel('Score')\nax.set_ylabel('Categories')\nax.set_title('Comparison of Scores with and without Memory')\nax.legend()\n\n# Set y-ticks\nax.set_yticks(np.arange(len(categories)))\nax.set_yticklabels(categories)\n\n# Set x-limits\nax.set_xlim(0, 10)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Efficiency', 'Comfort', 'Safety']\nwithout_memory = [0.5, 0.7, 0.8]\nwith_memory = [0.3, 0.5, 0.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot bars\nax.barh(categories, without_memory, color='pink', label='Without Memory')\nax.barh(categories, with_memory, left=without_memory, color='lightblue', label='With Memory')\n\n# Add labels and title\nax.set_xlabel('Score')\nax.set_ylabel('Categories')\nax.set_title('Comparison of Categories')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['1', '2', '3', '4', '5']\ngpt_4v = [0.3, 0.4, 0.5, 0.6, 0.7]\ngemini = [0.2, 0.3, 0.4, 0.5, 0.6]\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 4.0))\n\n# Plot for Scoring Evaluation\nbars1 = ax1.bar(categories, gpt_4v, color='green', label='GPT-4V(Version)')\nbars2 = ax1.bar(categories, gemini, bottom=gpt_4v, color='orange', label='Gemini')\nax1.set_ylabel('Length Distribution')\nax1.set_title('Scoring Evaluation')\nax1.set_xticks(range(len(categories)))\nax1.set_xticklabels(categories)\nax1.legend()\n\n# Plot for Pair Comparison\nbars3 = ax2.bar(categories, gpt_4v, color='green', label='GPT-4V(Version)')\nbars4 = ax2.bar(categories, gemini, bottom=gpt_4v, color='orange', label='Gemini')\nax2.set_ylabel('Length Distribution')\nax2.set_title('Pair Comparison')\nax2.set_xticks(range(len(categories)))\nax2.set_xticklabels(categories)\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['jTrans', 'PalmTree', 'CLAP']\nvalues = [0.7, 0.8, 0.9]\ncolors = ['#FFC0CB', '#ADD8E6', '#ADD8E6']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plotting the bars\nbars = ax.bar(categories, values, color=colors)\n\n# Adding labels and title\nax.set_ylabel('Accuracy')\nax.set_title('Model Performance')\n\n# Adding legend\nax.legend(['Model 1', 'Model 2'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['A2', 'B1', 'B2', 'C1', 'C2']\nteacher_style_scores = [0.5, 0.7, 0.8, 0.9, 1.0]\nstandardize_scores = [0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plotting\nax.barh(categories, teacher_style_scores, color='blue', label='Teacher-Style')\nax.barh(categories, standardize_scores, left=teacher_style_scores, color='orange', label='Standardize')\n\n# Adding stars at specific positions\nstars_positions = [2, 3, 4]  # Indices of categories with stars\nfor pos in stars_positions:\n    ax.plot([teacher_style_scores[pos], teacher_style_scores[pos]], \n            [categories[pos], categories[pos]], \n            'y*', markersize=10)\n\n# Adding labels and title\nax.set_xlabel('Scores')\nax.set_ylabel('Categories')\nax.set_title('Comparison of Teacher-Style and Standardize Scores')\n\n# Adding legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['Vanilla', 'CoT']\nvalues = [75, 85]\nerrors = [2, 3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plotting the data\nbars = ax.bar(categories, values, yerr=errors, capsize=5, color=['pink', 'lightblue'])\n\n# Adding error bars\nfor bar, error in zip(bars, errors):\n    ax.errorbar(bar.get_x() + bar.get_width()/2, bar.get_height(), yerr=error, fmt='o', color='black')\n\n# Adding labels and title\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Models')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([2, 4, 6, 8, 10])\ny1 = np.array([163, 201, 176, 159, 153])\ny2 = np.array([97, 97, 95, 97, 97])\ny3 = np.array([163, 201, 176, 159, 153])\ny4 = np.array([97, 97, 95, 97, 97])\n\n# Create figure and axis\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8.0, 8.0))\n\n# Plot for AGIS vs FL0\nbars1 = ax1.bar(x, y1, color='lightblue', label='Group l0')\nbars2 = ax1.bar(x, y2, bottom=y1, color='orange', label='AGIS')\n\n# Plot for AGIS vs EBM-RS\nbars3 = ax2.bar(x, y3, color='lightblue', label='Group l0')\nbars4 = ax2.bar(x, y4, bottom=y3, color='orange', label='AGIS')\n\n# Add labels and title\nax1.set_title('% Decrease in Test MSE vs. FL0')\nax1.set_xlabel('Number of Features')\nax1.set_ylabel('0%')\nax1.set_ylim(0, 700)\nax1.legend()\n\nax2.set_title('% Decrease in Test MSE vs. EBM-RS')\nax2.set_xlabel('Number of Features')\nax2.set_ylabel('0%')\nax2.set_ylim(0, 700)\nax2.legend()\n\n# Add text annotations\nfor bar in bars1:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\nfor bar in bars3:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\nfor bar in bars4:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\n# Show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['Raw', '125Hz', '50Hz', '25Hz', '10Hz']\ndecimated_rates = [0.18, 0.19, 0.19, 0.18, 0.16]\npearson_r = [3.33, 3.33, 10.67, 16.95, 29.10]\neer = [0.18, 0.18, 0.18, 0.18, 0.18]\n\n# Colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plotting the bars\nbars = ax.bar(labels, decimated_rates, color=colors)\n\n# Adding text annotations\nfor bar, pearson, eer_val in zip(bars, pearson_r, eer):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{pearson:.2f}\\n({eer_val:.2f})', ha='center', va='bottom')\n\n# Setting labels and title\nax.set_ylabel('Decimated Sampling Rate')\nax.set_xlabel('Pearson R')\nax.set_title('KCC')\n\n# Set y-axis limits\nax.set_ylim(0, 10)\n\n# Add legend\nax.legend(['EER (%)'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata = {\n    'Boys': [50, 60, 70, 80, 90],\n    'Girls': [40, 50, 60, 70, 80]\n}\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 8.0), constrained_layout=True)\n\n# Plot 1: Distribution of Grades: Class 1\naxes[0, 0].pie(data['Boys'], labels=['Boys'], startangle=90, colors=['lightblue'])\naxes[0, 0].set_title('Distribution of Grades: Class 1')\naxes[0, 0].set_aspect('equal')\n\n# Plot 2: Distribution of Grades: Class 2\naxes[0, 1].pie(data['Girls'], labels=['Girls'], startangle=90, colors=['lightblue'])\naxes[0, 1].set_title('Distribution of Grades: Class 2')\naxes[0, 1].set_aspect('equal')\n\n# Plot 3: Distribution of Grades: Class 3\naxes[1, 0].pie(data['Boys'], labels=['Boys'], startangle=90, colors=['lightblue'])\naxes[1, 0].set_title('Distribution of Grades: Class 3')\naxes[1, 0].set_aspect('equal')\n\n# Plot 4: Distribution of Grades: Class 4\naxes[1, 1].pie(data['Girls'], labels=['Girls'], startangle=90, colors=['lightblue'])\naxes[1, 1].set_title('Distribution of Grades: Class 4')\naxes[1, 1].set_aspect('equal')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
