{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 7))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Define the data for the plots\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Targets')\nax.plot(x, y2, 'r-', label='Predictions')\n\n# Add a legend\nax.legend()\n\n# Set the title of the plot\nax.set_title('Stock Market Predictions')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [0.5, 1.5, 2.5, 3.5]\ny = [0.5, 1.5, 2.5, 3.5]\nz = [0.5, 1.5, 2.5, 3.5]\n\n# Create a scatter plot\nscatter = ax.scatter(x, y, z, c='r', marker='o')\n\n# Set labels and title\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\nax.set_title('3D Scatter Plot of Product Dimensions')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure and a 3D subplot\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the sphere\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 10 * np.outer(np.cos(u), np.sin(v))\ny = 10 * np.outer(np.sin(u), np.sin(v))\nz = 10 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Plot the sphere\nax.plot_surface(x, y, z, color='magenta')\n\n# Set the limits of the axes\nax.set_xlim(-15, 15)\nax.set_ylim(-15, 15)\nax.set_zlim(-15, 15)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure and a 3D subplot\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = x**2 + y**2\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels for axes\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [2010, 2012, 2014, 2016, 2018]\nprivate_schools = [0.35, 0.45, 0.55, 0.65, 0.75]\npublic_schools = [0.25, 0.35, 0.45, 0.55, 0.65]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nx = np.arange(len(years))\ny = np.zeros(len(years))\nz = private_schools\ndx = dy = np.ones(len(years))\ndz = public_schools\n\nax.bar3d(x, y, z, dx, dy, dz, shade=True)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\nax.set_title('Student to Teacher Ratio by School Type')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the data\nax.plot_surface(x, y, z, cmap='viridis')\n\n# Set the labels for the axes\nax.set_xlabel('Age')\nax.set_ylabel('Vaccination Number')\nax.set_zlabel('Incidence Rate')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first graph\nyears = [2010, 2012, 2014, 2016, 2018]\ninvestment = [1.5, 2.3, 3.1, 4.2, 5.0]\n\n# Data for the second graph\ntime_since_introduction = np.linspace(0, 10, 100)\nadoption_rate = np.sin(time_since_introduction)\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 8))\n\n# Plot the first graph\naxs[0].bar(years, investment, color='green')\naxs[0].set_title('Investment (Billion USD)')\naxs[0].set_xlabel('Year')\naxs[0].set_ylabel('Investment')\n\n# Plot the second graph\naxs[1].plot(time_since_introduction, adoption_rate, color='blue')\naxs[1].set_title('Adoption Rate')\naxs[1].set_xlabel('Time Since Introduction (Years)')\naxs[1].set_ylabel('Adoption Rate')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the function f(x)\ndef f(x):\n    return np.sin(x**2)\n\n# Create a grid of x values\nx = np.linspace(-1, 1, 100)\n\n# Compute the y values for each x value\ny = f(x)\n\n# Create a 3D plot\nfig = plt.figure(figsize=(10, 7))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the function f(x)\nax.plot(x, y, zs=0, zdir='z', label='f(x)')\n\n# Set the labels for the axes\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('f(x)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nz = np.cos(x)\n\n# Plot the data\nax.plot_surface(x, y, z, cmap='viridis')\n\n# Set the title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T=6')\n\n# Set the labels for the axes\nax.set_xlabel('time (s)')\nax.set_ylabel('amplitude')\nax.set_zlabel('frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure and a 3D subplot\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plots\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\nz1 = np.sin(np.sqrt(x**2 + y**2))\nz2 = np.cos(np.sqrt(x**2 + y**2))\nz3 = np.tan(np.sqrt(x**2 + y**2))\n\n# Plot the data\nsurf1 = ax.plot_surface(x, y, z1, cmap='coolwarm', linewidth=0, antialiased=False)\nsurf2 = ax.plot_surface(x, y, z2, cmap='viridis', linewidth=0, antialiased=False)\nsurf3 = ax.plot_surface(x, y, z3, cmap='plasma', linewidth=0, antialiased=False)\n\n# Set labels\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('FREEDOM')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf1, shrink=0.5, aspect=5)\nfig.colorbar(surf2, shrink=0.5, aspect=5)\nfig.colorbar(surf3, shrink=0.5, aspect=5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = np.linspace(0, 1, 10)\ny = np.linspace(0, 1, 10)\nz = np.sin(x) * np.cos(y)\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Set the labels for the axes\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the data\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm', linewidth=0, antialiased=False)\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Bus')\nax.set_ylabel('Time')\nax.set_zlabel('Value')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 3)\n\n# Create a scatter plot for each subplot\nfor i in range(3):\n    for j in range(3):\n        ax.scatter(np.random.rand(10), np.random.rand(10), color='red')\n\n# Set the title of the plot\nax.set_title('3D Scatter Plot')\n\n# Set the labels of the axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_zlabel('Z-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = np.linspace(-50, 50, 100)\ny = np.linspace(-50, 50, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Set labels for the axes\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Depth (m)')\nax.set_zlabel('Time (s)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis label\nax.set_xlabel('L/R Test')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the title of the plot\nax.set_title('Density Distribution of Left and Right Hands')\n\n# Create a scatter plot for the left hand data\nleft_hand_data = np.random.normal(loc=0, scale=1, size=100)\nax.scatter(left_hand_data, np.random.normal(loc=0, scale=0.5, size=100), c='blue', label='Left Hand')\n\n# Create a scatter plot for the right hand data\nright_hand_data = np.random.normal(loc=0, scale=1, size=100)\nax.scatter(right_hand_data, np.random.normal(loc=0, scale=0.5, size=100), c='red', label='Right Hand')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Define the data points for the scatter plot\nx = np.linspace(150, 400, 100)\ny = np.random.normal(loc=0, scale=1, size=100)\n\n# Plot the scatter plot\nax.scatter(x, y, c='green', alpha=0.5)\n\n# Add a title to the plot\nax.set_title('Average Tracked ORB Feature Number')\n\n# Add labels to the axes\nax.set_xlabel('ORB Feature Number')\nax.set_ylabel('Average Tracked ORB Feature Number')\n\n# Add a grid to the plot\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data points\nx = np.linspace(-3, 0, 100)\ny = np.log(x**2 + 1)\n\n# Plot the data points\nax.plot(x, y, 'b-')\n\n# Add labels and title\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\nax.set_title('Log (ATE RMSE) vs Log (Depth L1)')\n\n# Set the background color of the plot area\nax.set_facecolor('#f0f0f0')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000', fontsize=14, fontweight='bold')\n\n# Set the x-axis label\nax.set_xlabel('Average Top-5 Persistence of 1D Image', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Density', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 5)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the border lines\nax.spines['bottom'].set_color('#dcdcdc')\nax.spines['top'].set_color('#dcdcdc')\nax.spines['right'].set_color('#dcdcdc')\nax.spines['left'].set_color('#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#666666')\n\n# Set the color of the title\nax.title.set_color('#666666')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('#666666')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('#666666')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#666666')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#666666')\n\n#"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['snacks', 'navigate', 'question_selection', 'object_counting']\ny = [0.75, 0.85, 0.95, 0.65]\ncolors = ['blue', 'green', 'red', 'purple']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.barh(x[i], y[i], color=colors[i])\n\n# Set the title of the plot\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Scores')\nax.set_ylabel('Tasks')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Set the x-axis label\nax.set_xlabel('norm size')\n\n# Set the y-axis label\nax.set_ylabel('count')\n\n# Set the x-axis limits\nax.set_xlim(0, 1.4)\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.5, 0.2))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 121, 20))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the y-axis tick marks\nax.yaxis.set_tick_params(colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis title\nax.title.set_color('yellow')\n\n# Set the color of the y-axis title\nax.title.set_color('brown')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.xaxis.set_tick_params(labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.yaxis.set_tick_params(labelcolor='purple')\n\n# Set the color of the x-axis tick marks\nax.xaxis.set_tick_params(colors='orange')\n\n# Set the color of the"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the pie chart\nlabels = ['Same', 'Different', 'Incomparable']\nsizes = [32, 4, 99]\ncolors = ['#007BFF', '#FFC107', '#28A745']\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Add a title to the pie chart\nax.set_title('Language Comparison')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Algorithm Performance Comparison', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Algorithms', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)', fontsize=14)\n\n# Set the x-axis tick labels\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['SEAC', 'SAC(20Hz)'])\n\n# Set the y-axis limits\nax.set_ylim(45, 55)\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(45, 56, 1))\n\n# Set the y-axis tick labels\nax.set_yticklabels(['45', '46', '47', '48', '49', '50', '51', '52'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the scatter plot for SEAC\nax.scatter([0], [49], s=100, c='green', alpha=0.5)\nax.scatter([0], [51], s=100, c='blue', alpha=0.5)\nax.scatter([0], [53], s=100, c='red', alpha=0.5)\n\n# Set the scatter plot for SAC(20Hz)\nax.scatter([1], [47], s=100, c='orange', alpha=0.5)\nax.scatter([1], [49], s=100, c='purple', alpha=0.5)\nax.scatter([1], [51], s=100, c='pink', alpha=0.5)\n\n# Set the bar chart for SEAC\nax.bar([0], [48], width=0.5, color='cyan', alpha=0.5)\nax.bar([0], [50], width=0.5, color='magenta', alpha=0.5)\nax.bar([0], [52], width=0.5, color='yellow', alpha=0.5)\n\n# Set the bar chart for SAC(20Hz)\nax.bar([1], [46], width=0.5, color='brown', alpha=0.5)\nax.bar([1], [48], width=0.5, color='grey', alpha=0.5)\nax.bar([1], [50], width=0.5, color='silver', alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmethods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0']\nscores = [93.89, 87.20, 90.12]\nf1_scores = [95.67, 88.45, 90.12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the scores\nax.plot(methods, scores, marker='o', linestyle='-', color='blue')\nax.set_title('Average Recall Scores by Method')\n\n# Plot the F1 scores\nax2 = ax.twinx()\nax2.plot(methods, f1_scores, marker='o', linestyle='-', color='red')\nax2.set_ylabel('F1 Score (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\nax2.set_ylim(0, 100)\n\n# Add labels\nfor i, txt in enumerate(scores):\n    ax.annotate(txt, (methods[i], scores[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nfor i, txt in enumerate(f1_scores):\n    ax2.annotate(txt, (methods[i], f1_scores[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\nx = [4, 8, 12, 16, 20, 24, 28, 32]\ny = [85, 87, 89, 91, 93, 95, 97, 99]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Add a shaded rectangle\nax.fill_between(x, 90, 95, color='skyblue', alpha=0.5)\n\n# Add a vertical line at x=4\nax.axvline(4, color='r', linestyle='-')\n\n# Add a horizontal line at y=85\nax.axhline(85, color='g', linestyle='-')\n\n# Add a text annotation\nax.text(4, 85, 'Micro F1', fontsize=12, color='black')\n\n# Add a legend\nax.legend(['Trained w Few-Shot Ex', 'Def Deduce+Ex Gen'], loc='upper left')\n\n# Set the title and labels\nax.set_title('Micro F1 Score Over Time')\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 10, 20, 30, 40, 50]\ny = [60, 62, 65, 70, 75, 80]\n\n# Plot\nfig, ax = plt.subplots(figsize=(7, 7))\nax.plot(x, y, 'r-')\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\n\n# Markers\nfor i, txt in enumerate(y):\n    ax.annotate(txt, (x[i], y[i]))\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Cars', markerfacecolor='r', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Trucks', markerfacecolor='b', markersize=10)]\nax.legend(handles=legend_elements)\n\n# Display\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [16, 12, 20, 26, 20, 12]\ntrends = ['Simple Trend', 'Simple', 'Complex', 'Code']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\nax.plot(models, success_rates, marker='o', linestyle='-', color='purple')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Add trend labels\nfor i, model in enumerate(models):\n    ax.text(i, success_rates[i] + 1, trends[i], ha='center', va='bottom', color='red')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(models) - 0.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 60)\n\n# Set the x-axis ticks\nax.set_xticks(range(len(models)))\n\n# Set the x-axis tick labels\nax.set_xticklabels(models)\n\n# Set the y-axis tick labels\nax.set_yticks(range(0, 61, 10))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f2e7d9')\n\n# Set the title of the plot\nax.set_title('Subgroups vs. Calibration Curve', fontsize=14, fontweight='bold')\n\n# Set the x-axis label\nax.set_xlabel('Reducted Probability', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis grid line style\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major')\n\n# Set the x-axis grid line path\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None)\n\n# Set the y-axis grid line path\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None)\n\n# Set the x-axis grid line transform\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes)\n\n# Set the y-axis grid line transform\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes)\n\n# Set the x-axis grid line data\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None)\n\n# Set the y-axis grid line data\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None)\n\n# Set the x-axis grid line clip_on\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True)\n\n# Set the y-axis grid line clip_on\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True)\n\n# Set the x-axis grid line picker\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None)\n\n# Set the y-axis grid line picker\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None)\n\n# Set the x-axis grid line snap\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False)\n\n# Set the y-axis grid line snap\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False)\n\n# Set the x-axis grid line interactive\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False)\n\n# Set the y-axis grid line interactive\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False)\n\n# Set the x-axis grid line animated\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False)\n\n# Set the y-axis grid line animated\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False)\n\n# Set the x-axis grid line drawstyle\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default')\n\n# Set the y-axis grid line drawstyle\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default')\n\n# Set the x-axis grid line marker\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None)\n\n# Set the y-axis grid line marker\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None)\n\n# Set the x-axis grid line markersize\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10)\n\n# Set the y-axis grid line markersize\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10)\n\n# Set the x-axis grid line markerfacecolor\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange')\n\n# Set the y-axis grid line markerfacecolor\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange')\n\n# Set the x-axis grid line markeredgecolor\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange', markeredgecolor='black')\n\n# Set the y-axis grid line markeredgecolor\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange', markeredgecolor='black')\n\n# Set the x-axis grid line markeredgewidth\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1)\n\n# Set the y-axis grid line markeredgewidth\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1)\n\n# Set the x-axis grid line markeredgeline\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1, markeredgeline='solid')\n\n# Set the y-axis grid line markeredgeline\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1, markeredgeline='solid')\n\n# Set the x-axis grid line markeredgelinecolor\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1, markeredgeline='solid', markeredgelinecolor='black')\n\n# Set the y-axis grid line markeredgelinecolor\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1, markeredgeline='solid', markeredgelinecolor='black')\n\n# Set the x-axis grid line markeredgelinealpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, snap=False, interactive=False, animated=False, drawstyle='default', marker=None, markersize=10, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1, markeredgeline='solid', markeredgelinecolor='black', markeredgelinealpha=0.5)\n\n# Set the y-axis grid line markeredgelinealpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('#B39C6A')\n\n# Create a scatter plot with a blue color\nx = np.linspace(-5, 5, 100)\ny = np.sin(x)\nax.scatter(x, y, c='blue')\n\n# Create a histogram with a green color\nax.hist(np.random.normal(0, 1, 1000), bins=20, color='green')\n\n# Create a bar chart with a red color\nax.bar([1, 2, 3], [10, 20, 30], color='red')\n\n# Create a pie chart with a yellow color\nax.pie([1, 2, 3], colors=['yellow', 'orange', 'pink'])\n\n# Create a line plot with a purple color\nax.plot([1, 2, 3], [1, 2, 3], color='purple')\n\n# Add a title to the plot\nax.set_title('My Awesome Plot')\n\n# Add labels to the x and y axes\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the background color of the plot\nax.set_facecolor('#00008B')\n\n# Set the title of the plot\nax.set_title('Total', fontsize=24, color='#00FFFF')\n\n# Set the x-axis label\nax.set_xlabel('Daily reward (Ether)', fontsize=16, color='#00FFFF')\n\n# Set the y-axis label\nax.set_ylabel('Probability', fontsize=16, color='#00FFFF')\n\n# Set the x-axis tick labels\nx_labels = ['1600', '1625', '1650', '1675', '1700', '1725']\nax.set_xticks(np.arange(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Set the y-axis tick labels\ny_labels = ['0.0000', '0.0025', '0.0050', '0.0075', '0.0100', '0.0125', '0.0150', '0.0175', '0.0200', '0.0225', '0.0250', '0.0275', '0.0300', '0.0325', '0.0350', '0.0375', '0.0400', '0.0425', '0.0450', '0.0475', '0.0500', '0.0525', '0.0550', '0.0575', '0.0600', '0.0625', '0.0650', '0.0675', '0.0700', '0.0725', '0.0750', '0.0775', '0.0800', '0.0825', '0.0850', '0.0875', '0.0900', '0.0925', '0.0950', '0.0975', '0.1000', '0.1025', '0.1050', '0.1075', '0.1100', '0.1125', '0.1150', '0.1175', '0.1200', '0.1225', '0.1250', '0.1275', '0.1300', '0.1325', '0.1350', '0.1375', '0.1400', '0.1425', '0.1450', '0.1475', '0.1500', '0.1525', '0.1550', '0.1575', '0.1600', '0.1625', '0.1650', '0.1675', '0.1700', '0.1725', '0.1750', '0.1775', '0.1800', '0.1825', '0.1850', '0.1875', '0.1900', '0.1925', '0.1950', '0.1975', '0.2000', '0.2025', '0.2050', '0.2075', '0.2100', '0.2125', '0.2150', '0.2175', '0.2200', '0.2225', '0.2250', '0.2275', '0.2300', '0.2325', '0.2350', '0.2375', '0.2400', '0.2425', '0.2450', '0.2475', '0.2500', '0.2525', '0.2550', '0.2575', '0.2600', '0.2625', '0.2650', '0.2675', '0.2700', '0.2725', '0.2750', '0.2775', '0.2800', '0.2825', '0.2850', '0.2875', '0.2900', '0.2925', '0.2950', '0.2975', '0.3000', '0.3025', '0.3050', '0.3075', '0.3100', '0.3125', '0.3150', '0.3175', '0.3200', '0.3225', '0.3250', '0.3275', '0.3300', '0.3325', '0.3350', '0.3375', '0.3400', '0.3425', '0.3450', '0.3475', '0.3500', '0.3525', '0.3550', '0.3575', '0.3600', '0.3625', '0.3650', '0.3675', '0.3700', '0.3725', '0.3750', '0.3775', '0.3800', '0.3825', '0.3850', '0.3875', '0.3900', '0.3925', '0.3950', '0.3975', '0.4000', '0.4025', '0.4050', '0.4075', '0.4100', '0.4125', '0.4150', '0.4175', '0.4200', '0.4225', '0.4250', '0.4275', '0.4300', '0.4325', '0.4350', '0.4375', '0.4400', '0.4425', '0.4450', '0.4475', '0.4500', '0.4525', '0.4550', '0.4575', '0.4600', '0.4625', '0.4650', '0.4675', '0.4700', '0.4725', '0.4750', '0.4775', '0.4800', '0.4825', '0.4850', '0.4875', '0.4900', '0.4925', '0.4950', '0.4975', '0.5000', '0.5025', '0.5050', '0.5075', '0.5100', '0.5125', '0.5150', '0.5175', '0.5200', '0.5225', '0.5250', '0.5275', '0.5300', '0.5325', '0.5350', '0.5375', '0.5400', '0.5425', '0.5450', '0.5475', '0.5500', '0.5525', '0.5550', '0.5575', '0.5600', '0.5625', '0.5650', '0.5675', '0.5700', '0.5725', '0.5750', '0.5775', '0.5800', '0.5825', '0.5850', '0.5875', '0.5900', '0.5925', '0.5950', '0.5975', '0.6000', '0.6025', '0.6050', '0.6075', '0.6100', '0.6125', '0.6150', '0.6175', '0.6200', '0.6225', '0.6250', '0.6275', '0.6300', '0.6325', '0.6350', '0.6375', '0.6400', '0.6425', '0.6450', '0.6475', '0.6500', '0.6525', '0.6550', '0.6575', '0.6600', '0.6625', '0.6650', '0.6675', '0.6700', '0.6725', '0.6750', '0.6775', '0.6800', '0.6825', '0.6850', '0.6875', '0.6900', '0.6925', '0.6950', '0.6975', '0.7000', '0.7025', '0.7050', '0.7075', '0.7100', '0.7125', '0.7150', '0.7175', '0.7200', '0.7225', '0.7250', '0.7275', '0.7300', '0.7325', '0.7350', '0.7375', '0.7400', '0.7425', '0.7450', '0.7475', '0.7500', '0.7525', '0.7550', '0.7575', '0.7600', '0.7625', '0.7650', '0.7675', '0.7700', '0.7725', '0.7750', '0.7775', '0.7800', '0.7825', '0.7850', '0.7875', '0.7900', '0.7925', '0.7950', '0.7975', '0.8000', '0.8025', '0.8050', '0.8075', '0.8100', '0.8125', '0.8150', '0.8175', '0.8200', '0.8225', '0.8250', '0.8275', '0.8300', '0.8325', '0.8350', '0.8375', '0.8400', '0.8425', '0.8450', '0.8475', '0.8500', '0.8525', '0.8550', '0.8575', '0.8600', '0.8625', '0.8650', '0.8675', '0.8700', '0.8725', '0.8750', '0.8775', '0.8800', '0.8825', '0.8850', '0.8875', '0.8900', '0.8925', '0.8950', '0.8975', '0.9000', '0.9025', '0.9050', '0.9075', '0.9100', '0.9125', '0.9150', '0.9175', '0.9200', '0.9225', '0.9250', '0.9275', '0.9300', '0.9325', '0.9350', '0.9375', '0.9400', '0.9425', '0.9450', '0.9475', '0.9500', '0.9525', '0.9550', '0.9575', '0.9600', '0.9625', '0.9650', '0.9675', '0.9700', '0.9725', '0.9750', '0.9775', '0.9800', '0.9825', '0.9850', '0.9875', '0.9900', '0.9925', '0.9950', '0.9975', '1.0000']\nax.set_yticks(np.arange(len(y_labels)))\nax.set_yticklabels(y_labels)\n\n# Set the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='#00008B', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('#00008B')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('#00FFFF')\nax.spines['top'].set_color('#00FFFF')\nax.spines['right'].set_color('#00FFFF')\nax.spines['left'].set_color('#00FFFF')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='#00FFFF')\nax.tick_params(axis='y', colors='#00FFFF')\n\n# Set the color of the labels\nax.xaxis.label.set_color('#00FFFF')\nax.yaxis.label.set_color('#00FFFF')\n\n# Set the color of the title\nax.title.set_color('#00FFFF')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('#00FFFF')\n\n# Set the color of the annotations\nax.annotate('\u03bc = 1659.02', xy=(0.5, 0.5), xytext=(0.5, 0.5),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            horizontalalignment='center', verticalalignment='center',\n            color='#00FFFF')\n\n# Set the color of the annotations\nax.annotate('\u03c3 = 23.47', xy=(0.5, 0.5), xytext=(0.5, 0.5),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            horizontalalignment='center', verticalalignment='center',\n            color='#00FFFF')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]\ny1 = [1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30, 1.30]\ny2 = [1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20]\ny3 = [1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='LlaSMol Lite')\nax.plot(x, y2, 'b-', label='LlaSMol FNN')\nax.plot(x, y3, 'g-', label='LlaSMol Attn')\n\n# Add labels and title\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\nax.set_title('LlaSMol Performance on Different Sizes of Trainable Parameters')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Racing Car Performance')\n\n# Set the x-axis label\nax.set_xlabel('Exection Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Distribution')\n\n# Define the data for the plots\nx = np.linspace(0, 160, 100)\ny1 = np.sin(x/20)\ny2 = np.cos(x/20)\ny3 = np.tan(x/20)\ny4 = np.exp(-x/20)\ny5 = np.log(x+1)\n\n# Plot the data\nax.plot(x, y1, 'r-', label='D0')\nax.plot(x, y2, 'o-', label='D1')\nax.plot(x, y3, 'y-', label='D2')\nax.plot(x, y4, 'b-', label='D3')\nax.plot(x, y5, 'g-', label='D4')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nyears = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x20', '60x20']\nmakespan = [2500, 2000, 1500, 1000, 500, 250, 100]\nimprovement = [18, 14, 13, 12, 9, 7, 5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the makespan data\nax.plot(years, makespan, color='green', label='Makespan (step)')\n\n# Plot the improvement data\nax.plot(years, improvement, color='red', label='Improvement (%)')\n\n# Set the title of the plot\nax.set_title('Performance Improvement Over Time')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Instance Size')\nax.set_ylabel('Makespan (step)')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Algorithm Performance Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Define the data for the plot\nalgorithms = ['SEAC', 'CTCO']\ntime_costs = [2.3, 1.8]\n\n# Plot the data\nax.bar(algorithms, time_costs, color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Stock Price Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time to Market (Days)')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price ($)')\n\n# Define the data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n\n# Plot the data points\nax.plot(x, y)\n\n# Add a legend\nax.legend(['Adidas', 'Nike', 'New Balance', 'Our Brand'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the era\nera_rect = plt.Rectangle((0.05, 0.8), 0.2, 0.1, color='beige')\nax.add_patch(era_rect)\n\n# Create a rectangle for the year\nyear_rect = plt.Rectangle((0.85, 0.8), 0.1, 0.1, color='silver')\nax.add_patch(year_rect)\n\n# Create a rectangle for the map\nmap_rect = plt.Rectangle((0.05, 0.6), 0.9, 0.2, color='orange')\nax.add_patch(map_rect)\n\n# Create a rectangle for the timeline\ntimeline_rect = plt.Rectangle((0.05, 0.4), 0.9, 0.2, color='green')\nax.add_patch(timeline_rect)\n\n# Create a rectangle for the population graph\npop_graph_rect = plt.Rectangle((0.05, 0.2), 0.9, 0.2, color='purple')\nax.add_patch(pop_graph_rect)\n\n# Create a rectangle for the economic graph\neco_graph_rect = plt.Rectangle((0.05, 0), 0.9, 0.2, color='yellow')\nax.add_patch(eco_graph_rect)\n\n# Set the title of the plot\nax.set_title('Era')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Population')\n\n# Set the x-axis limits\nax.set_xlim([0, 2000])\n\n# Set the y-axis limits\nax.set_ylim([0, 3000])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\ntech = ['Nanotechnology', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\npatents = [20, 10, 40, 30, 60, 70, 90, 80, 50, 120]\nyears = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(years, patents, 'o-')\n\n# Set the title and labels\nax.set_title('Patent Filings in 2013')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Patents')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the color of the background\nax.set_facecolor('#f5f5f5')\n\n# Set the title of the graph\nax.set_title('Fraud Detection Model Performance', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Predicted Probability', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis grid line style\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5,"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings = [350, 300, 250, 200]\ngrowth = [75, 65, 55, 45]\n\n# Create a figure and axis object\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color of the earnings line\ncolor = 'tab:blue'\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Earnings ($)', color=color)\nax1.plot(quarters, earnings, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the growth line\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Growth (%)', color=color)  \nax2.plot(quarters, growth, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a title and labels\nfig.tight_layout()\nplt.title('Company Earnings and Growth')\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [72, 74, 76, 78, 80, 82, 84, 86, 88, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(x, y, 'k-')\n\n# Set the title and labels\nax.set_title('Accuracy, iNaturalist 2021')\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\n\n# Add rectangles for each method\nrectangles = [\n    plt.Rectangle((1, 72), 1, 2, color='orange'),\n    plt.Rectangle((2, 74), 1, 2, color='green'),\n    plt.Rectangle((3, 76), 1, 2, color='red'),\n    plt.Rectangle((4, 78), 1, 2, color='blue'),\n    plt.Rectangle((5, 80), 1, 2, color='orange'),\n    plt.Rectangle((6, 82), 1, 2, color='green'),\n    plt.Rectangle((7, 84), 1, 2, color='red'),\n    plt.Rectangle((8, 86), 1, 2, color='blue'),\n    plt.Rectangle((9, 88), 1, 2, color='orange'),\n    plt.Rectangle((10, 90), 1, 2, color='green')\n]\n\n# Add rectangles to the plot\nfor rectangle in rectangles:\n    ax.add_patch(rectangle)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('NBA Team Performance')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Sequ-id')\n\n# Generate random data for the scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Plot the scatter plot\nax.scatter(x, y, color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim([0, 1])\n\n# Set the limits of the y-axis\nax.set_ylim([0, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a scatter plot with random data points\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='red', label='Data Points')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the title of the plot\nax.set_title('Scatter Plot of Data Points')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y, 'k-')\n\n# Add markers at each data point\nfor i, j in zip(x, y):\n    ax.annotate(f'{j:.1f}%', (i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the title and labels\nax.set_title('Heart Rate Change Over Time')\nax.set_xlabel('Time (in hours)')\nax.set_ylabel('Heart Rate (%)')\n\n# Set the limits of the axes\nax.set_xlim(0, 128)\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f8ff')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('TMScore', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Sequence ID', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0.0, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.0, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0.0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0.0, 1.1, 0.1))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the tick colors\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick pad\nax.tick_params(axis='both', which='major', pad=5)\n\n# Set the tick color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [4211, 2411, 2141, 1124]\nvalues = [0.9628, 0.9604, 0.9624, 0.9592]\nsum_values = [0.9641, 0.9641, 0.9624, 0.9561]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(years, values, 'r-', label='SRCC')\nax.plot(years, sum_values, 'b-', label='PLCC')\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Set the title of the plot\nax.set_title('IIID-5 UBSDT')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Client')\n\n# Set the y-axis label\nax.set_ylabel('Depth')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Compact Spiral with Elliptical Hollow Center')\n\n# Define the number of points\nn = 1000\n\n# Generate the spiral coordinates\ntheta = np.linspace(0, 2*np.pi, n)\nr = theta**2\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Plot the spiral\nax.plot(x, y, 'b-')\n\n# Add a point at the center\nax.plot(0, 0, 'ro')\n\n# Set the limits for the x and y axes\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Set the labels for the x and y axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('DAXPY memory bandwidth')\n\n# Set the x-axis label\nax.set_xlabel('Flops/byte')\n\n# Set the y-axis label\nax.set_ylabel('Time (s)')\n\n# Set the x-axis limits\nax.set_xlim(10**-1, 10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**-1, 10**1)\n\n# Set the x-axis scale to log\nax.set_xscale('log')\n\n# Set the y-axis scale to log\nax.set_yscale('log')\n\n# Plot the data\nax.plot([10**-1, 10**1], [10**-1, 10**1], 'k-')\n\n# Add a legend\nax.legend(['explicit, random', 'explicit, block size 10', 'explicit, block size 100', 'implicit, random', 'implicit, block size 10', 'implicit, block size 100'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = [0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75]\ny = [0.01, 0.02, 0.02, 0.02, 0.01, 0.00, 0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nax.bar(x, y, color='red')\n\n# Set the title of the plot\nax.set_title('f(x) = 0.50')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('f(x)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Create a circle for the logo\ncircle = plt.Circle((0.5, 0.5), 0.4, color='#ff9999')\nax.add_artist(circle)\n\n# Create a rectangle for the chatbot\nrect = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='#ffff99')\nax.add_artist(rect)\n\n# Add text to the logo and chatbot\nax.text(0.5, 0.5, 'CigaR', horizontalalignment='center', verticalalignment='center', fontsize=20, color='#333333')\nax.text(0.5, 0.1, 'ChatRepair', horizontalalignment='center', verticalalignment='center', fontsize=20, color='#333333')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Qwen-VC-Max')\n\n# Create a scatter plot with random data points\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the x-axis label\nax.set_xlabel('GPT4V-CoT')\n\n# Set the y-axis label\nax.set_ylabel('Gemini Pro-Cot')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='red')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='green')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='purple')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='pink')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='cyan')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='magenta')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='yellow')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='black')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='white')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='grey')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='brown')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='teal')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='navy')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='maroon')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='aqua')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='fuchsia')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='silver')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='gold')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='lime')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='te"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate some data\nx = np.logspace(1, 2, 100)\ny1 = 10**np.random.uniform(1, 5, 100)\ny2 = 10**np.random.uniform(1, 5, 100)\ny3 = 10**np.random.uniform(1, 5, 100)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(x, y1, 'o-', color='purple')\nax.plot(x, y2, 'o-', color='pink')\nax.plot(x, y3, 'o-', color='orange')\n\n# Set the labels and title\nax.set_xlabel('number of matvecs m')\nax.set_ylabel('approximation error ||A - \\u03A6\\u2081\\u2082\\u2083\\u2084\\u2085\\u2086\\u2087\\u2088\\u2089\\u208A\\u208B\\u208C\\u208D\\u208E\\u208F\\u2090\\u2091\\u2092\\u2093\\u2094\\u2095\\u2096\\u2097\\u2098\\u2099\\u209A\\u209B\\u209C\\u209D\\u209E\\u209F\\u20A0\\u20A1\\u20A2\\u20A3\\u20A4\\u20A5\\u20A6\\u20A7\\u20A8\\u20A9\\u20AA\\u20AB\\u20AC\\u20AD\\u20AE\\u20AF\\u20B0\\u20B1\\u20B2\\u20B3\\u20B4\\u20B5\\u20B6\\u20B7\\u20B8\\u20B9\\u20BA\\u20BB\\u20BC\\u20BD\\u20BE\\u20BF\\u20C0\\u20C1\\u20C2\\u20C3\\u20C4\\u20C5\\u20C6\\u20C7\\u20C8\\u20C9\\u20CA\\u20CB\\u20CC\\u20CD\\u20CE\\u20CF\\u20D0\\u20D1\\u20D2\\u20D3\\u20D4\\u20D5\\u20D6\\u20D7\\u20D8\\u20D9\\u20DA\\u20DB\\u20DC\\u20DD\\u20DE\\u20DF\\u20E0\\u20E1\\u20E2\\u20E3\\u20E4\\u20E5\\u20E6\\u20E7\\u20E8\\u20E9\\u20EA\\u20EB\\u20EC\\u20ED\\u20EE\\u20EF\\u20F0\\u20F1\\u20F2\\u20F3\\u20F4\\u20F5\\u20F6\\u20F7\\u20F8\\u20F9\\u20FA\\u20FB\\u20FC\\u20FD\\u20FE\\u20FF\\u2100\\u2101\\u2102\\u2103\\u2104\\u2105\\u2106\\u2107\\u2108\\u2109\\u210A\\u210B\\u210C\\u210D\\u210E\\u210F\\u2110\\u2111\\u2112\\u2113\\u2114\\u2115\\u2116\\u2117\\u2118\\u2119\\u211A\\u211B\\u211C\\u211D\\u211E\\u211F\\u2120\\u2121\\u2122\\u2123\\u2124\\u2125\\u2126\\u2127\\u2128\\u2129\\u212A\\u212B\\u212C\\u212D\\u212E\\u212F\\u2130\\u2131\\u2132\\u2133\\u2134\\u2135\\u2136\\u2137\\u2138\\u2139\\u213A\\u213B\\u213C\\u213D\\u213E\\u213F\\u2140\\u2141\\u2142\\u2143\\u2144\\u2145\\u2146\\u2147\\u2148\\u2149\\u214A\\u214B\\u214C\\u214D\\u214E\\u214F\\u2150\\u2151\\u2152\\u2153\\u2154\\u2155\\u2156\\u2157\\u2158\\u2159\\u215A\\u215B\\u215C\\u215D\\u215E\\u215F\\u2160\\u2161\\u2162\\u2163\\u2164\\u2165\\u2166\\u2167\\u2168\\u2169\\u216A\\u216B\\u216C\\u216D\\u216E\\u216F\\u2170\\u2171\\u2172\\u2173\\u2174\\u2175\\u2176\\u2177\\u2178\\u2179\\u217A\\u217B\\u217C\\u217D\\u217E\\u217F\\u2180\\u2181\\u2182\\u2183\\u2184\\u2185\\u2186\\u2187\\u2188\\u2189\\u218A\\u218B\\u218C\\u218D\\u218E\\u218F\\u2190\\u2191\\u2192\\u2193\\u2194\\u2195\\u2196\\u2197\\u2198\\u2199\\u219A\\u219B\\u219C\\u219D\\u219E\\u219F\\u21A0\\u21A1\\u21A2\\u21A3\\u21A4\\u21A5\\u21A6\\u21A7\\u21A8\\u21A9\\u21AA\\u21AB\\u21AC\\u21AD\\u21AE\\u21AF\\u21B0\\u21B1\\u21B2\\u21B3\\u21B4\\u21B5\\u21B6\\u21B7\\u21B8\\u21B9\\u21BA\\u21BB\\u21BC\\u21BD\\u21BE\\u21BF\\u21C0\\u21C1\\u21C2\\u21C3\\u21C4\\u21C5\\u21C6\\u21C7\\u21C8\\u21C9\\u21CA\\u21CB\\u21CC\\u21CD\\u21CE\\u21CF\\u21D0\\u21D1\\u21D2\\u21D3\\u21D4\\u21D5\\u21D6\\u21D7\\u21D8\\u21D9\\u21DA\\u21DB\\u21DC\\u21DD\\u21DE\\u21DF\\u21E0\\u21E1\\u21E2\\u21E3\\u21E4\\u21E5\\u21E6\\u21E7\\u21E8\\u21E9\\u21EA\\u21EB\\u21EC\\u21ED\\u21EE\\u21EF\\u21F0\\u21F1\\u21F2\\u21F3\\u21F4\\u21F5\\u21F6\\u21F7\\u21F8\\u21F9\\u21FA\\u21FB\\u21FC\\u21FD\\u21FE\\u21FF\\u2200\\u2201\\u2202\\u2203\\u2204\\u2205\\u2206\\u2207\\u2208\\u2209\\u220A\\u220B\\u220C\\u220D\\u220E\\u220F\\u2210\\u2211\\u2212\\u2213\\u2214\\u2215\\u2216\\u2217\\u2218\\u2219\\u221A\\u221B\\u221C\\u221D\\u221E\\u221F\\u2220\\u2221\\u2222\\u2223\\u2224\\u2225\\u2226\\u2227\\u2228\\u2229\\u222A\\u222B\\u222C\\u222D\\u222E\\u222F\\u2230\\u2231\\u2232\\u2233\\u2234\\u2235\\u2236\\u2237\\u2238\\u2239\\u223A\\u223B\\u223C\\u223D\\u223E\\u223F\\u2240\\u2241\\u2242\\u2243\\u2244\\u2245\\u2246\\u2247\\u2248\\u2249\\u224A\\u224B\\u224C\\u224D\\u224E\\u224F\\u2250\\u2251\\u2252\\u2253\\u2254\\u2255\\u2256\\u2257\\u2258\\u2259\\u225A\\u225B\\u225C\\u225D\\u225E\\u225F\\u2260\\u2261\\u2262\\u2263\\u2264\\u2265\\u2266\\u2267\\u2268\\u2269\\u226A\\u226B\\u226C\\u226D\\u226E\\u226F\\u2270\\u2271\\u2272\\u2273\\u2274\\u2275\\u2276\\u2277\\u2278\\u2279\\u227A\\u227B\\u227C\\u227D\\u227E\\u227F\\u2280\\u2281\\u2282\\u2283\\u2284\\u2285\\u2286\\u2287\\u2288\\u2289\\u228A\\u228B\\u228C\\u228D\\u228E\\u228F\\u2290\\u2291\\u2292\\u2293\\u2294\\u2295\\u2296\\u2297\\u2298\\u2299\\u229A\\u229B\\u229C\\u229D\\u229E\\u229F\\u22A0\\u22A1\\u22A2\\u22A3\\u22A4\\u22A5\\u22A6\\u22A7\\u22A8\\u22A9\\u22AA\\u22AB\\u22AC\\u22AD\\u22AE\\u22AF\\u22B0\\u22B1\\u22B2\\u22B3\\u22B4\\u22B5\\u22B6\\u22B7\\u22B8\\u22B9\\u22BA\\u22BB\\u22BC\\u22BD\\u22BE\\u22BF\\u22C0\\u22C1\\u22C2\\u22C3\\u22C4\\u22C5\\u22C6\\u22C7\\u22C8\\u22C9\\u22CA\\u22CB\\u22CC\\u22CD\\u22CE\\u22CF\\u22D0\\u22D1\\u22D2\\u22D3\\u22D4\\u22D5\\u22D6\\u22D7\\u22D8\\u22D9\\u22DA\\u22DB\\u22DC\\u22DD\\u22DE\\u22DF\\u22E0\\u22E1\\u22E2\\u22E3\\u22E4\\u22E5\\u22E6\\u22E7\\u22E8\\u22E9\\u22EA\\u22EB\\u22EC\\u22ED\\u22EE\\u22EF\\u22F0\\u22F1\\u22F2\\u22F3\\u22F4\\u22F5\\u22F6\\u22F7\\u22F8\\u22F9\\u22FA\\u22FB\\u22FC\\u22FD\\u22FE\\u22FF\\u2300\\u2301\\u2302\\u2303\\u2304\\u2305\\u2306\\u2307\\u2308\\u2309\\u230A\\u230B\\u230C\\u230D\\u230E\\u230F\\u2310\\u2311\\u2312\\u2313\\u2314\\u2315\\u2316\\u2317\\u2318\\u2319\\u231A\\u231B\\u231C\\u231D\\u231E\\u231F\\u2320\\u2321\\u2322\\u2323\\u2324\\u2325\\u2326\\u2327\\u2328\\u2329\\u232A\\u232B\\u232C\\u232D\\u232E\\u232F\\u2330\\u2331\\u2332\\u2333\\u2334\\u2335\\u2336\\u2337\\u2338\\u2339\\u233A\\u233B\\u233C\\u233D\\u233E\\u233F\\u2340\\u2341\\u2342\\u2343\\u2344\\u2345\\u2346\\u2347\\u2348\\u2349\\u234A\\u234B\\u234C\\u234D\\u234E\\u234F\\u2350\\u2351\\u2352\\u2353\\u2354\\u2355\\u2356\\u2357\\u2358\\u2359\\u235A\\u235B\\u235C\\u235D\\u235E\\u235F\\u2360\\u2361\\u2362\\u2363\\u2364\\u2365\\u2366\\u2367\\u2368\\u2369\\u236A\\u236B\\u236C\\u236D\\u236E\\u236F\\u2370\\u2371\\u2372\\u2373\\u2374\\u2375\\u2376\\u2377\\u2378\\u2379\\u237A\\u237B\\u237C\\u237D\\u237E\\u237F\\u2380\\u2381\\u2382\\u2383\\u2384\\u2385\\u2386\\u2387\\u2388\\u2389\\u238A\\u238B\\u238C\\u238D\\u238E\\u238F\\u2390\\u2391\\u2392\\u2393\\u2394\\u2395\\u2396\\u2397\\u2398\\u2399\\u239A\\u239B\\u239C\\u239D\\u239E\\u239F\\u23A0\\u23A1"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle for the left side of the plot\nrect1 = plt.Rectangle((0.1, 0.1), 0.2, 0.8, color='green')\nax.add_artist(rect1)\n\n# Create a rectangle for the right side of the plot\nrect2 = plt.Rectangle((0.7, 0.1), 0.2, 0.8, color='yellow')\nax.add_artist(rect2)\n\n# Create a rectangle for the top of the plot\nrect3 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='purple')\nax.add_artist(rect3)\n\n# Create a rectangle for the bottom of the plot\nrect4 = plt.Rectangle((0.1, 0.1), 0.8, 0.1, color='orange')\nax.add_artist(rect4)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\nx = np.linspace(0, 140, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Plot the data\nax.plot(x, y1, color='green')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='blue')\nax.plot(x, y4, color='red')\nax.plot(x, y5, color='purple')\n\n# Set the limits of the x-axis\nax.set_xlim([0, 140])\n\n# Set the title and labels\nax.set_title('Stock Market Analysis')\nax.set_xlabel('Time (in minutes)')\nax.set_ylabel('Price (in dollars)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Sample Number')\n\n# Set the y-axis label\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Define the data points\nx = [0, 1, 2, 3, 4, 5, 6]\ny = [3.2, 3.5, 3.8, 4.1, 4.4, 4.7, 5.0]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Set the limits for the x-axis and y-axis\nax.set_xlim(0, 6)\nax.set_ylim(1.5, 5)\n\n# Add grid lines\nax.grid(True)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores = [28, 20, 10, 22, 28]\nplayer_a_scores = [35, 26, 20, 20, 30]\nplayer_b_scores = [20, 22, 20, 25, 28]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the scores\nax.plot(games, scores, label='Scores')\n\n# Plot the player A scores\nax.bar(games, player_a_scores, color='green', alpha=0.5, label='Player A')\n\n# Plot the player B scores\nax.bar(games, player_b_scores, color='darkgreen', alpha=0.5, label='Player B')\n\n# Set the title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-6, 6, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the title of the plot\nax.set_title('Variable 1 vs Variable 2')\n\n# Set the labels for the axes\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ngpt3_turbo = [7.5, 7.8, 7.6, 7.4, 7.2, 7.0, 6.9]\ngpt3_instruct = [6.0, 6.2, 6.2, 6.0, 5.8, 5.6, 5.4]\ngpt4 = [5.7, 5.1, 5.2, 5.0, 4.9, 4.8, 4.7]\nllama_2_13b = [7.5, 7.4, 7.3, 7.2, 7.1, 7.0, 6.9]\nllama_2_70b = [7.5, 7.4, 7.3, 7.2, 7.1, 7.0, 6.9]\nfemale_player = [5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7]\nmale_player = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]\nllm_player = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]\nperson_player = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(gpt3_turbo, label='gpt-3.5-turbo-0613')\nax.plot(gpt3_instruct, label='gpt-3.5-turbo-instruct')\nax.plot(gpt4, label='gpt-4')\nax.plot(llama_2_13b, label='llama-2-13b')\nax.plot(llama_2_70b, label='llama-2-70b')\nax.plot(female_player, label='Female Player', color='pink')\nax.plot(male_player, label='Male Player', color='blue')\nax.plot(llm_player, label='LLM Player', color='green')\nax.plot(person_player, label='Person Player', color='purple')\n\n# Set the title and labels\nax.set_title('Trustee Scenario')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Average Amount Sent ($)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Endurance Race Performance Analysis')\n\n# Define the data for the plots\nathlete_jim_data = [120, 130, 140, 150, 160]\nathlete_bill_data = [125, 135, 145, 155, 165]\n\n# Create the plots\nax.plot(athlete_jim_data, label='Athlete Jim')\nax.plot(athlete_bill_data, label='Athlete Bill')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create some data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the data\nax.plot(x, y1, label='Group 1')\nax.plot(x, y2, label='Group 2')\nax.plot(x, y3, label='Group 3')\n\n# Add labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\nax.set_title('Comparative Distribution of Three Different Groups')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the waterfall chart\ndata = [350, -150, -50, -200, 200, -100, 75, -135, 50, -5, 25, -300]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(range(len(data)), data, color='green')\n\n# Set the x-axis labels\nax.set_xticks(range(len(data)))\nax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n\n# Set the y-axis label\nax.set_ylabel('Waterfall Chart')\n\n# Set the title of the chart\nax.set_title('Waterfall Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Generate a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Compute the z values using a function\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a Delaunay triangulation\nfrom scipy.spatial import Delaunay\ntri = Delaunay(np.vstack([X.ravel(), Y.ravel()]).T)\n\n# Create a color map\ncmap = plt.cm.viridis\n\n# Create a tripcolor plot\nim = ax.tripcolor(tri, Z.ravel(), cmap=cmap)\n\n# Add a color bar\nfig.colorbar(im)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Create a grid of images\nimages = [\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10)\n]\n\n# Display the images\nfor i, img in enumerate(images):\n    ax.imshow(img, extent=[-4, 4, -4, 4], origin='lower', cmap='viridis')\n    ax.text(0, 0, 'nearest', ha='center', va='center', color='white')\n\n# Set the x and y limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\ny2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\ny3 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the data\naxs[0].plot(x, y1, 'b-')\naxs[0].set_title('Flickr30k')\naxs[0].set_xlabel('Number of bits')\naxs[0].set_ylabel('Recall sum')\n\naxs[1].plot(x, y2, 'r-')\naxs[1].set_title('MS-COCO')\naxs[1].set_xlabel('Number of bits')\naxs[1].set_ylabel('Recall sum')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Define the data points\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\ny = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 25)\nax.set_ylim(0, 25)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('x (m)')\nax.set_ylabel('y (m)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the number of points\nn_points = 100\n\n# Generate random data for the scatter plot\nx = np.random.rand(n_points)\ny = np.random.rand(n_points)\n\n# Plot the scatter plot\nax.scatter(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Scatter Plot')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data\nx = np.linspace(0, 2, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'g-')\n\n# Set the limits of the x-axis\nax.set_xlim([0, 2])\n\n# Set the limits of the y-axis\nax.set_ylim([-1, 1])\n\n# Set the title of the plot\nax.set_title('Sine Wave')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the utility distribution per topic\nax.plot([0, 20, 40, 60, 80, 100], [0, -0.5, -1, -1.5, -2, -2.5], 'b-')\nax.plot([0, 20, 40, 60, 80, 100], [-0.5, -1, -1.5, -2, -2.5, -3], 'g-')\nax.plot([0, 20, 40, 60, 80, 100], [-1, -1.5, -2, -2.5, -3, -3.5], 'r-')\n\n# Add labels and title\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\nax.set_title('Utility distribution per topic')\n\n# Create a second subplot for the user preference matrix\nax2 = fig.add_subplot(122)\nax2.set_title('User preference matrix (M)')\n\n# Define the colors for the rectangles\ncolors = ['L', 'C', 'R']\n\n# Create the rectangles\nfor i, color in enumerate(colors):\n    ax2.add_patch(plt.Rectangle((i*20, 0), 20, 10, color=color, alpha=0.5))\n\n# Add labels to the rectangles\nfor i, color in enumerate(colors):\n    ax2.text(i*20+10, 5, color, ha='center', va='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Reactive-2 Payoff')\n\n# Create a scatter plot with random data\nx = np.random.rand(5)\ny = np.random.rand(5)\nax.scatter(x, y)\n\n# Set the x and y limits\nax.set_xlim(-2, 4)\nax.set_ylim(-2, 4)\n\n# Set the x and y labels\nax.set_xlabel('Reactive-2 payoff')\nax.set_ylabel('Memory-2 payoff')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Create a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Add a rectangle\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_patch(rect)\n\n# Add a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='red')\nax.add_line(line)\n\n# Add a circle\ncircle = plt.Circle((0.5, 0.5), 0.2, color='green')\nax.add_artist(circle)\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('#FFC0CB')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, c='green')\n\n# Add a title to the plot\nax.set_title('Scatter Plot of Random Data')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Define the data for the lines\nline1 = [1.5, 2.5, 3.5, 4.5, 5.5]\nline2 = [2.5, 3.5, 4.5, 5.5, 6.5]\nline3 = [3.5, 4.5, 5.5, 6.5, 7.5]\nline4 = [4.5, 5.5, 6.5, 7.5, 8.5]\n\n# Plot the lines with different colors and labels\nax.plot(line1, 'g-', label='Line 1 (Random Noise)')\nax.plot(line2, 'b-', label='Line 2 (Exponential Focus)')\nax.plot(line3, 'r-', label='Line 3 (Random Noise)')\nax.plot(line4, 'm-', label='Line 4 (Exponential Focus)')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0]\ny_known = [200, 150, 100, 50, 20, 10, 5, 3, 2, 1, 0.5, 0.2, 0.1, 0]\ny_unknown = [180, 130, 80, 30, 10, 5, 3, 2, 1, 0.5, 0.2, 0.1, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(x, y_known, label='Known', color='green')\nax.plot(x, y_unknown, label='Unknown', color='blue')\n\n# Set the title and labels\nax.set_title('Predicted Probability of Known vs Unknown Samples')\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Bias Score by Data Type and Model')\n\n# Define the data for the plots\nx = ['INT8', 'INT4', 'INT2']\ny1 = [9.3, 9.2, 9.1]\ny2 = [8.9, 8.8, 8.7]\ny3 = [8.5, 8.4, 8.3]\ny4 = [8.1, 8.0, 7.9]\n\n# Plot the data\nax.plot(x, y1, 'r-', label='Qwen-7B-Chat')\nax.plot(x, y2, 'b-', label='Llama2-7B-Chat')\nax.plot(x, y3, 'g-', label='MPT-7B-Chat')\nax.plot(x, y4, 'y-', label='CodeLlama-7B-Instruct')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [500, 700, 900, 1100, 1300, 1500]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(x, y, 'k-')\n\n# Set the title and labels\nax.set_title('Maximum Predicted Probability of Known vs Unknown')\nax.set_xlabel('Time (in hours)')\nax.set_ylabel('Maximum Predicted Probability')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for the plots\nx = [2**i for i in range(1, 12)]\ny1 = [10000 * i**2 for i in range(1, 12)]\ny2 = [5000 * i**2 for i in range(1, 12)]\ny3 = [2000 * i**2 for i in range(1, 12)]\ny4 = [1000 * i**2 for i in range(1, 12)]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data points\nax.plot(x, y1, 'g-', label='Cos | n0 = 200')\nax.plot(x, y2, 'g-', label='Cos | n0 = 400')\nax.plot(x, y3, 'b-', label='ReLU | n0 = 200')\nax.plot(x, y4, 'b-', label='ReLU | n0 = 400')\n\n# Add labels and title\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\nax.set_title('Empirical Lipschitz Constant vs Width of Layer')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ntime_steps = [0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]\nrewards = [3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500]\ndiscounted_rewards = [5000, 5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000]\nw_i_s = [7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000]\nw_i_q_l = [6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000]\ng_r_e_e_d_y = [5000, 5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(time_steps, rewards, 'b-', label='Rewards')\nax.plot(time_steps, discounted_rewards, 'r-', label='Discounted Rewards')\nax.plot(time_steps, w_i_s, 'g-', label='WI-S')\nax.plot(time_steps, w_i_q_l, 'm-', label='WI-QL')\nax.plot(time_steps, g_r_e_e_d_y, 'c-', label='Greedy')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Reinforcement Learning Algorithm Performance')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = range(0, 201)\ny1 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ny2 = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny3 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='WI')\nax.plot(x, y2, 'r-', label='ISQ')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the title of the plot\nax.set_title('Weather Forecast')\n\n# Create a scatter plot with different colors for each category\nax.scatter(np.random.rand(10), np.random.rand(10), c='orange', label='Daytime Sunny')\nax.scatter(np.random.rand(10), np.random.rand(10), c='blue', label='Night Rainy')\nax.scatter(np.random.rand(10), np.random.rand(10), c='green', label='PGST')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x and y limits\nax.set_xlim(-8, 8)\nax.set_ylim(-8, 8)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((-2, -2), 4, 4, color='blue')\nax.add_patch(rectangle)\n\n# Draw a circle\ncircle = plt.Circle((0, 0), 1, color='red')\nax.add_artist(circle)\n\n# Draw a line\nline = plt.Line2D([-2, 2], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a scatter plot\nscatter = plt.scatter(np.random.rand(50)*10-5, np.random.rand(50)*10-5, color='green')\nax.add_collection(scatter)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Price (in dollars)', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 35])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0K', '5K', '10K'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '35'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xlabel('Time (in minutes)', color='black')\n\n# Set the color of the y-axis labels\nax.set_ylabel('Price (in dollars)', color='black')\n\n# Set the color of the x-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set the color of the y-axis title\nax.set_title('Stock Market Analysis', color='black')\n\n# Set"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Time Step', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Stock Price', fontsize=14)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis title\nax.xaxis.label.set_fontsize(16)\n\n# Set the color of the y-axis title\nax.yaxis.label.set_fontsize(16)\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Create a bar chart with the data\nax.bar(range(1, 9), [0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67], color='blue')\nax.bar(range(1, 9), [0.58, 0.60, 0.62, 0.64, 0.66, 0.68, 0.70, 0.72], bottom=[0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67], color='green')\nax.bar(range(1, 9), [0.63, 0.65, 0.67, 0.69, 0.71, 0.73, 0.75, 0.77], bottom=[0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67], color='purple')\nax.bar(range(1, 9), [0.68, 0.70, 0.72, 0.74, 0.76, 0.78, 0.80, 0.82], bottom=[0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67], color='orange')\nax.bar(range(1, 9), [0.73, 0.75, 0.77, 0.79, 0.81, 0.83, 0.85, 0.87], bottom=[0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67], color='pink')\n\n# Set the x-axis labels\nax.set_xticks(range(1, 9))\nax.set_xticklabels(['clip', 'laion (5k)', 'coco (5k)', 'laion (10k)', 'coco (10k)', 'laion (15k)', 'coco (15k)', 'laion (20k)'])\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Dataset')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny_content = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\ny_organization = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\ny_language = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y_content, label='Content', color='#4286f4')\nax.plot(x, y_organization, label='Organization', color='#f4b400')\nax.plot(x, y_language, label='Language', color='#0f9d58')\n\n# Fill between the lines\nax.fill_between(x, y_content, ymin=0, color='#4286f4', alpha=0.3)\nax.fill_between(x, y_organization, y_content, color='#f4b400', alpha=0.3)\nax.fill_between(x, y_language, y_organization, color='#0f9d58', alpha=0.3)\n\n# Set the title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\npopulations = [1000, 1500, 2000, 3000, 4000, 5000, 6000]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot data\nax.plot(years, populations, 'b-')\n\n# Set title and labels\nax.set_title('World population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [0, 20, 40, 60]\ny1 = [0.3, 0.4, 0.5, 0.6]\ny2 = [0.1, 0.2, 0.3, 0.4]\ny3 = [0.5, 0.6, 0.7, 0.8]\ny4 = [0.2, 0.3, 0.4, 0.5]\ny5 = [0.4, 0.5, 0.6, 0.7]\ny6 = [0.1, 0.2, 0.3, 0.4]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Notre-Dame de Paris')\nax.plot(x, y2, color='cyan', label='Demi-Gods and Semi-Devils')\nax.plot(x, y3, color='green', label='The Count of Monte Cristo')\nax.plot(x, y4, color='magenta', label='Game of Thrones')\nax.plot(x, y5, color='orange', label='Attack on Titan')\n\n# Set the x-axis limits\nax.set_xlim(0, 60)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.8)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracy = [55, 45, 35, 25, 15, 50, 40, 30, 20, 10]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart\nax.bar(categories, accuracy, color='skyblue')\n\n# Set the title of the chart\nax.set_title('Accuracy of AI in Different Categories')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Set the title of the plot\nax.set_title('Average Monthly Sales by Product Across Regions')\n\n# Define the data for the bar chart\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales_region_1 = [80, 70, 60, 90, 50]\nsales_region_2 = [70, 60, 50, 80, 40]\nsales_region_3 = [60, 50, 40, 70, 30]\n\n# Create the bar chart\nbar_width = 0.25\nindex = range(len(products))\nax.bar(index, sales_region_1, bar_width, label='Region 1')\nax.bar([i + bar_width for i in index], sales_region_2, bar_width, label='Region 2')\nax.bar([i + 2 * bar_width for i in index], sales_region_3, bar_width, label='Region 3')\n\n# Add labels and title\nax.set_xlabel('Products')\nax.set_ylabel('Sales')\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(products)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlengths = [0, 9, 10, 19, 20, 29, 30, 39, 40, 49]\nspearmans = [-0.75, -0.5, -0.45, -0.35, -0.25, -0.15, -0.05, 0.05, 0.15, 0.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(lengths, spearmans, 'o-')\n\n# Set the title and labels\nax.set_title('Spearman Correlation Coefficient')\nax.set_xlabel('Length (in years)')\nax.set_ylabel('Spearman')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nbeauty_values = [2.2, 2.4, 2.4, 19.9, 14.3]\nmovie_values = [3.0, 3.0, 4.1, 5.1, 4.8]\nyelp_values = [-0.7, -0.5, -0.5, -0.5, -0.5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot for Beauty category\naxs[0].bar(categories, beauty_values, color='blue')\naxs[0].set_title('Beauty')\n\n# Plot for MovieLens-1M category\naxs[1].bar(categories, movie_values, color='red')\naxs[1].set_title('MovieLens-1M')\n\n# Plot for Yelp category\naxs[2].bar(categories, yelp_values, color='green')\naxs[2].set_title('Yelp')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\nprices = [4.4, 2.3, 1.5, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.bar(models, improvement, color='blue')\nax.bar(models, prices, bottom=improvement, color='orange')\n\n# Set the title and labels\nax.set_title('ENDEFRRITES sampled')\nax.set_xlabel('Model')\nax.set_ylabel('Improvement [%]')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncompanies = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'Dell']\nf1_scores = [0.82, 0.84, 0.83, 0.86, 0.85, 0.87]\nllm_mis = [0.78, 0.80, 0.79, 0.82, 0.81, 0.83]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the data\nax.bar(companies, f1_scores, color='blue')\nax.set_title('F1-score by Company')\n\n# Add a horizontal line at y=0.80\nax.axhline(y=0.80, color='black', linestyle='--')\n\n# Set the x-axis labels\nax.set_xlabel('Company')\nax.set_ylabel('F1-score')\n\n# Show the plot\nplt.show()\n\n# Create a second figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the data\nax.bar(companies, llm_mis, color='gray')\nax.set_title('LLM-mis by Company')\n\n# Add a horizontal line at y=0.80\nax.axhline(y=0.80, color='black', linestyle='--')\n\n# Set the x-axis labels\nax.set_xlabel('Company')\nax.set_ylabel('LLM-mis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Define the labels for the x-axis\nx_labels = ['1', '2', '3', '4', '5', '6']\n\n# Define the scores for each label\nscores = [45, 40, 35, 30, 25, 20]\n\n# Define the colors for each bar\ncolors = ['blue', 'cyan', 'yellow', 'orange', 'red', 'brown']\n\n# Create a bar chart with the scores and labels\nbars = ax.bar(x_labels, scores, color=colors)\n\n# Add a grid to the plot\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [100, 150, 200, 250, 300, 350, 400, 450, 500]\ny2 = [150, 200, 250, 300, 350, 400, 450, 500, 550]\ny3 = [200, 250, 300, 350, 400, 450, 500, 550, 600]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='s1')\nax.plot(x, y2, label='s2')\nax.plot(x, y3, label='s3')\n\n# Set the title and labels\nax.set_title('Resonance Preference Plot for rich-context')\nax.set_xlabel('Count')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nproducts = ['LLaMA-2-7B', 'Evol-Instruct-70k', 'Evol-Instruct-AlpaGasus-1k', 'Evol-Instruct-1k-longest', 'LIMA-1k']\naccuracies = [53.0, 51.3, 56.4, 56.2, 53.8]\ntasks = ['ARC', 'MMLU', 'TruthfulQ&A', 'Winogrande', 'Average']\ntask_accuracies = [53.0, 51.3, 56.4, 56.2, 53.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the accuracies of the products\nax.bar(products, accuracies, color='lightblue')\n\n# Plot the accuracies of the tasks\nfor i, task_accuracy in enumerate(task_accuracies):\n    ax.text(i, task_accuracy + 0.5, f'{task_accuracy:.1f}', ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Product and Task Accuracy')\nax.set_xlabel('Products')\nax.set_ylabel('Accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('Car Performance Comparison', fontsize=18)\n\n# Set the x-axis label\nax.set_xlabel('Car Models', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Performance Metrics', fontsize=14)\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High', 'Lexus', 'Tesla'])\n\n# Set the y-ticks\nax.set_yticks(range(35, 75, 5))\nax.set_yticklabels(['35', '40', '45', '50', '55', '60', '65', '70', '75'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the bar colors\nbar_colors = ['#6699cc', '#99b3ff', '#6699cc', '#99b3ff', '#6699cc']\n\n# Set the bar width\nbar_width = 0.5\n\n# Set the bar positions\nbar_positions = [0.25, 1.25, 2.25, 3.25, 4.25]\n\n# Set the bar heights\nbar_heights = [60, 65, 60, 55, 50]\n\n# Set the bar labels\nbar_labels = ['M = 3', 'M = 4', 'M = 5', 'M = 6', 'M = 7']\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v + 0.5, str(v), ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_labels):\n    ax.text(bar_positions[i], 75, v, ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(bar_positions[i], v - 0.5, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmatches = ['DLMA-7B VS. LLAMA-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMA-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\nwin_rates = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\ntie_rates = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\nloss_rates = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Matches')\nax.set_ylabel('Win Rate (%)')\n\n# Plot the data\nfor i in range(len(matches)):\n    ax.barh(matches[i], win_rates[i], color='cyan', label='DLMA Win')\n    ax.barh(matches[i], tie_rates[i], left=win_rates[i], color='blue', label='Tie')\n    ax.barh(matches[i], loss_rates[i], left=[win_rates[i] + tie_rates[i] for _ in range(len(loss_rates))], color='coral', label='DLMA Lose')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\ntime = [0, 10, 20, 30, 40]\ngait = [0.5, 0.7, 0.8, 0.9, 1.0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.plot(time, gait, 'b-')\n\n# Set the title and labels\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\n\n# Add a legend\nax.legend(['trot', 'pace', 'bound', 'pronk', 'transition'])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ngames = ['LIMA', 'Vicuna', 'Koala', 'Wizard101', 'Self-Instruct']\nwins = [68, 82, 68, 72, 68]\nwin_percentages = [24, 15, 22, 19, 23]\nwin_percentages_2 = [8, 3, 10, 9, 9]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Top 5 Games by Win Percentage', fontsize=16)\n\n# Set the labels for the x-axis\nax.set_xlabel('Game', fontsize=14)\nax.set_ylabel('Win Percentage', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(games)))\nax.set_xticklabels(games, rotation=45, ha='right')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Create a bar chart with the data\nbars = ax.bar(games, wins, color='#008080', label='Wins')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval), va='bottom', ha='center')\n\n# Add win percentages to each bar\nfor i, v in enumerate(win_percentages):\n    ax.text(i, v+1, str(v) + '%', ha='center', va='bottom')\n\n# Add win percentages to each bar\nfor i, v in enumerate(win_percentages_2):\n    ax.text(i, v+1, str(v) + '%', ha='center', va='bottom')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the charts\nbenefits_data = [14.8, 29.6, 29.6, 18.5, 8.4, 14.8, 26.2, 35.7, 9.5, 9.5, 14.0]\nreliability_data = [9.4, 24.1, 24.1, 40.7, 27.8, 9.3, 26.2, 45.2, 9.5, 9.5, 14.0]\nsecurity_data = [8.3, 14.8, 40.7, 20.4, 16.7, 9.3, 12.0, 14.3, 38.1, 33.3, 14.3]\nprivacy_data = [24.1, 29.6, 20.4, 16.7, 9.3, 11.9, 19.0, 33.3, 14.3, 21.4, 9.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.bar(range(len(benefits_data)), benefits_data, color='red', label='Benefits')\nax.bar(range(len(reliability_data)), reliability_data, color='orange', label='Reliability')\nax.bar(range(len(security_data)), security_data, color='silver', label='Security')\nax.bar(range(len(privacy_data)), privacy_data, color='blue', label='Privacy')\n\n# Set the x-axis labels\nax.set_xticks(range(len(benefits_data)))\nax.set_xticklabels(['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5]\ny1 = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42]\ny2 = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]\ny3 = [-5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Ours')\nax.plot(x, y2, 'v-', label='Saliency-based Sampling')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change (%)')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\nratings = [3.2, 2.8, 2.6, 2.4, 2.2, 2.0]\naccuracy = [3.1, 2.7, 2.5, 2.3, 2.1, 1.9]\ncompleteness = [3.0, 2.6, 2.4, 2.2, 2.0, 1.8]\nconciseness = [2.9, 2.5, 2.3, 2.1, 1.9, 1.7]\nreadability = [2.8, 2.4, 2.2, 2.0, 1.8, 1.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the data\nax.barh(brands, ratings, color='navy')\nax.barh(brands, accuracy, left=ratings, color='#6699cc')\nax.barh(brands, completeness, left=[i+j for i,j in zip(ratings, accuracy)], color='#ff9933')\nax.barh(brands, conciseness, left=[i+j+k for i,j,k in zip(ratings, accuracy, completeness)], color='#cc6666')\nax.barh(brands, readability, left=[i+j+k+l for i,j,k,l in zip(ratings, accuracy, completeness, conciseness)], color='#669999')\n\n# Set the labels and title\nax.set_xlabel('Ratings')\nax.set_title('Ratings of Language Models on a Scale from 1-4')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a bar chart\nax.bar(models, accuracies, color='lightgreen')\n\n# Set the title of the chart\nax.set_title('Model Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nproducts = ['Alpaca-52k+', 'Alpaca-52k+', 'Alpaca-52k+', 'LIMa-1k+', 'LIMa-1k+', 'LIMa-1k*', 'LIMa-1k*']\nprices = [78.8, 67.4, 44.2, 77.6, 68.3, 59.8, 43.2]\nsales = [11.7, 18.1, 21.9, 18.0, 23.7, 21.0, 23.6]\nratings = [9.5, 14.5, 33.9, 8.0, 30.1, 13.5, 19.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('GPT4-as-a-judge')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Products')\nax.set_ylabel('Price')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(products)))\nax.set_xticklabels(products)\n\n# Set the tick labels for the y-axis\nax.set_yticks(np.arange(0, 100, 10))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the bar colors\nbar_colors = ['#007bff', '#6c757d', '#ffc107']\n\n# Plot the bars\nbars = ax.bar(products, prices, color=bar_colors[0], label='Price')\n\n# Add the sales data on top of the bars\nfor bar, sale in zip(bars, sales):\n    height = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2., height, sale,\n            ha='center', va='bottom', color='white')\n\n# Add the ratings data on top of the bars\nfor bar, rating in zip(bars, ratings):\n    height = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2., height, rating,\n            ha='center', va='bottom', color='white')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Ang', 'Ct', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nsentiments = ['neg', 'pos', 'neu', 'mix']\ncounts = [120, 150, 180, 200, 220, 300, 350, 400]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the color of the bars\ncolors = ['red', 'green', 'gray', 'orange']\n\n# Create a bar chart\nax.bar(emotions, counts, color=colors)\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Emotions')\nax.set_xlabel('Emotions')\nax.set_ylabel('Counts')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ngpt4v_data = [0.2, 0.3, 0.5, 0.7, 0.9]\nrobocode_data = [0.1, 0.2, 0.4, 0.6, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data\nax.plot(gpt4v_data, label='GPT-4V', color='green')\nax.plot(robocode_data, label='RoboCodeX', color='blue')\n\n# Set the title and labels\nax.set_title('Performance of AI Models')\nax.set_xlabel('Number of Trials')\nax.set_ylabel('Percentage of Total Trials')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Transmission Delay Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Datasets')\n\n# Set the y-axis label\nax.set_ylabel('Transmission Delay (ms)')\n\n# Define the datasets\ndatasets = ['VOC 2012', 'COCO 2017']\n\n# Define the transmission delays for each dataset\ntransmission_delays = [3.2, 2.8]\n\n# Define the colors for each dataset\ncolors = ['blue', 'green']\n\n# Plot the data\nfor i, delay in enumerate(transmission_delays):\n    ax.bar(datasets[i], delay, color=colors[i], edgecolor='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Restaurant Menu', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('PDEs', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Log L2', fontsize=14)\n\n# Set the x-ticks\nx_ticks = ['W', 'D', 'H', 'P', 'B', 'N-S']\nax.set_xticks(range(len(x_ticks)))\nax.set_xticklabels(x_ticks, rotation=45, ha='right')\n\n# Set the y-ticks\ny_ticks = [1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0]\nax.set_yticks(y_ticks)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the colors for the bars\nbar_colors = ['purple', 'orange', 'pink', 'brown', 'green', 'blue']\n\n# Set the heights of the bars\nbar_heights = [1.2, 1.3, 1.4, 1.5, 1.6, 1.7]\n\n# Set the width of the bars\nbar_width = 0.8\n\n# Set the positions of the bars\nbar_positions = range(len(bar_heights))\n\n# Create the bars\nbars = ax.bar(bar_positions, bar_heights, bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the legend\nlegend_labels = ['RBF-INT', 'RBF-POL', 'RBF-COM']\nax.legend(bars, legend_labels, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmodels = ['w/o DaQNRN', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_values = [0.975, 0.975, 0.975, 0.975]\nciq_values = [0.975, 0.975, 0.975, 0.975]\ntid2013_values = [0.975, 0.975, 0.975, 0.975]\nlive_m_values = [0.975, 0.975, 0.975, 0.975]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot the data\nax.plot(models, live_values, label='Live')\nax.plot(models, ciq_values, label='CIQ')\nax.plot(models, tid2013_values, label='TID2013')\nax.plot(models, live_m_values, label='Live-M')\n\n# Set the title and labels\nax.set_title('Model Performance Metrics')\nax.set_xlabel('Models')\nax.set_ylabel('Metric Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nproducts = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\nsales = [28.33, 56.11, 60.56]\none_pass_rate = [6.11, 31.11, 42.78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the sales data\nax.bar(products, sales, color='skyblue')\n\n# Plot the one pass rate data\nfor i, v in enumerate(one_pass_rate):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Sales and One-Pass Rate by Product')\nax.set_xlabel('Product')\nax.set_ylabel('Sales (%)')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Zero-shot', markerfacecolor='coral', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='One-shot', markerfacecolor='cyan', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='DS-Agent', markerfacecolor='violet', markersize=10)]\nax.legend(handles=legend_elements)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nlabels = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_rates = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_rates = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_rates = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars = ax.bar(labels, win_rates, color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(labels, tie_rates, bottom=win_rates, color='limegreen')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(labels, loss_rates, bottom=[x+y for x,y in zip(win_rates, tie_rates)], color='coral')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Comparison of Win, Tie, and Loss Rates')\nax.set_xlabel('Comparison Type')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nspecies = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nprobabilities = [0.72, 0.74, 0.56]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nbars = ax.bar(species, probabilities, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_title('Probabilities of Improvement for Different Species')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 27.7, 100.0, 91.7]\nfollowing_error_rate = [10.0, 83.3, 48.1, 63.4, 60.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(steps, avg_following_rate, 'b-o', label='Avg. Following Rate')\nax.plot(steps, following_error_rate, 'g-o', label='Following-related Format Error Rate')\n\n# Set the title and labels\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Sales by Category')\n\n# Define the categories and their sales data\ncategories = ['coreutils', 'scp', 'tar', 'exim', 'm4', 'nginx', 'bzip2', 'gcc', 'libgomp', 'h264', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'lib"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbrands = ['Random', 'Uniform', 'G2S', 'S2G', 'ClusterClip']\nscores = [6.9, 7.08, 6.81, 6.75, 6.67]\nmismatch_scores = [5.52, 5.53, 5.83, 5.54, 5.84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the scores\nax.bar(brands, scores, color='blue')\n\n# Add mismatch scores as horizontal lines\nfor i, score in enumerate(mismatch_scores):\n    ax.axhline(y=score, color='red', linestyle='--')\n\n# Set the title and labels\nax.set_title('MT-Bench Score Comparison')\nax.set_xlabel('Brands')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 1000]\ny = [49.98, 49.63]\nyerr = [0.02, 0.02]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot data\nax.errorbar(x, y, yerr=yerr, fmt='o', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMSE Score')\n\n# Set x-axis limits\nax.set_xlim(0, 1100)\n\n# Set y-axis limits\nax.set_ylim(47, 53)\n\n# Set grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nyears = ['ResNet18', 'AlexNet', 'ResNet50']\nspeedup = [7.4, 6.1, 4.3]\nperturbation = [8.7, 6.1, 3.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Plot the speedup data\nax.bar(years, speedup, color='skyblue')\nfor i, v in enumerate(speedup):\n    ax.text(i, v + 0.1, str(v), ha='center')\n\n# Plot the perturbation data\nax.bar(years, perturbation, bottom=speedup, color='pink')\nfor i, v in enumerate(perturbation):\n    ax.text(i, speedup[i] + v + 0.1, str(v), ha='center')\n\n# Set the title and labels\nax.set_title('Deep Learning Model Performance')\nax.set_xlabel('Model')\nax.set_ylabel('Performance Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\ny = [80, 70, 60, 50, 40, 30]\nz = [90, 80, 70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the data\nax.plot(x, y, label='Correct')\nax.plot(x, z, label='Counterfeit')\n\n# Set the title and labels\nax.set_title('LeetCode, DS-6.7b')\nax.set_xlabel('Test Cases')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ngames = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nwins = [53, 80, 116, 99, 179]\nrecosts = [6, 6, 33, 50, 179]\nties = [21, 33, 67, 49, 23]\nalpacas = [23, 49, 53, 103, 98]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Top 5 Games by Wins and Recost (1%)')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Games')\nax.set_ylabel('Wins')\n\n# Create a bar chart with the data\nbars = ax.bar(games, wins, color='#e66100')\n\n# Add the recost values on top of each bar\nfor bar, recost in zip(bars, recosts):\n    height = bar.get_height()\n    ax.annotate(f'{recost}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Add the tie values on top of each bar\nfor bar, tie in zip(bars, ties):\n    height = bar.get_height()\n    ax.annotate(f'{tie}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Add the alpaca values on top of each bar\nfor bar, alpaca in zip(bars, alpacas):\n    height = bar.get_height()\n    ax.annotate(f'{alpaca}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'ALTI+', 'Wass Combo', 'STARE']\nfpr_values = [35.15, 26.86, 19.08, 22.09, 20.67, 58.99, 66.19, 60.67]\nnon_agg_values = [36.63, 42.5, 48.38, 62.94, 36.63, 42.5, 23.9, 26.38, 17.06]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('FPR@90TPR on Guerriere et al. 2022')\n\n# Set the x-axis labels\nax.set_xticks(range(len(brands)))\nax.set_xticklabels(brands)\n\n# Set the y-axis label\nax.set_ylabel('FPR@90TPR')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) for i in range(0, 81, 10)])\n\n# Set the y-axis tick colors\nax.tick_params(axis='y', colors='#666666')\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the y-axis tick label font family\n"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Exception Handling', 'Method Call', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 5))\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [5, 10, 15, 20]\ny1 = [66.3, 61.9, 53.8, 53.7]\ny2 = [10.1, 13.6, 13.7, 13.7]\ny3 = [49.3, 45.7, 41.6, 31.5]\ny4 = [36.3, 36.0, 36.5, 36.5]\ny5 = [48.0, 42.6, 36.5, 36.5]\ny6 = [43.8, 40.2, 30.6, 22.5]\ny7 = [40.5, 42.6, 36.5, 36.5]\ny8 = [49.5, 49.6, 42.8, 42.8]\ny9 = [43.8, 40.2, 30.6, 22.5]\ny10 = [40.5, 42.6, 36.5, 36.5]\ny11 = [36.3, 36.0, 36.5, 36.5]\ny12 = [36.3, 36.0, 36.5, 36.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14, 4))\n\n# Plot the data\nax.plot(x, y1, label='Truthful Recall')\nax.plot(x, y2, label='Misleading Recall')\n\n# Set the title and labels\nax.set_title('Truthful:Misleading = 2:1')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SCIQ', 'NumSense', 'CoQAQ', 'ComQA2.0', 'ComQT', 'CyCL', 'Winogventi', 'Com2Sense', 'CODAH', 'WSC', 'ARC-challenge', 'SocialIQA', 'HellaSWAG-wikiHow', 'Al2Sci-elem', 'Winogrande', 'PIQA', 'QuaRel', 'QuaC', 'SC', 'alphaNLI', 'SWAG', 'HeLaSWAG-actnet']\nacc_values = [3.4, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('\u0394Acc (with Styles) - Acc (without Styles)')\n\n# Set the x-tick labels\nax.set_xticks(range(len(brands)))\nax.set_xticklabels(brands, rotation=90)\n\n# Set the y-tick labels\nax.set_yticks(range(-8, 7, 1))\nax.set_yticklabels(range(-8, 7, 1))\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--')\n\n# Set the color of the bars\nax.bar(brands, acc_values, color='green')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nyears = ['2019', '2020', '2021']\nmedmcqa_scores = [75.6, 74.4, 73.2]\nmedqa_scores = [77.8, 76.6, 75.4]\npubmeda_scores = [78.5, 77.3, 76.1]\nmmlu_scores = [79.2, 78.0, 76.8]\nmmlu_clinical_scores = [80.4, 79.2, 77.9]\nmmlu_college_scores = [81.6, 80.4, 79.2]\nmmlu_medgenetics_scores = [82.0, 80.8, 79.6]\nmmlu_professional_scores = [83.1, 81.9, 80.7]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(years, medmcqa_scores, label='MedMCQA')\nax.plot(years, medqa_scores, label='MedQA (USMLE)')\nax.plot(years, pubmeda_scores, label='PubMedA')\nax.plot(years, mmlu_scores, label='MMLU Anatomy')\nax.plot(years, mmlu_clinical_scores, label='MMLU Clinical knowledge')\nax.plot(years, mmlu_college_scores, label='MMLU College medicine')\nax.plot(years, mmlu_medgenetics_scores, label='MMLU Medical genetics')\nax.plot(years, mmlu_professional_scores, label='MMLU Professional medicine')\n\n# Set the title and labels\nax.set_title('Performance of Students in STEM Exams')\nax.set_xlabel('Year')\nax.set_ylabel('Score (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFEG', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSL', 'AFSC', 'AFSF', 'AFTH', 'AFVT', 'AFWS', 'AFWT', 'DAH', 'IC', 'SS']\nnla_values = [25, 30, 40, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\ngpt3_values = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f2a900')\n\n# Set the title of the plot\nax.set_title('NLA vs GPT-3 Values', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Categories', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Values', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 110, 10))\n\n# Set the grid lines\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Set the bar colors\nbar_colors = ['#0000ff' if i % 2 == 0 else '#ffa500' for i in range(len(categories))]\n\n# Create the bar chart\nbars = ax.bar(categories, nla_values, color=bar_colors)\n\n# Add the GPT-3 values on top of each bar\nfor bar, value in zip(bars, gpt3_values):\n    height = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, height + 1, str(value), ha='center', va='bottom', color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color of the plot\nax.set_facecolor('#f5f5f5')\n\n# Define the data for the bar chart\nx = [3, 5, 7, 9, 11]\ny = [2.5, 3.5, 4.5, 5.5, 6.5]\n\n# Create a bar chart with the data\nbars = ax.bar(x, y, color='#4286f4')\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Set the x-axis label\nax.set_xlabel('Num of Constraint Words')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis ticks\nax.set_xticks([3, 5, 7, 9, 11])\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis labels\nax.set_xticklabels(['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5f5f5')\nax.spines['left'].set_color('#f5f5f5')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_xticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the labels\nfor label in ax.get_yticklabels():\n    label.set_color('#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the tick lines\nax.spines['top'].set_color('#f5f5f5')\nax.spines['right'].set_color('#f5f5f5')\nax.spines['bottom'].set_color('#f5"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [85.93, 73.93, 70.59, 69.18, 67.93, 66.72, 65.51]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.barh(products, sales, color='skyblue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Sales Percentage (%)')\nax.set_ylabel('Products')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nlabels = ['HH', 'Reddit', 'IMDB', 'AVG']\ncopr_vs_golden = [22, 40, 30, 26]\ncopr_vs_dpo_er = [45, 50, 55, 38]\nwin_rate = [20, 30, 22, 20]\ntie_rate = [10, 10, 20, 22]\nlose_rate = [70, 60, 58, 60]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13, 6))\n\n# Plot the data\nax.bar(labels, copr_vs_golden, color='brown')\nax.bar(labels, copr_vs_dpo_er, bottom=copr_vs_golden, color='#FF6347')\nax.bar(labels, win_rate, bottom=[sum(x) for x in zip(copr_vs_golden, copr_vs_dpo_er)], color='#FFD700')\nax.bar(labels, tie_rate, bottom=[sum(x) for x in zip(copr_vs_golden, copr_vs_dpo_er, win_rate)], color='#FFA500')\nax.bar(labels, lose_rate, bottom=[sum(x) for x in zip(copr_vs_golden, copr_vs_dpo_er, win_rate, tie_rate)], color='#FFC0CB')\n\n# Set the labels and title\nax.set_xlabel('Movie Genre')\nax.set_ylabel('Percentage')\nax.set_title('COPR vs. Golden (Human Eval)')\n\n# Add a legend\nax.legend(['COPR vs. Golden', 'COPR vs. DPO-ER', 'Win', 'Tie', 'Lose'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\naccuracy_data = [0.25, 0.35, 0.45, 0.55, 0.65]\nunfairness_data = [0.15, 0.25, 0.35, 0.45, 0.55]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the data\nax.plot(accuracy_data, 'b-', label='Accuracy')\nax.plot(unfairness_data, 'r-', label='Unfairness')\n\n# Set the title and labels\nax.set_title('Model Performance Metrics')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Performance Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nresolutions = [224, 128, 64, 32]\naccuracies = [80, 75, 70, 65]\ncolors = ['blue', 'orange', 'pink', 'cyan']\nlabels = ['ImageNet-1k', 'ImageNet (F)', 'PAC-FNO', 'PAC-FNO']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(resolutions, accuracies, color=colors)\n\n# Add labels and title\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Acc. (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Annotate each bar with its accuracy value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Add a horizontal line at the mean accuracy\nmean_accuracy = np.mean(accuracies)\nax.axhline(mean_accuracy, color='blue', linestyle='--')\n\n# Add a vertical line at the mean resolution\nmean_resolution = np.mean(resolutions)\nax.axvline(mean_resolution, color='red', linestyle='--')\n\n# Add a rectangle for the mean accuracy\nrect = plt.Rectangle((0, mean_accuracy), 100, 1, color='blue', alpha=0.2)\nax.add_patch(rect)\n\n# Add a rectangle for the mean resolution\nrect = plt.Rectangle((mean_resolution, 0), 1, 100, color='red', alpha=0.2)\nax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\ny = [50, 50, 50, 50]\ny1 = [30, 28, 20, 22]\ny2 = [22, 20.6, 16.8, 16.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 3))\n\n# Plot the data\nax.plot(x, y, 'o-', label='Tent/PL/CoTTA')\nax.plot(x, y1, 'o-', label='ETA')\nax.plot(x, y2, 'o-', label='CETTA (ours)')\n\n# Set the title and labels\nax.set_title('Comparison of Different Methods')\nax.set_xlabel('Levels')\nax.set_ylabel('Number of Samples')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [17, 9, 20, 19, 12, 14, 30, 16, 20, 24, 35]\ny = [39.4, 32.84, 26.82, 19.66, 22, 0, 35.18, 28.0, 20.84, 22, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Rewards by Category')\nax.set_xlabel('Category')\nax.set_ylabel('Reward Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Cleaning / laundry', 'Casting/knitting', 'Baking', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nviews = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(12, 8))\nbars = ax.bar(categories, views, color='navy')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Views')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 7, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sentiment Analysis of Synthetic vs Human Authored Data')\n\n# Set the x-axis labels\nax.set_xlabel('Sentiment Categories')\nax.set_ylabel('Percentage of Sentiments')\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue', label='Synthetic Data')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='orange', label='Human Authored Data')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval+synthetic_data[bar.get_x()], round(yval, 2), va='bottom')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Context: The human body can tolerate only a')\n\n# Set the x-axis label\nax.set_xlabel('Word')\n\n# Set the y-axis label\nax.set_ylabel('Probability')\n\n# Define the data for the bar chart\nwords = ['small', 'large', 'medium', 'tiny', 'tall', 'short', 'slim', 'wide', 'narrow', 'long', 'thin', 'thick', 'round', 'square', 'oval', 'heart-shaped', 'diamond-shaped', 'rectangular', 'triangular', 'circular', 'elliptical', 'hexagonal', 'pentagonal', 'octagonal', 'star-shaped', 'spiral-shaped', 'wave-shaped', 'cloud-shaped', 'sun-shaped', 'moon-shaped', 'star-shaped', 'planet-shaped', 'galaxy-shaped', 'universe-shaped', 'cosmic-shaped', 'stellar-shaped', 'nebula-shaped', 'black hole-shaped', 'white hole-shaped', 'wormhole-shaped', 'singularity-shaped', 'multiverse-shaped', 'parallel universe-shaped', 'alternate reality-shaped', 'dimensional portal-shaped', 'time travel-shaped', 'space-time continuum-shaped', 'quantum entanglement-shaped', 'string theory-shaped', 'brane theory-shaped', 'multiverse theory-shaped', 'parallel dimension-shaped', 'alternate universe-shaped', 'multiverse hypothesis-shaped', 'parallel reality-shaped', 'alternate dimension-shaped', 'multiverse concept-shaped', 'parallel universe concept-shaped', 'alternate reality concept-shaped', 'multiverse idea-shaped', 'parallel dimension idea-shaped', 'alternate universe idea-shaped', 'multiverse notion-shaped', 'parallel reality notion-shaped', 'alternate dimension notion-shaped', 'multiverse belief-shaped', 'parallel universe belief-shaped', 'alternate reality belief-shaped', 'multiverse faith-shaped', 'parallel dimension faith-shaped', 'alternate universe faith-shaped', 'multiverse conviction-shaped', 'parallel dimension conviction-shaped', 'alternate universe conviction-shaped', 'multiverse certainty-shaped', 'parallel dimension certainty-shaped', 'alternate universe certainty-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped', 'multiverse guarantee-shaped', 'parallel dimension guarantee-shaped', 'alternate universe guarantee-shaped', 'multiverse promise-shaped', 'parallel dimension promise-shaped', 'alternate universe promise-shaped', 'multiverse assurance-shaped', 'parallel dimension assurance-shaped', 'alternate universe assurance-shaped"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Convertible', 'Coupe', 'Sedan', 'Truck', 'SUV']\nprobabilities = [0.15, 0.35, 0.45, 0.10, 0.05]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nbars = ax.bar(categories, probabilities, color='blue')\n\n# Add labels and title\nax.set_xlabel('Probability of Improvement')\nax.set_ylabel('Vehicle Type')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disappointment', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nbars = ax.bar(emotions, frequencies, color='coral')\n\n# Add labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\nax.set_title('Emotion Frequency Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideos = [4500, 6000, 5000, 6500, 7000, 8000]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Create a bar chart with the data\nax.bar(categories, videos, color='blue')\n\n# Set the title of the chart\nax.set_title('Number of Videos by Profession')\n\n# Set the x-axis label\nax.set_xlabel('Profession')\n\n# Set the y-axis label\nax.set_ylabel('Number of Videos')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for each chart\ngdp_data = [10, 20, 30, 40, 50]\nunemployment_data = [5, 10, 15, 20, 25]\ninflation_data = [1, 2, 3, 4, 5]\nnasdaq_data = [100, 150, 200, 250, 300]\nexchange_rate_data = [1.1, 1.2, 1.3, 1.4, 1.5]\nreal_estate_prices_data = [100000, 150000, 200000, 250000, 300000]\ncorporate_profits_data = [500000, 750000, 1000000, 1250000, 1500000]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the chart\nax.set_title('Global Economy')\n\n# Create a bar chart for GDP growth\nax.bar(range(len(gdp_data)), gdp_data, color='red', label='GDP Growth')\nax.text(2, 45, 'US', fontsize=12, ha='center')\n\n# Create a bar chart for Unemployment Rate\nax.bar(range(len(unemployment_data)), unemployment_data, color='orange', label='Unemployment Rate')\nax.text(2, 25, 'China', fontsize=12, ha='center')\n\n# Create a bar chart for Inflation Rate\nax.bar(range(len(inflation_data)), inflation_data, color='blue', label='Inflation Rate')\nax.text(2, 15, 'EU', fontsize=12, ha='center')\n\n# Create a bar chart for NASDAQ\nax.bar(range(len(nasdaq_data)), nasdaq_data, color='green', label='NASDAQ')\nax.text(2, 35, 'Brazil', fontsize=12, ha='center')\n\n# Create a bar chart for Exchange Rate\nax.bar(range(len(exchange_rate_data)), exchange_rate_data, color='yellow', label='Exchange Rate')\nax.text(2, 10, 'India', fontsize=12, ha='center')\n\n# Create a bar chart for Real Estate Prices\nax.bar(range(len(real_estate_prices_data)), real_estate_prices_data, color='purple', label='Real Estate Prices')\nax.text(2, 20, 'US', fontsize=12, ha='center')\n\n# Create a bar chart for Corporate Profits\nax.bar(range(len(corporate_profits_data)), corporate_profits_data, color='cyan', label='Corporate Profits')\nax.text(2, 40, 'China', fontsize=12, ha='center')\n\n# Add a legend to the chart\nax.legend()\n\n# Set the x-axis labels\nax.set_xticks(range(len(gdp_data)))\nax.set_xticklabels(['2015', '2016', '2017', '2018', '2019'])\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Real Estate Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Average Home Price')\n\n# Define the data for the graph\nyears = [2000, 2010, 2020]\nprices = [300, 400, 500]\n\n# Plot the data\nax.plot(years, prices)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\ndifferences = [80, 70, 60, 50, 40, 30, 20]\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [10, 20, 30, 40, 50, 60, 70]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a bar chart with the differences\nbars = ax.bar(categories, differences, color='blue')\n\n# Add labels and title\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Add positive and negative differences as annotations\nfor i, bar in enumerate(bars):\n    height = bar.get_height()\n    if height > 50:\n        ax.annotate(f'{positive_differences[i]}',\n                    xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom', color='green')\n    else:\n        ax.annotate(f'{negative_differences[i]}',\n                    xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom', color='red')\n\n# Set the x-axis limits\nax.set_xlim(-10, len(categories)+10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the emotions and their corresponding frequencies\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [7.5, 6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a bar chart with the emotions and their frequencies\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='skyblue')\n\n# Set the title of the chart\nax.set_title('Emotion Frequency Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Emotion')\n\n# Set the y-axis label\nax.set_ylabel('Frequency (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [-20, -15, -10, -5, 0, 5, 10, 15, 20]\ny = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Stock Market Performance')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Time')\nax.set_ylabel('Stock Price')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Tech Industry Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the data for each category\npatents = [100, 200, 300, 400, 500]\nresearch_investment = [150, 250, 350, 450, 550]\nsmartphone_usage = [200, 300, 400, 500, 600]\ninternet_penetration = [250, 350, 450, 550, 650]\n\n# Plot the data\nax.plot(patents, label='Patents Filed')\nax.plot(research_investment, label='Research Investment')\nax.plot(smartphone_usage, label='Smartphone Usage')\nax.plot(internet_penetration, label='Internet Penetration')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='orange')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval+synthetic_data[bar.get_x()], round(yval, 2), va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Synthetic vs Human Authored Data')\nax.set_xlabel('Sentiment Categories')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Scores by Category Over Time')\n\n# Define the categories and their scores\ncategories = ['Time 0', 'Time 20', 'Time 40', 'Time 60']\nscores = [0.7, 0.6, 0.5, 0.4]\n\n# Create a bar chart with the scores\nax.bar(categories, scores, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['North', 'South', 'East', 'West']\nconcentrations = [65.49, 92.15, 56.03, 100.45]\nco2_levels = [40.44, 54.46, 56.03, 100.45]\npm_levels = [11.59, 25.36, 32.19, 26.15]\nso2_levels = [39.63, 36.03, 48.23, 39.63]\nno2_levels = [32.84, 40.44, 48.23, 37.12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the data\nax.barh(regions, concentrations, color='skyblue')\nax.plot(co2_levels, regions, color='lightseagreen', label='CO2 (ppm)')\nax.plot(pm_levels, regions, color='coral', label='PM (\u00b5g/m\u00b3)')\nax.plot(so2_levels, regions, color='cornflowerblue', label='SO2 (\u00b5g/m\u00b3)')\nax.plot(no2_levels, regions, color='orchid', label='NO2 (\u00b5g/m\u00b3)')\n\n# Set the title and labels\nax.set_title('Air Quality Metrics by Region')\nax.set_xlabel('Concentration')\nax.set_ylabel('Region')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nfig, axs = plt.subplots(3, 2, figsize=(10, 6))\nfig.suptitle('Scores by group and constraint word count')\n\n# Set the color of the plots\ncolors = ['red', 'blue', 'orange', 'skyblue']\n\n# Plot the data\nfor i, ax in enumerate(axs.flatten()):\n    ax.plot([0, 1, 2, 3, 4], [i*2, i*2+1, i*2+2, i*2+3, i*2+4], color=colors[i])\n    ax.set_title(f'LLAMA-{i+1}')\n    ax.set_xlabel('Score')\n    ax.set_ylabel('Constraint Word Count')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [2018, 2019, 2020, 2021]\ngdp_usa = [-0.5, -0.3, -0.2, -0.1]\ngdp_china = [-0.4, -0.2, -0.1, 0.0]\ngdp_germany = [-0.3, -0.1, 0.0, 0.1]\ngdp_brazil = [-0.2, 0.0, 0.1, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the GDP growth rates\nax.plot(years, gdp_usa, label='USA', color='#008080')\nax.plot(years, gdp_china, label='China', color='#008000')\nax.plot(years, gdp_germany, label='Germany', color='#800080')\nax.plot(years, gdp_brazil, label='Brazil', color='#000080')\n\n# Set the title and labels\nax.set_title('Negative GDP Growth Rates by Country and Year')\nax.set_xlabel('Year')\nax.set_ylabel('GDP Growth Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'LaViTA']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the data\nax.bar(models, performance, color='blue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Performance (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 80]\ncolors = ['#003366', '#0099cc', '#3399cc', '#006699']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar chart\nax.bar(categories, values, color=colors)\n\n# Set the title and labels\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsales = [80, 60, 40, 20, 0]\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_data = [50, 30, 10, 90, 70, 50, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the bar chart\nax.bar(categories, sales_data, color='orange')\n\n# Add labels and title\nax.set_xlabel('Product Categories')\nax.set_ylabel('Sales Units')\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Annotate each bar with its value\nfor i, v in enumerate(sales_data):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MID', 'MTL']\naccuracies = [0.83, 0.6, 0.11, 0.0]\nembeddings = [0.95, 0.75, 0.45, 0.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#e0e0e0')\n\n# Set the title of the plot\nax.set_title('Feature Embedding Distance')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Feature Embedding Distance (%)')\n\n# Set the x-ticks\nax.set_xticks(range(len(categories)))\n\n# Set the x-tick labels\nax.set_xticklabels(categories)\n\n# Set the y-ticks\nax.set_yticks(embeddings)\n\n# Set the y-tick labels\nax.set_yticklabels(embeddings)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the bar chart\nbars = ax.bar(categories, accuracies, color='#666666')\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nscores = [10, 8, 12, 10, 6, 8, 12, 15, 10, 7, 10, 15, 12, 10, 10, 8, 12, 10, 10, 10, 10]\nlabels = ['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5', 'Score 6', 'Score 7', 'Score 8', 'Score 9', 'Score 10', 'Score 11', 'Score 12', 'Score 13', 'Score 14', 'Score 15', 'Score 16', 'Score 17', 'Score 18', 'Score 19', 'Score 20']\ncolors = ['#008080', '#008000', '#00FF00', '#00FFFF', '#008080', '#008000', '#00FF00', '#00FFFF', '#008080', '#008000', '#00FF00', '#00FFFF', '#008080', '#008000', '#00FF00', '#00FFFF', '#008080', '#008000', '#00FF00', '#00FFFF']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the scores\nax.bar(labels, scores, color=colors)\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the x-axis label\nax.set_xlabel('Scores')\n\n# Set the y-axis label\nax.set_ylabel('Human Annotator')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 20)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 50)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Sales by Category')\n\n# Define the categories and their sales data\ncategories = ['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet', 'perl']\nsales = [90, 85, 75, 65, 55, 45, 35]\n\n# Create a bar chart with the sales data\nbars = ax.bar(categories, sales, color='blue')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Category')\n\n# Set the y-axis label\nax.set_ylabel('Sales (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 101, 10))\n\n# Set the x-axis ticks\nax.set_xticks(categories)\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguage = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.bar(models, performance, color='blue')\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Model with Language')\nax.set_ylabel('Performance [%]')\n\n# Add a legend\nax.legend(language)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nfiscal_quarter = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, -0.8]\nnasdaq_index = [1.5, 2.2, 1.0, 4.6, -1.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(fiscal_quarter, dow_jones_index, label='Dow Jones Index', color='#76b852')\nax.plot(fiscal_quarter, nasdaq_index, label='Nasdaq Index', color='#e57373')\n\n# Set the title and labels\nax.set_title('Stock Market Indexes Over Fiscal Quarters')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny = [39.4, 35.18, 30.84, 34.06]\ny2 = [35.1, 34.06, 33.0, 32.0]\ny3 = [34.06, 33.0, 32.0, 31.0]\ny4 = [33.0, 32.0, 31.0, 30.0]\ny5 = [32.0, 31.0, 30.0, 29.0]\ny6 = [31.0, 30.0, 29.0, 28.0]\ny7 = [30.0, 29.0, 28.0, 27.0]\ny8 = [29.0, 28.0, 27.0, 26.82]\ny9 = [28.0, 27.0, 26.0, 25.0]\ny10 = [27.0, 26.0, 25.0, 24.27]\ny11 = [26.0, 25.0, 24.0, 23.0]\ny12 = [25.0, 24.0, 23.0, 22.0]\ny13 = [24.0, 23.0, 22.0, 21.0]\ny14 = [23.0, 22.0, 21.0, 20.0]\ny15 = [22.0, 21.0, 20.0, 19.0]\ny16 = [21.0, 20.0, 19.0, 18.0]\ny17 = [20.0, 19.0, 18.0, 17.0]\ny18 = [19.0, 18.0, 17.0, 16.0]\ny19 = [18.0, 17.0, 16.0, 15.0]\ny20 = [17.0, 16.0, 15.0, 14.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(x, y, label='Series 1')\nax.plot(x, y2, label='Series 2')\nax.plot(x, y3, label='Series 3')\nax.plot(x, y4, label='Series 4')\nax.plot(x, y5, label='Series 5')\nax.plot(x, y6, label='Series 6')\nax.plot(x, y7, label='Series 7')\nax.plot(x, y8, label='Series 8')\nax.plot(x, y9, label='Series 9')\nax.plot(x, y10, label='Series 10')\nax.plot(x, y11, label='Series 11')\nax.plot(x, y12, label='Series 12')\nax.plot(x, y13, label='Series 13')\nax.plot(x, y14, label='Series 14')\nax.plot(x, y15, label='Series 15')\nax.plot(x, y16, label='Series 16')\nax.plot(x, y17, label='Series 17')\nax.plot(x, y18, label='Series 18')\nax.plot(x, y19, label='Series 19')\nax.plot(x, y20, label='Series 20')\n\n# Set the labels and title\nax.set_xlabel('Series Labels')\nax.set_ylabel('Revard Values')\nax.set_title('Stock Market Analysis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie charts\ntruthful = [30.1, 34, 43.7]\nmisleading = [20, 19.4, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the pie charts\nax.pie(truthful, labels=[\"Truthful Recall\", \"Misleading Recall\"], colors=[\"black\", \"pink\"], autopct='%1.1f%%')\nax.pie(misleading, labels=[\"Truthful Recall\", \"Misleading Recall\"], colors=[\"black\", \"pink\"], autopct='%1.1f%%')\n\n# Set the title of the plot\nax.set_title('Truthful:Misleading = 2:1')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Environmental Impact by Sector')\n\n# Define the data for the bars\nsectors = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year_emissions = [250, 300, 400, 150]\nprevious_year_emissions = [200, 250, 350, 100]\n\n# Create the bar chart\nbars = ax.bar(sectors, current_year_emissions, color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Add a second set of bars for previous year emissions\nax.bar(sectors, previous_year_emissions, bottom=current_year_emissions, color='orange')\n\n# Add a legend\nax.legend(['Current Year', 'Previous Year'])\n\n# Add grid lines\nax.grid(True)\n\n# Set the x-axis labels\nax.set_xticks(range(len(sectors)))\nax.set_xticklabels(sectors)\n\n# Set the y-axis limits\nax.set_ylim(-100, 600)\n\n# Set the y-axis ticks\nax.set_yticks(range(-100, 700, 100))\n\n# Set the y-axis labels\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'City', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 15, 17, 22, 20, 13]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.bar(cities, temperatures, color='skyblue')\n\n# Set the title and labels\nax.set_title('Average City Temperatures')\nax.set_xlabel('Cities')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [150, 140, 160, 170]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot data\nax.plot(regions, emissions_2020, label='2020 Emissions')\nax.plot(regions, emissions_2021, label='2021 Emissions')\n\n# Set title and labels\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xlabel('Regions')\nax.set_ylabel('Emissions (in tons)')\n\n# Add legend\nax.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie charts\nlabels = ['Strongly disagree', 'Disagree', 'Agree', 'Strongly agree', 'Neither agree nor disagree']\nsizes = [26, 32, 13, 10, 7]\ncolors = ['#87CEEB', '#90EE90', '#FFD700', '#FFA07A', '#F5DEB3']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the plot\nax.set_title('Question 1 Responses')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Model Accuracy over Time')\nax.set_xlabel('Top-10 superfamily in training dataset')\nax.set_ylabel('Model accuracy')\n\n# Add a horizontal line at y=0.5\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Define the colors for the rectangles\ncolors = ['lightseagreen', 'orange', 'cornflowerblue', 'darkgoldenrod', 'lightcoral']\n\n# Create a bar chart with the data\nax.bar(range(1, 11), [2.5, 1.8, 1.2, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2], color=colors)\n\n# Add labels to the x-axis\nax.set_xticks(range(1, 11))\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Add labels to the y-axis\nax.set_yticks([0, 1, 2, 3, 4, 5])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\nrecall_scores = [46.3, 56.9, 53.8, 43.7]\nmisleading_recall_scores = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the recall scores\nax.bar(brands, recall_scores, color='blue')\n\n# Plot the misleading recall scores\nax.bar(brands, misleading_recall_scores, bottom=recall_scores, color='pink')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Recall Scores')\nax.set_title('Truthful: Misleading Recall = 2:0')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Volkswagen', 'Toyota', 'Honda', 'Ford', 'Chevrolet', 'Dodge', 'BMW', 'Audi', 'Mercedes-Benz', 'Lexus']\nprobabilities = [25, 30, 15, 20, 25, 20, 10, 15, 10, 5]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a bar chart\nax.bar(brands, probabilities, color='blue')\n\n# Set the title of the chart\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('Probability of Improvement')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nmetrics = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ncolors = ['#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c']\n\n# Data for the second chart\nmetrics_2 = [7.1, 7.0, 6.5, 6.5, 5.5, 5.0, 5.0, 4.6, 4.6, 3.7, 3.0, 2.6]\n\n# Create the first chart\nfig, ax = plt.subplots(figsize=(10, 4))\nax.bar(emotions, metrics, color=colors)\nax.set_title('Frequency Metric 1')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\n# Create the second chart\nfig, ax = plt.subplots(figsize=(10, 4))\nax.bar(emotions, metrics_2, color=colors)\nax.set_title('Frequency Metric 2')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('Top 3 Video Game Scores', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Game Title', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Score', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['Attack on Titan', 'The Count of Monte Cristo', 'Notre-Dame de Paris'], rotation=45)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('grey')\nax.spines['top'].set_color('grey')\nax.spines['right'].set_color('grey')\nax.spines['left'].set_color('grey')\n\n# Set the color of the grid lines\nax.xaxis.grid(True)\nax.yaxis.grid(True)\n\n# Set the color of the tick labels\nax.set_xticklabels(['"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nlabels = ['Total Energy Consumption (10^2 PJ)', 'Electricity Production (10^1 TWh)', 'Renewable Energy Ratio (%)', 'Electricity Consumption (10^1 TWh)']\nvalues = [1500, 1000, 30, 1200]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Create a bar chart with the data\nbars = ax.bar(labels, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\nax.set_title('Energy Metrics')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nsynthetic_data = [10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 5, 11, 16, 16]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(synthetic_data, label='Synthetic Data')\nax.plot(human_authored_data, label='Human-Authored Data')\n\n# Add labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nbeauty_data}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [-3.5, -3, -2.5, -2, -1.5, -1, -0.5, 0]\ny1 = [3.2, 3.3, 2.2, 2.3, 1.9, 1.7, 1.6, 1.8]\ny2 = [3.2, 3.3, 2.2, 2.3, 1.9, 1.7, 1.6, 1.8]\ny3 = [3.2, 3.3, 2.2, 2.3, 1.9, 1.7, 1.6, 1.8]\ny4 = [3.2, 3.3, 2.2, 2.3, 1.9, 1.7, 1.6, 1.8]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the data\nax.plot(x, y1, label='Vicuna-HAG', color='#FF6347')\nax.plot(x, y2, label='Vicuna-Default', color='#4682B4')\nax.plot(x, y3, label='LLAMA-HAG', color='#FFD700')\nax.plot(x, y4, label='LLAMA-Default', color='#90EE90')\n\n# Set the title of the plot\nax.set_title('Scores by group and constraint word count')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Score')\nax.set_ylabel('Constraint Word Count')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('AI Model Performance', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Top-10 superclasses in training dataset', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Model accuracy', fontsize=14)\n\n# Set the x-ticks\nx_ticks = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\nax.set_xticks(range(len(x_ticks)))\nax.set_xticklabels(x_ticks)\n\n# Set the y-ticks\ny_ticks = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nax.set_yticks(y_ticks)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='grey')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(x_ticks, color='grey')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(y_ticks, color='grey')\n\n# Set the color of the x-axis tick marks\nax.set_xticks(range(len(x_ticks)), color='grey')\n\n# Set the color of the y-axis tick marks\nax.set_yticks(y_ticks, color='grey')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('grey')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('grey')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis title\nax.title.set_color('grey')\n\n# Set the color of the y-axis title\nax.title.set_color('grey')\n\n# Set the color of"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\ny1 = [50, 40, 30, 20, 10]\ny2 = [70, 60, 50, 40, 30]\ny3 = [80, 70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Plot the data\nax.plot(x, y1, label='Manual Mapping')\nax.plot(x, y2, label='LLM-revision w/CoT')\nax.plot(x, y3, label='LLM-revision w/oCoT')\n\n# Set the title and labels\nax.set_title('GENIA')\nax.set_xlabel('Techniques')\nax.set_ylabel('Error correction rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [31.79, 4.64, 4.64, 0.71, 0.0, 25.0, 15.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the scores\nax.bar(models, scores_a, color='red')\nax.bar(models, scores_b, bottom=scores_a, color='blue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Score A (%)')\n\n# Add a horizontal line at y=50\nax.axhline(y=50, color='black', linestyle='--')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nparties = ['Democratic', 'Mixed', 'Republican']\nscores = [85, 80, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.barh(parties, scores, color='orange')\n\n# Set the title and labels\nax.set_title('Party Scores')\nax.set_xlabel('Score')\nax.set_ylabel('Party')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [100, 200, 300, 400, 500, 600, 700, 800, 900]\ny2 = [100, 200, 300, 400, 500, 600, 700, 800, 900]\ny3 = [100, 200, 300, 400, 500, 600, 700, 800, 900]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='s1')\nax.plot(x, y2, label='s2')\nax.plot(x, y3, label='s3')\n\n# Set the title of the plot\nax.set_title('Resonance Preference Plot for rich context')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Count')\nax.set_ylabel('Score')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\neffort_data = [20.4, 29.6, 20.4, 20.4, 9.3]\nbrainwave_data = [7.1, 38.1, 16.7, 14.3, 20.4, 20.4, 9.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot the data\nax.bar(range(len(effort_data)), effort_data, color='red')\nax.bar(range(len(brainwave_data)), brainwave_data, color='green')\n\n# Set the labels\nax.set_xticks(range(len(effort_data)))\nax.set_xticklabels(['Very Low', 'Low', 'Neutral', 'High', 'Very High'])\n\n# Set the title\nax.set_title('Eye Movement')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Ours')\nax.set_xlabel('Scale')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_xlim(0.5, 1.2)\nax.set_ylim(-30, 30)\n\n# Create a scatter plot with random data points\nx = np.linspace(0.5, 1.2, 100)\ny = np.random.normal(0, 1, 100)\nax.scatter(x, y, c='blue')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Saliency-based Sampling')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_xlim(0, 1.4)\nax.set_ylim(-30, 30)\n\n# Create a scatter plot with random data points\nx = np.linspace(0, 1.4, 100)\ny = np.random.normal(0, 1, 100)\nax.scatter(x, y, c='red')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Ours')\nax.set_xlabel('Rotation Angle [\u00b0]')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_xlim(-180, 180)\nax.set_ylim(-30, 30)\n\n# Create a scatter plot with random data points\nx = np.linspace(-180, 180, 100)\ny = np.random.normal(0, 1, 100)\nax.scatter(x, y, c='green')\n\n# Create a fourth subplot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Saliency-based Sampling')\nax.set_xlabel('Scale')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_xlim(0.5, 1.2)\nax.set_ylim(-30, 30)\n\n# Create a scatter plot with random data points\nx = np.linspace(0.5, 1.2, 100)\ny = np.random.normal(0, 1, 100)\nax.scatter(x, y, c='blue')\n\n# Create a fifth subplot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Ours')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_xlim(0, 1.4)\nax.set_ylim(-30, 30)\n\n# Create a scatter plot with random data points\nx = np.linspace(0, 1.4, 100)\ny = np.random.normal(0, 1, 100)\nax.scatter(x, y, c='red')\n\n# Create a sixth subplot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Saliency-based Sampling')\nax.set_xlabel('Rotation Angle [\u00b0]')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_xlim(-180, 180)\nax.set_ylim(-30, 30)\n\n# Create a scatter plot with random data points\nx = np.linspace(-180, 180, 100)\ny = np.random.normal(0, 1, 100)\nax.scatter(x, y, c='green')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 1, 2, 3, 4]\ny = [3.5, 2.3, 2.0, 1.3, -0.7]\ny2 = [3.4, 3.4, 3.4, 3.3, -2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(x, y, 'o-', label='Model Performance')\nax.plot(x, y2, 's-', label='Language')\n\n# Set the title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Time (in years)')\nax.set_ylabel('Performance Score')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Random', 'Ours', 'SOTA']\ny1 = [66.3, 61.9, 53.8]\ny2 = [49.3, 45.7, 41.6]\ny3 = [36.3, 36.5, 31.5]\ny4 = [48.0, 42.6, 40.5]\ny5 = [43.8, 40.2, 36.8]\ny6 = [49.5, 41.0, 36.8]\ny7 = [30.6, 29.5, 28.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, label='Truthful')\nax.plot(x, y2, label='Misleading')\nax.plot(x, y3, label='Truthful')\nax.plot(x, y4, label='Misleading')\nax.plot(x, y5, label='Truthful')\nax.plot(x, y6, label='Misleading')\nax.plot(x, y7, label='Truthful')\n\n# Set the title of the plot\nax.set_title('Truthful:Misleading = 2:1')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking 1')\n\n# Create a bar chart with the data\nax.bar(range(1, 7), [55, 45, 35, 25, 15, 5], color='pink')\n\n# Set the x-axis labels\nax.set_xticks(range(1, 7))\nax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nscores = [54.9, 38.3, 71.5, 79.2, 70.3, 54.5, 52.9, 42.4, 92.6, 89.2, 64.6, 83.3, 96.4, 80.0, 71.0, 64.6, 43.8, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89.2, 64.6, 42.4, 87.1, 8.7, 2.0, 90.0, 2.0, 91.0, 83.3, 7.1, 60.3, 56.8, 42.4, 36.8, 92.6, 89."}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first dataset\nx = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny = [150.0, 180.0, 75.0, 90.0, 80.0]\ncolors = ['orange', 'orange', 'orange', 'orange', 'orange']\n\n# Data for the second dataset\nx2 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny2 = [2.5, 2.0, 1.5, 2.0, 1.5]\ncolors2 = ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\n\n# Data for the third dataset\nx3 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny3 = [60.0, 55.0, 70.0, 65.0, 72.0]\ncolors3 = ['lightgreen', 'lightgreen', 'lightgreen', 'lightgreen', 'lightgreen']\n\n# Data for the fourth dataset\nx4 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny4 = [80.0, 75.0, 90.0, 85.0, 88.0]\ncolors4 = ['yellow', 'yellow', 'yellow', 'yellow', 'yellow']\n\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot the first dataset\naxs[0, 0].bar(x, y, color=colors)\naxs[0, 0].set_title('Dataset 1')\n\n# Plot the second dataset\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Dataset 2')\n\n# Plot the third dataset\naxs[1, 0].bar(x3, y3, color=colors3)\naxs[1, 0].set_title('Dataset 3')\n\n# Plot the fourth dataset\naxs[1, 1].bar(x4, y4, color=colors4)\naxs[1, 1].set_title('Dataset 4')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Dominance')\n\n# Set the x-axis label\nax.set_xlabel('SAM Rating')\n\n# Set the y-axis label\nax.set_ylabel('Color')\n\n# Define the data for the bars\nbars = ['neutral', 'neutral', 'yellow high', 'yellow low', 'yellow high', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'red high']\nsam_ratings = [5, 6, 4, 3, 5, 7, 6, 8, 7, 9, 8, 9]\n\n# Create a bar chart with the data\nax.barh(bars, sam_ratings, color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a bar chart for gaming duration\ngaming_duration = [10, 20, 30, 40, 50]\ngaming_duration_std = [2, 3, 2, 3, 2]\nax.bar(range(len(gaming_duration)), gaming_duration, yerr=gaming_duration_std, capsize=5, color='blue', label='Gaming Duration')\n\n# Create a bar chart for exercise duration\nexercise_duration = [15, 25, 35, 45, 55]\nexercise_duration_std = [1, 2, 1, 2, 1]\nax.bar(range(len(exercise_duration)), exercise_duration, yerr=exercise_duration_std, capsize=5, color='green', label='Exercise Duration')\n\n# Create a bar chart for reading duration\nreading_duration = [5, 15, 25, 35, 45]\nreading_duration_std = [0.5, 1, 0.5, 1, 0.5]\nax.bar(range(len(reading_duration)), reading_duration, yerr=reading_duration_std, capsize=5, color='yellow', label='Reading Duration')\n\n# Create a bar chart for music playtime\nmusic_playtime = [10, 20, 30, 40, 50]\nmusic_playtime_std = [1, 2, 1, 2, 1]\nax.bar(range(len(music_playtime)), music_playtime, yerr=music_playtime_std, capsize=5, color='cyan', label='Music Playtime')\n\n# Set the x-axis labels\nax.set_xticks(range(len(gaming_duration)))\nax.set_xticklabels(['Mon', 'Tue', 'Wed', 'Thu', 'Fri'])\n\n# Set the y-axis label\nax.set_ylabel('Duration (minutes)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Llama-70b Performance', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Time (s)', fontsize=15)\n\n# Set the y-axis label\nax.set_ylabel('Bleu Score', fontsize=15)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([15, 17, 19, 21, 23, 25])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['15', '17', '19', '21', '23', '25'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line miterlimit\nax.spines['bottom'].set_miterlimit(5)\n\n# Set the y-axis line miterlimit\nax.spines['left'].set_miterlimit(5)\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capsize\nax.spines['bottom'].set_capsize(5)\n\n# Set the y-axis line capsize\nax.spines['left'].set_capsize(5)\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Define the data points\nx = ['AlphaBeta', 'z^', 'Gamma(\u03b3=0.05)', 'Gamma(\u03b3=0.1)', 'Gamma(\u03b3=0.25)']\ny = [5.3, 4.7, 4.9, 4.1, 4.3]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Execution Accuracy Comparison')\n\n# Define the data for the plots\nx = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\ny = [0.92, 0.87, 0.85, 0.83, 0.82]\n\n# Create a bar chart\nbars = ax.bar(x, y, color='lightblue')\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height:.2f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Execution Method')\n\n# Set the y-axis label\nax.set_ylabel('Execution Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(0.75, 0.95)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the first subplot\nax.set_title('Region Classification Accuracy')\n\n# Create a bar chart with the accuracy values\naccuracy_values = [0.88, 0.87, 0.83]\nregions = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\nax.bar(regions, accuracy_values, color='blue')\n\n# Add a star symbol to the top of each bar\nfor i, v in enumerate(accuracy_values):\n    ax.text(i, v + 0.05, '*', ha='center', va='bottom', fontsize=20)\n\n# Set the y-axis limits\nax.set_ylim([0.6, 1])\n\n# Create a second subplot next to the first one\nax2 = fig.add_subplot(122)\nax2.set_title('Slice Mean Error (ms)')\n\n# Create a bar chart with the error values\nerror_values = [9.00, 9.33, 9.00]\nmodels = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\nax2.bar(models, error_values, color='green')\n\n# Add a star symbol to the top of each bar\nfor i, v in enumerate(error_values):\n    ax2.text(i, v + 0.5, '*', ha='center', va='bottom', fontsize=20)\n\n# Set the y-axis limits\nax2.set_ylim([2.5, 22.5])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Define the players and their z-scores\nplayers = ['w/o att', 'w/o DP', '1xQ', '20xQ']\nz_scores = [4.5, 3.5, 5.5, 6.5]\n\n# Plot the data\nax.plot(players, z_scores, 'o-')\n\n# Add a horizontal line at the threshold\nax.axhline(y=5, color='r', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Mean')\n\n# Define the data for the plots\nx = [1, 2, 3, 4, 5]\ny = [1.2, 1.8, 2.5, 2.7, 3.0]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Mean')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Player Performance', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Game Runs', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Player Value', color='white')\n\n# Set the tick labels to white\nax.tick_params(axis='both', colors='white')\n\n# Set the grid lines to white\nax.grid(color='white')\n\n# Create a scatter plot with random data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [50, 60, 70, 80, 90, 100, 110, 120, 130, 140]\ncolors = ['red', 'blue', 'green', 'yellow', 'cyan', 'magenta', 'orange', 'pink', 'brown', 'gray']\nsizes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\nscatter = ax.scatter(x, y, c=colors, s=sizes)\n\n# Add a legend to the plot\nlegend = ax.legend(*scatter.legend_elements(), loc=\"upper right\", title=\"Players\")\nax.add_artist(legend)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('#F0E68C')\n\n# Add a title to the plot\nax.set_title('Stock Market Analysis', fontsize=20)\n\n# Add labels to the x-axis and y-axis\nax.set_xlabel('Time of Day (in hours)', fontsize=14)\nax.set_ylabel('Stock Price (in dollars)', fontsize=14)\n\n# Create a grid for the plot\nax.grid(True)\n\n# Define the data points\nx = [0, 0.2, 0.4, 0.6, 0.8, 1]\ny = [0, 0.2, 0.4, 0.6, 0.8, 1]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('EME sentences')\n\n# Create a scatter plot\nscatter = ax.scatter([0.5, 1.5, 2.5], [0.3, 0.7, 1.1], color='blue')\n\n# Add labels to the points\nfor i, txt in enumerate(['BERT Base', 'MacBERT', 'English HLM']):\n    ax.annotate(txt, (i+0.5, 0.3), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the x-axis label\nax.set_xlabel('Sentence type')\n\n# Set the y-axis label\nax.set_ylabel('EME score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Ratings')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the x and y labels\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10, 5))\n\n# Set the titles for each subplot\naxs[0, 0].set_title('Digit span')\naxs[0, 1].set_title('Lexical decision')\naxs[0, 2].set_title('Lexical decision')\naxs[1, 0].set_title('Reaction time')\naxs[1, 1].set_title('Trail making')\naxs[1, 2].set_title('Trail making')\n\n# Create a scatter plot for each subplot\nfor ax in axs.flat:\n    ax.scatter(np.random.rand(10), np.random.rand(10), color='red')\n    ax.set_xlabel('target Group')\n    ax.set_ylabel('control Group')\n\n# Create a bar chart for each subplot\nfor ax in axs.flat:\n    ax.bar(['target', 'control'], [np.random.rand(2), np.random.rand(2)], color='blue')\n\n# Create a histogram for each subplot\nfor ax in axs.flat:\n    ax.hist(np.random.rand(10), bins=5, color='orange')\n\n# Create a box plot for each subplot\nfor ax in axs.flat:\n    ax.boxplot([np.random.rand(10), np.random.rand(10)], vert=False, patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Create a violin plot for each subplot\nfor ax in axs.flat:\n    ax.violinplot([np.random.rand(10), np.random.rand(10)], showmeans=True)\n\n# Create a heatmap for each subplot\nfor ax in axs.flat:\n    ax.imshow(np.random.rand(10, 10), cmap='hot', interpolation='nearest')\n\n# Create a pie chart for each subplot\nfor ax in axs.flat:\n    ax.pie([np.random.rand(2), np.random.rand(2)], labels=['target', 'control'], autopct='%1.1f%%')\n\n# Create a scatter plot with a regression line for each subplot\nfor ax in axs.flat:\n    ax.plot(np.random.rand(10), np.random.rand(10), 'o')\n    z = np.polyfit(np.random.rand(10), np.random.rand(10), 1)\n    p = np.poly1d(z)\n    ax.plot(np.random.rand(10), p(np.random.rand(10)), \"r--\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Methods')\n\n# Define the data for the bar chart\nx = ['BG', 'IBP', 'SSP', 'NBP']\ny = [70, 60, 80, 90]\n\n# Create a bar chart\nbars = ax.bar(x, y, color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Prediction Accuracy v_{D_1}')\n\n# Set the y-axis label\nax.set_ylabel('Methods')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Fish Population by Depth')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Search depth')\nax.set_ylabel('Fish population')\n\n# Define the data points\nx = [50, 100, 150, 200, 300, 350]\ny = [0.04, 0.02, 0.01, 0.005, 0.002, 0.001]\n\n# Plot the data points\nax.plot(x, y, 'bo-')\n\n# Set the limits for the x and y axes\nax.set_xlim(0, 400)\nax.set_ylim(0, 0.06)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Define the activities and their durations\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 50.3, 29.5]\n\n# Create a bar chart with the activities and their durations\nbars = ax.bar(activities, durations, color='blue')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Activity')\n\n# Set the y-axis label\nax.set_ylabel('Duration (minutes)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Mean Value')\n\n# Create a bar chart with the mean values\nmean_values = [2.5, 2.6, 2.7, 2.8, 2.9]\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment']\nax.bar(categories, mean_values, color='blue')\n\n# Set the x-axis labels\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the y-axis limits\nax.set_ylim(1.0, 3.0)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Define the data points for the plot\nx = [-40, -20, 0, 20, 40]\ny = [7.6, 5.6, 3.6, 1.6, -0.4]\n\n# Plot the data points\nax.plot(x, y)\n\n# Add a vertical line at x=0\nax.axvline(0, color='k', linestyle='--')\n\n# Add a horizontal line at y=0\nax.axhline(0, color='k', linestyle='--')\n\n# Add a rectangle with a dashed border\nrect = plt.Rectangle((0, 0), 1, 1, fill=False, edgecolor='r', linewidth=2)\nax.add_patch(rect)\n\n# Add a text annotation\nax.text(0.5, 0.5, 'Optimal Thrust', ha='center', va='center', transform=ax.transAxes)\n\n# Add a legend\nax.legend(['SOCP Learning (Proposed)', 'FMPC', '\u03b8_max', '\u03b8_min'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Performance')\n\n# Set the x-axis label\nax.set_xlabel('Stocks')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Define the data points\nx = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\ny = [45, 55, 35, 25]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add grid lines\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 3))\n\n# Set the title of the plot\nax.set_title('Human Normalized Score')\n\n# Create a scatter plot\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\nax.scatter(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Human Normalized Score')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Define the data points\nx = np.array([2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])\ny = np.array([-40, -30, -20, -10, 0, 10, 20])\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Set the limits for the x-axis\nax.set_xlim(1.5, 5.5)\n\n# Set the limits for the y-axis\nax.set_ylim(-50, 30)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Performance Metrics', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Cycles (c)', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('SE (bps)', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis ticks\nax.set_xticks([0, 25, 50, 75, 100])\n\n# Set the y-axis ticks\nax.set_yticks([0, 2, 4, 6, 8, 10, 12])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '25', '50', '75', '100'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the text\nax.text(0.5, 0.95, 'Method', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.9, 'GMML (25%-75%)', transform=ax.transAxes, fontsize=10, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.85, 'GML (25%-75%)', transform=ax.transAxes, fontsize=10, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.8, 'AO (25%-75%)', transform=ax.transAxes, fontsize=10, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.75, 'Perfect', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.7, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.65, '-10dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.6, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.55, '-10dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.5, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.45, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.4, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.35, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.3, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.25, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.2, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.15, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.1, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.05, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.0, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.05, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.1, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.15, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.2, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.25, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.3, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.35, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.4, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.45, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.5, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.55, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.6, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.65, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.7, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.75, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.8, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.85, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.9, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -0.95, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.0, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.05, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.1, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.15, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.2, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.25, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.3, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.35, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.4, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.45, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.5, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.55, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.6, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.65, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.7, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.75, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.8, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.85, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.9, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -1.95, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.0, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.05, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.1, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.15, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.2, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.25, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.3, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.35, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.4, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.45, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.5, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.55, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.6, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.65, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.7, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.75, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.8, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.85, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.9, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -2.95, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.0, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.05, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.1, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.15, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.2, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.25, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.3, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.35, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.4, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.45, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.5, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.55, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.6, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.65, '0dB', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, -3.7, '0dB', transform=ax.transAxes, fontsize"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(25, 8))\n\n# Set the title of the plot\nax.set_title('Linear travel times')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Add a legend to the plot\nax.legend(['Linear'])\n\n# Set the x-axis label\nax.set_xlabel('Distance (km)')\n\n# Set the y-axis label\nax.set_ylabel('Time (hours)')\n\n# Set the x-axis limits\nax.set_xlim([0, 1])\n\n# Set the y-axis limits\nax.set_ylim([0, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Modality Performance Comparison')\n\n# Define the modality names\nmodality_names = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\n\n# Define the performance metrics for each modality\nperformance_metrics = [0.92, 0.88, 0.95]\n\n# Define the colors for each modality\ncolors = ['skyblue', 'lightgreen', 'pink']\n\n# Plot the bar chart\nbars = ax.bar(modality_names, performance_metrics, color=colors)\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Modality')\n\n# Set the y-axis label\nax.set_ylabel('Performance Metric')\n\n# Set the y-axis limits\nax.set_ylim(0.7, 1.0)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('0.25 HIAR')\n\n# Set the x-axis label\nax.set_xlabel('PSNR (dB)')\n\n# Set the y-axis label\nax.set_ylabel('SNR (dB)')\n\n# Create a scatter plot with the data\nax.scatter([23.4, 23.2, 23.0], [22.8, 22.6, 22.4], color='blue')\n\n# Add a legend to the plot\nax.legend(['Vanilla DIP', 'SGLD DIP', 'Ours'])\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('0.1 HIAR')\n\n# Set the x-axis label\nax.set_xlabel('PSNR (dB)')\n\n# Set the y-axis label\nax.set_ylabel('SNR (dB)')\n\n# Create a scatter plot with the data\nax.scatter([23.4, 23.2, 23.0], [19.8, 19.6, 19.4], color='red')\n\n# Add a legend to the plot\nax.legend(['Vanilla DIP', 'SGLD DIP', 'Ours'])\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Define the data points\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Scatter plot with color coding\nscatter = ax.scatter(x, y, c=y, cmap='coolwarm')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\ncbar.set_label('Output Variable Y3')\n\n# Set the x-axis label\nax.set_xlabel('Feature 1')\n\n# Set the y-axis label\nax.set_ylabel('Feature 2')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('darkgreen')\n\n# Create a grid of points\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function to plot\nZ = np.sin(X**2 + Y**2)\n\n# Plot the function\nc = ax.contourf(X, Y, Z, cmap='YlGnBu')\n\n# Add a colorbar\nfig.colorbar(c)\n\n# Set the title of the plot\nax.set_title(r'$\\lambda(x, z)$')\n\n# Set the x and y labels\nax.set_xlabel('x1')\nax.set_ylabel('x2')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot area\nax.set_facecolor('lightgrey')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\n\n# Set the title of the plot\nax.set_title('Blood Pressure Distribution')\n\n# Define the data points for the scatter plot\nx = [120, 130, 140, 150]\ny = [70, 80, 90, 100]\n\n# Create a scatter plot with the data points\nax.scatter(x, y, c='blue', label='Female')\n\n# Create a scatter plot with the data points\nx = [120, 130, 140, 150]\ny = [70, 80, 90, 100]\nax.scatter(x, y, c='red', label='Male')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nx = np.linspace(-4, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the limits of the x-axis\nax.set_xlim(-4, 10)\n\n# Set the limits of the y-axis\nax.set_ylim(-4, 10)\n\n# Set the title of the plot\nax.set_title('Sine Wave')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a circle with a radius of 10\ncircle = plt.Circle((5, 5), 10, color='red', fill=False)\nax.add_artist(circle)\n\n# Create a circle with a radius of 8\ncircle = plt.Circle((5, 5), 8, color='orange', fill=False)\nax.add_artist(circle)\n\n# Create a circle with a radius of 6\ncircle = plt.Circle((5, 5), 6, color='blue', fill=False)\nax.add_artist(circle)\n\n# Create a circle with a radius of 4\ncircle = plt.Circle((5, 5), 4, color='green', fill=False)\nax.add_artist(circle)\n\n# Create a circle with a radius of 2\ncircle = plt.Circle((5, 5), 2, color='purple', fill=False)\nax.add_artist(circle)\n\n# Create a circle with a radius of 0\ncircle = plt.Circle((5, 5), 0, color='black', fill=True)\nax.add_artist(circle)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the time range\ntime = np.linspace(8, 15, 100)\n\n# Define the temperature data\ntemperature = np.sin(time) * 10 + 20\n\n# Plot the temperature data\nax.plot(time, temperature, color='blue')\n\n# Set the title of the plot\nax.set_title('Temperature over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time (hours)')\n\n# Set the y-axis label\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Create a scatter plot with random data points\nx = np.random.rand(100)\ny = np.random.rand(100)\nax.scatter(x, y, c='red', s=50)\n\n# Set the title of the plot\nax.set_title('Data Visualization')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function for the plot\ndef plot_spearman_coefficient_distribution():\n    # Create a figure and axis object\n    fig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n    # Set the title of the plot\n    ax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n    # Generate some random data\n    data = np.random.normal(loc=0.5, scale=0.1, size=1000)\n\n    # Plot the KDE of the data\n    ax.plot(data, 'o', markersize=2, alpha=0.5)\n\n    # Set the x-axis label\n    ax.set_xlabel('Spearman Coefficient')\n\n    # Set the y-axis label\n    ax.set_ylabel('Density')\n\n    # Show the plot\n    plt.show()\n\n# Call the function to plot the data\nplot_spearman_coefficient_distribution()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Define the data for the plots\nx = np.linspace(7, 15, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Random Bundle')\nax.plot(x, y2, 'r-', label='Increase Price')\nax.plot(x, y3, 'g-', label='Strategic (Ours)')\nax.plot(x, y4, 'c-', label='Reserved price p_i')\n\n# Add a legend\nax.legend()\n\n# Set the title of the plot\nax.set_title('Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time (p)')\n\n# Set the y-axis label\nax.set_ylabel('Shape Density')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the limits of the x-axis\nax.set_xlim(7, 15)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Fashion Trends Over Time', fontsize=18)\n\n# Set the labels for the x and y axes\nax.set_xlabel('Time (years)', fontsize=14)\nax.set_ylabel('Value', fontsize=14)\n\n# Set the grid lines\nax.grid(True)\n\n# Define the data points\nx = np.linspace(0, 5, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Plot the data points\nax.plot(x, y1, label='Gucci', color='#8e44ad')\nax.plot(x, y2, label='Chanel', color='#2ecc71')\nax.plot(x, y3, label='Dolce & Gabbana', color='#3498db')\nax.plot(x, y4, label='Versace', color='#9b59b6')\nax.plot(x, y5, label='Yves Saint Laurent', color='#34495e')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [-0.5, -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny = [0.5, 0.4, 0.3, 0.2, 0.1, 0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Log Probability of Distribution')\nax.set_xlabel('Log Odds Ratio')\nax.set_ylabel('Log Probability')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Expert dimension')\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny = [5, 6, 5, 7, 6, 5, 7, 6]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', bottom=False, top=False, left=False, right=False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelpad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelpad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelwidth=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelwidth=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelheight=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelheight=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', labelrotation=0)\n\n# Set the color of the tick marks"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\naccuracies = [0.748, 0.762, 0.709]\nmethods = ['Baseline 1', 'Baseline 2', 'FedMM']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Accuracy by hospital and method')\n\n# Set the x-axis labels\nax.set_xticks(range(len(hospitals)))\nax.set_xticklabels(hospitals)\n\n# Set the y-axis limits\nax.set_ylim(0.5, 0.95)\n\n# Set the y-axis ticks\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Set the y-axis labels\nax.set_ylabel('Accuracy')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.5', '0"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Car Prices (valuation 40)')\n\n# Set the x-axis label\nax.set_xlabel('Car Models')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Define the car models\ncar_models = ['GPT-4', 'Claude-2.1', 'Claude-2', 'GPT-3.5']\n\n# Define the prices for each car model\nprices = [10000, 12000, 15000, 18000]\n\n# Plot the data\nax.plot(car_models, prices, 'o-')\n\n# Set the x-tick labels\nax.set_xticks(np.arange(len(car_models)))\nax.set_xticklabels(car_models)\n\n# Set the y-tick labels\nax.set_yticks(np.arange(0, 21000, 5000))\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('Stock Market Performance', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Stock Price', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0.5, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([0, 25, 50, 75, 100])\n\n# Set the y-axis ticks\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '25', '50', '75', '100'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['$0.50', '$0.60', '$0.70', '$0.80', '$0.90', '$1.00'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the line width\nax.spines['top'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\n\n# Set the line style\nax.spines['top'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\n\n# Set the line color\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the line cap\nax.spines['top'].set_capstyle('round')\nax.spines['bottom'].set_capstyle('round')\nax.spines['left'].set_capstyle('round')\nax.spines['right'].set_capstyle('round')\n\n# Set the line join\nax.spines['top'].set_joinstyle('round')\nax.spines['bottom'].set_joinstyle('round')\nax.spines['left'].set_joinstyle('round')\nax.spines['right'].set_joinstyle('round')\n\n# Set the line dash pattern\nax.spines['top'].set_dashes([2, 2])\nax.spines['bottom'].set_dashes([2, 2])\nax.spines['left'].set_dashes([2, 2])\nax.spines['right'].set_dashes([2, 2])\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(0.5)\nax.spines['bottom'].set_dashoffset(0.5)\nax.spines['left'].set_dashoffset(0.5)\nax.spines['right'].set_dashoffset(0.5)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(0.5)\nax.spines['bottom'].set_dashphase(0.5)\nax.spines['left'].set_dashphase(0.5)\nax.spines['right'].set_dashphase(0.5)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(0.5)\nax.spines['bottom'].set_dashlength(0.5)\nax.spines['left'].set_dashlength(0.5)\nax.spines['right'].set_dashlength(0.5)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(0.5)\nax.spines['bottom'].set_dashangle(0.5)\nax.spines['left'].set_dashangle(0.5)\nax.spines['right'].set_dashangle(0.5)\n\n# Set the line dash scale\nax.spines['top'].set_dashescale(0.5)\nax.spines['bottom'].set_dashescale(0.5)\nax.spines['left'].set_dashescale(0.5)\nax.spines['right'].set_dashescale(0.5)\n\n# Set the line dash rotation\nax.spines['top'].set_dashrotation(0.5)\nax.spines['bottom'].set_dashrotation(0.5)\nax.spines['left'].set_dashrotation(0.5)\nax.spines['right'].set_dashrotation(0.5)\n\n# Set the line dash skew\nax.spines['top'].set_dasheskew(0.5)\nax.spines['bottom'].set_dasheskew(0.5)\nax.spines['left'].set_dasheskew(0.5)\nax.spines['right'].set_dasheskew(0.5)\n\n# Set the line dash skew angle\nax.spines['top'].set_dasheskewangle(0.5)\nax.spines['bottom'].set_dasheskewangle(0.5)\nax.spines['left'].set_dasheskewangle(0.5)\nax.spines['right'].set_dasheskewangle(0.5)\n\n# Set the line dash skew scale\nax.spines['top'].set_dasheskewscale(0.5)\nax.spines['bottom'].set_dasheskewscale(0.5)\nax.spines['left'].set_dasheskewscale(0.5)\nax.spines['right'].set_dasheskewscale(0.5)\n\n# Set the line dash skew rotation\nax.spines['top'].set_dasheskewrotation(0.5)\nax.spines['bottom'].set_dasheskewrotation(0.5)\nax.spines['left'].set_dasheskewrotation(0.5)\nax.spines['right'].set_dasheskewrotation(0.5)\n\n# Set the line dash skew skew\nax.spines['top'].set_dasheskewskew(0.5)\nax.spines['bottom'].set_dasheskewskew(0.5)\nax.spines['left'].set_dasheskewskew(0.5)\nax.spines['right'].set_dasheskewskew(0.5)\n\n# Set the line dash skew skew angle\nax.spines['top'].set_dasheskewskewangle(0.5)\nax.spines['bottom'].set_dasheskewskewangle(0.5)\nax.spines['left'].set_dasheskewskewangle(0.5)\nax.spines['right'].set_dasheskewskewangle(0.5)\n\n# Set the line dash skew skew scale\nax.spines['top'].set_dasheskewskewscale(0.5)\nax.spines['bottom'].set_dasheskewskewscale(0.5)\nax.spines['left'].set_dasheskewskewscale(0.5)\nax.spines['right'].set_dasheskewskewscale(0.5)\n\n# Set the line dash skew skew rotation\nax.spines['top'].set_dasheskewskewrotation(0.5)\nax.spines['bottom'].set_dasheskewskewrotation(0.5)\nax.spines['left'].set_dasheskewskewrotation(0.5)\nax.spines['right'].set_dasheskewskewrotation(0.5)\n\n# Set the line dash skew skew skew\nax.spines['top'].set_dasheskewskewskew(0.5)\nax.spines['bottom'].set_dasheskewskewskew(0.5)\nax.spines['left'].set_dasheskewskewskew(0.5)\nax.spines['right'].set_dasheskewskewskew(0.5)\n\n# Set the line dash skew skew skew angle\nax.spines['top'].set_dasheskewskewskewangle(0.5)\nax.spines['bottom'].set_dasheskewskewskewangle(0.5)\nax.spines['left'].set_dasheskewskewskewangle(0.5)\nax.spines['right'].set_dasheskewskewskewangle(0.5)\n\n# Set the line dash skew skew skew scale\nax.spines['top'].set_dasheskewskewskewscale(0.5)\nax.spines['bottom'].set_dasheskewskewskewscale(0.5)\nax.spines['left'].set_dasheskewskewskewscale(0.5)\nax.spines['right'].set_dasheskewskewskewscale(0.5)\n\n# Set the line dash skew skew skew rotation\nax.spines['top'].set_dasheskewskewskewrotation(0.5)\nax.spines['bottom'].set_dasheskewskewskewrotation(0.5)\nax.spines['left'].set_dasheskewskewskewrotation(0.5)\nax.spines['right'].set_dasheskewskewskewrotation(0.5)\n\n# Set the line dash skew skew skew skew\nax.spines['top'].set_dasheskewskewskewskew(0.5)\nax.spines['bottom'].set_dasheskewskewskewskew(0.5)\nax.spines['left'].set_dasheskewskewskewskew(0.5)\nax.spines['right'].set_dasheskewskewskewskew(0.5)\n\n# Set the line dash skew skew skew skew angle\nax.spines['top'].set_dasheskewskewskewskewangle(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewangle(0.5)\nax.spines['left'].set_dasheskewskewskewskewangle(0.5)\nax.spines['right'].set_dasheskewskewskewskewangle(0.5)\n\n# Set the line dash skew skew skew skew scale\nax.spines['top'].set_dasheskewskewskewskewscale(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewscale(0.5)\nax.spines['left'].set_dasheskewskewskewskewscale(0.5)\nax.spines['right'].set_dasheskewskewskewskewscale(0.5)\n\n# Set the line dash skew skew skew skew rotation\nax.spines['top'].set_dasheskewskewskewskewrotation(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewrotation(0.5)\nax.spines['left'].set_dasheskewskewskewskewrotation(0.5)\nax.spines['right'].set_dasheskewskewskewskewrotation(0.5)\n\n# Set the line dash skew skew skew skew skew\nax.spines['top'].set_dasheskewskewskewskewskew(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskew(0.5)\nax.spines['left'].set_dasheskewskewskewskewskew(0.5)\nax.spines['right'].set_dasheskewskewskewskewskew(0.5)\n\n# Set the line dash skew skew skew skew skew angle\nax.spines['top'].set_dasheskewskewskewskewskewangle(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewangle(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewangle(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewangle(0.5)\n\n# Set the line dash skew skew skew skew skew scale\nax.spines['top'].set_dasheskewskewskewskewskewscale(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewscale(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewscale(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewscale(0.5)\n\n# Set the line dash skew skew skew skew skew rotation\nax.spines['top'].set_dasheskewskewskewskewskewrotation(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewrotation(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewrotation(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewrotation(0.5)\n\n# Set the line dash skew skew skew skew skew skew\nax.spines['top'].set_dasheskewskewskewskewskewskew(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewskew(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewskew(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewskew(0.5)\n\n# Set the line dash skew skew skew skew skew skew angle\nax.spines['top'].set_dasheskewskewskewskewskewskewangle(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewskewangle(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewskewangle(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewskewangle(0.5)\n\n# Set the line dash skew skew skew skew skew skew scale\nax.spines['top'].set_dasheskewskewskewskewskewskewscale(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewskewscale(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewskewscale(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewskewscale(0.5)\n\n# Set the line dash skew skew skew skew skew skew rotation\nax.spines['top'].set_dasheskewskewskewskewskewskewrotation(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewskewrotation(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewskewrotation(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewskewrotation(0.5)\n\n# Set the line dash skew skew skew skew skew skew skew\nax.spines['top'].set_dasheskewskewskewskewskewskewskew(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewskewskew(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewskewskew(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewskewskew(0.5)\n\n# Set the line dash skew skew skew skew skew skew skew angle\nax.spines['top'].set_dasheskewskewskewskewskewskewskewangle(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewskewskewangle(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewskewskewangle(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewskewskewangle(0.5)\n\n# Set the line dash skew skew skew skew skew skew skew scale\nax.spines['top'].set_dasheskewskewskewskewskewskewskewscale(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewskewskewscale(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewskewskewscale(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewskewskewscale(0.5)\n\n# Set the line dash skew skew skew skew skew skew skew rotation\nax.spines['top'].set_dasheskewskewskewskewskewskewskewrotation(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewskewskewrotation(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewskewskewrotation(0.5)\nax.spines['right'].set_dasheskewskewskewskewskewskewskewrotation(0.5)\n\n# Set the line dash skew skew skew skew skew skew skew skew\nax.spines['top'].set_dasheskewskewskewskewskewskewskewskew(0.5)\nax.spines['bottom'].set_dasheskewskewskewskewskewskewskewskew(0.5)\nax.spines['left'].set_dasheskewskewskewskewskewskewskewskew"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny2 = [0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05]\ny3 = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Posterior accuracy')\nax.plot(x, y2, 'r-', label='Prior accuracy')\nax.plot(x, y3, 'g-', label='Prior probability')\n\n# Set the title and labels\nax.set_title('Model Performance Metrics')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Performance metrics')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nperformance = [75, 85, 90, 80, 70, 60, 50]\naug = [85, 80, 75, 70, 65, 60, 55]\nte = [80, 75, 70, 65, 60, 55, 50]\nqual = [75, 70, 65, 60, 55, 50, 45]\ndiff = [70, 65, 60, 55, 50, 45, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the labels for the x-axis\nax.set_xlabel('Time')\nax.set_ylabel('Performance')\n\n# Plot the data\nax.plot(performance, aug, label='Augmentation', color='#E67E22')\nax.plot(performance, te, label='T-estimation', color='#F1C40F')\nax.plot(performance, qual, label='Qualification', color='#3498DB')\nax.plot(performance, diff, label='DiffStitch', color='#2980B9')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the data for the plot\nmetrics = ['128/0.5/0.0001', '128/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001']\nvalues = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Plot the data\nax.plot(metrics, values)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncountries = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nenrollment_rates = [0.25, 0.15, 0.35, 0.45, 0.8]\n\n# Data for the second chart\ncountries_2 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nstudent_teacher_ratios = [20, 15, 10, 5, 35]\n\nfig, ax = plt.subplots(2, 1, figsize=(6, 6))\n\n# Plot the first chart\nax[0].bar(countries, enrollment_rates, color='purple')\nax[0].set_title('Higher Education Enrollment Rate')\nax[0].set_xlabel('Countries')\nax[0].set_ylabel('Enrollment Rate')\n\n# Plot the second chart\nax[1].bar(countries_2, student_teacher_ratios, color='green')\nax[1].set_title('Student-Teacher Ratio')\nax[1].set_xlabel('Countries')\nax[1].set_ylabel('Ratio')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 3200, 10400]\nforest_coverage = [21, 34, 25, 28, 38]\n\n# Data for the second chart\nregions2 = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nland_area = [18, 20, 25, 34, 38]\nrenewable_energy_usage = [18, 28, 25, 34, 33]\n\n# Create the first chart\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\nax.barh(regions, emissions, color='lightblue')\nax.barh(regions, forest_coverage, left=emissions, color='darkgreen')\nax.set_xlabel('Emissions (in millions of metric tons)')\nax.set_title('Annual Carbon Dioxide Emissions')\n\n# Create the second chart\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\nax.barh(regions2, land_area, color='lightgreen')\nax.barh(regions2, renewable_energy_usage, left=land_area, color='orange')\nax.set_xlabel('Land Area (in %)')\nax.set_title('Forest Coverage Rate')\n\n# Create the third chart\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\nax.barh(regions2, land_area, color='lightgreen')\nax.barh(regions2, renewable_energy_usage, left=land_area, color='orange')\nax.set_xlabel('Total Energy Consumption (in %)')\nax.set_title('Renewable Energy Usage')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 9))\n\n# Set the title of the graph\nax.set_title('2021 Election Results')\n\n# Create a bar chart with the data\nax.bar(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'], [85, 75, 65, 55], color='blue')\nax.bar(['Happiness Index', 'Social Security Coverage', 'Political Participation'], [75, 65, 55], color='red')\nax.bar(['Social Security Coverage', 'Political Participation'], [65, 55], color='yellow')\n\n# Set the x-axis label\nax.set_xlabel('Election Issues')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Create a list of labels for the judges\njudges = ['Expert', 'Blind', 'Consultancy', 'Debate', 'Interactive Consultancy', 'Interactive Debate']\n\n# Create a list of colors for the bars\ncolors = ['blue', 'green', 'orange', 'red', 'pink', 'purple']\n\n# Create a list of heights for the bars\nheights = [85, 75, 90, 80, 70, 60]\n\n# Create a bar chart with the judges as the x-axis and the heights as the y-axis\nbars = ax.bar(judges, heights, color=colors)\n\n# Add a label to each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the limits of the x-axis\nax.set_xlim(-1, len(judges))\n\n# Set the limits of the y-axis\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each city\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\ntemperatures = [12, 14, 16, 18]\nrainfall = [1000, 900, 800, 700]\nwind_speed = [3, 4, 5, 6]\naqi = [50, 60, 70, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the temperature data\nax.plot(cities, temperatures, 'ro-')\nax.set_title('Annual Average Temperature')\n\n# Plot the rainfall data\nfig, ax = plt.subplots(figsize=(10, 5))\nax.bar(cities, rainfall, color='green')\nax.set_title('Annual Rainfall')\n\n# Plot the wind speed data\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(cities, wind_speed, 'bo-')\nax.set_title('Wind Speed')\n\n# Plot the air quality index data\nfig, ax = plt.subplots(figsize=(10, 5))\nax.bar(cities, aqi, color='purple')\nax.set_title('Air Quality Index')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [2500, 3000, 2000, 1500, 1000]\nrenewable_energy_usage = [10, 15, 20, 18, 25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar chart\nax.bar(countries, energy_consumption, color='purple')\nax.set_title('Total Energy Consumption by Country')\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (Petajoules)')\n\n# Create a second subplot\nax2 = ax.twinx()\nax2.bar(countries, renewable_energy_usage, color='cyan')\nax2.set_title('Renewable Energy Usage by Country')\nax2.set_ylabel('Renewable Energy Usage (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nratings = [0.30, 0.25, 0.20]\ncolors = ['red', 'green', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar chart\nax.bar(models, ratings, color=colors)\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Energy Assessment Entity')\n\n# Create a bar chart with the data\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [90, 80, 70, 60], color='blue')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [80, 70, 60, 50], color='green')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [70, 60, 50, 40], color='purple')\n\n# Add labels to the x-axis\nax.set_xlabel('Energy Sources')\nax.set_ylabel('Efficiency and Cost Scores')\n\n# Add a legend to the plot\nax.legend(['Installation Efficiency', 'Maintenance Costs', 'Operational Efficiency', 'Environmental Impact', 'Regulatory Compliance', 'Safety Standards'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nmetrics = [115, 98, 75, 82, 90, 85, 78, 92, 88, 70]\ngraduation = [110, 95, 70, 80, 85, 80, 75, 90, 85, 75]\nenrollment = [120, 100, 80, 90, 95, 90, 85, 95, 90, 80]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot metrics\nax.bar(regions, metrics, color='#B3CDBA')\n\n# Add graduation and enrollment lines\nfor i, v in enumerate(graduation):\n    ax.text(i, v + 1, str(v), ha='center')\nax.plot(regions, graduation, 'ro-')\n\nfor i, v in enumerate(enrollment):\n    ax.text(i, v + 1, str(v), ha='center')\nax.plot(regions, enrollment, 'go-')\n\n# Set title and labels\nax.set_title('Educational Metrics by Region')\nax.set_xlabel('Region')\nax.set_ylabel('Metrics (%)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\nrecall_rates = [46.3, 34.0, 53.8, 19.4]\nmisleading_recall_rates = [30.1, 57.9, 55.8, 20.0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Recall Rates Across Products')\n\n# Set the x-axis labels\nax.set_xlabel('Product')\nax.set_ylabel('Recall Rate (%)')\n\n# Create a bar chart with the data\nbars = ax.bar(brands, recall_rates, color='skyblue')\n\n# Add a horizontal line at the mean recall rate\nmean_recall_rate = sum(recall_rates) / len(recall_rates)\nax.axhline(y=mean_recall_rate, color='black', linestyle='-')\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\n# Create a second bar chart for misleading recall rates\nax2 = ax.twinx()\nbars2 = ax2.bar(brands, misleading_recall_rates, color='coral')\n\n# Annotate each bar with its value\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0, 70)\nax2.set_ylim(0, 70)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsupport = [15, 75]\ndelivery = [18, 82]\nproduct_quality = [20, 78]\nreturns = [12, 85]\npricing = [17, 80]\nwebsite_usability = [10, 88]\ncheckout_process = [8, 90]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Customer Satisfaction Scores')\n\n# Set the x-axis label\nax.set_xlabel('Complaint Rates')\n\n# Set the y-axis label\nax.set_ylabel('Satisfaction Scores')\n\n# Plot the data\nax.bar(categories, support, color='lightblue')\nax.bar(categories, delivery, bottom=support, color='lightgreen')\nax.bar(categories, product_quality, bottom=[x+y for x,y in zip(support, delivery)], color='skyblue')\nax.bar(categories, returns, bottom=[x+y+z for x,y,z in zip(support, delivery, product_quality)], color='lavender')\nax.bar(categories, pricing, bottom=[x+y+z+t for x,y,z,t in zip(support, delivery, product_quality, returns)], color='lightgrey')\nax.bar(categories, website_usability, bottom=[x+y+z+t+p for x,y,z,t,p in zip(support, delivery, product_quality, returns, pricing)], color='palegoldenrod')\nax.bar(categories, checkout_process, bottom=[x+y+z+t+p+w for x,y,z,t,p,w in zip(support, delivery, product_quality, returns, pricing, website_usability)], color='lightseagreen')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie charts\nlabels = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsizes = [75, 82, 78, 85, 80, 88, 90]\ncolors = ['#f8d7da', '#f8bbd0', '#f06292', '#e53935', '#d32f2f', '#b71c1c', '#880e4f']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Customer Satisfaction')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('Impact on Plant Growth (\u0394 to control)', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Plant Growth', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Environmental Factors', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(-0.15, 0.25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([-0.15, -0.1, -0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'], color='black')\n\n# Set the color of the"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncities = ['New York', 'Los Angeles', 'Chicago']\nmetrics = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nvalues = [[225, 175, 150], [200, 150, 130], [250, 180, 160]]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot each city's metrics\nfor i, city in enumerate(cities):\n    axs[i].bar(metrics, values[i], color='blue')\n    axs[i].set_title(city)\n    axs[i].set_ylim([0, 275])\n    axs[i].set_yticks(range(0, 276, 25))\n    axs[i].grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the metrics and values\nmetrics = ['Accuracy', 'Precision', 'Recall', 'F1 Score', 'AUC-ROC']\nvalues = [0.95, 0.92, 0.88, 0.90, 0.93]\n\n# Create a bar chart with the metrics and values\nax.bar(metrics, values, color='pink')\n\n# Set the x-tick labels to be centered\nax.set_xticks(range(len(metrics)))\nax.set_xticklabels(metrics, rotation=45, ha='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Define the data for the bars\ncities = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [3.4, 2.9, 2.1, 1.8]\nwater_quality_scores = [2.7, 2.3, 2.1, 1.9]\n\n# Create the bar chart\nbars = ax.bar(cities, air_quality_scores, color='coral')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Add a second y-axis for water quality scores\nax2 = ax.twinx()\nbars2 = ax2.bar(cities, water_quality_scores, color='seagreen', alpha=0.5)\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the labels for the axes\nax.set_xlabel('Cities')\nax.set_ylabel('Air Quality Score')\nax2.set_ylabel('Water Quality Score')\n\n# Set the limits for the y-axes\nax.set_ylim(0, 3)\nax2.set_ylim(0, 3)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nroles = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\ndurations = [84.97, 102.67, 78.22, 85.17, 90]\ntokens = [449.33, 780.67, 547.39, 612.99, 618.52]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the first subplot\naxs[0].bar(roles, durations, color='skyblue')\naxs[0].set_title('a) Speak duration of roles')\naxs[0].set_xlabel('Role')\naxs[0].set_ylabel('Duration (s)')\naxs[0].set_ylim([0, 120])\n\n# Plot the second subplot\naxs[1].bar(roles, tokens, color='lightblue')\naxs[1].set_title('b) Speak tokens of roles')\naxs[1].set_xlabel('Role')\naxs[1].set_ylabel('Tokens')\naxs[1].set_ylim([0, 800])\n\n# Add a horizontal line at the median\nfor ax in axs:\n    ax.axhline(y=median(tokens), color='black', linestyle='-')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('True+ Info (%)')\nax.set_xlabel('Size of Data for Training and Validation (%)')\nax.set_ylabel('True+ info (%)')\n\n# Set the grid\nax.grid(True)\n\n# Set the limits\nax.set_xlim(0, 60)\nax.set_ylim(55, 67)\n\n# Set the ticks\nax.set_xticks(range(0, 61, 10))\nax.set_yticks(range(55, 68, 1))\n\n# Set the color of the lines\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Out-of-domain accuracy')\n\n# Define the data for the plots\nx = ['all', 'arg_causal', 'test_0', 'test_1', 'test_2', 'test_3', 'test_4', 'test_5', 'test_6', 'test_7', 'test_8', 'test_9', 'test_10', 'test_11', 'test_12', 'test_13', 'test_14', 'test_15', 'test_16', 'test_17', 'test_18', 'test_19', 'test_20', 'test_21', 'test_22', 'test_23', 'test_24', 'test_25', 'test_26', 'test_27', 'test_28', 'test_29', 'test_30', 'test_31', 'test_32', 'test_33', 'test_34', 'test_35', 'test_36', 'test_37', 'test_38', 'test_39', 'test_40', 'test_41', 'test_42', 'test_43', 'test_44', 'test_45', 'test_46', 'test_47', 'test_48', 'test_49', 'test_50', 'test_51', 'test_52', 'test_53', 'test_54', 'test_55', 'test_56', 'test_57', 'test_58', 'test_59', 'test_60', 'test_61', 'test_62', 'test_63', 'test_64', 'test_65', 'test_66', 'test_67', 'test_68', 'test_69', 'test_70', 'test_71', 'test_72', 'test_73', 'test_74', 'test_75', 'test_76', 'test_77', 'test_78', 'test_79', 'test_80', 'test_81', 'test_82', 'test_83', 'test_84', 'test_85', 'test_86', 'test_87', 'test_88', 'test_89', 'test_90', 'test_91', 'test_92', 'test_93', 'test_94', 'test_95', 'test_96', 'test_97', 'test_98', 'test_99', 'test_100', 'test_101', 'test_102', 'test_103', 'test_104', 'test_105', 'test_106', 'test_107', 'test_108', 'test_109', 'test_110', 'test_111', 'test_112', 'test_113', 'test_114', 'test_115', 'test_116', 'test_117', 'test_118', 'test_119', 'test_120', 'test_121', 'test_122', 'test_123', 'test_124', 'test_125', 'test_126', 'test_127', 'test_128', 'test_129', 'test_130', 'test_131', 'test_132', 'test_133', 'test_134', 'test_135', 'test_136', 'test_137', 'test_138', 'test_139', 'test_140', 'test_141', 'test_142', 'test_143', 'test_144', 'test_145', 'test_146', 'test_147', 'test_148', 'test_149', 'test_150', 'test_151', 'test_152', 'test_153', 'test_154', 'test_155', 'test_156', 'test_157', 'test_158', 'test_159', 'test_160', 'test_161', 'test_162', 'test_163', 'test_164', 'test_165', 'test_166', 'test_167', 'test_168', 'test_169', 'test_170', 'test_171', 'test_172', 'test_173', 'test_174', 'test_175', 'test_176', 'test_177', 'test_178', 'test_179', 'test_180', 'test_181', 'test_182', 'test_183', 'test_184', 'test_185', 'test_186', 'test_187', 'test_188', 'test_189', 'test_190', 'test_191', 'test_192', 'test_193', 'test_194', 'test_195', 'test_196', 'test_197', 'test_198', 'test_199', 'test_200', 'test_201', 'test_202', 'test_203', 'test_204', 'test_205', 'test_206', 'test_207', 'test_208', 'test_209', 'test_210', 'test_211', 'test_212', 'test_213', 'test_214', 'test_215', 'test_216', 'test_217', 'test_218', 'test_219', 'test_220', 'test_221', 'test_222', 'test_223', 'test_224', 'test_225', 'test_226', 'test_227', 'test_228', 'test_229', 'test_230', 'test_231', 'test_232', 'test_233', 'test_234', 'test_235', 'test_236', 'test_237', 'test_238', 'test_239', 'test_240', 'test_241', 'test_242', 'test_243', 'test_244', 'test_245', 'test_246', 'test_247', 'test_248', 'test_249', 'test_250', 'test_251', 'test_252', 'test_253', 'test_254', 'test_255', 'test_256', 'test_257', 'test_258', 'test_259', 'test_260', 'test_261', 'test_262', 'test_263', 'test_264', 'test_265', 'test_266', 'test_267', 'test_268', 'test_269', 'test_270', 'test_271', 'test_272', 'test_273', 'test_274', 'test_275', 'test_276', 'test_277', 'test_278', 'test_279', 'test_280', 'test_281', 'test_282', 'test_283', 'test_284', 'test_285', 'test_286', 'test_287', 'test_288', 'test_289', 'test_290', 'test_291', 'test_292', 'test_293', 'test_294', 'test_295', 'test_296', 'test_297', 'test_298', 'test_299', 'test_300', 'test_301', 'test_302', 'test_303', 'test_304', 'test_305', 'test_306', 'test_307', 'test_308', 'test_309', 'test_310', 'test_311', 'test_312', 'test_313', 'test_314', 'test_315', 'test_316', 'test_317', 'test_318', 'test_319', 'test_320', 'test_321', 'test_322', 'test_323', 'test_324', 'test_325', 'test_326', 'test_327', 'test_328', 'test_329', 'test_330', 'test_331', 'test_332', 'test_333', 'test_334', 'test_335', 'test_336', 'test_337', 'test_338', 'test_339', 'test_340', 'test_341', 'test_342', 'test_343', 'test_344', 'test_345', 'test_346', 'test_347', 'test_348', 'test_349', 'test_350', 'test_351', 'test_352', 'test_353', 'test_354', 'test_355', 'test_356', 'test_357', 'test_358', 'test_359', 'test_360', 'test_361', 'test_362', 'test_363', 'test_364', 'test_365', 'test_366', 'test_367', 'test_368', 'test_369', 'test_370', 'test_371', 'test_372', 'test_373', 'test_374', 'test_375', 'test_376', 'test_377', 'test_378', 'test_379', 'test_380', 'test_381', 'test_382', 'test_383', 'test_384', 'test_385', 'test_386', 'test_387', 'test_388', 'test_389', 'test_390', 'test_391', 'test_392', 'test_393', 'test_394', 'test_395', 'test_396', 'test_397', 'test_398', 'test_399', 'test_400', 'test_401', 'test_402', 'test_403', 'test_404', 'test_405', 'test_406', 'test_407', 'test_408', 'test_409', 'test_410', 'test_411', 'test_412', 'test_413', 'test_414', 'test_415', 'test_416', 'test_417', 'test_418', 'test_419', 'test_420', 'test_421', 'test_422', 'test_423', 'test_424', 'test_425', 'test_426', 'test_427', 'test_428', 'test_429', 'test_430', 'test_431', 'test_432', 'test_433', 'test_434', 'test_435', 'test_436', 'test_437', 'test_438', 'test_439', 'test_440', 'test_441', 'test_442', 'test_443', 'test_444', 'test_445', 'test_446', 'test_447', 'test_448', 'test_449', 'test_450', 'test_451', 'test_452', 'test_453', 'test_454', 'test_455', 'test_456', 'test_457', 'test_458', 'test_459', 'test_460', 'test_461', 'test_462', 'test_463', 'test_464', 'test_465', 'test_466', 'test_467', 'test_468', 'test_469', 'test_470', 'test_471', 'test_472', 'test_473', 'test_474', 'test_475', 'test_476', 'test_477', 'test_478', 'test_479', 'test_480', 'test_481', 'test_482', 'test_483', 'test_484', 'test_485', 'test_486', 'test_487', 'test_488', 'test_489', 'test_490', 'test_491', 'test_492', 'test_493', 'test_494', 'test_495', 'test_496', 'test_497', 'test_498', 'test_499', 'test_500', 'test_501', 'test_502', 'test_503', 'test_504', 'test_505', 'test_506', 'test_507', 'test_508', 'test_509', 'test_510', 'test_511', 'test_512', 'test_513', 'test_514', 'test_515', 'test_516', 'test_517', 'test_518', 'test_519', 'test_520', 'test_521', 'test_522', 'test_523', 'test_524', 'test_525', 'test_526', 'test_527', 'test_528', 'test_529', 'test_530', 'test_531', 'test_532', 'test_533', 'test_534', 'test_535', 'test_536', 'test_537', 'test_538', 'test_539', 'test_540', 'test_541', 'test_542', 'test_543', 'test_544', 'test_545', 'test_546', 'test_547', 'test_548', 'test_549', 'test_550', 'test_551', 'test_552', 'test_553', 'test_554', 'test_555', 'test_556', 'test_557', 'test_558', 'test_559', 'test_560', 'test_561', 'test_562', 'test_563', 'test_564', 'test_565', 'test_566', 'test_567', 'test_568', 'test_569', 'test_570', 'test_571', 'test_572', 'test_573', 'test_574', 'test_575', 'test_576', 'test_577', 'test_578', 'test_579', 'test_580', 'test_581', 'test_582', 'test_583', 'test_584', 'test_585', 'test_586', 'test_587', 'test_588', 'test_589', 'test_590', 'test_5"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ngpt4_turbo = [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85]\ngpt3_5_turbo = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\nparam_val_dist = [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85]\ninitial_dist = [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85]\nbest_of_three = [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(gpt4_turbo, label='Final Distribution with GPT-4-Turbo')\nax.plot(gpt3_5_turbo, label='Final Distribution with GPT-3.5-Turbo')\nax.plot(param_val_dist, label='0.125 Parameter-Valued Distribution')\nax.plot(initial_dist, label='Initial Distribution')\nax.plot(best_of_three, label='Best-of-Three')\n\n# Set the title and labels\nax.set_title('Mini Crosswords Performance')\nax.set_xlabel('Objective Value')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nlabels = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'Llama2']\naccuracies = [58, 62, 54, 65, 59, 57, 60, 56, 53]\ncolors = ['#e9545b', '#6c7ae0']\n\nfig, ax = plt.subplots(figsize=(10, 3))\nax.bar(labels, accuracies, color=colors)\nax.set_title('Model Accuracy Comparison')\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy (%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the chart\nax.set_title('Your Chart Title Here')\n\n# Set the x-axis label\nax.set_xlabel('A')\n\n# Set the y-axis label\nax.set_ylabel('B')\n\n# Set the x-axis limits\nax.set_xlim(-3.5, 1.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([-3.5, -3.25, -3, -2.75, -2.5, -2.25, -2, -1.75, -1.5, -1.25, -1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1, 1.25, 1.5])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-3.5', '-3.25', '-3', '-2.75', '-2.5', '-2.25', '-2', '-1.75', '-1.5', '-1.25', '-1', '-0.75', '-0.5', '-0.25', '0', '0.25', '0.5', '0.75', '1', '1.25', '1.5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('black')\n\n# Set the color of the annotations\nax.annotate('Annotation 1', xy=(0, 0), xytext=(0, 0),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Set the color of the scatter plot\nax.scatter([0, 1], [0, 1], color='blue')\n\n# Set the color of the bar chart\nax.bar([0, 1], [10, 20], color='green')\n\n# Set the color of the pie chart\nax.pie([10, 20], colors=['red', 'blue'], startangle=90)\n\n# Set the color of the histogram\nax.hist([0, 1, 2, 3, 4, 5], bins=5, color='yellow')\n\n# Set the color of the box plot\nax.boxplot([0, 1, 2, 3, 4, 5], patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the violin plot\nax.violinplot([0, 1, 2, 3, 4, 5], showmeans=True, showmedians=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1], [1, 0]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the stream plot\nax.streamplot([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the quiver plot\nax.quiver([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D scatter plot\nax.scatter3D([0, 1], [0, 1], [0, 1], color='blue')\n\n# Set the color of the 3D bar chart\nax.bar3d([0, 1], [0, 1], [0, 1], [1, 1], [1, 1], [1, 1], color='green')\n\n# Set the color of the 3D pie chart\nax.pie3D([10, 20], colors=['red', 'blue'], startangle=90)\n\n# Set the color of the 3D histogram\nax.hist3D([0, 1, 2, 3, 4, 5], bins=5, color='yellow')\n\n# Set the color of the 3D box plot\nax.boxplot3D([0, 1, 2, 3, 4, 5], patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the 3D violin plot\nax.violinplot3D([0, 1, 2, 3, 4, 5], showmeans=True, showmedians=True)\n\n# Set the color of the 3D heatmap\nax.imshow3D([[0, 1], [1, 0]], cmap='hot', interpolation='nearest')\n\n# Set the color of the 3D contour plot\nax.contour3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D stream plot\nax.streamplot3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D quiver plot\nax.quiver3D([0, 1], [0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D polar plot\nax.polar3D()\n\n# Set the color of the 3D 3D plot\nax.plot_surface3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D scatter plot\nax.scatter3D([0, 1], [0, 1], [0, 1], color='blue')\n\n# Set the color of the 3D 3D bar chart\nax.bar3D([0, 1], [0, 1], [0, 1], [1, 1], [1, 1], [1, 1], color='green')\n\n# Set the color of the 3D 3D pie chart\nax.pie3D([10, 20], colors=['red', 'blue'], startangle=90)\n\n# Set the color of the 3D 3D histogram\nax.hist3D([0, 1, 2, 3, 4, 5], bins=5, color='yellow')\n\n# Set the color of the 3D 3D box plot\nax.boxplot3D([0, 1, 2, 3, 4, 5], patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the 3D 3D violin plot\nax.violinplot3D([0, 1, 2, 3, 4, 5], showmeans=True, showmedians=True)\n\n# Set the color of the 3D 3D heatmap\nax.imshow3D([[0, 1], [1, 0]], cmap='hot', interpolation='nearest')\n\n# Set the color of the 3D 3D contour plot\nax.contour3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D stream plot\nax.streamplot3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D quiver plot\nax.quiver3D([0, 1], [0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D polar plot\nax.polar3D()\n\n# Set the color of the 3D 3D 3D plot\nax.plot_surface3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D scatter plot\nax.scatter3D([0, 1], [0, 1], [0, 1], color='blue')\n\n# Set the color of the 3D 3D 3D bar chart\nax.bar3D([0, 1], [0, 1], [0, 1], [1, 1], [1, 1], [1, 1], color='green')\n\n# Set the color of the 3D 3D 3D pie chart\nax.pie3D([10, 20], colors=['red', 'blue'], startangle=90)\n\n# Set the color of the 3D 3D 3D histogram\nax.hist3D([0, 1, 2, 3, 4, 5], bins=5, color='yellow')\n\n# Set the color of the 3D 3D 3D box plot\nax.boxplot3D([0, 1, 2, 3, 4, 5], patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the 3D 3D 3D violin plot\nax.violinplot3D([0, 1, 2, 3, 4, 5], showmeans=True, showmedians=True)\n\n# Set the color of the 3D 3D 3D heatmap\nax.imshow3D([[0, 1], [1, 0]], cmap='hot', interpolation='nearest')\n\n# Set the color of the 3D 3D 3D contour plot\nax.contour3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D stream plot\nax.streamplot3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D quiver plot\nax.quiver3D([0, 1], [0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D polar plot\nax.polar3D()\n\n# Set the color of the 3D 3D 3D 3D plot\nax.plot_surface3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D 3D scatter plot\nax.scatter3D([0, 1], [0, 1], [0, 1], color='blue')\n\n# Set the color of the 3D 3D 3D 3D bar chart\nax.bar3D([0, 1], [0, 1], [0, 1], [1, 1], [1, 1], [1, 1], color='green')\n\n# Set the color of the 3D 3D 3D 3D pie chart\nax.pie3D([10, 20], colors=['red', 'blue'], startangle=90)\n\n# Set the color of the 3D 3D 3D 3D histogram\nax.hist3D([0, 1, 2, 3, 4, 5], bins=5, color='yellow')\n\n# Set the color of the 3D 3D 3D 3D box plot\nax.boxplot3D([0, 1, 2, 3, 4, 5], patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the 3D 3D 3D 3D violin plot\nax.violinplot3D([0, 1, 2, 3, 4, 5], showmeans=True, showmedians=True)\n\n# Set the color of the 3D 3D 3D 3D heatmap\nax.imshow3D([[0, 1], [1, 0]], cmap='hot', interpolation='nearest')\n\n# Set the color of the 3D 3D 3D 3D contour plot\nax.contour3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D 3D stream plot\nax.streamplot3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D 3D quiver plot\nax.quiver3D([0, 1], [0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D 3D polar plot\nax.polar3D()\n\n# Set the color of the 3D 3D 3D 3D 3D plot\nax.plot_surface3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D 3D 3D scatter plot\nax.scatter3D([0, 1], [0, 1], [0, 1], color='blue')\n\n# Set the color of the 3D 3D 3D 3D 3D bar chart\nax.bar3D([0, 1], [0, 1], [0, 1], [1, 1], [1, 1], [1, 1], color='green')\n\n# Set the color of the 3D 3D 3D 3D 3D pie chart\nax.pie3D([10, 20], colors=['red', 'blue'], startangle=90)\n\n# Set the color of the 3D 3D 3D 3D 3D histogram\nax.hist3D([0, 1, 2, 3, 4, 5], bins=5, color='yellow')\n\n# Set the color of the 3D 3D 3D 3D 3D box plot\nax.boxplot3D([0, 1, 2, 3, 4, 5], patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the 3D 3D 3D 3D 3D violin plot\nax.violinplot3D([0, 1, 2, 3, 4, 5], showmeans=True, showmedians=True)\n\n# Set the color of the 3D 3D 3D 3D 3D heatmap\nax.imshow3D([[0, 1], [1, 0]], cmap='hot', interpolation='nearest')\n\n# Set the color of the 3D 3D 3D 3D 3D contour plot\nax.contour3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D 3D 3D stream plot\nax.streamplot3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D 3D 3D quiver plot\nax.quiver3D([0, 1], [0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D 3D 3D polar plot\nax.polar3D()\n\n# Set the color of the 3D 3D 3D 3D 3D 3D plot\nax.plot_surface3D([0, 1], [0, 1], [[0, 1], [1, 0]])\n\n# Set the color of the 3D 3D 3D 3D 3D 3D scatter plot\nax.scatter3D([0, 1], [0, 1], [0, 1], color='blue')\n\n# Set the color of the 3D 3D 3D 3D 3D 3D bar chart\nax.bar3D([0, 1], [0, 1], [0, 1], [1, 1], [1, 1], [1, 1], color='green')\n\n# Set the color of the 3D 3D 3D 3D 3D 3D pie chart\n"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nshouting_fraction = [0.12, 0.14, 0.16, 0.18, 0.20, 0.22]\nmean = [0.10, 0.12, 0.14, 0.16, 0.18, 0.20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(categories, shouting_fraction, 'bo-', label='Shouting Fraction (Fraction of videos)')\nax.plot(categories, mean, 'ro-', label='Dataset mean')\n\n# Set the limits for x and y axes\nax.set_xlim(-1, len(categories))\nax.set_ylim(0, 0.25)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Variable, Symmetric Error')\n\n# Define the data points for the plot\nx = [0, 5, 10, 15, 20]\ny = [15.49, 17.15, 16.03, 15.45, 14.24]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Voltage (V)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_values = [0.16, 0.18, 0.20, 0.22, 0.24]\nmean_values = [0.26, 0.28, 0.30, 0.32, 0.34]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the incivility values\nax.plot(categories, incivility_values, color='brown', marker='o')\n\n# Plot the mean values\nax.plot(categories, mean_values, color='brown', marker='o')\n\n# Set the title of the plot\nax.set_title('Incivility and Mean Values by Category')\n\n# Set the x-axis label\nax.set_xlabel('Category')\n\n# Set the y-axis label\nax.set_ylabel('Incivility (Fraction of Videos)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [-19.6, -19.5, -19.4, -19.3, -19.2, -19.1]\ny1 = [-19.353 + 0.073, -19.257 + 0.028, -19.257 + 0.028, -19.257 + 0.028, -19.257 + 0.028, -19.257 + 0.028]\ny2 = [-19.394 + 0.018, -19.257 + 0.017, -19.257 + 0.017, -19.257 + 0.017, -19.257 + 0.017, -19.257 + 0.017]\ny3 = [-19.404 + 0.009, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010]\ny4 = [-19.314 + 0.006, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010]\ny5 = [-19.344 + 0.005, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010]\ny6 = [-19.362 + 0.008, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010]\ny7 = [-19.374 + 0.008, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010, -19.257 + 0.010]\ny8 = [-19.380 + 0.000, -19.257 + 0.020, -19.257 + 0.020, -19.257 + 0.020, -19.257 + 0.020, -19.257 + 0.020]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'b-')\nax.plot(x, y2, 'g-')\nax.plot(x, y3, 'r-')\nax.plot(x, y4, 'c-')\nax.plot(x, y5, 'm-')\nax.plot(x, y6, 'y-')\nax.plot(x, y7, 'k-')\nax.plot(x, y8, 'w-')\n\n# Set the x-axis limits\nax.set_xlim(-19.6, -19.1)\n\n# Set the y-axis limits\nax.set_ylim(-19.353, -19.220)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a red line to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a blue circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, color='blue')\nax.add_artist(circle)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Number of speakers')\nax.set_ylabel('Unique speaker count mean')\n\n# Create a scatter plot with random data points\nax.scatter([5, 10, 15], [12, 14, 16], color='blue', label='Unique speaker count mean')\n\n# Create a line plot with random data points\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28], color='red', label='Unique shouter count mean')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Global News Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Date')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Set the x-axis tick labels\nx_labels = ['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT']\nax.set_xticks(range(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Set the y-axis ticks\ny_ticks = [0, 5, 10, 15, 20, 25, 30]\nax.set_yticks(y_ticks)\n\n# Set the y-axis tick labels\ny_labels = ['0.0', '0.5', '1.0', '1.5', '2.0', '2.5', '3.0']\nax.set_yticklabels(y_labels)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis labels\nax.set_xticklabels(x_labels, color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(y_labels, color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Set the title of the plot\nax.set_title('Errorbar upper and lower limits')\n\n# Define the x-axis values\nx = [1, 2, 3, 4, 5]\n\n# Define the y-axis values\ny = [0.5, 1.5, 2.5, 3.5, 4.5]\n\n# Define the error values\nyerr = [0.1, 0.2, 0.3, 0.4, 0.5]\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='r', capsize=5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('variable, symmetric error')\n\n# Create a scatter plot with random data\nx = [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5]\ny = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\nax.scatter(x, y, color='purple')\n\n# Add a horizontal line at y=100\nax.axhline(y=100, color='green', linestyle='-')\n\n# Add a vertical line at x=0.5\nax.axvline(x=0.5, color='red', linestyle='-')\n\n# Set the limits for the x and y axes\nax.set_xlim(0, 4)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Define the data for the plots\nx = [0, 2, 4, 6, 8, 10]\ny1 = [35.87, 3.598, 3.704, 3.923, 4.777, 2.561]\ny2 = [2.957, 4.375, 2.598, 3.777, 1.923, 2.561]\ny3 = [2.261, 2.289, 2.889, 2.044, 2.261, 2.280]\ny4 = [2.237, 2.289, 2.044, 2.261, 2.280, 2.280]\ny5 = [2.237, 2.289, 2.044, 2.261, 2.280, 2.280]\ny6 = [2.237, 2.289, 2.044, 2.261, 2.280, 2.280]\ny7 = [2.237, 2.289, 2.044, 2.261, 2.280, 2.280]\ny8 = [2.237, 2.289, 2.044, 2.261, 2.280, 2.280]\ny9 = [2.237, 2.289, 2.044, 2.261, 2.280, 2.280]\ny10 = [2.237, 2.289, 2.044, 2.261, 2.280, 2.280]\n\n# Plot the data\nax.plot(x, y1, 'g-', label='y1')\nax.plot(x, y2, 'g--', label='y2')\nax.plot(x, y3, 'g-.', label='y3')\nax.plot(x, y4, 'g:', label='y4')\nax.plot(x, y5, 'g^', label='y5')\nax.plot(x, y6, 'gs', label='y6')\nax.plot(x, y7, 'g>', label='y7')\nax.plot(x, y8, 'g<', label='y8')\nax.plot(x, y9, 'gP', label='y9')\nax.plot(x, y10, 'g1', label='y10')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([15, 20, 25, 30, 35])\n\n# Set the x-axis labels\nax.set_xlabel('Time (s)')\n\n# Set the y-axis labels\nax.set_ylabel('Amplitude (m)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Define the data points\nx = [0, 5, 10, 15, 20]\ny = [-2.1, -2.6, -1.2, -1.0, -2.7]\n\n# Plot the data points\nax.plot(x, y, 'o', color='purple')\n\n# Draw horizontal lines between data points\nfor i in range(len(x)-1):\n    ax.hlines(y[i], x[i], x[i+1], colors='purple')\n\n# Draw vertical lines between data points\nfor i in range(len(x)-1):\n    ax.vlines(x[i], y[i], y[i+1], colors='purple')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 20)\n\n# Set the limits of the y-axis\nax.set_ylim(-3, 20)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the colors for the circles\ncolors = ['purple', 'orange', 'cyan', 'pink']\n\n# Draw the circles\nfor i, color in enumerate(colors):\n    circle = plt.Circle((i*2, i*2), radius=1, color=color)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(-1, len(colors)*2+1)\nax.set_ylim(-1, len(colors)*2+1)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the number of points and their positions\nn_points = 100\ntheta = np.linspace(0, 2*np.pi, n_points)\nr = np.random.rand(n_points)\n\n# Plot the points\nax.plot(theta, r, 'o', markersize=5, color='pink')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the pie chart\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n# Create a pie chart with the data\nax.pie(data, startangle=90, radius=1.5, colors='yellow', autopct='%1.1f%%')\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data for the scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\n\n# Create a scatter plot with a color map\nscatter = ax.scatter(x, y, c=y, cmap='viridis')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Set the title of the plot\nax.set_title('Scatter Plot with Color Map')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data for the scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\n\n# Create a scatter plot\nax.scatter(x, y)\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Define the data for the plots\nx = [1, 2, 3, 4, 5]\ny1 = [0.61, 0.74, 0.70, 0.70, 0.57]\ny2 = [0.69, 0.64, 0.67, 0.67, 0.45]\ny3 = [1.00, 0.77, 0.88, 0.62, 0.54]\ny4 = [1.00, 0.72, 0.88, 0.69, 0.54]\ny5 = [1.00, 1.00, 1.00, 1.00, 1.00]\n\n# Plot the data\nax.plot(x, y1, label='CoreNLP', color='orange')\nax.plot(x, y2, label='Stanza', color='red')\nax.plot(x, y3, label='Biaffine', color='purple')\nax.plot(x, y4, label='StackPointer', color='green')\nax.plot(x, y5, label='TowerParse', color='brown')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data for the pie chart\ndata = [50.3, 28.1, 12.0, 0.9, 7.0, 13.4, 16.3]\nlabels = ['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain']\n\n# Create a pie chart with the data\nwedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Add a color bar which maps values to colors.\ncmap = plt.get_cmap(\"OrRd\")\nnorm = plt.Normalize(min(data), max(data))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm, ax=ax)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map for the heatmap\ncmap = 'YlOrBr'\n\n# Create a heatmap with random data\nheatmap = ax.imshow([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(heatmap)\n\n# Set the title of the plot\nax.set_title('Heatmap of Player Performance')\n\n# Set the labels for the x-axis\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['D. Fox', 'T. Haliburton', 'M. Harkless'])\n\n# Set the labels for the y-axis\nax.set_yticks([0, 1, 2])\nax.set_yticklabels(['H. Barnes', 'C. Metu', 'Players'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Live vs Predicted Category Similarity')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Live category')\nax.set_ylabel('Predicted category')\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticks([0, 10, 20, 30, 40])\nax.set_yticks([0, 10, 20, 30, 40])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title_outer()\n\n# Set the color of the background\nax.patch.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Date')\nax.set_ylabel('Stock Price')\n\n# Create a grid\nax.grid(True)\n\n# Define the data\ndates = ['D2', 'D1', 'D0']\nprices = [100, 95, 90]\n\n# Plot the data\nax.plot(dates, prices, 'ro-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Global Stock Market')\n\n# Define the data for the stock market\nx = np.linspace(-1, 1, 100)\ny = np.sin(2 * np.pi * x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim(-1, 1)\n\n# Set the limits of the y-axis\nax.set_ylim(-1, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('mbert\u2192sat Perplexity=7.59', color='white')\n\n# Set the x-axis label\nax.set_xlabel('To layer', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Increase in perplexity', color='white')\n\n# Set the x-axis limits\nax.set_xlim(0, 12)\n\n# Set the y-axis limits\nax.set_ylim(-1, 10)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 13, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(-1, 11, 2))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the x-axis grid lines\nax.grid(axis='x', color='white', linestyle='--')\n\n# Set the y-axis grid lines\nax.grid(axis='y', color='white', linestyle='--')\n\n# Set the x-axis tick color\nax.tick_params(axis='x', colors='white')\n\n# Set the y-axis tick color\nax.tick_params(axis='y', colors='white')\n\n# Set the x-axis label color\nax.label_outer()\n\n# Set the y-axis label color\nax.label_outer()\n\n# Set the x-axis title color\nax.title_outer()\n\n# Set the y-axis title color\nax.title_outer()\n\n# Set the x-axis label rotation\nax.xaxis.set_label_rotation(0)\n\n# Set the y-axis label rotation\nax.yaxis.set_label_rotation(0)\n\n# Set the x-axis label horizontal alignment\nax.xaxis.set_label_coords(0.5, -0.1)\n\n# Set the y-axis label horizontal alignment\nax.yaxis.set_label_coords(-0.1, 0.5)\n\n# Set the x-axis label vertical alignment\nax.xaxis.set_label_coords(0.5, 1.1)\n\n# Set the y-axis label vertical alignment\nax.yaxis.set_label_coords(1.1, 0.5)\n\n# Set the x-axis label font size\nax.xaxis.label.set_fontsize(12)\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the x-axis title font size\nax.title.set_fontsize(14)\n\n# Set the y-axis title font size\nax.title.set_fontsize(14)\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='white')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='white')\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5, color='white')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5, color='white')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5, color='white')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5, color='white')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5, color='white')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', linewidth=0.5, color='white')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='major')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='minor')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='minor')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='both')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='both')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='major', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='major', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='minor', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='minor', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='both', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='both', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='major', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='major', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='minor', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='minor', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', linewidth=0.5, color='white', alpha=0.5, zorder=1, hatch='///', antialiased=True, visible=True, which='both', linestyle='--', linewidth=0.5)\n\n#"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the heatmap\nsales_data = [\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 588, 327],\n    [459, 274, 797, 856, 660],\n    [784, 637, 523, 435, 405],\n    [935, 945, 739, 888, 665],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 888, 665],\n    [292, 949, 365, 142, 711],\n    [729, 651, 797, 650, 498],\n    [863, 700, 644, 650, 403],\n    [935, 945, 739, 88"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Create a color map for the stock prices\ncmap = plt.get_cmap('coolwarm')\n\n# Generate random data for the stock prices\nprices = np.random.rand(50)\n\n# Plot the stock prices\nax.plot(prices, 'o-', color=cmap(prices))\n\n# Set the x-axis labels\nax.set_xticks(range(len(prices)))\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30'])\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Weather')\n\n# Define the data for the scatter plot\nx = np.array([96, 192, 336, 720])\ny = np.array([96, 192, 336, 720])\n\n# Define the colors for the scatter plot\ncolors = ['brown', 'orange', 'green', 'blue']\n\n# Create a scatter plot with the defined data and colors\nscatter = ax.scatter(x, y, c=colors)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(scatter)\ncbar.set_label('Correlation Coefficient')\n\n# Set the limits of the x and y axes\nax.set_xlim(95, 721)\nax.set_ylim(95, 721)\n\n# Set the labels for the x and y axes\nax.set_xlabel('Time')\nax.set_ylabel('Temperature')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20, 8))\n\n# Set the title of the plot\nax.set_title('a) Role voting in the Werewolf game')\n\n# Create a color map for the players\ncmap = plt.get_cmap('Blues')\n\n# Create a list of player names\nplayers = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\n\n# Create a list of player percentages\npercentages = [15.7, 28.1, 26.0, 14.5, 10.5]\n\n# Create a list of colors for each player\ncolors = [cmap(i/len(players)) for i in range(len(players))]\n\n# Create a bar chart for the player percentages\nax.bar(players, percentages, color=colors)\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second subplot\nax2.set_title('b) Final state of roles')\n\n# Create a list of player percentages for the second subplot\npercentages2 = [31.5, 4.3, 17.4, 2.5, 27.1, 17.3, 35.3, 2.2, 4.0, 26.0, 8.0, 32.5, 25.0, 1.0, 0.8, 1.0, 55.3, 10.0, 7.8, 22.9, 55.0, 13.1, 10.0, 14.9, 20.0, 13.0, 4.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Define the categories and their corresponding values\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nvalues = [169, 115, 219, 67, 177]\n\n# Create a bar chart with the categories and values\nax.bar(categories, values, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Response Action Category')\n\n# Set the y-axis label\nax.set_ylabel('Number of Questions')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\ndata = {\n    'angry': [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.00, 0.00, 0.10],\n    'sad': [0.00, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00, 0.00, 0.00],\n    'disgust': [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'contempt': [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'fear': [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'neutral': [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'surprise': [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'happy': [0.12, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the data\nfor emotion, values in data.items():\n    ax.plot(values, label=emotion)\n\n# Set the title and labels\nax.set_title('Emotion Intensity Over Time')\nax.set_xlabel('Time')\nax.set_ylabel('Intensity')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Define the categories and their corresponding percentages\ncategories = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\npercentages = [15.7, 28.1, 26, 4.5, 10.5]\n\n# Create a bar chart with the categories and percentages\nbars = ax.bar(categories, percentages, color='blue')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Voter')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('LLaMA')\n\n# Create a color map for the heatmap\ncmap = plt.cm.RdYlGn\n\n# Create a heatmap with random data\nheatmap = ax.imshow(np.random.rand(5, 5), cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(heatmap)\n\n# Set the labels for the x-axis\nx_labels = ['Baseline', 'Reversed Order', 'Reversed IDs']\nax.set_xticks(np.arange(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Set the labels for the y-axis\ny_labels = ['#17', '#24', '#3', '#10', '#13']\nax.set_yticks(np.arange(len(y_labels)))\nax.set_yticklabels(y_labels)\n\n# Set the limits for the x-axis\nax.set_xlim(-0.5, len(x_labels) - 0.5)\n\n# Set the limits for the y-axis\nax.set_ylim(-0.5, len(y_labels) - 0.5)\n\n# Set the tick parameters for the x-axis\nax.tick_params(axis='x', rotation=45)\n\n# Set the tick parameters for the y-axis\nax.tick_params(axis='y', rotation=0)\n\n# Set the tick parameters for the heatmap\nheatmap.set_edgecolor('face')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Date', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Price', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nax.set_xticklabels(['Jan 1', 'Jan 2', 'Jan 3', 'Jan 4', 'Jan 5', 'Jan 6', 'Jan 7', 'Jan 8', 'Jan 9', 'Jan 10'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F5F5DC')\n\n# Set the title of the plot\nax.set_title('Harvest Data by Year', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Year', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Harvest [t/year]', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(2010, 2020)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(2010, 2021, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 7, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6'])\n\n# Set the x-axis grid lines\nax.grid(axis='x', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid lines\nax.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_color('#8B4513')\n\n# Set the y-axis label parameters\nax.yaxis.label.set_color('#8B4513')\n\n# Set the x-axis tick label parameters\nax.tick_params(axis='x', colors='#8B4513')\n\n# Set the y-axis tick label parameters\nax.tick_params(axis='y', colors='#8B4513')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='#D2B48C', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='#D2B48C', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label horizontal alignment\nax.tick_params(axis='x', ha='right')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='center')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label vertical alignment\nax.tick_params(axis='y', va='center')\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', fontweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', fontweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', fontStyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', fontStyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', fontFamily='Arial')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', fontFamily='Arial')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', fontSize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', fontSize=12)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', color='#8B4513')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', color='#8B4513')\n\n# Set the x-axis tick label background color\nax.tick_params(axis='x', labelbackgroundcolor='#F5F5DC')\n\n# Set the y-axis tick label background color\nax.tick_params(axis='y', labelbackgroundcolor='#F5F5DC')\n\n# Set the x-axis tick label border color\nax.tick_params(axis='x', labelbordercolor='#8B4513')\n\n# Set the y-axis tick label border color\nax.tick_params(axis='y', labelbordercolor='#8B4513')\n\n# Set the x-axis tick label padding\nax.tick_params(axis='x', labelpad=5)\n\n# Set the y-axis tick label padding\nax.tick_params(axis='y', labelpad=5)\n\n# Set the x-axis tick label margin\nax.tick_params(axis='x', labelmargin=5)\n\n# Set the y-axis tick label margin\nax.tick_params(axis='y', labelmargin=5)\n\n# Set the x-axis tick label spacing\nax.tick_params(axis='x', labelspacing=5)\n\n# Set the y-axis tick label spacing\nax.tick_params(axis='y', labelspacing=5)\n\n# Set the x-axis tick label rotation mode\nax.tick_params(axis='x', rotationMode='anchor')\n\n# Set the y-axis tick label rotation mode\nax.tick_params(axis='y', rotationMode='anchor')\n\n# Set the x-axis tick label vertical alignment mode\nax.tick_params(axis='x', verticalalignment='baseline')\n\n# Set the y-axis tick label vertical alignment mode\nax.tick_params(axis='y', verticalalignment='baseline')\n\n# Set the x-axis tick label horizontal alignment mode\nax.tick_params(axis='x', horizontalalignment='left')\n\n# Set the y-axis tick label horizontal alignment mode\nax.tick_params(axis='y', horizontalalignment='right')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', fontstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', fontstretch='normal')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', fontvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', fontvariant='normal')\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', fontweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', fontweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', fontStyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', fontStyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', fontFamily='Arial')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', fontFamily='Arial')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', fontSize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', fontSize=12)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', color='#8B4513')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', color='#8B4513')\n\n# Set the x-axis tick label background color\nax.tick_params(axis='x', labelbackgroundcolor='#F5F5DC')\n\n# Set the y-axis tick label background color\nax.tick_params(axis='y', labelbackgroundcolor='#F5F5DC')\n\n# Set the x-axis tick label border color\nax.tick_params(axis='x', labelbordercolor='#8B4513')\n\n# Set the y-axis tick label border color\nax.tick_params(axis='y', labelbordercolor='#8B4513')\n\n# Set the x-axis tick label padding\nax.tick_params(axis='x', labelpad=5)\n\n# Set the y-axis tick label padding\nax.tick_params(axis='y', labelpad=5)\n\n# Set the x-axis tick label margin\nax.tick_params(axis='x', labelmargin=5)\n\n# Set the y-axis tick label margin\nax.tick_params(axis='y', labelmargin=5)\n\n# Set the x-axis tick label spacing\nax.tick_params(axis='x', labelspacing=5)\n\n# Set the y-axis tick label spacing\nax.tick_params(axis='y', labelspacing=5)\n\n# Set the x-axis tick label rotation mode\nax.tick_params(axis='x', rotationMode='anchor')\n\n# Set the y-axis tick label rotation mode\nax.tick_params(axis='y', rotationMode='anchor')\n\n# Set the x-axis tick label vertical alignment mode\nax.tick_params(axis='x', verticalalignment='baseline')\n\n# Set the y-axis tick label vertical alignment mode\nax.tick_params(axis='y', verticalalignment='baseline')\n\n# Set the x-axis tick label horizontal alignment mode\nax.tick_params(axis='x', horizontalalignment='left')\n\n# Set the y-axis tick label horizontal alignment mode\nax.tick_params(axis='y', horizontalalignment='right')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', fontstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', fontstretch='normal')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', fontvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', fontvariant='normal')\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', fontweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', fontweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', fontStyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', fontStyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', fontFamily='Arial')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', fontFamily='Arial')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', fontSize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', fontSize=12)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', color='#8B4513')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', color='#8B4513')\n\n# Set the x-axis tick label background color\nax.tick_params(axis='x', labelbackgroundcolor='#F5F5DC')\n\n# Set the y-axis tick label background color\nax.tick_params(axis='y', labelbackgroundcolor='#F5F5DC')\n\n# Set the x-axis tick label border color\nax.tick_params(axis='x', labelbordercolor='#8B4513')\n\n# Set the y-axis tick label border color\nax.tick_params(axis='y', labelbordercolor='#8B4513')\n\n# Set the x-axis tick label padding\nax.tick_params(axis='x', labelpad=5)\n\n# Set the y-axis tick label padding\nax.tick_params(axis='y', labelpad=5)\n\n# Set the x-axis tick label margin\nax.tick_params(axis='x', labelmargin=5)\n\n# Set the y-axis tick label margin\nax.tick_params(axis='y', labelmargin=5)\n\n# Set the x-axis tick label spacing\nax.tick_params(axis='x', labelspacing=5)\n\n# Set the y-axis tick label spacing\nax.tick_params(axis='y', labelspacing=5)\n\n# Set the x-axis tick label rotation mode\nax.tick_params(axis='x', rotationMode='anchor')\n\n# Set the y-axis tick label rotation mode\nax.tick_params(axis='y', rotationMode='anchor')\n\n# Set the x-axis tick label vertical alignment mode\nax.tick_params(axis='x', verticalalignment='baseline')\n\n# Set the y-axis tick label vertical alignment mode\nax.tick_params(axis='y', verticalalignment='baseline')\n\n# Set the x-axis tick label horizontal alignment mode\nax.tick_params(axis='x', horizontalalignment='left')\n\n# Set the y-axis tick label horizontal alignment mode\nax.tick_params(axis='y', horizontalalignment='right')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', fontstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', fontstretch='normal')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', fontvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', fontvariant='normal')\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', fontweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', fontweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', fontStyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', fontStyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', fontFamily='Arial')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', fontFamily='Arial')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', fontSize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', fontSize=12)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', color='#8B4513')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', color='#8B4513')\n\n# Set the x-axis tick label background color\nax.tick_params(axis='x', labelbackgroundcolor='#F5F5DC')\n\n# Set the y-axis tick label background color\nax.tick_params(axis='y', labelbackgroundcolor='#F5F5DC')\n\n# Set the x-axis tick label border color\nax.tick_params(axis='x', labelbordercolor='#8B4513')\n\n# Set the y-axis tick label border color\nax.tick_params(axis='y', labelbordercolor='#8B4513')\n\n# Set the x-axis tick label padding\nax.tick_params(axis='x', labelpad=5)\n\n# Set the y-axis tick label padding\nax.tick_params(axis='y', labelpad=5)\n\n# Set the x-axis tick label margin\nax.tick_params(axis='x', labelmargin=5)\n\n# Set the y-axis tick label margin\nax.tick_params(axis='y', labelmargin=5)\n\n# Set the x-axis tick label spacing\nax.tick_params(axis='x', labelspacing=5)\n\n# Set the y-axis tick label spacing\nax.tick_params(axis='y', labelspacing=5)\n\n# Set the x-axis tick label rotation mode\nax.tick_params(axis='x', rotationMode='anchor')\n\n# Set the y-axis tick label rotation mode\nax.tick_params(axis='y', rotationMode='anchor')\n\n# Set the x-axis tick label vertical alignment mode\nax.tick_params(axis='x', verticalalignment='baseline')\n\n# Set the y-axis tick label vertical alignment mode\nax.tick_params(axis='y', verticalalignment='baseline')\n\n# Set the x-axis tick label horizontal alignment mode\nax.tick_params(axis='x', horizontalalignment='left')\n\n# Set the y-axis tick label horizontal alignment mode\nax.tick_params(axis='y', horizontalalignment='right')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', fontstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', fontstretch='normal')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', fontvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', fontvariant='normal')\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', fontweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', fontweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', fontStyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', fontStyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', fontFamily='Arial')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', fontFamily='Arial')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', fontSize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', fontSize=12)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', color='#8B4513')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', color='#8B4513')\n\n# Set the x-axis tick label background color\nax.tick_params(axis='x', labelbackgroundcolor='#F5F5DC')\n\n# Set the y-axis tick label background color\nax.tick_params(axis='y', labelbackgroundcolor='#F5F5DC')\n\n# Set the x-axis tick label border color\nax.tick_params(axis='x', labelbordercolor='#8B4513')\n\n# Set the y-axis tick label border color\nax.tick_params(axis='y', labelbordercolor='#8B4513')\n\n# Set the x-axis tick label padding\nax.tick_params(axis='x', labelpad=5)\n\n# Set the y-axis tick label padding\nax.tick_params(axis='y', labelpad=5)\n\n# Set the x-axis tick label margin\nax.tick_params(axis='x', labelmargin=5)\n\n# Set the y-axis tick label margin\nax.tick_params(axis='y', labelmargin=5)\n\n# Set the x-axis tick label spacing\nax.tick_params(axis='x', labelspacing=5)\n\n# Set the y-axis tick label spacing\nax.tick_params(axis='y', labelspacing=5)\n\n# Set the x-axis tick label rotation mode\nax.tick_params(axis='x', rotationMode='anchor')\n\n# Set the y-axis tick label rotation mode\nax.tick_params(axis='y', rotationMode='anchor')\n\n# Set the x-axis tick label vertical alignment mode\nax.tick_params(axis='x', verticalalignment='baseline')\n\n# Set the y-axis tick label vertical alignment mode\nax.tick_params(axis='y', verticalalignment='baseline')\n\n# Set the x-axis tick label horizontal alignment mode\nax.tick_params(axis='x', horizontalalignment='left')\n\n# Set the y-axis tick label horizontal alignment mode\nax.tick_params(axis='y', horizontalalignment='right')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', fontstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', fontstretch='normal')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', fontvariant='normal')\n\n# Set the y-axis tick label font variant\nax"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Crops and their characteristics')\n\n# Define the data for the crops\ncrops = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvest = [1.2, 1.7, 1.3, 1.4, 1.2, 0.1]\nquality = [0.8, 0.0, 0.0, 0.0, 0.0, 0.0]\ncoefficient = [0.9, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Create a bar chart with the data\nbars = ax.bar(crops, harvest, color='yellow')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Add labels to the x-axis\nax.set_xlabel('Crops')\nax.set_ylabel('Harvest [t/ha]')\n\n# Add a legend to the plot\nax.legend(['Harvest'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Create a grid of subplots\ngs = fig.add_gridspec(4, 4)\n\n# Add a subplot for each image\nax1 = fig.add_subplot(gs[0, :2])\nax2 = fig.add_subplot(gs[0, 2:])\nax3 = fig.add_subplot(gs[1, :2])\nax4 = fig.add_subplot(gs[1, 2:])\nax5 = fig.add_subplot(gs[2, :2])\nax6 = fig.add_subplot(gs[2, 2:])\nax7 = fig.add_subplot(gs[3, :2])\nax8 = fig.add_subplot(gs[3, 2:])\n\n# Display the images\nax1.imshow(np.random.rand(10, 10), cmap='Greens')\nax2.imshow(np.random.rand(10, 10), cmap='Blues')\nax3.imshow(np.random.rand(10, 10), cmap='Reds')\nax4.imshow(np.random.rand(10, 10), cmap='Greens')\nax5.imshow(np.random.rand(10, 10), cmap='Blues')\nax6.imshow(np.random.rand(10, 10), cmap='Reds')\nax7.imshow(np.random.rand(10, 10), cmap='Greens')\nax8.imshow(np.random.rand(10, 10), cmap='Blues')\n\n# Set the title of each subplot\nax1.set_title('None')\nax2.set_title('none')\nax3.set_title('nearest')\nax4.set_title('bilinear')\nax5.set_title('bicubic')\nax6.set_title('spline16')\nax7.set_title('spline36')\nax8.set_title('hanning')\n\n# Remove the x and y ticks\nax1.set_xticks([])\nax1.set_yticks([])\nax2.set_xticks([])\nax2.set_yticks([])\nax3.set_xticks([])\nax3.set_yticks([])\nax4.set_xticks([])\nax4.set_yticks([])\nax5.set_xticks([])\nax5.set_yticks([])\nax6.set_xticks([])\nax6.set_yticks([])\nax7.set_xticks([])\nax7.set_yticks([])\nax8.set_xticks([])\nax8.set_yticks([])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Create a color map for the rectangles\ncmap = plt.get_cmap('tab20')\n\n# Create a list of colors for the rectangles\ncolors = [cmap(i) for i in range(20)]\n\n# Create a list of labels for the rectangles\nlabels = ['Rectangle 1', 'Rectangle 2', 'Rectangle 3', 'Rectangle 4', 'Rectangle 5']\n\n# Create a list of values for the rectangles\nvalues = [1, 2, 3, 4, 5]\n\n# Create a list of colors for the bars\nbar_colors = [colors[i] for i in range(len(values))]\n\n# Create a bar chart with the values and colors\nbars = ax.bar(labels, values, color=bar_colors)\n\n# Add a label to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis limits\nax.set_xlim(-1, len(labels)+1)\n\n# Set the y-axis limits\nax.set_ylim(0, max(values)*1.1)\n\n# Set the x-axis ticks\nax.set_xticks(range(len(labels)))\n\n# Set the x-axis labels\nax.set_xticklabels(labels)\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Set the x-axis label\nax.set_xlabel('Labels')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sales of vendors (in tons/year)')\n\n# Define the data for the x-axis\nx = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\n\n# Define the data for the y-axis\ny = [1.5, 2.8, 1.0, 0.7, 0.9, 1.2, 0.3]\n\n# Define the colors for the bars\ncolors = ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'darkred']\n\n# Create a bar chart with the data\nbars = ax.bar(x, y, color=colors)\n\n# Add labels to each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Degree of acceptance of a product')\n\n# Define the data for the bar chart\ncategories = ['High', 'Medium', 'Low']\nvalues = [42, 38, 55]\n\n# Create a bar chart with the data\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bottle Neck Distance vs Wasserstein Distance')\n\n# Create a color map for the scatter plot\ncmap = plt.cm.RdYlGn\n\n# Generate random data points\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Create a scatter plot with the color map\nscatter = ax.scatter(x, y, c=y, cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(scatter)\ncbar.set_label('Wasserstein Distance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('ROC\\'s AUC')\n\n# Define the data for the plot\nx = np.linspace(0, 12, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Timeshift')\n\n# Set the y-axis label\nax.set_ylabel('AUC')\n\n# Set the color of the plot\nax.set_facecolor('lightblue')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.y"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data for the bar chart\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation', 'Last']\ncounts = [10, 20, 30, 40, 50, 60]\ncolors = ['green', 'blue', 'red', 'yellow', 'purple', 'orange']\n\n# Create the bar chart\nax.bar(categories, counts, color=colors)\n\n# Set the title and labels\nax.set_title('Category Counts')\nax.set_xlabel('Categories')\nax.set_ylabel('Counts')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the background color of the plot\nax.set_facecolor('#1a1a1a')\n\n# Set the title of the plot\nax.set_title('Live Cricket Scores', fontsize=24, color='#f5f5f5')\n\n# Set the x-axis label\nax.set_xlabel('Innings', fontsize=18, color='#f5f5f5')\n\n# Set the y-axis label\nax.set_ylabel('Score', fontsize=18, color='#f5f5f5')\n\n# Set the grid lines\nax.grid(True, color='#333333')\n\n# Set the tick labels\nax.set_xticks([0, 1, 2, 3])\nax.set_yticks(np.arange(0, 350, 50))\nax.set_xticklabels(['0', '1', '2', '3'], color='#f5f5f5')\nax.set_yticklabels(np.arange(0, 350, 50), color='#f5f5f5')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines\nax.grid(color='#333333')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#f5f5f5')\n\n# Set the color of the plot area\nax.set_facecolor('#1a1a1a')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='#f5f5f5')\n\n# Set the color of the x-axis label\nax.set_xlabel('Innings', color='#f5f5f5')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='#f5f5f5')\n\n# Set the color of the grid lines"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbrands = ['BabelStream', 'PerfMutter', 'Corona', 'Frontier']\nmodels = ['Summit', 'Rajaa', 'Omp', 'Oacc', 'Sycl', 'Native Port']\nmemory_bandwidths = [876, 136, 435, 534, 322, 804]\nprices = [750, 1737, 742, 375, 750, 1825]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the memory bandwidth data\nax.barh(brands, memory_bandwidths, color='blue')\nax.set_xlabel('Memory Bandwidth (GB/s)')\nax.set_title('BabelStream triad Average Memory Bandwidth')\n\n# Plot the price data\nax2 = ax.twiny()\nax2.plot(prices, models, 'ro-')\nax2.set_xlabel('Price ($)')\nax2.set_xticks(prices)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Correlation Coefficients')\n\n# Define the data for the heatmap\ndata = np.array([\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.72, 0.71, 0.82],\n    [0.90, 1.00, 0.93, 0.92, 0.67, 0.69, 0.72, 0.75, 0.82],\n    [0.89, 0.93, 1.00, 0.95, 0.66, 0.69, 0.72, 0.75, 0.82],\n    [0.88, 0.92, 0.95, 1.00, 0.68, 0.69, 0.72, 0.75, 0.82],\n    [0.64, 0.67, 0.66, 0.68, 1.00, 0.70, 0.72, 0.75, 0.82],\n    [0.65, 0.69, 0.69, 0.69, 0.70, 1.00, 0.74, 0.77, 0.82],\n    [0.72, 0.72, 0.72, 0.72, 0.74, 0.74, 1.00, 0.79, 0.82],\n    [0.71, 0.75, 0.75, 0.75, 0.75, 0.75, 0.79, 1.00, 0.82],\n    [0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 1.00]\n])\n\n# Create a heatmap with the data\nheatmap = ax.imshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add a colorbar to the heatmap\ncbar = fig.colorbar(heatmap)\n\n# Set the labels for the x-axis\nx_labels = ['en', 'fr', 'es', 'pt', 'bn', 'ur', 'hi', 'ar', 'zh']\nax.set_xticks(np.arange(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Set the labels for the y-axis\ny_labels = ['en', 'fr', 'es', 'pt', 'bn', 'ur', 'hi', 'ar', 'zh']\nax.set_yticks(np.arange(len(y_labels)))\nax.set_yticklabels(y_labels)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL']\ny = [0.19, 0.19, 0.62, 0.52, 0.50, 0.39, 0.20, 0.06]\ny1 = [0.16, 0.26, 0.53, 0.34, 0.39, 0.24, 0.20, 0.06]\ny2 = [0.03, 0.10, 0.24, 0.03, 0.06, 0.10, 0.06, 0.07]\ny3 = [0.24, 0.28, 0.26, 0.26, 0.20, 0.21, 0.20, 0.26]\ny4 = [0.26, 0.26, 0.26, 0.26, 0.20, 0.20, 0.20, 0.21]\ny5 = [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y, label='LexRank')\nax.plot(x, y1, label='ROUGE')\nax.plot(x, y2, label='BERTScore')\nax.plot(x, y3, label='SimCSE')\nax.plot(x, y4, label='PMI')\nax.plot(x, y5, label='GPT-3.5')\n\n# Set the title and labels\nax.set_title('Performance Metrics of Different Models')\nax.set_xlabel('Model')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#212121')\n\n# Set the title of the plot\nax.set_title('pythia-1b', color='#9e9e9e')\n\n# Set the x-axis label\nax.set_xlabel('Layers', color='#9e9e9e')\n\n# Set the y-axis label\nax.set_ylabel('Time', color='#9e9e9e')\n\n# Set the x-axis limits\nax.set_xlim(0, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 15)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 16, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 16, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the grid lines\nax.grid(True, color='#424242')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('#424242')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('#424242')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('#424242')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('#424242')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#9e9e9e')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#9e9e9e')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', labelcolor='#9e9e9e')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', labelcolor='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='#424242')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='#424242')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'], color='#9e9e9e')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3',"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the color of the background\nax.set_facecolor('#E6F2FF')\n\n# Set the color of the grid lines\nax.grid(color='#D3D3D3', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#4B4B4B')\n\n# Set the color of the title\nax.set_title('Bookstore Sales Data', color='#4B4B4B')\n\n# Set the color of the x-axis label\nax.set_xlabel('Test Winning Distance', color='#4B4B4B')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Pairs', color='#4B4B4B')\n\n# Set the color of the legend\nax.legend(loc='upper left', frameon=False, fontsize='small')\n\n# Set the color of the text\nax.text(0.05, 0.95, 'XSum', transform=ax.transAxes, color='#4B4B4B')\nax.text(0.05, 0.90, 'CNN/DailyMail', transform=ax.transAxes, color='#90EE90')\nax.text(0.05, 0.85, 'NarrativeQA', transform=ax.transAxes, color='#FFB6C1')\nax.text(0.05, 0.80, 'NaturalQuestions - Closed-book', transform=ax.transAxes, color='#FFD700')\nax.text(0.05, 0.75, 'NaturalQuestions - Open-book', transform=ax.transAxes, color='#FFD700')\nax.text(0.05, 0.70, 'QuAC', transform=ax.transAxes, color='#E6F2FF')\n\n# Set the color of the bars\nax.bar([0.1, 0.3, 0.5, 0.7], [100, 90, 80, 70], color='#4B4B4B', width=0.2)\nax.bar([0.9, 1.1, 1.3, 1.5], [60, 50, 40, 30], color='#4B4B4B', width=0.2)\nax.bar([1.7, 1.9, 2.1, 2.3], [20, 10, 0, 0], color='#4B4B4B', width=0.2)\n\n# Set the color of the scatter plot\nax.scatter([0.2, 0.4, 0.6, 0.8], [95, 85, 75, 65], color='#4B4B4B', s=100)\nax.scatter([1.0, 1.2, 1.4, 1.6], [55, 45, 35, 25], color='#4B4B4B', s=100)\nax.scatter([1.8, 2.0, 2.2, 2.4], [15, 5, 0, 0], color='#4B4B4B', s=100)\n\n# Set the color of the line plot\nax.plot([0.1, 0.3, 0.5, 0.7], [100, 90, 80, 70], color='#4B4B4B', marker='o')\nax.plot([0.9, 1.1, 1.3, 1.5], [60, 50, 40, 30], color='#4B4B4B', marker='o')\nax.plot([1.7, 1.9, 2.1, 2.3], [20, 10, 0, 0], color='#4B4B4B', marker='o')\n\n# Set the color of the histogram\nax.hist([0.1, 0.3, 0.5, 0.7], bins=[0, 0.2, 0.4, 0.6, 0.8, 1.0], color='#4B4B4B', alpha=0.5)\nax.hist([0.9, 1.1, 1.3, 1.5], bins=[0, 0.2, 0.4, 0.6, 0.8, 1.0], color='#4B4B4B', alpha=0.5)\nax.hist([1.7, 1.9, 2.1, 2.3], bins=[0, 0.2, 0.4, 0.6, 0.8, 1.0], color='#4B4B4B', alpha=0.5)\n\n# Set the color of the pie chart\nax.pie([100, 90, 80, 70], colors=['#4B4B4B', '#4B4B4B', '#4B4B4B', '#4B4B4B'], startangle=90, radius=0.5, autopct='%1.1f%%')\nax.pie([60, 50, 40, 30], colors=['#4B4B4B', '#4B4B4B', '#4B4B4B', '#4B4B4B'], startangle=90, radius=0.4, autopct='%1.1f%%')\nax.pie([20, 10, 0, 0], colors=['#4B4B4B', '#4B4B4B', '#4B4B4B', '#4B4B4B'], startangle=90, radius=0.3, autopct='%1.1f%%')\n\n# Set the color of the box plot\nax.boxplot([100, 90, 80, 70], positions=[0.1], patch_artist=True, boxprops=dict(facecolor='#4B4B4B'))\nax.boxplot([60, 50, 40, 30], positions=[0.9], patch_artist=True, boxprops=dict(facecolor='#4B4B4B'))\nax.boxplot([20, 10, 0, 0], positions=[1.7], patch_artist=True, boxprops=dict(facecolor='#4B4B4B'))\n\n# Set the color of the violin plot\nax.violinplot([100, 90, 80, 70], positions=[0.1], showmeans=True, showmedians=True, showextrema=True)\nax.violinplot([60, 50, 40, 30], positions=[0.9], showmeans=True, showmedians=True, showextrema=True)\nax.violinplot([20, 10, 0, 0], positions=[1.7], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0]], cmap='Blues')\n\n# Set the color of the contour plot\nax.contour([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], colors=['#4B4B4B'])\n\n# Set the color of the contourf plot\nax.contourf([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], colors=['#4B4B4B'])\n\n# Set the color of the streamplot\nax.streamplot([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], color='#4B4B4B')\n\n# Set the color of the quiver plot\nax.quiver([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], [10, 10, 10, 10], color='#4B4B4B')\n\n# Set the color of the polar plot\nax.polar([0.1, 0.3, 0.5, 0.7], [100, 90, 80, 70], color='#4B4B4B')\n\n# Set the color of the 3D plot\nax.plot_surface([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], color='#4B4B4B')\n\n# Set the color of the 3D scatter plot\nax.scatter([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], color='#4B4B4B')\n\n# Set the color of the 3D bar plot\nax.bar3d([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], 1, 1, 1, color='#4B4B4B')\n\n# Set the color of the 3D contour plot\nax.contour3D([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], color='#4B4B4B')\n\n# Set the color of the 3D contourf plot\nax.contourf3D([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], color='#4B4B4B')\n\n# Set the color of the 3D streamplot\nax.streamplot3D([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], color='#4B4B4B')\n\n# Set the color of the 3D quiver plot\nax.quiver3D([100, 90, 80, 70], [60, 50, 40, 30], [20, 10, 0, 0], [10, 10, 10, 10], [10, 10, 10, 10], [10, 10, 10, 10], color='#4B4B4B')\n\n# Set the color of the 3D polar plot\nax.polar3D([0.1, 0.3, 0.5, 0.7], [100, 90, 80, 70], color='#4B4B4B')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create some data\nnp.random.seed(42)\nx = np.linspace(-1, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot the data\nax.plot(x, y1, label='Inter Class', color='#6699cc')\nax.plot(x, y2, label='Intra Class', color='#99cc99')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis limits\nax.set_xlim(-1, 1)\n\n# Set the y-axis limits\nax.set_ylim(-1, 1)\n\n# Set the title\nax.set_title('Cosine Similarity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('a) Baseline')\n\n# Create a scatter plot with random data points\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='orange')\n\n# Set the color of the scatter plot points\nax.scatter(x, y, c='blue"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(figsize=(7, 8))\n\n# Set the title of the plot\nax.set_title('MATHWELL')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the x-axis label\nax.set_xlabel('FKGL')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the limits of the x-axis\nax.set_xlim([0, 10])\n\n# Set the limits of the y-axis\nax.set_ylim([0, 1])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Desert Animals in the Wild')\n\n# Set the x-axis label\nax.set_xlabel('Animal Weight (Tons)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Define the data for the plot\nx = [0.02, 0.04, 0.06, 0.08]\ny = [1000, 1000, 1000, 1000]\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the color of the plot\nax.set_facecolor('#f7e9d3')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--')\n\n# Set the color of the labels\nax.set_xticklabels(['Camels', 'Kangaroos'], color='#0080ff')\nax.set_yticklabels(['1000', '1000', '1000', '1000'], color='#ffa500')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Frequency')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Number of Measurements')\n\n# Create a histogram with 10 bins\nax.hist([2.5, 3.2, 4.1, 5.6, 6.7, 7.8, 8.9, 9.0, 10.1, 11.2], bins=10)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny = [100, 90, 80, 70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f5f5f5')\n\n# Set the title of the plot\nax.set_title('Book Sales Data', fontsize=24)\n\n# Set the x-axis label\nax.set_xlabel('Test Winning Distance', fontsize=18)\n\n# Set the y-axis label\nax.set_ylabel('Number of Pairs', fontsize=18)\n\n# Set the x-axis tick labels\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticks([0, 20, 40, 60, 80, 100, 120, 140])\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='blue')\n\n# Set the color of the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Set the x-axis label\nax.set_xlabel('Number of Nominations')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Define the categories and their frequencies\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\nfrequencies = [15, 17, 16, 14, 13]\n\n# Create a histogram with the specified parameters\nax.hist(frequencies, bins=5, color='orange')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 7))\nax.set_title('MNIST - Defect Detection')\nax.set_xlabel('Defect Type')\nax.set_ylabel('Number of Defects')\n\n# Create a bar chart with random data\ndefect_types = ['Non-defective', 'Defective']\ndefect_counts = [np.random.randint(200, 400), np.random.randint(200, 400)]\nax.bar(defect_types, defect_counts, color='blue')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\ncolors = np.random.rand(50)\narea = np.pi * (15 * np.random.rand(50))**2\nax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Create a histogram with random data\ndata = np.random.normal(0.1, 0.05, 1000)\nax.hist(data, bins=30, color='orange')\n\n# Create a pie chart with random data\nlabels = ['Non-defective', 'Defective']\nsizes = [np.random.randint(200, 400), np.random.randint(200, 400)]\nax.pie(sizes, labels=labels, colors=['green', 'red'], autopct='%1.1f%%')\n\n# Create a line plot with random data\nx = np.linspace(0, 1, 100)\ny = np.sin(2 * np.pi * x)\nax.plot(x, y, color='purple')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Create a heatmap with random data\ndata = np.random.rand(10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D scatter plot with random data\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter(x, y, z, c='r', marker='o')\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='viridis')\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z, color='b')\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z, 50, cmap='Greens')\n\n# Create a 3D contourf plot with random data\nax.contourf(X, Y, Z, 50, cmap='Blues')\n\n# Create a 3D quiver plot with random data\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nw = np.random.rand(10, 10)\nax.quiver(u, v, w)\n\n# Create a 3D streamplot with random data\nax.streamplot(u, v, w)\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 6)\ny = np.arange(1, 6)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter3D(x, y, z, c='g', marker='o')\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z, color='b')\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z, 50, cmap='Greens')\n\n# Create a 3D contourf plot with random data\nax.contourf(X, Y, Z, 50, cmap='Blues')\n\n# Create a 3D quiver plot with random data\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nw = np.random.rand(10, 10)\nax.quiver(u, v, w)\n\n# Create a 3D streamplot with random data\nax.streamplot(u, v, w)\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 6)\ny = np.arange(1, 6)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter3D(x, y, z, c='g', marker='o')\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z, color='b')\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z, 50, cmap='Greens')\n\n# Create a 3D contourf plot with random data\nax.contourf(X, Y, Z, 50, cmap='Blues')\n\n# Create a 3D quiver plot with random data\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nw = np.random.rand(10, 10)\nax.quiver(u, v, w)\n\n# Create a 3D streamplot with random data\nax.streamplot(u, v, w)\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 6)\ny = np.arange(1, 6)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter3D(x, y, z, c='g', marker='o')\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z, color='b')\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z, 50, cmap='Greens')\n\n# Create a 3D contourf plot with random data\nax.contourf(X, Y, Z, 50, cmap='Blues')\n\n# Create a 3D quiver plot with random data\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nw = np.random.rand(10, 10)\nax.quiver(u, v, w)\n\n# Create a 3D streamplot with random data\nax.streamplot(u, v, w)\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 6)\ny = np.arange(1, 6)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter3D(x, y, z, c='g', marker='o')\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z, color='b')\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z, 50, cmap='Greens')\n\n# Create a 3D contourf plot with random data\nax.contourf(X, Y, Z, 50, cmap='Blues')\n\n# Create a 3D quiver plot with random data\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nw = np.random.rand(10, 10)\nax.quiver(u, v, w)\n\n# Create a 3D streamplot with random data\nax.streamplot(u, v, w)\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 6)\ny = np.arange(1, 6)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter3D(x, y, z, c='g', marker='o')\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z, color='b')\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z, 50, cmap='Greens')\n\n# Create a 3D contourf plot with random data\nax.contourf(X, Y, Z, 50, cmap='Blues')\n\n# Create a 3D quiver plot with random data\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nw = np.random.rand(10, 10)\nax.quiver(u, v, w)\n\n# Create a 3D streamplot with random data\nax.streamplot(u, v, w)\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 6)\ny = np.arange(1, 6)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter3D(x, y, z, c='g', marker='o')\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z, color='b')\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z, 50, cmap='Greens')\n\n# Create a 3D contourf plot with random data\nax.contourf(X, Y, Z, 50, cmap='Blues')\n\n# Create a 3D quiver plot with random data\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nw = np.random.rand(10, 10)\nax.quiver(u, v, w)\n\n# Create a 3D streamplot with random data\nax.streamplot(u, v, w)\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 6)\ny = np.arange(1, 6)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter3D(x, y, z, c='g', marker='o')\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z, color='b')\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z, 50, cmap='Greens')\n\n# Create a 3D contourf plot with random data\nax.contourf(X, Y, Z, 50, cmap='Blues')\n\n# Create a 3D quiver plot with random data\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nw = np.random.rand(10, 10)\nax.quiver(u, v, w)\n\n# Create a 3D streamplot with random data\nax.streamplot(u, v, w)\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 6)\ny = np.arange(1, 6)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter3D(x, y, z, c='g', marker='o')\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z, color='b')\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z, 50, cmap='Greens')\n\n# Create a 3D contourf plot with random data\nax.contourf(X, Y, Z, 50, cmap='Blues')\n\n# Create a 3D quiver plot with random data\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nw = np.random.rand(10, 10)\nax.quiver(u, v, w)\n\n# Create a 3D streamplot with random data\nax.streamplot(u, v, w)\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 6)\ny = np.arange(1, 6)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\ndata = {\n    'SAM-dependent methyltransferase': [55, 58, 62, 64, 67],\n    'Thioredoxin-like': [53, 56, 59, 61, 64],\n    'Tetratricopeptide-like helical domain': [51, 54, 57, 59, 62],\n    'CheY-like': [49, 52, 55, 57, 60]\n}\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nfor key, value in data.items():\n    ax.plot(value, label=key)\n\n# Set the title and labels\nax.set_title('Gene Expression Levels')\nax.set_xlabel('Time (minutes)')\nax.set_ylabel('Gene Expression Level')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('a) Milk Chocolate')\n\n# Create a scatter plot with random data\nax.scatter(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], c='blue')\nax.scatter(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], c='orange')\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('b) Dark Chocolate')\n\n# Create a scatter plot with random data\nax.scatter(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], c='blue')\nax.scatter(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], c='orange')\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('c) White Chocolate')\n\n# Create a scatter plot with random data\nax.scatter(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], c='blue')\nax.scatter(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], c='orange')\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a fourth subplot\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('d) Ruby Chocolate')\n\n# Create a scatter plot with random data\nax.scatter(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], c='blue')\nax.scatter(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], c='orange')\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Define the data for the bar chart\nx = [0.00, 0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.00]\ny = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 50, 10]\n\n# Create a bar chart with the data\nbars = ax.bar(x, y, color='saddlebrown')\n\n# Add labels to each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Concept Weight')\n\n# Set the y-axis label\nax.set_ylabel('Count')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1000)\n\n# Set the x-axis ticks\nax.set_xticks([0.00, 0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.00])\n\n# Set the y-axis ticks\nax.set_yticks([0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data\nx = np.linspace(-5, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\nax.plot(x, y1, label='Center', color='#f9c74f')\nax.plot(x, y2, label='Random', color='#8e44ad')\nax.plot(x, y3, label='Center', color='#f9c74f')\n\n# Set the labels and title\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Examples')\nax.set_title('Example Distribution')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\nrepetition = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nclusters = [1500, 1400, 1300, 1200, 1100, 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data\nax.plot(repetition, clusters, 'o-')\n\n# Set the title and labels\nax.set_title('Number of Clusters vs Number of Repetition')\nax.set_xlabel('Number of Repetition')\nax.set_ylabel('Number of Clusters')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\nx = [0, 1, 2, 3, 4, 5]\ny = [400, 300, 200, 100, 50, 0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Threshold vs. Accuracy')\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Casade')\n\n# Set the x-axis label\nax.set_xlabel('Confidence in bin')\n\n# Set the y-axis label\nax.set_ylabel('Calibration Error')\n\n# Define the data points\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Set the color of the line\nax.plot(x, y, color='orange')\n\n# Set the color of the markers\nax.plot(x, y, marker='o', color='blue')\n\n# Set the color of the background\nax.set_facecolor('#f0e6d2')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the labels\nax.set_xlabel('Confidence in bin', color='black')\nax.set_ylabel('Calibration Error', color='black')\n\n# Set the color of the title\nax.set_title('Calibration Error: 0.31', color='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the legend\nax.legend(['Data Points'], loc='upper left', shadow=True)\n\n# Set the color of the annotations\nax.annotate('Data Point 1', xy=(0.0, 0.3), xytext=(0.1, 0.4),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center',\n        verticalalignment='center', transform=ax.transAxes, fontsize=12,\n        bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5))\n\n# Set the color of the box\nax.boxplot([x, y], patch_artist=True, vert=False)\n\n# Set the color of the histogram\nax.hist([x, y], bins=10, color='green')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='red')\n\n# Set the color of the polar plot\nax.polar()\n\n# Set the color of the 3D plot\nax.plot_surface(x, y, z, color='green')\n\n# Set the color of the contourf plot\nax.contourf(x, y, z, color='blue')\n\n# Set the color of the imshow plot\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the scatter plot\nax.scatter(x, y, color='red')\n\n# Set the color of the bar chart\nax.bar(x, y, color='blue')\n\n# Set the color of the pie chart\nax.pie(y, labels=x, colors=['red', 'blue', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[x, y]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour(x, y, z, colors='black')\n\n# Set the color of the stream plot\nax.streamplot(x, y, u, v, color='blue')\n\n# Set the color of the quiver plot\nax.quiver(x, y, u, v, color='"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\nqueries = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\noverlap = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(queries, overlap, 'o-')\n\n# Set the title and labels\nax.set_title('Number of Queries vs. Overlap')\nax.set_xlabel('% images overlap')\nax.set_ylabel('Number of queries')\n\n# Set the limits of the x-axis\nax.set_xlim([0, 1])\n\n# Set the limits of the y-axis\nax.set_ylim([0, 10000])\n\n# Set the color of the lines\nax.plot(queries, overlap, color='blue')\n\n# Set the color of the markers\nax.plot(queries, overlap, marker='o', color='red')\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Generate random data for the plot\nx = np.linspace(0, 1, 100)\ny = np.random.normal(0, 1, 100)\n\n# Plot the data\nax.plot(x, y, 'o', color='blue')\n\n# Set the x-axis limits\nax.set_xlim([0, 1])\n\n# Set the y-axis limits\nax.set_ylim([-2, 2])\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(-2, 3, 0.5))\n\n# Set the background color\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Save the plot as a PNG file\nplt.savefig('mnist.png')\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [5, 10, 15, 20]\ny1 = [90, 80, 70, 60]\ny2 = [85, 75, 65, 55]\ny3 = [80, 70, 60, 50]\ny4 = [75, 65, 55, 45]\ny5 = [70, 60, 50, 40]\ny6 = [65, 55, 45, 35]\ny7 = [60, 50, 40, 30]\ny8 = [55, 45, 35, 25]\ny9 = [50, 40, 30, 20]\ny10 = [45, 35, 25, 15]\n\n# Create the figure and axis objects\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='JPEG+LDPC')\nax.plot(x, y2, 'o-', label='DEEPJSCC w/o ofdm')\nax.plot(x, y3, 'g-', label='DEEPJSCC w/ ofdm')\nax.plot(x, y4, 'r-', label='OURS')\n\n# Add markers at specific points\nax.plot(5, 90, 'gx', markersize=10)\nax.plot(10, 80, 'gx', markersize=10)\nax.plot(15, 70, 'gx', markersize=10)\nax.plot(20, 60, 'gx', markersize=10)\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Classification Accuracy over SNR')\nax.set_xlabel('SNR (dB)')\nax.set_ylabel('Accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each graph\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ny_content = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ny_organization = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ny_language = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y_content, 'b-', label='Content')\nax.plot(x, y_organization, 'o-', label='Organization')\nax.plot(x, y_language, 'g-', label='Language')\n\n# Set the title and labels\nax.set_title('Performance Metrics')\nax.set_xlabel('Time (in hours)')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the plots\nx = [0, 20, 40, 60, 80]\ny1 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny2 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny3 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny4 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny5 = [0.55, 0.65, 0.75, 0.85, 0.95]\n\n# Plot the data\nax.plot(x, y1, 'r-', label='coco (10k)')\nax.plot(x, y2, 'g-', label='laion (10k)')\nax.plot(x, y3, 'b-', label='coco (5k)')\nax.plot(x, y4, 'y-', label='laion (5k)')\nax.plot(x, y5, 'm-', label='CLIP')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0.25, 0.5, 0.75, 1.0]\ny1 = [0.03, 0.04, 0.05, 0.06]\ny2 = [0.07, 0.08, 0.09, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Std of ACC')\nax.plot(x, y2, 'r-', label='Sample Ratio')\n\n# Add markers at the points where the lines intersect\nax.plot(0.5, 0.04, 'r^', markersize=10)\nax.plot(0.75, 0.09, 'r^', markersize=10)\n\n# Set the title and labels\nax.set_title('Simulation Results')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Training Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Training iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Define the colors for the lines\nbase_color = 'blue'\nours_color = 'orange'\n\n# Plot the FID (Frechet Inception Distance) line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], base_color)\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], ours_color)\n\n# Plot the IS (Inception Score) line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005], base_color)\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005], ours_color)\n\n# Plot the FID-FD (Frechet Inception Distance - Frechet Feature Distance) line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.0025], base_color)\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.0025], ours_color)\n\n# Plot the IS-FD (Inception Score - Frechet Feature Distance) line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.3, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.0025, 0.00125], base_color)\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.3, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.0025, 0.00125], ours_color)\n\n# Plot the FID-CAS (Frechet Inception Distance - Conditional Attribute Similarity) line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.0025, 0.00125, 0.000625], base_color)\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.0025, 0.00125, 0.000625], ours_color)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\ny1 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8]\ny2 = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9]\ny3 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'b-')\nax.plot(x, y2, 'g-')\nax.plot(x, y3, 'r-')\n\n# Set the title and labels\nax.set_title('Stock Market Analysis')\nax.set_xlabel('Week')\nax.set_ylabel('Normalized Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny2 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5]\ny3 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny4 = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15]\ny5 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny6 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='#2b5797')\nax.plot(x, y2, label='LWF', color='#e377c2')\nax.plot(x, y3, label='EWC', color='#7f7f7f')\nax.plot(x, y4, label='SEQ', color='#bcbd22')\n\n# Set the title and labels\nax.set_title('Average Accuracy of Machine Learning Models')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0.85, 1.02)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0.87, 0.89, 0.91, 0.93, 0.95, 0.97, 0.99, 1.01])\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0.87', '0.89', '0.91', '0.93', '0.95', '0.97', '0.99', '1.01'])\n\n# Set the title of the plot\nax.set_title('Model Accuracy vs Uncertainty')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\n\n# Plot the data\nax.plot([0, 0.2, 0.4, 0.6, 0.8, 1], [0.99, 0.98, 0.97, 0.96, 0.95, 0.94], 'b-', label='Oesense')\nax.plot([0, 0.2, 0.4, 0.6, 0.8, 1], [0.99, 0.98, 0.97, 0.96, 0.95, 0.94], 'r-', label='KWS')\nax.plot([0, 0.2, 0.4, 0.6, 0.8, 1], [0.99, 0.98, 0.97, 0.96, 0.95, 0.94], 'g-', label='ECG5000')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data points\nx = np.linspace(0, 120, 100)\ny = np.log(x**2 + 1)\n\n# Plot the data points\nax.plot(x, y, color='blue')\n\n# Set the labels for the axes\nax.set_xlabel('Number of Parameters')\nax.set_ylabel('Log KL Divergence')\n\n# Set the title of the plot\nax.set_title('Log KL Divergence vs Number of Parameters')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the graph\nax.set_title('GPT-4 Evaluation')\n\n# Create a scatter plot with the data\nax.scatter([0, 500, 1000, 1500, 2000], [0.8, 0.6, 0.4, 0.2, 0], color='blue')\nax.plot([0, 500, 1000, 1500, 2000], [0.8, 0.6, 0.4, 0.2, 0], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Attack Success Rate')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second graph\nax2.set_title('Llama Guard Evaluation')\n\n# Create a scatter plot with the data\nax2.scatter([0, 500, 1000, 1500, 2000], [0.8, 0.6, 0.4, 0.2, 0], color='red')\nax2.plot([0, 500, 1000, 1500, 2000], [0.8, 0.6, 0.4, 0.2, 0], color='red')\n\n# Set the x-axis label\nax2.set_xlabel('Iterations')\n\n# Set the y-axis label\nax2.set_ylabel('Attack Success Rate')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate some data\nx = np.logspace(-2, 0, 100)\ny1 = np.sin(x) * 80 + 70\ny2 = np.cos(x) * 60 + 50\ny3 = np.tan(x) * 40 + 30\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5, 4))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Full')\nax.plot(x, y2, 'r-', label='SPT')\nax.plot(x, y3, 'b-', label='VPT')\n\n# Add markers for the points of interest\nax.plot(1, 80, 'go', markersize=10)\nax.plot(1, 60, 'ro', markersize=10)\nax.plot(1, 40, 'bo', markersize=10)\n\n# Add labels and title\nax.set_xlabel('fraction of training data (log scale)')\nax.set_ylabel('test accuracy (%)')\nax.set_title('Test Accuracy vs Training Data')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Define the data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x/50)\ny2 = np.cos(x/50)\ny3 = np.tan(x/50)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Sine Wave')\nax.plot(x, y2, 'r-', label='Cosine Wave')\nax.plot(x, y3, 'g-', label='Tangent Wave')\n\n# Add labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Value')\nax.set_title('Gradient Descent Visualization')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MOLHIV')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, color='purple')\n\n# Add a legend to the plot\nax.legend(['PNA + ours', 'GIN + ours', 'PNA + GSAT', 'GIN + GSAT'])\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim([0.2, 1.0])\n\n# Set the y-axis limits\nax.set_ylim([0.74, 0.88])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [120, 90, 60, 30, 10, 1, 1/30, 1/60, 1/90, 1/120]\ny1 = [75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 95]\ny2 = [75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 95]\n\n# Create the figure and axis objects\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Ours')\nax.plot(x, y2, 'g-', label='ACR')\n\n# Add markers at the points of interest\nax.plot(1/30, 90, 'bo', markersize=10)\nax.plot(1/60, 92.5, 'go', markersize=10)\nax.plot(1/90, 95, 'ro', markersize=10)\nax.plot(1/120, 95, 'co', markersize=10)\n\n# Set the labels and title\nax.set_xlabel('Imbalance Ratio of Unlabeled Data')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Comparison of Top-1 Accuracy for Different Imbalance Ratios')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Perplexity vs. Ratio of 4-bit Utilization')\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Add a legend\nax.legend(['APTQ', 'LLaMa-7B (FP16): 5.22', 'OWQ-4bit: 5.56', 'GPTQ-4bit: 5.62', 'LLM-QAT-4bit: 7.4', 'LLM-QAT-4bit: 7.4'])\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [67.32, 82.98, 89.53, 90.47, 92.47, 93.7, 96.75]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 2.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Coverage Ratio vs Number of Training Objects')\nax.set_xlabel('Number of Training Objects')\nax.set_ylabel('Coverage Ratio (%)')\n\n# Set the x-axis tick labels\nax.set_xticks(x)\nax.set_xticklabels(['2^1', '2^2', '2^3', '2^4', '2^5', '2^6', '2^7'])\n\n# Set the y-axis limits\nax.set_ylim(60, 100)\n\n# Set the y-axis tick labels\nax.set_yticks(range(60, 101, 10))\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Create a scatter plot with blue dots\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.scatter(x, y, c='blue', label='Average')\n\n# Create a line plot with blue lines\nax.plot(x, y, c='blue')\n\n# Add a legend\nax.legend()\n\n# Set the title of the plot\nax.set_title('N-ELBO over Iterations')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('N-ELBO')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(500, 800)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('IqM Human Normalized Score')\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('DoN')\n\n# Create a scatter plot with the data\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='purple', label='Baseline')\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='green', label='SoftMoE')\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='pink', label='Top1-MoE')\n\n# Create a line plot with the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='blue', label='Baseline')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='green', label='SoftMoE')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='pink', label='Top1-MoE')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [256, 512, 1024, 2048, 4096, 8192, 16384]\ny = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 0.98]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y, 'b-')\nax.set_xlabel('Vocabulary Size')\nax.set_ylabel('Test set TPR | FPR')\nax.set_title('Test set TPR | FPR = 10^-4')\n\n# Markers\nfor i, txt in enumerate(x):\n    ax.annotate(txt, (x[i], y[i]))\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='BPE', markerfacecolor='blue', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Wordpunct', markerfacecolor='orange', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Whitespace', markerfacecolor='green', markersize=10)]\nax.legend(handles=legend_elements)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for CNN\nx_cnn = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny_cnn = [26.0, 24.7, 24.2, 23.9, 23.6, 23.3, 23.0, 22.7, 22.4, 22.1]\n\n# Data for CIF\nx_cif = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny_cif = [30.2, 28.9, 28.6, 28.3, 28.0, 27.7, 27.4, 27.1, 26.8, 26.5]\n\n# Data for STAR\nx_star = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny_star = [34.4, 33.1, 32.8, 32.5, 32.2, 31.9, 31.6, 31.3, 31.0, 30.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x_cnn, y_cnn, label='CNN', color='#f7e7de')\nax.plot(x_cif, y_cif, label='CIF', color='#b3588a')\nax.plot(x_star, y_star, label='STAR', color='#4d4d4d')\n\n# Set the title and labels\nax.set_title('Word Error Rate vs Compression Rate')\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [0.95, 0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87]\ny2 = [0.94, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86]\ny3 = [0.93, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86, 0.85]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'r-', label='PILOTE')\nax.plot(x, y2, 'b-', label='Re-trained model')\nax.plot(x, y3, 'g-', label='Pre-trained model accuracy')\n\n# Add markers for each point\nfor i, j in zip(x, y1):\n    ax.annotate(' ', (i, j), textcoords=\"offset points\", xytext=(0,10), ha='center', color='red')\nfor i, j in zip(x, y2):\n    ax.annotate(' ', (i, j), textcoords=\"offset points\", xytext=(0,10), ha='center', color='blue')\nfor i, j in zip(x, y3):\n    ax.annotate(' ', (i, j), textcoords=\"offset points\", xytext=(0,10), ha='center', color='green')\n\n# Set the title and labels\nax.set_title('Model Accuracy over Number of Exemplars')\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Add legend\nax.legend()\n\n# Add horizontal lines\nax.axhline(y=0.75, color='g', linestyle='-')\nax.axhline(y=0.85, color='g', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\nsteps = [0, 5, 10, 15, 20]\navg_fidelity = [0.1, 0.15, 0.2, 0.25, 0.3]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data\nax.plot(steps, avg_fidelity, 'o-', color='blue')\n\n# Set the title and labels\nax.set_title('Average Fidelity Over Steps')\nax.set_xlabel('Number of Steps')\nax.set_ylabel('Average Fidelity')\n\n# Add a horizontal line at y=0.25\nax.axhline(y=0.25, color='red', linestyle='-')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['All', 'MLP', 'GNC', 'NCN', 'NC', 'NEOGNN-BUDDY', 'SEAL', 'Node2Vec']\nhits = [80, 75, 70, 65, 60, 55, 50, 45]\nlosses = [20, 25, 30, 35, 40, 45, 50, 55]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(teams, hits, label='Hits', color='#007bff')\nax.plot(teams, losses, label='Losses', color='#ff8c00')\n\n# Set the title and labels\nax.set_title('Team Performance')\nax.set_xlabel('Teams')\nax.set_ylabel('Hits @ 50')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data\nx = [2, 4, 6, 8, 10, 12]\ny = [0.05, 0.05, 0.05, 0.05, 0.05, 0.05]\n\n# Plot\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y, 'o-', color='orange')\nplt.xlabel('Layer')\nplt.ylabel('Value')\nplt.title('Android')\nplt.show()"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 9)\n\n# Set the y-axis limits\nax.set_ylim(0.3, 1.0)\n\n# Set the x-axis label\nax.set_xlabel('Digit Length')\n\n# Set the y-axis label\nax.set_ylabel('Digit Accuracy')\n\n# Plot the data\nax.plot([6, 7, 8, 9], [0.5, 0.7, 0.8, 0.9], 'b-')\nax.plot([6, 7, 8, 9], [0.4, 0.6, 0.7, 0.8], 'g-')\nax.plot([6, 7, 8, 9], [0.3, 0.5, 0.6, 0.7], 'r-')\nax.plot([6, 7, 8, 9], [0.2, 0.4, 0.5, 0.6], 'y-')\nax.plot([6, 7, 8, 9], [0.1, 0.3, 0.4, 0.5], 'm-')\nax.plot([6, 7, 8, 9], [0.0, 0.2, 0.3, 0.4], 'c-')\n\n# Add a legend\nax.legend(['Direct (100 samples)', 'RFFT (100 samples)', 'Scratchpad (100 samples)', 'RFFT (5000 samples)', 'Scratchpad (5000 samples)', 'Direct (5000 samples)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 0.4)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 90, 10))\n\n# Set the y-axis ticks\nax.set_yticks([0.25, 0.3, 0.35, 0.4])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.25', '0.3', '0.35', '0.4'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the data points\nax.plot([0, 10, 20, 30, 40, 50, 60, 70, 80], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65], 'o-')\n\n# Set the color of the legend\nax.legend(['CIFAR100'], loc='upper left')\n\n# Set the color of the dictionary\nax.text(0.05, 0.95, 'Dictionary', transform=ax.transAxes, fontsize=12, verticalalignment='top')\nax.text(0.05, 0.9, 'laion', transform=ax.transAxes, fontsize=12, verticalalignment='top', color='#ff9900')\nax.text(0.05, 0.85, 'CLIP', transform=ax.transAxes, fontsize=12, verticalalignment='top', color='#000000')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each company\ncnn_data = [0.55, 0.58, 0.62, 0.65, 0.68, 0.70, 0.72, 0.73, 0.74, 0.75]\ncnnhmm_data = [0.50, 0.52, 0.55, 0.58, 0.60, 0.62, 0.64, 0.66, 0.68, 0.70]\nrf_data = [0.45, 0.48, 0.50, 0.52, 0.54, 0.56, 0.58, 0.60, 0.62, 0.64]\nrfhmm_data = [0.40, 0.42, 0.44, 0.46, 0.48, 0.50, 0.52, 0.54, 0.56, 0.58]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data for each company\nax.plot(cnn_data, label='CNN', color='#FFA500')\nax.plot(cnnhmm_data, label='CNN+HMM', color='#FF0000')\nax.plot(rf_data, label='RF', color='#0000FF')\nax.plot(rfhmm_data, label='RF+HMM', color='#00008B')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the title of the plot\nax.set_title('Performance Metrics of Different Companies')\n\n# Set the labels for the x and y axes\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1 Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.15]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.plot(x, y1, 'o-', color='orange', label='WER (%)')\nax.plot(x, y2, 'o-', color='blue', label='AMI WER (%)')\n\n# Annotations\nfor i, txt in enumerate(y1):\n    ax.annotate(txt, (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\nfor i, txt in enumerate(y2):\n    ax.annotate(txt, (x[i], y2[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('WER and AMI WER over time')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [10**-7, 10**-6, 10**-5, 10**-4, 10**-3, 10**-2, 10**-1, 10**0, 10**1, 10**2, 10**3, 10**4]\ny = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5]\n\n# Create the figure and axis objects\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'b-', label='empirical relat. (B2=8.0)')\n\n# Add labels and title\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\nax.set_title('M-LVQ-4x8-100')\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Define the data\nx = np.linspace(0.1, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\nax.plot(x, y1, color='blue')\nax.plot(x, y2, color='red')\n\n# Add a legend\nax.legend(['PNA + ours', 'GIN + ours'])\n\n# Set the title\nax.set_title('SPMotif-0.5')\n\n# Set the x and y labels\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Model Accuracy Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a scatter plot with the data\nax.scatter([6, 9, 12, 18, 24, 30], [75.5, 76.5, 77.5, 78.5, 79.5, 80.5], color='blue')\n\n# Create a line plot with the data\nax.plot([6, 9, 12, 18, 24, 30], [75.5, 76.5, 77.5, 78.5, 79.5, 80.5], color='blue')\n\n# Set the x-axis limits\nax.set_xlim(5, 35)\n\n# Set the y-axis limits\nax.set_ylim(74, 81)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nepochs = [3, 5, 7, 10, 30]\ngpt_neo = [0.8, 0.7, 0.6, 0.5, 0.4]\ngpt_3 = [0.9, 0.8, 0.7, 0.6, 0.5]\ngpt_10 = [0.7, 0.6, 0.5, 0.4, 0.3]\ngpt_30 = [0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.plot(epochs, gpt_neo, 'r-', label='GPT-Neo')\nax.plot(epochs, gpt_3, 'b-', label='GPT-3')\nax.plot(epochs, gpt_10, 'g-', label='GPT-10')\nax.plot(epochs, gpt_30, 'y-', label='GPT-30')\n\n# Add labels and title\nax.set_xlabel('Number of Epochs')\nax.set_ylabel('Model Accuracy')\nax.set_title('Model Accuracy over Number of Epochs')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [96, 192, 336, 720]\ny1 = [0.12, 0.16, 0.18, 0.20]\ny2 = [0.10, 0.14, 0.16, 0.18]\ny3 = [0.08, 0.12, 0.14, 0.16]\ny4 = [0.06, 0.10, 0.12, 0.14]\ny5 = [0.04, 0.08, 0.10, 0.12]\ny6 = [0.02, 0.06, 0.08, 0.10]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(15, 10))\n\n# Plot the data\naxs[0, 0].plot(x, y1, 'r--', x, y2, 'g--', x, y3, 'b--')\naxs[0, 0].set_title('Traffic')\naxs[0, 0].set_xlabel('Year')\naxs[0, 0].set_ylabel('MSE')\n\naxs[0, 1].plot(x, y4, 'r--', x, y5, 'g--', x, y6, 'b--')\naxs[0, 1].set_title('ETMm2')\naxs[0, 1].set_xlabel('Year')\naxs[0, 1].set_ylabel('MSE')\n\naxs[1, 0].plot(x, y1, 'r--', x, y2, 'g--', x, y3, 'b--')\naxs[1, 0].set_title('MSF')\naxs[1, 0].set_xlabel('Year')\naxs[1, 0].set_ylabel('MSE')\n\naxs[1, 1].plot(x, y4, 'r--', x, y5, 'g--', x, y6, 'b--')\naxs[1, 1].set_title('ETTh2')\naxs[1, 1].set_xlabel('Year')\naxs[1, 1].set_ylabel('MSE')\n\naxs[2, 0].plot(x, y1, 'r--', x, y2, 'g--', x, y3, 'b--')\naxs[2, 0].set_title('ECL')\naxs[2, 0].set_xlabel('Year')\naxs[2, 0].set_ylabel('MSE')\n\naxs[2, 1].plot(x, y4, 'r--', x, y5, 'g--', x, y6, 'b--')\naxs[2, 1].set_title('MSE')\naxs[2, 1].set_xlabel('Year')\naxs[2, 1].set_ylabel('MSE')\n\n# Add a legend\nfig.legend(['Traffic', 'ETMm2', 'MSF', 'ETTh2', 'ECL', 'MSE'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [224, 128, 64, 32]\ny_serial = [70, 65, 60, 55]\ny_parallel = [80, 75, 70, 65]\n\n# Create the figure and axes objects\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Plot the data\nax.plot(x, y_serial, 'o-', color='orange', label='Serial (n=8, m=1)')\nax.plot(x, y_parallel, 'o-', color='cyan', label='Parallel (n=2, m=4)')\n\n# Add labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Top-1 Accuracy (%)')\nax.set_title('Top-1 Accuracy of ImageNet-1k on Different Hardware Configurations')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Define the data for the plots\nx = [5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0]\ny1 = [95, 85, 75, 65, 55, 45, 35, 25, 15]\ny2 = [90, 80, 70, 60, 50, 40, 30, 20, 10]\ny3 = [85, 75, 65, 55, 45, 35, 25, 15, 5]\ny4 = [80, 70, 60, 50, 40, 30, 20, 10, 0]\n\n# Plot the data\nax.plot(x, y1, 'r-', label='JPEG+LDPC')\nax.plot(x, y2, 'g-', label='DEEPJSCC w/o OFDM')\nax.plot(x, y3, 'b-', label='DEEPJSCC w/ OFDM')\nax.plot(x, y4, 'm-', label='OURS')\n\n# Add a legend\nax.legend()\n\n# Set the title of the plot\nax.set_title('Classification Accuracy (%)')\n\n# Set the labels for the x and y axes\nax.set_xlabel('SNR (dB)')\nax.set_ylabel('Accuracy (%)')\n\n# Set the limits for the x and y axes\nax.set_xlim(5.0, 25.0)\nax.set_ylim(0.0, 100.0)\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis ticks\nax.set_xticks([0, 50, 100, 150, 200])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Set the line color for Line 1\nline1_color = 'purple'\n\n# Set the line style for Line 1\nline1_style = '--'\n\n# Set the line width for Line 1\nline1_width = 2\n\n# Set the marker for Line 1\nline1_marker = 'o'\n\n# Set the marker size for Line 1\nline1_markersize = 5\n\n# Set the marker face color for Line 1\nline1_markerfacecolor = 'purple'\n\n# Set the marker edge color for Line 1\nline1_markeredgecolor = 'purple'\n\n# Set the line color for Line 2\nline2_color = 'blue'\n\n# Set the line style for Line 2\nline2_style = '-'\n\n# Set the line width for Line 2\nline2_width = 2\n\n# Set the marker for Line 2\nline2_marker = 's'\n\n# Set the marker size for Line 2\nline2_markersize = 5\n\n# Set the marker face color for Line 2\nline2_markerfacecolor = 'blue'\n\n# Set the marker edge color for Line 2\nline2_markeredgecolor = 'blue'\n\n# Set the line color for Line 3\nline3_color = 'green'\n\n# Set the line style for Line 3\nline3_style = '-.'\n\n# Set the line width for Line 3\nline3_width = 2\n\n# Set the marker for Line 3\nline3_marker = '^'\n\n# Set the marker size for Line 3\nline3_markersize = 5\n\n# Set the marker face color for Line 3\nline3_markerfacecolor = 'green'\n\n# Set the marker edge color for Line 3\nline3_markeredgecolor = 'green'\n\n# Set the line color for Line 4\nline4_color = 'red'\n\n# Set the line style for Line 4\nline4_style = ':'\n\n# Set the line width for Line 4\nline4_width = 2\n\n# Set the marker for Line 4\nline4_marker = 'D'\n\n# Set the marker size for Line 4\nline4_markersize = 5\n\n# Set the marker face color for Line 4\nline4_markerfacecolor = 'red'\n\n# Set the marker edge color for Line 4\nline4_markeredgecolor = 'red'\n\n# Plot the data for Line 1\nax.plot([0, 50, 100, 150, 200], [1, 2, 3, 4, 5], color=line1_color, linestyle=line1_style, linewidth=line1_width, marker=line1_marker, markersize=line1_markersize, markerfacecolor=line1_markerfacecolor, markeredgecolor=line1_markeredgecolor)\n\n# Plot the data for Line 2\nax.plot([0, 50, 100, 150, 200], [2, 3, 4, 5, 6], color=line2_color, linestyle=line2_style, linewidth=line2_width, marker=line2_marker, markersize=line2_markersize, markerfacecolor=line2_markerfacecolor, markeredgecolor=line2_markeredgecolor)\n\n# Plot the data for Line 3\nax.plot([0, 50, 100, 150, 200], [3, 4, 5, 6, 7], color=line3_color, linestyle=line3_style, linewidth=line3_width, marker=line3_marker, markersize=line3_markersize, markerfacecolor=line3_markerfacecolor, markeredgecolor=line3_markeredgecolor)\n\n# Plot the data for Line 4\nax.plot([0, 50, 100, 150, 200], [4, 5, 6, 7, 8], color=line4_color, linestyle=line4_style, linewidth=line4_width, marker=line4_marker, markersize=line4_markersize, markerfacecolor=line4_markerfacecolor, markeredgecolor=line4_markeredgecolor)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Line 1\nx = [0, 50, 100, 150, 200]\ny = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 2\nx2 = [0, 50, 100, 150, 200]\ny2 = [0.1, 0.9, 1.1, 1.3, 1.4]\n\n# Data for Line 3\nx3 = [0, 50, 100, 150, 200]\ny3 = [0.1, 0.7, 0.9, 1.1, 1.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the lines\nax.plot(x, y, 'o-', color='orange', label='Line 1')\nax.plot(x2, y2, 'o-', color='blue', label='Line 2')\nax.plot(x3, y3, 'o-', color='red', label='Line 3')\n\n# Add labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\nax.set_title('Gradient Descent Convergence')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Set the title of the graph\nax.set_title('ogbl-collab Results')\n\n# Define the data for the graph\nx = ['All', 'MLP', 'GCN', 'NCN', 'SEAL', 'Node2Vec']\ny = [78, 76, 74, 72, 70, 68]\n\n# Plot the data\nax.plot(x, y, marker='o')\n\n# Add labels to the x-axis\nax.set_xlabel('Algorithm')\nax.set_ylabel('Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(10, 60)\nax.set_ylim(10**-14, 10**-10)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('N')\nax.set_ylabel('Precision')\n\n# Define the data points for the plots\nx = [10, 20, 30, 40, 50, 60]\ny1 = [10**-10, 10**-12, 10**-14, 10**-16, 10**-18, 10**-20]\ny2 = [10**-10, 10**-12, 10**-14, 10**-16, 10**-18, 10**-20]\ny3 = [10**-10, 10**-12, 10**-14, 10**-16, 10**-18, 10**-20]\ny4 = [10**-10, 10**-12, 10**-14, 10**-16, 10**-18, 10**-20]\n\n# Plot the data points with different colors and line styles\nax.plot(x, y1, 'm--', label='Standard')\nax.plot(x, y2, 'y-.', label='Constrained')\nax.plot(x, y3, 'g:', label='Experimental')\nax.plot(x, y4, 'p-', label='Hypothetical')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig1, ax1 = plt.subplots(figsize=(12, 8))\nax1.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'b-')\nax1.set_title('Graph Variation 1')\nax1.set_xlabel('N')\nax1.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the second graph\nfig2, ax2 = plt.subplots(figsize=(12, 8))\nax2.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'r-')\nax2.set_title('Graph Variation 2')\nax2.set_xlabel('N')\nax2.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the third graph\nfig3, ax3 = plt.subplots(figsize=(12, 8))\nax3.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'g-')\nax3.set_title('Graph Variation 3')\nax3.set_xlabel('N')\nax3.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the fourth graph\nfig4, ax4 = plt.subplots(figsize=(12, 8))\nax4.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'y-')\nax4.set_title('Graph Variation 4')\nax4.set_xlabel('N')\nax4.set_ylabel('Peak Performance')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\nax.set_title('Daytime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\n\n# Create a second figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\nax.set_title('Nighttime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Define the time periods\ntime_periods = np.arange(0, 13)\n\n# Define the performance index values for each period\nperformance_index = [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]\n\n# Plot the performance index values\nax.plot(time_periods, performance_index, 'b-')\n\n# Add a legend\nax.legend(['Standard Performance', 'Innovative Performance'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nsales = [1000, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200]\ntemperature = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(10, 6))\nax1.plot(months, sales, 'b-', label='Monthly Sales')\nax1.set_xlabel('Month')\nax1.set_ylabel('Sales', color='blue')\n\nax2 = ax1.twinx()\nax2.plot(months, temperature, 'r-', label='Average Temperature')\nax2.set_ylabel('Temperature (\u00b0C)', color='red')\n\n# Markers\nfor i, j in enumerate(months):\n    if i % 2 == 0:\n        ax1.scatter(j, sales[i], color='blue')\n    else:\n        ax1.scatter(j, sales[i], color='red')\n\n# Annotations\nfor i, j in enumerate(months):\n    if i % 2 == 0:\n        ax1.annotate(f'{sales[i]}', (j, sales[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n    else:\n        ax1.annotate(f'{sales[i]}', (j, sales[i]), textcoords=\"offset points\", xytext=(0,-10), ha='center')\n\n# Legend\nfig.legend(loc=\"upper left\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each graph\ngrowth_data = [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\ndecay_data = [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\noscillation_data = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Create a figure with three subplots\nfig, axs = plt.subplots(3, 1, figsize=(6, 9))\n\n# Plot the growth data\naxs[0].plot(growth_data, 'g-')\naxs[0].set_title('Exponential Growth Over Time')\naxs[0].set_xlabel('Time')\naxs[0].set_ylabel('Value')\n\n# Plot the decay data\naxs[1].plot(decay_data, 'r-')\naxs[1].set_title('Exponential Decay Over Time')\naxs[1].set_xlabel('Time')\naxs[1].set_ylabel('Value')\n\n# Plot the oscillation data\naxs[2].plot(oscillation_data, 'b-')\naxs[2].set_title('Oscillatory Behavior Over Time')\naxs[2].set_xlabel('Time')\naxs[2].set_ylabel('Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.5, 0.6, 0.7, 0.8, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny2 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.8, 0.7, 0.6]\ny3 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.8]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'b--', label='5-shot direct')\nax.plot(x, y2, 'o-', label='5-shot scratchpad')\nax.plot(x, y3, 'g-.')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Accuracy of Different Shot Types')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Smoothed Representation')\n\n# Define the x-axis values\nx = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\n# Define the y-axis values for the smoothed data\ny_smooth = [0.3, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.002, 0.001, 0.0005]\n\n# Plot the smoothed data\nax.plot(x, y_smooth, 'm-', label='Smoothed Data')\n\n# Add markers to the plot\nfor i, j in zip(x, y_smooth):\n    ax.annotate(f'{j:.2f}', xy=(i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the x-axis limits\nax.set_xlim(0, 22)\n\n# Set the y-axis limits\nax.set_ylim(-0.1, 0.3)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 22, 2))\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.1, 0.2, 0.3])\n\n# Set the x-axis labels\nax.set_xlabel('Time')\n\n# Set the y-axis labels\nax.set_ylabel('Value')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with a specific size\nfig = plt.figure(figsize=(6.0, 12.0))\n\n# Add a subplot for the sinusoidal pattern\nsinusoidal = fig.add_subplot(311)\nsinusoidal.set_title('Sinusoidal Pattern')\nsinusoidal.plot(np.linspace(0, 10, 100), np.sin(np.linspace(0, 10, 100)), 'm-')\n\n# Add a subplot for the cosine pattern\ncosine = fig.add_subplot(312)\ncosine.set_title('Cosine Pattern')\ncosine.plot(np.linspace(0, 10, 100), np.cos(np.linspace(0, 10, 100)), 'g-')\n\n# Add a subplot for the exponential decay\ndecay = fig.add_subplot(313)\ndecay.set_title('Exponential Decay')\ndecay.plot(np.linspace(0, 10, 100), np.exp(-np.linspace(0, 10, 100)), 'b-')\n\n# Add a subplot for the logarithmic growth\ngrowth = fig.add_subplot(414)\ngrowth.set_title('Logarithmic Growth')\ngrowth.plot(np.linspace(0, 10, 100), np.log(np.linspace(0, 10, 100)), 'r-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('a) Positive bound')\n\n# Create a scatter plot with red circles\nax.scatter([0.1, 0.2, 0.3, 0.4], [80, 85, 90, 95], color='red', marker='o')\n\n# Create a line plot with blue lines\nax.plot([0.1, 0.2, 0.3, 0.4], [75, 78, 80, 82], color='blue', linestyle='-')\n\n# Add a vertical line at x=0.1\nax.axvline(x=0.1, color='red')\n\n# Add a horizontal line at y=80\nax.axhline(y=80, color='red')\n\n# Repeat for other plots\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.set_title('b) Negative bound')\nax.scatter([0.1, 0.2, 0.3, 0.4], [80, 85, 90, 95], color='red', marker='o')\nax.plot([0.1, 0.2, 0.3, 0.4], [75, 78, 80, 82], color='blue', linestyle='-')\nax.axvline(x=0.1, color='red')\nax.axhline(y=80, color='red')\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.set_title('c) Contrastive loss weight')\nax.scatter([0.1, 0.2, 0.3, 0.4], [80, 85, 90, 95], color='red', marker='o')\nax.plot([0.1, 0.2, 0.3, 0.4], [75, 78, 80, 82], color='blue', linestyle='-')\nax.axvline(x=0.1, color='red')\nax.axhline(y=80, color='red')\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.set_title('d) Fuzzy coefficient')\nax.scatter([0.1, 0.2, 0.3, 0.4], [80, 85, 90, 95], color='red', marker='o')\nax.plot([0.1, 0.2, 0.3, 0.4], [75, 78, 80, 82], color='blue', linestyle='-')\nax.axvline(x=0.1, color='red')\nax.axhline(y=80, color='red')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Positive Bound\nx_positive = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny_positive = [82, 81, 80, 79, 78, 77, 76, 75, 74]\n\n# Data for Negative Bound\nx_negative = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny_negative = [74, 75, 76, 77, 78, 79, 80, 81, 82]\n\n# Data for Contrastive Loss Weight\nx_contrastive = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny_contrastive = [75, 76, 77, 78, 79, 80]\n\n# Data for Fuzzy Coefficient\nx_fuzzy = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny_fuzzy = [75, 76, 77, 78, 79, 80, 81, 82, 83]\n\n# Data for Additional Metric 1\nx_metric1 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny_metric1 = [75, 76, 77, 78, 79, 80, 81, 82, 83]\n\n# Data for Additional Metric 2\nx_metric2 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny_metric2 = [75, 76, 77, 78, 79, 80, 81, 82, 83]\n\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot Positive Bound\nax.plot(x_positive, y_positive, 'r-', label='Positive Bound')\nax.fill_between(x_positive, y_positive, color='red', alpha=0.2)\n\n# Plot Negative Bound\nax.plot(x_negative, y_negative, 'g-', label='Negative Bound')\nax.fill_between(x_negative, y_negative, color='green', alpha=0.2)\n\n# Plot Contrastive Loss Weight\nax.plot(x_contrastive, y_contrastive, 'b-', label='Contrastive Loss Weight')\nax.fill_between(x_contrastive, y_contrastive, color='blue', alpha=0.2)\n\n# Plot Fuzzy Coefficient\nax.plot(x_fuzzy, y_fuzzy, 'm-', label='Fuzzy Coefficient')\nax.fill_between(x_fuzzy, y_fuzzy, color='purple', alpha=0.2)\n\n# Plot Additional Metric 1\nax.plot(x_metric1, y_metric1, 'c-', label='Additional Metric 1')\nax.fill_between(x_metric1, y_metric1, color='cyan', alpha=0.2)\n\n# Plot Additional Metric 2\nax.plot(x_metric2, y_metric2, 'y-', label='Additional Metric 2')\nax.fill_between(x_metric2, y_metric2, color='yellow', alpha=0.2)\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Value')\nax.set_title('Metrics Over Time')\n\n# Show legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Set the title of the plot\nax.set_title('Dry vs Rain')\n\n# Create a scatter plot with the data\nax.scatter([1, 2, 3, 4, 5], [1.2, 1.4, 1.6, 1.8, 2.0], color='red')\n\n# Add labels to the x-axis\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8, 3))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Define the data for the plot\nn_aug = [0, 1, 2, 3, 4, 5, 6, 7, 8]\nperformance_gain = [0, 2, 4, 6, 8, 6, 4, 2, 0]\n\n# Plot the data\nax.plot(n_aug, performance_gain, 'b-', label='Performance Gain (%)')\n\n# Add labels to the x-axis and y-axis\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndecomp = [0, 20, 40, 60, 80]\naccuracy = [0.65, 0.70, 0.75, 0.80, 0.85]\ncoco_10k = [0.60, 0.65, 0.70, 0.75, 0.80]\nlaion_10k = [0.65, 0.70, 0.75, 0.80, 0.85]\ncoco_5k = [0.60, 0.65, 0.70, 0.75, 0.80]\nlaion_5k = [0.65, 0.70, 0.75, 0.80, 0.85]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot the data\naxs[0].plot(decomp, accuracy, 'r-o')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Decomposition IO Norm')\naxs[0].set_ylabel('Accuracy')\n\naxs[1].plot(decomp, coco_10k, 'b-o', label='COCO (10k)')\naxs[1].plot(decomp, laion_10k, 'b-o', label='LAION (10k)')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Decomposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].legend()\n\naxs[2].plot(decomp, coco_5k, 'g-o', label='COCO (5k)')\naxs[2].plot(decomp, laion_5k, 'g-o', label='LAION (5k)')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Decomposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'b-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax.set_title('Error Rate vs. Learning Rate')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Error Rate')\n\n# Create a second figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'r-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax.set_title('Accuracy vs. Dropout')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Accuracy')\n\n# Create a third figure and axis for the third plot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'g-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax.set_title('Error Rate vs. Learning Rate')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Error Rate')\n\n# Create a fourth figure and axis for the fourth plot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'y-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax.set_title('Accuracy vs. Dropout')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Accuracy')\n\n# Create a fifth figure and axis for the fifth plot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'm-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax.set_title('Error Rate vs. Learning Rate')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Error Rate')\n\n# Create a sixth figure and axis for the sixth plot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'c-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax.set_title('Accuracy vs. Dropout')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Accuracy')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data for the plots\nx = range(201)\ny1 = [0.5 + 0.05 * i for i in x]\ny2 = [0.6 + 0.03 * i for i in x]\n\n# Plot the data\nax.plot(x, y1, label='Base Model', color='blue')\nax.plot(x, y2, label='Our Model', color='orange')\n\n# Add a legend\nax.legend()\n\n# Set the title of the plot\nax.set_title('Metric 1')\n\n# Set the x and y labels\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5, 3))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Define the x-axis labels\nx_labels = ['0', '25', '50', '75', '100', '125', '150', '175', '200']\n\n# Define the y-axis labels\ny_labels = ['0.2', '0.4', '0.6', '0.8', '1.0']\n\n# Set the x-axis and y-axis ticks\nax.set_xticks(range(0, 201, 25))\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis and y-axis labels\nax.set_xticklabels(x_labels)\nax.set_yticklabels(y_labels)\n\n# Plot the data\nax.plot([0, 200], [0.8, 0.2], color='blue')\nax.plot([0, 200], [0.6, 0.4], color='cyan')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = np.array([1, 2, 3, 4, 5, 6])\ny = np.array([10**-1, 10**-4, 10**-7, 10**-10, 10**-13, 10**-16])\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Plot the data points\nax.plot(x, y, 'o-', color='blue')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(1, 6)\nax.set_ylim(10**-16, 10**-1)\n\n# Add grid lines\nax.grid(True)\n\n# Add labels\nax.set_xlabel('N')\nax.set_ylabel('P(N)')\n\n# Add title\nax.set_title('Probability of N-gram occurrence')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Define the data for the plots\nx = [0, 5, 10, 15, 20, 25]\ny1 = [1.4, 1.3, 1.2, 1.1, 1.0, 0.9]\ny2 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\n\n# Add markers to the plot\nfor i, j in zip(x, y1):\n    ax.annotate(f'{j:.1f}', xy=(i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\nfor i, j in zip(x, y2):\n    ax.annotate(f'{j:.1f}', xy=(i, j), textcoords=\"offset points\", xytext=(0,-10), ha='center')\n\n# Add labels to the axes\nax.set_xlabel('Weeks')\nax.set_ylabel('Performance/Efficiency')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Define the data for the plots\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nweeks = [0, 5, 10, 15, 20, 25, 30]\nperformance = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6]\nefficiency = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\ngrowth = [1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(weeks, performance, 'b-', label='Performance')\nax.plot(weeks, efficiency, 'r-', label='Efficiency')\nax.plot(weeks, growth, 'g-', label='Growth')\n\n# Add markers to the plot\nfor i, j in zip(weeks, performance):\n    ax.annotate('X', (i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\nfor i, j in zip(weeks, efficiency):\n    ax.annotate('X', (i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\nfor i, j in zip(weeks, growth):\n    ax.annotate('X', (i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the title and labels\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny2 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\ny3 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Data Series 1')\nax.plot(x, y2, 'g--', label='Data Series 2 with Gradient')\nax.plot(x, y3, 'm-.', label='Data Series 3')\n\n# Set the title and labels\nax.set_title('Dynamic Data Presentation Across Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Normalized Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='#007BFF')\nax.plot(x, y2, label='LWF', color='#17A2B8')\nax.plot(x, y3, label='EWC', color='#28A745')\nax.plot(x, y4, label='SEQ', color='#218838')\n\n# Set the title and labels\nax.set_title('Average Accuracy (%)')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nba_ce = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ne_wc = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\nlwf = [88, 86, 84, 82, 80, 78, 76, 74, 72, 70]\nseq = [82, 80, 78, 76, 74, 72, 70, 68, 66, 64]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the first subplot\naxs[0].plot(x, ba_ce, 'b-', label='BaCE')\naxs[0].plot(x, e_wc, 'c-', label='EWC')\naxs[0].set_title('Performance Comparison: BaCE vs EWC')\naxs[0].set_xlabel('Task')\naxs[0].set_ylabel('Average Accuracy (%)')\naxs[0].legend()\naxs[0].grid(True)\n\n# Plot the second subplot\naxs[1].plot(x, lwf, 'r^', label='LWF')\naxs[1].plot(x, seq, 'm^', label='SEQ')\naxs[1].set_title('Performance Comparison: LWF vs SEQ')\naxs[1].set_xlabel('Task')\naxs[1].set_ylabel('Average Accuracy (%)')\naxs[1].legend()\naxs[1].grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9, 7))\n\n# Set the title of the plot\nax.set_title('model1 Performance')\n\n# Create a scatter plot with the data\nax.scatter([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6], color='blue')\nax.plot([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6], color='blue')\n\n# Add a legend to the plot\nax.legend(['model1 Series 1', 'model1 Series 2'])\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate')\n\n# Set the x-axis limits\nax.set_xlim(0, 2000)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Save the plot as a PNG file\nplt.savefig('model1_performance.png')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]\ny2 = [2.2, 3.2, 4.2, 5.2, 6.2, 7.2, 8.2]\ny3 = [2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='IHM')\nax.plot(x, y2, 'r-', label='SDM')\nax.plot(x, y3, 'g-', label='AMMI WER')\n\n# Add markers at the points\nfor i, j in zip(x, y1):\n    ax.annotate(' ', xy=(i, j), xytext=(i, j),\n                arrowprops=dict(facecolor='black', shrink=0.05))\nfor i, j in zip(x, y2):\n    ax.annotate(' ', xy=(i, j), xytext=(i, j),\n                arrowprops=dict(facecolor='black', shrink=0.05))\nfor i, j in zip(x, y3):\n    ax.annotate(' ', xy=(i, j), xytext=(i, j),\n                arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Set the title and labels\nax.set_title('Performance Metrics of Different Models')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [22, 24, 26, 28, 30, 32, 34]\ny2 = [20, 22, 24, 26, 28, 30, 32]\ny3 = [18, 20, 22, 24, 26, 28, 30]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.plot(x, y1, 'b-', label='WHR WER (%)')\nax.plot(x, y2, 'r-', label='AMR WER (%)')\nax.plot(x, y3, 'g-', label='WER WER (%)')\n\n# Add markers for each point\nfor i, j in zip(x, y1):\n    ax.annotate(' ', xy=(i, j), xytext=(i, j),\n                arrowprops=dict(facecolor='orange', shrink=0.05))\n\nfor i, j in zip(x, y2):\n    ax.annotate(' ', xy=(i, j), xytext=(i, j),\n                arrowprops=dict(facecolor='orange', shrink=0.05))\n\nfor i, j in zip(x, y3):\n    ax.annotate(' ', xy=(i, j), xytext=(i, j),\n                arrowprops=dict(facecolor='orange', shrink=0.05))\n\n# Set the title and labels\nax.set_title('Trend of WER, AMR, and WHR WER (%)')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Percentage (%)')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight 3', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['2', '3', '4', '5', '6', '7', '8'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4], [78, 76, 74, 72], 'b-')\nax.plot([0.5, 0.6, 0.7, 0.8, 0.9], [75, 73, 71, 69, 67], 'r-')\nax.plot([0.95, 1.0], [65, 63], 'g-')\n\n# Add labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Weight (kg)')\nax.set_title('Contrastive loss weight.')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [2, 3, 4, 5, 6, 7, 8]\ny = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Data for the second graph\nx2 = [2, 3, 4, 5, 6, 7, 8]\ny2 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Create the figure and axes objects\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Plot the data\nax.plot(x, y, 'g-')\nax.plot(x2, y2, 'b-')\n\n# Set the title and labels\nax.set_title('LibriCSS WER vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add a legend\nax.legend(['LibriCSS WER', 'Threshold'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Define the data for the plots\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [0.5, 0.6, 0.7, 0.8, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny2 = [0.6, 0.7, 0.8, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='PNA')\nax.plot(x, y2, 'g-', label='GIN')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0.1, 1.0)\nax.set_ylim(0.4, 0.9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('#98FB98')\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Trends', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Ratio r', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Performance', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(-80, 30)\n\n# Set the x-axis ticks\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([-80, -60, -40, -20, 0, 20, 40, 60, 80])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the line colors\nline_colors = ['purple', 'orange', 'yellow']\n\n# Set the line styles\nline_styles = ['-', '--', '-.', ':']\n\n# Set the line widths\nline_widths = [2, 1, 1]\n\n# Set the line markers\nline_markers = ['o', 's', '^']\n\n# Set the line marker sizes\nline_marker_sizes = [10, 10, 10]\n\n# Set the line marker edge colors\nline_marker_edge_colors = ['black', 'black', 'black']\n\n# Set the line marker face colors\nline_marker_face_colors = ['white', 'white', 'white']\n\n# Set the line marker edge widths\nline_marker_edge_widths = [1, 1, 1]\n\n# Set the line marker face widths\nline_marker_face_widths = [1, 1, 1]\n\n# Set the line marker hatch patterns\nline_marker_hatch_patterns = ['', '', '']\n\n# Set the line marker rotation angles\nline_marker_rotation_angles = [0, 0, 0]\n\n# Set the line marker transparency\nline_marker_transparencies = [1, 1, 1]\n\n# Set the line marker zorder\nline_marker_zorders = [1, 1, 1]\n\n# Set the line marker labels\nline_marker_labels = ['PNA + ours', 'GIN + ours', 'GIN + ours']\n\n# Set the line marker label positions\nline_marker_label_positions = [(0.1, -80), (0.2, -60), (0.3, -40)]\n\n# Set the line marker label alignments\nline_marker_label_alignments = ['center', 'center', 'center']\n\n# Set the line marker label rotations\nline_marker_label_rotations = [0, 0, 0]\n\n# Set the line marker label font sizes\nline_marker_label_font_sizes = [12, 12, 12]\n\n# Set the line marker label font weights\nline_marker_label_font_weights = ['normal', 'normal', 'normal']\n\n# Set the line marker label font styles\nline_marker_label_font_styles = ['normal', 'normal', 'normal']\n\n# Set the line marker label font families\nline_marker_label_font_families = ['sans-serif', 'sans-serif', 'sans-serif']\n\n# Set the line marker label font variants\nline_marker_label_font_variants = ['normal', 'normal', 'normal']\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker_label_font_family = 'sans-serif'\n\n# Set the line marker label font variant\nline_marker_label_font_variant = 'normal'\n\n# Set the line marker label font stretch\nline_marker_label_font_stretch = 'normal'\n\n# Set the line marker label font style\nline_marker_label_font_style = 'normal'\n\n# Set the line marker label font weight\nline_marker_label_font_weight = 'normal'\n\n# Set the line marker label font family\nline_marker"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Define the data for the plots\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35]\ny2 = [0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15]\ny3 = [0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]\n\n# Plot the data\nax.plot(x, y1, 'o-', color='purple')\nax.plot(x, y2, 'o-', color='orange')\nax.plot(x, y3, 'o-', color='blue')\n\n# Add labels to the axes\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Define the data for the plots\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.5, 0.7, 0.9, 0.8, 0.6, 0.4]\ny2 = [0.3, 0.5, 0.7, 0.6, 0.4, 0.2]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='PNM + ours')\nax.plot(x, y2, 'r-', label='GIN + ours')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Comparison of Model Accuracies')\n\n# Define the data for the plots\nx = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\ny1 = [80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104]\ny2 = [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n\n# Plot the data\nax.plot(x, y1, label='Model 1 Mean Accuracy', color='#1f77b4')\nax.plot(x, y2, label='Model 2 Mean Accuracy', color='#d62728')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis labels\nax.set_xticks([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n\n# Set the y-axis limits\nax.set_ylim(60, 100)\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\nax.set_title('Performance of Model X')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [90, 92, 93, 94, 95, 94, 93, 92, 91, 90], 'r-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [85, 87, 88, 89, 90, 89, 88, 87, 86, 85], 'g-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [80, 82, 83, 84, 85, 84, 83, 82, 81, 80], 'b-')\n\n# Add markers at the data points\nax.plot(0, 90, 'ro')\nax.plot(1, 92, 'ro')\nax.plot(2, 93, 'ro')\nax.plot(3, 94, 'ro')\nax.plot(4, 95, 'ro')\nax.plot(5, 94, 'ro')\nax.plot(6, 93, 'ro')\nax.plot(7, 92, 'ro')\nax.plot(8, 91, 'ro')\nax.plot(9, 90, 'ro')\n\n# Add rectangles for the configurations\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.add_patch(plt.Rectangle((1, 0), 1, 1, color='green'))\nax.add_patch(plt.Rectangle((2, 0), 1, 1, color='blue'))\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\nax.set_title('Performance of Model Y')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [75, 77, 78, 79, 80, 79, 78, 77, 76, 75], 'r-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [70, 72, 73, 74, 75, 74, 73, 72, 71, 70], 'g-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [65, 67, 68, 69, 70, 69, 68, 67, 66, 65], 'b-')\n\n# Add markers at the data points\nax.plot(0, 75, 'ro')\nax.plot(1, 77, 'ro')\nax.plot(2, 78, 'ro')\nax.plot(3, 79, 'ro')\nax.plot(4, 80, 'ro')\nax.plot(5, 79, 'ro')\nax.plot(6, 78, 'ro')\nax.plot(7, 77, 'ro')\nax.plot(8, 76, 'ro')\nax.plot(9, 75, 'ro')\n\n# Add rectangles for the configurations\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.add_patch(plt.Rectangle((1, 0), 1, 1, color='green'))\nax.add_patch(plt.Rectangle((2, 0), 1, 1, color='blue'))\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\nax.set_title('Performance of Model Z')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [85, 87, 88, 89, 90, 89, 88, 87, 86, 85], 'r-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [80, 82, 83, 84, 85, 84, 83, 82, 81, 80], 'g-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [75, 77, 78, 79, 80, 79, 78, 77, 76, 75], 'b-')\n\n# Add markers at the data points\nax.plot(0, 85, 'ro')\nax.plot(1, 87, 'ro')\nax.plot(2, 88, 'ro')\nax.plot(3, 89, 'ro')\nax.plot(4, 90, 'ro')\nax.plot(5, 89, 'ro')\nax.plot(6, 88, 'ro')\nax.plot(7, 87, 'ro')\nax.plot(8, 86, 'ro')\nax.plot(9, 85, 'ro')\n\n# Add rectangles for the configurations\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.add_patch(plt.Rectangle((1, 0), 1, 1, color='green'))\nax.add_patch(plt.Rectangle((2, 0), 1, 1, color='blue'))\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Performance of Llama')\n\n# Create a scatter plot with different colors for each configuration\nax.scatter([1, 2, 3, 4, 5], [80, 85, 90, 95, 100], color='pink')\nax.scatter([1, 2, 3, 4, 5], [75, 80, 85, 90, 95], color='green')\nax.scatter([1, 2, 3, 4, 5], [70, 75, 80, 85, 90], color='blue')\n\n# Add labels to the x-axis\nax.set_xlabel('Iteration')\n\n# Add labels to the y-axis\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each brand\nbrands = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E', 'Brand F']\nsales_data = [\n    [1.2, 1.5, 1.8, 2.1, 2.4, 2.7],\n    [1.3, 1.6, 1.9, 2.2, 2.5, 2.8],\n    [1.4, 1.7, 2.0, 2.3, 2.6, 2.9],\n    [1.5, 1.8, 2.1, 2.4, 2.7, 3.0],\n    [1.6, 1.9, 2.2, 2.5, 2.8, 3.1],\n    [1.7, 2.0, 2.3, 2.6, 2.9, 3.2]\n]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot the sales data for each brand\nfor i, brand in enumerate(brands):\n    ax.plot(sales_data[i], label=brand)\n    ax.annotate(brand, (len(sales_data[i])-1, sales_data[i][-1]), color='red')\n\n# Set the title of the plot\nax.set_title('Quarterly Sales Growth')\n\n# Set the x-axis labels\nax.set_xticks(range(len(sales_data[0])))\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6'])\n\n# Set the y-axis label\nax.set_ylabel('Sales Growth')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(18, 4))\n\n# Define the data for the plots\nx = np.linspace(0, 700, 100)\ny1 = np.sin(x/50)\ny2 = np.cos(x/50)\ny3 = np.tan(x/50)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='ECL Run 1')\nax.plot(x, y2, 'r-', label='ECL Run 2')\n\n# Add a legend\nax.legend()\n\n# Set the title of the plot\nax.set_title('ECL Performance')\n\n# Set the x and y labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Set the title of the plot\nax.set_title('Relaxation Level by Driving Style')\n\n# Set the x-axis label\nax.set_xlabel('Driving Style')\n\n# Set the y-axis label\nax.set_ylabel('Relaxation Level')\n\n# Define the data for the plot\ndriving_styles = ['Passive', 'Racing', 'Replay', 'Sportive']\nrelaxation_levels = [14, 12, 10, 8]\n\n# Plot the data\nax.plot(driving_styles, relaxation_levels, 'r-')\n\n# Add markers at each data point\nfor i, j in zip(driving_styles, relaxation_levels):\n    ax.annotate(f'{j}', xy=(i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5']\ny1 = [20, 25, 30, 35, 40]\ny2 = [10, 15, 20, 25, 30]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(9.0, 6.0))\n\n# Plot the data\naxs[0, 0].plot(x, y1, color='purple')\naxs[0, 0].set_title('Category A Growth')\naxs[0, 0].fill_between(x, y1, color='lavender')\n\naxs[0, 1].plot(x, y2, color='blue')\naxs[0, 1].set_title('Category B Growth')\naxs[0, 1].fill_between(x, y2, color='skyblue')\n\naxs[1, 0].plot(x, y1, color='red')\naxs[1, 0].set_title('Category C Growth')\naxs[1, 0].fill_between(x, y1, color='pink')\n\naxs[1, 1].plot(x, y2, color='orange')\naxs[1, 1].set_title('Category D Growth')\naxs[1, 1].fill_between(x, y2, color='gold')\n\naxs[2, 0].plot(x, y1, color='green')\naxs[2, 0].set_title('Category E Growth')\naxs[2, 0].fill_between(x, y1, color='lightgreen')\n\naxs[2, 1].plot(x, y2, color='brown')\naxs[2, 1].set_title('Category F Growth')\naxs[2, 1].fill_between(x, y2, color='burlywood')\n\n# Set the x-axis labels\nfor ax in axs.flat:\n    ax.set_xlabel('Growth Phase')\n    ax.set_ylabel('Cumulative Value')\n\n# Hide x labels and tick labels for top plots and y ticks for right plots\nfor ax in axs.flat:\n    ax.label_outer()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Set the x-axis limits\nax.set_xlim(4, 30)\n\n# Set the y-axis limits\nax.set_ylim(1, 15)\n\n# Set the x-axis ticks\nax.set_xticks([4, 6, 10, 20, 30])\n\n# Set the y-axis ticks\nax.set_yticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\n# Set the x-axis labels\nax.set_xticklabels(['4x10^0', '6x10^0', '1x10^1', '2x10^1', '3x10^1'])\n\n# Set the y-axis labels\nax.set_yticklabels(['1x10^0', '2x10^0', '3x10^0', '4x10^0', '5x10^0', '6x10^0', '7x10^0', '8x10^0', '9x10^0', '10x10^0', '11x10^0', '12x10^0', '13x10^0', '14x10^0', '15x10^0'])\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the plot background\nax.set_facecolor('lightgray')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the map\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the pie chart\nax.add_patch(plt.Rectangle((2, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the legend\nax.add_patch(plt.Rectangle((3, 0), 1, 1, color='lightgray'))\n\n# Set the title of the map\nax.set_title('Map of the United States')\n\n# Set the title of the pie chart\nax.text(2.5, 0.5, 'Literacy Rate by Region', fontsize=14)\n\n# Create a pie chart with the data\nlabels = ['North', 'East', 'South', 'West']\nsizes = [35, 25, 20, 15]\ncolors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Draw the pie chart\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set the aspect ratio of the pie chart to be equal\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Set the title of the plot\nax.set_title('Beauty Product Ratings')\n\n# Create a horizontal bar chart with the ratings\nax.barh(['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive'], [4.5, 4.0, 3.5, 3.0, 2.5], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Rating')\n\n# Set the y-axis label\nax.set_ylabel('Product')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nengr_m1 = [44.15, 44.05, 41.55, 40.90, 39.45, 36.70]\nzhang_m2 = [44.05, 41.55, 40.90, 39.45, 36.70]\nrice_m3 = [41.55, 40.90, 39.45, 36.70]\nrade_m4 = [40.90, 39.45, 36.70]\nhendry_m5 = [40.65, 39.45, 36.70, 33.65]\naddep_m6 = [39.45, 36.70, 33.65, 30.55]\ncarmon_m7 = [36.70, 33.65, 30.55, 27.45]\n\nengr_m1_rfns = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nzhang_m2_rfns = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nrice_m3_rfns = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nrade_m4_rfns = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nhendry_m5_rfns = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\naddep_m6_rfns = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\ncarmon_m7_rfns = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\n\nengr_m1_robust = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nzhang_m2_robust = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nrice_m3_robust = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nrade_m4_robust = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\nhendry_m5_robust = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\naddep_m6_robust = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\ncarmon_m7_robust = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(engr_m1, label='Engrom (M1)')\nax.plot(zhang_m2, label='Zhang (M2)')\nax.plot(rice_m3, label='Rice (M3)')\nax.plot(rade_m4, label='Rade (M4)')\nax.plot(hendry_m5, label='Hendrycs (M5)')\nax.plot(addep_m6, label='Addep. (M6)')\nax.plot(carmon_m7, label='Carmon (M7)')\n\n# Set the title and labels\nax.set_title('Robust Error (%)')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Error (%)')\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Plot the data\nax2.plot(engr_m1_rfns, label='Engrom (M1)', color='green')\nax2.plot(zhang_m2_rfns, label='Zhang (M2)', color='blue')\nax2.plot(rice_m3_rfns, label='Rice (M3)', color='orange')\nax2.plot(rade_m4_rfns, label='Rade (M4)', color='purple')\nax2.plot(hendry_m5_rfns, label='Hendrycs (M5)', color='red')\nax2.plot(addep_m6_rfns, label='Addep. (M6)', color='cyan')\nax2.plot(carmon_m7_rfns, label='Carmon (M7)', color='magenta')\n\n# Set the title and labels\nax2.set_title('RFNs (%)')\nax2.set_xlabel('Time (s)')\nax2.set_ylabel('RFN (%)')\n\n# Add a legend\nax2.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'VG16': [0.551, 0.538, 0.744, 0.762],\n    'Resnet101': [0.394, 0.477, 0.6, 0.65],\n    'Rotation': [0.8, 0.85, 0.9, 0.95]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(data['VG16'], label='VG16 Cartesian', color='red')\nax.plot(data['Resnet101'], label='Resnet101 Cartesian', color='blue')\nax.plot(data['Rotation'], label='Rotation invariance', color='orange')\n\n# Set the title and labels\nax.set_title('Model Performance Metrics')\nax.set_xlabel('Rotation angle (\u00b0)')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, 0.5), 1.0, 1.0, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1.0, 1.0, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((-0.5, -0.5), 1.0, 1.0, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, -0.5), 1.0, 1.0, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the title of the plot\nax.set_title('a')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny = [10, 20, 30, 40, 50]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = [10, 20, 30, 40, 50]\nlabels = ['A', 'B', 'C', 'D', 'E']\nax.pie(x, labels=labels)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30)\n\n# Create a bar chart with random data\nx = ['A', 'B', 'C', 'D', 'E']\ny"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Create a bar chart\nax.bar(categories, values, color='navy')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of News Articles')\nax.set_xlabel('Categories')\nax.set_ylabel('Sentiment Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Success Rate of Adversarial Circuits')\n\n# Set the x-axis label\nax.set_xlabel('Number of Successful Adversarial Circuits')\n\n# Set the y-axis label\nax.set_ylabel('Adversarial Circuit')\n\n# Create a bar chart with the data\nbars = ax.bar(range(5), [45, 55, 50, 40, 35], color='blue', edgecolor='black')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-ticks to be the names of the circuits\nax.set_xticks(range(5))\nax.set_xticklabels(['c1355', 'c1908', 'c2670', 'c3540', 'c4000'])\n\n# Set the y-limits\nax.set_ylim([0, 60])\n\n# Set the y-ticks\nax.set_yticks(range(0, 61, 10))\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data for the first plot\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 20, 40, 60, 80, 100]\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Fill the area under the curve with a color\nax.fill_between(x, y, color='skyblue')\n\n# Add a title and labels\nax.set_title('Cumulative Knowledge Increase by Study Area')\nax.set_xlabel('Study Level')\nax.set_ylabel('Knowledge Increase (%)')\n\n# Create a second plot next to the first one\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data for the second plot\nx = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance']\ny = [250, 200, 270, 150, 120, 180, 220]\n\n# Plot the data\nax.bar(x, y, color='royalblue')\n\n# Add a title and labels\nax.set_title('Number of Publications by Domain')\nax.set_xlabel('Domain')\nax.set_ylabel('Number of Publications')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the graph\nax.set_title('Technological Advancements')\n\n# Set the labels for the x-axis\nx_labels = ['2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022']\n\n# Set the values for the y-axis\ny_values = [30, 40, 50, 60, 70, 80, 90, 100]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green']\n\n# Create the bar chart\nbars = ax.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the second section\nax2 = fig.add_subplot(212)\nax2.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax2.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the third section\nax3 = fig.add_subplot(212)\nax3.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax3.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the fourth section\nax4 = fig.add_subplot(212)\nax4.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax4.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the fifth section\nax5 = fig.add_subplot(212)\nax5.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax5.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the sixth section\nax6 = fig.add_subplot(212)\nax6.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax6.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the seventh section\nax7 = fig.add_subplot(212)\nax7.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax7.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the eighth section\nax8 = fig.add_subplot(212)\nax8.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax8.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the ninth section\nax9 = fig.add_subplot(212)\nax9.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax9.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the tenth section\nax10 = fig.add_subplot(212)\nax10.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax10.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the eleventh section\nax11 = fig.add_subplot(212)\nax11.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax11.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twelfth section\nax12 = fig.add_subplot(212)\nax12.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax12.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the thirteenth section\nax13 = fig.add_subplot(212)\nax13.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax13.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the fourteenth section\nax14 = fig.add_subplot(212)\nax14.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax14.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the fifteenth section\nax15 = fig.add_subplot(212)\nax15.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax15.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the sixteenth section\nax16 = fig.add_subplot(212)\nax16.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax16.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the seventeenth section\nax17 = fig.add_subplot(212)\nax17.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax17.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the eighteenth section\nax18 = fig.add_subplot(212)\nax18.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax18.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the nineteenth section\nax19 = fig.add_subplot(212)\nax19.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax19.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twentieth section\nax20 = fig.add_subplot(212)\nax20.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax20.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twenty-first section\nax21 = fig.add_subplot(212)\nax21.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax21.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twenty-second section\nax22 = fig.add_subplot(212)\nax22.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax22.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twenty-third section\nax23 = fig.add_subplot(212)\nax23.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax23.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twenty-fourth section\nax24 = fig.add_subplot(212)\nax24.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax24.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twenty-fifth section\nax25 = fig.add_subplot(212)\nax25.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax25.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twenty-sixth section\nax26 = fig.add_subplot(212)\nax26.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax26.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twenty-seventh section\nax27 = fig.add_subplot(212)\nax27.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax27.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twenty-eighth section\nax28 = fig.add_subplot(212)\nax28.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n# Create the bar chart\nbars = ax28.bar(x_labels, y_values, color=bar_colors)\n\n# Set the title of the twenty-ninth section\nax29 = fig.add_subplot(212)\nax29.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Set the labels for the x-axis\nx_labels = ['Big Tech', 'Startups', 'Academia', 'Government']\n\n# Set the values for the y-axis\ny_values = [20, 30, 40, 50]\n\n# Set the colors for the bars\nbar_colors = ['blue', 'orange', 'green', 'red']\n\n#"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.9, 2.5, 2.7, 2.4, 2.6]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the graph\nax.set_title('Average Legal Crime Rates by Country')\n\n# Create a bar chart with the data\nbars = ax.bar(countries, crime_rates, color='orange')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Display the graph\nplt.show()\n\n# Data for the second graph\ncrimes = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\ncrime_rates = [170, 125, 130, 140, 110]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the graph\nax.set_title('Average Legal Crime Rates by Crime Type')\n\n# Create a bar chart with the data\nbars = ax.bar(crimes, crime_rates, color='teal')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Crime Type')\n\n# Set the y-axis label\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Display the graph\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the bar chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the bar chart\ncategories = ['Public School', 'Private School']\nvalues = [80, 20]\n\n# Create a bar chart with the data\nax.bar(categories, values, color='blue')\n\n# Set the title of the chart\nax.set_title('Student Performance in Schools')\n\n# Display the chart\nplt.show()\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the pie chart\ncategories = ['Books', 'Staff', 'Extracurricular', 'Facilities', 'Technology']\nvalues = [60, 40, 30, 20, 10]\n\n# Create a pie chart with the data\nax.pie(values, labels=categories, colors=['blue', 'gray', 'orange', 'lightgreen', 'orange'], autopct='%1.1f%%')\n\n# Set the title of the chart\nax.set_title('Resource Allocation in Schools')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first plot\nregions = ['Region 1', 'Region 2']\ntemperatures = [20, 22]\ncolors = ['lightblue', 'skyblue']\n\n# Create a bar chart for the first plot\nax.bar(regions, temperatures, color=colors)\n\n# Set the title of the first plot\nax.set_title('Average Annual Temperature')\n\n# Create a second plot with a scatter plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the second plot\nelevations = np.linspace(0, 2000, 100)\ndensities = np.sin(elevations / 100) * 1000 + 1000\n\n# Create a scatter plot for the second plot\nax.scatter(elevations, densities, c=densities, cmap='viridis')\n\n# Set the title of the second plot\nax.set_title('Geographical Elevation Distribution')\n\n# Add a colorbar to the second plot\ncbar = fig.colorbar(ax.collections[0])\ncbar.set_label('Density (kg/m^3)')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nyears = [2019, 2020, 2021, 2022]\ntotal_investment = [400, 350, 300, 250]\nstock_investment = [200, 180, 160, 140]\nbond_investment = [150, 130, 110, 90]\nreal_estate_investment = [100, 80, 60, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(years, total_investment, label='Total Investment')\nax.plot(years, stock_investment, label='Stocks')\nax.plot(years, bond_investment, label='Bonds')\nax.plot(years, real_estate_investment, label='Real Estate')\n\n# Set the title and labels\nax.set_title('Investment Growth Over Time')\nax.set_xlabel('Year')\nax.set_ylabel('Total Investment ($)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('AI Task Success Rates')\nax.set_xlabel('AI Model')\nax.set_ylabel('Success Rate (%)')\n\n# Create a bar chart with the success rates\nsuccess_rates = [85, 90, 95, 92]\nmodels = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\nax.bar(models, success_rates, color='skyblue')\n\n# Add a horizontal line at 80%\nax.axhline(y=80, color='gray', linestyle='-')\n\n# Create a second figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(10, 10))\nax2.set_title('Algorithm Efficiency Scores')\nax2.set_xlabel('AI Model')\nax2.set_ylabel('Efficiency (%)')\n\n# Create a scatter plot with the efficiency scores\nefficiency_scores = [90, 85, 95, 92]\nax2.scatter(models, efficiency_scores, color='pink')\n\n# Add a horizontal line at 90%\nax2.axhline(y=90, color='gray', linestyle='-')\n\n# Create a third figure and axis for the third plot\nfig3, ax3 = plt.subplots(figsize=(10, 10))\nax3.set_title('AI Model Adaptability')\nax3.set_xlabel('AI Model')\nax3.set_ylabel('Adaptability Score (%)')\n\n# Create a line graph with the adaptability scores\nadaptability_scores = [95, 90, 92, 95]\nax3.plot(models, adaptability_scores, color='green')\n\n# Add a horizontal line at 90%\nax3.axhline(y=90, color='gray', linestyle='-')\n\n# Create a fourth figure and axis for the conditions\nfig4, ax4 = plt.subplots(figsize=(10, 10))\nax4.set_title('Conditions')\nax4.set_xlabel('Condition')\nax4.set_ylabel('Score (%)')\n\n# Create a bar chart with the conditions\nconditions = ['Dry Conditions', 'Wet Conditions']\nscores = [85, 90]\nax4.bar(conditions, scores, color='green')\n\n# Add a horizontal line at 85%\nax4.axhline(y=85, color='gray', linestyle='-')\n\n# Create a fifth figure and axis for the models\nfig5, ax5 = plt.subplots(figsize=(10, 10))\nax5.set_title('Models')\nax5.set_xlabel('Model')\nax5.set_ylabel('Score (%)')\n\n# Create a scatter plot with the models\nmodels = ['Model A', 'Model B', 'Model C', 'Model D']\nscores = [95, 90, 92, 95]\nax5.scatter(models, scores, color='blue')\n\n# Add a horizontal line at 90%\nax5.axhline(y=90, color='gray', linestyle='-')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Traffic Volume by Time of Day\ntime_of_day = ['Morning', 'Evening']\ntraffic_volume = [200, 150]\nplt.figure(figsize=(10, 5))\nplt.bar(time_of_day, traffic_volume, color='coral')\nplt.title('Traffic Volume by Time of Day')\nplt.xlabel('Time of Day')\nplt.ylabel('Number of Vehicles')\n\n# Speed Distribution by Location\nlocations = ['Urban', 'Highway']\nspeeds = [80, 60]\nplt.figure(figsize=(10, 5))\nplt.pie(speeds, labels=locations, colors=['skyblue', 'darkblue'], autopct='%1.1f%%')\nplt.title('Speed Distribution by Location')\n\n# Elevation Changes Along a Route\nelevations = np.linspace(0, 1000, 100)\nplt.figure(figsize=(10, 5))\nplt.plot(elevations, elevations**2, color='purple')\nplt.title('Elevation Changes Along a Route')\nplt.xlabel('Distance (m)')\nplt.ylabel('Elevation (m)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first plot\narts = ['Literature', 'Performing Arts', 'Visual Arts']\npercentages = [10, 30, 25]\ncolors = ['#f8d7da', '#c3e6cb', '#c3e6cb']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(percentages, labels=arts, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the first plot\nax.set_title('Distribution of Arts Education Programs')\n\n# Create a second plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the second plot\ntechniques = ['Expression', 'Collaboration', 'Creativity', 'Dedication']\nperformance = [0.4, 0.6, 0.2, 0.8]\ncolors = ['#b0bec5', '#bbdefb', '#bbdefb', '#b0bec5']\n\n# Create a radar chart\nangles = np.linspace(0, 2 * np.pi, len(techniques), endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\nperformance += performance[:1]  # To close the loop\n\n# Draw the radar chart\nax.plot(angles, performance, linewidth=1, linestyle='solid')\nax.fill(angles, performance, 'b', alpha=0.1)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(techniques)\nax.set_yticks([0.2, 0.4, 0.6, 0.8])\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8'])\nax.set_title('Student Performance in Arts Education')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the sales data\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the sales data\nsales_data = [25000, 20000, 15000, 10000, 5000, 0]\nsales_probabilities = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\n\n# Plot the sales data\nax.bar(sales_probabilities, sales_data, color='green')\n\n# Add labels and title\nax.set_xlabel('Sale Probability')\nax.set_ylabel('Number of Sales')\nax.set_title('Sales Data')\n\n# Create a second subplot for the product ratings\nfig2, ax2 = plt.subplots(figsize=(10, 5))\n\n# Define the product ratings\nproduct_ratings = [90, 80, 70, 60, 50, 40, 30, 20, 10, 0]\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F', 'Product G', 'Product H', 'Product I', 'Product J']\n\n# Plot the product ratings\nax2.barh(products, product_ratings, color='blue')\n\n# Add labels and title\nax2.set_xlabel('User Ratings')\nax2.set_ylabel('Products')\nax2.set_title('Product Ratings')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Histogram of Stock Returns')\n\n# Create a histogram with 20 bins\nax.hist([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], bins=20)\n\n# Set the x-axis label\nax.set_xlabel('Returns')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = np.linspace(-4, 4, 100)\ny = np.sin(x)\n\n# Data for the second graph\nx2 = np.linspace(-4, 4, 100)\ny2 = np.cos(x2)\n\n# Create the first graph\nfig, ax = plt.subplots(figsize=(8, 6))\nax.plot(x, y, 'b-')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Energy Consumption (GWh)')\nax.set_title('Energy Consumption over Time')\n\n# Create the second graph\nfig, ax = plt.subplots(figsize=(8, 6))\nax.plot(x2, y2, 'r-')\nax.set_xlabel('Relative Month')\nax.set_ylabel('Renewable Energy Ratio (%)')\nax.set_title('Renewable Energy Ratio over Time')\n\nplt.show()"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15, 35, 30, 20]\ncolors = ['#f0e68c', '#ffa07a', '#add8e6', '#90ee90']\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Create a scatter plot for the timeline\nfig, ax = plt.subplots(figsize=(10, 4))\nyears = [1400, 1600, 1800, 2000]\ndocuments = [150, 250, 350, 450]\ncolors = ['purple', 'purple', 'purple', 'purple']\nmarkers = ['o', 'o', 'o', 'o']\n\n# Create the scatter plot\nfor i in range(len(years)):\n    ax.scatter(years[i], documents[i], color=colors[i], marker=markers[i])\n\n# Set the title and labels\nax.set_title('Document Count Over Historical Periods')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Documents')\n\n# Set the x-axis limits\nax.set_xlim(1200, 2200)\n\n# Set the y-axis limits\nax.set_ylim(100, 500)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the scatter plot\nx = [2000, 2005, 2010, 2015, 2020]\ny = [9.25, 9.00, 8.75, 8.50, 8.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Scatter plot\nax.scatter(x, y, color='blue')\n\n# Set the title of the plot\nax.set_title('Luxury Brand Popularity vs Price')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Average Price ($)')\nax.set_ylabel('Popularity Index')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\naccuracy = [75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.3"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = range(26)\ny1 = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4]\ny2 = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4]\ny3 = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4]\ny4 = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4]\ny5 = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 9.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Random')\nax.plot(x, y2, 'g-', label='Sobol')\nax.plot(x, y3, 'r-', label='HCube')\nax.plot(x, y4, 'm-', label='No Context')\nax.plot(x, y5, 'c-', label='Partial Context')\n\n# Set the title and labels\nax.set_title('Monte Carlo Simulation Results')\nax.set_xlabel('Trials')\nax.set_ylabel('Average Regret')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ngpt35 = [200, 250, 300, 350, 400]\ngpt35_turbo = [180, 230, 280, 330, 380]\nclaude13 = [190, 240, 290, 340, 390]\nclaude21 = [170, 220, 270, 320, 370]\nclaude41 = [160, 210, 260, 310, 360]\ngpt4t = [150, 200, 250, 300, 350]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot the Elo Rating - Incorrect Rating graph\naxs[0].plot(gpt35, gpt35_turbo, 'ro-', label='GPT-3.5-Turbo')\naxs[0].plot(claude13, claude21, 'go-', label='Claude 1.3')\naxs[0].plot(claude41, claude41, 'bo-', label='Claude 4.1')\naxs[0].set_xlabel('Elo Rating')\naxs[0].set_ylabel('Incorrect Rating')\naxs[0].legend()\n\n# Plot the Aggregate Elo Rating - Correct Rating graph\naxs[1].plot(gpt35, gpt35_turbo, 'ro-', label='GPT-3.5-Turbo')\naxs[1].plot(claude13, claude21, 'go-', label='Claude 1.3')\naxs[1].plot(claude41, claude41, 'bo-', label='Claude 4.1')\naxs[1].set_xlabel('Aggregate Elo Rating')\naxs[1].set_ylabel('Correct Rating')\naxs[1].legend()\n\n# Plot the Judge Accuracy graph\naxs[2].plot(gpt35, gpt35_turbo, 'ro-', label='GPT-3.5-Turbo')\naxs[2].plot(claude13, claude21, 'go-', label='Claude 1.3')\naxs[2].plot(claude41, claude41, 'bo-', label='Claude 4.1')\naxs[2].set_xlabel('Judge Accuracy (%)')\naxs[2].set_ylabel('Aggregate Elo Rating')\naxs[2].legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5', 'Category 6']\nsizes = [4.6, 10.6, 11.3, 13.2, 29.8, 30.5]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0', '#ffb3e6']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Matplotlib bakery: A donut')\n\n# Create a donut chart\ndonut = [90, 25, 10]\nlabels = ['sugar', 'flour', 'yeast']\ncolors = ['#ff9933', '#ffcc33', '#99ff33']\nexplode = (0.1, 0, 0)\nwedges, texts, autotexts = ax.pie(donut, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Add a rectangle for the dough\ndough = [100, 10, 10]\ncolors = ['#3366ff', '#ff3333', '#33ccff']\nexplode = (0.1, 0, 0)\nwedges, texts, autotexts = ax.pie(dough, explode=explode, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Add a rectangle for the filling\nfilling = [50, 25, 25]\ncolors = ['#3399ff', '#ff6633', '#33ff33']\nexplode = (0.1, 0, 0)\nwedges, texts, autotexts = ax.pie(filling, explode=explode, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Add a rectangle for the glaze\nglaze = [50, 50]\ncolors = ['#9933ff', '#ff33ff']\nexplode = (0.1, 0)\nwedges, texts, autotexts = ax.pie(glaze, explode=explode, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Add a rectangle for the butter\nbutter = [60]\ncolors = ['#9933ff']\nexplode = (0.1,)\nwedges, texts, autotexts = ax.pie(butter, explode=explode, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Add a rectangle for the egg\negg = [1]\ncolors = ['#ff3333']\nexplode = (0.1,)\nwedges, texts, autotexts = ax.pie(egg, explode=explode, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Add a rectangle for the yeast\nyeast = [1/2]\ncolors = ['#ff3333']\nexplode = (0.1,)\nwedges, texts, autotexts = ax.pie(yeast, explode=explode, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Add a rectangle for the milk\nmilk = [100]\ncolors = ['#ff3333']\nexplode = (0.1,)\nwedges, texts, autotexts = ax.pie(milk, explode=explode, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for each category\ncategories = ['Entertainment', 'Utilities', 'Others', 'Food', 'Transport']\nvalues = [10, 16.7, 37.5, 29.2, 41.7]\ncolors = ['#FFD700', '#90EE90', '#ADD8E6', '#FFA07A', '#87CEEB']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8, 8))\nwedges, texts, autotexts = ax.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a title\nax.set_title('Expenses - Company vs. Project')\n\n# Add a legend\nax.legend(wedges, categories,\n          title=\"Categories\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nlora_sizes = [31.4, 15.7, 19.9, 33.0]\nlora_colors = ['#f9c2ff', '#a8dadc', '#45b39d', '#f4a261']\n\n# Data for QLoRA\nqlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nqlora_sizes = [54.8, 10.5, 6.3, 28.4]\nqlora_colors = ['#f9c2ff', '#a8dadc', '#45b39d', '#f4a261']\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting LoRA\naxs[0].pie(lora_sizes, labels=lora_labels, colors=lora_colors, autopct='%1.1f%%', startangle=90)\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(qlora_sizes, labels=qlora_labels, colors=qlora_colors, autopct='%1.1f%%', startangle=90)\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ndata1 = [25.1, 26.4, 12.6, 15.9]\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Data for the second chart\ndata2 = [46.2, 4.6, 5.3, 23.9]\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 8.0))\n\n# First chart\naxs[0].pie(data1, labels=labels1, startangle=90, colors=['yellow', 'green', 'orange', 'gray'], autopct='%1.1f%%')\naxs[0].set_title('Full Finetuning')\n\n# Second chart\naxs[1].pie(data2, labels=labels2, startangle=90, colors=['yellow', 'green', 'orange', 'gray'], autopct='%1.1f%%')\naxs[1].set_title('QLoRA')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the pie chart\nlabels = ['Fruits', 'Grains', 'Vegetables', 'Proteins']\nsizes = [25, 10, 20, 35]\ncolors = ['#f8d7da', '#ffc107', '#c3e6cb', '#b0bec5']\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Market Share by Sector - External vs. Internal')\n\n# Define the data for the pie chart\nlabels = ['E-commerce', 'Education', 'Entertainment', 'Technology']\nsizes = [31.2, 28.6, 35.7, 37.5]\ncolors = ['#f9c74f', '#f4a261', '#42d392', '#66b2ff']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Dogs', 'Cats', 'Birds', 'Fish']\nsizes = [45, 20, 15, 20]\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#90EE90']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['David', 'John', 'Mary', 'Peter']\nsizes = [40, 29, 20, 11]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['France', 'Germany', 'Italy']\nsizes = [18, 12, 28]\ncolors = ['#FFA500', '#0000FF', '#DC143C']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\nsizes = [26.2, 21.4, 19.0, 14.3, 13.3]\ncolors = ['#f8d7da', '#f8bbd0', '#f06292', '#e53935', '#d32f2f']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set the title of the chart\nax.set_title('Slice of a pie chart')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [12.4, 35.4, 17.2, 24.7, 10.3]\ncolors = ['#0080ff', '#00cc00', '#8080ff', '#ff8000', '#ffa500']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 10, 55]\ncolors = ['#add8e6', '#87cefa', '#add8e6', '#4682b4', '#000000']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8, 6))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Social Media Usage')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP', 'ACL']\nsizes = [25.4, 7.4, 20.3, 12.2, 34.7]\ncolors = ['#8e44ad', '#c0392b', '#2ecc71', '#3498db', '#f1c40f']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the pie chart\nlabels = ['Coal', 'Hydro', 'Wind']\nsizes = [25.0, 15.0, 30.0]\ncolors = ['#8B4513', '#00008B', '#008000']\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Energy Consumption - National vs. Project')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Global Stock Market Sentiment')\n\n# Define the x-axis labels\nx_labels = ['English', 'French', 'German', 'Chinese', 'Korean', 'Japanese']\n\n# Define the y-axis values\ny_values = [-4.00, -3.22, -2.44, -4.00, -4.75, -4.00]\n\n# Plot the data\nax.plot(x_labels, y_values, marker='o', linestyle='-', color='red')\n\n# Add a grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Language Proficiency Scores')\n\n# Set the x-axis label\nax.set_xlabel('Language')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Define the data for the plot\nlanguages = ['English', 'French', 'German']\nscores = [-4.00, -3.22, -2.44]\n\n# Plot the data\nax.plot(languages, scores, 'ro-')\n\n# Add a legend\nax.legend(['Out-group bias (Collectivism)'])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='SINDy Learned Field')\nax.plot(x, y2, 'r-', label='Train Sample')\n\n# Add labels and title\nax.set_xlabel('X1')\nax.set_ylabel('X2')\nax.set_title('SINDy Model')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207VF (Small \u03c1)')\n\n# Define the grid points\nx = np.linspace(-1, 1, 20)\ny = np.linspace(-1, 1, 20)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field\nU = -np.sin(np.pi*X) * np.cos(np.pi*Y)\nV = np.cos(np.pi*X) * np.sin(np.pi*Y)\n\n# Plot the vector field\nQ = ax.quiver(X, Y, U, V, color='b', scale=30)\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a grid of points\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the magnetic field vector function\ndef B(x, y):\n    return np.array([-y, x])\n\n# Calculate the magnitude of the magnetic field\nB_magnitude = np.sqrt(B(X, Y)[0]**2 + B(X, Y)[1]**2)\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the magnetic field vector field\nax.quiver(X, Y, B(X, Y)[0], B(X, Y)[1], B_magnitude, cmap='viridis')\n\n# Set the title of the plot\nax.set_title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Set the limits of the plot\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('TextVQA', color='red')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the limits for the x-axis and y-axis\nax.set_xlim([0, 100])\nax.set_ylim([0, 100])\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the color of the plot\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set_ylabel('Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')', color='green')\n\n# Set the color of the tick labels\nax.set_xticklabels(['Text(0.1, 100.0, \\'TextVQA\\')'], color='yellow')\nax.set_yticklabels(['Text(0.7747361451096296, 100.064278760986865, \\'SQA-I\\')'], color='cyan')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.set_tick_params(colors='black')\n\n# Set the color of the title\nax.set_title('TextVQA', color='red')\n\n# Set the color of the labels\nax.set_xlabel('Text(0.1, 100.0, \\'TextVQA\\')', color='blue')\nax.set"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5, 5))\n\n# Define the speed-up ratio\nspeed_up_ratio = 4\n\n# Define the colors for each region\ncolors = ['pink', 'green', 'blue', 'cyan']\n\n# Define the labels for each region\nlabels = ['DeeBET', 'PABEE', 'CascadeL', 'Other']\n\n# Define the data for each region\ndata = [20, 40, 60, 80]\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(data, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title of the chart\nax.set_title('XNLI (speed-up ratio: {})'.format(speed_up_ratio))\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Interference')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightblue')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lightgreen')\nax.add_artist(rectangle)\n\n# Create a hexagon patch\nhexagon = plt.Polygon([[0.1, 0.1], [0.3, 0.1], [0.2, 0.3], [0.1, 0.5], [0.3, 0.5], [0.2, 0.7]], color='lightyellow')\nax.add_artist(hexagon)\n\n# Create a star patch\nstar = plt.Polygon([[0.5, 0.1], [0.4, 0.3], [0.6, 0.3], [0.5, 0.5], [0.4, 0.7], [0.6, 0.7], [0.5, 0.9]], color='lightgray')\nax.add_artist(star)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Define the data for the scatter plot\nx = np.linspace(0, 1, 100)\ny = np.sin(2 * np.pi * x)\n\n# Plot the scatter plot with a blue color\nax.scatter(x, y, c='blue')\n\n# Set the title of the plot\nax.set_title('My Scatter Plot', color='white')\n\n# Set the labels of the axes\nax.set_xlabel('X-axis', color='white')\nax.set_ylabel('Y-axis', color='white')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Define the categories and their corresponding colors\ncategories = ['novel', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event']\ncolors = ['blue', 'green', 'red', 'purple', 'orange', 'cyan', 'magenta']\n\n# Create a pie chart with the categories and colors\nwedges, texts, autotexts = ax.pie([1]*len(categories), labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a title to the plot\nax.set_title('My Favorite Things')\n\n# Add a legend to the plot\nax.legend(wedges, categories,\n          title=\"Categories\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Roleplay')\n\n# Define the colors for each subject\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Define the subjects\nsubjects = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'Humanities', 'STEM']\n\n# Define the number of students\nnum_students = 10\n\n# Define the scores\nscores = [np.random.randint(50, 100) for _ in range(num_students)]\n\n# Create a scatter plot\nscatter = ax.scatter(range(num_students), scores, c=colors, s=100)\n\n# Add labels to the scatter plot\nfor i, txt in enumerate(subjects):\n    ax.annotate(txt, (i, scores[i]))\n\n# Set the limits of the x-axis\nax.set_xlim(-1, num_students+1)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 100)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Draw a circle around the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle for the label 'Labeling'\nlabeling = plt.Rectangle((0.2, 0.7), 0.6, 0.1, color='orange')\nax.add_patch(labeling)\n\n# Draw a rectangle for the label 'Material'\nmaterial = plt.Rectangle((0.2, 0.6), 0.6, 0.1, color='green')\nax.add_patch(material)\n\n# Draw a rectangle for the label 'Storage'\nstorage = plt.Rectangle((0.2, 0.5), 0.6, 0.1, color='red')\nax.add_patch(storage)\n\n# Draw a rectangle for the label 'Compliance'\ncompliance = plt.Rectangle((0.2, 0.4), 0.6, 0.1, color='blue')\nax.add_patch(compliance)\n\n# Draw a rectangle for the label 'Nutrition'\nnutrition = plt.Rectangle((0.2, 0.3), 0.6, 0.1, color='yellow')\nax.add_patch(nutrition)\n\n# Draw a rectangle for the label 'Purity'\npurity = plt.Rectangle((0.2, 0.2), 0.6, 0.1, color='pink')\nax.add_patch(purity)\n\n# Draw a rectangle for the label 'Allergen'\nallergen = plt.Rectangle((0.2, 0.1), 0.6, 0.1, color='purple')\nax.add_patch(allergen)\n\n# Draw a rectangle for the label 'Pollution'\npollution = plt.Rectangle((0.2, 0.9), 0.6, 0.1, color='brown')\nax.add_patch(pollution)\n\n# Draw a rectangle for the label 'Recall'\nrecall = plt.Rectangle((0.2, 0.8), 0.6, 0.1, color='cyan')\nax.add_patch(recall)\n\n# Draw a rectangle for the label 'Nestle'\nnestle = plt.Rectangle((0.2, 0.75), 0.1, 0.1, color='red')\nax.add_patch(nestle)\n\n# Draw a rectangle for the label 'MUJI'\nmuji = plt.Rectangle((0.2, 0.7), 0.1, 0.1, color='green')\nax.add_patch(muji)\n\n# Draw a rectangle for the label 'Logo'\nlogo = plt.Rectangle((0.2, 0.65), 0.1, 0.1, color='black')\nax.add_patch(logo)\n\n# Draw a rectangle for the label 'Product'\nproduct = plt.Rectangle((0.2, 0.6), 0.1, 0.1, color='black')\nax.add_patch(product)\n\n# Draw a rectangle for the label 'Customer'\ncustomer = plt.Rectangle((0.2, 0.55), 0.1, 0.1, color='black')\nax.add_patch(customer)\n\n# Draw a rectangle for the label 'Employee'\nemployee = plt.Rectangle((0.2, 0.5), 0.1, 0.1, color='black')\nax.add_patch(employee)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, 0.45), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, 0.4), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, 0.35), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, 0.3), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, 0.25), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, 0.2), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, 0.15), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, 0.1), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, 0.05), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, 0.0), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -0.05), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -0.1), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -0.15), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -0.2), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -0.25), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -0.3), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -0.35), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -0.4), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -0.45), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -0.5), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -0.55), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -0.6), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -0.65), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -0.7), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -0.75), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -0.8), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -0.85), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -0.9), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -0.95), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -1.0), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -1.05), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -1.1), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -1.15), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -1.2), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -1.25), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -1.3), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -1.35), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -1.4), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -1.45), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -1.5), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -1.55), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -1.6), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -1.65), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -1.7), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -1.75), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -1.8), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -1.85), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -1.9), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -1.95), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -2.0), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -2.05), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -2.1), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -2.15), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -2.2), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -2.25), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -2.3), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -2.35), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -2.4), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -2.45), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -2.5), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -2.55), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -2.6), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -2.65), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -2.7), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -2.75), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -2.8), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -2.85), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -2.9), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\nmanufacturer = plt.Rectangle((0.2, -2.95), 0.1, 0.1, color='black')\nax.add_patch(manufacturer)\n\n# Draw a rectangle for the label 'Retailer'\nretailer = plt.Rectangle((0.2, -3.0), 0.1, 0.1, color='black')\nax.add_patch(retailer)\n\n# Draw a rectangle for the label 'Supplier'\nsupplier = plt.Rectangle((0.2, -3.05), 0.1, 0.1, color='black')\nax.add_patch(supplier)\n\n# Draw a rectangle for the label 'Consumer'\nconsumer = plt.Rectangle((0.2, -3.1), 0.1, 0.1, color='black')\nax.add_patch(consumer)\n\n# Draw a rectangle for the label 'Regulator'\nregulator = plt.Rectangle((0.2, -3.15), 0.1, 0.1, color='black')\nax.add_patch(regulator)\n\n# Draw a rectangle for the label 'Manufacturer'\n"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Define the data for the world map\nworld_data = {\n    'Europe': 85.8,\n    'China': 78.7,\n    'India': 71.9,\n    'Brazil': 85.0,\n    'USA': 76.4\n}\n\n# Define the data for the tech companies\ntech_data = {\n    'Apple': 83.2,\n    'Samsung': 78.7,\n    'Huawei': 76.1\n}\n\n# Define the data for the sports teams\nsports_data = {\n    'NBA': 80.9,\n    'NFL': 76.4,\n    'MLB': 74.9\n}\n\n# Define the data for the music artists\nmusic_data = {\n    'Taylor Swift': 86.4,\n    'Ed Sheeran': 84.9,\n    'Ariana Grande': 82.0\n}\n\n# Define the data for the movies\nmovie_data = {\n    'Inception': 78.1,\n    'The Dark Knight': 76.1,\n    'The Godfather': 74.9\n}\n\n# Define the data for the books\nbook_data = {\n    'To Kill a Mockingbird': 78.1,\n    '1984': 76.1,\n    'Pride and Prejudice': 74.9\n}\n\n# Define the data for the games\ngame_data = {\n    'Fortnite': 78.1,\n    'Call of Duty': 76.1,\n    'Minecraft': 74.9\n}\n\n# Define the data for the restaurants\nrestaurant_data = {\n    'McDonalds': 78.1,\n    'KFC': 76.1,\n    'Burger King': 74.9\n}\n\n# Define the data for the fashion brands\nfashion_data = {\n    'Nike': 78.1,\n    'Adidas': 76.1,\n    'Puma': 74.9\n}\n\n# Define the data for the travel destinations\ntravel_data = {\n    'Paris': 78.1,\n    'Tokyo': 76.1,\n    'Rome': 74.9\n}\n\n# Define the data for the financial institutions\nfinancial_data = {\n    'Bank of America': 78.1,\n    'Wells Fargo': 76.1,\n    'Chase': 74.9\n}\n\n# Define the data for the social media platforms\nsocial_media_data = {\n    'Facebook': 78.1,\n    'Twitter': 76.1,\n    'Instagram': 74.9\n}\n\n# Define the data for the news sources\nnews_data = {\n    'CNN': 78.1,\n    'BBC': 76.1,\n    'Al Jazeera': 74.9\n}\n\n# Define the data for the sports leagues\nsports_league_data = {\n    'NFL': 78.1,\n    'NBA': 76.1,\n    'MLB': 74.9\n}\n\n# Define the data for the music genres\nmusic_genre_data = {\n    'Pop': 78.1,\n    'Rock': 76.1,\n    'Hip hop': 74.9\n}\n\n# Define the data for the movie genres\nmovie_genre_data = {\n    'Action': 78.1,\n    'Comedy': 76.1,\n    'Drama': 74.9\n}\n\n# Define the data for the book genres\nbook_genre_data = {\n    'Fiction': 78.1,\n    'Non-fiction': 76.1,\n    'Science fiction': 74.9\n}\n\n# Define the data for the game genres\ngame_genre_data = {\n    'Action': 78.1,\n    'Adventure': 76.1,\n    'Strategy': 74.9\n}\n\n# Define the data for the restaurant cuisines\nrestaurant_cuisine_data = {\n    'American': 78.1,\n    'Italian': 76.1,\n    'Chinese': 74.9\n}\n\n# Define the data for the fashion styles\nfashion_style_data = {\n    'Streetwear': 78.1,\n    'Boho': 76.1,\n    'Minimalist': 74.9\n}\n\n# Define the data for the travel experiences\ntravel_experience_data = {\n    'Beach': 78.1,\n    'Mountain': 76.1,\n    'City': 74.9\n}\n\n# Define the data for the financial products\nfinancial_product_data = {\n    'Savings account': 78.1,\n    'Credit card': 76.1,\n    'Investment account': 74.9\n}\n\n# Define the data for the social media trends\nsocial_media_trend_data = {\n    'AI': 78.1,\n    'Virtual reality': 76.1,\n    'Augmented reality': 74.9\n}\n\n# Define the data for the news topics\nnews_topic_data = {\n    'Politics': 78.1,\n    'Sports': 76.1,\n    'Entertainment': 74.9\n}\n\n# Define the data for the sports events\nsports_event_data = {\n    'Super Bowl': 78.1,\n    'World Cup': 76.1,\n    'Olympics': 74.9\n}\n\n# Define the data for the music concerts\nmusic_concert_data = {\n    'Coachella': 78.1,\n    'Glastonbury': 76.1,\n    'Lollapalooza': 74.9\n}\n\n# Define the data for the movie premieres\nmovie_premiere_data = {\n    'Cannes Film Festival': 78.1,\n    'Venice Film Festival': 76.1,\n    'Berlin International Film Festival': 74.9\n}\n\n# Define the data for the book launches\nbook_launch_data = {\n    'New York Times Best Seller': 78.1,\n    'Pulitzer Prize Winner': 76.1,\n    'Man Booker Prize Winner': 74.9\n}\n\n# Define the data for the game releases\ngame_release_data = {\n    'E3': 78.1,\n    'GDC': 76.1,\n    'TGA Awards': 74.9\n}\n\n# Define the data for the restaurant openings\nrestaurant_opening_data = {\n    'New York City': 78.1,\n    'Los Angeles': 76.1,\n    'Chicago': 74.9\n}\n\n# Define the data for the fashion shows\nfashion_show_data = {\n    'Met Gala': 78.1,\n    'Fashion Week': 76.1,\n    'Red Carpet': 74.9\n}\n\n# Define the data for the travel packages\ntravel_package_data = {\n    'All-inclusive': 78.1,\n    'Luxury': 76.1,\n    'Adventure': 74.9\n}\n\n# Define the data for the financial services\nfinancial_service_data = {\n    'Online banking': 78.1,\n    'Mobile banking': 76.1,\n    'ATM services': 74.9\n}\n\n# Define the data for the social media influencers\nsocial_media_influencer_data = {\n    'Kylie Jenner': 78.1,\n    'Kim Kardashian': 76.1,\n    'Lil Nas X': 74.9\n}\n\n# Define the data for the news sources\nnews_source_data = {\n    'CNN': 78.1,\n    'BBC': 76.1,\n    'Al Jazeera': 74.9\n}\n\n# Define the data for the sports leagues\nsports_league_data = {\n    'NFL': 78.1,\n    'NBA': 76.1,\n    'MLB': 74.9\n}\n\n# Define the data for the music genres\nmusic_genre_data = {\n    'Pop': 78.1,\n    'Rock': 76.1,\n    'Hip hop': 74.9\n}\n\n# Define the data for the movie genres\nmovie_genre_data = {\n    'Action': 78.1,\n    'Comedy': 76.1,\n    'Drama': 74.9\n}\n\n# Define the data for the book genres\nbook_genre_data = {\n    'Fiction': 78.1,\n    'Non-fiction': 76.1,\n    'Science fiction': 74.9\n}\n\n# Define the data for the game genres\ngame_genre_data = {\n    'Action': 78.1,\n    'Adventure': 76.1,\n    'Strategy': 74.9\n}\n\n# Define the data for the restaurant cuisines\nrestaurant_cuisine_data = {\n    'American': 78.1,\n    'Italian': 76.1,\n    'Chinese': 74.9\n}\n\n# Define the data for the fashion styles\nfashion_style_data = {\n    'Streetwear': 78.1,\n    'Boho': 76.1,\n    'Minimalist': 74.9\n}\n\n# Define the data for the travel experiences\ntravel_experience_data = {\n    'Beach': 78.1,\n    'Mountain': 76.1,\n    'City': 74.9\n}\n\n# Define the data for the financial products\nfinancial_product_data = {\n    'Savings account': 78.1,\n    'Credit card': 76.1,\n    'Investment account': 74.9\n}\n\n# Define the data for the social media trends\nsocial_media_trend_data = {\n    'AI': 78.1,\n    'Virtual reality': 76.1,\n    'Augmented reality': 74.9\n}\n\n# Define the data for the news topics\nnews_topic_data = {\n    'Politics': 78.1,\n    'Sports': 76.1,\n    'Entertainment': 74.9\n}\n\n# Define the data for the sports events\nsports_event_data = {\n    'Super Bowl': 78.1,\n    'World Cup': 76.1,\n    'Olympics': 74.9\n}\n\n# Define the data for the music concerts\nmusic_concert_data = {\n    'Coachella': 78.1,\n    'Glastonbury': 76.1,\n    'Lollapalooza': 74.9\n}\n\n# Define the data for the movie premieres\nmovie_premiere_data = {\n    'Cannes Film Festival': 78.1,\n    'Venice Film Festival': 76.1,\n    'Berlin International Film Festival': 74.9\n}\n\n# Define the data for the book launches\nbook_launch_data = {\n    'New York Times Best Seller': 78.1,\n    'Pulitzer Prize Winner': 76.1,\n    'Man Booker Prize Winner': 74.9\n}\n\n# Define the data for the game releases\ngame_release_data = {\n    'E3': 78.1,\n    'GDC': 76.1,\n    'TGA Awards': 74.9\n}\n\n# Define the data for the restaurant openings\nrestaurant_opening_data = {\n    'New York City': 78.1,\n    'Los Angeles': 76.1,\n    'Chicago': 74.9\n}\n\n# Define the data for the fashion shows\nfashion_show_data = {\n    'Met Gala': 78.1,\n    'Fashion Week': 76.1,\n    'Red Carpet': 74.9\n}\n\n# Define the data for the travel packages\ntravel_package_data = {\n    'All-inclusive': 78.1,\n    'Luxury': 76.1,\n    'Adventure': 74.9\n}\n\n# Define the data for the financial services\nfinancial_service_data = {\n    'Online banking': 78.1,\n    'Mobile banking': 76.1,\n    'ATM services': 74.9\n}\n\n# Define the data for the social media influencers\nsocial_media_influencer_data = {\n    'Kylie Jenner': 78.1,\n    'Kim Kardashian': 76.1,\n    'Lil Nas X': 74.9\n}\n\n# Define the data for the news sources\nnews_source_data = {\n    'CNN': 78.1,\n    'BBC': 76.1,\n    'Al Jazeera': 74.9\n}\n\n# Define the data for the sports leagues\nsports_league_data = {\n    'NFL': 78.1,\n    'NBA': 76.1,\n    'MLB': 74.9\n}\n\n# Define the data for the music genres\nmusic_genre_data = {\n    'Pop': 78.1,\n    'Rock': 76.1,\n    'Hip hop': 74.9\n}\n\n# Define the data for the movie genres\nmovie_genre_data = {\n    'Action': 78.1,\n    'Comedy': 76.1,\n    'Drama': 74.9\n}\n\n# Define the data for the book genres\nbook_genre_data = {\n    'Fiction': 78.1,\n    'Non-fiction': 76.1,\n    'Science fiction': 74.9\n}\n\n# Define the data for the game genres\ngame_genre_data = {\n    'Action': 78.1,\n    'Adventure': 76.1,\n    'Strategy': 74.9\n}\n\n# Define the data for the restaurant cuisines\nrestaurant_cuisine_data = {\n    'American': 78.1,\n    'Italian': 76.1,\n    'Chinese': 74.9\n}\n\n# Define the data for the fashion styles\nfashion_style_data = {\n    'Streetwear': 78.1,\n    'Boho': 76.1,\n    'Minimalist': 74.9\n}\n\n# Define the data for the travel experiences\ntravel_experience_data = {\n    'Beach': 78.1,\n    'Mountain': 76.1,\n    'City': 74.9\n}\n\n# Define the data for the financial products\nfinancial_product_data = {\n    'Savings account': 78.1,\n    'Credit card': 76.1,\n    'Investment account': 74.9\n}\n\n# Define the data for the social media trends\nsocial_media_trend_data = {\n    'AI': 78.1,\n    'Virtual reality': 76.1,\n    'Augmented reality': 74.9\n}\n\n# Define the data for the news topics\nnews_topic_data = {\n    'Politics': 78.1,\n    'Sports': 76.1,\n    'Entertainment': 74.9\n}\n\n# Define the data for the sports events\nsports_event_data = {\n    'Super Bowl': 78.1,\n    'World Cup': 76.1,\n    'Olympics': 74.9\n}\n\n# Define the data for the music concerts\nmusic_concert_data = {\n    'Coachella': 78.1,\n    'Glastonbury': 76.1,\n    'Lollapalooza': 74.9\n}\n\n# Define the data for the movie premieres\nmovie_premiere_data = {\n    'Cannes Film Festival': 78.1,\n    'Venice Film Festival': 76.1,\n    'Berlin International Film Festival': 74.9\n}\n\n# Define the data for the book launches\nbook_launch_data = {\n    'New York Times Best Seller': 78.1,\n    'Pulitzer Prize Winner': 76.1,\n    'Man Booker Prize Winner': 74.9\n}\n\n# Define the data for the game releases\ngame_release_data = {\n    'E3': 78.1,\n    'GDC': 76.1,\n    'TGA Awards': 74.9\n}\n\n# Define the data for the restaurant openings\nrestaurant_opening_data = {\n    'New York City': 78.1,\n    'Los Angeles': 76.1,\n    'Chicago': 74.9\n}\n\n# Define the data for the fashion shows\nfashion_show_data = {\n    'Met Gala': 78.1,\n    'Fashion Week': 76.1,\n    'Red Carpet': 74.9\n}\n\n# Define the data for the travel packages\ntravel_package_data = {\n    'All-inclusive': 78.1,\n    'Luxury': 76.1,\n    'Adventure': 74.9\n}\n\n# Define the data for the financial services\nfinancial_service_data = {\n    'Online banking': 78.1,\n    'Mobile banking': 76.1,\n    'ATM services': 74.9\n}\n\n# Define the data for the social media influencers\nsocial_media_influencer_data = {\n    'Kylie Jenner': 78.1,\n    'Kim Kardashian': 76.1,\n    'Lil Nas X': 74.9\n}\n\n# Define the data for the news sources\nnews_source_data = {\n    'CNN': 78.1,\n    'BBC': 76.1,\n    'Al Jazeera': 74.9\n}\n\n# Define the data for the sports leagues\nsports_league_data = {\n    'NFL': 78.1,\n    'NBA': 76.1,\n    'MLB': 74.9\n}\n\n# Define the data for the music genres\nmusic_genre_data = {\n    'Pop': 78.1,\n    'Rock': 76.1,\n    'Hip hop': 74.9\n}\n\n# Define the data for the movie genres\nmovie_genre_data = {\n    'Action': 78.1,\n    'Comedy': 76.1,\n    'Drama': 74.9\n}\n\n# Define the data for the book genres"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the scatter plot\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([1, 2, 3, 4, 5])\n\n# Create a scatter plot with different colors for each point\nscatter = ax.scatter(x, y, c=['red', 'green', 'blue', 'yellow', 'purple'])\n\n# Add labels to the points\nfor i, txt in enumerate(['Extrusion', 'Injection', 'Blow Molding', 'Compression', 'Rotational']):\n    ax.annotate(txt, (x[i], y[i]))\n\n# Set the title of the plot\nax.set_title('3D Printing Techniques')\n\n# Set the labels for the x and y axes\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Define the categories and their scores\ncategories = ['Food Quality', 'Shows', 'Staff', 'Family Rides', 'Thrill Rides', 'Cleanliness', 'Wait Times', 'Ticket Price', 'Souvenirs', 'Parking']\ndisney_scores = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\nuniversal_scores = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0]\n\n# Create a radar chart\nangles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\ndisney_scores += disney_scores[:1]\nuniversal_scores += universal_scores[:1]\n\n# Plot the data\nax.plot(angles, disney_scores, 'o-', linewidth=2, label='Disney')\nax.plot(angles, universal_scores, 'o-', linewidth=2, label='Universal Studios')\n\n# Fill the area between the lines\nax.fill(angles, disney_scores, alpha=0.25)\nax.fill(angles, universal_scores, alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Fashion Brand Popularity', color='white')\n\n# Set the labels for the categories\ncategories = ['Chanel', 'Dior', 'Gucci']\npopularity = [10, 8, 7]\n\n# Create a bar chart with the popularity data\nbars = ax.bar(categories, popularity, color='yellow')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom', color='black')\n\n# Set the limits for the x-axis\nax.set_xlim(-1, len(categories)+1)\n\n# Set the limits for the y-axis\nax.set_ylim(0, max(popularity)*1.1)\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, color='white')\n\n# Set the tick labels for the y-axis\nax.set_yticks(np.arange(0, max(popularity)+1, 1))\nax.set_yticklabels([str(i) for i in range(max(popularity)+1)], color='white')\n\n# Set the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5, color='gray')\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('POPE')\n\n# Define the data for the scatter plot\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\n\n# Create a scatter plot with different colors for each point\ncolors = ['red', 'blue', 'green']\nfor i in range(len(x)):\n    ax.scatter(x[i], y[i], color=colors[i % len(colors)])\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 100)\nax.set_ylim(-1, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18, 6))\n\n# Set the title of the plot\nax.set_title('Perfume Brand Comparison', fontsize=24)\n\n# Define the data for the radar chart\ncategories = ['Versatility', 'Longevity', 'Sillage', 'Projection', 'Value', 'Popularity']\nChanel = [5, 7, 9, 1, 3, 7]\nDior = [3, 5, 7, 1, 5, 9]\nGucci = [7, 9, 1, 3, 5, 7]\n\n# Convert the categories into radians\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # repeat the first value to close the circular chart\n\n# Plot the radar chart for each brand\nax.plot(angles, Chanel + Chanel[:1], 'b', label='Chanel')\nax.fill(angles, Chanel + Chanel[:1], 'b', alpha=0.1)\nax.plot(angles, Dior + Dior[:1], 'r', label='Dior')\nax.fill(angles, Dior + Dior[:1], 'r', alpha=0.1)\nax.plot(angles, Gucci + Gucci[:1], 'g', label='Gucci')\nax.fill(angles, Gucci + Gucci[:1], 'g', alpha=0.1)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Loadings PC1 vs PC2', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Loadings PC1', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Loadings PC2', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(-1.5, 1.5)\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(-1.5, 1.6, 0.5))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(-1.5, 1.6, 0.5))\n\n# Set the x-axis grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'])\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label parameters\nax.yaxis.label.set_size(14)\n\n# Set the x-axis title parameters\nax.title.set_size(16)\n\n# Set the y-axis title parameters\nax.title.set_size(16)\n\n# Set the x-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'], fontsize=12)\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0',"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the radar chart\ncategories = ['Privacy', 'Query Error']\nvalues = [4, 5]\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\nvalues += values[:1]\n\n# Plot the radar chart\nax.plot(angles, values, linewidth=1, linestyle='solid')\nax.fill(angles, values, 'b', alpha=0.1)\n\n# Set the title of the plot\nax.set_title('PFGM (\u03b5 = \u221e)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Heterocycle Formation', color='orange')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time (s)', color='orange')\nax.set_ylabel('Concentration (M)', color='orange')\n\n# Set the tick colors\nax.tick_params(axis='both', colors='orange')\n\n# Set the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the limits for the x-axis and y-axis\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the color of the plot\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the ticks\nax.tick_params(colors='gray')\n\n# Set the color of the labels\nax.set_xlabel(color='gray')\nax.set_ylabel(color='gray')\n\n# Set the color of the title\nax.set_title(color='gray')\n\n# Set the color of the text\nax.text(50, 90, 'C-C bond formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 80, 'Acylation and related processes', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 70, 'Heteroatom alkylation and arylation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 60, 'Functional group addition, FGA', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 50, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 40, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 30, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 20, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 10, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 0, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(0, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 40, 'Baseline', color='blue', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 30, 'Oxidations', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 20, 'Reductions', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 10, 'Deprotections', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 0, 'Heterocycle formation', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(100, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(0, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 40, 'Baseline', color='blue', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 30, 'Oxidations', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 20, 'Reductions', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 10, 'Deprotections', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 0, 'Heterocycle formation', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(100, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(0, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 40, 'Baseline', color='blue', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 30, 'Oxidations', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 20, 'Reductions', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 10, 'Deprotections', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 0, 'Heterocycle formation', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(100, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(0, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 40, 'Baseline', color='blue', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 30, 'Oxidations', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 20, 'Reductions', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 10, 'Deprotections', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 0, 'Heterocycle formation', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(100, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(0, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 40, 'Baseline', color='blue', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 30, 'Oxidations', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 20, 'Reductions', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 10, 'Deprotections', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 0, 'Heterocycle formation', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(100, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(100, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 40, 'Baseline', color='blue', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 30, 'Oxidations', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 20, 'Reductions', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 10, 'Deprotections', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(50, 0, 'Heterocycle formation', color='orange', fontsize=12, ha='center')\n\n# Set the color of the text\nax.text(0, 50, 'Retro(Syn)_{2}', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 40, 'Baseline', color='blue', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 30, 'Oxidations', color='orange', fontsize=12, va='center')\n\n# Set the color of the text\nax.text(0, 20, 'Reductions', color='orange', fontsize"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Define the data for the scatter plot\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the x and y limits\nax.set_xlim([0, 1])\nax.set_ylim([-1, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('3D-bar')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Set the z-axis label\nax.set_zlabel('z')\n\n# Create a 3D bar chart\nbar = ax.bar3d([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18])\n\n# Set the color of the bars\nbar.set_facecolor('red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5, 5))\n\n# Set the title of the plot\nax.set_title('Imputation')\n\n# Create a circle for the imputation\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\nax.add_artist(circle)\n\n# Create a rectangle for the anomaly detection\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red', fill=False)\nax.add_artist(rectangle)\n\n# Create a rectangle for the short-horizon forecasting\nrectangle = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='green', fill=False)\nax.add_artist(rectangle)\n\n# Create a rectangle for the long-horizon forecasting\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='purple', fill=False)\nax.add_artist(rectangle)\n\n# Create a rectangle for the long-horizon forecasting\nrectangle = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='orange', fill=False)\nax.add_artist(rectangle)\n\n# Create a rectangle for the long-horizon forecasting\nrectangle = plt.Rectangle((0.5, 0.5), 0.1, 0.1, color='cyan', fill=False)\nax.add_artist(rectangle)\n\n# Create a rectangle for the long-horizon forecasting\nrectangle = plt.Rectangle((0.6, 0.6), 0.1, 0.1, color='magenta', fill=False)\nax.add_artist(rectangle)\n\n# Create a rectangle for the long-horizon forecasting\nrectangle = plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='yellow', fill=False)\nax.add_artist(rectangle)\n\n# Create a rectangle for the long-horizon forecasting\nrectangle = plt.Rectangle((0.8, 0.8), 0.1, 0.1, color='black', fill=False)\nax.add_artist(rectangle)\n\n# Create a rectangle for the long-horizon forecasting\nrectangle = plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='white', fill=False)\nax.add_artist(rectangle)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Define the data for the scatter plot\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\n\n# Plot the scatter plot with a red color\nscatter = ax.scatter(x, y, c='red')\n\n# Add a title to the plot\nax.set_title('Scatter Plot', color='white')\n\n# Add labels to the x and y axes\nax.set_xlabel('X-axis', color='white')\nax.set_ylabel('Y-axis', color='white')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Define the data for each subplot\ndata = [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n]\n\n# Plot the data\nfor i, d in enumerate(data):\n    ax.plot(d, label=f'Plot {i+1}')\n\n# Set the title and labels\nax.set_title('Model-Basedness')\nax.set_xlabel('Value')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [0, 1000, 2000, 3000, 4000]\ny = [77, 79, 81, 83, 85]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Pre-training GPU Hours')\nax.set_ylabel('Accuracy [%]')\n\n# Add a legend\nax.legend(['D2V2-Refined', 'D2V2-R', 'MoCo v3', 'iBOT', 'MAE'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Set the x-axis label\nax.set_xlabel('Infernece Time (seconds)')\n\n# Set the y-axis label\nax.set_ylabel('Average Score')\n\n# Define the data points\nx = [10, 20, 30, 40, 50, 60]\ny = [0.75, 0.70, 0.65, 0.60, 0.55, 0.50]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add annotations for each data point\nax.annotate('AR', xy=(10, 0.75), xytext=(15, 0.8),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('LSTMAD-\u03b2', xy=(20, 0.70), xytext=(25, 0.75),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('LSTMAD-\u03b1', xy=(30, 0.65), xytext=(35, 0.70),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('AE', xy=(40, 0.60), xytext=(45, 0.65),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('FITS', xy=(50, 0.55), xytext=(55, 0.60),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('Donut', xy=(60, 0.50), xytext=(65, 0.55),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Number of parameters')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the x-axis label\nax.set_xlabel('EgoSchema VQA accuracy')\n\n# Set the y-axis label\nax.set_ylabel('Perception Test VQA accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Relative Error, u')\n\n# Set the x-axis label\nax.set_xlabel('Test Case Index')\n\n# Set the y-axis label\nax.set_ylabel('Average Relative Error, u')\n\n# Define the test case indices\ntest_case_indices = [1.0, 2.0, 3.0, 4.0, 5.0]\n\n# Define the average relative errors\naverage_relative_errors = [0.01, 0.02, 0.03, 0.04, 0.05]\n\n# Plot the data\nax.plot(test_case_indices, average_relative_errors, 'o-')\n\n# Add labels for each point\nfor i, txt in enumerate(average_relative_errors):\n    ax.annotate(txt, (test_case_indices[i], average_relative_errors[i]))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\naccuracies = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\nmajority_accuracies = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\nminority_accuracies = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.plot(classes, accuracies, 'bo-', label='Overall Accuracy')\nax.plot(classes, majority_accuracies, 'ro-', label='Majority Accuracy')\nax.plot(classes, minority_accuracies, 'go-', label='Minority Accuracy')\n\n# Add labels and title\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [50, 40, 30, 20, 10, 0]\ny1 = [68, 66, 64, 62, 60, 58]\ny2 = [68, 66, 64, 62, 60, 58]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the data\naxs[0].plot(x, y1, 'o-', color='blue')\naxs[1].plot(x, y2, 'o-', color='red')\n\n# Set the titles\naxs[0].set_title('Logic Grid Puzzle(Accuracy versus token cost)')\naxs[1].set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\n\n# Set the labels\naxs[0].set_xlabel('Token cost($)')\naxs[1].set_xlabel('TFLOPS')\naxs[0].set_ylabel('Accuracy(%)')\naxs[1].set_ylabel('Accuracy(%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for the graph\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny = [10, 15, 20, 25, 30, 35, 40, 45]\n\n# Create a scatter plot\nplt.scatter(x, y)\n\n# Add labels and title\nplt.xlabel('Efficiency (%)')\nplt.ylabel('Carbon Reduction (%)')\nplt.title('Impact of Energy Sources on Carbon Emissions')\n\n# Define the energy sources and their colors\nenergy_sources = ['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave']\ncolors = ['yellow', 'blue', 'cyan', 'brown', 'green', 'orange', 'purple', 'red']\n\n# Add a legend with the energy sources and their colors\nfor i, source in enumerate(energy_sources):\n    plt.scatter([], [], c=colors[i], label=source)\nplt.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Machine Learning Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('\u0394 Robust Accuracy (%)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Generate random data for the scatter plot\nx = np.random.normal(0, 1, 100)\ny = np.random.normal(0, 1, 100)\n\n# Create a scatter plot with random colors\nscatter = ax.scatter(x, y, c=np.random.rand(100), s=100)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Define the x-axis labels\nx_labels = ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7']\n\n# Define the y-axis labels\ny_labels = ['Price']\n\n# Define the data points\ndata_points = [100, 105, 110, 115, 120, 125, 130]\n\n# Plot the data points\nax.plot(x_labels, data_points, 'o-')\n\n# Set the x-axis limits\nax.set_xlim(0, 7)\n\n# Set the y-axis limits\nax.set_ylim(90, 140)\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Set the y-axis tick labels\nax.set_yticks(range(90, 141, 10))\nax.set_yticklabels(y_labels)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(2, 16)\nax.set_ylim(0, 110)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Create scatter plots for each data set\nax.scatter([2, 4, 6, 8, 10, 12, 14, 16], [95, 90, 85, 80, 75, 70, 65, 60], color='blue', label='Data Set 1')\nax.scatter([2, 4, 6, 8, 10, 12, 14, 16], [90, 85, 80, 75, 70, 65, 60, 55], color='green', label='Data Set 2')\nax.scatter([2, 4, 6, 8, 10, 12, 14, 16], [85, 80, 75, 70, 65, 60, 55, 50], color='red', label='Data Set 3')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for the graph\nx = [175, 200, 225, 250, 275, 300]\ny = [140, 160, 180, 200, 220, 240]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data points\nax.plot(x, y, 'b-')\n\n# Add labels and title\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\nax.set_title('Energy Production Trends')\n\n# Add colored rectangles for each energy source\nrects = [\n    plt.Rectangle((175, 140), 25, 20, color='cyan'),\n    plt.Rectangle((200, 160), 25, 20, color='magenta'),\n    plt.Rectangle((225, 180), 25, 20, color='gray'),\n    plt.Rectangle((250, 200), 25, 20, color='red'),\n    plt.Rectangle((275, 220), 25, 20, color='pink'),\n    plt.Rectangle((300, 240), 25, 20, color='lightblue')\n]\n\n# Add the rectangles to the plot\nfor rect in rects:\n    ax.add_patch(rect)\n\n# Set the limits of the x-axis\nax.set_xlim(175, 300)\n\n# Set the limits of the y-axis\nax.set_ylim(140, 240)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Create a scatter plot\nscatter = ax.scatter([10, 20, 30, 40, 50, 60, 70, 80, 90], [10, 20, 30, 40, 50, 60, 70, 80, 90],\n                     c=[10, 20, 30, 40, 50, 60, 70, 80, 90], cmap='coolwarm')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(scatter)\n\n# Set the limits of the colorbar\ncbar.set_clim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LibriCSS vs Additional Data 1\nlibri_data = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\nlibri_labels = ['LibriCSS WER', 'Additional Data 1']\nlibri_colors = ['cyan', 'blue']\n\n# Data for AMI vs Additional Data 2\nami_data = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\nami_labels = ['AMI WER', 'Additional Data 2']\nami_colors = ['magenta', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot LibriCSS vs Additional Data 1\nax.plot(libri_data, label='LibriCSS vs Additional Data 1', color='blue')\nax.scatter(range(len(libri_data)), libri_data, color=libri_colors)\nfor i, txt in enumerate(libri_labels):\n    ax.annotate(txt, (i, libri_data[i]))\n\n# Plot AMI vs Additional Data 2\nax2 = ax.twinx()\nax2.plot(ami_data, label='AMI vs Additional Data 2', color='red')\nax2.scatter(range(len(ami_data)), ami_data, color=ami_colors)\nfor i, txt in enumerate(ami_labels):\n    ax2.annotate(txt, (i, ami_data[i]))\n\n# Set labels and title\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('LibriCSS vs Additional Data 1')\nax2.set_title('AMI vs Additional Data 2')\n\n# Show legend\nax.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Define the data for the plots\nx = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\ny1 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\ny2 = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Plot the data\nax.plot(x, y1, 'o-', label='Model-Basedness')\nax.plot(x, y2, 's-', label='Meta-Cognition')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig1, ax1 = plt.subplots(figsize=(8.0, 8.0))\nax1.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'bo-')\nax1.set_title('Model-Basedness')\n\n# Create a figure and axis for the second subplot\nfig2, ax2 = plt.subplots(figsize=(8.0, 8.0))\nax2.plot([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 'go-')\nax2.set_title('Meta-Cognition')\n\n# Create a figure and axis for the third subplot\nfig3, ax3 = plt.subplots(figsize=(8.0, 8.0))\nax3.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'ro-')\nax3.set_title('Risk Taking')\n\n# Create a figure and axis for the fourth subplot\nfig4, ax4 = plt.subplots(figsize=(8.0, 8.0))\nax4.plot([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 'mo-')\nax4.set_title('Exploration')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx_values = [70, 75, 80, 85, 90]\ny_values = [30, 40, 50, 60, 70]\ncolor_scale = [20, 30, 40, 50, 60]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 4, figsize=(15, 5))\n\n# Scatter plot with deepskyblue color\naxs[0].scatter(x_values, y_values, c='deepskyblue')\naxs[0].set_title('Scatter Plot - deepskyblue')\n\n# Scatter plot with magenta color\naxs[1].scatter(x_values, y_values, c='magenta')\naxs[1].set_title('Scatter Plot - magenta')\n\n# Scatter plot with limegreen color\naxs[2].scatter(x_values, y_values, c='limegreen')\naxs[2].set_title('Scatter Plot - limegreen')\n\n# Scatter plot with purple color\naxs[3].scatter(x_values, y_values, c='purple')\naxs[3].set_title('Scatter Plot - purple')\n\n# Set the x-axis and y-axis labels for all subplots\nfor ax in axs:\n    ax.set_xlabel('X Values')\n    ax.set_ylabel('Y Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny_sc = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny_ft = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny_vl = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot the data\naxs[0].plot(x, y_sc, 'o-', color='purple')\naxs[1].plot(x, y_ft, 'o-', color='pink')\naxs[2].plot(x, y_vl, 'o-', color='green')\n\n# Set the title for each subplot\naxs[0].set_title('ViTPose (sc) Performance')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[2].set_title('VLPose Performance')\n\n# Set the x-axis label for each subplot\naxs[0].set_xlabel('Average Precision on HumanArt (%)')\naxs[1].set_xlabel('Average Precision on HumanArt (%)')\naxs[2].set_xlabel('Average Precision on HumanArt (%)')\n\n# Set the y-axis label for each subplot\naxs[0].set_ylabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on MSCOCO (%)')\n\n# Set the limits for the x-axis\naxs[0].set_xlim([70, 88])\naxs[1].set_xlim([70, 88])\naxs[2].set_xlim([70, 88])\n\n# Set the limits for the y-axis\naxs[0].set_ylim([25, 55])\naxs[1].set_ylim([25, 55])\naxs[2].set_ylim([25, 55])\n\n# Add a legend to the first subplot\naxs[0].legend(['ViTPose (sc)'])\n\n# Add a legend to the second subplot\naxs[1].legend(['ViTPose (ft)'])\n\n# Add a legend to the third subplot\naxs[2].legend(['VLPose'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Token cost ($)')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Token cost ($)')\nax.set_ylabel('Accuracy (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a scatter plot with random data points\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\nsizes = 1000 * np.random.rand(100)\n\nscatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.5)\n\n# Set the title of the plot\nax.set_title('Random Scatter Plot')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the scatter plot\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny = [800, 750, 700, 650, 600, 550, 500, 450]\ncolors = ['blue', 'cyan', 'red', 'green', 'purple', 'orange', 'yellow', 'pink']\narea = [20, 50, 80, 110, 140, 170, 200, 230] # 0 to 15 point radii\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Scatter plot\nscatter = ax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Bit per pixel (BPP)')\nax.set_ylabel('WRMSE vs BPP')\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Plot the data points\nax.plot(x, y, 'o')\n\n# Set the title of the plot\nax.set_title('Daytime Sunny')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Define the data points\nx = [0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\ny = [10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add labels to the data points\nlabels = ['LNO', 'GNO', 'InFGCN', 'DeepDFT2', 'FNO', 'GNP-NO', 'RPNO', 'RPO', 'RPO', 'RPO', 'RPO']\nfor i, label in enumerate(labels):\n    ax.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0.0, 10.0)\nax.set_ylim(0.0, 60.0)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Number of parameters (M)')\nax.set_ylabel('NMAE')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Define the colors for each data series\ncolors = ['blue', 'pink', 'yellow', 'green', 'grey']\n\n# Plot the data series with different colors\nfor i, color in enumerate(colors):\n    ax.plot(range(10), range(10), color=color)\n\n# Set the x-axis label\nax.set_xlabel('PC1')\n\n# Set the y-axis label\nax.set_ylabel('PC2')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('DE')\n\n# Set the x-axis label\nax.set_xlabel('KCA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Create a scatter plot with random data points\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='red')\n\n# Add a legend to the plot\nax.legend(['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer'])\n\n# Set the limits for the x-axis\nax.set_xlim(0.5, 1)\n\n# Set the limits for the y-axis\nax.set_ylim(0.1, 0.6)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Create a rectangle for the website logo\nlogo = plt.Rectangle((0.5, 0.9), 0.4, 0.1, fc='blue')\nax.add_patch(logo)\n\n# Create a rectangle for the website name\nname = plt.Rectangle((0.5, 0.8), 0.4, 0.1, fc='green')\nax.add_patch(name)\n\n# Create a rectangle for the website description\ndesc = plt.Rectangle((0.5, 0.7), 0.4, 0.1, fc='red')\nax.add_patch(desc)\n\n# Create a rectangle for the website content\ncontent = plt.Rectangle((0.5, 0.6), 0.4, 0.1, fc='yellow')\nax.add_patch(content)\n\n# Create a rectangle for the website footer\nfooter = plt.Rectangle((0.5, 0.5), 0.4, 0.1, fc='purple')\nax.add_patch(footer)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('#f5f5f5')\n\n# Create a bar chart with the data\nax.bar(['Java', 'Python', 'JavaScript', 'C++'], [10, 20, 27, 23], color='#9c27b0')\n\n# Add labels to the bars\nfor i, v in enumerate([10, 20, 27, 23]):\n    ax.text(i, v + 1, str(v) + '%', ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Programming Language Popularity')\n\n# Set the x-axis label\nax.set_xlabel('Programming Languages')\n\n# Set the y-axis label\nax.set_ylabel('Popularity (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f8ff')\n\n# Create a rectangle for the left column\nleft_column = plt.Rectangle((0.05, 0.05), 0.4, 0.9, fc='#add8e6')\nax.add_patch(left_column)\n\n# Create a rectangle for the right column\nright_column = plt.Rectangle((0.55, 0.05), 0.4, 0.9, fc='#ffa07a')\nax.add_patch(right_column)\n\n# Create a rectangle for the top row\ntop_row = plt.Rectangle((0.05, 0.55), 0.9, 0.3, fc='#ffd700')\nax.add_patch(top_row)\n\n# Create a rectangle for the bottom row\nbottom_row = plt.Rectangle((0.05, 0.05), 0.9, 0.3, fc='#90ee90')\nax.add_patch(bottom_row)\n\n# Add text to the rectangles\nax.text(0.25, 0.95, 'Adidas\\n13.42%', ha='center', va='center', fontsize=12)\nax.text(0.75, 0.95, 'Under Armour\\n8.54%', ha='center', va='center', fontsize=12)\nax.text(0.25, 0.55, 'Nike\\n30.6%', ha='center', va='center', fontsize=12)\nax.text(0.75, 0.55, 'Reebok\\n10.91%', ha='center', va='center', fontsize=12)\nax.text(0.25, 0.15, 'Puma\\n14.21%', ha='center', va='center', fontsize=12)\nax.text(0.75, 0.15, 'New Balance\\n6.26%', ha='center', va='center', fontsize=12)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#FFDAB9')\n\n# Create a bar chart with the data\nbars = ax.bar(['5%', '15%', '20%'], [5, 15, 20], color='#87CEEB')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Percentage of Students in Each Grade Level')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a rectangle for the first continent\nrect1 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, fc='yellow')\nax.add_patch(rect1)\n\n# Create a rectangle for the second continent\nrect2 = plt.Rectangle((0.1, 0.45), 0.8, 0.2, fc='purple')\nax.add_patch(rect2)\n\n# Create a rectangle for the third continent\nrect3 = plt.Rectangle((0.1, 0.2), 0.8, 0.2, fc='pink')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth continent\nrect4 = plt.Rectangle((0.1, 0.7), 0.3, 0.2, fc='cyan')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth continent\nrect5 = plt.Rectangle((0.5, 0.7), 0.3, 0.2, fc='blue')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth continent\nrect6 = plt.Rectangle((0.1, 0.45), 0.3, 0.2, fc='lightgreen')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh continent\nrect7 = plt.Rectangle((0.5, 0.45), 0.3, 0.2, fc='lightblue')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth continent\nrect8 = plt.Rectangle((0.1, 0.2), 0.3, 0.2, fc='lightgreen')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth continent\nrect9 = plt.Rectangle((0.5, 0.2), 0.3, 0.2, fc='lightblue')\nax.add_patch(rect9)\n\n# Add text labels to each rectangle\nax.text(0.5, 0.85, 'European\\n15%', ha='center', va='center', fontsize=12)\nax.text(0.5, 0.55, 'Australian\\n18%', ha='center', va='center', fontsize=12)\nax.text(0.5, 0.3, 'Asian\\n25%', ha='center', va='center', fontsize=12)\nax.text(0.2, 0.85, 'South American\\n10%', ha='center', va='center', fontsize=12)\nax.text(0.8, 0.85, 'North American\\n20%', ha='center', va='center', fontsize=12)\nax.text(0.2, 0.55, 'African\\n12%', ha='center', va='center', fontsize=12)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2 Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL)')\n\n# Define the data points\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([6.5, 5.5, 4.5, 3.5, 2.5])\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add a legend\nax.legend(['Llama2', 'Llama2 (In-Chat)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Scores with and without Memory')\n\n# Define the data for the bar chart\ncategories = ['Efficiency', 'Comfort', 'Safety']\nscores_without_memory = [0.8, 0.7, 0.9]\nscores_with_memory = [0.9, 0.8, 1.0]\n\n# Create a bar chart\nbar_width = 0.35\nindex = range(len(categories))\nax.bar(index, scores_without_memory, bar_width, label='Without Memory')\nax.bar([i + bar_width for i in index], scores_with_memory, bar_width, label='With Memory')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\nax.set_xticks([i + bar_width / 2 for i in index])\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Define the data for the scatter plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title of the plot\nax.set_title('Car Performance Metrics')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Score')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Create a scatter plot with random data\nax.scatter(range(1, 6), [0.5, 0.7, 0.9, 0.3, 0.2], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Player Number')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second subplot\nax2.set_title('Pair Comparison')\n\n# Create a bar chart with random data\nax2.bar(['Winner', 'Losser Preference', 'Tie'], [0.8, 0.6, 0.4], color='orange')\n\n# Set the x-axis label\nax2.set_xlabel('Pair')\n\n# Set the y-axis label\nax2.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data for the plots\ndata = {\n    'jTrans': [0.7, 0.8, 0.9],\n    'PalmTree': [0.4, 0.5, 0.6],\n    'CLAP': [0.2, 0.3, 0.4]\n}\n\n# Create a bar chart for each dataset\nfor i, (key, value) in enumerate(data.items()):\n    ax.bar(key, value, color=plt.cm.tab10(i), label=key)\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Define the data for the scatter plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the scatter plot\nax.scatter(x, y, color='blue')\n\n# Set the title of the plot\nax.set_title('Sine Wave')\n\n# Set the x and y labels\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Define the data for the plots\nvanilla_data = [75, 80, 85, 90]\ncot_data = [65, 70, 75, 80]\n\n# Create the plots\nax.plot(vanilla_data, label='Vanilla')\nax.plot(cot_data, label='CoT')\n\n# Add labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Over Time')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('% Decrease in Test MSE vs. FLAM-GL')\n\n# Define the data for the plot\nx = [2, 4, 6, 8, 10]\ny = [163, 201, 176, 159, 137]\n\n# Plot the data\nax.plot(x, y, 'o-', color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Number of Features')\n\n# Set the y-axis label\nax.set_ylabel('% Decrease in Test MSE')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data\nx = ['Raw', '125Hz', '50Hz', '25Hz', '10Hz']\ny = [0.18, 3.33, 3.33, 10.67, 29.10]\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\n\n# Create a scatter plot\nscatter = ax.scatter(x, y, c=colors)\n\n# Add labels and title\nax.set_xlabel('Decimated Sampling Rate')\nax.set_ylabel('KCC')\nax.set_title('KCC vs Decimated Sampling Rate')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\ncbar.set_label('Pearson R (EER%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Distribution of Grades: Class 1')\n\n# Create a bar chart with the data\nax.bar(['Boys', 'Girls'], [95, 85], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Gender')\n\n# Set the y-axis label\nax.set_ylabel('Grades')\n\n# Display the plot\nplt.show()\n```"}
