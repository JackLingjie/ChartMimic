{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0.2, 0.4, 0.6, 0.8, 1.0]\ny_targets = [1.2, 1.0, 0.8, 0.6, 0.4]\ny_predictions = [1.3, 1.1, 0.9, 0.7, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data\nax.plot(x, y_targets, 'o-', label='Targets')\nax.plot(x, y_predictions, 's-', label='Predictions')\n\n# Set the title and labels\nax.set_title('Targets vs Predictions')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nheights = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\nwidths = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ncounts = [4, 4, 4, 4, 4, 4, 4]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the bars\nxpos, ypos = np.meshgrid(heights, widths)\nxpos = xpos.flatten()\nypos = ypos.flatten()\nzpos = np.zeros_like(xpos)\n\ndx = dy = 0.5 * np.ones_like(zpos)\ndz = counts\n\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color='r')\n\n# Set labels and title\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\nax.set_title('3D Bar Chart of Counts by Height and Width')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the range for x and y\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\n\n# Create a meshgrid\nX, Y = np.meshgrid(x, y)\n\n# Calculate Z values (for example, a simple quadratic function)\nZ = X**2 + Y**2\n\n# Plot the surface\nax.contourf(X, Y, Z, cmap='viridis')\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Contour Plot of a Function')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = [-4, -2, 0, 2, 4]\ny = [10, 15, 20, 25, 30]\n\n# Plot the data points\nax.plot(x, y, 'ro')  # 'ro' means red circles\n\n# Set the title and labels\nax.set_title('Volume vs Temperature')\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Volume (L)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2012, 2014, 2016, 2018]\nprivate_schools = [0.75, 0.75, 0.75, 0.75, 0.75]\npublic_schools = [0.3, 0.3, 0.3, 0.3, 0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(years, private_schools, color='orange', label='Private Schools')\nax.bar(years, public_schools, bottom=private_schools, color='blue', label='Public Schools')\n\n# Set the title and labels\nax.set_title('Student to Teacher Ratio by School Type')\nax.set_xlabel('Year')\nax.set_ylabel('Student to Teacher Ratio')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nyears = [2010, 2012, 2014, 2016, 2018]\ninvestment = [3, 5, 7, 9, 11]\n\n# Data for the second plot\ntime_since_introduction = np.arange(0, 11, 2)\ntechnology_level = np.arange(0, 4, 1)\nadoption_rate = np.random.rand(5, 4)\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 8.0))\n\n# Plot the first subplot\naxs[0].bar(years, investment, color='green')\naxs[0].set_xlabel('Year')\naxs[0].set_ylabel('Investment (Billion USD)')\naxs[0].set_title('Investment Over Years')\n\n# Plot the second subplot\nim = axs[1].imshow(adoption_rate, cmap='hot', interpolation='nearest')\naxs[1].set_xlabel('Time Since Introduction (Years)')\naxs[1].set_ylabel('Technology Level')\naxs[1].set_title('Adoption Rate')\ncbar = fig.colorbar(im, ax=axs[1])\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the function f(x)\ndef f(x):\n    return x**2 - 2*x + 1\n\n# Create a grid of x values\nx = np.linspace(-1, 1, 100)\n\n# Calculate the y values for each x value\ny = f(x)\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 7.0))\n\n# Plot the function f(x) on the first subplot\naxs[0].plot(x, y, 'r-')\naxs[0].set_title('f(x)')\naxs[0].set_xlabel('x')\naxs[0].set_ylabel('f(x)')\n\n# Plot the solution on the second subplot\naxs[1].plot(x, y, 'b-')\naxs[1].set_title('solution')\naxs[1].set_xlabel('x')\naxs[1].set_ylabel('f(x)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(1, 6, 100)\ny = np.linspace(1, 6, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the data\ncax = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar to the plot\nfig.colorbar(cax)\n\n# Set the title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T=6')\n\n# Set the labels for the axes\nax.set_xlabel('t')\nax.set_ylabel('tau')\n\n# Set the limits for the axes\nax.set_xlim(1, 6)\nax.set_ylim(1, 6)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the function for the surface plot\ndef f(x, y):\n    return np.sin(np.sqrt(x**2 + y**2))\n\n# Create a grid of points\nx = np.linspace(-100, 100, 400)\ny = np.linspace(-100, 100, 400)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\n# Create a figure with subplots\nfig, axs = plt.subplots(2, 2, figsize=(15.0, 10.0), subplot_kw={'projection': '3d'})\n\n# Plot the surfaces\naxs[0, 0].plot_surface(X, Y, Z, cmap='viridis')\naxs[0, 1].plot_surface(X, Y, Z, cmap='plasma')\naxs[1, 0].plot_surface(X, Y, Z, cmap='inferno')\naxs[1, 1].plot_surface(X, Y, Z, cmap='magma')\n\n# Set labels and titles\naxs[0, 0].set_xlabel('m')\naxs[0, 0].set_ylabel('n')\naxs[0, 0].set_zlabel('FREEDOM')\naxs[0, 0].set_title('Origin')\n\naxs[0, 1].set_xlabel('m')\naxs[0, 1].set_ylabel('n')\naxs[0, 1].set_zlabel('FREEDOM')\naxs[0, 1].set_title('MG (ours)')\n\naxs[1, 0].set_xlabel('m')\naxs[1, 0].set_ylabel('n')\naxs[1, 0].set_zlabel('FREEDOM')\naxs[1, 0].set_title('Origin')\n\naxs[1, 1].set_xlabel('m')\naxs[1, 1].set_ylabel('n')\naxs[1, 1].set_zlabel('FREEDOM')\naxs[1, 1].set_title('MG (ours)')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\nax.plot([0.4, 0.6], [0.2, 0.4], 'o-')\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_title('Targets')\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function\nZ = np.sin(X) * np.cos(Y)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Time')\nax.set_ylabel('Bus')\nax.set_zlabel('Value')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data\nx = np.array([1, 2, 3, 4])\ny = np.array([6, 7, 8, 9])\n\n# Plot the data\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([-20, -30, -40, -50, -60])\n\n# Plot the data points\nax.plot(x, y, 'ro')\n\n# Set the labels and title\nax.set_xlabel('Age')\nax.set_ylabel('Debt')\nax.set_title('Debt vs Age')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\ntime = np.linspace(10, 90, 10)\ntemperature = np.linspace(10, 50, 10)\ndepth = np.linspace(-20, -50, 10)\n\n# Plot the data\nax.plot(time, depth, 'r-')\nax.plot(time, depth + 10, 'b-')\nax.plot(time, depth + 20, 'g-')\n\n# Set the labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Depth (m)')\nax.set_zlabel('Temperature (\u00b0C)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the histogram\nx = np.linspace(-20, 20, 100)\ny_out = np.exp(-(x**2)/2)\ny_in = np.exp(-(x**2)/2)\n\n# Plot the histograms\nax.hist(x, bins=20, weights=y_out, color='blue', alpha=0.5, label='Out')\nax.hist(x, bins=20, weights=y_in, color='red', alpha=0.5, label='In')\n\n# Set the title and labels\nax.set_title('Histogram of Out and In')\nax.set_xlabel('LR Test')\nax.set_ylabel('Density')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data points\nx = [150, 200, 250, 300, 350, 400]\ny_low = [-2, -3, -4, -5, -6, -7]\ny_middle = [-2, -3, -4, -5, -6, -7]\ny_high = [-2, -3, -4, -5, -6, -7]\n\n# Plot the data points\nax.plot(x, y_low, 'bo', label='Low')\nax.plot(x, y_middle, 'o', color='orange', label='Middle')\nax.plot(x, y_high, 'go', label='High')\n\n# Add a shaded region\nax.fill_between(x, -2, -4, color='gray', alpha=0.5)\n\n# Add a line\nax.plot(x, [-2]*len(x), 'k-', lw=2)\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Severity')\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data\nx = [-3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0]\ny1 = [8, 4, 2, 1, 0.5, 0.25, 0.125]\ny2 = [8, 4, 2, 1, 0.5, 0.25, 0.125]\ny3 = [8, 4, 2, 1, 0.5, 0.25, 0.125]\ny4 = [8, 4, 2, 1, 0.5, 0.25, 0.125]\n\n# Plot the data\nax.plot(x, y1, 'b', label='8x')\nax.plot(x, y2, 'o', label='4x')\nax.plot(x, y3, 'g', label='2x')\nax.plot(x, y4, 'r', label='1x')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Log(AET RMSE) vs Log(Depth L1)')\nax.set_xlabel('Log(Depth L1)')\nax.set_ylabel('Log(AET RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny1 = [5, 4, 3, 2, 1]\ny2 = [4, 3, 2, 1, 0]\ny3 = [3, 2, 1, 0, 5]\ny4 = [2, 1, 0, 5, 4]\n\n# Plot the data\nax.plot(x, y1, color='red', label='Benign')\nax.plot(x, y2, color='green', label='BadNets')\nax.plot(x, y3, color='darkred', label='Benign KDE')\nax.plot(x, y4, color='darkgreen', label='BadNets KDE')\n\n# Set the title and labels\nax.set_title('T-test p-value = 0.0000')\nax.set_xlabel('Average Top-5 Persistence of 1D')\nax.set_ylabel('Density')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntasks = ['snacks', 'navigate', 'question_selection', 'object_counting']\nscores = [\n    [0.75, 0.8, 0.7, 0.65, 0.6],\n    [0.7, 0.75, 0.7, 0.65, 0.6],\n    [0.65, 0.7, 0.65, 0.6, 0.55],\n    [0.6, 0.65, 0.6, 0.55, 0.5]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor i, task_scores in enumerate(scores):\n    ax.plot(task_scores, label=tasks[i])\n\n# Set the title and labels\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ny1 = [100, 90, 80, 70, 60, 50, 40, 30]\ny2 = [110, 100, 90, 80, 70, 60, 50, 40]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y1, 'r-', label='random')\nplt.plot(x, y2, 'b-', label='H-wand - centers-cos')\nplt.xlabel('norm size')\nplt.ylabel('count')\nplt.title('summarization_xsum:temperature=0.3,device=cuda')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Incomparable', 'Different', 'Same']\nsizes = [73.3, 23.7, 3.0]\ncolors = ['green', 'blue', 'yellow']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1])\nax.set_xticklabels(['SEAC', 'SAC(20Hz)'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([45, 46, 47, 48, 49, 50, 51, 52])\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny = [63.64, 80.08, 84.27, 90.11]\n\n# Data for the second graph\nx_f1 = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny_f1 = [75.00, 87.20, 88.12, 93.89]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the first graph\nax.plot(x, y, marker='o', linestyle='-', color='blue')\nax.set_title('Average Recall Scores by Method')\nax.set_xlabel('Method')\nax.set_ylabel('Scores')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nax2.plot(x_f1, y_f1, marker='o', linestyle='-', color='red')\nax2.set_title('Average F1 Scores by Method')\nax2.set_xlabel('Method')\nax2.set_ylabel('Scores')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [4, 8, 12, 16, 20, 24, 28, 32]\ny1 = [84, 86, 88, 90, 92, 94, 96, 96]\ny2 = [84, 86, 88, 90, 92, 94, 96, 96]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Trained w Few-Shot Ex')\nax.plot(x, y2, 'r-', label='Def Deduce+Ex Gen')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Micro F1')\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [60, 62, 65, 70, 75]\ny_cars = [75, 75, 75, 75, 80]\ny_trucks = [75, 75, 75, 75, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data\nax.plot(x, y_cars, 'ro-', label='Cars')\nax.plot(x, y_trucks, 'bo-', label='Trucks')\n\n# Set the title and labels\nax.set_title('Vehicle Efficiency vs Vehicle Parameter Size')\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsimple_trend = [0, 6, 16, 20, 12, 10]\nsimple = [0, 6, 12, 20, 12, 10]\ncomplex_ = [0, 4, 8, 18, 26, 20]\ncode = [0, 4, 8, 18, 26, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(models, simple_trend, label='Simple Trend', color='magenta')\nax.plot(models, simple, label='Simple', color='orange')\nax.plot(models, complex_, label='Complex', color='pink')\nax.plot(models, code, label='Code', color='lightgrey')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot([0, 0.25, 0.5, 0.75, 1], [0.3, 0.4, 0.5, 0.6, 0.7], 'b-')\nax.scatter([0, 0.25, 0.5, 0.75, 1], [0.3, 0.4, 0.5, 0.6, 0.7], color='orange')\n\n# Set the title and labels\nax.set_title('Calibration curve')\nax.set_xlabel('reduced probability')\nax.set_ylabel('fraction of positives')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the histogram\nax.hist([1, 2, 3, 4], bins=5, color='blue')\n\n# Set the title and labels\nax.set_title('Histogram')\nax.set_xlabel('Values')\nax.set_ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [1600, 1625, 1650, 1675, 1700, 1725]\ny1 = [0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025]\n\n# Data for the second plot\nx2 = [205, 210, 215]\ny2 = [0.125, 0.125, 0.125]\n\n# Data for the third plot\nx3 = [1340, 1360, 1380, 1400, 1420, 1440, 1460]\ny3 = [0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025]\n\n# Data for the fourth plot\nx4 = [48, 49, 50, 51, 52]\ny4 = [0.06, 0.06, 0.06, 0.06, 0.06]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first subplot\naxs[0, 0].bar(x1, y1, color='blue')\naxs[0, 0].set_title('Total')\naxs[0, 0].set_xlabel('Daily reward (Ether)')\naxs[0, 0].set_ylabel('Probability')\n\n# Plot the second subplot\naxs[0, 1].bar(x2, y2, color='red')\naxs[0, 1].set_title('Proposer')\naxs[0, 1].set_xlabel('Daily reward (Ether)')\naxs[0, 1].set_ylabel('Probability')\n\n# Plot the third subplot\naxs[1, 0].bar(x3, y3, color='green')\naxs[1, 0].set_title('Attestor')\naxs[1, 0].set_xlabel('Daily reward (Ether)')\naxs[1, 0].set_ylabel('Probability')\n\n# Plot the fourth subplot\naxs[1, 1].bar(x4, y4, color='yellow')\naxs[1, 1].set_title('Sync committee member')\naxs[1, 1].set_xlabel('Daily reward (Ether)')\naxs[1, 1].set_ylabel('Probability')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 50, 100, 150]\ny1 = [1.30, 1.27, 1.28, 1.29]\ny2 = [1.30, 1.27, 1.28, 1.29]\ny3 = [1.30, 1.27, 1.28, 1.29]\ny4 = [1.30, 1.27, 1.28, 1.29]\ny5 = [1.30, 1.27, 1.28, 1.29]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r', label='LlaSMol Lite')\nax.plot(x, y2, 'b', label='LlaSMol 21B')\nax.plot(x, y3, 'r', label='LlaSMol FFN')\nax.plot(x, y4, 'b', label='LlaSMol Plus')\nax.plot(x, y5, 'r', label='LlaSMol Large')\n\n# Set the labels and title\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\nax.set_title('RMSE vs Trainable Parameter Size')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [40, 60, 80, 100, 120, 140, 160]\ny = [0.03, 0.05, 0.07, 0.09, 0.11, 0.13, 0.15]\n\n# Plot the data\nax.plot(x, y, 'b.')\n\n# Set the title and labels\nax.set_title('Execution Duration Distribution')\nax.set_xlabel('Execution Duration (clock)')\nax.set_ylabel('Distribution')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [15, 20, 30, 40, 50]\ny1 = [18, 14, 13, 12, 12]\ny2 = [5000, 4000, 3000, 2000, 1000]\ny3 = [6000, 5000, 4000, 3000, 2000]\ny4 = [7000, 6000, 5000, 4000, 3000]\n\n# Plotting\nplt.figure(figsize=(8.0, 5.0))\nplt.plot(x, y1, 'g-', label='PetriRL')\nplt.plot(x, y2, 'o-', label='GAM')\nplt.plot(x, y3, 'b-', label='GIN')\nplt.plot(x, y4, 'p-', label='DGERD')\n\n# Adding labels and title\nplt.xlabel('Instance size (step)')\nplt.ylabel('Makespan (step)')\nplt.title('Comparison of Makespan and Improvement Percentage')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the x-axis limits\nax.set_xlim(-1, 4)\n\n# Set the y-axis limits\nax.set_ylim(0, 4)\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the title of the plot\nax.set_title('Time Cost vs Algorithms')\n\n# Define the data for the plot\ndata = [\n    [2.3, 1.8, 2.9, 1.2],\n    [3.1, 2.4, 3.6, 2.0]\n]\n\n# Define the labels for the data\nlabels = ['SEAC', 'CTCO']\n\n# Plot the data\nfor i, d in enumerate(data):\n    ax.plot(d, label=labels[i], marker='o')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\nprices = [95, 85, 75, 65]\nmedians = [90, 80, 70, 60]\n\n# Plot the data\nax.plot(brands, prices, marker='o')\nax.plot(brands, medians, marker='o')\n\n# Set the title and labels\nax.set_title('Brand Prices and Medians')\nax.set_xlabel('Brands')\nax.set_ylabel('Prices')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data\nera_data = {\n    'Early 20th Century': [0.005, 0.015, 0.025, 0.035],\n    'Mid 20th Century': [0.01, 0.02, 0.03, 0.04],\n    'Turn of the Century': [0.0075, 0.0175, 0.0275, 0.0375]\n}\n\n# Plot the data\nfor era, values in era_data.items():\n    ax.plot(values, label=era)\n\n# Set the title and labels\nax.set_title('Era')\nax.set_xlabel('Density')\nax.set_ylabel('Year')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntech = ['Nanotechnology', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'Al']\npatents_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\npatents_2022 = [90, 50, 150, 100, 180, 250, 400, 200, 300, 500]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(tech, patents_2013, label='2013')\nax.plot(tech, patents_2022, label='2022')\n\n# Set the title and labels\nax.set_title('Patent Filings in 2013 and 2022')\nax.set_xlabel('Technology')\nax.set_ylabel('Number of Patents')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the x-axis label\nax.set_xlabel('Predicted probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of positives')\n\n# Set the title\nax.set_title('Calibration curve')\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'red'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Plot the calibration curve\nax.plot([0, 1], [0, 1], color=calibration_curve_color)\n\n# Plot the data points\nax.scatter([0.1, 0.3, 0.5, 0.7, 0.9], [0.1, 0.3, 0.5, 0.7, 0.9], color=data_points_color)\n\n# Plot the bin edges\nax.bar([0.1, 0.3, 0.5, 0.7, 0.9], [0.1, 0.3, 0.5, 0.7, 0.9], color=bin_edges_color)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings_tesla = [350, 300, 250, 200]\nearnings_benz = [320, 270, 220, 170]\nearnings_byd = [310, 260, 210, 160]\nearnings_porsche = [330, 280, 230, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(quarters, earnings_tesla, label='Tesla', color='green')\nax.plot(quarters, earnings_benz, label='Benz', color='orange')\nax.plot(quarters, earnings_byd, label='BYD', color='blue')\nax.plot(quarters, earnings_porsche, label='Porsche', color='purple')\n\n# Set the title and labels\nax.set_title('Earnings by Quarter')\nax.set_xlabel('Quarter')\nax.set_ylabel('Earnings ($1000s)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmethods = ['Linear probing', 'BitFit', 'Prompt Tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ntrain_sec_img = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\ninference_gflops = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\nparam_log10 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ntrain_memory = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.plot(train_sec_img, label='Train sec / img')\nax.plot(inference_gflops, label='Inference GFLOPs')\nax.plot(param_log10, label='Param, log10')\nax.plot(train_memory, label='Train Memory')\n\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Performance Metrics')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Seq-ident')\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Relative Norm of Difference Vectors')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Set the limits for the x-axis\nax.set_xlim(25, 45)\n\n# Set the limits for the y-axis\nax.set_ylim(-10, 30)\n\n# Create a scatter plot with red dots\nscatter_red = ax.scatter([26, 27, 28, 29, 30], [10, 11, 12, 13, 14], color='red', label='teenagers')\n\n# Create a scatter plot with green dots\nscatter_green = ax.scatter([26, 27, 28, 29, 30], [15, 16, 17, 18, 19], color='green', label='children')\n\n# Create a scatter plot with blue dots\nscatter_blue = ax.scatter([26, 27, 28, 29, 30], [20, 21, 22, 23, 24], color='blue', label='adults')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 99.9, 96.0, 92.3, 90.9, 90.9, 91.3, 92.5, 93.3, 93.3, 96.0, 98.7, 98.7, 98.7, 98.7, 98.7]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y, 'bo-')\nplt.xlabel('HC_first (before aging)')\nplt.ylabel('HC_first (after aging)')\nplt.title('Plot of HC_first over time')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.6)\n\n# Draw a horizontal line at y=0.5\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Draw a vertical line at x=0.5\nax.axvline(x=0.5, color='r', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodes = [4211, 2411, 2141, 1124]\nsrcc_values = [0.9628, 0.9604, 0.9624, 0.9592]\nplcc_values = [0.9624, 0.9604, 0.9624, 0.9561]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(modes, srcc_values, label='SRCC', color='blue')\nax.plot(modes, plcc_values, label='PLCC', color='green')\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define the data\ndata = [\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data\nx = np.linspace(-10, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue', label='SINDy')\n\n# Set the title and labels\nax.set_title('Compact Spiral with Elliptical Hollow Center')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the limits of the axes\nax.set_xlim(-10, 10)\nax.set_ylim(-7.5, 7.5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [10**-1, 10**0, 10**1]\ny1 = [10**11, 10**11, 10**12]\ny2 = [10**10, 10**10, 10**11]\ny3 = [10**9, 10**9, 10**10]\ny4 = [10**8, 10**8, 10**9]\ny5 = [10**7, 10**7, 10**8]\ny6 = [10**6, 10**6, 10**7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, label='explicit, random')\nax.plot(x, y2, label='explicit, block size 10')\nax.plot(x, y3, label='explicit, block size 100')\nax.plot(x, y4, label='implicit, random')\nax.plot(x, y5, label='implicit, block size 10')\nax.plot(x, y6, label='implicit, block size 100')\n\n# Set the title and labels\nax.set_title('DAXPY memory bandwidth')\nax.set_xlabel('Flops/byte')\nax.set_ylabel('Flows/s')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['satisfy constraints', 'no severe errors', 'lengthy', 'contain rich info', 'no moderate errors', 'grammatically correct', 'no minor errors', 'clear', 'non-repetitive', 'support stances', '19 other features']\nf_x_values = [0.76, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\nf_x_errors = [0.18, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, f_x_values, yerr=f_x_errors, capsize=5)\n\n# Set the title and labels\nax.set_title('f(x) = 0.50')\nax.set_xlabel('Categories')\nax.set_ylabel('f(x)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\ncigarR = 45\nchatRepair = 8\npink = 24\norange = 45\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Draw the circles\ncircle1 = plt.Circle((0, 0), cigarR, color='orange')\ncircle2 = plt.Circle((0, 0), chatRepair, color='green')\ncircle3 = plt.Circle((0, 0), pink, color='pink')\n\n# Add the circles to the plot\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\n\n# Set the limits of the plot\nax.set_xlim(-50, 50)\nax.set_ylim(-50, 50)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = {\n    'Gemin Pro-CoT': [25, 15, 10, 5, 3],\n    'GPT4V-CoT': [28, 22, 18, 12, 7],\n    'Gemini Pro': [24, 18, 14, 9, 4]\n}\ncategories = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i, (label, values) in enumerate(data.items()):\n    ax.barh(categories, values, left=np.arange(len(values)), height=0.8, label=label)\n\n# Set the title and labels\nax.set_title('Qwen-VR-Max')\nax.set_xlabel('Value')\nax.set_ylabel('Level')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate some data\nx = np.logspace(1, 2, 100)\ny1 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\ny2 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\ny3 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\ny4 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\ny5 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'r.')\nax.plot(x, y2, 'g.')\nax.plot(x, y3, 'b.')\nax.plot(x, y4, 'c.')\nax.plot(x, y5, 'm.')\n\n# Set the labels\nax.set_xlabel('Number of matvecs m')\nax.set_ylabel('Approximation error ||A - \\u03B1\\u03BB\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'En.QA', 'Retrive.PassKey']\nsizes = [150, 100, 75, 50, 25]\ncolors = ['lightgreen', 'lightskyblue', 'lavender', 'gold', 'orange']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data for the plot\nx = [0, 20, 40, 60, 80, 100, 120, 140]\ny1 = [1, 2, 3, 2, 1, 0, -1, -2]\ny2 = [0, 1, 2, 1, 0, -1, -2, -3]\ny3 = [-1, -2, -3, -2, -1, 0, 1, 2]\ny4 = [-2, -3, -4, -3, -2, -1, 0, 1]\n\n# Plot the data\nax.plot(x, y1, color='green')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='blue')\nax.plot(x, y4, color='red')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 140)\n\n# Set the limits of the y-axis\nax.set_ylim(-4, 4)\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the labels of the axes\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 1, 2, 3, 4, 5, 6]\ny1 = [3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5]\ny2 = [3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2]\ny3 = [3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1]\ny4 = [3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3]\ny5 = [3.4, 3.4, 3.4, 3.4, 3.4, 3.4, 3.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='Sample 1')\nax.plot(x, y2, label='Sample 2')\nax.plot(x, y3, label='Sample 3')\nax.plot(x, y4, label='Sample 4')\nax.plot(x, y5, label='Sample 5')\n\n# Set the title and labels\nax.set_title('Urgency in Thermal Conductivity Measurements')\nax.set_xlabel('Sample Number')\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores_a = [28, 20, 10, 22, 28]\nscores_b = [35, 26, 20, 25, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.plot(games, scores_a, label='Player A', color='r')\nax.plot(games, scores_b, label='Player B', color='g')\n\n# Set the title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for Variable 1\nx = np.linspace(-6, 6, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim(-6, 6)\n\n# Set the limits of the y-axis\nax.set_ylim(-6, 6)\n\n# Create a colorbar\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='viridis'))\n\n# Set the label of the colorbar\ncbar.set_label('Time')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nfemale = [5.7, 6.0, 5.1, 5.2, 6.2, 5.2]\nmale = [6.6, 6.0, 5.7, 6.2, 5.2, 6.2]\nllm = [7.8, 7.5, 7.5, 7.0, 7.0, 7.0]\nperson = [7.4, 7.3, 7.2, 7.2, 7.2, 7.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(female, label='Female Player')\nax.plot(male, label='Male Player')\nax.plot(llm, label='LLM Player')\nax.plot(person, label='Person Player')\n\n# Set the title and labels\nax.set_title('Trustee Scenario')\nax.set_xlabel('Trustee Scenario')\nax.set_ylabel('Average Amount Sent ($)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['Athlete Jim', 'Athlete Bill']\nrunning_times = [120, 130]\ninterrupted_times = [140, 160]\nrest_times = [150, 170]\nrunning2_times = [160, 180]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\nbar_width = 0.2\nindex = range(len(teams))\n\n# Plot bars for each team\nax.bar([i - bar_width for i in index], running_times, bar_width, label='Running')\nax.bar(index, interrupted_times, bar_width, label='Interrupted')\nax.bar([i + bar_width for i in index], rest_times, bar_width, label='Rest')\nax.bar([i + 2 * bar_width for i in index], running2_times, bar_width, label='Running2')\n\n# Add labels and title\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Time')\nax.set_title('Endurance Race Performance Analysis')\nax.set_xticks([i for i in index])\nax.set_xticklabels(teams)\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5]\ny = [6, 7, 8, 9, 10]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Comparative Distribution of Three Different Groups')\n\n# Set the x-axis label\nax.set_xlabel('Number of Observations')\n\n# Set the y-axis label\nax.set_ylabel('Value Range')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [-300, -120, -100, -75, -50, -35]\ny = [350, 150, 200, 75, 50, 25]\n\n# Create a bar chart\nplt.bar(x, y, color='red')\n\n# Set the title and labels\nplt.title('Waterfall Chart')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the distance from the center\nR = np.sqrt(X**2 + Y**2)\n\n# Create a color map\ncmap = plt.cm.viridis\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\ncax = ax.pcolormesh(X, Y, R, cmap=cmap, shading='auto')\n\n# Add a color bar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the heatmap\ndata = np.random.rand(10, 10)\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='hot')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Flickr30k\nflickr30k_data = [\n    [500, 400, 300, 200, 100],\n    [550, 450, 350, 250, 150],\n    [600, 500, 400, 300, 200],\n    [650, 550, 450, 350, 250],\n    [700, 600, 500, 400, 300],\n    [750, 650, 550, 450, 350],\n    [800, 700, 600, 500, 400],\n    [850, 750, 650, 550, 450],\n    [900, 800, 700, 600, 500]\n]\n\n# Data for MS-COCO\nmscoco_data = [\n    [500, 400, 300, 200, 100],\n    [550, 450, 350, 250, 150],\n    [600, 500, 400, 300, 200],\n    [650, 550, 450, 350, 250],\n    [700, 600, 500, 400, 300],\n    [750, 650, 550, 450, 350],\n    [800, 700, 600, 500, 400],\n    [850, 750, 650, 550, 450],\n    [900, 800, 700, 600, 500]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.bar(range(9), flickr30k_data[0], color='blue')\nax.bar(range(9), flickr30k_data[1], color='green')\nax.bar(range(9), flickr30k_data[2], color='red')\nax.bar(range(9), flickr30k_data[3], color='purple')\nax.bar(range(9), flickr30k_data[4], color='orange')\nax.bar(range(9), flickr30k_data[5], color='cyan')\nax.bar(range(9), flickr30k_data[6], color='magenta')\nax.bar(range(9), flickr30k_data[7], color='yellow')\nax.bar(range(9), flickr30k_data[8], color='black')\n\n# Set the title and labels\nax.set_title('Flickr30k')\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x(m)')\n\n# Set the y-axis label\nax.set_ylabel('y(m)')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 25)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 30)\n\n# Draw a red line\nax.plot([0, 25], [0, 30], 'r-')\n\n# Draw a blue line\nax.plot([0, 25], [0, 25], 'b-')\n\n# Draw a black line\nax.plot([0, 25], [0, 20], 'k-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the circle's radius\nradius = 1\n\n# Generate points on the circle\ntheta = np.linspace(0, 2*np.pi, 100)\nx = radius * np.cos(theta)\ny = radius * np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, 'b.')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of values for alpha and beta\nalpha = np.linspace(0, 2, 100)\nbeta = np.linspace(0, 2, 100)\nalpha_grid, beta_grid = np.meshgrid(alpha, beta)\n\n# Calculate delta_t for each pair of alpha and beta\ndelta_t = np.sqrt(alpha_grid**2 + beta_grid**2)\n\n# Create a colormap for delta_t\ncmap = plt.cm.viridis\n\n# Plot the heatmap\nplt.figure(figsize=(8.0, 7.0))\nplt.pcolormesh(alpha_grid, beta_grid, delta_t, cmap=cmap)\nplt.colorbar(label=r'$\\Delta t$')\nplt.xlabel(r'$\\alpha$')\nplt.ylabel(r'$\\beta$')\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the first subplot\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x / 10)\ny2 = np.cos(x / 10)\ny3 = np.tan(x / 10)\ny4 = np.exp(-x / 10)\n\n# Plot the data on the first subplot\nax1.plot(x, y1, 'b-', label='Left')\nax1.plot(x, y2, 'g-', label='Center Left')\nax1.plot(x, y3, 'r-', label='Center Right')\nax1.plot(x, y4, 'm-', label='Right')\n\n# Set the title of the first subplot\nax1.set_title('Utility distribution per topic')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Define the data for the second subplot\nitems = ['L', 'CL', 'C', 'CR', 'R']\nusers = [np.random.rand(100) for _ in range(len(items))]\n\n# Plot the data on the second subplot\nfor i, item in enumerate(items):\n    ax2.scatter(range(100), users[i], color=plt.cm.viridis(i / len(items)))\n\n# Set the title of the second subplot\nax2.set_title('User preference matrix (M)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define the data for the plot\nx = np.linspace(-2, 4, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Reactive-2 payoff')\nax.set_ylabel('Memory-2 payoff')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define the data for the plots\ndata_vicuna = np.random.rand(3, 5)\ndata_alpaca = np.random.rand(3, 5)\n\n# Create the plots\nax.imshow(data_vicuna, cmap='Blues')\nax.imshow(data_alpaca, cmap='Oranges')\n\n# Set the title\nax.set_title('Model = Vicuna')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the color of the background\nax.set_facecolor('pink')\n\n# Set the x-axis limits\nax.set_xlim(-40, 1)\n\n# Set the y-axis limits\nax.set_ylim(-5, 6)\n\n# Draw horizontal lines\nax.axhline(y=0, color='black', linewidth=0.5)\nax.axhline(y=1, color='black', linewidth=0.5)\nax.axhline(y=2, color='black', linewidth=0.5)\nax.axhline(y=3, color='black', linewidth=0.5)\nax.axhline(y=4, color='black', linewidth=0.5)\nax.axhline(y=5, color='black', linewidth=0.5)\n\n# Draw vertical lines\nax.axvline(x=-40, color='black', linewidth=0.5)\nax.axvline(x=-35, color='black', linewidth=0.5)\nax.axvline(x=-30, color='black', linewidth=0.5)\nax.axvline(x=-25, color='black', linewidth=0.5)\nax.axvline(x=-20, color='black', linewidth=0.5)\nax.axvline(x=-15, color='black', linewidth=0.5)\nax.axvline(x=-10, color='black', linewidth=0.5)\nax.axvline(x=-5, color='black', linewidth=0.5)\nax.axvline(x=0, color='black', linewidth=0.5)\nax.axvline(x=5, color='black', linewidth=0.5)\nax.axvline(x=10, color='black', linewidth=0.5)\nax.axvline(x=15, color='black', linewidth=0.5)\nax.axvline(x=20, color='black', linewidth=0.5)\nax.axvline(x=25, color='black', linewidth=0.5)\nax.axvline(x=30, color='black', linewidth=0.5)\nax.axvline(x=35, color='black', linewidth=0.5)\nax.axvline(x=40, color='black', linewidth=0.5)\n\n# Draw a rectangle\nrect = plt.Rectangle((0, 0), 1, 1, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Draw a line\nx = [-40, -35, -30, -25, -20, -15, -10, -5, 0, 5]\ny = [0, 1, 2, 3, 4, 5, 4, 3, 2, 1]\nax.plot(x, y, color='black', linewidth=0.5)\n\n# Draw a scatter plot\nx = [-40, -35, -30, -25, -20, -15, -10, -5, 0, 5]\ny = [0, 1, 2, 3, 4, 5, 4, 3, 2, 1]\nax.scatter(x, y, color='green')\n\n# Set the title\nax.set_title('Scatter Plot with Rectangle and Line')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Exponential Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 200)\n\n# Set the limits for the y-axis\nax.set_ylim(1, 7)\n\n# Draw a horizontal line at y=2\nax.axhline(y=2, color='black', linestyle='-')\n\n# Draw a vertical line at x=100\nax.axvline(x=100, color='black', linestyle='-')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((25, 1), 25, 1, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a green border\nrect = plt.Rectangle((50, 1), 25, 1, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a blue border\nrect = plt.Rectangle((75, 1), 25, 1, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a yellow border\nrect = plt.Rectangle((100, 1), 25, 1, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a magenta border\nrect = plt.Rectangle((125, 1), 25, 1, linewidth=1, edgecolor='magenta', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a cyan border\nrect = plt.Rectangle((150, 1), 25, 1, linewidth=1, edgecolor='cyan', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a white border\nrect = plt.Rectangle((175, 1), 25, 1, linewidth=1, edgecolor='white', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a black border\nrect = plt.Rectangle((200, 1), 25, 1, linewidth=1, edgecolor='black', facecolor='none')\nax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]\ny_known = [200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400]\ny_unknown = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y_known, 'g-', label='Known')\nplt.plot(x, y_unknown, 'b-', label='Unknown')\nplt.xlabel('Maximum Predicted Probability')\nplt.ylabel('Number of Examples')\nplt.title('Number of Examples vs Maximum Predicted Probability')\nplt.legend()\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Bfloat16', 'INT8', 'INT4', 'INT2']\ny1 = [9, 8, 7, 9]\ny2 = [8, 7, 6, 9]\ny3 = [7, 6, 5, 9]\ny4 = [6, 5, 4, 9]\ny5 = [5, 4, 3, 9]\ny6 = [4, 3, 2, 9]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.plot(x, y1, 'r-', label='Qwen-7B-Chat')\nax.plot(x, y2, 'b-', label='Llama2-7B-Chat')\nax.plot(x, y3, 'g-', label='MPT-7B-Chat')\nax.plot(x, y4, 'y-', label='CodeLlama-7B-Instruct')\n\n# Adding a legend\nax.legend()\n\n# Setting the title and labels\nax.set_title('Bias Score by Data Type and Model')\nax.set_xlabel('Data Type')\nax.set_ylabel('Bias Score')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.0, 0.2, 0.4]\ny_known = [1500, 500, 300]\ny_unknown = [1200, 800, 600]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(x, y_known, color='orange', label='Known')\nax.bar(x, y_unknown, bottom=y_known, color='blue', label='Unknown')\n\n# Add labels and title\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\nax.set_title('Number of Examples by Maximum Predicted Probability')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2**6, 2**7, 2**8, 2**9, 2**10, 2**11]\ny1 = [100000, 200000, 300000, 400000, 500000, 600000]\ny2 = [100000, 200000, 300000, 400000, 500000, 600000]\ny3 = [100000, 200000, 300000, 400000, 500000, 600000]\ny4 = [100000, 200000, 300000, 400000, 500000, 600000]\ny5 = [100000, 200000, 300000, 400000, 500000, 600000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Cos | n0 = 200')\nax.plot(x, y2, 'g--', label='Cos | n0 = 400')\nax.plot(x, y3, 'b-', label='ReLU | n0 = 200')\nax.plot(x, y4, 'b--', label='ReLU | n0 = 400')\nax.plot(x, y5, 'r-', label='Leaky ReLU | n0 = 200')\nax.plot(x, y6, 'r--', label='Leaky ReLU | n0 = 400')\n\n# Set the title and labels\nax.set_title('Empirical Lipschitz Constant')\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 5000, 5500, 6000, 6500, 7000], 'r-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 5000, 5500, 6000, 6500, 7000], 'g-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 5000, 5500, 6000, 6500, 7000], 'p-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 5000, 5500, 6000, 6500, 7000], 'b-')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='blue', label='WI')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='orange', label='ISQ')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data\nx = [-4, -3, -2, -1, 0, 1, 2, 3, 4]\ny_daytime_sunny = [3, 3, 3, 3, 3, 3, 3, 3, 3]\ny_night_rainy = [2, 2, 2, 2, 2, 2, 2, 2, 2]\ny_pgst = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n# Plot the data\nax.plot(x, y_daytime_sunny, 'o', color='orange')\nax.plot(x, y_night_rainy, 'o', color='blue')\nax.plot(x, y_pgst, 'o', color='green')\n\n# Set the title and labels\nax.set_title('Scatter Plot of Data')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for each subplot\ndata1 = [[-2, -1, 0], [-1, 0, 1], [0, 1, 2]]\ndata2 = [[-2, -1, 0], [-1, 0, 1], [0, 1, 2]]\ndata3 = [[-2, -1, 0], [-1, 0, 1], [0, 1, 2]]\ndata4 = [[-2, -1, 0], [-1, 0, 1], [0, 1, 2]]\n\n# Plot the data\nax.scatter(data1[0], data1[1], color='red')\nax.scatter(data2[0], data2[1], color='green')\nax.scatter(data3[0], data3[1], color='blue')\nax.scatter(data4[0], data4[1], color='purple')\n\n# Set the limits of the plot\nax.set_xlim(-8, 8)\nax.set_ylim(-7, 7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [10, 50, 100, 500]\ny1 = [20, 20, 20, 20]\ny2 = [10, 10, 10, 10]\ny3 = [30, 30, 30, 30]\ny4 = [15, 15, 15, 15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r-o', label='ActivityNet mIoU')\nax.plot(x, y2, 'o-y', label='Breakfast MoF')\nax.plot(x, y3, 'c-', label='ActivityNet CIDER')\nax.plot(x, y4, 'k-', label='QVHighlights mAP')\n\n# Set the title and labels\nax.set_title('Performance Metrics Over Time')\nax.set_xlabel('Time (seconds)')\nax.set_ylabel('Performance Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Define the data\ntime_steps = [0, 1, 2, 3]\nGT_values = [0, 10, 20, 30]\nDRS_values = [0, 10, 20, 30]\nPR_based_values = [0, 10, 20, 30]\n\n# Plot the data\nax.plot(time_steps, GT_values, 'g-', label='GT')\nax.plot(time_steps, DRS_values, 'b-', label='DRS')\nax.plot(time_steps, PR_based_values, 'r-', label='PR-based')\n\n# Set the title and labels\nax.set_title('Time Series Data')\nax.set_xlabel('Time Step')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0, 20, 40, 60, 80]\ny_clip = [0.53, 0.75, 0.75, 0.75, 0.75]\ny_laion_5k = [0.55, 0.75, 0.75, 0.75, 0.75]\ny_coco_5k = [0.55, 0.75, 0.75, 0.75, 0.75]\ny_laion_10k = [0.55, 0.75, 0.75, 0.75, 0.75]\ny_coco_10k = [0.55, 0.75, 0.75, 0.75, 0.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y_clip, label='clip')\nax.plot(x, y_laion_5k, label='laion (5k)')\nax.plot(x, y_coco_5k, label='coco (5k)')\nax.plot(x, y_laion_10k, label='laion (10k)')\nax.plot(x, y_coco_10k, label='coco (10k)')\n\n# Set the title and labels\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\nax.set_xlabel('Deposition IO Norm')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nn = [0, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8]\ncontent = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0]\norganization = [8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0]\nlanguage = [7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(n, content, label='Content', color='blue')\nax.plot(n, organization, label='Organization', color='orange')\nax.plot(n, language, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [300, 350, 400, 450, 500, 550, 600]\namericas = [100, 150, 200, 250, 300, 350, 400]\nasia = [200, 250, 300, 350, 400, 450, 500]\neurope = [150, 200, 250, 300, 350, 400, 450]\noceania = [500, 550, 600, 650, 700, 750, 800]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, africa, label='Africa', color='green')\nax.plot(years, americas, label='Americas', color='yellow')\nax.plot(years, asia, label='Asia', color='red')\nax.plot(years, europe, label='Europe', color='orange')\nax.plot(years, oceania, label='Oceania', color='blue')\n\n# Set the title and labels\nax.set_title('World Population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0, 20, 40]\ny1 = [6.3, 5.2, 4.1]\ny2 = [6.1, 5.1, 4.1]\ny3 = [6.1, 5.1, 4.1]\ny4 = [6.1, 5.1, 4.1]\ny5 = [6.1, 5.1, 4.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='Notre-Dame de Paris')\nax.plot(x, y2, label='Demi-Gods and Semi-Devils')\nax.plot(x, y3, label='The Count of Monte Cristo')\nax.plot(x, y4, label='Game of Thrones')\nax.plot(x, y5, label='Attack on Titan')\n\n# Set the title and labels\nax.set_title('Scores')\nax.set_xlabel('Time')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\nvalues = [50, 50, 50, 50, 50, 50, 50, 50, 50, 40]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Bar Chart of Values')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregion_1_sales = [60, 40, 20]\nregion_2_sales = [80, 60, 40]\nregion_3_sales = [90, 70, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Plot the data\nax.bar(range(len(region_1_sales)), region_1_sales, color='green')\nax.bar(range(len(region_2_sales)), region_2_sales, color='blue')\nax.bar(range(len(region_3_sales)), region_3_sales, color='red')\n\n# Set the title and labels\nax.set_title('Average Monthly Sales by Product Across Regions')\nax.set_xlabel('Product')\nax.set_ylabel('Sales')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlengths = [0.9, 10.19, 20.29, 30.39, 40.49]\nspearmans = [0.5, 0.25, 0.25, 0.25, 0.5]\n\n# Create a bar chart\nplt.bar(lengths, spearmans, color='blue')\n\n# Set the title and labels\nplt.title('Spearman Correlation by Length')\nplt.xlabel('Length')\nplt.ylabel('Spearman')\n\n# Set the y-axis limits\nplt.ylim(-1, 0.75)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nbeauty_values = [2.2, 2.4, 2.4, 19.9, 14.3]\nmovie_lens_values = [3.0, 3.0, 3.1, 5.1, 4.8]\nyelp_values = [4.8, 4.8, 4.8, 19.7, 19.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars for Beauty\nax.bar(categories, beauty_values, color='blue', label='Beauty')\n\n# Plot bars for MovieLens-1M\nax.bar(categories, movie_lens_values, bottom=beauty_values, color='red', label='MovieLens-1M')\n\n# Plot bars for Yelp\nax.bar(categories, yelp_values, bottom=[sum(x) for x in zip(beauty_values, movie_lens_values)], color='green', label='Yelp')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Category-wise Sentiment Analysis')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\nlanguages = ['EN', 'FR', 'ES', 'DE', 'IT']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(models, improvement, color='blue')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Improve [%]')\nax.set_title('ENDEFRRITES sampled')\n\n# Add language labels\nfor i, v in enumerate(improvement):\n    ax.text(i, v + 0.1, languages[i], ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nf1_scores = [82, 83, 80, 81, 84, 86]\nllm_mis = [83, 84, 81, 82, 85, 87]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the data\nax.barh(pheme, f1_scores, color='blue')\nax.barh(pheme, llm_mis, left=f1_scores, color='gray')\n\n# Set the title and labels\nax.set_title('F1-score vs LLM-mis')\nax.set_xlabel('F1-score')\nax.set_ylabel('Pheme')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = [\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1]\n]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the x-axis labels\nx_labels = ['1', '2', '3', '4', '5', '6']\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the color map\ncmap = plt.cm.get_cmap('viridis')\n\n# Plot the bars\nfor i, row in enumerate(data):\n    ax.bar(x_labels, row, bottom=[sum(row[:j]) for j in range(len(row))], color=cmap(i/len(data)))\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = {\n    'human': [100, 200, 300, 400, 500],\n    'gpt4': [100, 200, 300, 400, 500],\n    'gpt4-cot': [100, 200, 300, 400, 500]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(data['human'], color='blue')\nax.bar(data['gpt4'], color='yellow')\nax.bar(data['gpt4-cot'], color='red')\n\n# Set the title and labels\nax.set_title('Resonance Preference Plot for rich-context')\nax.set_xlabel('Role')\nax.set_ylabel('Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winograd', 'Average']\naccuracies = [\n    [53.0, 51.3, 56.4, 56.2],\n    [46.6, 45.8, 48.0, 46.7],\n    [45.3, 45.8, 44.5, 44.3],\n    [43.0, 43.7, 48.5, 43.1],\n    [53.1, 53.7, 53.1]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars for each task\nfor i, task_accuracies in enumerate(accuracies):\n    ax.bar(tasks, task_accuracies, label=f'Task {i+1}')\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Task Accuracy Comparison')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = ['M=3', 'M=4', 'M=5', 'M=6', 'M=7']\ny1 = [60, 60, 60, 60, 60]\ny2 = [65, 65, 65, 65, 65]\ny3 = [60, 60, 60, 60, 60]\ny4 = [65, 65, 65, 65, 65]\ny5 = [60, 60, 60, 60, 60]\n\n# Plot the data\nax.plot(x, y1, label='M=3')\nax.plot(x, y2, label='M=4')\nax.plot(x, y3, label='M=5')\nax.plot(x, y4, label='M=6')\nax.plot(x, y5, label='M=7')\n\n# Set the title and labels\nax.set_title('Performance of Different Models')\nax.set_xlabel('Model')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['DLMA-7B VS. LLAMA-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMA-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\ndlma_win = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\ntie = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\ndlma_lose = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(labels, dlma_win, color='green')\nax.bar(labels, tie, bottom=dlma_win, color='blue')\nax.bar(labels, dlma_lose, bottom=[i + j for i, j in zip(dlma_win, tie)], color='red')\n\n# Set the title and labels\nax.set_title('DLMA vs. Baseline Methods On HHH (Evaluated by GPT4)')\nax.set_xlabel('Match')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntime = [0, 10, 20, 30, 40]\ntrot = [0.5, 0.7, 0.8, 0.9, 0.95]\npace = [0.3, 0.5, 0.6, 0.7, 0.75]\nbound = [0.2, 0.4, 0.5, 0.6, 0.65]\npronk = [0.1, 0.3, 0.4, 0.5, 0.55]\ntransition = [0.05, 0.25, 0.35, 0.45, 0.5]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.bar(time, trot, color='green', label='trot')\nax.bar(time, pace, bottom=trot, color='red', label='pace')\nax.bar(time, bound, bottom=[i+j for i,j in zip(trot, pace)], color='purple', label='bound')\nax.bar(time, pronk, bottom=[i+j+k for i,j,k in zip(trot, pace, bound)], color='brown', label='pronk')\nax.bar(time, transition, bottom=[i+j+k+l for i,j,k,l in zip(trot, pace, bound, pronk)], color='gray', label='transition')\n\n# Labels and Title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Gait Distribution (%)')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nap1kL_wins = [68, 82, 68, 72, 68]\ntie = [24, 15, 22, 19, 23]\nag1k_wins = [8, 3, 10, 9, 9]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.2\nindex = range(len(labels))\n\n# Plot bars for AP-1kL wins\nax.bar([i - bar_width for i in index], ap1kL_wins, bar_width, label='AP-1kL wins')\n\n# Plot bars for Tie\nax.bar(index, tie, bar_width, label='Tie')\n\n# Plot bars for AG-1k wins\nax.bar([i + bar_width for i in index], ag1k_wins, bar_width, label='AG-1k wins')\n\n# Set labels and title\nax.set_xlabel('Labels')\nax.set_ylabel('Values')\nax.set_title('Bar Chart with Multiple Y-Axes')\nax.set_xticks(index)\nax.set_xticklabels(labels)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nbenefits = [14.8, 29.6, 9.4, 24.1]\nreliability = [9.5, 26.2, 9.5, 24.1]\nsecurity = [8.3, 26.2, 9.5, 24.1]\nprivacy = [24.1, 29.6, 9.3, 20.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(categories, benefits, color='red')\nax.bar(categories, reliability, bottom=benefits, color='orange')\nax.bar(categories, security, bottom=[sum(x) for x in zip(benefits, reliability)], color='grey')\nax.bar(categories, privacy, bottom=[sum(x) for x in zip(benefits, reliability, security)], color='blue')\n\n# Set the title and labels\nax.set_title('Eye Movement')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny1 = [-8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0]\ny2 = [-10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0]\n\n# Data for the second graph\nx2 = [-150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150]\ny3 = [-10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0]\ny4 = [-10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the first graph\nax.plot(x, y1, color='blue', label='Ours')\nax.plot(x, y2, color='purple', label='Saliency-based Sampling')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change (%)')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Plot the second graph\nax2.plot(x2, y3, color='blue', label='Ours')\nax2.plot(x2, y4, color='purple', label='Saliency-based Sampling')\n\n# Set the title and labels\nax2.set_title('Rate of Gain Change (%)')\nax2.set_xlabel('Rotation Angle (\u00b0)')\nax2.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax2.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 3.1, 3.0, 3.1, 3.0, 3.0]\ncompleteness = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\nconciseness = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\nreadability = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot bars for each model\nax.bar(models, accuracy, color='blue', label='Accuracy')\nax.bar(models, completeness, bottom=accuracy, color='orange', label='Completeness')\nax.bar(models, conciseness, bottom=[a + c for a, c in zip(accuracy, completeness)], color='red', label='Conciseness')\nax.bar(models, readability, bottom=[a + c + k for a, c, k in zip(accuracy, completeness, conciseness)], color='cyan', label='Readability')\n\n# Set labels and title\nax.set_xlabel('Language Models')\nax.set_ylabel('Ratings')\nax.set_title('Ratings of Language Models on a Scale from 1-4')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nplt.bar(models, accuracies, color='green')\n\n# Set the title and labels\nplt.title('Model Accuracy')\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nalpaca_52k_plus = [78.8, 67.4, 44.2]\nalpaga_1k_plus = [11.7, 18.1, 21.9]\nalpaga_1k_plus_losses = [9.5, 14.5, 33.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.barh(products, alpaca_52k_plus, color='orange', label='Refined-Alpaca-1k-longest wins')\nax.barh(products, alpaga_1k_plus, left=alpaca_52k_plus, color='blue', label='Alpaca-1k-longest wins')\nax.barh(products, alpaga_1k_plus_losses, left=[sum(x) for x in zip(alpaca_52k_plus, alpaga_1k_plus)], color='lightblue', label='Alpaca-1k-longest losses')\n\n# Set the title and labels\nax.set_title('GPT4-as-a-judge')\nax.set_xlabel('Score')\nax.set_ylabel('Products')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Ang', 'Cn', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nnegative = [100, 50, 20, 10, 100, 350, 50, 10]\npositive = [100, 50, 20, 10, 100, 350, 50, 10]\nnone = [100, 50, 20, 10, 100, 350, 50, 10]\nmixed = [100, 50, 20, 10, 100, 350, 50, 10]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(emotions, negative, color='red', label='negative')\nax.bar(emotions, positive, color='green', bottom=negative, label='positive')\nax.bar(emotions, none, color='gray', bottom=[i+j for i,j in zip(negative, positive)], label='none')\nax.bar(emotions, mixed, color='orange', bottom=[i+j+k for i,j,k in zip(negative, positive, none)], label='mixed')\n\n# Add labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency')\nax.set_title('Emotion Frequency Distribution')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Success', 'Occupancy Error', 'Grounding Error', 'Gripper collision', 'Grasping failed']\ngpt4v_values = [0.9, 0.7, 0.5, 0.3, 0.2]\nrobocode_values = [0.8, 0.6, 0.4, 0.2, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data\nax.bar(categories, gpt4v_values, color='green')\nax.bar(categories, robocode_values, color='blue')\n\n# Set the title and labels\nax.set_title('Comparison of Algorithms')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage of Total Trials')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndatasets = ['VOC 2012', 'COCO 2017']\ntransmission_delay_jpeg = [3.5, 2.5]\ntransmission_delay_deepjscss = [3.0, 2.0]\ntransmission_delay_ours = [3.2, 2.2]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nbar_width = 0.2\nindex = range(len(datasets))\n\n# Plot the bars for each dataset\nax.bar([i - bar_width for i in index], transmission_delay_jpeg, bar_width, label='JPEG')\nax.bar(index, transmission_delay_deepjscss, bar_width, label='DEEPJSCC w/ ofdm')\nax.bar([i + bar_width for i in index], transmission_delay_ours, bar_width, label='OURS')\n\n# Set the labels and title\nax.set_xlabel('Datasets')\nax.set_ylabel('Transmission Delay (ms)')\nax.set_title('Transmission Delay by Dataset')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\nvalues = [1.2, 1.3, 1.4, 1.5, 1.6, 1.7]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add labels and title\nplt.xlabel('PDEs')\nplt.ylabel('log L2')\nplt.title('Log L2 vs PDEs')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_data = [975, 975, 975, 975]\nsroi_data = [975, 975, 975, 975]\nt2013_data = [975, 975, 975, 975]\nlive_m_data = [975, 975, 975, 975]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot data\nax.bar(models, live_data, color='blue')\nax.bar(models, sroi_data, bottom=live_data, color='orange')\nax.bar(models, t2013_data, bottom=[x + y for x, y in zip(live_data, sroi_data)], color='cyan')\nax.bar(models, live_m_data, bottom=[x + y + z for x, y, z in zip(live_data, sroi_data, t2013_data)], color='yellow')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Metric Values')\nax.set_title('Models')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\nzero_shot_values = [6.11, 28.33, 60.56]\none_shot_values = [31.11, 56.11, 60.56]\nds_agent_values = [85.0, 85.0, 99.44]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nbar_width = 0.25\nindex = range(len(categories))\n\n# Plot bars for each category\nax.bar([i - bar_width for i in index], zero_shot_values, bar_width, label='Zero-shot')\nax.bar(index, one_shot_values, bar_width, label='One-shot')\nax.bar([i + bar_width for i in index], ds_agent_values, bar_width, label='DS-Agent')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('One pass rate (%)')\nax.set_title('One Pass Rate by Category')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_values = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_values = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_values = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.2\nindex = range(len(categories))\n\nax.bar([i - bar_width for i in index], win_values, bar_width, label='Win')\nax.bar(index, tie_values, bar_width, label='Tie')\nax.bar([i + bar_width for i in index], loss_values, bar_width, label='Loss')\n\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Win, Tie, and Loss')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create bar chart\nplt.figure(figsize=(6.0, 2.0))\nplt.bar(labels, values, color='blue')\n\n# Set title and labels\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.xlabel('Baseline')\nplt.ylabel('Probability of Improvement')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 83.3, 100.0, 91.7]\nfollowing_related_format_error_rate = [60.0, 27.7, 48.1, 100.0, 60.8]\nfollowing_related_error_rate = [100.0, 100.0, 100.0, 100.0, 100.0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nbars = ax.bar(steps, avg_following_rate, color='gray', label='Avg. Following Rate')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Add labels and title\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = {\n    'coreutils': [50, 60, 70, 80, 90, 100],\n    'scp': [20, 30, 40, 50, 60, 70],\n    'tar': [10, 20, 30, 40, 50, 60],\n    'exim': [10, 20, 30, 40, 50, 60],\n    'menc.c': [10, 20, 30, 40, 50, 60],\n    'niginx': [10, 20, 30, 40, 50, 60],\n    'bzip2': [10, 20, 30, 40, 50, 60],\n    'astar': [10, 20, 30, 40, 50, 60],\n    'gcc': [10, 20, 30, 40, 50, 60],\n    'gobmk': [10, 20, 30, 40, 50, 60],\n    'h264.': [10, 20, 30, 40, 50, 60],\n    'liba': [10, 20, 30, 40, 50, 60],\n    'mc': [10, 20, 30, 40, 50, 60],\n    'mmem': [10, 20, 30, 40, 50, 60],\n    'omnet.': [10, 20, 30, 40, 50, 60],\n    'perl': [10, 20, 30, 40, 50, 60],\n    'sieng': [10, 20, 30, 40, 50, 60],\n    'xalan': [10, 20, 30, 40, 50, 60],\n    'php': [10, 20, 30, 40, 50, 60],\n    'mySQL': [10, 20, 30, 40, 50, 60]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nfor key, value in data.items():\n    ax.plot(value, label=key)\n\n# Set the title and labels\nax.set_title('Performance Metrics')\nax.set_xlabel('Time')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Llama2', 'Mistral']\ny1 = [5.52, 5.53]\ny2 = [5.83, 5.84]\ny3 = [5.54, 5.54]\ny4 = [6.57, 6.75]\ny5 = [6.81, 6.81]\ny6 = [7.08, 7.08]\ny7 = [6.9, 6.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(x, y1, color='purple')\nax.bar(x, y2, bottom=y1, color='red')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='green')\nax.bar(x, y4, bottom=[sum(y) for y in zip(y1, y2, y3)], color='orange')\nax.bar(x, y5, bottom=[sum(y) for y in zip(y1, y2, y3, y4)], color='brown')\nax.bar(x, y6, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5)], color='blue')\nax.bar(x, y7, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6)], color='darkblue')\n\n# Set the title and labels\nax.set_title('MT-Bench Score')\nax.set_xlabel('Models')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 100]\ny1 = [49.98, 49.63]\ny2 = [51.05, 50.74]\n\n# Plotting\nplt.figure(figsize=(6.61, 5.23))\nplt.plot(x, y1, label='Random Sampling', color='blue')\nplt.plot(x, y2, label='ClusterClip', color='orange')\nplt.axhline(y=50, color='green', linestyle='--')\nplt.xlabel('Number of Clusters')\nplt.ylabel('MMLU')\nplt.title('Comparison of Different Sampling Techniques')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['ResNet18', 'AlexNet', 'ResNet50']\ny0 = [1.0, 1.0, 1.0]\ny50 = [1.8, 1.9, 1.6]\ny48 = [3.3, 2.9, 1.8]\ny75 = [7.4, 5.2, 2.7]\ny78 = [8.7, 8.1, 2.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot bars\nax.bar(x, y0, color='pink')\nax.bar(x, y50, bottom=y0, color='orange')\nax.bar(x, y48, bottom=[sum(i) for i in zip(y0, y50)], color='green')\nax.bar(x, y75, bottom=[sum(i) for i in zip(y0, y50, y48)], color='cyan')\nax.bar(x, y78, bottom=[sum(i) for i in zip(y0, y50, y48, y75)], color='magenta')\n\n# Set labels and title\nax.set_xlabel('Perturbation')\nax.set_ylabel('Speedup')\nax.set_title('Speedup vs Perturbation')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\naccuracies = [\n    [80, 20, 10, 10, 10, 10],\n    [70, 30, 10, 10, 10, 10],\n    [60, 40, 10, 10, 10, 10],\n    [50, 50, 10, 10, 10, 10],\n    [40, 60, 10, 10, 10, 10],\n    [30, 70, 10, 10, 10, 10]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot bars for each model\nfor i, model in enumerate(models):\n    ax.barh(model, accuracies[i], color=['green', 'blue', 'red', 'purple'])\n\n# Set labels and title\nax.set_xlabel('Accuracy')\nax.set_title('LeetCode, DS-6.7b')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nrecost_wins = [53, 80, 116, 99, 179]\ntie_wins = [6, 33, 49, 50, 23]\nalpacawins_wins = [21, 67, 53, 103, 98]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.2\nindex = range(len(games))\n\n# Plot bars for each game\nax.bar([i - bar_width for i in index], recost_wins, bar_width, label='Recost (1% wins)')\nax.bar(index, tie_wins, bar_width, label='Tie')\nax.bar([i + bar_width for i in index], alpacawins_wins, bar_width, label='Alpaca wins')\n\n# Set labels and title\nax.set_xlabel('Games')\nax.set_ylabel('Wins')\nax.set_title('Game Wins by Category')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+']\nfpr_non_aggregate = [35.15, 26.86, 19.08, 22.09, 20.67, 17.06, 58.99, 66.19]\nfpr_aggregate = [62.94, 60.69, 58.38, 58.38, 58.38, 58.38, 58.38, 58.38]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(brands, fpr_non_aggregate, color='green', label='Non-Aggregate')\nax.bar(brands, fpr_aggregate, bottom=fpr_non_aggregate, color='orange', label='Aggregate')\n\n# Add a horizontal line at 50\nax.axhline(y=50, color='gray', linestyle='--')\n\n# Set the title and labels\nax.set_title('FPR@90TPR on Guerriero et al. 2022')\nax.set_xlabel('Brands')\nax.set_ylabel('FPR@90TPR')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 2, 1]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 5.0))\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nplt.xlabel('Semantic Category')\nplt.ylabel('Difference (%)')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20]\ny1 = [66.3, 61.9, 53.8]\ny2 = [10.1, 13.6, 13.7]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\nax.bar(x, y1, color='blue', label='Truthful Recall')\nax.bar(x, y2, color='red', label='Misleading Recall')\n\n# Setting labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Score')\nax.set_title('Scores Over Time')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SciQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComQC', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'Com"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['LSTM-2/7b/0.1', 'Zephyr-7b/0.1', 'Qwen-7b/0.1', 'Med-PALM', 'GPT4']\ny1 = [48.1, 57.2, 69.3, 64.9, 72.3]\ny2 = [56.0, 62.2, 64.4, 64.4, 67.6]\ny3 = [54.3, 50.8, 59.3, 56.0, 51.7]\ny4 = [72.0, 71.0, 70.4, 76.3, 76.9]\ny5 = [84.4, 82.2, 80.4, 86.5, 88.7]\ny6 = [89.1, 86.1, 80.4, 86.9, 88.9]\ny7 = [83.2, 86.1, 82.0, 83.1, 88.8]\ny8 = [89.0, 80.9, 82.0, 83.8, 88.0]\ny9 = [88.0, 80.9, 82.0, 83.8, 88.0]\ny10 = [88.0, 80.9, 82.0, 83.8, 88.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.bar(x, y1, color='brown')\nax.bar(x, y2, bottom=y1, color='blue')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='green')\nax.bar(x, y4, bottom=[sum(y) for y in zip(y1, y2, y3)], color='red')\nax.bar(x, y5, bottom=[sum(y) for y in zip(y1, y2, y3, y4)], color='purple')\nax.bar(x, y6, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5)], color='orange')\nax.bar(x, y7, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6)], color='pink')\nax.bar(x, y8, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7)], color='cyan')\nax.bar(x, y9, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7, y8)], color='magenta')\nax.bar(x, y10, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9)], color='grey')\n\n# Set the title and labels\nax.set_title('Performance Score (%)')\nax.set_xlabel('Model')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFG', 'AFH', 'AFI', 'AFJ', 'AFK', 'AFL', 'AFP', 'AFP', 'AFR', 'AFS', 'AFT', 'AFV', 'AFW', 'AFX', 'AFY', 'AFZ', 'IC', 'SS']\ngpt35 = [42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21]\ngpt4 = [45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.bar(categories, gpt35, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(categories, gpt4, bottom=gpt35, color='orange')\nfor bar in bars:\n    yval = bar.get_height() + gpt35[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nax.set_xlabel('Categories')\nax.set_ylabel('Non-NLAs')\nax.set_title('Non-NLAs by Category')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 10]\ny1 = [-4.5, -4.5, -4.5, -4.5]\ny2 = [-4.5, -4.5, -4.5, -4.5]\ny3 = [-4.5, -4.5, -4.5, -4.5]\ny4 = [-4.5, -4.5, -4.5, -4.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, color='pink')\nax.plot(x, y2, color='red')\nax.plot(x, y3, color='lightblue')\nax.plot(x, y4, color='blue')\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nplt.bar(products, sales, color='blue')\n\n# Set the title and labels\nplt.title('Human Study')\nplt.xlabel('Products')\nplt.ylabel('Sales (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndata = {\n    'HH': [22, 50, 28],\n    'Reddit': [25, 40, 30],\n    'IMDB': [30, 60, 10],\n    'AVG': [26, 40, 37]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Plot bars\nfor i, (key, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, left=[sum(values[:j]) for j in range(len(values))], color=['red', 'orange', 'pink'], label=key)\n\n# Set labels and title\nax.set_xlabel('Percentage')\nax.set_title('COPR v.s. Golden (Human Eval)')\nax.set_yticks(range(len(values)))\nax.set_yticklabels(['Win', 'Tie', 'Lose'])\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Accuracy', 'Unfairness']\nmovielens_data = [[32, 34, 35], [10, 11, 12]]\ntenrec_data = [[18, 19, 20], [12, 13, 14]]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plotting the first subplot\naxes[0].bar(categories, movielens_data[0], color='purple')\naxes[0].bar(categories, movielens_data[1], bottom=movielens_data[0], color='orange')\naxes[0].set_title('NDCG@20')\n\n# Plotting the second subplot\naxes[1].bar(categories, tenrec_data[0], color='purple')\naxes[1].bar(categories, tenrec_data[1], bottom=tenrec_data[0], color='orange')\naxes[1].set_title('CV@20')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\ncolors = ['blue', 'orange', 'pink', 'orange']\n\n# Create a bar chart\nplt.bar(resolutions, accuracies, color=colors)\n\n# Add labels and title\nplt.xlabel('Resolutions')\nplt.ylabel('Top-1 Acc (%)')\nplt.title('Top-1 Accuracy by Resolution and Method')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Level 1', 'Level 2', 'Level 4']\ny1 = [50.0, 50.0, 50.0]\ny2 = [30.0, 28.0, 22.9]\ny3 = [22.0, 20.6, 16.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data\nax.bar(x, y1, color='yellow')\nax.bar(x, y2, bottom=y1, color='blue')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='red')\n\n# Set the title and labels\nax.set_title('Uploads by Level')\nax.set_xlabel('Levels')\nax.set_ylabel('Uploads (k)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nvalues = [\n    [39.4, 32.84, 19.66, 26.82, 22],\n    [35.18, 33.58, 26.82, 22],\n    [30, 28, 20.84, 22]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot bars\nfor i, category in enumerate(categories):\n    ax.bar(range(len(values[i])), values[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Rewards')\nax.set_title('Rewards by Category')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Number of Videos by Profession')\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='red')\nfor bar in bars:\n    yval = bar.get_height() + synthetic_data[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Texts')\nax.set_xlabel('Sentiment Category')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'substantial', 'tiny', 'very', 'wide', 'slight', 'medium', 'large', 'tall', 'short', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall',"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nprobabilities = [0.1, 0.3, 0.4, 0.5, 0.2]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nbars = ax.bar(categories, probabilities, color=['yellow', 'green', 'blue', 'blue', 'purple'])\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Category')\nax.set_ylabel('Probability of Improvement')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nplt.bar(emotions, frequencies, color='red')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each profession\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideo_counts = [6000, 5000, 4000, 3000, 2000, 1000]\n\n# Create a bar chart with the data\nplt.figure(figsize=(12.0, 8.0))\nplt.bar(professions, video_counts, color=['red', 'orange', 'yellow', 'green', 'blue', 'cyan'])\n\n# Set the title and labels\nplt.title('Number of Videos by Profession')\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nus_values = [37, 29, 16, 44, 30, 33, 35]\nchina_values = [10, 10, 10, 10, 10, 10, 10]\neu_values = [10, 10, 10, 10, 10, 10, 10]\nbrazil_values = [10, 10, 10, 10, 10, 10, 10]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.2\nindex = range(len(categories))\n\nax.bar([i - bar_width for i in index], us_values, bar_width, label='US')\nax.bar(index, china_values, bar_width, label='China')\nax.bar([i + bar_width for i in index], eu_values, bar_width, label='EU')\nax.bar([i + 2 * bar_width for i in index], brazil_values, bar_width, label='Brazil')\n\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Economic Indicators')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [50, 40, 30, 20, 10, 0]\ngood = [40, 30, 20, 10, 0, 0]\nmoderate = [30, 20, 10, 0, 0, 0]\npoor = [20, 10, 0, 0, 0, 0]\nvery_poor = [10, 0, 0, 0, 0, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.barh(cities, excellent, color='red', label='Excellent')\nax.barh(cities, good, left=excellent, color='pink', label='Good')\nax.barh(cities, moderate, left=[sum(x) for x in zip(excellent, good)], color='lightgrey', label='Moderate')\nax.barh(cities, poor, left=[sum(x) for x in zip(excellent, good, moderate)], color='blue', label='Poor')\nax.barh(cities, very_poor, left=[sum(x) for x in zip(excellent, good, moderate, poor)], color='darkblue', label='Very Poor')\n\n# Set labels and title\nax.set_xlabel('Number of People')\nax.set_title('City Ratings')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [0, 0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the positive differences\nax.bar(categories, positive_differences, color='green')\n\n# Plot the negative differences\nax.bar(categories, negative_differences, color='red', bottom=positive_differences)\n\n# Set the title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [7, 7, 6, 6, 6, 6, 5, 5, 4, 4, 3, 3, 2, 1]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nplt.bar(emotions, frequencies, color='blue')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\nvalues = [-0.7, 4.8, -8.5, -15.9, 19.7]\n\n# Create a bar chart\nplt.bar(categories, values, color='red')\n\n# Set the title and labels\nplt.title('Yelp Ratings')\nplt.xlabel('Categories')\nplt.ylabel('Ratings')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Patents Filed', 'Research Investment', 'Smartphone Usage', 'Internet Penetration']\nvalues = [2700, 2400, 2600, 2900]\n\n# Create a bar chart with the data\nplt.bar(categories, values, color='red')\n\n# Set the title and labels\nplt.title('Category Values')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='orange')\nfor bar in bars:\n    yval = bar.get_height() + synthetic_data[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Synthetic vs Human-Authored Data')\nax.set_xlabel('Sentiment Category')\nax.set_ylabel('Percentage')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\ntime_0 = [0.4, 0.5, 0.3, 0.2, 0.6]\ntime_20 = [0.3, 0.4, 0.2, 0.1, 0.5]\ntime_40 = [0.2, 0.3, 0.1, 0.05, 0.4]\ntime_60 = [0.1, 0.2, 0.05, 0.05, 0.3]\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.bar(categories, time_0, color='blue')\nax.bar(categories, time_20, bottom=time_0, color='cyan')\nax.bar(categories, time_40, bottom=[x+y for x,y in zip(time_0, time_20)], color='magenta')\nax.bar(categories, time_60, bottom=[x+y+z for x,y,z in zip(time_0, time_20, time_40)], color='green')\n\nax.set_xlabel('Categories')\nax.set_ylabel('Scores by Category Over Time')\nax.set_title('Scores by Category Over Time')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['West', 'East', 'South', 'North']\nco2 = [40.44, 54.46, 92.15, 65.49]\npm = [11.59, 25.36, 32.84, 22.89]\nso2 = [17.38, 32.19, 48.23, 37.12]\nno2 = [39.63, 36.03, 96.03, 65.49]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.bar(regions, co2, color='cyan', label='CO2 (ppm)')\nax.bar(regions, pm, bottom=co2, color='pink', label='PM (\u00b5g/m\u00b3)')\nax.bar(regions, so2, bottom=[c + p for c, p in zip(co2, pm)], color='blue', label='SO2 (\u00b5g/m\u00b3)')\nax.bar(regions, no2, bottom=[c + p + s for c, p, s in zip(co2, pm, so2)], color='purple', label='NO2 (\u00b5g/m\u00b3)')\n\n# Set the title and labels\nax.set_title('Air Quality Metrics by Region')\nax.set_xlabel('Region')\nax.set_ylabel('Concentration')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\nllama_def_scores = [-2.2, -1.8, -1.4, -0.6]\nllama_hag_scores = [-2.3, -1.6, -1.4, -0.7]\nvicuna_def_scores = [-3.3, -2.2, -1.9, -0.8]\nvicuna_hag_scores = [-3.2, -2.2, -1.9, -0.8]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.2\nindex = range(len(labels))\n\n# Plot the bars for each group\nax.bar([i - bar_width for i in index], llama_def_scores, bar_width, label='LLAMA-Default')\nax.bar(index, llama_hag_scores, bar_width, label='LLAMA-HAG')\nax.bar([i + bar_width for i in index], vicuna_def_scores, bar_width, label='Vicuna-Default')\nax.bar([i + 2 * bar_width for i in index], vicuna_hag_scores, bar_width, label='Vicuna-HAG')\n\n# Set the labels and title\nax.set_xlabel('Constraint Words')\nax.set_ylabel('Scores')\nax.set_title('Scores by Group and Constraint Word Count')\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(labels)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each country\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_2018 = [-0.5, -0.3, -0.4, -0.7]\ngdp_growth_2019 = [-0.4, -0.2, -0.3, -0.6]\ngdp_growth_2020 = [-0.3, -0.1, -0.2, -0.5]\ngdp_growth_2021 = [-0.2, 0.0, -0.1, -0.4]\n\n# Create a bar chart with the GDP growth rates\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(countries, gdp_growth_2018, color='red', label='GDP growth 2018')\nax.bar(countries, gdp_growth_2019, bottom=gdp_growth_2018, color='green', label='GDP growth 2019')\nax.bar(countries, gdp_growth_2020, bottom=[sum(x) for x in zip(gdp_growth_2018, gdp_growth_2019)], color='blue', label='GDP growth 2020')\nax.bar(countries, gdp_growth_2021, bottom=[sum(x) for x in zip(gdp_growth_2018, gdp_growth_2019, gdp_growth_2020)], color='purple', label='GDP growth 2021')\n\n# Set the title and labels\nax.set_title('Negative GDP Growth Rates by Country and Year')\nax.set_xlabel('Country')\nax.set_ylabel('GDP Growth Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCaR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\npercentages = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nplt.bar(models, percentages, color='blue')\n\n# Set the title and labels\nplt.title('Human Study')\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 85]\ncolors = ['blue', 'cyan', 'lightblue', 'lightgreen']\n\n# Create a bar chart\nplt.bar(categories, values, color=colors)\n\n# Set the title and labels\nplt.title('Stacked Bar Chart of Transportation Data')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_units = [80, 60, 40, 20, 0, 0, 0]\nproduct_a_sales = [70, 50, 30, 10, 0, 0, 0]\nproduct_c_sales = [60, 40, 20, 0, 0, 0, 0]\nproduct_e_sales = [50, 30, 10, 0, 0, 0, 0]\nproduct_f_sales = [40, 20, 0, 0, 0, 0, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.bar(categories, sales_units, color='lightgrey')\nax.bar(categories, product_a_sales, bottom=sales_units, color='red')\nax.bar(categories, product_c_sales, bottom=[sum(x) for x in zip(sales_units, product_a_sales)], color='orange')\nax.bar(categories, product_e_sales, bottom=[sum(x) for x in zip(sales_units, product_a_sales, product_c_sales)], color='yellow')\nax.bar(categories, product_f_sales, bottom=[sum(x) for x in zip(sales_units, product_a_sales, product_c_sales, product_e_sales)], color='lightgreen')\n\n# Set the title and labels\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\nax.set_xlabel('Product Categories')\nax.set_ylabel('Sales Units')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [84.3, 9.12, 37.9]\nobserved_fgt = [83, 9.12, 37.9]\nfeature_embedding_distance = [0.83, 0.6, 0.11]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, probing_fgt, color='green')\nax.bar(categories, observed_fgt, bottom=probing_fgt, color='lightgreen')\nax.bar(categories, feature_embedding_distance, bottom=[p + o for p, o in zip(probing_fgt, observed_fgt)], color='orange')\n\n# Set the title and labels\nax.set_title('Feature Embedding Distance')\nax.set_xlabel('Categories')\nax.set_ylabel('Feature Embedding Distance (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nhuman_anatomer = [1, 2, 3, 4, 5, 6]\nscore_1 = [10, 8, 10, 10, 10, 10]\nscore_2 = [11, 15, 10, 10, 10, 15]\nscore_3 = [12, 12, 12, 12, 12, 12]\nscore_4 = [8, 8, 8, 8, 8, 8]\nscore_5 = [6, 7, 9, 10, 12, 15]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(human_anatomer, score_1, color='cyan')\nax.bar(human_anatomer, score_2, bottom=score_1, color='green')\nax.bar(human_anatomer, score_3, bottom=[sum(x) for x in zip(score_1, score_2)], color='lightgreen')\nax.bar(human_anatomer, score_4, bottom=[sum(x) for x in zip(score_1, score_2, score_3)], color='skyblue')\nax.bar(human_anatomer, score_5, bottom=[sum(x) for x in zip(score_1, score_2, score_3, score_4)], color='lightblue')\n\n# Set labels and title\nax.set_xlabel('Human Anatomer')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['coreutils', 'gizip', 'scp', 'libq', 'mcf', 'omnet.', 'perl']\nreg_opt = [90, 70, 60, 50, 40, 30, 20]\nbio_opt = [80, 60, 50, 40, 30, 20, 10]\nloop_opt = [100, 80, 70, 60, 50, 40, 30]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.bar(categories, reg_opt, color='green')\nax.bar(categories, bio_opt, bottom=reg_opt, color='yellow')\nax.bar(categories, loop_opt, bottom=[x+y for x, y in zip(reg_opt, bio_opt)], color='blue')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Percentage')\nax.set_title('Optimization Options')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(models, improvement, color='blue')\n\n# Add labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Improvement [%]')\nax.set_title('Model Performance Improvement by Language')\n\n# Add language labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, languages[models.index(bar.get_x())], ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nfiscal_quarter = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, 4.6]\nnasdaq_index = [0.5, 1.5, 2.2, 3.9, 4.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(fiscal_quarter, dow_jones_index, color='green', label='Dow Jones Index')\nax.bar(fiscal_quarter, nasdaq_index, color='orange', label='Nasdaq Index')\n\n# Set the title and labels\nax.set_title('Index Change (%)')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\nseries_values = [\n    [39.4, 35.18, 34.06, 30.84],\n    [35.18, 34.06, 32.84, 30.84],\n    [34.06, 32.84, 30.84, 30.84],\n    [30.84, 30.84, 30.84, 30.84]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nfor i, values in enumerate(series_values):\n    ax.bar(categories, values, label=f'\u03bb={i+0.06}')\n\n# Set labels and title\nax.set_xlabel('Series Labels')\nax.set_ylabel('Reward Values')\nax.set_title('Rewards by Series and Lambda')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntrue_recall = [46.3, 57.9, 53.8, 43.7]\nmisleading_recall = [30.1, 34, 20, 19.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bars\nax.bar(range(len(true_recall)), true_recall, color='black', label='Truthful Recall')\nax.bar(range(len(misleading_recall)), misleading_recall, color='pink', label='Misleading Recall')\n\n# Set the labels and title\nax.set_xlabel('Recall')\nax.set_ylabel('Percentage')\nax.set_title('Truthful:Misleading = 2:0')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nindustries = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year = [-1200, -1400, -1800, -1600]\nprevious_year = [-1300, -1500, -1700, -1600]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bars for the current year\nbars_current = ax.bar(industries, current_year, color='blue')\n\n# Plot the bars for the previous year\nbars_previous = ax.bar(industries, previous_year, color='orange', bottom=current_year)\n\n# Set the title of the chart\nax.set_title('Environmental Impact by Sector')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Industry Sectors')\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Add a legend to the chart\nax.legend(['Current Year', 'Previous Year'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 13, 17, 22, 19]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nplt.bar(cities, temperatures, color='skyblue')\n\n# Set title and labels\nplt.title('Average City Temperatures')\nplt.xlabel('Cities')\nplt.ylabel('Temperature (\u00b0C)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [170, 150, 160, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(regions, emissions_2020, color='red', label='2020 Emissions')\nax.bar(regions, emissions_2021, color='blue', bottom=emissions_2020, label='2021 Emissions')\n\n# Set the title and labels\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xlabel('Regions')\nax.set_ylabel('Emissions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5']\nresponses = [\n    [26.0, 13.0, 10.0, 17.0, 10.0],\n    [32.0, 10.0, 29.0, 15.0, 10.0],\n    [35.0, 22.0, 37.0, 33.0, 21.0],\n    [40.0, 14.0, 15.0, 13.0, 29.0],\n    [40.0, 14.0, 15.0, 13.0, 29.0]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.2\nindex = range(len(categories))\n\nfor i, response in enumerate(responses):\n    ax.bar([j + i * bar_width for j in index], response, bar_width, label=f'Response {i+1}')\n\nax.set_xlabel('Questions')\nax.set_ylabel('Percentage')\nax.set_title('Survey Responses')\nax.set_xticks([j + bar_width for j in index])\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [0.9, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 1.0]\n\n# Plot the data\nax.bar(x, y, color='blue')\n\n# Draw a horizontal line at y=0.8\nax.axhline(y=0.8, color='red', linestyle='-')\n\n# Set the title and labels\nax.set_title('Model Accuracy')\nax.set_xlabel('Top-10 super families in training dataset')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 9, 10]\ny1 = [1.2, 1.4, 1.6, 1.8, 2.0]\ny2 = [0.8, 1.0, 1.2, 1.4, 1.6]\ny3 = [0.6, 0.8, 1.0, 1.2, 1.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='LLAMA-Default')\nax.plot(x, y2, label='LLAMA-HAG')\nax.plot(x, y3, label='Vicuna-Default')\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntruthful_recall = [45.3, 56.9, 53.8, 27]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.bar(brands, truthful_recall, color='blue', label='Truthful Recall')\nax.bar(brands, misleading_recall, bottom=truthful_recall, color='pink', label='Misleading Recall')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Recall')\nax.set_title('Truthful:Misleading Recall')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = {\n    'Convertible': [25],\n    'Coupe': [25],\n    'SUV': [25],\n    'Sedan': [25],\n    'Convertible New': [20],\n    'Coupe New': [20],\n    'SUV New': [20],\n    'Sedan New': [20]\n}\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.bar(data.keys(), data.values(), color='blue')\n\n# Set the title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Probability of Improvement')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\ndisapproval = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunbothered = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.bar(emotions, disapproval, color='red')\nax.bar(emotions, joy, bottom=disapproval, color='red')\nax.bar(emotions, relief, bottom=[x+y for x,y in zip(disapproval, joy)], color='red')\nax.bar(emotions, gratitude, bottom=[x+y+z for x,y,z in zip(disapproval, joy, relief)], color='red')\nax.bar(emotions, annoyance, bottom=[x+y+z+t for x,y,z,t in zip(disapproval, joy, relief, gratitude)], color='red')\nax.bar(emotions, nervousness, bottom=[x+y+z+t+u for x,y,z,t,u in zip(disapproval, joy, relief, gratitude, annoyance)], color='red')\nax.bar(emotions, pride, bottom=[x+y+z+t+u+v for x,y,z,t,u,v in zip(disapproval, joy, relief, gratitude, annoyance, nervousness)], color='red')\nax.bar(emotions, sadness, bottom=[x+y+z+t+u+v+w for x,y,z,t,u,v,w in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride)], color='red')\nax.bar(emotions, unbothered, bottom=[x+y+z+t+u+v+w+s for x,y,z,t,u,v,w,s in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], color='red')\nax.bar(emotions, amusement, bottom=[x+y+z+t+u+v+w+s+t for x,y,z,t,u,v,w,s,t in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unbothered)], color='red')\n\n# Set the title and labels\nax.set_title('Emotion Frequency Distribution')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmovies = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores_0 = [0.4, 0.3, 0.2, 0.5, 0.7]\nscores_20 = [0.4, 0.3, 0.2, 0.5, 0.7]\nscores_40 = [0.4, 0.3, 0.2, 0.5, 0.7]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(movies, scores_0, color='cyan')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Scores at Time 0')\nax.set_xlabel('Movies')\nax.set_ylabel('Score')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['Japan', 'Australia', 'Canada', 'Germany']\nenergy_consumption = [1600, 1700, 1500, 1900]\nelectricity_production = [1000, 1200, 1300, 1400]\nrenewable_energy_ratio = [10, 15, 20, 25]\nelectricity_consumption = [1100, 1200, 1300, 1400]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot bars for each country\nfor i, country in enumerate(countries):\n    ax.barh(country, energy_consumption[i], color='red')\n    ax.barh(country, electricity_production[i], left=energy_consumption[i], color='blue')\n    ax.barh(country, renewable_energy_ratio[i], left=[energy_consumption[i] + electricity_production[i]] * len(countries), color='yellow')\n    ax.barh(country, electricity_consumption[i], left=[energy_consumption[i] + electricity_production[i] + renewable_energy_ratio[i]] * len(countries), color='green')\n\n# Set labels and title\nax.set_xlabel('Energy Consumption (TWh)')\nax.set_title('Energy Consumption by Country')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='green')\nfor bar in bars:\n    yval = bar.get_height() + synthetic_data[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Original')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories = ['Beauty', 'Yelp', 'More']\nvalues = [5.1, 6, 19.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bars\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = [-3.5, -3, -2.5, -2, -1.5, -1, -0.5, 0]\ny1 = [-3.2, -3.3, -2.3, -2.2, -1.8, -1.7, -1.6, -1.9]\ny2 = [-3.2, -3.3, -2.3, -2.2, -1.8, -1.7, -1.6, -1.9]\ny3 = [-3.2, -3.3, -2.3, -2.2, -1.8, -1.7, -1.6, -1.9]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bars\nax.bar(x, y1, color='red')\nax.bar(x, y2, color='green')\nax.bar(x, y3, color='purple')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Score')\nax.set_ylabel('Group')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Data for the second graph\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Data for the third graph\nx3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny3 = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x1, y1, 'bo-')\nax.plot(x2, y2, 'ro-')\nax.plot(x3, y3, 'go-')\n\n# Set the title and labels\nax.set_title('Graphs of Accuracy, Precision, and Recall')\nax.set_xlabel('Top-10 super families in training dataset')\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nmanual_mapping = [65, 45, 35, 25, 75]\nllm_revision_wcot = [85, 65, 55, 45, 95]\nllm_revision_wcot = [75, 55, 45, 35, 85]\nverifner = [60, 40, 30, 20, 70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot bars for each category\nax.bar(categories, manual_mapping, color='pink')\nax.bar(categories, llm_revision_wcot, bottom=manual_mapping, color='orange')\nax.bar(categories, llm_revision_wcot, bottom=[x + y for x, y in zip(manual_mapping, llm_revision_wcot)], color='green')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Error correction rate (%)')\nax.set_title('GENIA')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscore_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscore_b = [15.0, 10.0, 5.0, 10.0, 10.0, 15.0, 10.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot bars for Score A\nax.bar(models, score_a, color='red')\n\n# Plot bars for Score B\nax.bar(models, score_b, bottom=score_a, color='blue')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Score (%)')\nax.set_title('Human Study')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET']\nf1_scores = [80, 85, 80, 90]\nparty_colors = ['blue', 'orange', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor i, p in enumerate(pheme):\n    ax.bar(p, f1_scores[i], color=party_colors[i % len(party_colors)])\n\n# Set the title and labels\nax.set_title('Pheme vs Macro F1-score')\nax.set_xlabel('Pheme')\nax.set_ylabel('Macro F1-score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nroles = ['human', 'gpt4', 'gpt4-cot']\ncounts = [800, 700, 600]\ncolors = ['O1', 'T1', 'P1']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.bar(roles, counts, color=colors)\n\n# Add labels and title\nax.set_xlabel('Role')\nax.set_ylabel('Count')\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\neffort_data = [20.4, 29.6, 20.4, 20.4, 9.3]\nbrainwave_data = [23.8, 14.3, 16.7, 38.1, 7.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot the data\nax.bar(range(len(effort_data)), effort_data, color='red')\nax.bar(range(len(brainwave_data)), brainwave_data, color='green')\n\n# Set the labels\nax.set_xticks(range(len(effort_data)))\nax.set_xticklabels(['Very Low', 'Low', 'Neutral', 'High', 'Very High'])\n\n# Set the title\nax.set_title('Eye Movement')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny1 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny2 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\n\n# Data for the second graph\nx2 = [-150, -140, -130, -120, -110, -100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\ny3 = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\ny4 = [40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40]\ny5 = [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\ny6 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\ny7 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\ny8 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r', label='Ours')\nax.plot(x, y2, 'b', label='Saliency-based Sampling')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change[%]')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change[%]')\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Plot the data for the second graph\nax2.plot(x2, y3, 'r', label='Ours')\nax2.plot(x2, y4, 'b', label='Saliency-based Sampling')\nax2.plot(x2, y5, 'r', label='Ours')\nax2.plot(x2, y6, 'b', label='Saliency-based Sampling')\nax2.plot(x2, y7, 'r', label='Ours')\nax2.plot(x2, y8, 'b', label='Saliency-based Sampling')\n\n# Set the title and labels\nax2.set_title('Rate of Gain Change[%]')\nax2.set_xlabel('Scale')\nax2.set_ylabel('Rate of Gain Change[%]')\n\n# Add a legend\nax2.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, -0.7]\nlanguage = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(models, performance, color='blue')\n\n# Set the title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Model with Language')\nax.set_ylabel('Model Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nx1 = ['Random', 'Ours', 'SOTA']\ny1 = [66.3, 61.9, 53.8]\ny2 = [10.1, 13.6, 13.7]\ny3 = [49.3, 45.7, 41.6]\n\n# Data for the second chart\nx2 = ['Random', 'Ours', 'SOTA']\ny4 = [48.0, 42.6, 36.5]\ny5 = [40.5, 49.5, 41.0]\ny6 = [36.3, 36.5, 31.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the first chart\nax.bar(x1, y1, color='blue')\nax.bar(x1, y2, bottom=y1, color='red')\nax.bar(x1, y3, bottom=[sum(i) for i in zip(y1, y2)], color='green')\n\n# Plot the second chart\nax.bar(x2, y4, color='blue')\nax.bar(x2, y5, bottom=y4, color='red')\nax.bar(x2, y6, bottom=[sum(i) for i in zip(y4, y5)], color='green')\n\n# Set the title and labels\nax.set_title('Truthful:Misleading = 2:0')\nax.set_xlabel('Misleading')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nx1 = [1, 2, 3, 4, 5, 6]\ny1 = [[10, 20, 30], [15, 25, 35], [20, 30, 40], [25, 35, 45], [30, 40, 50], [35, 45, 55]]\n\n# Data for the second chart\nx2 = [1, 2, 3, 4, 5, 6]\ny2 = [[10, 20, 30], [15, 25, 35], [20, 30, 40], [25, 35, 45], [30, 40, 50], [35, 45, 55]]\n\n# Data for the third chart\nx3 = [1, 2, 3, 4, 5, 6]\ny3 = [[10, 20, 30], [15, 25, 35], [20, 30, 40], [25, 35, 45], [30, 40, 50], [35, 45, 55]]\n\n# Data for the fourth chart\nx4 = [1, 2, 3, 4, 5, 6]\ny4 = [[10, 20, 30], [15, 25, 35], [20, 30, 40], [25, 35, 45], [30, 40, 50], [35, 45, 55]]\n\n# Create a figure with four subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first chart\nfor i in range(len(x1)):\n    for j in range(len(y1[i])):\n        axs[0, 0].bar(x1[i], y1[i][j], color='pink')\n\n# Plot the second chart\nfor i in range(len(x2)):\n    for j in range(len(y2[i])):\n        axs[0, 1].bar(x2[i], y2[i][j], color='orange')\n\n# Plot the third chart\nfor i in range(len(x3)):\n    for j in range(len(y3[i])):\n        axs[1, 0].bar(x3[i], y3[i][j], color='green')\n\n# Plot the fourth chart\nfor i in range(len(x4)):\n    for j in range(len(y4[i])):\n        axs[1, 1].bar(x4[i], y4[i][j], color='blue')\n\n# Set titles for each subplot\naxs[0, 0].set_title('Human Labeling and Agreement Bias Checking 1')\naxs[0, 1].set_title('Human Labeling and Agreement Bias Checking 2')\naxs[1, 0].set_title('Human Labeling and Agreement Bias Checking 3')\naxs[1, 1].set_title('Human Labeling and Agreement Bias Checking 4')\n\n# Set x-axis labels for each subplot\naxs[0, 0].set_xlabel('Human Annotator')\naxs[0, 1].set_xlabel('Human Annotator')\naxs[1, 0].set_xlabel('Human Annotator')\naxs[1, 1].set_xlabel('Human Annotator')\n\n# Set y-axis labels for each subplot\naxs[0, 0].set_ylabel('Scores')\naxs[0, 1].set_ylabel('Scores')\naxs[1, 0].set_ylabel('Scores')\naxs[1, 1].set_ylabel('Scores')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_scores = [54.9, 71.5, 79.2, 60.3, 54.5, 52.9, 42.4, 7.1, 2.0]\nbeam_scores = [83.3, 86.4, 80.0, 79.2, 89.2, 83.3, 83.3, 83.3, 83.3]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.35\nindex = range(len(models))\n\n# Plot bars for contrastive search scores\nbars1 = ax.bar([i - bar_width/2 for i in index], contrastive_scores, bar_width, label='Contrastive Search')\n\n# Plot bars for beam search scores\nbars2 = ax.bar([i + bar_width/2 for i in index], beam_scores, bar_width, label='Beam Search')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Performance Comparison by Model')\nax.set_xticks(index)\nax.set_xticklabels(models)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Dataset 1\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues1 = [150.0, 180.0, 75.0, 90.0, 80.0]\n\n# Data for Dataset 2\nvalues2 = [2.5, 2.0, 1.5, 2.0, 2.0, 2.8]\n\n# Data for Dataset 3\nvalues3 = [60.0, 55.0, 70.0, 65.0, 72.0]\n\n# Data for Dataset 4\nvalues4 = [80.0, 75.0, 90.0, 85.0, 88.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.bar(categories, values1, color='orange')\nax.bar(categories, values2, color='blue')\nax.bar(categories, values3, color='green')\nax.bar(categories, values4, color='yellow')\n\n# Set the title and labels\nax.set_title('Dataset 1')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncolors = ['neutral', 'yellow high', 'yellow low', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'orange high', 'orange low']\nsam_ratings = [7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 8.0))\nbars = plt.bar(colors, sam_ratings, color='blue')\n\n# Add labels and title\nplt.xlabel('Color')\nplt.ylabel('SAM Rating')\nplt.title('Dominance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Define the data for each activity\nactivities = ['Gaming Duration', 'Exercise Duration', 'Reading Duration', 'Music Playtime']\ndurations = [20, 30, 40, 50, 60, 70, 80, 90]\ngaming_duration = [10, 15, 20, 25, 30, 35, 40, 45]\nexercise_duration = [15, 20, 25, 30, 35, 40, 45, 50]\nreading_duration = [20, 25, 30, 35, 40, 45, 50, 55]\nmusic_playtime = [10, 15, 20, 25, 30, 35, 40, 45]\n\n# Plot the data\nax.plot(durations, gaming_duration, label='Gaming Duration')\nax.plot(durations, exercise_duration, label='Exercise Duration')\nax.plot(durations, reading_duration, label='Reading Duration')\nax.plot(durations, music_playtime, label='Music Playtime')\n\n# Set the title and labels\nax.set_title('Daily Activity Durations')\nax.set_xlabel('Duration (minutes)')\nax.set_ylabel('Activity')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nbleu_values = [21, 20, 19]\nbloeu_values = [1.0, 1.0, 1.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot BLEU values\nax.bar(range(len(bleu_values)), bleu_values, color='blue', label='BLEU')\n\n# Plot BLOEU values\nax.bar(range(len(bloeu_values)), bloeu_values, color='orange', label='BLOEU')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Model Performance Scores')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\ndata = [\n    [50, 50, 50, 50, 50],\n    [40, 40, 40, 40, 40],\n    [30, 30, 30, 30, 30],\n    [20, 20, 20, 20, 20]\n]\n\n# Plot the data\nfor i in range(len(data)):\n    ax.plot(range(5), data[i], 'o-')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\nvalues = [\n    [875, 875], \n    [875, 875], \n    [875, 875], \n    [875, 875], \n    [875, 875]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nfor category, value in zip(categories, values):\n    ax.bar(category, value, color='blue')\n\n# Set the title and labels\nax.set_title('Execution Accuracy')\nax.set_xlabel('Category')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nregion_data = {\n    'DENSE (ref)': [0.88, 0.87, 0.83],\n    'Joint Multimodal Framework (ours)': [0.88, 0.87, 0.83],\n    'Cine': [0.88, 0.87, 0.83]\n}\n\n# Data for the second plot\nslice_data = {\n    'DENSE (ref)': [6.91, 6.91, 6.91],\n    'Joint Multimodal Framework (ours)': [9.33, 9.33, 9.33],\n    'Cine': [9.00, 9.00, 9.00]\n}\n\n# Create the first plot\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\nax1.bar(region_data.keys(), region_data['DENSE (ref)'], color='blue', label='DENSE (ref)')\nax1.bar(region_data.keys(), region_data['Joint Multimodal Framework (ours)'], color='orange', bottom=region_data['DENSE (ref)'], label='Joint Multimodal Framework (ours)')\nax1.bar(region_data.keys(), region_data['Cine'], color='green', bottom=[sum(x) for x in zip(region_data['DENSE (ref)'], region_data['Joint Multimodal Framework (ours)'])], label='Cine')\nax1.set_ylabel('Region Classification Accuracy')\nax1.set_title('Region Classification Accuracy')\n\n# Create the second plot\nax2 = ax1.twinx()\nax2.bar(slice_data.keys(), slice_data['DENSE (ref)'], color='blue', alpha=0.5, label='DENSE (ref)')\nax2.bar(slice_data.keys(), slice_data['Joint Multimodal Framework (ours)'], color='orange', alpha=0.5, bottom=slice_data['DENSE (ref)'], label='Joint Multimodal Framework (ours)')\nax2.bar(slice_data.keys(), slice_data['Cine'], color='green', alpha=0.5, bottom=[sum(x) for x in zip(slice_data['DENSE (ref)'], slice_data['Joint Multimodal Framework (ours)'])], label='Cine')\nax2.set_ylabel('Slice Mean Error (ms)')\nax2.set_title('Slice Mean Error (ms)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define the data\nx = ['w/o att', 'w/o DP', '1xQ', '20xQ', '200xQ']\ny = [5, 10, 15, 20, 25]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Z-Score')\nax.set_xlabel('Product')\nax.set_ylabel('Score')\n\n# Draw a horizontal line at the threshold\nax.axhline(y=15, color='r', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [\n    [1.2, 1.3, 1.4, 1.5],\n    [1.6, 1.7, 1.8, 1.9],\n    [2.0, 2.1, 2.2, 2.3],\n    [2.4, 2.5, 2.6, 2.7],\n    [2.8, 2.9, 3.0, 3.1],\n    [3.2, 3.3, 3.4, 3.5]\n]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.bar(categories, values[0], color='blue')\nax.bar(categories, values[1], bottom=values[0], color='green')\nax.bar(categories, values[2], bottom=[sum(x) for x in zip(values[0], values[1])], color='red')\nax.bar(categories, values[3], bottom=[sum(x) for x in zip(values[0], values[1], values[2])], color='purple')\nax.bar(categories, values[4], bottom=[sum(x) for x in zip(values[0], values[1], values[2], values[3])], color='orange')\nax.bar(categories, values[5], bottom=[sum(x) for x in zip(values[0], values[1], values[2], values[3], values[4])], color='brown')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data\nx = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\ny = [np.random.randint(20, 100, 10) for _ in range(10)]\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([i]*len(y[i]), y[i], 'o-')\n\n# Set the x-axis labels\nax.set_xticks(range(len(x)))\nax.set_xticklabels(x)\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata = {\n    'AR': [0.8, 0.9],\n    'LSTMAlpha': [0.6, 0.7],\n    'LSTMBeta': [0.4, 0.5],\n    'AE': [0.2, 0.3],\n    'EncDecAD': [0.4, 0.5],\n    'SRCNN': [0.6, 0.7],\n    'AnomalyTransformer': [0.8, 0.9],\n    'TimesNet': [0.2, 0.3],\n    'Donut': [0.4, 0.5],\n    'TFAD': [0.6, 0.7]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor key, value in data.items():\n    ax.bar(key, value, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define the data\ndata = [\n    [0.8, 0.9, 0.7, 0.6],\n    [0.7, 0.8, 0.6, 0.5],\n    [0.6, 0.7, 0.5, 0.4],\n    [0.5, 0.6, 0.4, 0.3],\n    [0.4, 0.5, 0.3, 0.2]\n]\n\n# Plot the data\nfor i in range(len(data)):\n    ax.plot(range(len(data[i])), data[i], 'o')\n\n# Set the title and labels\nax.set_title('EEM sentences')\nax.set_xlabel('Sentences')\nax.set_ylabel('\u03b4 (m/s)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata = {\n    'Our Model': [2.4, 2.6],\n    'NTM+CL': [2.4, 2.6]\n}\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Plot the first subplot\naxes[0, 0].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[0, 0].set_title('Ratings')\n\n# Plot the second subplot\naxes[0, 1].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[0, 1].set_title('Intrusion')\n\n# Plot the third subplot\naxes[1, 0].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[1, 0].set_title('Ratings')\n\n# Plot the fourth subplot\naxes[1, 1].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[1, 1].set_title('Intrusion')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = ['target', 'control']\ny1 = [6, 4]\ny2 = [7, 5]\ny3 = [8, 6]\ny4 = [9, 7]\ny5 = [10, 8]\ny6 = [11, 9]\ny7 = [12, 10]\ny8 = [13, 11]\ny9 = [14, 12]\ny10 = [15, 13]\ny11 = [16, 14]\ny12 = [17, 15]\ny13 = [18, 16]\ny14 = [19, 17]\ny15 = [20, 18]\n\n# Create a figure and axis\nfig, axs = plt.subplots(3, 5, figsize=(10, 5))\n\n# Plot the first subplot\naxs[0, 0].boxplot([y1, y2], labels=x)\naxs[0, 0].set_title('Digit span')\n\n# Plot the second subplot\naxs[0, 1].boxplot([y3, y4], labels=x)\naxs[0, 1].set_title('Lexical decision')\n\n# Plot the third subplot\naxs[0, 2].boxplot([y5, y6], labels=x)\naxs[0, 2].set_title('Lexical decision')\n\n# Plot the fourth subplot\naxs[0, 3].boxplot([y7, y8], labels=x)\naxs[0, 3].set_title('Reaction time')\n\n# Plot the fifth subplot\naxs[0, 4].boxplot([y9, y10], labels=x)\naxs[0, 4].set_title('Trail making')\n\n# Plot the sixth subplot\naxs[1, 0].boxplot([y11, y12], labels=x)\naxs[1, 0].set_title('Digit span')\n\n# Plot the seventh subplot\naxs[1, 1].boxplot([y13, y14], labels=x)\naxs[1, 1].set_title('Lexical decision')\n\n# Plot the eighth subplot\naxs[1, 2].boxplot([y15, y16], labels=x)\naxs[1, 2].set_title('Lexical decision')\n\n# Plot the ninth subplot\naxs[1, 3].boxplot([y17, y18], labels=x)\naxs[1, 3].set_title('Reaction time')\n\n# Plot the tenth subplot\naxs[1, 4].boxplot([y19, y20], labels=x)\naxs[1, 4].set_title('Trail making')\n\n# Plot the eleventh subplot\naxs[2, 0].boxplot([y21, y22], labels=x)\naxs[2, 0].set_title('Digit span')\n\n# Plot the twelfth subplot\naxs[2, 1].boxplot([y23, y24], labels=x)\naxs[2, 1].set_title('Lexical decision')\n\n# Plot the thirteenth subplot\naxs[2, 2].boxplot([y25, y26], labels=x)\naxs[2, 2].set_title('Lexical decision')\n\n# Plot the fourteenth subplot\naxs[2, 3].boxplot([y27, y28], labels=x)\naxs[2, 3].set_title('Reaction time')\n\n# Plot the fifteenth subplot\naxs[2, 4].boxplot([y29, y30], labels=x)\naxs[2, 4].set_title('Trail making')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmethods = ['BG', 'IBP', 'SSP', 'NBP']\naccuracy = [80, 70, 60, 50]\ncolors = ['brown', 'green', 'blue', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\nbars = ax.bar(methods, accuracy, color=colors)\n\n# Add text annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('Prediction Accuracy vD1')\nax.set_title('Methods')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsearch_depth = [50, 100, 150, 200, 350]\nrewards = [\n    [-0.04, -0.04, -0.04],\n    [-0.04, -0.04, -0.04],\n    [-0.02, -0.02, -0.02],\n    [-0.02, -0.02, -0.02],\n    [0.02, 0.02, 0.02]\n]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nfor i in range(len(search_depth)):\n    ax.barh([search_depth[i]] * len(rewards[i]), rewards[i], color='blue')\n\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 38.1, 29.5]\n\n# Create a bar chart\nplt.figure(figsize=(9.0, 5.0))\nbars = plt.bar(activities, durations, color='blue')\n\n# Add labels and title\nplt.xlabel('Activity')\nplt.ylabel('Duration (minutes)')\nplt.title('Daily Activity Durations')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment']\nmean_values = [2.3, 2.1, 2.4, 2.2, 2.5]\nmedian_values = [2.2, 2.0, 2.1, 2.0, 2.3]\niqr_mean = [2.4, 2.2, 2.3, 2.1, 2.4]\niqr_median = [2.3, 2.1, 2.2, 2.0, 2.3]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot Mean Value\naxes[0, 0].bar(categories, mean_values, color='blue')\naxes[0, 0].set_title('Mean Value')\n\n# Plot Median Value\naxes[0, 1].bar(categories, median_values, color='green')\naxes[0, 1].set_title('Median Value')\n\n# Plot IQR Mean\naxes[1, 0].bar(categories, iqr_mean, color='red')\naxes[1, 0].set_title('IQR Mean')\n\n# Plot IQR Median\naxes[1, 1].bar(categories, iqr_median, color='orange')\naxes[1, 1].set_title('IQR Median')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [-40, -20, 0, 20, 40]\ny1 = [7.6, 5.6, 3.6, 1.6, -0.4]\ny2 = [7.6, 5.6, 3.6, 1.6, -0.4]\ny3 = [7.6, 5.6, 3.6, 1.6, -0.4]\ny4 = [7.6, 5.6, 3.6, 1.6, -0.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='SOCP Learning (Proposed)')\nax.plot(x, y2, 'g-', label='FMPC')\nax.plot(x, y3, 'r-', label=r'$\\theta_{max}$')\nax.plot(x, y4, 'c-', label=r'$\\theta_{min}$')\n\n# Set the title and labels\nax.set_title('Thrust Frequency vs Angular Frequency')\nax.set_xlabel('Angular Frequency [rad/s]')\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\ny1 = [50, 60, 40, 20]\ny2 = [50, 60, 40, 20]\ny3 = [50, 60, 40, 20]\ny4 = [50, 60, 40, 20]\n\n# Plot the data\nax.bar(x, y1, color='blue')\nax.bar(x, y2, color='purple')\nax.bar(x, y3, color='orange')\nax.bar(x, y4, color='red')\n\n# Set the title and labels\nax.set_title('Performance Gap (%)')\nax.set_xlabel('Teams')\nax.set_ylabel('Performance Gap (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\nhuman_scores = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2]\nmean_scores = [0.3, 0.5, 0.7, 0.9, 1.1, 1.3]\nmedian_scores = [0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ninterquartile_mean_scores = [0.5, 0.7, 0.9, 1.1, 1.3, 1.5]\noptimal_gap_scores = [0.6, 0.8, 1.0, 1.2, 1.4, 1.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 3.0))\n\n# Plot the data\nax.plot(categories, human_scores, label='Human Normalized Score')\nax.plot(categories, mean_scores, label='Mean')\nax.plot(categories, median_scores, label='Median')\nax.plot(categories, interquartile_mean_scores, label='Interquartile Mean')\nax.plot(categories, optimal_gap_scores, label='Optimality Gap')\n\n# Set the title and labels\nax.set_title('Comparison of Scores')\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]\ny1 = [20, 25, 30, 35, 40, 45, 50]\ny2 = [20, 25, 30, 35, 40, 45, 50]\ny3 = [20, 25, 30, 35, 40, 45, 50]\n\n# Plot the data\nax.plot(x, y1, 'b-')\nax.plot(x, y2, 'y-')\nax.plot(x, y3, 'r-')\n\n# Set the title and labels\nax.set_title('Thrust Angle vs Angular Frequency')\nax.set_xlabel('Angular Frequency [rad/s]')\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = ['Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect']\ny = [10, 9, 10, 9, 10, 9, 10, 9, 10, 9]\ncolor = ['red', 'green', 'blue', 'red', 'green', 'blue', 'red', 'green', 'blue', 'red']\n\n# Plot the data\nax.scatter(x, y, color=color)\n\n# Set the title and labels\nax.set_title('SE (bps/HZ)')\nax.set_xlabel('CEE (dB)')\nax.set_ylabel('Method')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(25.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Linear travel times')\n\n# Create a bar chart with the data\nax.bar(['D-avg', 'P-TO', 'SAA', 'CSA'], [10, 20, 30, 40], color='blue')\nax.bar(['D-avg', 'P-TO', 'SAA', 'CSA'], [15, 25, 35, 45], color='red')\n\n# Set the y-axis label\nax.set_ylabel('Time (min)')\n\n# Set the x-axis label\nax.set_xlabel('City')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\nhospital1 = [92, 87, 85]\nhospital2 = [94, 89, 88]\nhospital3 = [96, 91, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot bars for each category\nax.bar(categories, hospital1, color='blue')\nax.bar(categories, hospital2, bottom=hospital1, color='green')\nax.bar(categories, hospital3, bottom=[x + y for x, y in zip(hospital1, hospital2)], color='pink')\n\n# Set labels and title\nax.set_xlabel('Modality')\nax.set_ylabel('AUC')\nax.set_title('AUC by Modality and Hospital')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ndata = {\n    'Vanilla DIP': [22.8, 22.6, 22.4],\n    'SGLD DIP': [23.2, 23.0, 22.8],\n    'Ours': [23.2, 23.0, 22.8]\n}\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plotting the first subplot\nfor key, values in data.items():\n    axes[0].boxplot(values, positions=[np.where(list(data.keys()) == key)[0][0]], widths=0.6)\naxes[0].set_title('0.25 HIAR')\naxes[0].set_xlabel('HIAR')\naxes[0].set_ylabel('PSNR (dB)')\naxes[0].set_yticks(np.arange(22.2, 23.5, 0.2))\naxes[0].grid(True)\n\n# Plotting the second subplot\nfor key, values in data.items():\n    axes[1].boxplot(values, positions=[np.where(list(data.keys()) == key)[0][0]], widths=0.6)\naxes[1].set_title('0.1 HIAR')\naxes[1].set_xlabel('HIAR')\naxes[1].set_ylabel('PSNR (dB)')\naxes[1].set_yticks(np.arange(22.2, 23.5, 0.2))\naxes[1].grid(True)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-80, 80, 100)\ny = np.linspace(-80, 80, 100)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/20) * np.cos(Y/20)\nZ2 = np.sin(X/30) * np.cos(Y/30)\n\n# Plot the data\nc1 = ax.contourf(X, Y, Z1, cmap='coolwarm')\nc2 = ax.contourf(X, Y, Z2, cmap='Blues')\n\n# Add a colorbar\nfig.colorbar(c1, ax=ax, label='Ground Truth')\nfig.colorbar(c2, ax=ax, label='Generated')\n\n# Set the title\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function\ndef f(X, Y):\n    return np.sin(np.pi * X) * np.cos(np.pi * Y)\n\n# Compute the function values\nZ = f(X, Y)\n\n# Create a color map\ncmap = plt.cm.viridis\n\n# Plot the function\nplt.figure(figsize=(8.0, 6.0))\nplt.contourf(X, Y, Z, cmap=cmap)\nplt.colorbar()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('DBP vs SBP')\n\n# Set the x-axis label\nax.set_xlabel('SBP (mmHg)')\n\n# Set the y-axis label\nax.set_ylabel('DBP (mmHg)')\n\n# Set the grid\nax.grid(True)\n\n# Set the limits for the x-axis and y-axis\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the tick marks\nax.set_xticks(range(50, 170, 10))\nax.set_yticks(range(50, 105, 10))\n\n# Set the color map\ncmap = plt.cm.get_cmap('coolwarm')\n\n# Plot the data\nax.plot([100, 110, 120, 130, 140, 150, 160], [90, 80, 70, 60, 50, 40, 30], color='blue', label='Female')\nax.plot([100, 110, 120, 130, 140, 150, 160], [80, 70, 60, 50, 40, 30, 20], color='red', label='Male')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the time array\nt = np.linspace(-4, 10, 100)\n\n# Define the amplitude array\nA = [10, 8, 6, 4, 2]\n\n# Calculate the phase array\nphi = [0, 2*np.pi/3, 4*np.pi/3, 2*np.pi, 5*np.pi/3]\n\n# Calculate the signal\nsignal = A[0]*np.sin(t + phi[0]) + A[1]*np.sin(2*t + phi[1]) + A[2]*np.sin(3*t + phi[2]) + A[3]*np.sin(4*t + phi[3]) + A[4]*np.sin(5*t + phi[4])\n\n# Plot the signal\nplt.plot(t, signal)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.title('Signal')\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the radii of the circles\nradii = [10, 8, 6, 4, 2]\n\n# Define the colors for each circle\ncolors = ['red', 'orange', 'yellow', 'green', 'blue']\n\n# Draw the circles\nfor radius, color in zip(radii, colors):\n    circle = plt.Circle((5, 5), radius, color=color, fill=False)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the range of x values\nx = np.linspace(0, 10, 100)\n\n# Define the function y = f(x)\ny = np.sin(x)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the function\nax.plot(x, y, color='pink')\n\n# Set the title and labels\nax.set_title('Graph of y = f(x)')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [-1.0, -0.5, 0.0, 0.5, 1.0]\ny = [0.0, 0.2, 0.4, 0.6, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Spearman Coefficient')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(7, 16)\ny1 = np.random.rand(9)\ny2 = np.random.rand(9)\ny3 = np.random.rand(9)\ny4 = np.random.rand(9)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Random Bundle')\nax.plot(x, y2, label='Increase Price')\nax.plot(x, y3, label='Strategic (Ours)')\nax.plot(x, y4, label='Reserved price p_i', color='red')\n\n# Set the title and labels\nax.set_title('Price Distribution')\nax.set_xlabel('p')\nax.set_ylabel('Shape Density')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define the data\nx = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\ny1 = [14, 12, 10, 8, 6, 4]\ny2 = [14, 12, 10, 8, 6, 4]\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Gucci')\nax.plot(x, y2, color='green', label='Chanel')\n\n# Set the title and labels\nax.set_title('Sales Data')\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Deep Ens.', 'Dropout', 'Laplace', 'SNPG', 'HET-XL', 'Baseline', 'GP', 'Shallow Ens.', 'DUQ', 'Corr. Pred.']\nlog_probabilities = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.590, -0.819]\ndistributions = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nbars = ax.bar(labels, log_probabilities, color='green')\n\n# Add distribution and deterministic labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(distributions[labels.index(bar.get_label())], 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Log Probability')\nax.set_xlabel('Model')\nax.set_ylabel('Probability')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 4, 8]\ny1 = [5, 6, 7, 6]\ny2 = [5, 6, 7, 6]\ny3 = [5, 6, 7, 6]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y1, 'b-', label='Baseline')\nplt.plot(x, y2, 'g-', label='SoftMoE (unchanged)')\nplt.plot(x, y3, 'm-', label='SoftMoE (\u2202 NumExperts)')\n\n# Adding labels and title\nplt.xlabel('Number of experts')\nplt.ylabel('IQM Human Normalized Score')\nplt.title('Expert dimension')\n\n# Adding legend\nplt.legend()\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\nbaseline_1 = [0.748, 0.762, 0.709]\nbaseline_2 = [0.759, 0.748, 0.687]\nfedmm = [0.78, 0.78, 0.713]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(hospitals, baseline_1, color='blue')\nax.bar(hospitals, baseline_2, bottom=baseline_1, color='orange')\nax.bar(hospitals, fedmm, bottom=[sum(x) for x in zip(baseline_1, baseline_2)], color='green')\n\n# Set the title and labels\nax.set_title('Accuracy by hospital and method')\nax.set_xlabel('Hospital')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngpt4_buyer = [-12, -15, -18, -21]\nclade2_buyer = [-10, -13, -16, -19]\nclade2_1_buyer = [-8, -11, -14, -17]\nclade3_5_buyer = [-6, -9, -12, -15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(range(len(gpt4_buyer)), gpt4_buyer, color='orange', label='GPT-4 Buyer (valuation 40)')\nax.bar(range(len(clade2_buyer)), clade2_buyer, color='cyan', label='Claude-2 Buyer (valuation 40)')\nax.bar(range(len(clade2_1_buyer)), clade2_1_buyer, color='red', label='Claude-2.1 Buyer (valuation 40)')\nax.bar(range(len(clade3_5_buyer)), clade3_5_buyer, color='blue', label='GPT-3.5 Buyer (valuation 40)')\n\n# Set the x-axis labels\nax.set_xticks(range(len(gpt4_buyer)))\nax.set_xticklabels(['GPT-4', 'GPT-2.1', 'Claude-2', 'GPT-3.5'])\n\n# Set the y-axis limits\nax.set_ylim(-20, 0)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['[m]', '[\u0394R]', '[\u0394R^-1]', '[none]']\nvalues = [0.96, 0.86, 0.78, 0.80]\n\n# Create a bar chart\nplt.bar(categories, values, color='gray')\n\n# Add labels and title\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Bar Chart Example')\n\n# Set the y-axis limits\nplt.ylim(0.5, 0.9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5]\ny1 = [1.9, 1.7, 1.5, 1.3, 1.1]\ny2 = [0.9, 0.7, 0.5, 0.3, 0.1]\ny3 = [-0.1, -0.3, -0.5, -0.7, -0.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Blue Line')\nax.plot(x, y2, label='Orange Line')\nax.plot(x, y3, label='Red Line')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 6)\n\n# Set the limits of the y-axis\nax.set_ylim(-1, 2)\n\n# Set the title of the plot\nax.set_title('Posterior Accuracy')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Accuracy')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Medium', 'Medium-replay', 'Medium-expert']\naug_values = [85, 82, 80]\nte_values = [75, 78, 76]\nqual_values = [90, 88, 85]\ndiff_values = [80, 82, 84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot bars for each category\nbar_width = 0.2\nindex = range(len(categories))\nax.bar([i - bar_width for i in index], aug_values, bar_width, label='AUG')\nax.bar(index, te_values, bar_width, label='T-Estimation')\nax.bar([i + bar_width for i in index], qual_values, bar_width, label='Qualification')\nax.bar([i + 2 * bar_width for i in index], diff_values, bar_width, label='Diff-Stitch')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Performance')\nax.set_title('Performance Metrics')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the chart\ndata = [\n    [1, 0.5, 0.5],\n    [1, 0.1, 0.1],\n    [1, 0.3, 0.3],\n    [1, 0.5, 0.5],\n    [1, 0.7, 0.7],\n    [1, 0.9, 0.9]\n]\n\n# Create a bar chart with the data\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(range(len(data)), [x[0] for x in data], color='blue')\nax.bar(range(len(data)), [x[1] for x in data], bottom=[x[0] for x in data], color='pink')\nax.bar(range(len(data)), [x[2] for x in data], bottom=[x[0] + x[1] for x in data], color='purple')\n\n# Set the title and labels\nax.set_title('FashionMNIST (NEURAL)')\nax.set_xlabel('Hyperparameters')\nax.set_ylabel('Metrics')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncountries1 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [29, 27, 25, 24, 35]\n\n# Data for the second chart\ncountries2 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues2 = [28, 26, 24, 23, 34]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 6.0))\n\n# Plot the first chart\naxs[0].bar(countries1, values1, color=['purple', 'pink', 'green', 'blue', 'purple'])\naxs[0].set_title('Higher Education Enrollment Rate')\n\n# Plot the second chart\naxs[1].bar(countries2, values2, color=['purple', 'pink', 'green', 'blue', 'purple'])\naxs[1].set_title('Student-Teacher Ratio')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 10400, 3200]\n\n# Data for the second chart\nforest_coverage = [52, 34, 25, 38, 21, 25, 32, 20, 18, 10, 8, 6, 4, 2, 0]\n\n# Data for the third chart\nenergy_usage = [45, 34, 28, 25, 18, 34, 25, 18, 10, 8, 6, 4, 2, 0]\n\n# Create a figure with three subplots\nfig, axs = plt.subplots(3, 1, figsize=(6.0, 9.0))\n\n# Plot the first chart\naxs[0].bar(regions, emissions, color='green')\naxs[0].set_title('Annual Carbon Dioxide Emissions')\n\n# Plot the second chart\naxs[1].bar(regions, forest_coverage, color='orange')\naxs[1].set_title('Forest Coverage Rate')\n\n# Plot the third chart\naxs[2].bar(regions, energy_usage, color='blue')\naxs[2].set_title('Renewable Energy Usage')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the chart\ndata = {\n    'Crime Rate': [50, 60, 70],\n    'Happiness Index': [40, 50, 60],\n    'Social Security Coverage': [80, 90, 100],\n    'Political Participation': [70, 80, 90]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax.bar(range(len(values)), values, color=plt.cm.viridis(i / len(data)))\n\n# Set the title and labels\nax.set_title('Percentage of People')\nax.set_xlabel('City')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\njudge_names = ['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human']\nprotocols = ['Expert', 'Blind', 'Consultancy', 'Debate', 'Interactive Consultancy', 'Interactive Debate']\nscores = [\n    [80, 70, 90, 85, 95, 90],\n    [60, 50, 70, 65, 75, 70],\n    [90, 80, 100, 95, 105, 100],\n    [70, 60, 80, 75, 85, 80]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for each protocol\nfor i, protocol in enumerate(protocols):\n    ax.bar(judge_names, scores[i], bottom=[sum(scores[j][i] for j in range(i)) for i in range(len(scores))], color=plt.cm.viridis(i / len(protocols)))\n\n# Set labels and title\nax.set_xlabel('Judge')\nax.set_ylabel('Judge Accuracy (%)')\nax.set_title('Protocol')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\nspring_temperatures = [12, 14, 13, 16]\nautumn_temperatures = [11, 13, 12, 15]\nspring_rainfall = [1200, 1100, 1000, 900]\nautumn_rainfall = [1300, 1200, 1100, 1000]\nspring_wind_speed = [5, 4, 3, 6]\nautumn_wind_speed = [4, 3, 2, 5]\nspring_air_quality_index = [70, 60, 50, 80]\nautumn_air_quality_index = [60, 50, 40, 70]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0))\n\n# Plot 1: Annual Average Temperature\naxes[0, 0].bar(cities, spring_temperatures, color='orange')\naxes[0, 0].bar(cities, autumn_temperatures, bottom=spring_temperatures, color='pink')\naxes[0, 0].set_title('Annual Average Temperature')\n\n# Plot 2: Annual Rainfall\naxes[0, 1].bar(cities, spring_rainfall, color='green')\naxes[0, 1].bar(cities, autumn_rainfall, bottom=spring_rainfall, color='blue')\naxes[0, 1].set_title('Annual Rainfall')\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, spring_wind_speed, color='orange')\naxes[1, 0].bar(cities, autumn_wind_speed, bottom=spring_wind_speed, color='pink')\naxes[1, 0].set_title('Wind Speed')\n\n# Plot 4: Air Quality Index\naxes[1, 1].bar(cities, spring_air_quality_index, color='green')\naxes[1, 1].bar(cities, autumn_air_quality_index, bottom=spring_air_quality_index, color='blue')\naxes[1, 1].set_title('Air Quality Index')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [0, 0, 0, 0, 0]\nrenewable_energy_usage = [20, 15, 10, 5, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(countries, renewable_energy_usage, color='blue')\n\n# Set the title and labels\nax.set_title('Renewable Energy Usage by Country')\nax.set_xlabel('Country')\nax.set_ylabel('Renewable Energy Usage (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nefficiency_ratings = [0.25, 0.30, 0.20]\n\n# Create a bar chart\nplt.bar(models, efficiency_ratings, color='blue')\n\n# Set the title and labels\nplt.title('Energy Efficiency Ratings by Appliance Model')\nplt.xlabel('Appliance Model')\nplt.ylabel('Energy Efficiency Rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Wind', 'Solar', 'Hydro', 'Nuclear']\nefficiency_scores = [\n    [90, 80, 70, 60],\n    [85, 75, 65, 55],\n    [95, 85, 75, 65],\n    [80, 70, 60, 50]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nfor i, scores in enumerate(efficiency_scores):\n    ax.bar(labels, scores, label=f'Entity {i+1}')\n\n# Set labels and title\nax.set_xlabel('Energy Assessment Entity')\nax.set_ylabel('Efficiency and Cost Scores')\nax.set_title('Energy Assessment Scores')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 90, 75, 80, 70, 65, 75, 80, 70, 65]\nhigher_education_enrollment = [110, 115, 90, 95, 85, 80, 90, 95, 85, 80]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(regions, high_school_graduation, color='green')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Add a second y-axis for higher education enrollment\nax2 = ax.twinx()\nbars2 = ax2.bar(regions, higher_education_enrollment, color='yellow')\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Region')\nax.set_ylabel('High School Graduation (%)')\nax2.set_ylabel('Higher Education Enrollment (%)')\nax.set_title('Educational Metrics by Region')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 30.1, 57.9, 19.4]\nmisleading_recall = [34.0, 53.8, 43.7, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.bar(brands, truthful_recall, color='blue', label='Truthful Recall')\nax.bar(brands, misleading_recall, bottom=truthful_recall, color='orange', label='Misleading Recall')\n\n# Set the title and labels\nax.set_title('Comparison of Recall Rates Across Products')\nax.set_xlabel('Product')\nax.set_ylabel('Recall Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsupport = [15, 75]\ndelivery = [18, 82]\nproduct_quality = [20, 78]\nreturns = [12, 85]\npricing = [17, 80]\nwebsite_usability = [10, 88]\ncheckout_process = [8, 90]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, support, color='blue')\nax.bar(categories, delivery, bottom=support, color='green')\nax.bar(categories, product_quality, bottom=[sum(x) for x in zip(support, delivery)], color='cyan')\nax.bar(categories, returns, bottom=[sum(x) for x in zip(support, delivery, product_quality)], color='magenta')\nax.bar(categories, pricing, bottom=[sum(x) for x in zip(support, delivery, product_quality, returns)], color='orange')\nax.bar(categories, website_usability, bottom=[sum(x) for x in zip(support, delivery, product_quality, returns, pricing)], color='purple')\nax.bar(categories, checkout_process, bottom=[sum(x) for x in zip(support, delivery, product_quality, returns, pricing, website_usability)], color='teal')\n\n# Set the title and labels\nax.set_title('Customer Satisfaction by Complaint Rate')\nax.set_xlabel('Complaint Rate')\nax.set_ylabel('Satisfaction Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 78, 85, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 80, 10, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the agree rates\nax.bar(categories, agree_rates, color='pink')\n\n# Plot the disagree rates\nax.bar(categories, disagree_rates, bottom=agree_rates, color='orange')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Customer Satisfaction by Category')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nvalues = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 8.0))\nbars = plt.bar(categories, values, color='green')\n\n# Add labels and title\nplt.xlabel('Environmental Factors')\nplt.ylabel('Impact on Plant Growth (\u0394 to control)')\nplt.title('Impact of Environmental Factors on Plant Growth')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['New York', 'Los Angeles', 'Chicago']\nmetrics = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nvalues = [\n    [-25, -15, -20],\n    [-20, -10, -20],\n    [-15, -10, -15]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot bars for each city\nfor i, city in enumerate(cities):\n    ax.bar(metrics, values[i], color=plt.cm.tab10(i), label=city)\n\n# Set labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Metric Values')\nax.set_title('City Metrics')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis tick labels\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis tick labels\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis label\nax.set_xlabel('Hyperparameters')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [-4.0, -3.0, -2.0, -1.0]\nwater_quality_scores = [0.0, 0.0, 0.0, 0.0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Set the y-axis limits\nax.set_ylim(-3.0, 0.0)\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the tick labels for the y-axis\nax.set_yticks([-3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0])\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the labels for the axes\nax.set_xlabel('Cities')\nax.set_ylabel('Scores')\n\n# Plot the bars for air quality scores\nax.bar(categories, air_quality_scores, color='red')\n\n# Plot the bars for water quality scores\nax.bar(categories, water_quality_scores, color='green', bottom=air_quality_scores)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nwerewolf = [84.97, 67.17, 78.22, 85.17]\nseer = [102.67, 100.00, 78.22, 80.67]\nwitch = [102.67, 67.17, 78.22, 80.67]\nhunter = [102.67, 67.17, 78.22, 80.67]\nvillager = [102.67, 67.17, 78.22, 80.67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], werewolf, color='green')\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], seer, color='blue')\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], witch, color='cyan')\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], hunter, color='magenta')\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], villager, color='yellow')\n\n# Set labels and title\nax.set_xlabel('Character')\nax.set_ylabel('Tokens')\nax.set_title('Tokens per Character')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('True+ info (%)')\nplt.xlabel('Size of Data for Training and Validation')\nplt.ylabel('True+ info (%)')\n\n# Set the tick marks on the x-axis\nplt.xticks([5, 10, 20, 30, 40, 50], ['(40 samples)', '(81 samples)', '(163 samples)', '(245 samples)', '(326 samples)', '(408 samples)'])\n\n# Set the y-axis limits\nplt.ylim(56, 66)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'test.7', 'test.8', 'test.9', 'constant']\nvalues_out = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_shift = [0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(categories, values_out, color='red')\nax.bar(categories, values_shift, color='blue')\n\n# Set the title and labels\nax.set_title('Out-of-domain accuracy')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(categories, values[0], color='blue')\nax.bar(categories, values[1], color='blue')\nax.bar(categories, values[2], color='blue')\nax.bar(categories, values[3], color='blue')\nax.bar(categories, values[4], color='blue')\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.8)\n\n# Set the title and labels\nax.set_title('Mini Crosswords Performance')\nax.set_xlabel('Categories')\nax.set_ylabel('Objective Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'Llama2']\nground_truth_labels = [65, 60, 60, 65, 60, 60, 65, 60, 60]\nweak_labels = [55, 50, 50, 55, 50, 50, 55, 50, 50]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\nbars = ax.bar(categories, ground_truth_labels, color='r')\nax.bar(categories, weak_labels, bottom=ground_truth_labels, color='b')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Ground-Truth and Weak Labels')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Disourse and Pragmatics', 'Syntax: Tagging, Chinking and Parsing']\nvalues = [\n    [1.25, 1.3, 1.4], \n    [1.25, 1.3, 1.4], \n    [1.25, 1.3, 1.4], \n    [1.25, 1.3, 1.4], \n    [1.25, 1.3, 1.4], \n    [1.25, 1.3, 1.4], \n    [1.25, 1.3, 1.4]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nbars = ax.bar(categories, [sum(v) for v in values], color='purple')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('A')\nax.set_title('Your Chart Title Here')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nshouting_fractions = [0.12, 0.14, 0.16, 0.18, 0.10, 0.08]\nmeans = [0.13, 0.15, 0.17, 0.19, 0.11, 0.09]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(categories, shouting_fractions, 'b-', label='Dataset mean')\nax.plot(categories, means, 'ro', label='Mean')\n\n# Set the title and labels\nax.set_title('Shouting Fraction (Fraction of videos)')\nax.set_xlabel('Category')\nax.set_ylabel('Shouting Fraction')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Variable, Symmetric Error\nx1 = [0, 5, 10, 15, 20]\ny1 = [15.49, 17.15, 16.03, 15.45, 16.46]\n\n# Data for Variable, Symmetric Error\nx2 = [0, 5, 10, 15, 20]\ny2 = [19.38, 19.38, 19.38, 19.38, 19.38]\n\n# Data for Variable, Symmetric Error\nx3 = [0, 5, 10, 15, 20]\ny3 = [23.92, 23.92, 23.92, 23.92, 23.92]\n\n# Data for Variable, Symmetric Error\nx4 = [0, 5, 10, 15, 20]\ny4 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx5 = [0, 5, 10, 15, 20]\ny5 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx6 = [0, 5, 10, 15, 20]\ny6 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx7 = [0, 5, 10, 15, 20]\ny7 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx8 = [0, 5, 10, 15, 20]\ny8 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx9 = [0, 5, 10, 15, 20]\ny9 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx10 = [0, 5, 10, 15, 20]\ny10 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx11 = [0, 5, 10, 15, 20]\ny11 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx12 = [0, 5, 10, 15, 20]\ny12 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx13 = [0, 5, 10, 15, 20]\ny13 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx14 = [0, 5, 10, 15, 20]\ny14 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx15 = [0, 5, 10, 15, 20]\ny15 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx16 = [0, 5, 10, 15, 20]\ny16 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx17 = [0, 5, 10, 15, 20]\ny17 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx18 = [0, 5, 10, 15, 20]\ny18 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx19 = [0, 5, 10, 15, 20]\ny19 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx20 = [0, 5, 10, 15, 20]\ny20 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx21 = [0, 5, 10, 15, 20]\ny21 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx22 = [0, 5, 10, 15, 20]\ny22 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx23 = [0, 5, 10, 15, 20]\ny23 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx24 = [0, 5, 10, 15, 20]\ny24 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx25 = [0, 5, 10, 15, 20]\ny25 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx26 = [0, 5, 10, 15, 20]\ny26 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx27 = [0, 5, 10, 15, 20]\ny27 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx28 = [0, 5, 10, 15, 20]\ny28 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx29 = [0, 5, 10, 15, 20]\ny29 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx30 = [0, 5, 10, 15, 20]\ny30 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx31 = [0, 5, 10, 15, 20]\ny31 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx32 = [0, 5, 10, 15, 20]\ny32 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx33 = [0, 5, 10, 15, 20]\ny33 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx34 = [0, 5, 10, 15, 20]\ny34 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx35 = [0, 5, 10, 15, 20]\ny35 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx36 = [0, 5, 10, 15, 20]\ny36 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx37 = [0, 5, 10, 15, 20]\ny37 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx38 = [0, 5, 10, 15, 20]\ny38 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx39 = [0, 5, 10, 15, 20]\ny39 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx40 = [0, 5, 10, 15, 20]\ny40 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx41 = [0, 5, 10, 15, 20]\ny41 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx42 = [0, 5, 10, 15, 20]\ny42 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx43 = [0, 5, 10, 15, 20]\ny43 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx44 = [0, 5, 10, 15, 20]\ny44 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx45 = [0, 5, 10, 15, 20]\ny45 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx46 = [0, 5, 10, 15, 20]\ny46 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx47 = [0, 5, 10, 15, 20]\ny47 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx48 = [0, 5, 10, 15, 20]\ny48 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx49 = [0, 5, 10, 15, 20]\ny49 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx50 = [0, 5, 10, 15, 20]\ny50 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx51 = [0, 5, 10, 15, 20]\ny51 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx52 = [0, 5, 10, 15, 20]\ny52 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx53 = [0, 5, 10, 15, 20]\ny53 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx54 = [0, 5, 10, 15, 20]\ny54 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx55 = [0, 5, 10, 15, 20]\ny55 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx56 = [0, 5, 10, 15, 20]\ny56 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx57 = [0, 5, 10, 15, 20]\ny57 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx58 = [0, 5, 10, 15, 20]\ny58 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx59 = [0, 5, 10, 15, 20]\ny59 = [24.64, 24"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28]\ny_politics = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\ny_religion = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\ny_kashmir = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\ny_caa = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\ny_pulwama_balakot = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y_politics, color='blue', label='Dataset mean')\nax.plot(x, y_politics, color='red', marker='o', label='Mean')\n\nax.plot(x, y_religion, color='blue', label='Dataset mean')\nax.plot(x, y_religion, color='red', marker='o', label='Mean')\n\nax.plot(x, y_kashmir, color='blue', label='Dataset mean')\nax.plot(x, y_kashmir, color='red', marker='o', label='Mean')\n\nax.plot(x, y_caa, color='blue', label='Dataset mean')\nax.plot(x, y_caa, color='red', marker='o', label='Mean')\n\nax.plot(x, y_pulwama_balakot, color='blue', label='Dataset mean')\nax.plot(x, y_pulwama_balakot, color='red', marker='o', label='Mean')\n\n# Set the title and labels\nax.set_title('Incivility (Fraction of Videos)')\nax.set_xlabel('Incivility (Fraction of Videos)')\nax.set_ylabel('Incivility (Fraction of Videos)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['This work*', 'Shah et al.', 'Shah et al.', 'Banerjee et al.', 'Favale et al.', 'Favale et al.', 'Gomez-Valent', 'Gomez-Valent', 'Benisty et al.', 'Benisty et al.', 'Benisty et al.', 'Benisty et al.']\nvalues = [-19.353, -19.394, -19.404, -19.314, -19.404, -19.314, -19.362, -19.362, -19.374, -19.374, -19.38, -19.38]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(categories, values, 'bo-')\n\n# Set the x-axis limits\nax.set_xlim(-19.6, -19.0)\n\n# Set the y-axis limits\nax.set_ylim(-19.6, -19.0)\n\n# Set the title of the plot\nax.set_title('Plot of Categories vs Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics']\nunique_speaker_mean = [12, 14, 13, 15, 16, 15]\nunique_shouter_mean = [10, 12, 11, 13, 14, 13]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(categories, unique_speaker_mean, 'bo-', label='Unique speaker count mean')\nplt.plot(categories, unique_shouter_mean, 'ro-', label='Unique shouter count mean')\nplt.xlabel('Category')\nplt.ylabel('Number of speakers')\nplt.title('Dataset unique shouter count mean')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Female Face Presence')\n\n# Set the x-axis label\nax.set_xlabel('PULWAMA-BALAKOT')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of videos')\n\n# Set the y-axis limits\nax.set_ylim(0, 25)\n\n# Set the y-axis ticks\nax.set_yticks([0, 5, 10, 15, 20, 25])\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Draw horizontal lines at y=0.1, y=0.2, and y=0.3\nfor i in range(1, 4):\n    ax.axhline(y=i*0.1, color='gray', linestyle='--')\n\n# Draw vertical lines at x=0, x=1, x=2, x=3, and x=4\nfor i in range(5):\n    ax.axvline(x=i, color='gray', linestyle='--')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 3, 4, 5]\ny = [\n    [2.5, 2.5, 2.5, 2.5, 2.5],\n    [2.5, 2.5, 2.5, 2.5, 2.5],\n    [2.5, 2.5, 2.5, 2.5, 2.5],\n    [2.5, 2.5, 2.5, 2.5, 2.5],\n    [2.5, 2.5, 2.5, 2.5, 2.5]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nfor i in range(len(y)):\n    ax.plot(x, y[i], marker='o')\n\n# Set the title\nax.set_title('Errorbar upper and lower limits')\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ny1 = [170, 160, 150, 140, 130, 120, 110, 100]\ny2 = [175, 165, 155, 145, 135, 125, 115, 105]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'r-')\nax.plot(x, y2, 'g-')\n\n# Set the title and labels\nax.set_title('variable, symmetric error')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 2, 4, 6, 8, 10]\ny1 = [3587, 2598, 3704, 3777, 2889, 2044]\ny2 = [4375, 2598, 3704, 3777, 2889, 2044]\ny3 = [4375, 2598, 3704, 3777, 2889, 2044]\ny4 = [4375, 2598, 3704, 3777, 2889, 2044]\ny5 = [4375, 2598, 3704, 3777, 2889, 2044]\ny6 = [4375, 2598, 3704, 3777, 2889, 2044]\ny7 = [4375, 2598, 3704, 3777, 2889, 2044]\ny8 = [4375, 2598, 3704, 3777, 2889, 2044]\ny9 = [4375, 2598, 3704, 3777, 2889, 2044]\ny10 = [4375, 2598, 3704, 3777, 2889, 2044]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'g-')\nax.plot(x, y2, 'g-')\nax.plot(x, y3, 'g-')\nax.plot(x, y4, 'g-')\nax.plot(x, y5, 'g-')\nax.plot(x, y6, 'g-')\nax.plot(x, y7, 'g-')\nax.plot(x, y8, 'g-')\nax.plot(x, y9, 'g-')\nax.plot(x, y10, 'g-')\n\n# Set the title and labels\nax.set_title('variable, asymmetric error')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 5, 10, 15, 20]\ny1 = [-2.1, -2.6, -2.7, -2.9, -2.7]\ny2 = [2.6, 2.6, 2.9, 2.9, 2.0]\ny3 = [1.9, 1.9, 1.2, 1.2, 1.3]\ny4 = [1.1, 1.1, 1.0, 1.0, 1.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'p-', color='purple')\nax.plot(x, y2, 'p-', color='purple')\nax.plot(x, y3, 'p-', color='purple')\nax.plot(x, y4, 'p-', color='purple')\n\n# Set the title and labels\nax.set_title('variable, asymmetric error')\nax.set_xlabel('time')\nax.set_ylabel('error')\n\n# Set the y-axis limits\nax.set_ylim(14, 19)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([1, 2], [1, 0], 'k-')\nax.plot([2, 3], [0, 1], 'k-')\nax.plot([3, 4], [1, 0], 'k-')\nax.plot([4, 5], [0, 1], 'k-')\nax.plot([5, 6], [1, 0], 'k-')\nax.plot([6, 7], [0, 1], 'k-')\nax.plot([7, 8], [1, 0], 'k-')\nax.plot([8, 9], [0, 1], 'k-')\nax.plot([9, 10], [1, 0], 'k-')\nax.plot([10, 11], [0, 1], 'k-')\nax.plot([11, 12], [1, 0], 'k-')\nax.plot([12, 13], [0, 1], 'k-')\nax.plot([13, 14], [1, 0], 'k-')\nax.plot([14, 15], [0, 1], 'k-')\nax.plot([15, 16], [1, 0], 'k-')\nax.plot([16, 17], [0, 1], 'k-')\nax.plot([17, 18], [1, 0], 'k-')\nax.plot([18, 19], [0, 1], 'k-')\nax.plot([19, 20], [1, 0], 'k-')\nax.plot([20, 21], [0, 1], 'k-')\nax.plot([21, 22], [1, 0], 'k-')\nax.plot([22, 23], [0, 1], 'k-')\nax.plot([23, 24], [1, 0], 'k-')\nax.plot([24, 25], [0, 1], 'k-')\nax.plot([25, 26], [1, 0], 'k-')\nax.plot([26, 27], [0, 1], 'k-')\nax.plot([27, 28], [1, 0], 'k-')\nax.plot([28, 29], [0, 1], 'k-')\nax.plot([29, 30], [1, 0], 'k-')\nax.plot([30, 31], [0, 1], 'k-')\nax.plot([31, 32], [1, 0], 'k-')\nax.plot([32, 33], [0, 1], 'k-')\nax.plot([33, 34], [1, 0], 'k-')\nax.plot([34, 35], [0, 1], 'k-')\nax.plot([35, 36], [1, 0], 'k-')\nax.plot([36, 37], [0, 1], 'k-')\nax.plot([37, 38], [1, 0], 'k-')\nax.plot([38, 39], [0, 1], 'k-')\nax.plot([39, 40], [1, 0], 'k-')\nax.plot([40, 41], [0, 1], 'k-')\nax.plot([41, 42], [1, 0], 'k-')\nax.plot([42, 43], [0, 1], 'k-')\nax.plot([43, 44], [1, 0], 'k-')\nax.plot([44, 45], [0, 1], 'k-')\nax.plot([45, 46], [1, 0], 'k-')\nax.plot([46, 47], [0, 1], 'k-')\nax.plot([47, 48], [1, 0], 'k-')\nax.plot([48, 49], [0, 1], 'k-')\nax.plot([49, 50], [1, 0], 'k-')\nax.plot([50, 51], [0, 1], 'k-')\nax.plot([51, 52], [1, 0], 'k-')\nax.plot([52, 53], [0, 1], 'k-')\nax.plot([53, 54], [1, 0], 'k-')\nax.plot([54, 55], [0, 1], 'k-')\nax.plot([55, 56], [1, 0], 'k-')\nax.plot([56, 57], [0, 1], 'k-')\nax.plot([57, 58], [1, 0], 'k-')\nax.plot([58, 59], [0, 1], 'k-')\nax.plot([59, 60], [1, 0], 'k-')\nax.plot([60, 61], [0, 1], 'k-')\nax.plot([61, 62], [1, 0], 'k-')\nax.plot([62, 63], [0, 1], 'k-')\nax.plot([63, 64], [1, 0], 'k-')\nax.plot([64, 65], [0, 1], 'k-')\nax.plot([65, 66], [1, 0], 'k-')\nax.plot([66, 67], [0, 1], 'k-')\nax.plot([67, 68], [1, 0], 'k-')\nax.plot([68, 69], [0, 1], 'k-')\nax.plot([69, 70], [1, 0], 'k-')\nax.plot([70, 71], [0, 1], 'k-')\nax.plot([71, 72], [1, 0], 'k-')\nax.plot([72, 73], [0, 1], 'k-')\nax.plot([73, 74], [1, 0], 'k-')\nax.plot([74, 75], [0, 1], 'k-')\nax.plot([75, 76], [1, 0], 'k-')\nax.plot([76, 77], [0, 1], 'k-')\nax.plot([77, 78], [1, 0], 'k-')\nax.plot([78, 79], [0, 1], 'k-')\nax.plot([79, 80], [1, 0], 'k-')\nax.plot([80, 81], [0, 1], 'k-')\nax.plot([81, 82], [1, 0], 'k-')\nax.plot([82, 83], [0, 1], 'k-')\nax.plot([83, 84], [1, 0], 'k-')\nax.plot([84, 85], [0, 1], 'k-')\nax.plot([85, 86], [1, 0], 'k-')\nax.plot([86, 87], [0, 1], 'k-')\nax.plot([87, 88], [1, 0], 'k-')\nax.plot([88, 89], [0, 1], 'k-')\nax.plot([89, 90], [1, 0], 'k-')\nax.plot([90, 91], [0, 1], 'k-')\nax.plot([91, 92], [1, 0], 'k-')\nax.plot([92, 93], [0, 1], 'k-')\nax.plot([93, 94], [1, 0], 'k-')\nax.plot([94, 95], [0, 1], 'k-')\nax.plot([95, 96], [1, 0], 'k-')\nax.plot([96, 97], [0, 1], 'k-')\nax.plot([97, 98], [1, 0], 'k-')\nax.plot([98, 99], [0, 1], 'k-')\nax.plot([99, 100], [1, 0], 'k-')\nax.plot([100, 101], [0, 1], 'k-')\nax.plot([101, 102], [1, 0], 'k-')\nax.plot([102, 103], [0, 1], 'k-')\nax.plot([103, 104], [1, 0], 'k-')\nax.plot([104, 105], [0, 1], 'k-')\nax.plot([105, 106], [1, 0], 'k-')\nax.plot([106, 107], [0, 1], 'k-')\nax.plot([107, 108], [1, 0], 'k-')\nax.plot([108, 109], [0, 1], 'k-')\nax.plot([109, 110], [1, 0], 'k-')\nax.plot([110, 111], [0, 1], 'k-')\nax.plot([111, 112], [1, 0], 'k-')\nax.plot([112, 113], [0, 1], 'k-')\nax.plot([113, 114], [1, 0], 'k-')\nax.plot([114, 115], [0, 1], 'k-')\nax.plot([115, 116], [1, 0], 'k-')\nax.plot([116, 117], [0, 1], 'k-')\nax.plot([117, 118], [1, 0], 'k-')\nax.plot([118, 119], [0, 1], 'k-')\nax.plot([119, 120], [1, 0], 'k-')\nax.plot([120, 121], [0, 1], 'k-')\nax.plot([121, 122], [1, 0], 'k-')\nax.plot([122, 123], [0, 1], 'k-')\nax.plot([123, 124], [1, 0], 'k-')\nax.plot([124, 125], [0, 1], 'k-')\nax.plot([125, 126], [1, 0], 'k-')\nax.plot([126, 127], [0, 1], 'k-')\nax.plot([127, 128], [1, 0], 'k-')\nax.plot([128, 129], [0, 1], 'k-')\nax.plot([129, 130], [1, 0], 'k-')\nax.plot([130, 131], [0, 1], 'k-')\nax.plot([131, 132], [1, 0], 'k-')\nax.plot([132, 133], [0, 1], 'k-')\nax.plot([133, 134], [1, 0], 'k-')\nax.plot([134, 135], [0, 1], 'k-')\nax.plot([135, 136], [1, 0], 'k-')\nax.plot([136, 137], [0, 1], 'k-')\nax.plot([137, 138], [1, 0], 'k-')\nax.plot([138, 139], [0, 1], 'k-')\nax.plot([139, 140], [1, 0], 'k-')\nax.plot([140, 141], [0, 1], 'k-')\nax.plot([141, 142], [1, 0], 'k-')\nax.plot([142, 143], [0, 1], 'k-')\nax.plot([143, 144], [1, 0], 'k-')\nax.plot([144, 145], [0, 1], 'k-')\nax.plot([145, 146], [1, 0], 'k-')\nax.plot([146, 147], [0, 1], 'k-')\nax.plot([147, 148], [1, 0], 'k-')\nax.plot([148, 149], [0, 1], 'k-')\nax.plot([149, 150], [1, 0], 'k-')\nax.plot([150, 151], [0, 1], 'k-')\nax.plot([151, 152], [1, 0], 'k-')\nax.plot([152, 153], [0, 1], 'k-')\nax.plot([153, 154], [1, 0], 'k-')\nax.plot([154, 155], [0, 1], 'k-')\nax.plot([155, 156], [1, 0], 'k-')\nax.plot([156, 157], [0, 1], 'k-')\nax.plot([157, 158], [1, 0], 'k-')\nax.plot([158, 159], [0, 1], 'k-')\nax.plot([159, 160], [1, 0], 'k-')\nax.plot([160, 161], [0, 1], 'k-')\nax.plot([161, 162], [1, 0], 'k-')\nax.plot([162, 163], [0, 1], 'k-')\nax.plot([163, 164], [1, 0], 'k-')\nax.plot([164, 165], [0, 1], 'k-')\nax.plot([165, 166], [1, 0], 'k-')\nax.plot([166, 167], [0, 1], 'k-')\nax.plot([167, 168], [1, 0], 'k-')\nax.plot([168, 169], [0, 1], 'k-')\nax.plot([169, 170], [1, 0], 'k-')\nax.plot([170, 171], [0, 1], 'k-')\nax.plot([171, 172], [1, 0], 'k-')\nax.plot([172, 173], [0, 1], 'k-')\nax.plot([173, 174], [1, 0], 'k-')\nax.plot([174, 175], [0, 1], 'k-')\nax.plot([175, 176], [1, 0], 'k-')\nax.plot([176, 177], [0, 1], 'k-')\nax.plot([177, 178], [1, 0], 'k-')\nax.plot([178, 179], [0, 1], 'k-')\nax.plot([179, 180], [1, 0], 'k-')\nax.plot([180, 181], [0, 1], 'k-')\nax.plot([181, 182], [1, 0], 'k-')\nax.plot([182, 183], [0, 1], 'k-')\nax.plot([183, 184], [1, 0], 'k-')\nax.plot([184, 185], [0, 1], 'k-')\nax.plot([185, 186], [1, 0], 'k-')\nax.plot([186, 187], [0, 1], 'k-')\nax.plot([187, 188], [1, 0], 'k-')\nax.plot([188, 189], [0, 1], 'k-')\nax.plot([189, 190], [1, 0], 'k-')\nax.plot([190, 191], [0, 1], 'k-')\nax.plot([191, 192], [1, 0], 'k-')\nax.plot([192, 193], [0, 1], 'k-')\nax.plot([193, 194], [1, 0], 'k-')\nax.plot([194, 195], [0,"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the points\nx = np.linspace(0, 10, 20)\ny = np.sin(x)\n\n# Plot the points\nax.plot(x, y, 'o')\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(-1, 1)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the circle's radius and center\nradius = 10\ncenter_x, center_y = 5, 5\n\n# Generate points on the circle\ntheta = np.linspace(0, 2*np.pi, 12)\nx = center_x + radius * np.cos(theta)\ny = center_y + radius * np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, 'o-')\n\n# Set equal aspect ratio to ensure the circle is not distorted\nax.set_aspect('equal')\n\n# Remove axes for cleaner look\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with the specified size.\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the vertices of the polygon.\nvertices = np.array([[2, 0], [3, 0], [4, 1], [3, 2], [2, 2]])\n\n# Plot the polygon.\nax.fill(vertices[:, 0], vertices[:, 1], 'p')\n\n# Set the aspect ratio to be equal.\nax.set_aspect('equal')\n\n# Set the limits of the plot.\nax.set_xlim(-1, 5)\nax.set_ylim(-1, 3)\n\n# Remove the axes.\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([1, 2], [1, 2], 'k-')\nax.plot([2, 3], [2, 3], 'k-')\nax.plot([3, 4], [3, 4], 'k-')\nax.plot([4, 5], [4, 5], 'k-')\nax.plot([5, 6], [5, 6], 'k-')\nax.plot([6, 7], [6, 7], 'k-')\nax.plot([7, 8], [7, 8], 'k-')\nax.plot([8, 9], [8, 9], 'k-')\nax.plot([9, 10], [9, 10], 'k-')\nax.plot([10, 11], [10, 11], 'k-')\nax.plot([11, 12], [11, 12], 'k-')\nax.plot([12, 13], [12, 13], 'k-')\nax.plot([13, 14], [13, 14], 'k-')\nax.plot([14, 15], [14, 15], 'k-')\nax.plot([15, 16], [15, 16], 'k-')\nax.plot([16, 17], [16, 17], 'k-')\nax.plot([17, 18], [17, 18], 'k-')\nax.plot([18, 19], [18, 19], 'k-')\nax.plot([19, 20], [19, 20], 'k-')\nax.plot([20, 21], [20, 21], 'k-')\nax.plot([21, 22], [21, 22], 'k-')\nax.plot([22, 23], [22, 23], 'k-')\nax.plot([23, 24], [23, 24], 'k-')\nax.plot([24, 25], [24, 25], 'k-')\nax.plot([25, 26], [25, 26], 'k-')\nax.plot([26, 27], [26, 27], 'k-')\nax.plot([27, 28], [27, 28], 'k-')\nax.plot([28, 29], [28, 29], 'k-')\nax.plot([29, 30], [29, 30], 'k-')\nax.plot([30, 31], [30, 31], 'k-')\nax.plot([31, 32], [31, 32], 'k-')\nax.plot([32, 33], [32, 33], 'k-')\nax.plot([33, 34], [33, 34], 'k-')\nax.plot([34, 35], [34, 35], 'k-')\nax.plot([35, 36], [35, 36], 'k-')\nax.plot([36, 37], [36, 37], 'k-')\nax.plot([37, 38], [37, 38], 'k-')\nax.plot([38, 39], [38, 39], 'k-')\nax.plot([39, 40], [39, 40], 'k-')\nax.plot([40, 41], [40, 41], 'k-')\nax.plot([41, 42], [41, 42], 'k-')\nax.plot([42, 43], [42, 43], 'k-')\nax.plot([43, 44], [43, 44], 'k-')\nax.plot([44, 45], [44, 45], 'k-')\nax.plot([45, 46], [45, 46], 'k-')\nax.plot([46, 47], [46, 47], 'k-')\nax.plot([47, 48], [47, 48], 'k-')\nax.plot([48, 49], [48, 49], 'k-')\nax.plot([49, 50], [49, 50], 'k-')\nax.plot([50, 51], [50, 51], 'k-')\nax.plot([51, 52], [51, 52], 'k-')\nax.plot([52, 53], [52, 53], 'k-')\nax.plot([53, 54], [53, 54], 'k-')\nax.plot([54, 55], [54, 55], 'k-')\nax.plot([55, 56], [55, 56], 'k-')\nax.plot([56, 57], [56, 57], 'k-')\nax.plot([57, 58], [57, 58], 'k-')\nax.plot([58, 59], [58, 59], 'k-')\nax.plot([59, 60], [59, 60], 'k-')\nax.plot([60, 61], [60, 61], 'k-')\nax.plot([61, 62], [61, 62], 'k-')\nax.plot([62, 63], [62, 63], 'k-')\nax.plot([63, 64], [63, 64], 'k-')\nax.plot([64, 65], [64, 65], 'k-')\nax.plot([65, 66], [65, 66], 'k-')\nax.plot([66, 67], [66, 67], 'k-')\nax.plot([67, 68], [67, 68], 'k-')\nax.plot([68, 69], [68, 69], 'k-')\nax.plot([69, 70], [69, 70], 'k-')\nax.plot([70, 71], [70, 71], 'k-')\nax.plot([71, 72], [71, 72], 'k-')\nax.plot([72, 73], [72, 73], 'k-')\nax.plot([73, 74], [73, 74], 'k-')\nax.plot([74, 75], [74, 75], 'k-')\nax.plot([75, 76], [75, 76], 'k-')\nax.plot([76, 77], [76, 77], 'k-')\nax.plot([77, 78], [77, 78], 'k-')\nax.plot([78, 79], [78, 79], 'k-')\nax.plot([79, 80], [79, 80], 'k-')\nax.plot([80, 81], [80, 81], 'k-')\nax.plot([81, 82], [81, 82], 'k-')\nax.plot([82, 83], [82, 83], 'k-')\nax.plot([83, 84], [83, 84], 'k-')\nax.plot([84, 85], [84, 85], 'k-')\nax.plot([85, 86], [85, 86], 'k-')\nax.plot([86, 87], [86, 87], 'k-')\nax.plot([87, 88], [87, 88], 'k-')\nax.plot([88, 89], [88, 89], 'k-')\nax.plot([89, 90], [89, 90], 'k-')\nax.plot([90, 91], [90, 91], 'k-')\nax.plot([91, 92], [91, 92], 'k-')\nax.plot([92, 93], [92, 93], 'k-')\nax.plot([93, 94], [93, 94], 'k-')\nax.plot([94, 95], [94, 95], 'k-')\nax.plot([95, 96], [95, 96], 'k-')\nax.plot([96, 97], [96, 97], 'k-')\nax.plot([97, 98], [97, 98], 'k-')\nax.plot([98, 99], [98, 99], 'k-')\nax.plot([99, 100], [99, 100], 'k-')\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse']\nvalues = [\n    [0.61, 0.74, 0.70, 0.70, 0.57],\n    [1.00, 0.69, 0.77, 0.88, 0.62],\n    [1.00, 0.64, 0.72, 0.70, 0.69],\n    [1.00, 0.67, 0.70, 0.54, 1.00]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh(category, values[i], color=plt.cm.Reds(np.linspace(0, 1, len(values[i]))))\n\n# Set the title and labels\nax.set_title('Average Values')\nax.set_xlabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nvotess = ['Werewolf', 'Seer', 'Witch', 'Hunter', 'Abstain']\ndata = [\n    [15.7, 28.1, 2.6, 2.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 14.3],\n    [49.2, 11.2, 0.6, 7.8, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 16.3]\n]\n\n# Create a heatmap\nim = ax.imshow(data, cmap='hot')\n\n# Set the tick labels\nax.set_xticks(np.arange(len(voters)))\nax.set_yticks(np.arange(len(votess)))\nax.set_xticklabels(voters)\nax.set_yticklabels(votess)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(voters)):\n    for j in range(len(votess)):\n        text = ax.text(j, i, str(data[i][j]) + '%',\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Add a colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Percentage', rotation=-90, va=\"bottom\")\n\n# Set the title of the plot\nax.set_title('Heatmap of Votes')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\nfox = [0.9, 0.7, 0.5, 0.3, 0.1]\nhaliburton = [0.8, 0.6, 0.4, 0.2, 0.0]\nharkless = [0.7, 0.5, 0.3, 0.1, 0.0]\nbarnes = [0.6, 0.4, 0.2, 0.0, 0.0]\nmetu = [0.5, 0.3, 0.1, 0.0, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(players, fox, color='orange')\nax.bar(players, haliburton, bottom=fox, color='yellow')\nax.bar(players, harkless, bottom=[sum(x) for x in zip(fox, haliburton)], color='purple')\nax.bar(players, barnes, bottom=[sum(x) for x in zip(fox, haliburton, harkless)], color='blue')\nax.bar(players, metu, bottom=[sum(x) for x in zip(fox, haliburton, harkless, barnes)], color='pink')\n\n# Set the title and labels\nax.set_title('Player Performance')\nax.set_xlabel('Players')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\ndata = [\n    [10, 20, 30, 40],\n    [15, 25, 35, 45],\n    [20, 30, 40, 50]\n]\n\n# Create a heatmap\nim = ax.imshow(data, cmap='viridis')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Color Intensity', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['A', 'B', 'C'])\nax.set_yticklabels(['X', 'Y', 'Z'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LOH0', 'LOH1', 'LOH2', 'LOMLP']\nd2 = [10, 4.0, 12.0, 3.0]\nd1 = [10, 8.0, 16.0, 4.0]\nd0 = [10, 16.0, 28.0, 16.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.bar(categories, d2, color='gray')\nax.bar(categories, d1, bottom=d2, color='cyan')\nax.bar(categories, d0, bottom=[sum(x) for x in zip(d2, d1)], color='brown')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4', 'CODI']\nsubcategories = ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\nvalues = [\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.6, 0.7, 0.8, 0.9, 1.0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the color map\ncmap = plt.cm.RdYlBu_r\n\n# Create a bar chart\nfor i, category in enumerate(categories):\n    ax.bar(subcategories, values[i], bottom=np.sum(values[:i], axis=0), color=cmap(i/len(categories)))\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Subcategories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 3, 5, 9, 12]\ny = [1, 3, 5, 9, 5]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('Perplexity vs. To Layer')\nplt.xlabel('To Layer')\nplt.ylabel('Perplexity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Define the data\nsales = [659, 777, 807, 109, 247, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 807, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, 274, 643, 153, 953, 784, 187, 637, 523, 759, 373, 996, 327, 459, "}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data\nx = [0, 5, 10, 15, 20, 25, 30]\ny = [[0.4, 0.5, 0.6], [0.3, 0.4, 0.5], [0.2, 0.3, 0.4]]\n\n# Plot the data\nfor i in range(len(y)):\n    ax.bar(x, y[i], color=plt.cm.viridis(i/len(y)))\n\n# Set the title and labels\nax.set_title('Bar Chart with Color Map')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the heatmap\ndata = [\n    [0.55, 0.72, 0.6, 0.44, 0.89],\n    [0.42, 0.65, 0.44, 0.79, 0.54],\n    [0.96, 0.38, 0.79, 0.53, 0.09],\n    [0.57, 0.93, 0.07, 0.09, 0.77]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='YlOrBr')\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set labels\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_yticks([0, 1, 2, 3])\nax.set_xticklabels(['96', '192', '336', '720'])\nax.set_yticklabels(['96', '192', '336', '720'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndata = {\n    'Villager': [15.7, 28.1, 26, 14.5, 28.6, 10.5],\n    'Hunter': [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    'Witch': [50.8, 12.3, 0.9, 6.2, 15.5, 13.9],\n    'Seer': [49.2, 11.2, 0.6, 7.8, 17.3, 16.3],\n    'Wererewolf': [50.3, 12.0, 0.9, 7.0, 13.4, 16.3]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Plot the data\nfor i, (role, percentages) in enumerate(data.items()):\n    ax.bar(range(len(percentages)), percentages, color='blue', alpha=0.7)\n    ax.text(i, max(percentages) + 1, role, ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Role voting in the Werewolf game')\nax.set_xlabel('Roles')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nresponses = [169, 115, 219, 67, 177]\nquestion_types = ['0', '1', '2', '3', '4', '5']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(question_types, responses[i], label=category)\n\n# Set the title and labels\nax.set_title('Question Type: All three types of questions')\nax.set_xlabel('Response Action Category')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'feet', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.50, 0.00, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.44, 0.00, 0.00, 0.10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bars for the original values\nax.bar(categories, original_values, color='blue')\n\n# Plot the bars for the adjusted values\nax.bar(categories, adjusted_values, color='red')\n\n# Set the title of the plot\nax.set_title('Original vs Adjusted')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nvotess = ['Voter 1', 'Voter 2', 'Voter 3', 'Voter 4', 'Voter 5', 'Voter 6', 'Voter 7', 'Voter 8', 'Voter 9', 'Voter 10', 'Voter 11', 'Voter 12', 'Voter 13', 'Voter 14', 'Voter 15', 'Voter 16', 'Voter 17', 'Voter 18', 'Voter 19', 'Voter 20', 'Voter 21', 'Voter 22', 'Voter 23', 'Voter 24', 'Voter 25', 'Voter 26', 'Voter 27', 'Voter 28', 'Voter 29', 'Voter 30']\npercentages = [15.7, 28.1, 2.6, 2.6, 14.5, 10.5, 76.0, 2.1, 0.5, 4.1, 8.1, 9.2, 50.8, 12.3, 0.9, 6.2, 15.5, 14.3, 50.3, 12.0, 0.9, 7.0, 13.4, 16.3, 10.5, 9.2, 14.5, 10.5, 10.5, 10.5, 10.5, 10.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.scatter(voters, percentages, color='blue')\n\n# Set the title and labels\nax.set_title('Voter Preferences')\nax.set_xlabel('Voters')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data for the heatmap\ndata = [\n    [17, 24, 23],\n    [3, 8, 17],\n    [13, 10, 3],\n    [5, 4, 10]\n]\n\n# Create a heatmap\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Rank', rotation=-90, va=\"bottom\")\n\n# Set the labels for the x-axis\nax.set_xticks(np.arange(len(['Baseline', 'Reversed Order', 'Reversed IDs'])))\nax.set_yticks(np.arange(len(['#17', '#24', '#23', '#3', '#8', '#17', '#10', '#5', '#4', '#10', '#3', '#13', '#10', '#5', '#4', '#10'])))\n\n# Set the labels for the y-axis\nax.set_xticklabels(['Baseline', 'Reversed Order', 'Reversed IDs'])\nax.set_yticklabels(['#17', '#24', '#23', '#3', '#8', '#17', '#10', '#5', '#4', '#10', '#3', '#13', '#10', '#5', '#4', '#10'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the bars\nx = np.arange(4)\ny1 = [0.10, 0.08, 0.30, 0.60]\ny2 = [0.50, 0.07, 0.00, 0.10]\n\n# Create the bar chart\nax.bar(x, y1, color='lightgrey', label='Group 1')\nax.bar(x, y2, bottom=y1, color='darkgrey', label='Group 2')\n\n# Set the x-axis labels\nax.set_xticks(x)\nax.set_xticklabels(['Bar 1', 'Bar 2', 'Bar 3', 'Bar 4'])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame with the data\ndata = {\n    'Upland Bros.': [0.8, 2.4, 1.1, 0.7, 1.3, 0.1],\n    'Smith Gardening': [2.4, 0.0, 2.4, 1.7, 1.2, 2.0],\n    'Agrifun': [2.5, 4.0, 0.8, 0.6, 0.0, 0.0],\n    'Organic': [3.9, 1.0, 4.3, 2.6, 0.0, 1.4],\n    'BioGoods Ltd.': [0.0, 2.7, 1.9, 2.2, 0.0, 1.9],\n    'Cornley Corp.': [0.0, 0.0, 0.0, 0.0, 0.0, 6.3]\n}\ndf = pd.DataFrame(data, index=['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'])\n\n# Plot the DataFrame\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.axis('off')\ntable = ax.table(cellText=df.values, colLabels=df.columns, rowLabels=df.index, loc='center')\n\n# Set the color of the table cells\nfor cell in table.properties()['child_artists']:\n    cell.set_edgecolor('w')\n    cell.set_facecolor('y')\n\n# Set the color of the table header\nfor key, cell in table.properties()['cell_text_properties'].items():\n    if key[0] == 0:\n        cell.set_color('g')\n\n# Set the color of the table footer\nfor key, cell in table.properties()['cell_text_properties'].items():\n    if key[0] == len(df):\n        cell.set_color('b')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvests = [6, 5, 3, 2, 1, 0.6]\nsales = [85, 74, 62, 51, 37, 10]\n\n# Create a bar chart\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\nax1.bar(categories, harvests, color='g')\nax1.set_xlabel('Category')\nax1.set_ylabel('Harvest [t/year]', color='g')\nax1.tick_params(axis='y', labelcolor='g')\n\n# Create a second y-axis for sales\nax2 = ax1.twinx()\nax2.bar(categories, sales, color='r')\nax2.set_ylabel('Weekly sold copies', color='r')\nax2.tick_params(axis='y', labelcolor='r')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Generate random data for each subplot\ndata = np.random.rand(12, 12)\n\n# Plot the data\nfor i in range(4):\n    for j in range(3):\n        ax.imshow(data, cmap='viridis')\n        ax.set_title('subplot ' + str(i*3+j+1))\n        ax.axis('off')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0, 2, 4, 6, 8]\ny1 = [3, 5, 2, 4, 6]\n\n# Data for the second graph\nx2 = [0, 2, 4, 6, 8]\ny2 = [2, 4, 6, 8, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x1, y1, label='default: no edges')\nax.plot(x2, y2, label='thick edges')\n\n# Set the title and labels\nax.set_title('Graphs')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\ndata = {\n    'apples': [1.5, 2.2, 1.8, 3.2, 0.5],\n    'bananas': [2.8, 0.5, 3.6, 1.8, 2.2, 0.7],\n    'cherries': [1.0, 2.1, 0.9, 4.0, 1.5, 4.2],\n    'dates': [0.7, 0.6, 0.4, 3.4, 0.5, 2.3, 0.6],\n    'elderberries': [0.9, 1.6, 0.7, 2.0, 0.5, 5.9],\n    'figs': [1.2, 1.3, 0.5, 0.6, 0.7, 3.1],\n    'grapes': [0.3, 1.9, 0.6, 1.3, 0.8, 5.9]\n}\n\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nfor i, vendor in enumerate(vendors):\n    ax.barh(list(data.keys()), data[vendor], left=[i * len(data) for _ in range(len(data))], height=0.8, label=vendor)\n\nax.set_xlabel('Sales (in tons/year)')\nax.set_title('Sales of vendors (in tons/year)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Low', 'Medium', 'High']\nvalues = [17, 36, 28, 23]\nheights = [79, 53, 34, 35]\nmediums = [42, 38, 0, 75]\nlows = [4, 5, 0, 55]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\nax.bar(categories, heights, color='blue')\nax.bar(categories, mediums, bottom=heights, color='green')\nax.bar(categories, lows, bottom=[h + m for h, m in zip(heights, mediums)], color='red')\n\n# Set labels and title\nax.set_xlabel('Degree of acceptance of a product')\nax.set_ylabel('Number of people')\nax.set_title('Degree of acceptance of a product')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\ndata = {\n    'ada': [0.9, 0.8, 0.7],\n    'mistral': [0.8, 0.7, 0.6],\n    'distilroberta': [0.7, 0.6, 0.5],\n    'mpnet': [0.6, 0.5, 0.4],\n    'MiniLM': [0.5, 0.4, 0.3],\n    'qa-distilbert': [0.4, 0.3, 0.2]\n}\n\n# Create a bar chart\nbars = []\nfor i, (key, values) in enumerate(data.items()):\n    bar = ax.bar(range(len(values)), values, bottom=np.sum(list(data.values())[:i], axis=0), label=key)\n    bars.append(bar)\n\n# Add labels and title\nax.set_xlabel('Bottleneck Distance')\nax.set_ylabel('Wasserstein Distance')\nax.set_title('Comparison of Models')\nax.legend()\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(values)))\nax.set_xticklabels(['ada', 'mis', 'dis', 'mpn', 'Min', 'qad'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of values\ngrid = np.random.rand(10, 10)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Display the grid\ncax = ax.matshow(grid, cmap='hot')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title('ROC\\'s AUC')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Timeshift')\nax.set_ylabel('Scales')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation', 'Last']\ncounts = [0, 4, 8, 12, 16, 20, 24, 28]\nvalues = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Plot the data\nfor i in range(len(categories)):\n    ax.barh(categories[i], counts[i], color=plt.cm.viridis(values[i]))\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Count')\nax.set_ylabel('Category')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [\n    [44, 12, 0, 0],\n    [35, 8, 24, 0],\n    [0, 0, 0, 31],\n    [5, 42, 3, 0],\n    [0, 8, 23, 9],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Kokkos', 'Raja', 'Omp', 'Oacc', 'Sycl', 'Native Port']\nsummit = [876, 136, 435, 534, 322, 804]\npermutter = [750, 1737, 742, 375, 750, 1825]\ncorona = [764, 676, 782, 421, 925, 911]\nfrontier = [482, 120, 843, 1170, 925, 911]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.bar(models, summit, color='pink')\nax.bar(models, permutter, bottom=summit, color='orange')\nax.bar(models, corona, bottom=[summit[i] + permutter[i] for i in range(len(summit))], color='lightblue')\nax.bar(models, frontier, bottom=[summit[i] + permutter[i] + corona[i] for i in range(len(summit))], color='lightgreen')\n\n# Set the title and labels\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_xlabel('Programming Model')\nax.set_ylabel('Memory Bandwidth (GB/s)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data\ndata = [\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.71, 0.82],\n    [0.90, 0.90, 0.93, 0.92, 0.66, 0.69, 0.72, 0.82],\n    [0.89, 0.93, 0.95, 0.95, 0.66, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.66, 0.69, 0.72, 0.82],\n    [0.64, 0.65, 0.66, 0.66, 0.64, 0.65, 0.71, 0.82],\n    [0.66, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66, 0.69, 0.72, 0.82],\n    [0.68, 0.69, 0.69, 0.69, 0.66,"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = {\n    'LexRank': [0.19, 0.19, 0.26, 0.16, 0.03, -0.03, 0.07],\n    'BertScore': [0.62, 0.53, 0.52, 0.50, 0.24, 0.23, 0.28],\n    'SimCSE': [0.52, 0.39, 0.34, 0.20, 0.20, 0.10, 0.26],\n    'PMI': [0.50, 0.39, 0.34, 0.20, 0.20, 0.10, 0.21],\n    'GPT-3.5': [0.50, 0.39, 0.34, 0.20, 0.20, 0.10, 0.21],\n    'CrossAtt': [0.06, 0.05, 0.06, 0.06, 0.06, 0.06, 0.05]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.Blues\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    ax.barh(range(len(value)), value, left=np.arange(len(value)), height=0.8, align='center', alpha=0.7, color=cmap(i/len(data)))\n\n# Set the labels\nax.set_xlabel('Scores')\nax.set_ylabel('Metrics')\nax.set_title('Metric Scores')\n\n# Set the y-ticks\nax.set_yticks(np.arange(len(data)))\nax.set_yticklabels(list(data.keys()))\n\n# Set the x-axis limits\nax.set_xlim(0, 0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ndata1 = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n]\n\n# Data for the second graph\ndata2 = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n]\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot the first graph\naxs[0].imshow(data1, cmap='viridis')\n\n# Plot the second graph\naxs[1].imshow(data2, cmap='viridis')\n\n# Set the title of the first subplot\naxs[0].set_title('pythia-1b')\n\n# Set the title of the second subplot\naxs[1].set_title('pythia-1b')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny1 = [90, 85, 80, 75, 70]\ny2 = [85, 80, 75, 70, 65]\ny3 = [80, 75, 70, 65, 60]\ny4 = [75, 70, 65, 60, 55]\ny5 = [70, 65, 60, 55, 50]\ny6 = [65, 60, 55, 50, 45]\ny7 = [60, 55, 50, 45, 40]\ny8 = [55, 50, 45, 40, 35]\ny9 = [50, 45, 40, 35, 30]\ny10 = [45, 40, 35, 30, 25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, label='XSum')\nax.plot(x, y2, label='CNN/DailyMail')\nax.plot(x, y3, label='NarrativeQA')\nax.plot(x, y4, label='NaturalQuestions - Closed-book')\nax.plot(x, y5, label='NaturalQuestions - Open-book')\nax.plot(x, y6, label='QuAC')\n\n# Set the title and labels\nax.set_title('Number of Pairs vs Test Winning Distance')\nax.set_xlabel('Test Winning Distance')\nax.set_ylabel('Number of Pairs')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Define the data for the first subplot\nx1 = np.linspace(-0.2, 0.8, 100)\ny1 = np.sin(x1)\n\n# Define the data for the second subplot\nx2 = np.linspace(-0.6, 0.4, 100)\ny2 = np.cos(x2)\n\n# Plot the data on the first subplot\naxs[0].plot(x1, y1, 'b-', label='Inter Class')\naxs[0].plot(x1, y1 + 0.5, 'g-', label='Intra Class')\naxs[0].set_xlabel('Cosine Similarity')\naxs[0].set_ylabel('Frequency')\naxs[0].legend()\n\n# Plot the data on the second subplot\naxs[1].plot(x2, y2, 'b-', label='Inter Class')\naxs[1].plot(x2, y2 + 0.5, 'g-', label='Intra Class')\naxs[1].set_xlabel('Cosine Similarity')\naxs[1].set_ylabel('Frequency')\naxs[1].legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first subplot\naxes[0, 0].bar([0.5, 1.0, 1.5, 2.0], [0.6, 0.7, 0.8, 0.9], color='orange')\naxes[0, 0].set_title('Baseline')\naxes[0, 0].set_xlabel('Euclidean Distance')\naxes[0, 0].set_ylabel('Density')\n\n# Plot the second subplot\naxes[0, 1].bar([0.5, 1.0, 1.5, 2.0], [0.6, 0.7, 0.8, 0.9], color='blue')\naxes[0, 1].set_title('MIRL w/ MULT')\naxes[0, 1].set_xlabel('Euclidean Distance')\naxes[0, 1].set_ylabel('Density')\n\n# Plot the third subplot\naxes[1, 0].bar([0.5, 1.0, 1.5, 2.0], [0.6, 0.7, 0.8, 0.9], color='orange')\naxes[1, 0].set_title('MIRL + OCLR w/ MULT')\naxes[1, 0].set_xlabel('Euclidean Distance')\naxes[1, 0].set_ylabel('Density')\n\n# Plot the fourth subplot\naxes[1, 1].bar([0.5, 1.0, 1.5, 2.0], [0.6, 0.7, 0.8, 0.9], color='blue')\naxes[1, 1].set_title('MIRL + OCLR w/ DOTLA')\naxes[1, 1].set_xlabel('Euclidean Distance')\naxes[1, 1].set_ylabel('Density')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(6, 2, figsize=(7.0, 8.0))\n\n# Define the data for each subplot\ndata_sets = [\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100))\n]\n\n# Plot the data\nfor i, ax in enumerate(axes.flat):\n    ax.scatter(data_sets[i][0], data_sets[i][1])\n    ax.set_title(f\"Set {i+1}\")\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel(\"Y\")\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.02, 0.04, 0.06, 0.08]\ny1 = [1000, 1000, 1000, 1000]\ny2 = [1000, 1000, 1000, 1000]\ny3 = [1000, 1000, 1000, 1000]\ny4 = [1000, 1000, 1000, 1000]\ny5 = [1000, 1000, 1000, 1000]\ny6 = [1000, 1000, 1000, 1000]\n\n# Plotting\nplt.figure(figsize=(5.0, 5.0))\nplt.bar(x, y1, color='blue', label='Camels')\nplt.bar(x, y2, color='orange', bottom=y1, label='Kangaroos')\nplt.bar(x, y3, color='blue', bottom=[i+j for i, j in zip(y1, y2)], label='Camels')\nplt.bar(x, y4, color='orange', bottom=[i+j+k for i, j, k in zip(y1, y2, y3)], label='Kangaroos')\nplt.bar(x, y5, color='blue', bottom=[i+j+k+l for i, j, k, l in zip(y1, y2, y3, y4)], label='Camels')\nplt.bar(x, y6, color='orange', bottom=[i+j+k+l+m for i, j, k, l, m in zip(y1, y2, y3, y4, y5)], label='Kangaroos')\n\n# Labels and Title\nplt.xlabel('Animal Weight (Tons)')\nplt.ylabel('Frequency')\nplt.title('Desert Animals in the Wild')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nx = [0, 2, 4, 6, 8]\ny1 = [50, 70, 80, 80, 80]\ny2 = [30, 40, 50, 60, 70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bars\nax.bar(x, y1, color='red', label='Uniform data')\nax.bar(x, y2, color='blue', bottom=y1, label='Normal data')\n\n# Set the title and labels\nax.set_title('Comparison of Uniform and Normal Distributions')\nax.set_xlabel('Value')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Number of Measurements')\n\n# Set the tick labels for the x-axis\nax.set_xticks([-2, -1, 0, 1, 2, 3, 4, 5, 6])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 200, 400, 600, 800, 1000, 1200])\n\n# Set the color of the grid lines\nax.grid(color='blue')\n\n# Set the color of the histogram bars\nax.bar([-2, -1, 0, 1, 2, 3, 4, 5, 6], [1000, 800, 600, 400, 200, 100, 50, 25, 10], color='lightblue')\n\n# Set the color of the median line\nax.axvline(x=2, color='red', linestyle='--')\n\n# Set the color of the vertical line\nax.axvline(x=2, color='purple', linestyle='--')\n\n# Set the color of the horizontal line\nax.axhline(y=600, color='green', linestyle='--')\n\n# Set the color of the text\nax.text(2, 1200, 'Median: 1.97', color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndistances = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\nbaguette = [150, 120, 90, 60, 30, 10, 0]\nyoutiao = [140, 110, 80, 50, 20, 0, 0]\n\n# Create a bar chart\nplt.bar(distances, baguette, color='blue', label='Baguette')\nplt.bar(distances, youtiao, color='orange', bottom=baguette, label='Youtiao')\n\n# Set the title and labels\nplt.title('Baking Accuracy Analysis')\nplt.xlabel('Distance to Threshold')\nplt.ylabel('Frequency')\n\n# Add a legend\nplt.legend()\n\n# Set the x-axis limits\nplt.xlim(0, 3)\n\n# Set the y-axis limits\nplt.ylim(0, 150)\n\n# Set the figure size\nplt.figure(figsize=(5.0, 4.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'XSum': [80, 90, 100, 110, 120],\n    'CNN/DailyMail': [70, 80, 90, 100, 110],\n    'NarrativeQA': [60, 70, 80, 90, 100],\n    'NaturalQuestions - Closed-book': [50, 60, 70, 80, 90],\n    'NaturalQuestions - Open-book': [40, 50, 60, 70, 80],\n    'QuAC': [30, 40, 50, 60, 70]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.plot(values, label=label)\n\n# Set the title and labels\nax.set_title('Number of Pairs vs Test Winning Distance')\nax.set_xlabel('Test Winning Distance')\nax.set_ylabel('Number of Pairs')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\ndata = [\n    [15, 16, 17, 18, 19, 20],\n    [14, 15, 16, 17, 18, 19],\n    [13, 14, 15, 16, 17, 18],\n    [12, 13, 14, 15, 16, 17],\n    [11, 12, 13, 14, 15, 16],\n    [10, 11, 12, 13, 14, 15],\n    [9, 10, 11, 12, 13, 14],\n    [8, 9, 10, 11, 12, 13],\n    [7, 8, 9, 10, 11, 12],\n    [6, 7, 8, 9, 10, 11],\n    [5, 6, 7, 8, 9, 10],\n    [4, 5, 6, 7, 8, 9],\n    [3, 4, 5, 6, 7, 8],\n    [2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6]\n]\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.imshow(data, cmap='hot', interpolation='nearest')\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntime_scores = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nsam_data = [52, 53, 54, 55, 56, 57, 58]\nthioredoxin_like_data = [42, 43, 44, 45, 46, 47, 48]\ntetracopeptide_like_helical_domain_data = [32, 33, 34, 35, 36, 37, 38]\ncheY_like_data = [22, 23, 24, 25, 26, 27, 28]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.bar(time_scores, sam_data, color='blue', label='SAM-dependent methyltransferase')\nax.bar(time_scores, thioredoxin_like_data, color='cyan', label='Thioredoxin-like')\nax.bar(time_scores, tetracopeptide_like_helical_domain_data, color='green', label='Tetracopeptide-like helical domain')\nax.bar(time_scores, cheY_like_data, color='yellow', label='CheY-like')\n\n# Set the title and labels\nax.set_title('Time Score vs. SAM-dependent methyltransferase')\nax.set_xlabel('Time Score')\nax.set_ylabel('SAM-dependent methyltransferase')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Milk Chocolate\nmilk_swiss = [1.2, 1.1, 1.0, 0.9, 0.8]\nmilk_new_zealand = [1.1, 1.0, 0.9, 0.8, 0.7]\n\n# Data for Dark Chocolate\ndark_swiss = [1.2, 1.1, 1.0, 0.9, 0.8]\ndark_new_zealand = [1.1, 1.0, 0.9, 0.8, 0.7]\n\n# Data for White Chocolate\nwhite_swiss = [1.2, 1.1, 1.0, 0.9, 0.8]\nwhite_new_zealand = [1.1, 1.0, 0.9, 0.8, 0.7]\n\n# Data for Ruby Chocolate\nruby_swiss = [1.2, 1.1, 1.0, 0.9, 0.8]\nruby_new_zealand = [1.1, 1.0, 0.9, 0.8, 0.7]\n\n# Create a figure with four subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot Milk Chocolate\naxs[0, 0].bar(range(1, 6), milk_swiss, color='blue')\naxs[0, 0].bar(range(1, 6), milk_new_zealand, color='orange')\n\n# Plot Dark Chocolate\naxs[0, 1].bar(range(1, 6), dark_swiss, color='blue')\naxs[0, 1].bar(range(1, 6), dark_new_zealand, color='orange')\n\n# Plot White Chocolate\naxs[1, 0].bar(range(1, 6), white_swiss, color='blue')\naxs[1, 0].bar(range(1, 6), white_new_zealand, color='orange')\n\n# Plot Ruby Chocolate\naxs[1, 1].bar(range(1, 6), ruby_swiss, color='blue')\naxs[1, 1].bar(range(1, 6), ruby_new_zealand, color='orange')\n\n# Set titles and labels\naxs[0, 0].set_title('Milk Chocolate')\naxs[0, 0].set_xlabel('Sweetness')\naxs[0, 0].set_ylabel('Density')\n\naxs[0, 1].set_title('Dark Chocolate')\naxs[0, 1].set_xlabel('Sweetness')\naxs[0, 1].set_ylabel('Density')\n\naxs[1, 0].set_title('White Chocolate')\naxs[1, 0].set_xlabel('Sweetness')\naxs[1, 0].set_ylabel('Density')\n\naxs[1, 1].set_title('Ruby Chocolate')\naxs[1, 1].set_xlabel('Sweetness')\naxs[1, 1].set_ylabel('Density')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.00, 0.05, 0.10, 0.15]\ny_camel = [1000, 100, 10, 1]\ny_kangaroo = [1000, 100, 10, 1]\n\n# Create a bar chart\nplt.bar(x, y_camel, color='green', label='Camel')\nplt.bar(x, y_kangaroo, bottom=y_camel, color='pink', label='Kangaroo')\n\n# Add labels and title\nplt.xlabel('Concept Weight')\nplt.ylabel('Count')\nplt.title('CIFAR100 \\'Desert\\' Concept')\n\n# Add legend\nplt.legend()\n\n# Set the figure size\nplt.figure(figsize=(5.0, 4.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndistance_diff = [-5.0, -2.5, 0.0, 2.5, 5.0, 7.5, 10.0]\ncenter_samples = [100, 90, 80, 70, 60, 50, 40]\nrandom_samples = [110, 100, 90, 80, 70, 60, 50]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\nax.bar(distance_diff, center_samples, color='yellow', label='Center')\nax.bar(distance_diff, random_samples, color='blue', label='Random')\n\n# Labels and Title\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Samples')\nax.set_title('Number of Samples by Distance Difference')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nrepetition = [0.0, 2.5, 5.0, 7.5, 10.0]\nclusters = [1200, 800, 600, 400, 200]\n\n# Plotting\nplt.figure(figsize=(4.0, 3.0))\nplt.bar(repetition, clusters, color='orange')\nplt.xlabel('Number of Repetition')\nplt.ylabel('Number of Clusters')\nplt.title('Clusters vs Number of Repetition')\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndistances = [0, 1, 2, 3, 4]\ncorrectly_classified = [400, 300, 200, 100, 0]\nmisclassified = [350, 250, 150, 50, 0]\n\n# Plotting\nplt.figure(figsize=(5.0, 3.0))\nplt.bar(distances, correctly_classified, color='blue', label='Correctly classified')\nplt.bar(distances, misclassified, bottom=correctly_classified, color='orange', label='Misclassified')\nplt.xlabel('Distance to threshold')\nplt.ylabel('Count')\nplt.title('Classification by Distance')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nconfidence = [0.0, 0.2, 0.4, 0.6, 0.8]\naccuracy = [0.2, 0.2, 0.4, 0.6, 0.8]\n\n# Create a bar chart\nplt.bar(confidence, accuracy, color='brown')\n\n# Set the title and labels\nplt.title('Calibration Error: 0.31')\nplt.xlabel('Confidence in bin')\nplt.ylabel('Accuracy in bin')\n\n# Set the y-axis limits\nplt.ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.2, 0.4, 0.6, 0.8]\ny = [500, 300, 100, 50]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('Number of Queries Overlap')\nplt.xlabel('% Images Overlap')\nplt.ylabel('Number of Queries')\n\n# Set the x-axis limits\nplt.xlim(0, 1)\n\n# Set the y-axis limits\nplt.ylim(0, 600)\n\n# Set the figure size\nplt.figure(figsize=(6.0, 5.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Set the x-axis label\nax.set_xlabel('X Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Label')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 500)\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.08, 0.06), 0.04, 0.04, color='blue'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [5, 10, 15, 20]\ny1 = [20, 40, 60, 80]\ny2 = [20, 40, 60, 80]\ny3 = [20, 40, 60, 80]\ny4 = [20, 40, 60, 80]\ny5 = [20, 40, 60, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='JPEG+LDPC')\nax.plot(x, y2, 'r-', label='DEEPJSCC w/o ofdm')\nax.plot(x, y3, 'g-', label='DEEPJSCC w/ ofdm')\nax.plot(x, y4, 'm-', label='OURS')\n\n# Set the title and labels\nax.set_title('Classification Accuracy vs SNR')\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8]\ny_content = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\ny_organization = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\ny_language = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n# Plot the data\nax.plot(x, y_content, label='Content')\nax.plot(x, y_organization, label='Organization')\nax.plot(x, y_language, label='Language')\n\n# Set the title and labels\nax.set_title('Performance Gain (%)')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nx = [0, 20, 40, 60, 80]\ny1 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny2 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny3 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny4 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny5 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny6 = [0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Plot the data\nax.plot(x, y1, 'r', label='coco (10k)')\nax.plot(x, y2, 'g', label='laion (10k)')\nax.plot(x, y3, 'b', label='coco (5k)')\nax.plot(x, y4, 'y', label='laion (5k)')\nax.plot(x, y5, 'm', label='CLIP')\n\n# Set the title and labels\nax.set_title('Effect of Vocabulary on Zero Shot Accuracy')\nax.set_xlabel('Deposition IO Norm')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0.25, 0.5, 0.75, 1.0]\ny1 = [0.03, 0.02, 0.01, 0.01]\ny2 = [0.04, 0.03, 0.02, 0.01]\ny3 = [0.05, 0.04, 0.03, 0.02]\ny4 = [0.06, 0.05, 0.04, 0.03]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'g^', label='MAXN=512')\nax.plot(x, y2, 'r^', label='MAXN=1024')\nax.plot(x, y3, 'b^', label='MAXN=2048')\n\n# Set the title and labels\nax.set_title('Standard Deviation of ACC')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1], 'b-', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1], 'y-', label='ours')\n\n# Set the title and labels\nax.set_title('FID (dJ)')\nax.set_xlabel('Training iterations')\nax.set_ylabel('FID (dJ)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for the plot\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\ny1 = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6]\ny2 = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6]\ny3 = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Manually-analyzed')\nax.plot(x, y2, 'r-', label='Auto-profiled')\nax.plot(x, y3, 'g-', label='Release new product')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Normalized Value')\nax.set_xlabel('Week')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30]\ny5 = [55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='blue')\nax.plot(x, y2, label='LWF', color='red')\nax.plot(x, y3, label='EWC', color='magenta')\nax.plot(x, y4, label='SEQ', color='pink')\n\n# Set the title and labels\nax.set_title('Average Accuracy')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\ny2 = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\ny3 = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'bo-', label='Oesense')\nax.plot(x, y2, 'ro-', label='KWS')\nax.plot(x, y3, 'go-', label='ECG5000')\n\n# Add markers at specific points\nmarkers = [(0.0, 0.99), (0.2, 0.96), (0.4, 0.93), (0.6, 0.9), (0.8, 0.87), (1.0, 0.84)]\nfor x_val, y_val in markers:\n    ax.plot(x_val, y_val, 'D', color='green')\n\n# Set labels and title\nax.set_xlabel('Unertainty threshold')\nax.set_ylabel('Accuracy')\nax.set_title('Model Performance by Uncertainty Threshold')\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data points\nx = [0, 20, 40, 60, 80, 100, 120]\ny = [10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5]\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Set the labels\nax.set_xlabel('Number of Parameters')\nax.set_ylabel('Log KL Divergence')\n\n# Set the limits\nax.set_xlim(0, 120)\nax.set_ylim(10**-5, 10**-3)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Define the data\nx = [0, 500, 1000, 1500, 2000]\ny1 = [0.8, 0.9, 0.7, 0.6, 0.5]\ny2 = [0.7, 0.8, 0.6, 0.5, 0.4]\n\n# Plot the data\nax.plot(x, y1, label='7B')\nax.plot(x, y2, label='7B (Fine-tuned)')\n\n# Set the title and labels\nax.set_title('GPT-4 Evaluation')\nax.set_xlabel('Iterations')\nax.set_ylabel('Attack Success Rate')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [10**-2, 10**-1, 10**0]\ny_full = [50, 60, 70]\ny_spt = [55, 65, 75]\ny_vpt = [60, 70, 80]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\nax.plot(x, y_full, 'g-', label='Full')\nax.plot(x, y_spt, 'r-', label='SPT')\nax.plot(x, y_vpt, 'b-', label='VPT')\n\n# Set the title and labels\nax.set_title('Test Accuracy vs Fraction of Training Data')\nax.set_xlabel('Fraction of training data (log scale)')\nax.set_ylabel('Test accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 50, 100, 150, 200]\ny1 = [1, 1.5, 1.8, 1.6, 1.9]\ny2 = [0.5, 0.7, 0.8, 0.9, 1.1]\ny3 = [0.2, 0.3, 0.4, 0.5, 0.6]\n\n# Plotting\nplt.figure(figsize=(4.0, 3.0))\nplt.plot(x, y1, label='Gradient 1', color='green')\nplt.plot(x, y2, label='Gradient 2', color='blue')\nplt.plot(x, y3, label='Gradient 3', color='orange')\n\n# Fill between\nplt.fill_between(x, y1, color='lightgreen')\nplt.fill_between(x, y2, color='lightblue')\nplt.fill_between(x, y3, color='lightyellow')\n\n# Labels and title\nplt.xlabel('Gradient Steps (x 62.5K)')\nplt.ylabel('Value')\nplt.title('Gradient Analysis')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.74, 0.88)\n\n# Draw horizontal lines at specified y-values\nfor y in [0.78, 0.76]:\n    ax.axhline(y=y, color='gray', linestyle='--')\n\n# Draw vertical lines at specified x-values\nfor x in [0.2, 0.4, 0.6, 0.8, 1.0]:\n    ax.axvline(x=x, color='gray', linestyle='--')\n\n# Set the title of the plot\nax.set_title('MOLHIV')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [120, 90, 60, 30, 1]\ny_ours = [75.0, 80.0, 82.5, 85.0, 87.5]\ny_acr = [77.5, 80.0, 82.5, 85.0, 87.5]\n\n# Plotting\nplt.figure(figsize=(9.0, 6.0))\nplt.plot(x, y_ours, 'bo', label='Ours')\nplt.plot(x, y_acr, 'go', label='ACR')\n\n# Adding labels and title\nplt.xlabel('Imbalance Ratio of Unlabeled Data (%)')\nplt.ylabel('Top-1 Acc (%)')\nplt.title('Top-1 Accuracy vs Imbalance Ratio of Unlabeled Data')\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nratio = [40, 50, 60, 70, 80, 90, 100]\nperplexity_APTQ = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\nperplexity_LLaMA = [3.11, 3.32, 3.53, 3.63, 3.74, 3.94, 3.94]\nperplexity_OWQ = [3.32, 3.53, 3.63, 3.74, 3.94, 3.94, 3.94]\nperplexity_GPTQ = [3.53, 3.63, 3.74, 3.94, 3.94, 3.94, 3.94]\nperplexity_LLM_QAT = [3.63, 3.74, 3.94, 3.94, 3.94, 3.94, 3.94]\n\n# Plotting\nplt.figure(figsize=(5.0, 4.0))\nplt.plot(ratio, perplexity_APTQ, label='APTQ', color='blue')\nplt.plot(ratio, perplexity_LLaMA, label='LLaMA', color='purple')\nplt.plot(ratio, perplexity_OWQ, label='OWQ', color='orange')\nplt.plot(ratio, perplexity_GPTQ, label='GPTQ', color='green')\nplt.plot(ratio, perplexity_LLM_QAT, label='LLM-QAT', color='red')\n\n# Adding labels and title\nplt.xlabel('Ratio of 4-bit Utilization (%)')\nplt.ylabel('Perplexity (PPL)')\nplt.title('Perplexity vs Ratio of 4-bit Utilization')\n\n# Adding legend\nplt.legend()\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [82.98, 89.53, 90.47, 92.41, 93.7, 96.75, 96.75]\n\n# Plotting\nplt.figure(figsize=(5.0, 2.0))\nplt.plot(x, y, 'bo-')\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\nplt.title('Coverage Ratio vs Number of Training Objects')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = [0, 2, 4, 6, 8]\ny1 = [750, 700, 650, 600, 550]  # Average\ny2 = [740, 690, 640, 590, 540]  # Standard Deviation\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Average')\nax.plot(x, y2, color='lightblue', label='Standard Deviation')\n\n# Fill between the two lines\nax.fill_between(x, y1, y2, color='lightgrey')\n\n# Set the title and labels\nax.set_title('N-ELBO')\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny1 = [3.2, 3.1, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\ny2 = [2.9, 2.8, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7]\ny3 = [2.6, 2.5, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4]\ny4 = [2.3, 2.2, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1]\n\n# Plot the data\nax.plot(x, y1, 'm', label='Baseline')\nax.plot(x, y2, 'g', label='SoftMoE')\nax.plot(x, y3, 'p', label='Top1-MoE')\n\n# Set the title and labels\nax.set_title('IQM Human Normalized Score')\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nvocab_sizes = [256, 512, 1024, 2048, 8192, 16384]\nbpe_values = [0.4, 0.6, 0.8, 0.8, 0.6, 0.4]\nwordpunct_values = [0.6, 0.8, 0.8, 0.6, 0.4, 0.4]\nwhitespace_values = [0.8, 0.8, 0.6, 0.6, 0.4, 0.4]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(vocab_sizes, bpe_values, 'b-', label='BPE')\nplt.plot(vocab_sizes, wordpunct_values, 'o-', label='Wordpunct')\nplt.plot(vocab_sizes, whitespace_values, 'g-', label='Whitespaces')\n\n# Adding title and labels\nplt.title('Test set TPR | FPR = 10^-4')\nplt.xlabel('Vocabulary size')\nplt.ylabel('TPR')\n\n# Adding legend\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncompression_rate = [1, 12, 18, 30]\nword_error_rate_cnn = [26.0, 34.4, 28.6, 55.0]\nword_error_rate_cif = [24.7, 36.8, 29.8, 55.0]\nword_error_rate_star = [18.0, 30.2, 24.7, 55.0]\n\n# Plotting\nplt.figure(figsize=(6.0, 6.0))\nplt.plot(compression_rate, word_error_rate_cnn, color='pink', label='CNN')\nplt.plot(compression_rate, word_error_rate_cif, color='purple', label='CIF')\nplt.plot(compression_rate, word_error_rate_star, color='brown', label='STAR')\n\n# Adding labels and title\nplt.xlabel('Compression Rate (%)')\nplt.ylabel('Word Error Rate (%)')\nplt.title('Word Error Rate vs Compression Rate')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [90, 90, 90, 90, 90, 90, 90, 90]  # Placeholder values for PILOTE\ny2 = [85, 85, 85, 85, 85, 85, 85, 85]  # Placeholder values for Re-trained model\ny3 = [80, 80, 80, 80, 80, 80, 80, 80]  # Placeholder values for Pre-trained model accuracy\n\n# Plotting\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y1, 'r', marker='o', label='PILOTE')\nplt.plot(x, y2, 'b', marker='o', label='Re-trained model')\nplt.plot(x, y3, 'g', marker='o', label='Pre-trained model accuracy')\n\n# Adding horizontal line\nplt.axhline(y=75, color='g', linestyle='--')\n\n# Adding legend\nplt.legend()\n\n# Setting labels and title\nplt.xlabel('Number of exemplars in class \"Run\"')\nplt.ylabel('Avg. accuracy of five rounds')\nplt.title('Comparison of models')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Define the data\nx = range(21)\ny1 = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15]\ny2 = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15]\n\n# Plot the data\nax.plot(x, y1, color='blue', label='xLLM')\nax.plot(x, y2, color='red', label='Single-Pass LLM')\n\n# Set the limits of the axes\nax.set_xlim(0, 20)\nax.set_ylim(0, 1)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = ['All', 'MLP', 'GCN', 'NCN', 'NEOGNN-BUDDY', 'SEAL', 'Node2Vec']\ny1 = [80, 70, 60, 50, 40, 30, 20]\ny2 = [70, 60, 50, 40, 30, 20, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='ogbl-collab')\nax.plot(x, y2, label='ogbl-ppa')\n\n# Set the title and labels\nax.set_title('Hits @ 50')\nax.set_xlabel('Dataset')\nax.set_ylabel('Hits')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 4, 6, 8, 10, 12]\ny1 = [0.05, 0.05, 0.05, 0.05, 0.05, 0.05]\ny2 = [0.045, 0.045, 0.045, 0.045, 0.045, 0.045]\n\n# Plotting\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y1, 'b-')  # Blue line for outside-code-diff\nplt.plot(x, y2, 'r-')  # Red line for inside-code-diff\nplt.title('Android')\nplt.xlabel('Layer')\nplt.ylabel('Value')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [6, 7, 8, 9]\ny1 = [0.5, 0.4, 0.3, 0.2]\ny2 = [0.6, 0.5, 0.4, 0.3]\ny3 = [0.7, 0.6, 0.5, 0.4]\ny4 = [0.8, 0.7, 0.6, 0.5]\ny5 = [0.9, 0.8, 0.7, 0.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Direct (100 samples)')\nax.plot(x, y2, 'g-', label='RFFT (100 samples)')\nax.plot(x, y3, 'y-', label='Scratchpad (100 samples)')\nax.plot(x, y4, 'r-', label='Scratchpad (5000 samples)')\n\n# Set the limits of the x-axis\nax.set_xlim(6, 9)\n\n# Set the limits of the y-axis\nax.set_ylim(0.3, 1.0)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the tick labels for the y-axis\nax.set_yticks([225, 250, 275, 300, 325, 350, 375])\n\n# Draw horizontal lines at the specified y-values\nfor y in [375, 350, 325, 300, 275]:\n    ax.axhline(y=y, color='black', linestyle='-')\n\n# Plot the data points\nax.plot([0, 20, 40, 60, 80], [225, 250, 275, 300, 325], 'o', color='orange')\nax.plot([0, 20, 40, 60, 80], [225, 250, 275, 300, 325], '-', color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny2 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny3 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny4 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny5 = [0.55, 0.6, 0.65, 0.7, 0.75]\n\n# Plotting\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y1, 'y^', label='CNN')\nplt.plot(x, y2, 'r^', label='CNN+HMM')\nplt.plot(x, y3, 'b^', label='RF')\nplt.plot(x, y4, 'c^', label='RF+HMM')\nplt.plot(x, y5, 'm^', label='RF+HMM')\n\n# Adding labels and title\nplt.xlabel('No. of Users in Development Set')\nplt.ylabel('F1')\nplt.title('Performance Metrics')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='LibriCSS (test)')\nax.plot(x, y2, 'r-', label='AMI (dev)')\n\n# Set the title and labels\nax.set_title('WER (%) vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10**-7, 10**-6, 10**-5, 10**-4]\ny1 = [1, 1, 1, 1]\ny2 = [1, 1, 1, 1]\ny3 = [1, 1, 1, 1]\ny4 = [1, 1, 1, 1]\ny5 = [1, 1, 1, 1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='M-LVQ-4x8-10')\nax.plot(x, y2, label='M-LVQ-4x8-100')\nax.plot(x, y3, label='M-LVQ-4x8-256')\nax.plot(x, y4, label='M-LVQ-4x8')\nax.plot(x, y5, label='empirical relat. (B2=8.0)')\n\n# Set the title and labels\nax.set_title('Quantization error')\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Define the data\nratio_r = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nperformance_pna_ours = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6]\nperformance_gin_ours = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6]\n\n# Plot the data\nax.plot(ratio_r, performance_pna_ours, label='PNA + ours', color='purple')\nax.plot(ratio_r, performance_gin_ours, label='GIN + ours', color='orange')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('SPMotif-0.5')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 30)\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78.0)\n\n# Set the x-axis tick labels\nax.set_xticks([6, 9, 12, 15, 18, 21, 24, 27, 30])\n\n# Set the y-axis tick labels\nax.set_yticks([74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0])\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the title of the plot\nax.set_title('Model Accuracy vs Ensemble Size')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nepochs = [3, 10, 30]\ngpt_neo = [0.8, 0.7, 0.6]\nfive = [0.7, 0.6, 0.5]\nthree = [0.6, 0.5, 0.4]\nseven = [0.5, 0.4, 0.3]\nten = [0.4, 0.3, 0.2]\nthirty = [0.3, 0.2, 0.1]\n\n# Plotting\nplt.figure(figsize=(6.0, 3.0))\nplt.plot(epochs, gpt_neo, label='GPT-Neo', color='red')\nplt.plot(epochs, five, label='5', color='yellow')\nplt.plot(epochs, three, label='3', color='green')\nplt.plot(epochs, seven, label='7', color='black')\nplt.plot(epochs, ten, label='10', color='blue')\nplt.plot(epochs, thirty, label='30', color='purple')\n\n# Adding labels and title\nplt.xlabel('# Epochs')\nplt.ylabel('Magnitude')\nplt.title('Learning Curve')\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [96, 192, 336, 720]\ny1 = [0.14, 0.16, 0.18, 0.20]\ny2 = [0.14, 0.16, 0.18, 0.20]\ny3 = [0.14, 0.16, 0.18, 0.20]\ny4 = [0.14, 0.16, 0.18, 0.20]\n\n# Plotting\nplt.figure(figsize=(15.0, 4.0))\nplt.plot(x, y1, 'b', label='pred_length=96')\nplt.plot(x, y2, 'o', label='pred_length=192')\nplt.plot(x, y3, 'g', label='pred_length=336')\nplt.plot(x, y4, 'r', label='pred_length=720')\n\n# Adding labels and title\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Traffic')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [224, 128, 64, 32]\ny1 = [70, 60, 50, 40]\ny2 = [70, 60, 50, 40]\ny3 = [70, 60, 50, 40]\ny4 = [70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Plot the data\nax.plot(x, y1, label='ImageNet-1k', color='orange')\nax.plot(x, y2, label='ImageNet-C/P (Fog)', color='orange')\nax.plot(x, y3, label='ImageNet-1k', color='blue')\nax.plot(x, y4, label='ImageNet-C/P (Fog)', color='blue')\n\n# Set the title and labels\nax.set_title('Serial (n=8, m=1)')\nax.set_xlabel('Time')\nax.set_ylabel('Top-1 Acc.')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0]\ny1 = [90, 80, 70, 60, 50, 40, 30, 20, 10]\ny2 = [80, 70, 60, 50, 40, 30, 20, 10, 0]\ny3 = [70, 60, 50, 40, 30, 20, 10, 0, 0]\ny4 = [60, 50, 40, 30, 20, 10, 0, 0, 0]\ny5 = [50, 40, 30, 20, 10, 0, 0, 0, 0]\ny6 = [40, 30, 20, 10, 0, 0, 0, 0, 0]\ny7 = [30, 20, 10, 0, 0, 0, 0, 0, 0]\ny8 = [20, 10, 0, 0, 0, 0, 0, 0, 0]\ny9 = [10, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='JPG+LDPC')\nax.plot(x, y2, 'or-', label='DEEPJSCC w/o OFDM')\nax.plot(x, y3, 'g^-', label='DEEPJSCC w/ OFDM')\nax.plot(x, y4, 'r--', label='OURS')\n\n# Set the title and labels\nax.set_title('Classification Accuracy (%)')\nax.set_xlabel('SNR')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the first line\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='purple', label='Line 1 (Sinusoidal)')\n\n# Plot the second line\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='blue', label='Line 2 (Quadratic)')\n\n# Set the title of the plot\nax.set_title('Performance vs. Gradient Steps')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Set the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Line 1\nx_line1 = [0, 50, 100, 150, 200]\ny_line1 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 2\nx_line2 = [0, 50, 100, 150, 200]\ny_line2 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 3\nx_line3 = [0, 50, 100, 150, 200]\ny_line3 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the lines\nax.plot(x_line1, y_line1, 'o-', color='orange', label='Line 1')\nax.plot(x_line2, y_line2, 's-', color='blue', label='Line 2')\nax.plot(x_line3, y_line3, '^-', color='green', label='Line 3')\n\n# Set the title and labels\nax.set_title('Polynomial Trend (from Line 2)')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['All', 'MLP', 'GCN', 'NCN', 'NeoGNN-BUDDY', 'Node2Vec']\ny1 = [75, 70, 65, 60, 55, 75]\ny2 = [80, 75, 70, 65, 60, 70]\ny3 = [78, 73, 68, 63, 58, 78]\ny4 = [76, 71, 66, 61, 56, 76]\ny5 = [77, 72, 67, 62, 57, 77]\ny6 = [79, 74, 69, 64, 59, 79]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='ogbl-collab 2022')\nax.plot(x, y2, label='ogbl-collab 2023')\n\n# Set the title and labels\nax.set_title('ogbl-collab Results')\nax.set_xlabel('Nodes')\nax.set_ylabel('Hits')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = [10, 20, 30, 40, 50, 60]\ny1 = [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10]\ny2 = [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10]\ny3 = [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10]\ny4 = [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Standard')\nax.plot(x, y2, 'r-', label='Constrained')\nax.plot(x, y3, 'g-', label='Experimental')\nax.plot(x, y4, 'm-', label='Hypothetical')\n\n# Set the title and labels\nax.set_title('Plot of Data')\nax.set_xlabel('N')\nax.set_ylabel('Precision')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data for plotting\nx = [10**i for i in range(5)]\ny1 = [10**i for i in range(5)]\ny2 = [10**i for i in range(5)]\ny3 = [10**i for i in range(5)]\ny4 = [10**i for i in range(5)]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, label='Standard')\nax.plot(x, y2, label='Constrained')\nax.plot(x, y3, label='Innovative')\nax.plot(x, y4, label='Experimental')\n\n# Set the title and labels\nax.set_title('Graph Variation 1')\nax.set_xlabel('N')\nax.set_ylabel('Peak Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 10.0))\n\n# Plot the first subplot\naxs[0].plot(np.arange(0, 26), np.sin(np.linspace(0, 2*np.pi, 26)), 'b-')\naxs[0].set_title('Daytime Activity Monitoring')\naxs[0].set_xlabel('Time (Hours)')\naxs[0].set_ylabel('Activity Level')\n\n# Plot the second subplot\naxs[1].plot(np.arange(0, 26), np.cos(np.linspace(0, 2*np.pi, 26)), 'r-')\naxs[1].set_title('Nighttime Activity Monitoring')\naxs[1].set_xlabel('Time (Hours)')\naxs[1].set_ylabel('Activity Level')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\ntime = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nstandard_performance = [0.4, 0.6, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6, 0.8, 0.6, 0.4, 0.2, 0.4]\ninnovative_performance = [0.6, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6]\n\n# Plot the data\nax.plot(time, standard_performance, color='blue', label='Standard Performance')\nax.plot(time, innovative_performance, color='red', label='Innovative Performance')\n\n# Set the title and labels\nax.set_title('Comparative Performance Analysis Over Time')\nax.set_xlabel('Time (Months)')\nax.set_ylabel('Performance Index')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nmonthly_sales = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100]\naverage_temperature = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(months, monthly_sales, 'b-', label='Monthly Sales')\nplt.plot(months, average_temperature, 'r-', label='Average Temperature')\n\n# Marking specific points\nplt.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='red', marker='o')\nplt.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], color='red', marker='o')\n\n# Adding labels and title\nplt.xlabel('Month')\nplt.ylabel('Sales/Celsius')\nplt.title('Sales and Temperature Correlation Over a Year')\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each graph\ntime = [0, 2, 4, 6, 8, 10]\ngrowth_values = [1.3, 0.8, 0.3, 0.3, 0.3, 0.9]\ndecay_values = [1.3, 0.8, 0.3, 0.3, 0.3, 0.9]\noscillation_values = [1.2, 1.0, 0.8, 0.6, 0.4, 0.2]\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 1, figsize=(6.0, 9.0))\n\n# Plot the first graph\naxes[0].plot(time, growth_values, 'g-')\naxes[0].set_title('Exponential Growth Over Time')\n\n# Plot the second graph\naxes[1].plot(time, decay_values, 'r-')\naxes[1].set_title('Exponential Decay Over Time')\n\n# Plot the third graph\naxes[2].plot(time, oscillation_values, 'b-')\naxes[2].set_title('Oscillatory Behavior Over Time')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.5, 0.4, 0.3, 0.2, 0.1]\ny2 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.6, 0.5, 0.4, 0.3, 0.2]\ny3 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='5-shot direct', color='blue')\nax.plot(x, y2, label='5-shot scratchpad', color='orange')\nax.plot(x, y3, label='5-shot rule-following', color='green')\n\n# Set the title and labels\nax.set_title('5-shot Accuracy by Digit Length')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [2, 4, 6, 8, 10, 12, 14, 16, 18]\ny1 = [0.3, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Data for the second graph\nx2 = [2.5, 5, 7.5, 10, 12.5, 15, 17.5, 20]\ny2 = [100, 100, 100, 100, 100, 100, 100, 100]\n\n# Data for the third graph\nx3 = [0, 2.5, 5, 7.5, 10, 12.5, 15, 17.5, 20]\ny3 = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]\n\n# Create a figure and axis\nfig, axs = plt.subplots(3, 1, figsize=(5.0, 10.0))\n\n# Plot the first graph\naxs[0].plot(x1, y1, 'p-', color='purple')\naxs[0].set_title('Smoothed Representation')\n\n# Plot the second graph\naxs[1].plot(x2, y2, 'o-', color='orange')\naxs[1].set_title('First Difference of Data')\n\n# Plot the third graph\naxs[2].plot(x3, y3, 's-', color='green')\naxs[2].set_title('Cumulative Sum Over Time')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with a specified size\nfig, axs = plt.subplots(4, 1, figsize=(6.0, 12.0))\n\n# Time values\ntime_values = np.arange(0, 11)\n\n# Sin Wave\nsin_wave = np.sin(time_values)\naxs[0].plot(time_values, sin_wave, color='pink')\naxs[0].set_title('Sin Wave')\n\n# Cos Wave\ncos_wave = np.cos(time_values)\naxs[1].plot(time_values, cos_wave, color='green')\naxs[1].set_title('Cos Wave')\n\n# Exp Decay\nexp_decay = np.exp(-time_values / 5)\naxs[2].plot(time_values, exp_decay, color='blue')\naxs[2].set_title('Exp Decay')\n\n# Log Growth\nlog_growth = np.log(time_values + 1)\naxs[3].plot(time_values, log_growth, color='red')\naxs[3].set_title('Log Growth')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.1, 0.2, 0.3, 0.4]\ny_positive = [82, 82, 82, 82]\ny_negative = [79, 79, 79, 79]\ny_contrastive = [84, 84, 84, 84]\ny_fuzzy = [86, 86, 86, 86]\n\n# Create a figure and axis\nfig, axs = plt.subplots(2, 2, figsize=(9, 6))\n\n# Plot the data\naxs[0, 0].plot(x, y_positive, 'b-')\naxs[0, 0].set_title('Positive bound')\n\naxs[0, 1].plot(x, y_negative, 'r-')\naxs[0, 1].set_title('Negative bound')\n\naxs[1, 0].plot(x, y_contrastive, 'g-')\naxs[1, 0].set_title('Contrastive loss weight')\n\naxs[1, 1].plot(x, y_fuzzy, 'm-')\naxs[1, 1].set_title('Fuzzy coefficient')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [82, 82, 82, 82, 82, 82, 82, 82, 82, 82]\ny2 = [85, 85, 85, 85, 85, 85, 85, 85, 85, 85]\ny3 = [75, 75, 75, 75, 75, 75, 75, 75, 75, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r', label='Positive Bound')\nax.plot(x, y2, 'g', label='Negative Bound')\nax.plot(x, y3, 'b', label='Contrastive Loss Weight')\n\n# Set the title and labels\nax.set_title('Positive Bound')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain', 'Snow']\nrelaxation_levels = [\n    [1.3, 1.2, 1.1, 1.0],  # Dry\n    [1.3, 1.2, 1.1, 1.0],  # Rain\n    [1.3, 1.2, 1.1, 1.0]   # Snow\n]\n\n# Create subplots\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Plot each weather condition\nfor i, weather in enumerate(weather_conditions):\n    for j, style in enumerate(driving_styles):\n        axs[i].plot(relaxation_levels[i], label=style)\n    axs[i].set_title(weather)\n    axs[i].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nn_aug = [0, 0.125, 0.25, 0.5, 1, 2, 4, 8]\ncontent = [8, 7, 6, 5, 4, 3, 2, 1]\norganization = [6, 5, 4, 3, 2, 1, 0, -1]\nlanguage = [4, 3, 2, 1, 0, -1, -2, -3]\n\n# Plotting\nplt.figure(figsize=(8.0, 3.0))\nplt.plot(n_aug, content, 'b-', label='Content')\nplt.plot(n_aug, organization, 'r-', label='Organization')\nplt.plot(n_aug, language, 'g-', label='Language')\n\n# Adding markers\nfor i in range(len(n_aug)):\n    plt.scatter(n_aug[i], content[i], color='blue', marker='^')\n    plt.scatter(n_aug[i], organization[i], color='red', marker='^')\n    plt.scatter(n_aug[i], language[i], color='green', marker='^')\n\n# Setting labels and title\nplt.xlabel('n_aug')\nplt.ylabel('Performance Gain (%)')\nplt.title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Displaying legend\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 20, 40, 60, 80]\ny1 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny2 = [0.70, 0.70, 0.70, 0.70, 0.70]\ny3 = [0.65, 0.65, 0.65, 0.65, 0.65]\ny4 = [0.60, 0.60, 0.60, 0.60, 0.60]\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plotting the first subplot\naxs[0].plot(x, y1, 'r-', label='COCO (10k)')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Decomposition IO Norm')\naxs[0].set_ylabel('Accuracy')\naxs[0].legend()\n\n# Plotting the second subplot\naxs[1].plot(x, y2, 'b-', label='LAION (10k)')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Decomposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].legend()\n\n# Plotting the third subplot\naxs[2].plot(x, y3, 'g-', label='COCO (5k)')\naxs[2].plot(x, y4, 'y-', label='LAION (5k)')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Decomposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2]\ny1 = [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04]\ny2 = [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04]\ny3 = [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 9.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Error Rate vs. Learning Rate (Batch Size=64)')\nax.plot(x, y2, 'r-', label='Error Rate vs. Learning Rate (Batch Size=128)')\nax.plot(x, y3, 'g-', label='Accuracy vs. Dropout (Batch Size=128)')\n\n# Set the title and labels\nax.set_title('Error Rate vs. Learning Rate')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Metric')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot([0, 25, 50, 100, 150, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1], 'b-')\nax.plot([0, 25, 50, 100, 150, 200], [0.7, 0.6, 0.5, 0.4, 0.3, 0.2], 'r-')\n\n# Set the title and labels\nax.set_title('Metric 1')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], color='blue', label='Base Model')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], color='blue', label='Our Model')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 6*10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**-13, 10**-4)\n\n# Draw horizontal lines at specified y-values\nfor y in [10**-13, 10**-10, 10**-7, 10**-4]:\n    ax.axhline(y=y, color='black', linestyle='-')\n\n# Draw vertical lines at specified x-values\nfor x in [2*10**1, 3*10**1, 4*10**1, 6*10**1]:\n    ax.axvline(x=x, color='black', linestyle='-')\n\n# Plot the data\nax.plot([10**1, 2*10**1, 3*10**1, 4*10**1, 6*10**1], [10**-13, 10**-10, 10**-7, 10**-4, 10**-1], label='Standard')\nax.plot([10**1, 2*10**1, 3*10**1, 4*10**1, 6*10**1], [10**-13, 10**-10, 10**-7, 10**-4, 10**-1], label='Constrained', color='orange')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the tick labels for the y-axis\nax.set_yticks([-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5])\n\n# Set the grid lines\nax.grid(True)\n\n# Plot the data\nax.plot([0, 5, 10, 15, 20, 25], [0.5, 0.7, 0.9, 1.1, 1.3, 1.5], 'b-')\nax.plot([0, 5, 10, 15, 20, 25], [0.4, 0.6, 0.8, 1.0, 1.2, 1.4], 'r-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.3, 0.7, 0.9, 0.8, 0.6, 0.4]\ny2 = [0.5, 0.8, 0.9, 0.7, 0.6, 0.5]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\n\n# Set the title and labels\nax.set_title('Performance and Efficiency Analysis')\nax.set_xlabel('Weeks')\nax.set_ylabel('Values')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = [0, 5, 10, 15, 20, 25, 30]\ny1 = [0.8, 0.9, 0.7, 0.6, 0.4, 0.2, 0.1]\ny2 = [0.9, 0.8, 0.6, 0.5, 0.3, 0.1, 0.05]\ny3 = [0.7, 0.6, 0.4, 0.3, 0.1, 0.05, 0.02]\ny4 = [0.8, 0.7, 0.5, 0.4, 0.2, 0.1, 0.05]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\nax.plot(x, y3, 'g-', label='Growth')\n\n# Set the title and labels\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Efficiency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define the data series\ndata_series_1 = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\ndata_series_2_with_gradient = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0]\ndata_series_3 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0]\n\n# Plot the data series\nax.plot(data_series_1, label='Data Series 1')\nax.plot(data_series_2_with_gradient, label='Data Series 2 with Gradient')\nax.plot(data_series_3, label='Data Series 3')\n\n# Set the title and labels\nax.set_title('Dynamic Data Presentation Across Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Normalized Value')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b^', label='BaCE')\nax.plot(x, y2, 'bv', label='LWF')\nax.plot(x, y3, 'g^', label='EWC')\nax.plot(x, y4, 'gv', label='SEQ')\n\n# Set the title and labels\nax.set_title('Average Accuracy (%)')\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1_bace = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ny1_ewc = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\n\n# Data for the second graph\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2_lwf = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny2_se = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data\nax.plot(x1, y1_bace, 'b^', label='BaCE')\nax.plot(x1, y1_ewc, 'c^', label='EWC')\nax.plot(x2, y2_lwf, 'r^', label='LWF')\nax.plot(x2, y2_se, 'm^', label='SE')\n\n# Set the labels and title\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Performance Comparison')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Define the data\nx = [0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000]\ny1 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\ny2 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\n\n# Plot the data\nax.plot(x, y1, label='model1 Series 1')\nax.plot(x, y2, label='model1 Series 2')\n\n# Set the title and labels\nax.set_title('model1 Performance')\nax.set_xlabel('Iterations')\nax.set_ylabel('Success Rate')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [22, 24, 26, 28, 26, 24, 22]\ny2 = [20, 22, 24, 26, 24, 22, 20]\n\n# Plot the data\nax.plot(x, y1, label='IHM', marker='^')\nax.plot(x, y2, label='SDM', marker='^')\n\n# Set the title and labels\nax.set_title('Wavelength vs. AMI WER (%)')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Wavelength (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [22, 24, 26, 28, 29, 30, 31]  # WER\ny2 = [20, 22, 24, 26, 27, 28, 29]  # AMI WER\ny3 = [21, 23, 25, 27, 28, 29, 30]  # LibriCSS (test)\ny4 = [22, 24, 26, 28, 29, 30, 31]  # AMI (dev)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, label='WER (%)', color='green')\nax.plot(x, y2, label='AMI WER (%)', color='orange')\nax.plot(x, y3, label='LibriCSS (test)', color='blue')\nax.plot(x, y4, label='AMI (dev)', color='red')\n\n# Add markers at specific points\nmarkers = [2, 3, 4, 5, 6, 7, 8]\nfor marker in markers:\n    ax.plot(marker, y1[markers.index(marker)], 'r^')\n    ax.plot(marker, y2[markers.index(marker)], 'r^')\n    ax.plot(marker, y3[markers.index(marker)], 'r^')\n    ax.plot(marker, y4[markers.index(marker)], 'r^')\n\n# Set the title and labels\nax.set_title('Trend Analysis')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Wavelength (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\ny2 = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\ny3 = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\ny4 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\ny5 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ny6 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\ny7 = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny8 = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Plotting\nplt.figure(figsize=(8.0, 5.0))\nplt.plot(x, y1, 'o-', label='LibriCSS WER')\nplt.plot(x, y2, 'b-', label='AMI WER')\nplt.plot(x, y3, 'r-', label='Threshold')\nplt.axhline(y=0.7, color='r', linestyle='-')\nplt.xlabel('Number of Microphones')\nplt.ylabel('WER (%)')\nplt.title('WER vs Number of Microphones')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0.1, 0.2, 0.3, 0.4]\ny1 = [78, 76, 74, 72]\ny2 = [78, 76, 74, 72]\ny3 = [78, 76, 74, 72]\ny4 = [78, 76, 74, 72]\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 4, figsize=(12, 4))\n\n# Plot each graph\naxs[0].plot(x, y1, 'b-')\naxs[1].plot(x, y2, 'b-')\naxs[2].plot(x, y3, 'b-')\naxs[3].plot(x, y4, 'b-')\n\n# Set titles\naxs[0].set_title('Positive bound.')\naxs[1].set_title('Negative bound.')\naxs[2].set_title('Contrastive loss weight.')\naxs[3].set_title('Fuzzy coefficient.')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ny2 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Plotting\nfig, ax = plt.subplots(1, 2, figsize=(12.0, 5.0))\nax[0].plot(x, y1, 'y-', label='LibriCSS WER')\nax[0].plot(x, y2, 'r-', label='Threshold')\nax[0].set_xlabel('Number of Microphones')\nax[0].set_ylabel('WER (%)')\nax[0].legend()\n\nax[1].plot(x, y1, 'g-', label='AMi WER')\nax[1].plot(x, y2, 'r-', label='Threshold')\nax[1].set_xlabel('Number of Microphones')\nax[1].set_ylabel('WER (%)')\nax[1].legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Define the data\nratio_r = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nperformance_pna = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\nperformance_gin = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n# Plot the data\nax.plot(ratio_r, performance_pna, 'b^', label='PNA')\nax.plot(ratio_r, performance_gin, 'g^', label='GIN')\n\n# Set the title and labels\nax.set_title('SPMotif-0.9')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgreen')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(-80, 0)\n\n# Set the tick marks on the x-axis\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the tick marks on the y-axis\nax.set_yticks([-80, -60, -40, -20, 0])\n\n# Draw horizontal lines at each tick mark on the y-axis\nfor y in ax.get_yticks():\n    ax.axhline(y=y, color='gray', linestyle='--')\n\n# Draw vertical lines at each tick mark on the x-axis\nfor x in ax.get_xticks():\n    ax.axvline(x=x, color='gray', linestyle='--')\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Trends')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'p-', color='magenta')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'p-', color='yellow')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny_pna = [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\ny_gin = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1]\n\n# Plot the data points\nax.plot(x, y_pna, 'b-')\nax.plot(x, y_gin, 'r-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [8.0, 7.0, 6.0, 5.0, 4.0]\ny2 = [8.0, 7.0, 6.0, 5.0, 4.0]\n\n# Plot the data points\nax.plot(x, y1, 'bo-', label='PNA + ours')\nax.plot(x, y2, 'ro-', label='GIN + ours')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\ny1 = [80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104]\ny2 = [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n\n# Plot the data\nax.plot(x, y1, color='blue')\nax.plot(x, y2, color='red')\n\n# Set the title and labels\nax.set_title('Comparison of Model Accuracies')\nax.set_xlabel('Ensemble Size')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [90, 90, 90, 90, 90, 90, 90, 90, 90, 90]\ny2 = [85, 85, 85, 85, 85, 85, 85, 85, 85, 85]\ny3 = [80, 80, 80, 80, 80, 80, 80, 80, 80, 80]\n\n# Data for the second graph\nz1 = [75, 75, 75, 75, 75, 75, 75, 75, 75, 75]\nz2 = [70, 70, 70, 70, 70, 70, 70, 70, 70, 70]\nz3 = [65, 65, 65, 65, 65, 65, 65, 65, 65, 65]\n\n# Create a figure and axis\nfig, axs = plt.subplots(2, 1, figsize=(8.0, 12.0))\n\n# Plot the first graph\naxs[0].plot(x, y1, 'r^', label='Config A - Model X')\naxs[0].plot(x, y2, 'g^', label='Config B - Model X')\naxs[0].plot(x, y3, 'b^', label='Config C - Model X')\naxs[0].set_title('Performance of Model X')\naxs[0].set_xlabel('Iteration')\naxs[0].set_ylabel('Score')\naxs[0].legend()\n\n# Plot the second graph\naxs[1].plot(x, z1, 'r^', label='Config A - Model X')\naxs[1].plot(x, z2, 'g^', label='Config B - Model X')\naxs[1].plot(x, z3, 'b^', label='Config C - Model X')\naxs[1].set_title('Performance of Model Z')\naxs[1].set_xlabel('Iteration')\naxs[1].set_ylabel('Score')\naxs[1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Config A - Llama\nconfig_a_llama_performance = [75, 76, 77, 78, 79, 80, 81, 82, 83, 84]\nconfig_a_llama_score = [85, 86, 87, 88, 89, 90, 91, 92, 93, 94]\n\n# Data for Config B - Llama\nconfig_b_llama_performance = [75, 76, 77, 78, 79, 80, 81, 82, 83, 84]\nconfig_b_llama_score = [85, 86, 87, 88, 89, 90, 91, 92, 93, 94]\n\n# Data for Config C - Llama\nconfig_c_llama_performance = [75, 76, 77, 78, 79, 80, 81, 82, 83, 84]\nconfig_c_llama_score = [85, 86, 87, 88, 89, 90, 91, 92, 93, 94]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Plot the data\nax.plot(config_a_llama_performance, config_a_llama_score, 'r-p', label='Config A - Llama')\nax.plot(config_b_llama_performance, config_b_llama_score, 'g-s', label='Config B - Llama')\nax.plot(config_c_llama_performance, config_c_llama_score, 'b-o', label='Config C - Llama')\n\n# Set the title and labels\nax.set_title('Performance of Llama')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for each brand\nbrands = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E', 'Brand F']\nsales_growth = [\n    [1.2, 1.4, 1.6, 1.8, 2.0],  # Brand A\n    [1.3, 1.5, 1.7, 1.9, 2.1],  # Brand B\n    [1.4, 1.6, 1.8, 2.0, 2.2],  # Brand C\n    [1.5, 1.7, 1.9, 2.1, 2.3],  # Brand D\n    [1.6, 1.8, 2.0, 2.2, 2.4],  # Brand E\n    [1.7, 1.9, 2.1, 2.3, 2.5]   # Brand F\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot each brand's sales growth\nfor i, brand in enumerate(brands):\n    ax.plot(sales_growth[i], label=brand)\n\n# Set the title and labels\nax.set_title('Sales Growth by Quarter')\nax.set_xlabel('Quarter')\nax.set_ylabel('Sales Growth')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 4.0))\n\n# Define the data\ntime_values = [100, 300, 500, 700]\nmetric_values_1 = [0.5, 0.6, 0.7, 0.8]\nmetric_values_2 = [0.4, 0.5, 0.6, 0.7]\n\n# Plot the data\nax.plot(time_values, metric_values_1, 'b-', label='ECL Run 1')\nax.plot(time_values, metric_values_2, 'r-', label='ECL Run 2')\n\n# Set the title and labels\nax.set_title('Traffic Performance')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Metric Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain']\ntemperatures = [\n    [14, 12, 10, 8, 6],\n    [13, 11, 9, 7, 5]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i, condition in enumerate(weather_conditions):\n    ax.plot(driving_styles, temperatures[i], marker='o', color=f'C{i}', label=condition)\n\n# Set the title and labels\nax.set_title('Relaxation Level')\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first subplot\nx = [1, 2, 3, 4, 5]\ny1 = [20, 25, 30, 35, 40]\ny2 = [25, 30, 35, 40, 45]\n\n# Data for the second subplot\ny3 = [30, 35, 40, 45, 50]\ny4 = [35, 40, 45, 50, 55]\n\n# Data for the third subplot\ny5 = [40, 45, 50, 55, 60]\ny6 = [45, 50, 55, 60, 65]\n\n# Data for the fourth subplot\ny7 = [50, 55, 60, 65, 70]\ny8 = [55, 60, 65, 70, 75]\n\n# Data for the fifth subplot\ny9 = [60, 65, 70, 75, 80]\ny10 = [65, 70, 75, 80, 85]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(9.0, 6.0))\n\n# Plot the data on each subplot\naxs[0, 0].plot(x, y1, label='Run 1')\naxs[0, 0].plot(x, y2, label='Run 2')\naxs[0, 0].set_title('Category A Growth')\naxs[0, 0].legend()\n\naxs[0, 1].plot(x, y3, label='Run 1')\naxs[0, 1].plot(x, y4, label='Run 2')\naxs[0, 1].set_title('Category B Growth')\naxs[0, 1].legend()\n\naxs[0, 2].plot(x, y5, label='Run 1')\naxs[0, 2].plot(x, y6, label='Run 2')\naxs[0, 2].set_title('Category C Growth')\naxs[0, 2].legend()\n\naxs[1, 0].plot(x, y7, label='Run 1')\naxs[1, 0].plot(x, y8, label='Run 2')\naxs[1, 0].set_title('Category D Growth')\naxs[1, 0].legend()\n\naxs[1, 1].plot(x, y9, label='Run 1')\naxs[1, 1].plot(x, y10, label='Run 2')\naxs[1, 1].set_title('Category E Growth')\naxs[1, 1].legend()\n\naxs[1, 2].plot(x, y9, label='Run 1')\naxs[1, 2].plot(x, y10, label='Run 2')\naxs[1, 2].set_title('Category F Growth')\naxs[1, 2].legend()\n\n# Adjust the layout of the subplots\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [4, 6, 10, 30]\ny_standard = [1.08, 1.04, 1.06, 1.06]\ny_constrained = [1.08, 1.04, 1.06, 1.06]\n\n# Plotting\nplt.figure(figsize=(9.0, 6.0))\nplt.plot(x, y_standard, 'bo-', label='Standard')\nplt.plot(x, y_constrained, 'ro-', label='Constrained')\n\n# Adding labels and title\nplt.xlabel('N')\nplt.ylabel('Value')\nplt.title('Comparison of Standard and Constrained Models')\nplt.legend()\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data for the bar chart\nregions = ['South', 'North', 'West', 'East']\npercentages = [25, 40, 10, 15]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(regions, percentages, color=['yellow', 'cyan', 'orange', 'blue'])\n\n# Set labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage')\nax.set_title('Literacy Rate by Region')\n\n# Define data for the pie chart\nregions_pie = ['North', 'South', 'East', 'West', 'Central']\npercentages_pie = [35, 25, 20, 15, 5]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0), subplot_kw={'aspect': 'equal'})\nax.pie(percentages_pie, labels=regions_pie, colors=['cyan', 'green', 'red', 'purple', 'orange'], autopct='%1.1f%%')\n\n# Set title\nax.set_title('Literacy Rate by Region')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Define the data\ndata = [\n    [1.5, 0.5, 0.3, 0.7, 0.9],\n    [0.8, 0.4, 0.6, 0.2, 0.1],\n    [0.6, 0.3, 0.5, 0.7, 0.9],\n    [0.4, 0.2, 0.8, 0.6, 0.1],\n    [0.2, 0.8, 0.4, 0.6, 0.9]\n]\n\n# Create a heatmap\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive'])\nax.set_yticklabels(['sensitive attribute', 'sensitive attribute'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nengstrom = [44.15, 44.05, 41.55, 40.95, 36.70]\nzhang = [44.15, 44.05, 41.55, 40.95, 36.70]\nrice = [44.15, 44.05, 41.55, 40.95, 36.70]\nrare = [44.15, 44.05, 41.55, 40.95, 36.70]\nhendricks = [44.15, 44.05, 41.55, 40.95, 36.70]\naddep = [44.15, 44.05, 41.55, 40.95, 36.70]\ncarmon = [44.15, 44.05, 41.55, 40.95, 36.70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendricks (M5)'], engstrom, color='green')\nax.bar(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendricks (M5)'], zhang, bottom=engstrom, color='blue')\nax.bar(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendricks (M5)'], rice, bottom=[x+y for x,y in zip(engstrom, zhang)], color='yellow')\nax.bar(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendricks (M5)'], rare, bottom=[x+y+z for x,y,z in zip(engstrom, zhang, rice)], color='red')\nax.bar(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendricks (M5)'], hendricks, bottom=[x+y+z+r for x,y,z,r in zip(engstrom, zhang, rice, rare)], color='purple')\nax.bar(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendricks (M5)'], addep, bottom=[x+y+z+r+h for x,y,z,r,h in zip(engstrom, zhang, rice, rare, hendricks)], color='orange')\nax.bar(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendricks (M5)'], carmon, bottom=[x+y+z+r+h+a for x,y,z,r,h,a in zip(engstrom, zhang, rice, rare, hendricks, addep)], color='brown')\n\n# Set the title and labels\nax.set_title('Robust Error (%)')\nax.set_xlabel('Models')\nax.set_ylabel('Error (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['VGG16', 'Resnet101']\nangles = [0, 90, 180]\nvgg16_values = [0.551, 0.538, 0.043, 0.0195, 0.043, 0.0195]\nresnet101_values = [0.744, 0.762, 0.394, 0.477, 0.394, 0.477]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(angles, vgg16_values, label='VGG16')\nax.plot(angles, resnet101_values, label='Resnet101')\n\n# Set the title and labels\nax.set_title('Rotation Invariance')\nax.set_xlabel('Rotation angle (\u00b0)')\nax.set_ylabel('Value')\n\n# Set the x-axis ticks\nax.set_xticks(angles)\nax.set_xticklabels(['0', '90', '180'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Heatmap')\n\n# Create a heatmap\nheatmap = ax.imshow([[1, 2], [3, 4]], cmap='hot', interpolation='nearest')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(heatmap)\n\n# Set the x-axis labels\nax.set_xticks([0, 1])\nax.set_yticks([0, 1])\nax.set_xticklabels(['X1', 'X2'])\nax.set_yticklabels(['Y1', 'Y2'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the line graph\nx = np.linspace(0, 50, 100)\ny = -8 + 0.1 * x\nax.plot(x, y, 'b-')\n\n# Add a shaded region\nax.fill_between(x, -8, -9, color='gray', alpha=0.5)\n\n# Set the title and labels\nax.set_title('Token rarity')\nax.set_xlabel('GPT2Tokenizer rank')\nax.set_ylabel('Loss')\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\nax2.boxplot([np.random.normal(7, 1, 100), np.random.normal(7, 1, 100), np.random.normal(7, 1, 100), np.random.normal(7, 1, 100), np.random.normal(7, 1, 100)], vert=False)\nax2.set_title('Length = 20')\nax2.set_xlabel('Loss')\nax2.set_ylabel('# of documents')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\n\n# Create a bar chart\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Correlation of Sentiment, Toxicity, and News')\nplt.xlabel('Categories')\nplt.ylabel('Correlation')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['c1355', 'c1908', 'c2670', 'c3540']\nvalues = [40, 50, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bar chart\nax.bar(categories, values, color='lightblue')\n\n# Set the title and labels\nax.set_title('Number of Successful Advert Circuits')\nax.set_xlabel('Category')\nax.set_ylabel('# Successful Advert Circuits')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nstudy_levels = [0, 1, 2, 3, 4, 5]\nknowledge_increase = [60, 70, 80, 90, 80, 70]\n\n# Data for the second graph\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humans', 'Finance']\npublications = [250, 200, 300, 150, 100, 120, 220]\n\n# Create the first graph\nfig, ax1 = plt.subplots(figsize=(10.0, 4.0))\nax1.plot(study_levels, knowledge_increase, 'b-')\nax1.set_xlabel('Study Level')\nax1.set_ylabel('Cumulative Knowledge Increase (%)', color='b')\nax1.tick_params(axis='y', labelcolor='b')\n\n# Create the second graph\nax2 = ax1.twinx()\nax2.bar(domains, publications, color='g')\nax2.set_ylabel('Number of Publications by Domain', color='g')\nax2.tick_params(axis='y', labelcolor='g')\n\n# Set the title\nplt.title('Knowledge Increase by Subject Area and Number of Publications by Domain')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first graph\nx = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\ny1 = [40, 40, 40, 40, 40, 40, 40, 40]\ny2 = [60, 60, 60, 60, 60, 60, 60, 60]\ny3 = [80, 80, 80, 80, 80, 80, 80, 80]\n\n# Create the first graph\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\nax1.plot(x, y1, 'b-', label='Hardware')\nax1.plot(x, y2, 'o-', label='Software')\nax1.plot(x, y3, 'g-', label='AI')\nax1.set_xlabel('Year')\nax1.set_ylabel('Progress (%)', color='b')\nax1.tick_params(axis='y', labelcolor='b')\n\n# Create the second graph\nax2 = ax1.twinx()\nax2.bar(x, [20, 20, 20, 20, 20, 20, 20, 20], color='r', alpha=0.5)\nax2.set_ylabel('Innovation Gap (%)', color='r')\nax2.tick_params(axis='y', labelcolor='r')\n\n# Set the title of the first graph\nax1.set_title('Technological Advancements')\n\n# Set the title of the second graph\nax2.set_title('Innovation Gaps Across Different Sectors in Technology')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.7, 2.9, 2.6]\n\n# Data for the second graph\ncrimes = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\nrates = [140, 130, 120, 110, 100]\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8.0, 10.0))\n\n# Plot the first graph\nbars = ax1.bar(countries, crime_rates, color='orange')\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Plot the second graph\nax2.plot(crimes, rates, marker='o', linestyle='--', color='blue')\n\n# Set labels and title\nax1.set_xlabel('Country')\nax1.set_ylabel('Crime Rate per 100,000 Inhabitants')\nax1.set_title('Average Legal Crime Rates by Country')\n\nax2.set_xlabel('Crime')\nax2.set_ylabel('Rate per 100,000 Inhabitants')\nax2.set_title('Average Legal Crime Rates by Crime')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the histogram\nscores = [40, 50, 60, 70, 80, 90, 100, 110, 120]\npublic_school_counts = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nprivate_school_counts = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the histogram\nax.bar(scores, public_school_counts, color='blue', label='Public School')\nax.bar(scores, private_school_counts, color='orange', label='Private School')\n\n# Set the title and labels\nax.set_title('Student Performance in Schools')\nax.set_xlabel('Score')\nax.set_ylabel('Number of Students')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first plot\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([100, 200, 300, 400, 500])\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Average Annual Temperature')\n\n# Create a figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the second plot\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([100, 200, 300, 400, 500])\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Geographical Elevation Distribution')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nyears = ['2019', '2020', '2021', '2022']\nstocks = [300, 250, 200, 150]\nbonds = [250, 200, 150, 100]\nreal_estate = [200, 150, 100, 50]\n\n# Data for the second chart\nproducts = ['Savings', 'CDs', 'Stocks', 'Bonds', 'ETFs', 'Mutual Funds']\npopularity = [200, 175, 150, 125, 100, 75]\n\n# Data for the third chart\nloan_amounts = [10000, 20000, 30000, 40000]\nloan_distribution = [80, 70, 60, 50]\n\n# Create the figure and axis objects\nfig, axs = plt.subplots(1, 3, figsize=(10, 5))\n\n# Plot the first chart\naxs[0].barh(years, stocks, color='green')\naxs[0].barh(years, bonds, left=stocks, color='blue')\naxs[0].barh(years, real_estate, left=[x + y for x, y in zip(stocks, bonds)], color='yellow')\naxs[0].set_title('Investment Growth Over Time')\n\n# Plot the second chart\naxs[1].bar(products, popularity, color='blue')\naxs[1].set_title('Popularity of Financial Products')\n\n# Plot the third chart\naxs[2].barh(loan_amounts, loan_distribution, color='blue')\naxs[2].set_title('Loan Amount Distribution by Region')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\ny1 = [80, 60, 80, 90]\ny2 = [60, 40, 60, 70]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the first graph\ncolor = 'tab:blue'\nax1.set_xlabel('Algorithm')\nax1.set_ylabel('Success Rate (%)', color=color)\nax1.bar(x, y1, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Efficiency (%)', color=color)\nax2.bar(x, y2, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Set the title of the first graph\nfig.suptitle('AI Task Success Rates')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [100, 200, 300, 400, 500, 600, 700]\ny1 = [100, 150, 125, 175, 150, 125, 100]\ny2 = [125, 175, 150, 125, 100, 75, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, label='Morning Traffic')\nax.plot(x, y2, label='Evening Traffic')\n\n# Set the title and labels\nax.set_title('Traffic Volume by Time of Day')\nax.set_xlabel('Number of Vehicles')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nsizes = [10, 30, 25, 15]\ncolors = ['purple', 'red', 'blue', 'orange']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsales = [25000, 20000, 15000, 10000, 5000]\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nsales_probabilities = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.barh(products, sales, color='green')\nax.set_xlabel('Sales')\nax.set_ylabel('Products')\n\n# Add a legend\nax.legend(['Known Sales', 'Unknown Sales'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data for the histogram\ndata = [120, 130, 140, 150, 160]\n\n# Create a histogram\nax.hist(data, bins=5, color='green')\n\n# Set the title of the histogram\nax.set_title('Histogram of Stock Returns')\n\n# Set the x-axis label\nax.set_xlabel('Returns')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 10.0))\n\n# Plot the first subplot\nx = np.linspace(0, 5, 100)\ny = np.sin(x)\nax1.plot(x, y, 'bo-')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.set_title('Energy Consumption Over Time')\n\n# Plot the second subplot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax2.contourf(X, Y, Z, cmap='Blues')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\nax2.set_title('Renewable Energy Ratio Over Time')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15.0, 35.0, 30.0, 20.0]\ncolors = ['yellow', 'red', 'blue', 'green']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Data for the scatter plot\nx = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])\ny = np.array([150, 170, 190, 210, 230, 250, 270, 290, 310])\n\nplt.scatter(x, y, color='purple')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left plot\nx = [1000, 1200, 1400, 1600, 1800, 2000]\ny1 = [9.25, 9.25, 9.25, 9.25, 9.25, 9.25]\ny2 = [9, 9, 9, 9, 9, 9]\ny3 = [9, 9, 9, 9, 9, 9]\n\n# Data for the right plot\nbrands = ['Gucci', 'Prada', 'Louis Vuitton', 'Chanel', 'Dior']\npopularity_index = [8.5, 7.5, 8.5, 9, 8.5]\ncustomer_satisfaction = [8, 6, 8, 6, 8]\n\n# Create the figure and axis objects\nfig, ax = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\n# Left plot: Luxury Brand Popularity vs Price\nax[0].bar(x, y1, color='purple')\nax[0].bar(x, y2, color='green')\nax[0].bar(x, y3, color='yellow')\nax[0].set_xlabel('Average Price ($)')\nax[0].set_ylabel('Popularity Index')\nax[0].set_title('Luxury Brand Popularity vs Price')\n\n# Right plot: Customer Satisfaction Distribution Across Brands\nax[1].barh(brands, popularity_index, color='blue')\nax[1].barh(brands, customer_satisfaction, color='red')\nax[1].set_xlabel('Customer Satisfaction')\nax[1].set_ylabel('Brands')\nax[1].set_title('Customer Satisfaction Distribution Across Brands')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\naccuracy_data = [75.32, 77.11, 77.03, 76.86, 74.52]\nnfr_data = [[0.0, 1.79, 1.71, 1.54], [0.0, 0.08, 0.07, 1.52], [0.0, 0.01, 0.01, 1.52], [0.0, 0.02, 0.02, 1.52], [0.0, 0.0, 0.0, 1.52]]\nnrf_data = [[-0.02, -0.8, -2.51], [-0.08, -0.25, -2.34], [-0.02, -0.25, -2.34], [-0.02, -0.25, -2.34], [-0.02, -0.25, -2.34]]\n\n# Data for the second chart\nrobust_data = [60.5, 59.3, 58.35, 59.1, 55.5]\nnfr_robust_data = [[0.0, 1.2, 0.2, 0.75], [0.0, 0.0, 0.0, 0.75], [0.0, 0.0, 0.0, 0.75], [0.0, 0.0, 0.0, 0.75], [0.0, 0.0, 0.0, 0.75]]\nnrf_robust_data = [[-0.25, -3.8, -2.85], [-0.25, -3.8, -2.85], [-0.25, -3.8, -2.85], [-0.25, -3.8, -2.85], [-0.25, -3.8, -2.85]]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the first chart\nax.bar(range(len(accuracy_data)), accuracy_data, color='green')\nfor i, v in enumerate(nfr_data):\n    ax.text(i, v[0], str(v[0]), ha='center', va='bottom')\nfor i, v in enumerate(nrf_data):\n    ax.text(i, v[0], str(v[0]), ha='center', va='bottom')\n\n# Plot the second chart\nax.bar(range(len(robust_data)), robust_data, color='red')\nfor i, v in enumerate(nfr_robust_data):\n    ax.text(i, v[0], str(v[0]), ha='center', va='bottom')\nfor i, v in enumerate(nrf_robust_data):\n    ax.text(i, v[0], str(v[0]), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Accuracy (%)')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncontext = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvariance = [0.6, 0.6, 0.8, 0.8, 0.8, 0.8]\nregret = [[0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25]]\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\n\ncolor = 'tab:blue'\nax1.set_xlabel('Trials')\nax1.set_ylabel('Generalized Variance', color=color)\nax1.plot(context, variance, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:red'\nax2.set_ylabel('Average Regret', color=color)  # we already handled the x-label with ax1\nax2.plot(context, regret, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left subplot\nx = [0, 200, 400]\ny = [300, 250, 200]\n\n# Data for the middle subplot\nx2 = [-100, 0, 100, 200]\ny2 = [100, 150, 200, 250]\n\n# Data for the right subplot\nx3 = [-200, -100, 0, 100, 200]\ny3 = [40, 60, 80, 100, 120]\n\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Left subplot\naxs[0].plot(x, y, 'ro-')\naxs[0].set_title('Debater')\naxs[0].set_xlabel('Elo Rating')\naxs[0].set_ylabel('Correct Rating - Incorrect Rating')\n\n# Middle subplot\naxs[1].scatter(x2, y2, color='r')\naxs[1].set_title('Debater')\naxs[1].set_xlabel('Aggregate Elo Rating')\naxs[1].set_ylabel('Correct Rating - Incorrect Rating')\n\n# Right subplot\naxs[2].plot(x3, y3, 'bo-')\naxs[2].set_title('Judge')\naxs[2].set_xlabel('Aggregate Elo Rating')\naxs[2].set_ylabel('Judge Accuracy (%)')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Gray', 'Blue', 'Yellow', 'Purple', 'Green']\nsizes = [4.6, 30.5, 11.3, 10.6, 29.8]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, autopct='%1.1f%%')\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ningredients = ['90 g sugar', '1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk']\nquantities = [90, 1, 60, 0.5, 100]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.pie(quantities, labels=ingredients, autopct='%1.1f%%')\n\n# Set the title\nax.set_title('Matplotlib bakery: A donut')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Transport', 'Utilities', 'Food', 'Others', 'Entertainment']\nsizes = [37.5, 16.7, 29.2, 10.0, 10.0]\ncolors = ['blue', 'green', 'red', 'yellow', 'orange']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlabels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nsizes = [31.4, 15.7, 19.9, 33.0]\ncolors = ['orange', 'red', 'blue', 'green']\n\n# Data for QLoRA\nq_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nq_sizes = [54.8, 10.5, 6.3, 28.4]\nq_colors = ['orange', 'red', 'blue', 'green']\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting LoRA\naxs[0].pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(q_sizes, labels=q_labels, colors=q_colors, autopct='%1.1f%%', startangle=140)\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first circle\ndata1 = [25.1, 26.4, 12.6, 15.9]\ncolors1 = ['yellow', 'green', 'orange', 'gray']\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Define the data for the second circle\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['yellow', 'green', 'orange', 'gray']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(5.0, 8.0))\n\n# Plot the first circle\naxs[0].pie(data1, colors=colors1, labels=labels1, autopct='%1.1f%%')\n\n# Plot the second circle\naxs[1].pie(data2, colors=colors2, labels=labels2, autopct='%1.1f%%')\n\n# Set the title of the first subplot\naxs[0].set_title('Full Finetuning')\n\n# Set the title of the second subplot\naxs[1].set_title('QLoRA')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Fruits', 'Proteins', 'Grains', 'Vegetables', 'Dairy']\nsizes = [25, 35, 10, 20, 10]\ncolors = ['pink', 'lightblue', 'orange', 'lightgreen', 'purple']\n\n# Create a pie chart\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nplt.title('Nutritional Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['E-commerce', 'Education', 'Entertainment', 'Technology']\nsizes = [31.2, 18.8, 35.7, 37.5]\ncolors = ['#FFA500', '#FF4500', '#ADD8E6', '#90EE90']\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nplt.title('Market Share by Sector - External vs. Internal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Logs 10%', 'Frogs 15%', 'Hogs 30%', 'Dogs 45%']\nsizes = [10, 15, 30, 45]\ncolors = ['purple', 'pink', 'orange', 'blue']\n\n# Create a pie chart\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nplt.title('Pie Chart of Animal Populations')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [29, 11, 20, 40]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['France', 'UK', 'Germany', 'Italy']\nsizes = [18, 42, 12, 28]\ncolors = ['orange', 'green', 'blue', 'red']\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nplt.title('Countries in Europe')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Slice 1', 'Slice 2', 'Slice 3', 'Slice 4', 'Slice 5']\nsizes = [26.2, 21.4, 19.0, 14.3, 13.3]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, autopct='%1.1f%%')\n\n# Set the title\nax.set_title('Slice of a pie chart')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [35.4, 12.4, 17.2, 24.7, 10.3]\ncolors = ['blue', 'green', 'lightblue', 'orange', 'pink']\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title of the chart\nplt.title('Pie Chart of Market Segments')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 10, 35]\ncolors = ['lightblue', 'skyblue', 'lightskyblue', 'deepskyblue', 'navy']\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a title\nplt.title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP', 'ACL']\nsizes = [25.4, 12.2, 20.3, 7.4, 34.7]\ncolors = ['blue', 'purple', 'green', 'brown', 'orange']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each energy source\nenergy_sources = ['Coal', 'Hydro', 'Solar', 'Wind']\npercentages = [25.0, 15.0, 30.0, 25.0]\n\n# Create a pie chart for each energy source\nfig, axs = plt.subplots(2, 2, figsize=(6.0, 6.0))\naxs[0, 0].pie(percentages, labels=energy_sources, autopct='%1.1f%%')\naxs[0, 0].set_title('Energy Consumption - National vs. Project')\n\n# Define the data for each energy source\nenergy_sources = ['Other', 'Solar', 'Wind']\npercentages = [10.0, 20.0, 30.0]\n\n# Create a pie chart for each energy source\naxs[0, 1].pie(percentages, labels=energy_sources, autopct='%1.1f%%')\naxs[0, 1].set_title('Energy Consumption - National vs. Project')\n\n# Define the data for each energy source\nenergy_sources = ['Other', 'Solar', 'Wind']\npercentages = [8.3, 16.7, 25.0]\n\n# Create a pie chart for each energy source\naxs[1, 0].pie(percentages, labels=energy_sources, autopct='%1.1f%%')\naxs[1, 0].set_title('Energy Consumption - National vs. Project')\n\n# Define the data for each energy source\nenergy_sources = ['Other', 'Solar', 'Wind']\npercentages = [12.5, 15.0, 37.5]\n\n# Create a pie chart for each energy source\naxs[1, 1].pie(percentages, labels=energy_sources, autopct='%1.1f%%')\naxs[1, 1].set_title('Energy Consumption - National vs. Project')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\ny2 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\ny3 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\ny4 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\ny5 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.plot(x, y1, 'r-', label='English')\nax.plot(x, y2, 'b-', label='French')\nax.plot(x, y3, 'g-', label='German')\nax.plot(x, y4, 'r-', label='Chinese')\nax.plot(x, y5, 'b-', label='Korean')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['English', 'French', 'German']\nvalues = [-4.00, -3.22, -2.44]\n\n# Create a bar chart\nplt.bar(categories, values, color='red')\n\n# Add labels and title\nplt.xlabel('Category')\nplt.ylabel('Value')\nplt.title('Bar Chart of Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 0.6)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.6)\n\n# Draw arrows\nfor i in range(10):\n    for j in range(10):\n        ax.arrow(i/10, j/10, 0.05, 0.05, head_width=0.02, head_length=0.02, fc='purple', ec='purple')\n\n# Draw lines\nax.plot([0.1, 0.3, 0.5], [0.2, 0.4, 0.6], color='red')\nax.plot([0.2, 0.4, 0.6], [0.1, 0.3, 0.5], color='blue')\nax.plot([0.3, 0.5, 0.7], [0.2, 0.4, 0.6], color='green')\nax.plot([0.4, 0.6, 0.8], [0.1, 0.3, 0.5], color='orange')\n\n# Add labels\nax.text(0.05, 0.05, 'True Field', color='red')\nax.text(0.05, 0.15, 'SINDy Learned Field', color='purple')\nax.text(0.05, 0.25, 'Train Sample', color='blue')\nax.text(0.05, 0.35, 'Test Sample', color='orange')\nax.text(0.05, 0.45, 'SINDy Train', color='green')\nax.text(0.05, 0.55, 'SINDy Test', color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the limits of the x and y axes\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Draw arrows\nfor i in range(10):\n    for j in range(10):\n        ax.arrow(i, j, -0.1, -0.1, head_width=0.05, head_length=0.05, fc='b', ec='b')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the magnetic field vector B\nBx = -Y / (X**2 + Y**2)\nBy = X / (X**2 + Y**2)\n\n# Plot the magnetic field vector B\nplt.figure(figsize=(6.0, 5.0))\nplt.quiver(X, Y, Bx, By, color='blue')\nplt.title('Magnetic Field $\\mathbf{B}$ in Tesla units')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data\nlabels = ['VQA', 'MME', 'MM', 'LLaVA-W', 'POPE']\nsizes = [79.9, 62.0, 86.8, 59.1, 78.2]\ncolors = ['red', 'blue', 'green', 'purple', 'orange']\n\n# Plot the pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nspeed_ratio = 4\ncolors = ['red', 'green', 'blue']\nlabels = ['fr', 'es', 'en', 'el', 'de', 'bg', 'sw', 'ar', 'ur', 'th', 'ru', 'tr', 'hi', 'vi', 'zh']\nvalues = [20, 40, 60, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Draw the radar chart\nax.pie(values, labels=labels, colors=colors, startangle=90, counterclock=False)\n\n# Set the title\nax.set_title(f'XNLI (speed-up ratio: {speed_ratio})')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Interference', 'Understanding', 'Questioning', 'Reasoning', 'Paraphrasing', 'Reflection']\nvalues = [10, 8, 6, 4, 2, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Plot the data\nax.pie(values, labels=categories, startangle=90, counterclock=False)\n\n# Set the title\nax.set_title('Cognitive Functions')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\ndata = {\n    '\u03bcR': [0.496, 0.37, 0.284],\n    '\u03bcAUC': [0.43, 0.33, 0.24],\n    '\u03bcTrain': [0.46, 0.36, 0.29],\n    'NTP': [0.46, 0.36, 0.29],\n    'NFF': [0.46, 0.36, 0.29]\n}\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set the title and labels\nax.set_title('Sample Plot')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['novel', 'programming world', 'mythology', 'universe', 'general', 'movie', 'fairy tale', 'country', 'special place', 'city', 'landscape', 'cultural event']\nvalues = [0.2, 0.8, 0.4, 0.6, 0.6, 0.8, 0.6, 0.8, 0.6, 0.8, 0.6, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a radar chart\nax.plot(categories, values, marker='o')\nax.fill(categories, values, alpha=0.25)\n\n# Set the title\nax.set_title('Radar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'STEM']\nvalues = [10, 20, 30, 40, 50, 60]\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(np.deg2rad(categories), values, color=colors)\n\n# Set the title\nax.set_title('Roleplay')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Nutrition', 'Purity', 'Allergen', 'Pollution', 'Recall', 'Storage', 'Material', 'Labeling']\nvalues = [0.3, 0.2, 0.1, 0.4, 0.5, 0.6, 0.7, 0.8]\ncolors = ['red', 'green']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(values, colors=colors, startangle=90, autopct='%1.1f%%')\n\n# Add category labels\nfor wedge, text, autotext in zip(wedges, texts, autotexts):\n    text.set_visible(False)\n    autotext.set_visible(False)\n    ax.annotate(categories[np.argmax(values)], xy=wedge.get_center(), ha='center', va='center', fontsize=12)\n\n# Set the title\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['Apple', 'Samsung', 'Huawei']\nsizes = [85.8, 86.4, 78.7]\ncolors = ['orange', 'blue', 'green']\n\n# Create pie chart\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set title\nax.set_title('Pie Chart of Smartphone Sales')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Blow Molding', 'Extrusion', 'Injection', 'Compression']\nvalues = [5, 4, 3, 2]\ncolors = ['red', 'green', 'blue', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.plot(np.linspace(0, 2*np.pi, len(categories), endpoint=False).tolist() + [np.linspace(0, 2*np.pi, len(categories), endpoint=False)[0]], values + [values[0]], color='black')\nax.fill(np.linspace(0, 2*np.pi, len(categories), endpoint=False).tolist() + [np.linspace(0, 2*np.pi, len(categories), endpoint=False)[0]], values + [values[0]], color='lightgrey')\n\n# Set the categories as tick labels\nax.set_xticks(np.linspace(0, 2*np.pi, len(categories), endpoint=False))\nax.set_xticklabels(categories)\n\n# Set the title\nax.set_title('Radar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Food Quality', 'Shows', 'Staff', 'Family Rides', 'Cleanliness', 'Thrill Rides', 'Wait Times', 'Ticket Price', 'Souvenirs', 'Parking']\nvalues = [0.2, 0.4, 0.6, 0.8, 1.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ncolors = ['orange', 'purple']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw the radar chart\nax.pie(values, labels=categories, colors=colors, startangle=90, counterclock=False)\n\n# Set the title\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Creativity', 'Versatility', 'Longevity', 'Projection', 'Value', 'Packaging', 'Popularity']\ndata = [1, 3, 5, 7, 9, 11, 13]\n\n# Create a color map\ncmap = plt.cm.get_cmap('viridis', len(categories))\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the radar chart\nax.pie(data, labels=categories, colors=cmap(np.linspace(0, 1, len(categories))), startangle=90)\n\n# Set the title\nax.set_title('Radar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data\ndata = {\n    'MM-Vet': [78.7],\n    'TextVQA': [85.8],\n    'GQA': [85.0, 71.9, 64.1, 69.9],\n    'VQAav2': [86.9, 71.9, 64.1, 69.9],\n    'LLaVA-W': [86.9, 71.9, 64.1, 69.9],\n    'SQA-I': [85.8, 76.1, 66.4, 56.5]\n}\n\n# Define the colors\ncolors = ['red', 'blue', 'green']\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax.plot(values, label=key, color=colors[i % len(colors)])\n\n# Set the title and labels\nax.set_title('POPE')\nax.set_xlabel('Data Points')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar charts\ncategories = ['Versatility', 'Longevity']\nvalues_creativity = [7, 9]\nvalues_popularity = [5, 7]\nvalues_projection = [3, 5]\nvalues_sillage = [1, 3]\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(18.0, 6.0), subplot_kw={'projection': 'polar'})\n\n# Plot the radar charts\naxs[0].plot(categories, values_creativity, color='blue')\naxs[0].set_title('Creativity')\n\naxs[1].plot(categories, values_popularity, color='blue')\naxs[1].set_title('Popularity')\n\naxs[2].plot(categories, values_projection, color='blue')\naxs[2].set_title('Projection')\n\n# Add a legend\nfig.legend(['Chanel', 'Dior', 'Gucci'], loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data\nangles = np.linspace(0, 2*np.pi, 10, endpoint=False).tolist() + [0]\nangles += np.pi/2\nangles = np.array(angles)\nvalues = [0.6, 0.8, 0.4, 0.2, 0.6, 0.8, 0.4, 0.2, 0.6, 0.8, 0.4, 0.2]\n\n# Plot the data\nax.plot(angles, values, 'o-')\n\n# Set the limits of the plot\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Loadings PC1')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the radar chart\ndata = {\n    'MLA': [1, 2, 3, 4, 5],\n    'Query Error': [1, 2, 3, 4, 5],\n    'Privacy': [1, 2, 3, 4, 5]\n}\n\n# Define the number of variables\nN = len(data)\n\n# Compute the angle each variable will occupy\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the radar chart\nfor key, values in data.items():\n    values += values[:1]  # Repeat the first value to close the polygon\n    ax.plot(angles, values, label=key)\n    ax.fill(angles, values, alpha=0.25)\n\n# Set the title and labels\nax.set_title('Radar Chart')\nax.set_xticks(angles[:-1])\nax.set_xticklabels(data.keys())\n\n# Show the plot\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data\ncategories = ['Heterocycle formation', 'C-C bond formation', 'Acylation and related processes', 'Hetroalkylation and arylation', 'Functional group addition, FGA']\nvalues = [35, 45, 55, 65, 75]\n\n# Create a pie chart\nax.pie(values, labels=categories, autopct='%1.1f%%')\n\n# Set the title\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nmodels = ['Model C', 'Model B', 'Model D', 'Model E', 'Model F']\npredicted_scores = [0.07, 0.07, 0.07, 0.07, 0.07]\nhelpful_scores = [0.03, 0.03, 0.03, 0.03, 0.03]\nresult_scores = [0.05, 0.05, 0.05, 0.05, 0.05]\nrating_scores = [0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Plot the data\nax.plot(models, predicted_scores, label='Predicted Score', color='green')\nax.plot(models, helpful_scores, label='Helpful Score', color='orange')\nax.plot(models, result_scores, label='Result Score', color='blue')\nax.plot(models, rating_scores, label='Rating Score', color='red')\n\n# Set the title and labels\nax.set_title('Model Scores')\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['rose', 'candlestick', 'line_num', 'pie', 'bubble', 'radar', 'area', 'funnel', 'box', 'treemap', 'heatmap']\nvalues = [3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]\n\n# Create a radar chart\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(8.0, 8.0))\nax.plot(np.deg2rad(categories), values, marker='o')\nax.set_yticks([])\nax.set_xticks(np.deg2rad(categories))\n\n# Add labels\nfor i, category in enumerate(categories):\n    ax.text(np.deg2rad(category), 6, category, ha='center', va='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Anomaly Detection', 'Long-horizon Forecasting', 'Short-horizon Forecasting']\nsizes = [30, 40, 30]\ncolors = ['blue', 'green', 'red']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data\nangles = np.linspace(0, 2 * np.pi, 6, endpoint=False).tolist() + [angles[0]]\nangles = np.array(angles)\nvalues = [72.9, 66.3, 67.2, 42.9, 65.0, 49.3, 55.6, 43.1, 55.6, 49.5, 62.8, 43.1]\ncolors = ['red', 'blue']\n\n# Plot the data\nax.plot(angles, values, 'o-', linewidth=2, markersize=8, color=colors[0])\nax.fill(angles, values, alpha=0.25, color=colors[0])\n\n# Set the title and labels\nax.set_title('Example Plot')\nax.set_xticks(angles[:-1])\nax.set_xticklabels(['VQA', 'GQA', 'POPE', 'MM-Vet', 'TextVQA'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nvalues = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\ncolors = ['orange', 'blue', 'orange', 'blue', 'green', 'green', 'green', 'green', 'green']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot the data\nfor model, value, color in zip(models, values, colors):\n    ax.plot([value], [0], marker='o', color=color, label=model)\n\n# Set the x-axis limits\nax.set_xlim(0, 2)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1])\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Risk')\n\n# Set the title\nax.set_title('Risk Taking')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 1000, 2000, 3000]\ny = [77, 79, 81, 83]\n\n# Create a scatter plot\nplt.scatter(x, y)\n\n# Add labels and title\nplt.xlabel('Pre-training GPU Hours')\nplt.ylabel('Accuracy [%]')\nplt.title('ImageNet-1K Linear Probing')\n\n# Set the x-axis limits\nplt.xlim(0, 4000)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ninference_time = [10, 20, 30, 40, 50, 60]\naverage_score = [0.85, 0.80, 0.75, 0.70, 0.65, 0.60]\nbubble_size = [0.90, 0.90, 0.90, 0.90, 0.90, 0.90]\n\n# Create a scatter plot\nplt.scatter(inference_time, average_score, s=bubble_size*100)\n\n# Set the title and labels\nplt.title('Bubble Size: Number of Anomalies Detected')\nplt.xlabel('Inference Time (seconds)')\nplt.ylabel('Average Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [203, 424, 1, 46, 40]\ny = [55, 55, 55, 55, 55]\ncolors = ['gray', 'gray', 'gray', 'red', 'red']\nlabels = ['203M', '424M', '1B', '4B', '>4B']\n\n# Create a scatter plot\nplt.scatter(x, y, c=colors)\n\n# Add labels to each point\nfor i, label in enumerate(labels):\n    plt.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the title and labels\nplt.title('Number of parameters')\nplt.xlabel('EgoSchema VQA accuracy')\nplt.ylabel('Perception Test VQA accuracy')\n\n# Set the figure size\nplt.figure(figsize=(8.0, 6.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_single_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_ensemble_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_caereconstruction = [0.08, 0.07, 0.06, 0.05, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y_single_lstm, 'b^', label='Single LST')\nax.plot(x, y_ensemble_lstm, 'g^', label='Ensemble LST')\nax.plot(x, y_caereconstruction, 'ro', label='CAE Reconstruction')\n\n# Set the title and labels\nax.set_title('Average Relative Error, u')\nax.set_xlabel('Test Case Index, u')\nax.set_ylabel('Average Relative Error, u')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\nmajority_accuracies = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\nminority_accuracies = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(classes, majority_accuracies, 'bo', label='Majority')\nax.plot(classes, minority_accuracies, 'ro', label='Minority')\n\n# Adding legend and title\nax.legend()\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [50, 30, 20, 10, 0]\ny1 = [68, 68, 68, 68, 68]\ny2 = [68, 68, 68, 68, 68]\ny3 = [64, 64, 64, 64, 64]\ny4 = [64, 64, 64, 64, 64]\ny5 = [62, 62, 62, 62, 62]\ny6 = [62, 62, 62, 62, 62]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data points\nax.plot(x, y1, 'ro')\nax.plot(x, y2, 'bo')\nax.plot(x, y3, 'go')\nax.plot(x, y4, 'mo')\nax.plot(x, y5, 'co')\nax.plot(x, y6, 'yo')\n\n# Set the labels and title\nax.set_xlabel('Token cost($)')\nax.set_ylabel('Accuracy(%)')\nax.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny_solar = [30, 35, 40, 45, 50, 55, 60, 65]\ny_wind = [25, 30, 35, 40, 45, 50, 55, 60]\ny_hydro = [20, 25, 30, 35, 40, 45, 50, 55]\ny_geothermal = [15, 20, 25, 30, 35, 40, 45, 50]\ny_biomass = [10, 15, 20, 25, 30, 35, 40, 45]\ny_nuclear = [5, 10, 15, 20, 25, 30, 35, 40]\ny_tidal = [0, 5, 10, 15, 20, 25, 30, 35]\ny_wave = [-5, 0, 5, 10, 15, 20, 25, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y_solar, 'y-')\nax.plot(x, y_wind, 'b-')\nax.plot(x, y_hydro, 'c-')\nax.plot(x, y_geothermal, 'm-')\nax.plot(x, y_biomass, 'g-')\nax.plot(x, y_nuclear, 'r-')\nax.plot(x, y_tidal, 'p-')\nax.plot(x, y_wave, 'x-')\n\n# Set the labels and title\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\nax.set_title('Energy Source vs Carbon Reduction')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the limits of the x-axis\nax.set_xlim(-30, 10)\n\n# Set the limits of the y-axis\nax.set_ylim(-10, 30)\n\n# Draw horizontal lines at y=0, y=10, y=20, and y=30\nfor y in range(0, 40, 10):\n    ax.axhline(y=y, color='black', linestyle='--')\n\n# Draw vertical lines at x=-30, x=-20, x=0, and x=10\nfor x in range(-30, 11, 10):\n    ax.axvline(x=x, color='black', linestyle='--')\n\n# Set the title of the plot\nax.set_title('Scatter Plot with Grid Lines')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny_day1 = [105, 100, 95, 90, 85, 80, 75, 70]\ny_day2 = [100, 95, 90, 85, 80, 75, 70, 65]\n\n# Plot the data points\nax.plot(x, y_day1, 'bo')  # blue circles for Day 1\nax.plot(x, y_day2, 'ro')  # red circles for Day 2\n\n# Set the title and labels\nax.set_title('Temperature Trends')\nax.set_xlabel('Time (hours)')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Set the grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny1 = [105, 100, 95, 90, 85, 80, 75, 70]\ny2 = [100, 95, 90, 85, 80, 75, 70, 65]\ny3 = [95, 90, 85, 80, 75, 70, 65, 60]\ny4 = [90, 85, 80, 75, 70, 65, 60, 55]\ny5 = [85, 80, 75, 70, 65, 60, 55, 50]\n\n# Create a scatter plot for each y-axis\nplt.scatter(x, y1, color='blue')\nplt.scatter(x, y2, color='green')\nplt.scatter(x, y3, color='red')\nplt.scatter(x, y4, color='purple')\nplt.scatter(x, y5, color='yellow')\n\n# Set the limits of the x and y axes\nplt.xlim(0, 18)\nplt.ylim(0, 115)\n\n# Set the labels for the x and y axes\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Set the title of the plot\nplt.title('Scatter Plot with Multiple Y-Axes')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for each energy type\nsolar_energy = [175, 200, 225, 250, 275, 300]\nwind_energy = [175, 200, 225, 250, 275, 300]\nhydro_power = [175, 200, 225, 250, 275, 300]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data points for each energy type\nax.plot(solar_energy, label='Solar Energy', color='blue')\nax.plot(wind_energy, label='Wind Energy', color='red')\nax.plot(hydro_power, label='Hydropower', color='gray')\n\n# Set the title of the plot\nax.set_title('Energy Production Trends')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\n\n# Set the limits for the x and y axes\nax.set_xlim(175, 300)\nax.set_ylim(140, 220)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10, 20, 30, 40, 50, 60, 70, 80, 90]\ny = [20, 60, 60, 60, 60, 60, 60, 60, 60]\n\n# Create a scatter plot\nplt.scatter(x, y)\n\n# Set the title and labels\nplt.title('Scatter plot with colorbar')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Add a colorbar\ncbar = plt.colorbar()\ncbar.set_label('Colorbar')\n\n# Set the figure size\nplt.figure(figsize=(8.0, 6.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LibriCSS vs Additional Data 1\nx1 = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.8, 0.8, 0.8, 0.9, 0.9]\n\n# Data for AMI vs Additional Data 2\nx2 = [2, 3, 4, 5, 6, 7, 8]\ny2 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x1, y1, 'bo-', label='LibriCSS WER')\nax.plot(x2, y2, 'ro-', label='AMI WER')\n\n# Set the title and labels\nax.set_title('LibriCSS vs Additional Data 1')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Define the data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nvalues = [0.8, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\nexploration = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nrisk_taking = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Plot the data\nax.plot(models, values, 'bo')\nax.plot(models, exploration, 'go')\nax.plot(models, risk_taking, 'ro')\n\n# Set the title and labels\nax.set_title('Performance Comparison')\nax.set_xlabel('Models')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nmodels = ['Mixtal-8x7B', 'MPT-7B', 'Llama2-70B', 'Falcon-40B', 'Davinci-003', 'Davinci-002', 'Claude-2', 'Claude-1']\ngpt4_scores = [190, 160, 150, 140, 130, 120, 110, 100]\nmeta_cognition_scores = [180, 160, 150, 140, 130, 120, 110, 100]\nexploration_scores = [180, 160, 150, 140, 130, 120, 110, 100]\nrisk_taking_scores = [180, 160, 150, 140, 130, 120, 110, 100]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the data\naxes[0, 0].plot(models, gpt4_scores, label='GPT4')\naxes[0, 0].set_title('Model-Basedness')\naxes[0, 0].legend()\n\naxes[0, 1].plot(models, meta_cognition_scores, label='Meta-Cognition', color='orange')\naxes[0, 1].set_title('Meta-Cognition')\naxes[0, 1].legend()\n\naxes[1, 0].plot(models, exploration_scores, label='Exploration', color='green')\naxes[1, 0].set_title('Exploration')\naxes[1, 0].legend()\n\naxes[1, 1].plot(models, risk_taking_scores, label='Risk Taking', color='red')\naxes[1, 1].set_title('Risk Taking')\naxes[1, 1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Scatter Plot - deepskyblue\naxs[0].scatter([70, 80, 90], [80, 85, 90], color='blue')\naxs[0].set_title('Scatter Plot - deepskyblue')\naxs[0].set_xlabel('X Values')\naxs[0].set_ylabel('Y Values')\n\n# Scatter Plot - magenta\naxs[1].scatter([70, 80, 90], [80, 85, 90], color='magenta')\naxs[1].set_title('Scatter Plot - magenta')\naxs[1].set_xlabel('X Values')\naxs[1].set_ylabel('Y Values')\n\n# Scatter Plot - limegreen\naxs[2].scatter([70, 80, 90], [80, 85, 90], color='limegreen')\naxs[2].set_title('Scatter Plot - limegreen')\naxs[2].set_xlabel('X Values')\naxs[2].set_ylabel('Y Values')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny2 = [45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny3 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot the data\naxs[0].plot(x, y1, 'p-', color='purple')\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].set_xlabel('Average Precision on MSCOCO (%)')\naxs[0].set_ylabel('Average Precision on HumanArt (%)')\n\naxs[1].plot(x, y2, 'p-', color='purple')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].set_xlabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on HumanArt (%)')\n\naxs[2].plot(x, y3, 'p-', color='purple')\naxs[2].set_title('VLPose Performance')\naxs[2].set_xlabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on HumanArt (%)')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0]\ncolors = ['red', 'purple', 'green', 'red', 'purple', 'green', 'red', 'purple', 'green', 'red', 'purple', 'green', 'red', 'purple', 'green', 'red', 'purple', 'green', 'red', 'purple', 'green', 'red', 'purple', 'green', 'red', 'purple', 'green']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.scatter(x, y, c=colors)\n\n# Set the labels\nax.set_xlabel('Diversity')\nax.set_ylabel('Token cost ($)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data\ndata = np.random.rand(10, 10)\n\n# Plot the data\ncax = ax.matshow(data, cmap='viridis')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the tick labels\nax.set_xticks(np.arange(len(data)))\nax.set_yticks(np.arange(len(data)))\n\n# Set the tick labels\nax.set_xticklabels(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'])\nax.set_yticklabels(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny1 = [800, 750, 700, 650, 600, 550, 500, 450]\ny2 = [600, 550, 500, 450, 400, 350, 300, 250]\ny3 = [800, 750, 700, 650, 600, 550, 500, 450]\ny4 = [600, 550, 500, 450, 400, 350, 300, 250]\ny5 = [800, 750, 700, 650, 600, 550, 500, 450]\ny6 = [600, 550, 500, 450, 400, 350, 300, 250]\n\n# Create a scatter plot\nplt.scatter(x, y1, color='blue', label='SIREN')\nplt.scatter(x, y2, color='cyan', label='WIRE')\nplt.scatter(x, y3, color='red', label='FFN')\nplt.scatter(x, y4, color='green', label='SZ3')\nplt.scatter(x, y5, color='magenta', label='NNComp')\nplt.scatter(x, y6, color='orange', label='Ours')\n\n# Set the title and labels\nplt.title('Scatter Plot of WRMSE vs BPP')\nplt.xlabel('Bit per pixel (BPP)')\nplt.ylabel('WRMSE')\n\n# Add a legend\nplt.legend()\n\n# Set the figure size\nplt.figure(figsize=(6.0, 6.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Plot the data points with different colors\nax.plot(x, y, 'o', color='orange')  # Daytime Sunny\nax.plot(x, y, 'o', color='blue')    # Night Rainy\nax.plot(x, y, 'o', color='green')   # PGST\n\n# Set the title of the plot\nax.set_title('Weather Data')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nnmae = [25, 18, 15, 12, 10, 8]\nparams = [10, 20, 30, 40, 50, 60]\n\n# Create a scatter plot\nplt.scatter(params, nmae, color='blue')\n\n# Set the title and labels\nplt.title('Number of params. vs. NMAE on QM9')\nplt.xlabel('Number of parameters (M)')\nplt.ylabel('NMAE (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points\nx1 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny1 = [0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5]\nx2 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny2 = [0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5]\nx3 = [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny3 = [0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5]\n\n# Plot the data points\nax.plot(x1, y1, 'bo', label='ar')\nax.plot(x2, y2, 'ro', label='de')\nax.plot(x3, y3, 'go', label='fr')\n\n# Set the legend\nax.legend()\n\n# Set the title\nax.set_title('Legend')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-0.4, 0.4)\nax.set_ylim(-0.4, 0.4)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for DE plot\nx_DE = [0.6, 0.7, 0.8, 0.9, 1.0]\ny_DE = [0.12, 0.12, 0.11, 0.11, 0.11]\n\n# Data for PJM plot\nx_PJM = [0.6, 0.7, 0.8, 0.9, 1.0]\ny_PJM = [0.6, 0.55, 0.55, 0.5, 0.45]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Plot DE data\nax.plot(x_DE, y_DE, 'o', color='green')\nax.set_title('DE')\n\n# Plot PJM data\nax.plot(x_PJM, y_PJM, 'o', color='blue')\n\n# Set labels\nax.set_xlabel('CQA Similarity')\nax.set_ylabel('MSE')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['physicsforums.com', 'gmatclub.com', 'mathhelpboards.com', 'mathoverflow.net', 'proofwiki.org', 'stackexchange.com', 'mathhelpforum.com']\nvalues = [18.42, 6.26, 6.15, 10.91, 8.54, 30.6, 14.21]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Create a bar chart with the data\nax.bar(categories, values, color='blue')\n\n# Set the title of the chart\nax.set_title('Website Popularity')\n\n# Set the x-axis label\nax.set_xlabel('Websites')\n\n# Set the y-axis label\nax.set_ylabel('Popularity (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlanguages = ['Java', 'Python', 'JavaScript', 'C++', 'Other']\npercentages = [10, 20, 27, 23, 8]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nplt.bar(languages, percentages, color=['purple', 'darkviolet', 'pink', 'orange', 'beige'])\n\n# Add labels and title\nplt.xlabel('Programming Languages')\nplt.ylabel('Percentage')\nplt.title('Popularity of Programming Languages')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nbrands = ['Adidas', 'Nike', 'Reebok', 'Puma']\nmarket_shares = [13.42, 30.6, 10.91, 14.21]\nunder_armour_shares = [8.54, 0, 0, 0]\nnew_balance_shares = [0, 0, 0, 6.26]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the market shares\nax.bar(brands, market_shares, color='blue')\n\n# Plot the Under Armour shares\nax.bar(brands, under_armour_shares, bottom=market_shares, color='orange')\n\n# Plot the New Balance shares\nax.bar(brands, new_balance_shares, bottom=[sum(x) for x in zip(market_shares, under_armour_shares)], color='red')\n\n# Set the title and labels\nax.set_title('Market Share Distribution')\nax.set_xlabel('Brands')\nax.set_ylabel('Market Share (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C']\nvalues = [50, 15, 20]\n\n# Create a bar chart\nplt.bar(categories, values, color=['orange', 'lightblue', 'lightgreen'])\n\n# Set the title and labels\nplt.title('Bar Chart')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each continent\ncontinents = ['European', 'Australian', 'South American', 'Asian', 'North American', 'African']\npercentages = [15, 18, 10, 25, 20, 12]\n\n# Create a bar chart\nplt.figure(figsize=(6.0, 6.0))\nplt.bar(continents, percentages, color=['yellow', 'purple', 'cyan', 'pink', 'green', 'blue'])\n\n# Add title and labels\nplt.title('Percentage of Population by Continent')\nplt.xlabel('Continent')\nplt.ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2 vs Llama2 (In-Chat)')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the tick labels for the y-axis\nax.set_yticks([1, 2, 3, 4, 5, 6, 7])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7'])\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', rotation=45)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', rotation=45)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linewidth=2)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linewidth=2)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', direction='in')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', direction='in')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='major')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='minor')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='minor')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', linestyle=':')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', linestyle=':')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', rotation=30)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', rotation=30)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', linewidth=1)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', linewidth=1)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', direction='out')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', direction='out')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', linestyle='-')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', linestyle='-')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', rotation=45)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', rotation=45)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', linewidth=2)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', linewidth=2)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', pad=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', pad=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', direction='in')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', direction='in')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', which='both', length=15)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', which='both', length=15)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', which='both', rotation=60)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', which='both', rotation=60)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both', linewidth=3)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both', linewidth=3)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', which='both', pad=15)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', which='both', pad=15)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', which='both', direction='out')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', which='both', direction='out')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both', which='both', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both', which='both', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', length=20)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', length=20)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', rotation=75)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', rotation=75)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both', which='both', linewidth=4)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both', which='both', linewidth=4)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', pad=20)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', pad=20)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', direction='in')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', direction='in')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both', which='both', which='both', linestyle=':')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both', which='both', which='both', linestyle=':')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', length=25)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', length=25)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', rotation=90)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', rotation=90)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both', which='both', which='both', linewidth=5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both', which='both', which='both', linewidth=5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', pad=25)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', pad=25)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', direction='out')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', direction='out')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', linestyle='-')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', linestyle='-')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', length=30)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', length=30)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', rotation=105)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', rotation=105)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', linewidth=6)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', linewidth=6)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', pad=30)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', pad=30)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', direction='in')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', direction='in')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', which='both', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', which='both', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', which='both', length=35)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', which='both', length=35)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', which='both', rotation=120)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', which='both', rotation=120)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both', which='major', which='both', which='both', which='both', which='both', which='both', linewidth=7)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both', which='major', which='both', which='both', which='both', which='both', which='both', linewidth=7)\n\n# Set the color of the x-axis tick marks\n"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nefficiency = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ncomfort = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\nsafety = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(efficiency, label='Efficiency')\nax.plot(comfort, label='Comfort')\nax.plot(safety, label='Safety')\n\n# Add stars at specific points\nax.plot([1, 3, 5], [0.8, 0.6, 0.4], 'r*')\nax.plot([1, 3, 5], [0.9, 0.7, 0.5], 'r*')\nax.plot([1, 3, 5], [0.7, 0.5, 0.3], 'r*')\n\n# Set the title and labels\nax.set_title('Comparison of Scores with and without Memory')\nax.set_xlabel('Score')\nax.set_ylabel('Memory Type')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nefficiency = [0.3, 0.4, 0.5]\ncomfort = [0.2, 0.3, 0.4]\nsafety = [0.1, 0.2, 0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.bar(range(len(efficiency)), efficiency, color='pink', label='Without Memory')\nax.bar(range(len(comfort)), comfort, bottom=efficiency, color='lightblue', label='With Memory')\nax.bar(range(len(safety)), safety, bottom=[sum(x) for x in zip(efficiency, comfort)], color='pink')\n\n# Set the labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Score')\nax.set_title('Category Scores')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [1, 2, 3, 4, 5]\ny1 = [0.9, 0.8, 0.7, 0.6, 0.5]\ny2 = [0.8, 0.7, 0.6, 0.5, 0.4]\ny3 = [0.7, 0.6, 0.5, 0.4, 0.3]\ny4 = [0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='GPT-4V(Vison)')\nax.plot(x, y2, label='Gemini')\n\n# Set the title and labels\nax.set_title('Scoring Evaluation')\nax.set_xlabel('Time')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Set the x-axis labels\nax.set_xlabel('Algorithm')\nax.set_ylabel('Accuracy')\n\n# Define the data for the plot\nalgorithms = ['jTrans', 'PalmTree', 'CLAP']\naccuracies = [0.9, 0.8, 0.7]\n\n# Plot the data\nax.bar(algorithms, accuracies)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nx = ['A2', 'B1', 'B2', 'C1', 'C2']\ny1 = [0.3, 0.4, 0.5, 0.6, 0.7]\ny2 = [0.8, 0.9, 1.0, 1.1, 1.2]\n\n# Plot the data\nax.plot(x, y1, label='Teacher-Style')\nax.plot(x, y2, label='Standardize')\n\n# Add stars at specific points\nstars = [(0, 0.3), (1, 0.4), (2, 0.5), (3, 0.6), (4, 0.7)]\nfor i, (x_val, y_val) in enumerate(stars):\n    ax.annotate('*', (x_val, y_val), color='yellow')\n\n# Set the title and labels\nax.set_title('Comparison of Teacher-Style and Standardize')\nax.set_xlabel('Time')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data for the plot\nx = ['Vanilla', 'CoT']\ny = [85, 75]\n\n# Create a bar chart\nax.bar(x, y, color=['pink', 'blue'])\n\n# Set the title and labels\nax.set_title('Accuracy Comparison')\nax.set_xlabel('Flavor')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [2, 4, 6, 8, 10]\ny1_group_l0 = [163, 201, 176, 159, 153]\ny1_agis = [97, 97, 95, 109, 97]\n\n# Data for the second graph\nx2 = [2, 4, 6, 8, 10]\ny2_group_l0 = [163, 201, 176, 159, 153]\ny2_agis = [97, 97, 95, 109, 97]\n\nfig, axs = plt.subplots(2, 1, figsize=(8.0, 8.0))\n\n# Plotting the first graph\naxs[0].bar(x1, y1_group_l0, color='blue')\naxs[0].bar(x1, y1_agis, color='orange')\naxs[0].set_title('% Decrease in Test MSE vs. FLAM-GL')\naxs[0].set_xlabel('Number of Features')\naxs[0].set_ylabel('% Decrease')\n\n# Plotting the second graph\naxs[1].bar(x2, y2_group_l0, color='blue')\naxs[1].bar(x2, y2_agis, color='orange')\naxs[1].set_title('% Decrease in Test MSE vs. EBM-RS')\naxs[1].set_xlabel('Number of Features')\naxs[1].set_ylabel('% Decrease')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = [0.88, 0.85, 0.79, 0.67, 0.57]\ny = [0.18, 0.19, 0.19, 0.16, 0.16]\nlabels = ['Raw', '125Hz', '50Hz', '25Hz', '10Hz']\npearson_r = [0.33, 0.33, 10.67, 16.95, 29.10]\neer = [0.18, 0.19, 0.18, 0.16, 0.16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [y[i], y[i]], 'k-')\n    ax.text(x[i], y[i], labels[i], ha='center', va='bottom')\n\n# Set the limits and ticks\nax.set_xlim(0.5, 1.0)\nax.set_ylim(0.0, 1.0)\nax.set_xticks(np.arange(0.5, 1.1, 0.1))\nax.set_yticks(np.arange(0.0, 1.1, 0.1))\n\n# Add Pearson R and EER values\nfor i in range(len(x)):\n    ax.text(x[i], y[i] - 0.05, f'Pearson R: {pearson_r[i]:.2f}', ha='center', va='top')\n    ax.text(x[i], y[i] - 0.1, f'EER: {eer[i]:.2f}%', ha='center', va='top')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define the data for the plots\ndata_boys_class1 = np.random.randint(50, 100, 10)\ndata_girls_class1 = np.random.randint(50, 100, 10)\ndata_boys_class2 = np.random.randint(50, 100, 10)\ndata_girls_class2 = np.random.randint(50, 100, 10)\ndata_boys_class3 = np.random.randint(50, 100, 10)\ndata_girls_class3 = np.random.randint(50, 100, 10)\ndata_boys_class4 = np.random.randint(50, 100, 10)\ndata_girls_class4 = np.random.randint(50, 100, 10)\n\n# Plot the data\nax.bar(range(len(data_boys_class1)), data_boys_class1, color='blue', label='Boys')\nax.bar(range(len(data_girls_class1)), data_girls_class1, color='green', label='Girls')\nax.bar(range(len(data_boys_class2)), data_boys_class2, color='blue', label='Boys')\nax.bar(range(len(data_girls_class2)), data_girls_class2, color='green', label='Girls')\nax.bar(range(len(data_boys_class3)), data_boys_class3, color='blue', label='Boys')\nax.bar(range(len(data_girls_class3)), data_girls_class3, color='green', label='Girls')\nax.bar(range(len(data_boys_class4)), data_boys_class4, color='blue', label='Boys')\nax.bar(range(len(data_girls_class4)), data_girls_class4, color='green', label='Girls')\n\n# Set the title and labels\nax.set_title('Distribution of Grades: Class 1')\nax.set_xlabel('Students')\nax.set_ylabel('Grades')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
