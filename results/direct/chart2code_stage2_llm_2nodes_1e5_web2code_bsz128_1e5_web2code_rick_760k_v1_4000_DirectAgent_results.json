{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Data for plotting\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nz = np.cos(x)\n\n# Plotting\nax.plot(x, y, z, 'b-')\nax.plot(x, y, -z, 'r-')\n\n# Setting labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\nax.set_zlabel('Phase')\n\n# Displaying plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [0.5, 1.5, 2.5, 3.5]\ny = [0.5, 1.5, 2.5, 3.5]\nz = [0.5, 1.5, 2.5, 3.5]\n\n# Create a scatter plot\nscatter = ax.scatter(x, y, z, c='r', marker='o')\n\n# Set the labels for the axes\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the sphere\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 10 * np.outer(np.cos(u), np.sin(v))\ny = 10 * np.outer(np.sin(u), np.sin(v))\nz = 10 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Plot the surface\nax.plot_surface(x, y, z, color='r')\n\n# Set the limits of the axes\nax.set_xlim(-15, 15)\nax.set_ylim(-15, 15)\nax.set_zlim(-15, 15)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\n# Create a grid of points\nx = np.linspace(-4, 4, 10)\ny = np.linspace(-2, 2, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add some points\npoints = np.array([[-3, -1, 5], [-1, 1, 10], [1, -1, 15], [3, 1, 20]])\nax.scatter(points[:, 0], points[:, 1], points[:, 2], c='r', marker='o')\n\n# Set labels and title\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\nax.set_title('3D Plot of Gas Volume vs Temperature and Pressure')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = ['2010', '2012', '2014', '2016', '2018']\nprivate_schools = [0.3, 0.5, 0.7, 0.9, 0.8]\npublic_schools = [0.4, 0.6, 0.8, 0.9, 0.7]\nnon_profit_schools = [0.2, 0.4, 0.6, 0.7, 0.5]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nx = np.arange(len(years))\ny = np.arange(len(years))\nx, y = np.meshgrid(x, y)\nz = np.zeros_like(x)\n\n# Plot the bars\nbar_width = 0.2\nbar_height_private = private_schools\nbar_height_public = public_schools\nbar_height_non_profit = non_profit_schools\n\nax.bar3d(x.ravel(), y.ravel(), z.ravel(), bar_width, bar_width, bar_height_private, color='orange')\nax.bar3d(x.ravel(), y.ravel(), z.ravel() + bar_height_private, bar_width, bar_width, bar_height_public, color='cyan')\nax.bar3d(x.ravel(), y.ravel(), z.ravel() + bar_height_private + bar_height_public, bar_width, bar_width, bar_height_non_profit, color='blue')\n\n# Set the labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\nax.set_title('Student to Teacher Ratio by School Type and Year')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('COVID-19 Incidence Rate by Age and Vaccination Status')\n\n# Set the x-axis label\nax.set_xlabel('Vaccination Number')\n\n# Set the y-axis label\nax.set_ylabel('Incidence Rate')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\ncolors = np.random.rand(50)\narea = np.pi * (15 * np.random.rand(50))**2  # 0 to 15 point radiuses\nax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 8))\nax.set_title('Global AI Investment')\nax.set_xlabel('Year')\nax.set_ylabel('Investment (Billion USD)')\nx = np.arange(2010, 2020)\ny = np.random.randint(1, 10, size=10)\nax.plot(x, y, 'o-')\n\n# Create a figure and axis for the second subplot\nfig, ax = plt.subplots(figsize=(10, 8))\nax.set_title('AI Adoption Rate')\nax.set_xlabel('Time Since Introduction (Years)')\nax.set_ylabel('Adoption Rate (%)')\nx = np.arange(0, 10)\ny = np.random.randint(1, 10, size=10)\nax.plot(x, y, 'o-')\n\n# Create a figure and axis for the third subplot\nfig, ax = plt.subplots(figsize=(10, 8))\nax.set_title('AI Sector Breakdown')\nax.set_xlabel('Sector')\nax.set_ylabel('Market Share (%)')\nx = ['AI', 'Machine Learning', 'Deep Learning', 'Robotics', 'Computer Vision']\ny = [30, 40, 20, 5, 5]\nax.pie(y, labels=x, autopct='%1.1f%%')\n\n# Create a figure and axis for the fourth subplot\nfig, ax = plt.subplots(figsize=(10, 8))\nax.set_title('AI Adoption Rate by Region')\nax.set_xlabel('Region')\nax.set_ylabel('Adoption Rate (%)')\nx = ['North America', 'Europe', 'Asia', 'Latin America', 'Africa']\ny = [60, 40, 20, 10, 5]\nax.bar(x, y)\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure and a 3D subplot\nfig = plt.figure(figsize=(10.0, 7.0))\nax1 = fig.add_subplot(121, projection='3d')\nax2 = fig.add_subplot(122, projection='3d')\n\n# Generate some data for the first plot\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the data\nsurf = ax1.plot_surface(x, y, z, cmap='coolwarm', linewidth=0, antialiased=False)\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax1.set_xlabel('X Label')\nax1.set_ylabel('Y Label')\nax1.set_zlabel('Z Label')\n\n# Generate some data for the second plot\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2)) * np.cos(np.sqrt(x**2 + y**2))\n\n# Plot the data\nsurf = ax2.plot_surface(x, y, z, cmap='viridis', linewidth=0, antialiased=False)\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax2.set_xlabel('X Label')\nax2.set_ylabel('Y Label')\nax2.set_zlabel('Z Label')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T=6')\n\n# Set the x-axis label\nax.set_xlabel('tau')\n\n# Set the y-axis label\nax.set_ylabel('accuracy (%)')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 101, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot plot labels\nax.set_xlabel('tau', color='black')\nax.set_ylabel('accuracy (%)', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot plot title\nax.set_title('CIFAR10 Spiking ResNet18 T=6', color='black')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot plot plot plot plot plot plot plot plot plot plot plot plot plot plot"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Define the data for the plot\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X**2 + Y**2)\n\n# Plot the data\nax.contourf(X, Y, Z, cmap='viridis')\n\n# Set the title of the plot\nax.set_title('Origin')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(111, projection='3d')\n\n# Create a grid of points\nx = np.linspace(0, 1, 10)\ny = np.linspace(0, 1, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add some text\nax.text2D(0.05, 0.95, \"Targets\", transform=ax.transAxes)\n\n# Set the limits for the axes\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\nax.set_zlim([0, 1])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a 3D scatter plot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(ax.collections[0])\ncbar.set_label('Intensity')\n\n# Set the title of the plot\nax.set_title('3D Scatter Plot with Colorbar')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 3)\n\n# Add a subplot for the main image\nmain_ax = fig.add_subplot(gs[0, :])\n\n# Add a subplot for the left column\nleft_ax = fig.add_subplot(gs[1:, 0])\n\n# Add a subplot for the right column\nright_ax = fig.add_subplot(gs[1:, 2])\n\n# Add a subplot for the bottom row\nbottom_ax = fig.add_subplot(gs[2, 1])\n\n# Add a rectangle to the main image\nmain_ax.add_patch(plt.Rectangle((0, 0), 10, 10, color='red'))\n\n# Add a rectangle to the left column\nleft_ax.add_patch(plt.Rectangle((0, 0), 5, 5, color='orange'))\n\n# Add a rectangle to the right column\nright_ax.add_patch(plt.Rectangle((0, 0), 5, 5, color='green'))\n\n# Add a rectangle to the bottom row\nbottom_ax.add_patch(plt.Rectangle((0, 0), 5, 5, color='blue'))\n\n# Set the limits of the axes\nmain_ax.set_xlim([0, 10])\nmain_ax.set_ylim([0, 10])\nleft_ax.set_xlim([0, 5])\nleft_ax.set_ylim([0, 5])\nright_ax.set_xlim([0, 5])\nright_ax.set_ylim([0, 5])\nbottom_ax.set_xlim([0, 5])\nbottom_ax.set_ylim([0, 5])\n\n# Set the labels of the axes\nmain_ax.set_xlabel('X')\nmain_ax.set_ylabel('Y')\nleft_ax.set_xlabel('X')\nleft_ax.set_ylabel('Y')\nright_ax.set_xlabel('X')\nright_ax.set_ylabel('Y')\nbottom_ax.set_xlabel('X')\nbottom_ax.set_ylabel('Y')\n\n# Set the title of the plot\nmain_ax.set_title('3D Image with Colored Rectangles')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Financial Data Visualization')\n\n# Set the x-axis label\nax.set_xlabel('Age')\n\n# Set the y-axis label\nax.set_ylabel('Income')\n\n# Create a scatter plot for each category\nax.scatter(np.random.rand(10), np.random.rand(10), c='red', label='Category 1')\nax.scatter(np.random.rand(10), np.random.rand(10), c='blue', label='Category 2')\nax.scatter(np.random.rand(10), np.random.rand(10), c='green', label='Category 3')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x and y limits\nax.set_xlim(10, 90)\nax.set_ylim(-20, 50)\n\n# Set the x and y labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Depth (m)')\n\n# Set the x and y ticks\nax.set_xticks(np.arange(10, 100, 10))\nax.set_yticks(np.arange(-20, 60, 10))\n\n# Draw a rectangle representing the fish tank\nrect = plt.Rectangle((10, -20), 80, 70, fill=False, edgecolor='black')\nax.add_patch(rect)\n\n# Draw a line representing the temperature change\nx = np.linspace(10, 90, 100)\ny = 30 + 2 * np.sin(x / 10)\nax.plot(x, y, 'r-')\n\n# Draw a line representing the depth change\nx = np.linspace(10, 90, 100)\ny = 10 + 10 * np.cos(x / 10)\nax.plot(x, y, 'b-')\n\n# Draw a line representing the oxygen level change\nx = np.linspace(10, 90, 100)\ny = 20 + 5 * np.tan(x / 10)\nax.plot(x, y, 'y-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis label\nax.set_xlabel('LR Test')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the title of the plot\nax.set_title('Density vs LR Test')\n\n# Create a scatter plot\nx = np.linspace(-20, 20, 100)\ny = np.sin(x)\nax.plot(x, y, 'b-')\n\n# Add a legend\nax.legend(['Data'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Average Tracked ORB Feature Number')\n\n# Set the x-axis label\nax.set_xlabel('Average Tracked ORB Feature Number')\n\n# Set the y-axis label\nax.set_ylabel('Log (ATE RMSE)')\n\n# Set the x-axis limits\nax.set_xlim(150, 400)\n\n# Set the y-axis limits\nax.set_ylim(-6, 0)\n\n# Create a scatter plot for each severity level\nseverity_levels = ['Low', 'Middle', 'High']\ncolors = ['blue', 'orange', 'green']\nfor i, severity in enumerate(severity_levels):\n    ax.scatter(np.random.randint(150, 400, 20), np.random.uniform(-6, 0, 20), color=colors[i], label=severity)\n\n# Add a legend\nax.legend()\n\n# Draw a line between the points\nx = np.linspace(150, 400, 100)\ny = -0.47 * x + 235\nax.plot(x, y, color='black')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, c='blue', s=100)\n\n# Draw a line graph with random data\nx = np.linspace(-3, 3, 100)\ny = np.sin(x)\nax.plot(x, y, c='black')\n\n# Add a title and labels\nax.set_title('Correlation: -0.47')\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000', fontsize=14, fontweight='bold')\n\n# Set the x-axis label\nax.set_xlabel('Average Top-5 Pct of 1D', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Average Top-5 Pct of 2D', fontsize=12)\n\n# Set the x-axis tick labels\nax.set_xticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('red')\nax.spines['top'].set_color('red') \nax.spines['right'].set_color('red')\nax.spines['left'].set_color('red')\n\n# Set the color of the plot ticks\nax.tick_params(axis='x', colors='red')\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('red')\nax.yaxis.label.set_color('red')\n\n# Set the color of the plot title\nax.title.set_color('red')\n\n# Set the color of the plot legend\nax.legend().get_texts()[0].set_color('red')\n\n# Set the color of the plot annotations\nax.annotate('Benign', xy=(0.2, 0.4), xytext=(0.3, 0.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('BadNets', xy=(0.4, 0.6), xytext=(0.5, 0.7),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('Benign KDE', xy=(0.6, 0.8), xytext=(0.7, 0.9),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('BadNets KDE', xy=(0.8, 0.9), xytext=(0.9, 1.0),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the graph\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Set the x-axis label\nax.set_xlabel('Tasks')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['snarks', 'navigate', 'question_selection', 'object_counting'])\n\n# Set the y-limits\nax.set_ylim(0.4, 0.9)\n\n# Set the y-ticks\nax.set_yticks([0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.4', '0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n\n# Set the color of the line\nax.plot([0, 1, 2, 3, 4], [0.7, 0.8, 0.9, 0.7, 0.6], 'o-')\n\n# Set the color of the markers\nax.plot([0, 1, 2, 3, 4], [0.7, 0.8, 0.9, 0.7, 0.6], 'o', color='black')\n\n# Set the color of the bars\nax.bar([0, 1, 2, 3, 4], [0.7, 0.8, 0.9, 0.7, 0.6], color='blue')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='white'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\n\n#"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightpink')\n\n# Set the title of the plot\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Set the x-axis label\nax.set_xlabel('norm size')\n\n# Set the y-axis label\nax.set_ylabel('count')\n\n# Set the x-axis limits\nax.set_xlim(0, 1.4)\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.5, 0.2))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 121, 20))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'])\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='orange')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='cyan')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='magenta')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='yellow')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='lime')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='brown')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle=':')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle=':')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-. ')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='white')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-.')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='-.')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='navy')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='teal')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='-. ')\n\n# Set the color of the y-axis grid lines\nax"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a pie chart\nax.pie([23.7, 3.0, 1.0, 73.3], labels=[\"Same\", \"Different\", \"Incomparable\", \"English\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='red')\n\n# Add a title\nax.set_title('Algorithm Performance')\n\n# Add labels\nax.set_xlabel('Time (Seconds)')\nax.set_ylabel('Cost ($)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny = [63.64, 80.08, 84.27, 90.11]\ncolors = ['blue', 'cyan', 'green', 'red']\n\n# Data for the second graph\nx2 = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny2 = [75.00, 87.20, 89.12, 93.89]\ncolors2 = ['blue', 'cyan', 'green', 'red']\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the first graph\nax[0].bar(x, y, color=colors)\nax[0].set_title('Average Recall Scores by Method')\nax[0].set_xlabel('Method')\nax[0].set_ylabel('Recall Score')\n\n# Plot the second graph\nax[1].plot(x2, y2, color='red')\nax[1].set_title('Average F1 Scores by Method')\nax[1].set_xlabel('Method')\nax[1].set_ylabel('F1 Score')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Micro F1')\n\n# Set the x-axis label\nax.set_xlabel('Few-Shot K')\n\n# Set the y-axis label\nax.set_ylabel('Micro F1')\n\n# Create a scatter plot with a blue color for the first data point\nax.scatter(4, 92, c='blue', label='Trained w Few-Shot Ex')\n\n# Create a scatter plot with a red color for the second data point\nax.scatter(8, 90, c='red', label='Def Deduc+Ex Gen')\n\n# Create a line plot with a blue color for the first data point\nax.plot([4, 8], [92, 90], c='blue')\n\n# Create a line plot with a red color for the second data point\nax.plot([8, 12], [90, 88], c='red')\n\n# Create a line plot with a blue color for the third data point\nax.plot([12, 16], [88, 86], c='blue')\n\n# Create a line plot with a red color for the fourth data point\nax.plot([16, 20], [86, 84], c='red')\n\n# Create a line plot with a blue color for the fifth data point\nax.plot([20, 24], [84, 82], c='blue')\n\n# Create a line plot with a red color for the sixth data point\nax.plot([24, 28], [82, 80], c='red')\n\n# Create a line plot with a blue color for the seventh data point\nax.plot([28, 32], [80, 78], c='blue')\n\n# Create a line plot with a red color for the eighth data point\nax.plot([32, 36], [78, 76], c='red')\n\n# Create a line plot with a blue color for the ninth data point\nax.plot([36, 40], [76, 74], c='blue')\n\n# Create a line plot with a red color for the tenth data point\nax.plot([40, 44], [74, 72], c='red')\n\n# Create a line plot with a blue color for the eleventh data point\nax.plot([44, 48], [72, 70], c='blue')\n\n# Create a line plot with a red color for the twelfth data point\nax.plot([48, 52], [70, 68], c='red')\n\n# Create a line plot with a blue color for the thirteenth data point\nax.plot([52, 56], [68, 66], c='blue')\n\n# Create a line plot with a red color for the fourteenth data point\nax.plot([56, 60], [66, 64], c='red')\n\n# Create a line plot with a blue color for the fifteenth data point\nax.plot([60, 64], [64, 62], c='blue')\n\n# Create a line plot with a red color for the sixteenth data point\nax.plot([64, 68], [62, 60], c='red')\n\n# Create a line plot with a blue color for the seventeenth data point\nax.plot([68, 72], [60, 58], c='blue')\n\n# Create a line plot with a red color for the eighteenth data point\nax.plot([72, 76], [58, 56], c='red')\n\n# Create a line plot with a blue color for the nineteenth data point\nax.plot([76, 80], [56, 54], c='blue')\n\n# Create a line plot with a red color for the twentieth data point\nax.plot([80, 84], [54, 52], c='red')\n\n# Create a line plot with a blue color for the twenty-first data point\nax.plot([84, 88], [52, 50], c='blue')\n\n# Create a line plot with a red color for the twenty-second data point\nax.plot([88, 92], [50, 48], c='red')\n\n# Create a line plot with a blue color for the twenty-third data point\nax.plot([92, 96], [48, 46], c='blue')\n\n# Create a line plot with a red color for the twenty-fourth data point\nax.plot([96, 100], [46, 44], c='red')\n\n# Create a line plot with a blue color for the twenty-fifth data point\nax.plot([100, 104], [44, 42], c='blue')\n\n# Create a line plot with a red color for the twenty-sixth data point\nax.plot([104, 108], [42, 40], c='red')\n\n# Create a line plot with a blue color for the twenty-seventh data point\nax.plot([108, 112], [40, 38], c='blue')\n\n# Create a line plot with a red color for the twenty-eighth data point\nax.plot([112, 116], [38, 36], c='red')\n\n# Create a line plot with a blue color for the twenty-ninth data point\nax.plot([116, 120], [36, 34], c='blue')\n\n# Create a line plot with a red color for the thirtieth data point\nax.plot([120, 124], [34, 32], c='red')\n\n# Create a line plot with a blue color for the thirty-first data point\nax.plot([124, 128], [32, 30], c='blue')\n\n# Create a line plot with a red color for the thirty-second data point\nax.plot([128, 132], [30, 28], c='red')\n\n# Create a line plot with a blue color for the thirty-third data point\nax.plot([132, 136], [28, 26], c='blue')\n\n# Create a line plot with a red color for the thirty-fourth data point\nax.plot([136, 140], [26, 24], c='red')\n\n# Create a line plot with a blue color for the thirty-fifth data point\nax.plot([140, 144], [24, 22], c='blue')\n\n# Create a line plot with a red color for the thirty-sixth data point\nax.plot([144, 148], [22, 20], c='red')\n\n# Create a line plot with a blue color for the thirty-seventh data point\nax.plot([148, 152], [20, 18], c='blue')\n\n# Create a line plot with a red color for the thirty-eighth data point\nax.plot([152, 156], [18, 16], c='red')\n\n# Create a line plot with a blue color for the thirty-ninth data point\nax.plot([156, 160], [16, 14], c='blue')\n\n# Create a line plot with a red color for the fortieth data point\nax.plot([160, 164], [14, 12], c='red')\n\n# Create a line plot with a blue color for the forty-first data point\nax.plot([164, 168], [12, 10], c='blue')\n\n# Create a line plot with a red color for the forty-second data point\nax.plot([168, 172], [10, 8], c='red')\n\n# Create a line plot with a blue color for the forty-third data point\nax.plot([172, 176], [8, 6], c='blue')\n\n# Create a line plot with a red color for the forty-fourth data point\nax.plot([176, 180], [6, 4], c='red')\n\n# Create a line plot with a blue color for the forty-fifth data point\nax.plot([180, 184], [4, 2], c='blue')\n\n# Create a line plot with a red color for the forty-sixth data point\nax.plot([184, 188], [2, 0], c='red')\n\n# Create a line plot with a blue color for the forty-seventh data point\nax.plot([188, 192], [0, -2], c='blue')\n\n# Create a line plot with a red color for the forty-eighth data point\nax.plot([192, 196], [-2, -4], c='red')\n\n# Create a line plot with a blue color for the forty-ninth data point\nax.plot([196, 200], [-4, -6], c='blue')\n\n# Create a line plot with a red color for the fiftieth data point\nax.plot([200, 204], [-6, -8], c='red')\n\n# Create a line plot with a blue color for the fifty-first data point\nax.plot([204, 208], [-8, -10], c='blue')\n\n# Create a line plot with a red color for the fifty-second data point\nax.plot([208, 212], [-10, -12], c='red')\n\n# Create a line plot with a blue color for the fifty-third data point\nax.plot([212, 216], [-12, -14], c='blue')\n\n# Create a line plot with a red color for the fifty-fourth data point\nax.plot([216, 220], [-14, -16], c='red')\n\n# Create a line plot with a blue color for the fifty-fifth data point\nax.plot([220, 224], [-16, -18], c='blue')\n\n# Create a line plot with a red color for the fifty-sixth data point\nax.plot([224, 228], [-18, -20], c='red')\n\n# Create a line plot with a blue color for the fifty-seventh data point\nax.plot([228, 232], [-20, -22], c='blue')\n\n# Create a line plot with a red color for the fifty-eighth data point\nax.plot([232, 236], [-22, -24], c='red')\n\n# Create a line plot with a blue color for the fifty-ninth data point\nax.plot([236, 240], [-24, -26], c='blue')\n\n# Create a line plot with a red color for the sixtieth data point\nax.plot([240, 244], [-26, -28], c='red')\n\n# Create a line plot with a blue color for the sixty-first data point\nax.plot([244, 248], [-28, -30], c='blue')\n\n# Create a line plot with a red color for the sixty-second data point\nax.plot([248, 252], [-30, -32], c='red')\n\n# Create a line plot with a blue color for the sixty-third data point\nax.plot([252, 256], [-32, -34], c='blue')\n\n# Create a line plot with a red color for the sixty-fourth data point\nax.plot([256, 260], [-34, -36], c='red')\n\n# Create a line plot with a blue color for the sixty-fifth data point\nax.plot([260, 264], [-36, -38], c='blue')\n\n# Create a line plot with a red color for the sixty-sixth data point\nax.plot([264, 268], [-38, -40], c='red')\n\n# Create a line plot with a blue color for the sixty-seventh data point\nax.plot([268, 272], [-40, -42], c='blue')\n\n# Create a line plot with a red color for the sixty-eighth data point\nax.plot([272, 276], [-42, -44], c='red')\n\n# Create a line plot with a blue color for the sixty-ninth data point\nax.plot([276, 280], [-44, -46], c='blue')\n\n# Create a line plot with a red color for the seventieth data point\nax.plot([280, 284], [-46, -48], c='red')\n\n# Create a line plot with a blue color for the seventy-first data point\nax.plot([284, 288], [-48, -50], c='blue')\n\n# Create a line plot with a red color for the seventy-second data point\nax.plot([288, 292], [-50, -52], c='red')\n\n# Create a line plot with a blue color for the seventy-third data point\nax.plot([292, 296], [-52, -54], c='blue')\n\n# Create a line plot with a red color for the seventy-fourth data point\nax.plot([296, 300], [-54, -56], c='red')\n\n# Create a line plot with a blue color for the seventy-fifth data point\nax.plot([300, 304], [-56, -58], c='blue')\n\n# Create a line plot with a red color for the seventy-sixth data point\nax.plot([304, 308], [-58, -60], c='red')\n\n# Create a line plot with a blue color for the seventy-seventh data point\nax.plot([308, 312], [-60, -62], c='blue')\n\n# Create a line plot with a red color for the seventy-eighth data point\nax.plot([312, 316], [-62, -64], c='red')\n\n# Create a line plot with a blue color for the seventy-ninth data point\nax.plot([316, 320], [-64, -66], c='blue')\n\n# Create a line plot with a red color for the eightieth data point\nax.plot([320, 324], [-66, -68], c='red')\n\n# Create a line plot with a blue color for the eighty-first data point\nax.plot([324, 328], [-68, -70], c='blue')\n\n# Create a line plot with a red color for the eighty-second data point\nax.plot([328, 332], [-70, -72], c='red')\n\n# Create a line plot with a blue color for the eighty-third data point\nax.plot([332, 336], [-72, -74], c='blue')\n\n# Create a line plot with a red color for the eighty-fourth data point\nax.plot([336, 340], [-74, -76], c='red')\n\n# Create a line plot with a blue color for the eighty-fifth data point\nax.plot([340, 344], [-76, -78], c='blue')\n\n# Create a line plot with a red color for the eighty-sixth data point\nax.plot([344, 348], [-78, -80], c='red')\n\n# Create a line plot with a blue color for the eighty-seventh data point\nax.plot([348, 352], [-80, -82], c='blue')\n\n# Create a line plot with a red color for the eighty-eighth data point\nax.plot([352, 356], [-82, -84], c='red')\n\n# Create a line plot with a blue color for the eighty-ninth data point\nax.plot([356, 360], [-84, -86], c='blue')\n\n# Create a line plot with a red color for the ninetieth data point\nax.plot([360, 364], [-86, -88], c='red')\n\n# Create a line plot with a blue color for the ninety-first data point\nax.plot([364, 368], [-88, -90], c='blue')\n\n# Create a line plot with a red color for the ninety-second data point\nax.plot([368, 372], [-90, -92], c='red')\n\n# Create a line plot with a blue color for the ninety-third data point\nax.plot([372, 376], [-92, -94], c='blue')\n\n# Create a line plot with a red color for the ninety-fourth data point\nax.plot([376, 380], [-94, -96], c='red')\n\n# Create a line plot with a blue color for the ninety-fifth data point\nax.plot([380, 384], [-96, -98], c='blue')\n\n# Create a line plot with a red color for the ninety-sixth data point\nax.plot([384, 388], [-98, -100], c='red')\n\n# Create a line plot with a blue color for the ninety-seventh data point\nax.plot([388, 392], [-100, -102], c='blue')\n\n# Create a line plot with a red color for the ninety-eighth data point\nax.plot([392, 396], [-102, -104], c='red')\n\n# Create a line plot with a blue color for the ninety-ninth data point\nax.plot([396, 400], [-104,"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7, 7))\n\n# Set the title of the plot\nax.set_title('Car Efficiency vs Vehicle Parameter Size')\n\n# Set the x-axis label\nax.set_xlabel('Vehicle Parameter Size (units)')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency (%)')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(50, 85)\n\n# Plot the data\nax.plot([10, 20, 30, 40, 50], [60, 65, 70, 75, 80], 'ro-')\nax.plot([10, 20, 30, 40, 50], [62, 65, 70, 75, 80], 'bo-')\nax.plot([10, 20, 30, 40, 50], [65, 70, 75, 80, 85], 'go-')\n\n# Add a legend\nax.legend(['Car A', 'Car B', 'Car C'])\n\n# Add a scatter plot for each car\nax.scatter(10, 60, color='red')\nax.scatter(20, 62, color='blue')\nax.scatter(30, 65, color='green')\nax.scatter(40, 70, color='yellow')\nax.scatter(50, 75, color='purple')\n\n# Add a rectangle for the car A\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car B\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car C\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car D\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car E\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car F\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car G\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car H\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car I\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car J\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car K\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car L\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car M\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car N\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car O\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car P\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car Q\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car R\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car S\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car T\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car U\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car V\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car W\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car X\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car Y\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car Z\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car AA\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car AB\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car AC\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car AD\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car AE\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car AF\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car AG\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car AH\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car AI\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car AJ\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car AK\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car AL\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car AM\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car AN\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car AO\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car AP\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car AQ\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car AR\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car AS\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car AT\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car AU\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car AV\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car AW\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car AX\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car AY\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car AZ\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car BA\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car BB\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car BC\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car BD\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car BE\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car BF\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car BG\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car BH\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car BI\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car BJ\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car BK\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car BL\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car BM\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car BN\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car BO\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car BP\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car BQ\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car BR\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car BS\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car BT\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car BU\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car BV\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car BW\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car BX\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car BY\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car BZ\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car CA\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car CB\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car CC\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car CD\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car CE\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car CF\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car CG\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car CH\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car CI\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car CJ\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car CK\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car CL\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car CM\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car CN\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car CO\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car CP\nrect = plt.Rectangle((40, 70), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the car CQ\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the car CR\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the car CS\nrect = plt.Rectangle((20, 62), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the car CT\nrect = plt.Rectangle((30, 65), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the car CU\nrect"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [16, 12, 20, 26, 20, 12]\ntrends = ['Simple Trend', 'Simple', 'Complex', 'Code']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\nax.plot(models, success_rates, marker='o', linestyle='-', color='purple')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Add trend labels\nfor i, model in enumerate(models):\n    ax.annotate(trends[i], (model, success_rates[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Add colored rectangles for each model\ncolors = ['pink', 'coral', 'tan', 'lightblue', 'lightgreen', 'lavender']\nfor i, model in enumerate(models):\n    ax.add_patch(plt.Rectangle((i-0.4, 0), 0.8, success_rates[i], color=colors[i]))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Set the x-axis label\nax.set_xlabel('Reduced Probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Draw a line graph\nax.plot([0, 1], [0, 1], 'k-')\n\n# Draw a scatter plot\nax.scatter(np.random.rand(50), np.random.rand(50), color='orange')\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.1, color='blue')\nax.add_artist(circle)\n\n# Draw a polygon\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1]], color='green')\nax.add_patch(polygon)\n\n# Draw a star\nstar = plt.Polygon([[0.4, 0.4], [0.5, 0.6], [0.6, 0.4], [0.5, 0.2], [0.4, 0.4]], color='red')\nax.add_patch(star)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.7, 0.7], [0.8, 0.9], [0.9, 0.7]], color='purple')\nax.add_patch(triangle)\n\n# Draw a rectangle with rounded corners\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='yellow', fill=False)\nax.add_patch(rect)\n\n# Draw a rectangle with dashed border\nrect = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='cyan', linestyle='--')\nax.add_patch(rect)\n\n# Draw a rectangle with dotted border\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='magenta', linestyle=':')\nax.add_patch(rect)\n\n# Draw a rectangle with dash-dot border\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='brown', linestyle='-.')\nax.add_patch(rect)\n\n# Draw a rectangle with solid border\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='black', linestyle='-')\nax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a circle for the logo\ncircle = plt.Circle((3, 3), 1, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle for the model name\nrect = plt.Rectangle((2, 2), 2, 1, color='green')\nax.add_artist(rect)\n\n# Create a rectangle for the model description\nrect = plt.Rectangle((2, 1), 2, 1, color='orange')\nax.add_artist(rect)\n\n# Create a rectangle for the model price\nrect = plt.Rectangle((2, 0), 2, 1, color='yellow')\nax.add_artist(rect)\n\n# Create a rectangle for the model rating\nrect = plt.Rectangle((2, -1), 2, 1, color='red')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -2), 2, 1, color='cyan')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -3), 2, 1, color='magenta')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -4), 2, 1, color='brown')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -5), 2, 1, color='pink')\nax.add_artist(rect)\n\n# Create a rectangle for the model customer support\nrect = plt.Rectangle((2, -6), 2, 1, color='purple')\nax.add_artist(rect)\n\n# Create a rectangle for the model warranty\nrect = plt.Rectangle((2, -7), 2, 1, color='black')\nax.add_artist(rect)\n\n# Create a rectangle for the model return policy\nrect = plt.Rectangle((2, -8), 2, 1, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the model shipping options\nrect = plt.Rectangle((2, -9), 2, 1, color='grey')\nax.add_artist(rect)\n\n# Create a rectangle for the model payment options\nrect = plt.Rectangle((2, -10), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery time\nrect = plt.Rectangle((2, -11), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery cost\nrect = plt.Rectangle((2, -12), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery tracking\nrect = plt.Rectangle((2, -13), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery confirmation\nrect = plt.Rectangle((2, -14), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery receipt\nrect = plt.Rectangle((2, -15), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery refund\nrect = plt.Rectangle((2, -16), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery return\nrect = plt.Rectangle((2, -17), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery exchange\nrect = plt.Rectangle((2, -18), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery warranty\nrect = plt.Rectangle((2, -19), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery return policy\nrect = plt.Rectangle((2, -20), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery shipping options\nrect = plt.Rectangle((2, -21), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery payment options\nrect = plt.Rectangle((2, -22), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery time\nrect = plt.Rectangle((2, -23), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery cost\nrect = plt.Rectangle((2, -24), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery tracking\nrect = plt.Rectangle((2, -25), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery confirmation\nrect = plt.Rectangle((2, -26), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery receipt\nrect = plt.Rectangle((2, -27), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery refund\nrect = plt.Rectangle((2, -28), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery return\nrect = plt.Rectangle((2, -29), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery exchange\nrect = plt.Rectangle((2, -30), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery warranty\nrect = plt.Rectangle((2, -31), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery return policy\nrect = plt.Rectangle((2, -32), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery shipping options\nrect = plt.Rectangle((2, -33), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery payment options\nrect = plt.Rectangle((2, -34), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery time\nrect = plt.Rectangle((2, -35), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery cost\nrect = plt.Rectangle((2, -36), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery tracking\nrect = plt.Rectangle((2, -37), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -38), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery receipt\nrect = plt.Rectangle((2, -39), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery refund\nrect = plt.Rectangle((2, -40), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery return\nrect = plt.Rectangle((2, -41), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery exchange\nrect = plt.Rectangle((2, -42), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery warranty\nrect = plt.Rectangle((2, -43), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery return policy\nrect = plt.Rectangle((2, -44), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery shipping options\nrect = plt.Rectangle((2, -45), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery payment options\nrect = plt.Rectangle((2, -46), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery time\nrect = plt.Rectangle((2, -47), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery cost\nrect = plt.Rectangle((2, -48), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery tracking\nrect = plt.Rectangle((2, -49), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -50), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery receipt\nrect = plt.Rectangle((2, -51), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery refund\nrect = plt.Rectangle((2, -52), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery return\nrect = plt.Rectangle((2, -53), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery exchange\nrect = plt.Rectangle((2, -54), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery warranty\nrect = plt.Rectangle((2, -55), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery return policy\nrect = plt.Rectangle((2, -56), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery shipping options\nrect = plt.Rectangle((2, -57), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery payment options\nrect = plt.Rectangle((2, -58), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery time\nrect = plt.Rectangle((2, -59), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery cost\nrect = plt.Rectangle((2, -60), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery tracking\nrect = plt.Rectangle((2, -61), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -62), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery receipt\nrect = plt.Rectangle((2, -63), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery refund\nrect = plt.Rectangle((2, -64), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery return\nrect = plt.Rectangle((2, -65), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery exchange\nrect = plt.Rectangle((2, -66), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery warranty\nrect = plt.Rectangle((2, -67), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery return policy\nrect = plt.Rectangle((2, -68), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery shipping options\nrect = plt.Rectangle((2, -69), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery payment options\nrect = plt.Rectangle((2, -70), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery time\nrect = plt.Rectangle((2, -71), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery cost\nrect = plt.Rectangle((2, -72), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery tracking\nrect = plt.Rectangle((2, -73), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -74), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery receipt\nrect = plt.Rectangle((2, -75), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery refund\nrect = plt.Rectangle((2, -76), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery return\nrect = plt.Rectangle((2, -77), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery exchange\nrect = plt.Rectangle((2, -78), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery warranty\nrect = plt.Rectangle((2, -79), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery return policy\nrect = plt.Rectangle((2, -80), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery shipping options\nrect = plt.Rectangle((2, -81), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery payment options\nrect = plt.Rectangle((2, -82), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery time\nrect = plt.Rectangle((2, -83), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery cost\nrect = plt.Rectangle((2, -84), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery tracking\nrect = plt.Rectangle((2, -85), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -86), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery receipt\nrect = plt.Rectangle((2, -87), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery refund\nrect = plt.Rectangle((2, -88), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery return\nrect = plt.Rectangle((2, -89), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery exchange\nrect = plt.Rectangle((2, -90), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery warranty\nrect = plt.Rectangle((2, -91), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery return policy\nrect = plt.Rectangle((2, -92), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery shipping options\nrect = plt.Rectangle((2, -93), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery payment options\nrect = plt.Rectangle((2, -94), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery delivery time\nrect = plt.Rectangle((2, -95), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery delivery cost\nrect = plt.Rectangle((2, -96), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery delivery tracking\nrect = plt.Rectangle((2, -97), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -98), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery delivery receipt\nrect = plt.Rectangle((2, -99), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery delivery refund\nrect = plt.Rectangle((2, -100), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig1, ax1 = plt.subplots(figsize=(10, 8))\nax1.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'b-')\nax1.set_title('Total')\nax1.set_xlabel('Daily reward (Ether)')\nax1.set_ylabel('Probability')\n\n# Create a figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(10, 8))\nax2.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'g-')\nax2.set_title('Proposer')\nax2.set_xlabel('Daily reward (Ether)')\nax2.set_ylabel('Probability')\n\n# Create a figure and axis for the third plot\nfig3, ax3 = plt.subplots(figsize=(10, 8))\nax3.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'r-')\nax3.set_title('Sync committee member')\nax3.set_xlabel('Daily reward (Ether)')\nax3.set_ylabel('Probability')\n\n# Create a figure and axis for the fourth plot\nfig4, ax4 = plt.subplots(figsize=(10, 8))\nax4.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'y-')\nax4.set_title('Attestor')\nax4.set_xlabel('Daily reward (Ether)')\nax4.set_ylabel('Probability')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the title of the plot\nax.set_title('LlaSMol vs Trainable Parameter Size')\n\n# Set the x-axis label\nax.set_xlabel('Trainable Parameter Size (M)')\n\n# Set the y-axis label\nax.set_ylabel('RMSE')\n\n# Set the x-axis limits\nax.set_xlim(0, 150)\n\n# Set the y-axis limits\nax.set_ylim(1.15, 1.35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 50, 100, 150])\n\n# Set the y-axis ticks\nax.set_yticks([1.15, 1.25, 1.35])\n\n# Add a legend\nax.legend()\n\n# Add a scatter plot\nax.scatter([10, 20, 30, 40, 50], [1.15, 1.25, 1.35, 1.15, 1.25], color='red')\n\n# Add a line plot\nax.plot([10, 20, 30, 40, 50], [1.15, 1.25, 1.35, 1.15, 1.25], color='blue')\n\n# Add a rectangle\nrect = plt.Rectangle((10, 1.15), 10, 0.1, color='green')\nax.add_patch(rect)\n\n# Add a circle\ncircle = plt.Circle((20, 1.25), 0.1, color='yellow')\nax.add_patch(circle)\n\n# Add a star\nstar = plt.Polygon([[30, 1.35], [35, 1.45], [30, 1.55], [25, 1.45], [30, 1.35]], color='orange')\nax.add_patch(star)\n\n# Add a triangle\ntriangle = plt.Polygon([[40, 1.15], [45, 1.25], [40, 1.35]], color='purple')\nax.add_patch(triangle)\n\n# Add a square\nsquare = plt.Rectangle((50, 1.25), 10, 0.1, color='pink')\nax.add_patch(square)\n\n# Add a pentagon\npentagon = plt.Polygon([[60, 1.35], [65, 1.45], [60, 1.55], [55, 1.45], [60, 1.35]], color='brown')\nax.add_patch(pentagon)\n\n# Add a hexagon\nhexagon = plt.Polygon([[70, 1.15], [75, 1.25], [70, 1.35], [65, 1.25], [70, 1.15], [75, 1.25]], color='cyan')\nax.add_patch(hexagon)\n\n# Add a heptagon\nheptagon = plt.Polygon([[80, 1.25], [85, 1.35], [80, 1.45], [75, 1.35], [80, 1.25], [85, 1.35], [80, 1.45]], color='magenta')\nax.add_patch(heptagon)\n\n# Add an octagon\noctagon = plt.Polygon([[90, 1.35], [95, 1.45], [90, 1.55], [85, 1.45], [90, 1.35], [95, 1.45], [90, 1.55], [85, 1.45]], color='lime')\nax.add_patch(octagon)\n\n# Add a nonagon\nnonagon = plt.Polygon([[100, 1.15], [105, 1.25], [100, 1.35], [95, 1.25], [100, 1.15], [105, 1.25], [100, 1.35], [95, 1.25], [100, 1.15]], color='silver')\nax.add_patch(nonagon)\n\n# Add a decagon\ndecagon = plt.Polygon([[110, 1.25], [115, 1.35], [110, 1.45], [105, 1.35], [110, 1.25], [115, 1.35], [110, 1.45], [105, 1.35], [110, 1.25], [115, 1.35]], color='gold')\nax.add_patch(decagon)\n\n# Add a dodecagon\ndodecagon = plt.Polygon([[120, 1.35], [125, 1.45], [120, 1.55], [115, 1.45], [120, 1.35], [125, 1.45], [120, 1.55], [115, 1.45], [120, 1.35], [125, 1.45], [120, 1.55], [115, 1.45]], color='navy')\nax.add_patch(dodecagon)\n\n# Add a trapezoid\ntrapezoid = plt.Polygon([[130, 1.15], [135, 1.25], [130, 1.35], [125, 1.25]], color='maroon')\nax.add_patch(trapezoid)\n\n# Add a parallelogram\nparallelogram = plt.Polygon([[140, 1.25], [145, 1.35], [140, 1.45], [135, 1.35]], color='olive')\nax.add_patch(parallelogram)\n\n# Add a rhombus\nrhombus = plt.Polygon([[150, 1.35], [155, 1.45], [150, 1.55], [145, 1.45]], color='teal')\nax.add_patch(rhombus)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Car Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Exection Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Metrics')\n\n# Set the x-axis limits\nax.set_xlim(40, 160)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Create a scatter plot for each car\nax.scatter([50, 70, 90], [0.05, 0.03, 0.02], color='red', label='Car 1')\nax.scatter([60, 80, 100], [0.06, 0.04, 0.03], color='blue', label='Car 2')\nax.scatter([70, 90, 110], [0.07, 0.05, 0.04], color='green', label='Car 3')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nyears = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x20', '60x20']\nsales = [18, 14, 13, 12, 9, 7, 5]\nprofit = [100, 90, 80, 70, 60, 50, 40]\nimprovement = [15, 10, 5, 0, -5, -10, -15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(years, sales, color='red')\nax.plot(years, profit, color='blue')\nax.plot(years, improvement, color='green')\n\n# Set the title and labels\nax.set_title('Car Sales and Profit Over Time')\nax.set_xlabel('Year')\nax.set_ylabel('Sales/Profit')\n\n# Add a legend\nax.legend(['Sales', 'Profit', 'Improvement'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Algorithm Performance Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Create a bar chart with the data\nax.bar(['SEAC', 'CTCO'], [2.3, 1.9], color='blue')\n\n# Add a legend\nax.legend(['SEAC', 'CTCO'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Stock Price Trend')\n\n# Set the x-axis label\nax.set_xlabel('Time to Market (Days)')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price ($)')\n\n# Set the x-axis limits\nax.set_xlim(0, 120)\n\n# Set the y-axis limits\nax.set_ylim(40, 120)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the graph\nax.set_title('Patent Filings in 2013')\n\n# Set the x-axis label\nax.set_xlabel('Number of Patents')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Create a list of technology fields\ntech_fields = ['Nano', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\n\n# Create a list of years\nyears = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\n\n# Create a list of colors for each technology field\ncolors = ['cyan', 'blue', 'green', 'orange', 'red', 'purple', 'pink', 'brown', 'grey', 'black']\n\n# Create a list of values for each technology field\nvalues = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\n\n# Create a list of values for each year\nvalues_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\nvalues_2014 = [25, 15, 45, 35, 65, 75, 95, 55, 85, 125]\nvalues_2015 = [30, 20, 50, 40, 70, 80, 100, 60, 90, 130]\nvalues_2016 = [35, 25, 55, 45, 75, 85, 105, 65, 95, 135]\nvalues_2017 = [40, 30, 60, 50, 80, 90, 110, 70, 100, 140]\nvalues_2018 = [45, 35, 65, 55, 85, 95, 115, 75, 105, 145]\nvalues_2019 = [50, 40, 70, 60, 90, 100, 120, 80, 110, 150]\nvalues_2020 = [55, 45, 75, 65, 95, 105, 125, 85, 115, 155]\nvalues_2021 = [60, 50, 80, 70, 100, 110, 130, 90, 120, 160]\nvalues_2022 = [65, 55, 85, 75, 105, 115, 135, 95, 125, 165]\n\n# Plot the data\nfor i in range(len(tech_fields)):\n    ax.plot(years, [values_2013[i], values_2014[i], values_2015[i], values_2016[i], values_2017[i], values_2018[i], values_2019[i], values_2020[i], values_2021[i], values_2022[i]], color=colors[i])\n\n# Add a legend\nax.legend(tech_fields)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the color of the background\nax.set_facecolor('lightpink')\n\n# Set the title of the graph\nax.set_title('Calibration Curve', fontsize=24)\n\n# Set the x-axis label\nax.set_xlabel('Fraction of positives', fontsize=18)\n\n# Set the y-axis label\nax.set_ylabel('Predicted probability', fontsize=18)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis grid line style\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major')\n\n# Set the x-axis grid line path\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None)\n\n# Set the y-axis grid line path\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None)\n\n# Set the x-axis grid line transform\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes)\n\n# Set the y-axis grid line transform\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes)\n\n# Set the x-axis grid line data\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None)\n\n# Set the y-axis grid line data\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None)\n\n# Set the x-axis grid line clip_on\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True)\n\n# Set the y-axis grid line clip_on\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True)\n\n# Set the x-axis grid line picker\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None)\n\n# Set the y-axis grid line picker\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None)\n\n# Set the x-axis grid line pickradius\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5)\n\n# Set the y-axis grid line pickradius\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5)\n\n# Set the x-axis grid line mouseover\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False)\n\n# Set the y-axis grid line mouseover\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False)\n\n# Set the x-axis grid line interactive\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True)\n\n# Set the y-axis grid line interactive\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True)\n\n# Set the x-axis grid line animated\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True)\n\n# Set the y-axis grid line animated\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True)\n\n# Set the x-axis grid line drawstyle\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default')\n\n# Set the y-axis grid line drawstyle\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default')\n\n# Set the x-axis grid line marker\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o')\n\n# Set the y-axis grid line marker\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o')\n\n# Set the x-axis grid line markersize\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5)\n\n# Set the y-axis grid line markersize\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5)\n\n# Set the x-axis grid line markerfacecolor\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange')\n\n# Set the y-axis grid line markerfacecolor\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange')\n\n# Set the x-axis grid line markeredgecolor\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange', markeredgecolor='black')\n\n# Set the y-axis grid line markeredgecolor\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange', markeredgecolor='black')\n\n# Set the x-axis grid line markeredgewidth\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1)\n\n# Set the y-axis grid line markeredgewidth\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1)\n\n# Set the x-axis grid line markeredgeline\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1, markeredgeline='--')\n\n# Set the y-axis grid line markeredgeline\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1, markeredgeline='--')\n\n# Set the x-axis grid line markeredgelinecolor\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1, markeredgeline='--', markeredgelinecolor='red')\n\n# Set the y-axis grid line markeredgelinecolor\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5, zorder=0, hatch='///', antialiased=True, visible=True, which='major', path=None, transform=ax.transAxes, data=None, clip_on=True, picker=None, pickradius=5, mouseover=False, interactive=True, animated=True, drawstyle='default', marker='o', markersize=5, markerfacecolor='orange', markeredgecolor='black', markeredgewidth=1, markeredgeline='--"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Earnings and Growth')\n\n# Set the x-axis label\nax.set_xlabel('Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Earnings ($1000s)')\n\n# Set the x-ticks\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nax.set_xticks(range(len(quarters)))\nax.set_xticklabels(quarters)\n\n# Set the y-ticks\nearnings = [250, 300, 350, 400]\nax.set_yticks(earnings)\n\n# Set the y-limits\nax.set_ylim(0, 450)\n\n# Set the y-labels\nax.set_yticklabels(['0', '100', '200', '300', '400'])\n\n# Set the color of the line\nax.plot(quarters, earnings, 'r-')\n\n# Set the color of the bars\nbars = ax.bar(quarters, earnings, color='blue')\n\n# Set the color of the labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the color of the legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Tesla', markerfacecolor='green', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='BMW', markerfacecolor='orange', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='BYD', markerfacecolor='blue', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Porsche', markerfacecolor='purple', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('AI Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Methods')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Requirements (lower is better)')\n\n# Define the data for the plot\nx = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ny = [72, 74, 76, 78, 80, 82]\n\n# Plot the data\nax.plot(x, y, marker='o', linestyle='-', color='black')\n\n# Add rectangles for each method\nrectangles = [\n    plt.Rectangle((0, 0), 1, 1, color='blue'),\n    plt.Rectangle((1, 0), 1, 1, color='orange'),\n    plt.Rectangle((2, 0), 1, 1, color='green'),\n    plt.Rectangle((3, 0), 1, 1, color='red'),\n    plt.Rectangle((4, 0), 1, 1, color='blue'),\n    plt.Rectangle((5, 0), 1, 1, color='green')\n]\n\n# Add rectangles to the plot\nfor rect in rectangles:\n    ax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Team Performance')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Sequident')\n\n# Create a scatter plot\nax.scatter(np.random.rand(100), np.random.rand(100), color='blue')\n\n# Create a bar chart\nax.bar(['Player 1', 'Player 2', 'Player 3'], [np.random.rand(), np.random.rand(), np.random.rand()], color='green')\n\n# Create a line graph\nax.plot([0, 1, 2, 3, 4], [np.random.rand(), np.random.rand(), np.random.rand(), np.random.rand(), np.random.rand()], color='red')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Average Norm of Difference Vectors')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, color='red')\n\n# Add a legend\nax.legend(['Species 1', 'Species 2', 'Species 3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Heart Rate Change Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time (in hours)')\n\n# Set the y-axis label\nax.set_ylabel('Heart Rate (in BPM)')\n\n# Set the x-axis limits\nax.set_xlim(0, 12)\n\n# Set the y-axis limits\nax.set_ylim(0, 130)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10, 12])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0K', '2K', '4K', '6K', '8K', '10K', '12K'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', labelcolor='blue')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('TMS Score vs Sequence ID')\n\n# Set the x-axis label\nax.set_xlabel('Sequence ID')\n\n# Set the y-axis label\nax.set_ylabel('TMS Score')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n#"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [4211, 2411, 2141, 1124]\nvalues = [0.9628, 0.9604, 0.9624, 0.9592]\nsum_values = [0.9641, 0.9641, 0.9624, 0.9561]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(years, values, 'b-o', label='SRCC')\nax.plot(years, sum_values, 'r-o', label='Sum (SRCC + PLCC)')\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Add legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0.9561, 0.9641)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 6))\n\n# Set the title for each subplot\naxs[0, 0].set_title('IIID-1 SDMT')\naxs[0, 1].set_title('NIID-2 SDST')\naxs[1, 0].set_title('NIID-4 UBSDT')\naxs[1, 1].set_title('NIID-5 UBSDST')\n\n# Create a color map for the scatter plots\ncmap = plt.get_cmap('tab20')\n\n# Create a scatter plot for each subplot\nfor i in range(2):\n    for j in range(2):\n        axs[i, j].scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap=cmap)\n        axs[i, j].set_xlim([0, 3])\n        axs[i, j].set_ylim([0, 3])\n\n# Add a legend to the figure\nfig.legend(['Depth', 'Edge', 'Normals', 'Semseg'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Compact Spiral with Elliptical Hollow Center')\n\n# Create a color bar\ncbar = fig.colorbar(ax)\n\n# Create a scatter plot\nax.scatter(0, 0, c='black')\n\n# Create a spiral pattern\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 5, 100)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\nax.plot(x, y, 'b-')\n\n# Create a second spiral pattern\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 3, 100)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\nax.plot(x, y, 'g-')\n\n# Create a third spiral pattern\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 2, 100)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\nax.plot(x, y, 'r-')\n\n# Create a fourth spiral pattern\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\nax.plot(x, y, 'y-')\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('DAXPY memory bandwidth')\n\n# Set the x-axis label\nax.set_xlabel('Flops/s')\n\n# Set the y-axis label\nax.set_ylabel('Flops/byte')\n\n# Set the x-axis limits\nax.set_xlim(10**-1, 10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**10, 10**12)\n\n# Draw a rectangle\nrect = plt.Rectangle((10**-1, 10**10), 10**1, 10**2, color='blue')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([10**-1, 10**1], [10**10, 10**12], color='black')\nax.add_line(line)\n\n# Draw a scatter plot\nscatter = plt.Circle((10**0, 10**11), 10**-1, color='red')\nax.add_artist(scatter)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('f(x) = 0.5x^2 + 0.1x + 0.01')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('f(x)')\n\n# Set the x-axis limits\nax.set_xlim(0.45, 0.75)\n\n# Set the y-axis limits\nax.set_ylim(0.45, 0.75)\n\n# Set the x-axis ticks\nax.set_xticks([0.5, 0.6, 0.7])\n\n# Set the y-axis ticks\nax.set_yticks([0.5, 0.6, 0.7])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.5', '0.6', '0.7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.5', '0.6', '0.7'])\n\n# Set the x-axis grid lines\nax.grid(True)\n\n# Set the y-axis grid lines\nax.grid(True)\n\n# Set the x-axis color\nax.spines['left'].set_color('red')\n\n# Set the y-axis color\nax.spines['bottom'].set_color('blue')\n\n# Set the x-axis width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis position\nax.spines['left'].set_position(('outward', 10))\n\n# Set the y-axis position\nax.spines['bottom'].set_position(('outward', 10))\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis tick color\nax.tick_params(axis='x', colors='orange')\n\n# Set the y-axis tick color\nax.tick_params(axis='y', colors='cyan')\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=45)\n\n# Set the x-axis tick label size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='monospace')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a circle for the logo\ncircle = plt.Circle((0.5, 0.5), 0.4, color='pink')\nax.add_artist(circle)\n\n# Create a rectangle for the chatbot\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\nax.add_artist(rect)\n\n# Create a rectangle for the chatbot\nrect = plt.Rectangle((0.7, 0.2), 0.2, 0.6, color='green')\nax.add_artist(rect)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('CigaR')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Qwen-VL-Max')\n\n# Create a color map for the levels\ncmap = plt.get_cmap('tab20')\n\n# Create a scatter plot with the data\nscatter = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(scatter)\ncbar.set_label('Level')\n\n# Set the limits of the x and y axes\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Set the labels of the x and y axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Define the data for the plots\nx = np.logspace(1, 2, 100)\ny1 = np.power(x, 2)\ny2 = np.power(x, 3)\ny3 = np.power(x, 4)\n\n# Plot the data on the first subplot\naxs[0].plot(x, y1, 'b-')\naxs[0].plot(x, y2, 'g-')\naxs[0].plot(x, y3, 'r-')\naxs[0].set_xscale('log')\naxs[0].set_yscale('log')\naxs[0].set_xlabel('number of matvecs m')\naxs[0].set_ylabel('approximation error ||A - \\u03A6\\u208A\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lightgreen')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([(0.3, 0.7), (0.7, 0.7), (0.5, 0.9)], color='lightblue')\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([(0.5, 0.1), (0.4, 0.3), (0.6, 0.3), (0.5, 0.5), (0.4, 0.7), (0.6, 0.7)], color='lightcoral')\nax.add_artist(star)\n\n# Set the aspect ratio to be equal so circles look round\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Create a rectangle with a green color\nrect1 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect1)\n\n# Create a rectangle with an orange color\nrect2 = plt.Rectangle((0, 0), 10, 10, color='orange')\nax.add_patch(rect2)\n\n# Create a rectangle with a blue color\nrect3 = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect3)\n\n# Set the limits of the x and y axes\nax.set_xlim(-4, 140)\nax.set_ylim(-4, 140)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Sample Number')\n\n# Set the y-axis label\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Create a bar chart with sample data\nx = [0, 1, 2, 3, 4, 5, 6]\ny = [2.5, 3.5, 3.0, 3.5, 4.0, 4.5, 5.0]\nax.bar(x, y, color='blue')\n\n# Add a grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores = [28, 20, 10, 20, 28]\nplayer_a_scores = [35, 26, 20, 22, 30]\nplayer_b_scores = [20, 20, 10, 25, 28]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the scores\nax.plot(games, scores, label='Scores')\n\n# Plot the player A scores\nax.bar(games, player_a_scores, color='green', alpha=0.5, label='Player A')\n\n# Plot the player B scores\nax.bar(games, player_b_scores, color='darkgreen', alpha=0.5, label='Player B')\n\n# Set the title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Variable 1 vs Variable 2')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Create a line plot with random data\nz = np.random.rand(50)\nax.plot(z, 'r-')\n\n# Create a bar chart with random data\nw = np.random.rand(50)\nax.bar(w, w)\n\n# Create a pie chart with random data\nv = np.random.rand(50)\nax.pie(v)\n\n# Create a histogram with random data\nu = np.random.rand(50)\nax.hist(u)\n\n# Create a heatmap with random data\nt = np.random.rand(50, 50)\nax.imshow(t, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\ns = np.random.rand(50, 50)\nax.contour(s)\n\n# Create a polar plot with random data\nr = np.linspace(0, 2*np.pi, 100)\ntheta = np.linspace(0, 2*np.pi, 100)\nax.polar(theta, r)\n\n# Create a 3D plot with random data\nfrom mpl_toolkits.mplot3d import Axes3D\nax = fig.add_subplot(111, projection='3d')\np = np.random.rand(50)\nq = np.random.rand(50)\nr = np.random.rand(50)\nax.plot(p, q, r)\n\n# Create a timeline with random data\nax = fig.add_subplot(111)\nax.plot(range(10), range(10), 'ro-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Create a bar chart\nax.bar(['Female Player', 'Male Player', 'LLM Player', 'Person Player'], [5.7, 6.2, 7.0, 3.4], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Player Type')\n\n# Set the y-axis label\nax.set_ylabel('Average Amount Sent ($)')\n\n# Set the y-axis limits\nax.set_ylim(3, 8)\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 3.5)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(4))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Female Player', 'Male Player', 'LLM Player', 'Person Player'])\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(4, 9, 0.5))\n\n# Set the y-axis tick labels\nax.set_yticklabels(['4.0', '4.5', '5.0', '5.5', '6.0', '6.5', '7.0', '7.5', '8.0'])\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_face"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\nax.set_title('Endurance Race Performance Analysis')\n\n# Athlete Jim\nax.plot([0, 100], [100, 125], 'g-')\nax.text(50, 115, 'Athlete Jim', ha='center', va='center')\n\n# Athlete Bill\nax.plot([0, 100], [100, 130], 'g-')\nax.text(50, 115, 'Athlete Bill', ha='center', va='center')\n\n# Race interrupted due to weather\nax.plot([0, 100], [100, 150], 'r-')\nax.text(50, 145, 'Race interrupted due to weather', ha='center', va='center')\n\n# Rest\nax.plot([0, 100], [100, 160], 'y-')\nax.text(50, 155, 'Rest', ha='center', va='center')\n\n# Running2\nax.plot([0, 100], [100, 175], 'g-')\nax.text(50, 170, 'Running2', ha='center', va='center')\n\n# Running\nax.plot([0, 100], [100, 190], 'g-')\nax.text(50, 185, 'Running', ha='center', va='center')\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='green'))\n\n# Red rectangle for running2\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='red'))\n\n# Orange rectangle for rest\nax.add_patch(plt.Rectangle((0, 100), 100, 50, color='orange'))\n\n# Green rectangle for running\nax.add_patch(plt.Rectangle((0,"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the title of the plot\nax.set_title('Comparative Distribution of Three Different Groups')\n\n# Set the x and y labels\nax.set_xlabel('Number of Observations')\nax.set_ylabel('Value Range')\n\n# Add a legend\nax.legend(['Control Group', 'Treatment Group 1', 'Treatment Group 2'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndates = ['2019-01', '2019-02', '2019-03', '2019-04', '2019-05', '2019-06', '2019-07']\nprices = [350, 150, -50, -120, 200, -100, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(dates, prices, marker='o')\n\n# Set the title and labels\nax.set_title('Waterfall Chart')\nax.set_xlabel('Date')\nax.set_ylabel('Price')\n\n# Set the y-axis limits\nax.set_ylim(-300, 400)\n\n# Set the x-axis limits\nax.set_xlim(0, 7)\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Create a random function for Z values\nZ = np.sin(X**2 + Y**2)\n\n# Create a color map\ncmap = plt.get_cmap('viridis')\n\n# Create a contour plot\ncontour = ax.contourf(X, Y, Z, cmap=cmap)\n\n# Add a color bar\nfig.colorbar(contour)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(2, 2)\n\n# Add a subplot for the first image\nax1 = fig.add_subplot(gs[0, 0])\nax1.imshow(np.random.rand(10, 10), cmap='Oranges')\nax1.set_title('nearest')\n\n# Add a subplot for the second image\nax2 = fig.add_subplot(gs[0, 1])\nax2.imshow(np.random.rand(10, 10), cmap='Purples')\nax2.set_title('nearest')\n\n# Add a subplot for the third image\nax3 = fig.add_subplot(gs[1, 0])\nax3.imshow(np.random.rand(10, 10), cmap='Blues')\nax3.set_title('bilinear')\n\n# Add a subplot for the fourth image\nax4 = fig.add_subplot(gs[1, 1])\nax4.imshow(np.random.rand(10, 10), cmap='Reds')\nax4.set_title('bilinear')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\ny2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\ny3 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the data on the first subplot\naxs[0].plot(x, y1, 'b-')\naxs[0].set_title('Flickr30k')\naxs[0].set_xlabel('Number of bits')\naxs[0].set_ylabel('Recall sum')\n\n# Plot the data on the second subplot\naxs[1].plot(x, y2, 'r-')\naxs[1].set_title('MS-COCO')\naxs[1].set_xlabel('Number of bits')\naxs[1].set_ylabel('Recall sum')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x (m)')\n\n# Set the y-axis label\nax.set_ylabel('y (m)')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Create a scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='blue')\n\n# Create a line plot\nax.plot(np.linspace(0, 25, 100), np.linspace(0, 30, 100), color='red')\n\n# Add a legend\nax.legend(['Monte Carlo', '\u00b1 3-\u03c3 of Prediction', 'Mean-Taylor'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\nax.add_artist(circle)\n\n# Create a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red', fill=False)\nax.add_artist(rectangle)\n\n# Create a triangle\ntriangle = plt.Polygon([[0.1, 0.1], [0.9, 0.1], [0.5, 0.9]], color='green', fill=False)\nax.add_artist(triangle)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the color map for the plot\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of values for the x and y axes\nx = np.linspace(0, 2, 100)\ny = np.linspace(0, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the z values using a simple function\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the surface plot\nsurf = ax.plot_surface(X, Y, Z, cmap=cmap)\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set the title of the plot\nax.set_title('Surface Plot')\n\n# Set the labels for the x and y axes\nax.set_xlabel('\u03b1')\nax.set_ylabel('\u03b2')\nax.set_zlabel('\u0394t')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot([0, 100], [0, 0], 'r-')\nax.plot([0, 50], [1, 1], 'g-')\nax.plot([50, 100], [-1, -1], 'b-')\nax.plot([0, 25], [2, 2], 'c-')\nax.plot([25, 75], [-2, -2], 'm-')\nax.plot([75, 100], [3, 3], 'y-')\n\n# Set the limits of the axes\nax.set_xlim(0, 100)\nax.set_ylim(-3, 3)\n\n# Add labels to the axes\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\n\n# Add a title to the plot\nax.set_title('Utility distribution per topic')\n\n# Add colored rectangles to represent the topics\nax.add_patch(plt.Rectangle((0, 0), 50, 1, color='blue'))\nax.add_patch(plt.Rectangle((50, 0), 50, 1, color='green'))\nax.add_patch(plt.Rectangle((0, 1), 25, 1, color='red'))\nax.add_patch(plt.Rectangle((25, 1), 50, 1, color='black'))\nax.add_patch(plt.Rectangle((75, 1), 25, 1, color='orange'))\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot([0, 100], [0, 0], 'r-')\nax.plot([0, 50], [1, 1], 'g-')\nax.plot([50, 100], [-1, -1], 'b-')\nax.plot([0, 25], [2, 2], 'c-')\nax.plot([25, 75], [-2, -2], 'm-')\nax.plot([75, 100], [3, 3], 'y-')\n\n# Set the limits of the axes\nax.set_xlim(0, 100)\nax.set_ylim(-3, 3)\n\n# Add labels to the axes\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\n\n# Add a title to the plot\nax.set_title('User preference matrix (M)')\n\n# Add colored rectangles to represent the topics\nax.add_patch(plt.Rectangle((0, 0), 50, 1, color='blue'))\nax.add_patch(plt.Rectangle((50, 0), 50, 1, color='green'))\nax.add_patch(plt.Rectangle((0, 1), 25, 1, color='red'))\nax.add_patch(plt.Rectangle((25, 1), 50, 1, color='black'))\nax.add_patch(plt.Rectangle((75, 1), 25, 1, color='orange'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Reactive-2 Payoff')\n\n# Set the x-axis label\nax.set_xlabel('Reactive-2 payoff')\n\n# Set the y-axis label\nax.set_ylabel('Memory-2 payoff')\n\n# Create a scatter plot\nax.scatter(np.random.rand(5), np.random.rand(5), color='red')\n\n# Add a rectangle patch\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_patch(rect)\n\n# Add a text annotation\nax.text(0.5, 0.5, 'num. of points = 5', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Create a scatter plot\nax.scatter(np.random.rand(50), np.random.rand(50), color='blue')\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Set the x and y labels\nax.set_xlabel('Permeability Reduction')\nax.set_ylabel('Porosity')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red', alpha=0.3)\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a line to the plot\nline = plt.Line2D([0, 1], [0, 1], transform=ax.transAxes)\nax.add_line(line)\n\n# Add a scatter plot to the plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, c='blue')\n\n# Add a histogram to the plot\nax.hist(np.random.randn(1000), bins=30, color='orange')\n\n# Add a bar chart to the plot\nx = ['A', 'B', 'C', 'D', 'E']\ny = [1, 2, 3, 4, 5]\nax.bar(x, y, color='red')\n\n# Add a pie chart to the plot\nlabels = 'Fruits', 'Vegetables', 'Meat', 'Fish', 'Dairy'\nsizes = [15, 30, 45, 10, 5]\nax.pie(sizes, labels=labels, colors=['yellow', 'green', 'pink', 'orange', 'purple'])\n\n# Add a text annotation to the plot\nax.annotate('This is a text annotation', xy=(0.5, 0.5), xytext=(0.5, 0.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Add a legend to the plot\nax.legend(['Line', 'Scatter', 'Histogram', 'Bar', 'Pie'], loc='upper left')\n\n# Add a title to the plot\nax.set_title('My Plot')\n\n# Add a label to the x-axis\nax.set_xlabel('X Axis Label')\n\n# Add a label to the y-axis\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['yellow', 'orange', 'pink', 'purple', 'cyan'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='gray')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.sin(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the x-axis label\nax.set_xlabel('Maximum Predicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\n# Create a list of dates\ndates = ['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04', '2021-01-05']\n\n# Create a list of predicted probabilities\nprobabilities = [0.35, 0.40, 0.45, 0.50, 0.55]\n\n# Create a list of actual prices\nprices = [100, 110, 120, 130, 140]\n\n# Create a scatter plot\nax.scatter(probabilities, prices)\n\n# Add a line graph\nax.plot(probabilities, prices, color='gray')\n\n# Add a legend\nax.legend(['Actual Prices'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Bias Score by Data Type and Model')\n\n# Set the x-axis label\nax.set_xlabel('Data Type')\n\n# Set the y-axis label\nax.set_ylabel('Bias Score')\n\n# Define the data points\nx = ['INT8', 'INT4', 'INT2']\ny = [9.3, 9.1, 9.0]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Model1', 'Model2', 'Model3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Predicted vs Actual')\n\n# Set the x-axis label\nax.set_xlabel('Maximum Predicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Draw a line graph with random data\nx_line = np.linspace(0, 1, 100)\ny_line = np.sin(x_line * np.pi * 2)\nax.plot(x_line, y_line, 'r-')\n\n# Add a legend\nax.legend(['Known', 'Unknown'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Empirical Lipschitz Constant')\n\n# Set the x-axis label\nax.set_xlabel('Width of Layer')\n\n# Set the y-axis label\nax.set_ylabel('Lipschitz Constant')\n\n# Define the data points for the plots\nx = np.array([2**i for i in range(1, 12)])\ny1 = np.array([10000 * i for i in range(1, 12)])\ny2 = np.array([5000 * i for i in range(1, 12)])\ny3 = np.array([2500 * i for i in range(1, 12)])\ny4 = np.array([1250 * i for i in range(1, 12)])\ny5 = np.array([625 * i for i in range(1, 12)])\n\n# Plot the data points\nax.plot(x, y1, 'g-', label='Cos | n0 = 200')\nax.plot(x, y2, 'g-', label='Cos | n0 = 400')\nax.plot(x, y3, 'b-', label='ReLU | n0 = 200')\nax.plot(x, y4, 'b-', label='ReLU | n0 = 400')\nax.plot(x, y5, 'm-', label='ReLU | n0 = 400')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [7000, 6500, 6000, 5500, 5000, 4500, 4000, 3500, 3000, 2500, 2000], 'r-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [7000, 6500, 6000, 5500, 5000, 4500, 4000, 3500, 3000, 2500, 2000], 'g-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [7000, 6500, 6000, 5500, 5000, 4500, 4000, 3500, 3000, 2500, 2000], 'b-')\n\n# Set the title and labels\nax.set_title('Stock Market Analysis')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Stock Price')\n\n# Add legends\nax.legend(['WI', 'ISQ', 'WIQL', 'Greedy'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Discounted Cumulative Reward')\n\n# Set the x-axis label\nax.set_xlabel('Time Steps')\n\n# Set the y-axis label\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Create a list of time steps\ntime_steps = np.arange(0, 201, 1)\n\n# Create a list of discounted cumulative rewards for WI\nwi_rewards = [0.35, 0.38, 0.42, 0.45, 0.47, 0.49, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55]\n\n# Create a list of discounted cumulative rewards for ISQ\nisq_rewards = [0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42, 0.44, 0.46, 0.48, 0.50, 0.52, 0.54, 0.56, 0.58, 0.60, 0.62, 0.64, 0.66, 0.68, 0.70]\n\n# Plot the discounted cumulative rewards for WI\nax.plot(time_steps, wi_rewards, 'b-', label='WI')\n\n# Plot the discounted cumulative rewards for ISQ\nax.plot(time_steps, isq_rewards, 'r-', label='ISQ')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Add a title to the plot\nax.set_title('Weather Forecast')\n\n# Add a legend to the plot\nax.legend()\n\n# Add a grid to the plot\nax.grid(True)\n\n# Add a scatter plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], c='orange', label='Daytime Sunny')\n\n# Add a scatter plot to the plot\nax.scatter([7, 8, 9], [10, 11, 12], c='blue', label='Night Rainy')\n\n# Add a scatter plot to the plot\nax.scatter([13, 14, 15], [16, 17, 18], c='green', label='PGST')\n\n# Add a scatter plot to the plot\nax.scatter([19, 20, 21], [22, 23, 24], c='red', label='Snowy')\n\n# Add a scatter plot to the plot\nax.scatter([25, 26, 27], [28, 29, 30], c='yellow', label='Sunny')\n\n# Add a scatter plot to the plot\nax.scatter([31, 32, 33], [34, 35, 36], c='cyan', label='Rainy')\n\n# Add a scatter plot to the plot\nax.scatter([37, 38, 39], [40, 41, 42], c='magenta', label='Cloudy')\n\n# Add a scatter plot to the plot\nax.scatter([43, 44, 45], [46, 47, 48], c='black', label='Foggy')\n\n# Add a scatter plot to the plot\nax.scatter([49, 50, 51], [52, 53, 54], c='white', label='Clear')\n\n# Add a scatter plot to the plot\nax.scatter([55, 56, 57], [58, 59, 60], c='gray', label='Windy')\n\n# Add a scatter plot to the plot\nax.scatter([61, 62, 63], [64, 65, 66], c='brown', label='Stormy')\n\n# Add a scatter plot to the plot\nax.scatter([67, 68, 69], [70, 71, 72], c='pink', label='Hazy')\n\n# Add a scatter plot to the plot\nax.scatter([73, 74, 75], [76, 77, 78], c='purple', label='Frosty')\n\n# Add a scatter plot to the plot\nax.scatter([79, 80, 81], [82, 83, 84], c='silver', label='Icy')\n\n# Add a scatter plot to the plot\nax.scatter([85, 86, 87], [88, 89, 90], c='gold', label='Misty')\n\n# Add a scatter plot to the plot\nax.scatter([91, 92, 93], [94, 95, 96], c='lime', label='Dusty')\n\n# Add a scatter plot to the plot\nax.scatter([97, 98, 99], [100, 101, 102], c='navy', label='Blizzard')\n\n# Add a scatter plot to the plot\nax.scatter([103, 104, 105], [106, 107, 108], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([109, 110, 111], [112, 113, 114], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([115, 116, 117], [118, 119, 120], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([121, 122, 123], [124, 125, 126], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([127, 128, 129], [130, 131, 132], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([133, 134, 135], [136, 137, 138], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([139, 140, 141], [142, 143, 144], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([145, 146, 147], [148, 149, 150], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([151, 152, 153], [154, 155, 156], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([157, 158, 159], [160, 161, 162], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([163, 164, 165], [166, 167, 168], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([169, 170, 171], [172, 173, 174], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([175, 176, 177], [178, 179, 180], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([181, 182, 183], [184, 185, 186], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([187, 188, 189], [190, 191, 192], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([193, 194, 195], [196, 197, 198], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([199, 200, 201], [202, 203, 204], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([205, 206, 207], [208, 209, 210], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([211, 212, 213], [214, 215, 216], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([217, 218, 219], [220, 221, 222], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([223, 224, 225], [226, 227, 228], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([229, 230, 231], [232, 233, 234], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([235, 236, 237], [238, 239, 240], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([241, 242, 243], [244, 245, 246], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([247, 248, 249], [250, 251, 252], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([253, 254, 255], [256, 257, 258], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([259, 260, 261], [262, 263, 264], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([265, 266, 267], [268, 269, 270], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([271, 272, 273], [274, 275, 276], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([277, 278, 279], [280, 281, 282], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([283, 284, 285], [286, 287, 288], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([289, 290, 291], [292, 293, 294], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([295, 296, 297], [298, 299, 300], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([301, 302, 303], [304, 305, 306], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([307, 308, 309], [310, 311, 312], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([313, 314, 315], [316, 317, 318], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([319, 320, 321], [322, 323, 324], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([325, 326, 327], [328, 329, 330], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([331, 332, 333], [334, 335, 336], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([337, 338, 339], [340, 341, 342], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([343, 344, 345], [346, 347, 348], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([349, 350, 351], [352, 353, 354], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([355, 356, 357], [358, 359, 360], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([361, 362, 363], [364, 365, 366], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([367, 368, 369], [370, 371, 372], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([373, 374, 375], [376, 377, 378], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([379, 380, 381], [382, 383, 384], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([385, 386, 387], [388, 389, 390], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([391, 392, 393], [394, 395, 396], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([397, 398, 399], [400, 401, 402], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([403, 404, 405], [406, 407, 408], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([409, 410, 411], [412, 413, 414], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([415, 416, 417], [418, 419, 420], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([421, 422, 423], [424, 425, 426], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([427, 428, 429], [430, 431, 432], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([433, 434, 435], [436, 437, 438], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([439, 440, 441], [442, 443, 444], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([445, 446, 447], [448, 449, 450], c='gold', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([451, 452, 453], [454, 455, 456], c='lime', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([457, 458, 459], [460, 461, 462], c='navy', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([463, 464, 465], [466, 467, 468], c='maroon', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([469, 470, 471], [472, 473, 474], c='olive', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([475, 476, 477], [478, 479, 480], c='silver', label='Tropical')\n\n# Add a scatter plot to the plot\nax.scatter([481, 482, 483], [484, 485, 486], c='gold', label='Tropical')\n\n"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw a rectangle\nrectangle = plt.Rectangle((-2, -1), 4, 2, color='blue')\nax.add_patch(rectangle)\n\n# Draw a circle\ncircle = plt.Circle((0, 0), 1, color='red')\nax.add_artist(circle)\n\n# Draw a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, color='green')\n\n# Set the limits of the axes\nax.set_xlim(-8, 8)\nax.set_ylim(-8, 8)\n\n# Set the labels of the axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('Fitness Tracker', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Calories Burned', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 35])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0K', '5K', '10K'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '35'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time Step')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Set the x-axis limits\nax.set_xlim(0, 3)\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Add a legend to the plot\nax.legend()\n\n# Add a grid to the plot\nax.grid(True)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a line to the plot\nline = plt.Line2D([0, 1], [0, 1], color='blue')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.scatter([0, 1], [0, 1], color='green')\nax.add_collection(scatter)\n\n# Add a bar chart to the plot\nbar = plt.bar([0, 1], [0, 1], color='yellow')\nax.add_collection(bar)\n\n# Add a pie chart to the plot\npie = plt.pie([0, 1], colors=['red', 'blue'])\nax.add_collection(pie)\n\n# Add a histogram to the plot\nhist = plt.hist([0, 1], bins=10, color='purple')\nax.add_collection(hist)\n\n# Add a box plot to the plot\nbox = plt.boxplot([0, 1], vert=True, patch_artist=True)\nax.add_collection(box)\n\n# Add a violin plot to the plot\nviolin = plt.violinplot([0, 1], showmeans=True)\nax.add_collection(violin)\n\n# Add a heatmap to the plot\nheatmap = plt.imshow([[0, 1], [1, 0]], cmap='hot', interpolation='nearest')\nax.add_collection(heatmap)\n\n# Add a contour plot to the plot\ncontour = plt.contourf([0, 1], [0, 1], [[0, 1], [1, 0]])\nax.add_collection(contour)\n\n# Add a contourf plot to the plot\ncontourf = plt.contourf([0, 1], [0, 1], [[0, 1], [1, 0]])\nax.add_collection(contourf)\n\n# Add a streamplot to the plot\nstream = plt.streamplot([0, 1], [0, 1], [[0, 1], [1, 0]])\nax.add_collection(stream)\n\n# Add a quiver plot to the plot\nquiver = plt.quiver([0, 1], [0, 1], [[0, 1], [1, 0]])\nax.add_collection(quiver)\n\n# Add a polar plot to the plot\npolar = plt.polar([0, 1], [0, 1])\nax.add_collection(polar)\n\n# Add a 3D plot to the plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nax3d.plot([0, 1], [0, 1], [0, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a list of colors for the bars\ncolors = ['red', 'orange', 'blue', 'green', 'pink']\n\n# Create a list of labels for the bars\nlabels = ['clip', 'laion (5k)', 'coco (5k)', 'laion (10k)', 'coco (10k)']\n\n# Create a bar chart with the data\nax.bar(labels, [0.75, 0.72, 0.78, 0.74, 0.76], color=colors)\n\n# Set the limits of the x-axis\nax.set_xlim(0, 5)\n\n# Set the limits of the y-axis\nax.set_ylim(0.53, 0.80)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the graph\nax.set_title('Cumulative Performance Gain by Augmentation Level')\n\n# Create a bar chart with the data\nax.bar(['Content', 'Organization', 'Language'], [1, 2, 3], color='blue')\nax.bar(['Content', 'Organization', 'Language'], [2, 3, 4], color='orange')\nax.bar(['Content', 'Organization', 'Language'], [3, 4, 5], color='green')\n\n# Set the x-axis label\nax.set_xlabel('n')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\npopulations = [1000, 1500, 2000, 3000, 4000, 5000, 6000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, populations, color='blue')\n\n# Set the title and labels\nax.set_title('World population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Add colored rectangles for each continent\nrectangles = [\n    plt.Rectangle((1950, 1000), 10, 1000, color='green'),\n    plt.Rectangle((1960, 1500), 10, 1000, color='yellow'),\n    plt.Rectangle((1970, 2000), 10, 1000, color='red'),\n    plt.Rectangle((1980, 3000), 10, 1000, color='orange'),\n    plt.Rectangle((1990, 4000), 10, 1000, color='purple'),\n    plt.Rectangle((2000, 5000), 10, 1000, color='brown'),\n    plt.Rectangle((2010, 6000), 10, 1000, color='pink')\n]\n\nfor rectangle in rectangles:\n    ax.add_patch(rectangle)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim([0, 60])\n\n# Set the y-axis limits\nax.set_ylim([0, 7])\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 61, 10))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 8, 1))\n\n# Set the x-axis labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50', '60'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7'])\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n\n# Set the color of the line\nax.plot([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], 'b-')\n\n# Set the color of the scatter points\nax.scatter([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], c='r')\n\n# Set the color of the bar chart\nax.bar([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], color='g')\n\n# Set the color of the histogram\nax.hist([0, 1, 2, 3, 4, 5, 6], bins=10, color='y')\n\n# Set the color of the pie chart\nax.pie([0, 1, 2, 3, 4, 5, 6], colors=['b', 'g', 'r', 'c', 'm', 'y', 'k'], autopct='%1.1f%%')\n\n# Set the color of the box plot\nax.boxplot([0, 1, 2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='g'))\n\n# Set the color of the violin plot\nax.violinplot([0, 1, 2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\n\n# Set the color of the scatter plot\nax.scatter([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], c='r')\n\n# Set the color of the bar chart\nax.bar([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], color='g')\n\n# Set the color of the histogram\nax.hist([0, 1, 2, 3, 4, 5, 6], bins=10, color='y')\n\n# Set the color of the pie chart\nax.pie([0, 1, 2, 3, 4, 5, 6], colors=['b', 'g', 'r', 'c', 'm', 'y', 'k'], autopct='%1.1f%%')\n\n# Set the color of the box plot\nax.boxplot([0, 1, 2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='g'))\n\n# Set the color of the violin plot\nax.violinplot([0, 1, 2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\n\n# Set the color of the scatter plot\nax.scatter([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], c='r')\n\n# Set the color of the bar chart\nax.bar([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], color='g')\n\n# Set the color of the histogram\nax.hist([0, 1, 2, 3, 4, 5, 6], bins=10, color='y')\n\n# Set the color of the pie chart\nax.pie([0, 1, 2, 3, 4, 5, 6], colors=['b', 'g', 'r', 'c', 'm', 'y', 'k'], autopct='%1.1f%%')\n\n# Set the color of the box plot\nax.boxplot([0, 1, 2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='g'))\n\n# Set the color of the violin plot\nax.violinplot([0, 1, 2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\n\n# Set the color of the scatter plot\nax.scatter([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], c='r')\n\n# Set the color of the bar chart\nax.bar([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], color='g')\n\n# Set the color of the histogram\nax.hist([0, 1, 2, 3, 4, 5, 6], bins=10, color='y')\n\n# Set the color of the pie chart\nax.pie([0, 1, 2, 3, 4, 5, 6], colors=['b', 'g', 'r', 'c', 'm', 'y', 'k'], autopct='%1.1f%%')\n\n# Set the color of the box plot\nax.boxplot([0, 1, 2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='g'))\n\n# Set the color of the violin plot\nax.violinplot([0, 1, 2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\n\n# Set the color of the scatter plot\nax.scatter([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], c='r')\n\n# Set the color of the bar chart\nax.bar([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], color='g')\n\n# Set the color of the histogram\nax.hist([0, 1, 2, 3, 4, 5, 6], bins=10, color='y')\n\n# Set the color of the pie chart\nax.pie([0, 1, 2, 3, 4, 5, 6], colors=['b', 'g', 'r', 'c', 'm', 'y', 'k'], autopct='%1.1f%%')\n\n# Set the color of the box plot\nax.boxplot([0, 1, 2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='g'))\n\n# Set the color of the violin plot\nax.violinplot([0, 1, 2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\n\n# Set the color of the scatter plot\nax.scatter([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], c='r')\n\n# Set the color of the bar chart\nax.bar([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], color='g')\n\n# Set the color of the histogram\nax.hist([0, 1, 2, 3, 4, 5, 6], bins=10, color='y')\n\n# Set the color of the pie chart\nax.pie([0, 1, 2, 3, 4, 5, 6], colors=['b', 'g', 'r', 'c', 'm', 'y', 'k'], autopct='%1.1f%%')\n\n# Set the color of the box plot\nax.boxplot([0, 1, 2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='g'))\n\n# Set the color of the violin plot\nax.violinplot([0, 1, 2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\n\n# Set the color of the scatter plot\nax.scatter([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], c='r')\n\n# Set the color of the bar chart\nax.bar([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], color='g')\n\n# Set the color of the histogram\nax.hist([0, 1, 2, 3, 4, 5, 6], bins=10, color='y')\n\n# Set the color of the pie chart\nax.pie([0, 1, 2, 3, 4, 5, 6], colors=['b', 'g', 'r', 'c', 'm', 'y', 'k'], autopct='%1.1f%%')\n\n# Set the color of the box plot\nax.boxplot([0, 1, 2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='g'))\n\n# Set the color of the violin plot\nax.violinplot([0, 1, 2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\n\n# Set the color of the scatter plot\nax.scatter([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], c='r')\n\n# Set the color of the bar chart\nax.bar([0, 10, 20, 30, 40, 50, 60], [0, 1, 2, 3, 4, 5, 6], color='g')\n\n# Set the color of the histogram\nax.hist([0, 1, 2, 3, 4, 5, 6], bins=10, color='y')\n\n# Set the color of the pie chart\nax.pie([0, 1, 2, 3, 4, 5, 6], colors=['b', 'g', 'r', 'c', 'm', 'y', 'k'], autopct='%1.1f%%')\n\n# Set the color of the box plot\nax.boxplot([0, 1, 2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='g'))\n\n# Set the color of the violin plot\nax.violinplot([0, 1, 2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, "}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Machine Learning Model Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Define the data for the plot\nmodels = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracies = [55, 45, 35, 25, 15, 50, 40, 30, 20, 10]\n\n# Plot the data\nax.bar(models, accuracies, color='skyblue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Set the title of the plot\nax.set_title('Average Monthly Sales by Product Across Regions')\n\n# Create a bar chart with the sales data\nax.bar(['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], [80, 60, 40, 20, 0], color='blue')\n\n# Add a grid to the plot\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('lavender')\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction', fontsize=24)\n\n# Set the x-axis label\nax.set_xlabel('Time', fontsize=18)\n\n# Set the y-axis label\nax.set_ylabel('Price', fontsize=18)\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'])\n\n# Set the y-ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\nax.set_yticklabels(['$0.00', '$0.25', '$0.50', '$0.75', '$1.00'])\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4], [0.5, 0.25, 0.75, 0.5, 0.25], 'b-', lw=2)\nax.plot([0, 1, 2, 3, 4], [0.25, 0.5, 0.25, 0.5, 0.25], 'g-', lw=2)\nax.plot([0, 1, 2, 3, 4], [0.75, 0.25, 0.5, 0.25, 0.5], 'r-', lw=2)\nax.plot([0, 1, 2, 3, 4], [0.5, 0.75, 0.25, 0.5, 0.25], 'c-', lw=2)\nax.plot([0, 1, 2, 3, 4], [0.25, 0.5, 0.75, 0.25, 0.5], 'm-', lw=2)\nax.plot([0, 1, 2, 3, 4], [0.5, 0.25, 0.5, 0.75, 0.25], 'y-', lw=2)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbeauty_data = [2.2, 11.2, 19.9]\nmovie_lens_data = [3.0, 4.1, 5.1]\nyelp_data = [4.8, 4.9]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot the data for each category\naxs[0].bar(['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec'], beauty_data)\naxs[1].bar(['MovieLens-1M'], movie_lens_data)\naxs[2].bar(['Yelp'], yelp_data)\n\n# Set the title for each subplot\naxs[0].set_title('Beauty')\naxs[1].set_title('MovieLens-1M')\naxs[2].set_title('Yelp')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\nprices = [4.4, 2.3, 1.5, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.barh(models, improvement, color='blue')\nax.set_xlabel('Improvement [%]')\nax.set_title('ENDEFRRITES sampled')\n\n# Add a legend\nlegend_elements = [\n    plt.Line2D([0], [0], marker='o', color='w', label='EN', markerfacecolor='blue', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='FR', markerfacecolor='orange', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='ES', markerfacecolor='green', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='DE', markerfacecolor='brown', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='IT', markerfacecolor='yellow', markersize=10)\n]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Pheme F1-score')\n\n# Set the x-axis label\nax.set_xlabel('Pheme')\n\n# Set the y-axis label\nax.set_ylabel('F1-score')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6])\n\n# Set the x-tick labels\nax.set_xticklabels(['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL'])\n\n# Set the y-ticks\nax.set_yticks([0.75, 0.8, 0.85, 0.9, 0.95])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.75', '0.8', '0.85', '0.9', '0.95'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the x-axis labels\nax.set_xticks([1, 2, 3, 4, 5, 6])\nax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'aqua', 'yellow', 'orange', 'red'])\n\n# Add rectangles for each bar\nax.bar([1, 2, 3, 4, 5, 6], [20, 30, 40, 50, 40, 30], color='blue')\nax.bar([1, 2, 3, 4, 5, 6], [10, 20, 30, 40, 30, 20], color='aqua')\nax.bar([1, 2, 3, 4, 5, 6], [5, 15, 25, 35, 25, 15], color='yellow')\nax.bar([1, 2, 3, 4, 5, 6], [15, 25, 35, 45, 35, 25], color='orange')\nax.bar([1, 2, 3, 4, 5, 6], [25, 35, 45, 55, 45, 35], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Create a bar chart with two bars\nax.bar(['s1', 's2'], [700, 800], color='red')\nax.set_xlabel('Count')\nax.set_ylabel('Score')\n\n# Create a scatter plot with three points\nax.scatter([1, 2, 3], [500, 600, 700], color='blue')\n\n# Create a line graph with four points\nax.plot([1, 2, 3, 4], [100, 200, 300, 400], color='green')\n\n# Add a legend\nax.legend(['O', 'T', 'P'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nproducts = ['ARC', 'MMLU', 'TruthfulQ&A', 'Winograde', 'Average']\naccuracies = [53.0, 51.3, 56.4, 56.4, 53.1]\ntasks = ['Evol-Instruc-27B', 'Evol-Instruc-70k', 'Evol-Instruc-AlpaGasus-1k', 'Evol-Instruc-1k-longest', 'LIMA-1k']\ntask_accuracies = [73.1, 70.4, 73.2, 72.8, 71.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the accuracies of the products\nax.bar(products, accuracies, color='skyblue')\n\n# Plot the accuracies of the tasks\nfor i, task in enumerate(tasks):\n    ax.bar(task, task_accuracies[i], bottom=accuracies[i], color='lightcoral')\n\n# Set the title and labels\nax.set_title('Product and Task Accuracy')\nax.set_xlabel('Products and Tasks')\nax.set_ylabel('Accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(35, 75)\n\n# Set the y-axis limits\nax.set_ylim(40, 70)\n\n# Set the x-axis ticks\nax.set_xticks(range(35, 80, 5))\n\n# Set the y-axis ticks\nax.set_yticks(range(40, 75, 5))\n\n# Set the x-axis label\nax.set_xlabel('Time (seconds)')\n\n# Set the y-axis label\nax.set_ylabel('Speed (mph)')\n\n# Set the title of the plot\nax.set_title('Car Performance Comparison')\n\n# Create a bar chart for each car\nax.bar(['GSM8K', 'MNLI', 'race@High'], [50, 60, 55], color='blue')\nax.bar(['GSM8K', 'MNLI', 'race@High'], [55, 65, 60], color='cyan')\nax.bar(['GSM8K', 'MNLI', 'race@High'], [60, 70, 65], color='darkblue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('DLMA VS. LLAMA - 2021')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Match')\nax.set_ylabel('Win Percentage')\n\n# Set the data for the bars\nmatches = ['DLMA-7B VS. LLAMa-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMa-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\nwin_percentages = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\nloss_percentages = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\n\n# Create a bar chart with the win percentages\nbars = ax.bar(matches, win_percentages, color='blue')\n\n# Add the loss percentages as a second bar chart on top of the first one\nfor i, bar in enumerate(bars):\n    ax.bar(matches[i], loss_percentages[i], bottom=win_percentages[i], color='red')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('green')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', transform=ax.transAxes, ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', transform=ax.transAxes, ha='center', va='"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Percentage of Experiments')\n\n# Define the data for the plot\nx = [0, 10, 20, 30, 40]\ny = [0.5, 0.7, 0.8, 0.9, 0.95]\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Add a legend\nax.legend(['trot', 'pace', 'bound', 'pronk', 'transition'], loc='upper left')\n\n# Set the color of the bars\nbar_colors = ['green', 'red', 'purple', 'brown', 'grey']\n\n# Add bars to the plot\nfor i in range(len(x)):\n    ax.barh(i, 0.1, color=bar_colors[i])\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Top 10 Games by Player Count')\n\n# Set the labels for the x-axis\nax.set_xlabel('Player Count')\nax.set_ylabel('Game Name')\n\n# Set the data for the bars\nx = [24, 15, 10, 9, 8, 7, 6, 5, 4, 3]\ny = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\n\n# Set the colors for the bars\ncolors = ['blue', 'purple', 'gray', 'lightgray', 'darkgray', 'silver', 'gold', 'orange', 'brown', 'pink']\n\n# Set the width of the bars\nwidth = 0.5\n\n# Plot the bars\nbars = ax.barh(y, x, color=colors, height=width)\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_y() + bar.get_height()/2\n    ax.text(bar.get_width(), yval, round(bar.get_width()), va='center', ha='left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the charts\nbenefits_data = [14.8, 29.6, 29.6, 18.5, 8.4, 9.0]\nreliability_data = [9.4, 24.1, 24.1, 40.7, 27.8, 9.3]\nsecurity_data = [8.3, 14.8, 20.4, 16.7, 9.3]\nprivacy_data = [24.1, 29.6, 20.4, 16.7, 9.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.bar(range(len(benefits_data)), benefits_data, color='red')\nax.bar(range(len(reliability_data)), reliability_data, color='orange')\nax.bar(range(len(security_data)), security_data, color='silver')\nax.bar(range(len(privacy_data)), privacy_data, color='blue')\n\n# Set the labels and title\nax.set_xlabel('Product')\nax.set_ylabel('Percentage')\nax.set_title('Product Comparison')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Define the data for the plots\nx = np.linspace(0.5, 1.5, 10)\ny1 = np.random.randint(-10, 10, 10)\ny2 = np.random.randint(-10, 10, 10)\ny3 = np.random.randint(-10, 10, 10)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Ours')\nax.plot(x, y2, 'c-', label='Saliency-based Sampling')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Ratings of Language Models on a Scale from 1-4')\n\n# Set the x-axis label\nax.set_xlabel('Language Models')\n\n# Set the y-axis label\nax.set_ylabel('Ratings')\n\n# Define the data for the bar chart\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\nratings = [3.2, 2.8, 2.5, 2.2, 1.8, 1.5]\n\n# Create a bar chart with the data\nax.bar(models, ratings, color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.bar(models, accuracies, color='blue')\n\n# Set the title and labels\nax.set_title('Model Accuracy')\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('GPT4-as-a-judge')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Voltage (V)')\n\n# Create a bar chart with the data\nax.bar(['Alpaca-52k+', 'Alpaca-1k+', 'LIMa-1k+'], [78.8, 67.4, 44.2], color='blue')\nax.bar(['Alpaga-1k-longest wins', 'Alpaca-1k-longest loses', 'Alpaga-1k-longest losses'], [11.7, 18.1, 33.9], color='cyan')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Ang', 'Ct', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nvalues = [1200, 800, 500, 300, 2000, 3500, 1500, 100]\ncolors = ['red', 'green', 'grey', 'orange', 'yellow', 'blue', 'cyan', 'magenta']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(emotions, values, color=colors)\n\n# Set the title and labels\nax.set_title('Emotion Intensity')\nax.set_xlabel('Emotions')\nax.set_ylabel('Intensity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncar_models = ['GPT-4V', 'RoboCodeX']\nsuccess_rates = [0.95, 0.85]\noccupancy_errors = [0.02, 0.03]\ngrounding_errors = [0.01, 0.02]\ngripper_collision_errors = [0.01, 0.01]\ntrajectory_optimization_errors = [0.01, 0.01]\ngrasping_failed = [0.01, 0.01]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the success rates\nax.bar(car_models, success_rates, color='green')\n\n# Plot the occupancy errors\nax.bar(car_models, occupancy_errors, bottom=success_rates, color='orange')\n\n# Plot the grounding errors\nax.bar(car_models, grounding_errors, bottom=[i+j for i,j in zip(success_rates, occupancy_errors)], color='gray')\n\n# Plot the gripper collision errors\nax.bar(car_models, gripper_collision_errors, bottom=[i+j+k for i,j,k in zip(success_rates, occupancy_errors, grounding_errors)], color='yellow')\n\n# Plot the trajectory optimization errors\nax.bar(car_models, trajectory_optimization_errors, bottom=[i+j+k+l for i,j,k,l in zip(success_rates, occupancy_errors, grounding_errors, gripper_collision_errors)], color='blue')\n\n# Plot the grasping failed\nax.bar(car_models, grasping_failed, bottom=[i+j+k+l+m for i,j,k,l,m in zip(success_rates, occupancy_errors, grounding_errors, gripper_collision_errors, trajectory_optimization_errors)], color='purple')\n\n# Set the x-axis labels\nax.set_xticks(range(len(car_models)))\nax.set_xticklabels(car_models)\n\n# Set the y-axis label\nax.set_ylabel('Percentage of Total Trials')\n\n# Set the title\nax.set_title('Car Model Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Transmission Delay (ms)')\n\n# Set the x-axis label\nax.set_xlabel('Datasets')\n\n# Set the y-axis label\nax.set_ylabel('Transmission Delay (ms)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['VOC 2012', 'DEEPJSCC w/ ofdm', 'OURS', 'COCO 2017'])\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4, 5])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'JPEG', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DEEPJSCC w/ ofdm', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'OURS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'COCO 2017', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '1', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '2', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '3', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '4', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '5', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '6', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '7', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '8', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '9', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '10', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '11', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '12', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '13', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '14', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '15', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '16', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '17', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '18', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '19', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '20', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '21', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '22', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '23', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '24', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '25', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '26', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '27', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '28', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '29', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '30', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '31', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '32', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '33', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '34', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '35', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '36', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '37', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '38', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '39', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '40', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '41', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '42', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '43', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '44', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '45', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '46', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '47', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '48', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '49', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '50', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '51', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '52', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '53', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '54', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '55', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '56', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '57', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '58', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '59', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '60', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '61', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '62', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '63', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '64', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '65', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '66', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '67', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '68', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '69', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '70', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '71', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '72', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Restaurant Menu')\n\n# Set the x-axis label\nax.set_xlabel('PDEs')\n\n# Set the y-axis label\nax.set_ylabel('Log L2')\n\n# Define the data for the plot\nx = ['Wave', 'Diffusion', 'Heat', 'Poission', 'Burgers', 'N-S']\ny = [1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\n\n# Define the colors for the bars\ncolors = ['blue', 'red', 'orange', 'green', 'purple', 'brown']\n\n# Plot the bars\nfor i in range(len(x)):\n    ax.barh(i, y[i], color=colors[i])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the title of the plot\nax.set_title('Models')\n\n# Add a legend\nax.legend(['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model'])\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Metric Values')\n\n# Set the y-axis limits\nax.set_ylim(0.925, 0.975)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6])\n\n# Set the x-axis labels\nax.set_xticklabels(['LIVE', 'CSIQ', 'TID2013', 'LIVE-M', 'PICC', 'SROCC', 'LIVE'])\n\n# Set the y-axis ticks\nax.set_yticks([0.925, 0.930, 0.935, 0.940, 0.945, 0.950, 0.955, 0.960, 0.965, 0.970, 0.975])\n\n# Set the y-axis labels\nax.set_yticklabels(['0.925', '0.930', '0.935', '0.940', '0.945', '0.950', '0.955', '0.960', '0.965', '0.970', '0.975'])\n\n# Set the color of the bars\nbar_colors = ['blue', 'orange', 'skyblue', 'saddlebrown']\n\n# Set the width of the bars\nbar_width = 0.8\n\n# Set the position of the bars\nbar_positions = [0.2, 1.2, 2.2, 3.2]\n\n# Set the height of the bars\nbar_heights = [0.95, 0.96, 0.97, 0.98]\n\n# Set the bar chart\nax.bar(bar_positions, bar_heights, bar_width, color=bar_colors)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\ny = [28.33, 31.11, 60.56]\nz = [85.0, 56.11, 42.78]\nw = [99.44, 60.56, 44.44]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y, color='blue')\nax.plot(x, z, color='red')\nax.plot(x, w, color='purple')\n\n# Set the title and labels\nax.set_title('One-Pass Rate Comparison')\nax.set_xlabel('Model')\nax.set_ylabel('One-Pass Rate (%)')\n\n# Add a legend\nax.legend(['Zero-shot', 'One-shot', 'DS-Agent'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nlabels = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_rates = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_rates = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_rates = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the win rates\nax.bar(labels, win_rates, color='skyblue', label='Win')\n\n# Plot the tie rates\nax.bar(labels, tie_rates, bottom=win_rates, color='lightgreen', label='Tie')\n\n# Plot the loss rates\nax.bar(labels, loss_rates, bottom=[i+j for i,j in zip(win_rates, tie_rates)], color='coral', label='Loss')\n\n# Set the x-axis labels\nax.set_xticks(range(len(labels)))\nax.set_xticklabels(labels)\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Set the title of the plot\nax.set_title('Comparison of LMM-based vs. TPLM-based, LMM-based vs. Template, LMM-based vs. Markdown, TPLM-based vs. Template, TPLM-based vs. Markdown, and Markdown vs. Template')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nspecies = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nprobabilities = [0.72, 0.74, 0.56]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(species, probabilities, color='blue')\n\n# Set the title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Species')\nax.set_ylabel('Probability of Improvement')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 27.7, 29.8, 27.1]\nfollowing_error_rate = [10.0, 10.0, 50.7, 63.4, 38.5]\nformat_error_rate = [83.3, 48.1, 50.7, 50.7, 50.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(steps, avg_following_rate, 'b-', label='Avg. Following Rate')\nax.plot(steps, following_error_rate, 'g-', label='Following-related Format Error Rate')\nax.plot(steps, format_error_rate, 'r-', label='Following-related Error Rate')\n\n# Set the title and labels\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the x-ticks\nax.set_xticks(range(len(products)))\nax.set_xticklabels(products)\n\n# Set the y-limits\nax.set_ylim(0, 100)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#F5F5DC')\n\n# Set the border color\nax.spines['bottom'].set_color('#000000')\nax.spines['top'].set_color('#000000')\nax.spines['right'].set_color('#000000')\nax.spines['left'].set_color('#000000')\n\n# Set the tick colors\nax.tick_params(axis='x', colors='#000000')\nax.tick_params(axis='y', colors='#000000')\n\n# Set the tick labels\nax.set_yticklabels(['0%', '20%', '40%', '60%', '80%', '100%'])\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Gcc', 'Gobmk', 'Hmmer', 'Liba', 'Mc', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'cyan', 'magenta', 'brown', 'pink', 'gray', 'silver', 'gold', 'lime', 'teal', 'navy', 'maroon', 'olive', 'silver', 'black']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [20, 30"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Llama2', 'Mistral']\ny = [5.52, 5.53]\ny1 = [5.83, 5.54]\ny2 = [5.84, 5.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y, color='purple')\nax.plot(x, y1, color='brown')\nax.plot(x, y2, color='blue')\n\n# Set the title and labels\nax.set_title('MT-Bench Score')\nax.set_xlabel('Models')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Set the title of the plot\nax.set_title('Real Estate Prices')\n\n# Set the x-axis label\nax.set_xlabel('Number of Clusters')\n\n# Set the y-axis label\nax.set_ylabel('Price (in millions)')\n\n# Set the x-ticks\nax.set_xticks([100, 1000])\n\n# Set the y-ticks\nax.set_yticks(range(47, 53))\n\n# Set the grid\nax.grid(True)\n\n# Set the color bar\ncbar = fig.colorbar(ax.imshow([[49.98, 51.05], [49.63, 50.74]], cmap='YlOrBr'), ax=ax)\ncbar.set_label('Price (in millions)')\n\n# Set the labels for the clusters\nax.set_xticklabels(['Cluster 1', 'Cluster 2'])\n\n# Set the labels for the prices\nax.set_yticklabels(['$47M', '$48M', '$49M', '$50M', '$51M', '$52M', '$53M'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['ResNet18', 'AlexNet', 'ResNet50']\nspeedups = [7.4, 6.1, 4.3]\nperturbations = [0, 4.8, 7.8]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Plot the bar chart\nax.bar(brands, speedups, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Speedup')\nax.set_title('Speedup of Different Brands')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('LeetCode, DS-6.7b')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((20, 20), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a text box to the plot\nprops = dict(boxstyle='round', facecolor='lightgreen', alpha=0.5)\nax.text(0.05, 0.95, \"Correct\", transform=ax.transAxes, fontsize=14,\n        verticalalignment='top', bbox=props)\n\n# Add a text box to the plot\nprops = dict(boxstyle='round', facecolor='lightblue', alpha=0.5)\nax.text(0.05, 0.85, \"Counterfeit (Test-Passing)\", transform=ax.transAxes, fontsize=14,\n        verticalalignment='top', bbox=props)\n\n# Add a text box to the plot\nprops = dict(boxstyle='round', facecolor='lightcoral', alpha=0.5)\nax.text(0.05, 0.75, \"Counterfeit (Test-Failing)\", transform=ax.transAxes, fontsize=14,\n        verticalalignment='top', bbox=props)\n\n# Add a text box to the plot\nprops = dict(boxstyle='round', facecolor='lavender', alpha=0.5)\nax.text(0.05, 0.65, \"Counterfeit (Test-Failing), Confused\", transform=ax.transAxes, fontsize=14,\n        verticalalignment='top', bbox=props)\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [40, 50, 60], color='skyblue')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [60, 70, 80], color='lightgreen')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [20, 30, 40], color='lightcoral')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [40, 50, 60], color='lightpurple')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [10, 20, 30], color='lightpink')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [30, 40, 50], color='lightskyblue')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [5, 10, 15], color='lightgrey')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [25, 35, 45], color='lightcyan')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [1, 2, 3], color='lightyellow')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [15, 25, 35], color='lightmagenta')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightbrown')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightorange')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightolive')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightnavy')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightmaroon')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightlime')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightindigo')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightfuchsia')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightazure')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightbeige')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lighttan')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightsilver')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightgold')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightbrown')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightorange')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightolive')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightnavy')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightmaroon')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightlime')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightindigo')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightfuchsia')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightazure')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightbeige')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lighttan')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightsilver')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightgold')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightbrown')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightorange')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightolive')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightnavy')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightmaroon')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightlime')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightindigo')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightfuchsia')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightazure')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightbeige')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lighttan')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightsilver')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightgold')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightbrown')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightorange')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightolive')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightnavy')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightmaroon')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightlime')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightindigo')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightfuchsia')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightazure')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightbeige')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lighttan')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightsilver')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightgold')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightbrown')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightorange')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightolive')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightnavy')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightmaroon')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightlime')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightindigo')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightfuchsia')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightazure')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightbeige')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lighttan')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightsilver')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightgold')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightbrown')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightorange')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightolive')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightnavy')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0, 0], color='lightmaroon')\n\n# Add a bar chart to the plot\nax.bar(['CL-7b', 'CL-13b', 'CL-34b'], [0, 0, 0], color='lightlime')\n\n# Add a bar chart to the plot\nax.bar(['DS-6.7b', 'DS-33b', 'SC'], [0, 0"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'Vicuna': [53, 6, 21],\n    'Koala': [80, 33, 67],\n    'WizardLM': [116, 49, 53],\n    'SInstruct': [99, 50, 103],\n    'LIMA': [179, 23, 98]\n}\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Top 5 AI Models')\n\n# Set the labels for the x-axis\nax.set_xlabel('AI Model')\nax.set_ylabel('Performance Metrics')\n\n# Set the colors for the bars\ncolors = ['red', 'orange', 'yellow', 'blue', 'green']\n\n# Plot the data\nfor i, (model, metrics) in enumerate(data.items()):\n    ax.bar(model, metrics[0], color=colors[i])\n    ax.bar(model, metrics[1], bottom=metrics[0], color=colors[i])\n    ax.bar(model, metrics[2], bottom=[sum(metrics[:j]) for j in range(1, len(metrics))], color=colors[i])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+', 'STARE']\nsales = [35.15, 26.86, 26.08, 19.08, 22.09, 20.67, 58.99, 66.19, 58.99]\naggregations = [42.5, 48.38, 62.94, 36.63, 36.63, 23.9, 26.38, 17.06]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the sales data\nax.bar(brands, sales, color='green')\n\n# Plot the aggregations data\nfor i, agg in enumerate(aggregations):\n    ax.text(i, agg, str(agg), ha='center', va='bottom', color='red')\n\n# Set the title\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the y-axis limits\nax.set_ylim([0, 80])\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 81, 10))\n\n# Set the y-axis grid\nax.yaxis.grid(True)\n\n# Set the x-axis grid\nax.xaxis.grid(True)\n\n# Set the x-axis tick labels\nax.set_xticklabels(brands, rotation=45)\n\n# Set the x-axis tick marks\nax.set_xticks(range(len(brands)))\n\n# Set the x-axis tick colors\nax.tick_params(axis='x', colors='blue')\n\n# Set the y-axis tick colors\nax.tick_params(axis='y', colors='red')\n\n# Set the background color\nax.set_facecolor('lightgrey')\n\n# Set the border color\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('red')\nax.spines['left'].set_color('red')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('orange')\nax.spines['right'].set_color('orange')\nax.spines['bottom'].set_color('orange')\nax.spines['left'].set_color('orange')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['bottom'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('purple')\nax.spines['right'].set_color('purple')\nax.spines['bottom'].set_color('purple')\nax.spines['left'].set_color('purple')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('pink')\nax.spines['right'].set_color('pink')\nax.spines['bottom'].set_color('pink')\nax.spines['left'].set_color('pink')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('brown')\nax.spines['right'].set_color('brown')\nax.spines['bottom'].set_color('brown')\nax.spines['left'].set_color('brown')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('cyan')\nax.spines['right'].set_color('cyan')\nax.spines['bottom'].set_color('cyan')\nax.spines['left'].set_color('cyan')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('magenta')\nax.spines['right'].set_color('magenta')\nax.spines['bottom'].set_color('magenta')\nax.spines['left'].set_color('magenta')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('yellow')\nax.spines['right'].set_color('yellow')\nax.spines['bottom'].set_color('yellow')\nax.spines['left'].set_color('yellow')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('gray')\nax.spines['right'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('silver')\nax.spines['right'].set_color('silver')\nax.spines['bottom'].set_color('silver')\nax.spines['left'].set_color('silver')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('gold')\nax.spines['right'].set_color('gold')\nax.spines['bottom'].set_color('gold')\nax.spines['left'].set_color('gold')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('brown')\nax.spines['right'].set_color('brown')\nax.spines['bottom'].set_color('brown')\nax.spines['left'].set_color('brown')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('cyan')\nax.spines['right'].set_color('cyan')\nax.spines['bottom'].set_color('cyan')\nax.spines['left'].set_color('cyan')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('magenta')\nax.spines['right'].set_color('magenta')\nax.spines['bottom'].set_color('magenta')\nax.spines['left'].set_color('magenta')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('yellow')\nax.spines['right'].set_color('yellow')\nax.spines['bottom'].set_color('yellow')\nax.spines['left'].set_color('yellow')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('gray')\nax.spines['right'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('silver')\nax.spines['right'].set_color('silver')\nax.spines['bottom'].set_color('silver')\nax.spines['left'].set_color('silver')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the border style\nax.spines['top'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\n\n# Set the border color\nax.spines['top'].set_color('gold')\nax.spines['right'].set_color('gold')\nax.spines['bottom'].set_color('gold')\nax.spines['left'].set_color('gold')\n\n# Set the border width\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_lin"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Create a bar chart with the data\nax.bar(['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter'], [20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Semantic Category')\n\n# Set the y-axis label\nax.set_ylabel('Difference (%)')\n\n# Set the x-axis limits\nax.set_xlim(-50, 200)\n\n# Set the y-axis limits\nax.set_ylim(0, 200)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.array([5, 10, 15, 20])\ny1 = np.array([66.3, 61.9, 53.8, 13.7])\ny2 = np.array([10.1, 13.6, 13.7, 13.7])\ny3 = np.array([49.3, 45.7, 41.6, 31.5])\ny4 = np.array([36.3, 36.3, 36.3, 36.3])\ny5 = np.array([48.0, 42.6, 36.5, 36.5])\ny6 = np.array([40.5, 40.2, 30.6, 30.6])\ny7 = np.array([43.8, 42.8, 42.8, 42.8])\ny8 = np.array([49.5, 49.5, 49.5, 49.5])\ny9 = np.array([43.4, 43.4, 43.4, 43.4])\ny10 = np.array([64.7, 56.8, 59.6, 59.6])\ny11 = np.array([22.3, 25.9, 22.5, 22.5])\ny12 = np.array([64.7, 56.8, 59.6, 59.6])\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 4, figsize=(14, 4))\n\n# Plot the data\naxs[0, 0].plot(x, y1, 'b-')\naxs[0, 0].set_title('Truthful: Misleading = 2:0')\naxs[0, 0].set_xlabel('Time (years)')\naxs[0, 0].set_ylabel('Score')\n\naxs[0, 1].plot(x, y2, 'r-')\naxs[0, 1].set_title('Truthful: Misleading = 2:1')\naxs[0, 1].set_xlabel('Time (years)')\naxs[0, 1].set_ylabel('Score')\n\naxs[0, 2].plot(x, y3, 'g-')\naxs[0, 2].set_title('Truthful: Misleading = 2:2')\naxs[0, 2].set_xlabel('Time (years)')\naxs[0, 2].set_ylabel('Score')\n\naxs[0, 3].plot(x, y4, 'c-')\naxs[0, 3].set_title('Misleading: Truthful = 2:0')\naxs[0, 3].set_xlabel('Time (years)')\naxs[0, 3].set_ylabel('Score')\n\naxs[1, 0].plot(x, y5, 'm-')\naxs[1, 0].set_title('Misleading: Truthful = 2:1')\naxs[1, 0].set_xlabel('Time (years)')\naxs[1, 0].set_ylabel('Score')\n\naxs[1, 1].plot(x, y6, 'y-')\naxs[1, 1].set_title('Misleading: Truthful = 2:2')\naxs[1, 1].set_xlabel('Time (years)')\naxs[1, 1].set_ylabel('Score')\n\naxs[1, 2].plot(x, y7, 'k-')\naxs[1, 2].set_title('Misleading: Truthful = 1:2')\naxs[1, 2].set_xlabel('Time (years)')\naxs[1, 2].set_ylabel('Score')\n\naxs[1, 3].plot(x, y8, 'b-')\naxs[1, 3].set_title('Misleading: Truthful = 0:2')\naxs[1, 3].set_xlabel('Time (years)')\naxs[1, 3].set_ylabel('Score')\n\naxs[2, 0].plot(x, y9, 'r-')\naxs[2, 0].set_title('Misleading: Truthful = 0:1')\naxs[2, 0].set_xlabel('Time (years)')\naxs[2, 0].set_ylabel('Score')\n\naxs[2, 1].plot(x, y10, 'g-')\naxs[2, 1].set_title('Misleading: Truthful = 0:0')\naxs[2, 1].set_xlabel('Time (years)')\naxs[2, 1].set_ylabel('Score')\n\naxs[2, 2].plot(x, y11, 'c-')\naxs[2, 2].set_title('Misleading: Truthful = 0:2')\naxs[2, 2].set_xlabel('Time (years)')\naxs[2, 2].set_ylabel('Score')\n\naxs[2, 3].plot(x, y12, 'm-')\naxs[2, 3].set_title('Misleading: Truthful = 0:2')\naxs[2, 3].set_xlabel('Time (years)')\naxs[2, 3].set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SCIQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComTz', 'CyC', 'Winogventi', 'Com2Sense', 'CODAH', 'WSC', 'ARC-challenge', 'SocialIQA', 'HellaSWAG-wikiHow', 'Al2Sci-elem', 'Winogrande', 'PIQA', 'QuaRel', 'QuaC', 'SC', 'alphaNLI', 'SWAG']\ny = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the graph\nax.set_title('Model = Vicuna')\n\n# Set the x-axis label\nax.set_xlabel('\u0394Acc (with Styles) - Acc (without Rules)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394Acc')\n\n# Set the color of the lines\nax.plot(x, y, color='blue')\n\n# Set the color of the markers\nax.plot(x, y, marker='o', color='orange')\n\n# Set the color of the grid\nax.grid(color='green')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'MedMCQA': [48.1, 57.2, 75.2, 64.9, 72.3, 54.3],\n    'MedQA (USMLE)': [56.0, 62.2, 79.2, 64.4, 66.4, 67.6],\n    'GEMT-200b': [78.5, 70.4, 79.2, 64.2, 68.3, 66.9],\n    'GEMT-200a': [84.4, 86.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200a': [78.5, 79.2, 88.7, 80.4, 86.1, 88.7],\n    'GEMT-200b': [76.7, 79.2, 88.7, 80.4, 86.1, 88"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the chart\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFEP', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSL', 'AFSC', 'AFSA', 'AFTH', 'AFVT', 'AFWS', 'AFWT', 'DAH', 'IC', 'SS']\nnla_values = [25, 30, 40, 15, 25, 35, 45, 20, 30, 40, 25, 35, 45, 20, 30, 40, 25, 35, 45, 20, 30]\ngpt_values = [45, 40, 50, 35, 45, 50, 40, 35, 45, 50, 40, 35, 45, 50, 40, 35, 45, 50, 40, 35, 45]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(categories, nla_values, color='blue')\nax.bar(categories, gpt_values, bottom=nla_values, color='orange')\n\n# Set the title and labels\nax.set_title('NLA vs GPT Values')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Set the x-axis label\nax.set_xlabel('Num of Constraint Words')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Create a bar chart with the data\nax.bar([3, 5, 7, 9, 11], [2.5, 3.5, 4.5, 5.5, 6.5], color='blue')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Add a vertical line at x=5\nax.axvline(x=5, color='red', linestyle='-')\n\n# Add a rectangle at (x=3, y=2)\nrect = plt.Rectangle((3, 2), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=7, y=4)\nrect = plt.Rectangle((7, 4), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=9, y=6)\nrect = plt.Rectangle((9, 6), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=11, y=8)\nrect = plt.Rectangle((11, 8), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=13, y=10)\nrect = plt.Rectangle((13, 10), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=15, y=12)\nrect = plt.Rectangle((15, 12), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=17, y=14)\nrect = plt.Rectangle((17, 14), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=19, y=16)\nrect = plt.Rectangle((19, 16), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=21, y=18)\nrect = plt.Rectangle((21, 18), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=23, y=20)\nrect = plt.Rectangle((23, 20), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=25, y=22)\nrect = plt.Rectangle((25, 22), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=27, y=24)\nrect = plt.Rectangle((27, 24), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=29, y=26)\nrect = plt.Rectangle((29, 26), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=31, y=28)\nrect = plt.Rectangle((31, 28), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=33, y=30)\nrect = plt.Rectangle((33, 30), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=35, y=32)\nrect = plt.Rectangle((35, 32), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=37, y=34)\nrect = plt.Rectangle((37, 34), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=39, y=36)\nrect = plt.Rectangle((39, 36), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=41, y=38)\nrect = plt.Rectangle((41, 38), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=43, y=40)\nrect = plt.Rectangle((43, 40), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=45, y=42)\nrect = plt.Rectangle((45, 42), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=47, y=44)\nrect = plt.Rectangle((47, 44), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=49, y=46)\nrect = plt.Rectangle((49, 46), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=51, y=48)\nrect = plt.Rectangle((51, 48), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=53, y=50)\nrect = plt.Rectangle((53, 50), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=55, y=52)\nrect = plt.Rectangle((55, 52), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=57, y=54)\nrect = plt.Rectangle((57, 54), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=59, y=56)\nrect = plt.Rectangle((59, 56), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=61, y=58)\nrect = plt.Rectangle((61, 58), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=63, y=60)\nrect = plt.Rectangle((63, 60), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=65, y=62)\nrect = plt.Rectangle((65, 62), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=67, y=64)\nrect = plt.Rectangle((67, 64), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=69, y=66)\nrect = plt.Rectangle((69, 66), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=71, y=68)\nrect = plt.Rectangle((71, 68), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=73, y=70)\nrect = plt.Rectangle((73, 70), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=75, y=72)\nrect = plt.Rectangle((75, 72), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=77, y=74)\nrect = plt.Rectangle((77, 74), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=79, y=76)\nrect = plt.Rectangle((79, 76), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=81, y=78)\nrect = plt.Rectangle((81, 78), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=83, y=80)\nrect = plt.Rectangle((83, 80), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=85, y=82)\nrect = plt.Rectangle((85, 82), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=87, y=84)\nrect = plt.Rectangle((87, 84), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=89, y=86)\nrect = plt.Rectangle((89, 86), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=91, y=88)\nrect = plt.Rectangle((91, 88), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=93, y=90)\nrect = plt.Rectangle((93, 90), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=95, y=92)\nrect = plt.Rectangle((95, 92), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=97, y=94)\nrect = plt.Rectangle((97, 94), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=99, y=96)\nrect = plt.Rectangle((99, 96), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=101, y=98)\nrect = plt.Rectangle((101, 98), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=103, y=100)\nrect = plt.Rectangle((103, 100), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=105, y=102)\nrect = plt.Rectangle((105, 102), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=107, y=104)\nrect = plt.Rectangle((107, 104), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=109, y=106)\nrect = plt.Rectangle((109, 106), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=111, y=108)\nrect = plt.Rectangle((111, 108), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=113, y=110)\nrect = plt.Rectangle((113, 110), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=115, y=112)\nrect = plt.Rectangle((115, 112), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=117, y=114)\nrect = plt.Rectangle((117, 114), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=119, y=116)\nrect = plt.Rectangle((119, 116), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=121, y=118)\nrect = plt.Rectangle((121, 118), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=123, y=120)\nrect = plt.Rectangle((123, 120), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=125, y=122)\nrect = plt.Rectangle((125, 122), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=127, y=124)\nrect = plt.Rectangle((127, 124), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=129, y=126)\nrect = plt.Rectangle((129, 126), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=131, y=128)\nrect = plt.Rectangle((131, 128), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=133, y=130)\nrect = plt.Rectangle((133, 130), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=135, y=132)\nrect = plt.Rectangle((135, 132), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=137, y=134)\nrect = plt.Rectangle((137, 134), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=139, y=136)\nrect = plt.Rectangle((139, 136), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=141, y=138)\nrect = plt.Rectangle((141, 138), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=143, y=140)\nrect = plt.Rectangle((143, 140), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=145, y=142)\nrect = plt.Rectangle((145, 142), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=147, y=144)\nrect = plt.Rectangle((147, 144), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=149, y=146)\nrect = plt.Rectangle((149, 146), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=151, y=148)\nrect = plt.Rectangle((151, 148), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=153, y=150)\nrect = plt.Rectangle((153, 150), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=155, y=152)\nrect = plt.Rectangle((155, 152), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=157, y=154)\nrect = plt.Rectangle((157, 154), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=159, y=156)\nrect = plt.Rectangle((159, 156), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=161, y=158)\nrect = plt.Rectangle((161, 158), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=163, y=160)\nrect = plt.Rectangle((163, 160), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=165, y=162)\nrect = plt.Rectangle((165, 162), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=167, y=164)\nrect = plt.Rectangle((167, 164), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=169, y=166)\nrect = plt.Rectangle((169, 166), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=171, y=168)\nrect = plt.Rectangle((171, 168), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=173, y=170)\nrect = plt.Rectangle((173, 170), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=175, y=172)\nrect = plt.Rectangle((175, 172), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=177, y=174)\nrect = plt.Rectangle((177, 174), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle at (x=179, y=176)\nrect = plt.Rectangle((179, 176), 1"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [85.93, 73.93, 70.56, 69.87, 68.76, 67.65, 66.54]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.bar(brands, sales, color='skyblue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Brands')\nax.set_ylabel('Sales (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'HH': [22, 50, 28],\n    'Reddit': [25, 40, 30],\n    'IMDB': [30, 60, 10],\n    'Avg': [26, 50, 24]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13, 6))\n\n# Plot the data\nfor key, value in data.items():\n    ax.bar(key, value[0], color='red')\n    ax.bar(key, value[1], bottom=value[0], color='orange')\n    ax.bar(key, value[2], bottom=[value[0] + value[1]] * len(value), color='pink')\n\n# Set the title and labels\nax.set_title('COPR v.s. Golden (Human Eval)')\nax.set_xlabel('Time')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('MovieLens')\n\n# Create a bar chart with the data\nax.bar(['Accuracy', 'Unfairness'], [0.32, 0.12], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Metrics')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Set the x-axis label\nax.set_xlabel('Resolutions')\n\n# Set the y-axis label\nax.set_ylabel('Top-1 Accuracy (%)')\n\n# Define the data for the plot\nresolutions = ['224', '256', '320', '384', '448', '512', '576', '640']\naccuracies = [29, 32, 35, 38, 41, 44, 47, 50]\ncolors = ['blue', 'orange', 'gold', 'cyan', 'magenta', 'silver', 'gray', 'olive']\n\n# Plot the data\nfor i in range(len(resolutions)):\n    ax.barh(resolutions[i], accuracies[i], color=colors[i])\n\n# Add a horizontal line at the top of the plot\nax.axhline(y=80, color='b', linestyle='-')\n\n# Add a vertical line at the bottom of the plot\nax.axvline(x=0, color='r', linestyle='-')\n\n# Add a rectangle to represent the accuracy of the model\nrect = plt.Rectangle((0, 0), 10, 10, fc='red')\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\ny = [50, 50, 50, 50]\ncolors = ['yellow', 'blue', 'red', 'pink']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.barh(i, y[i], color=colors[i])\n\n# Set the labels and title\nax.set_xlabel('Number of Uploads')\nax.set_title('Uploads per Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Define the data for the plot\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the x-axis label\nax.set_xlabel('Time (in years)')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Cleaning / laundry', 'Casting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nviews = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(12, 8))\nax.bar(categories, views, color='darkblue')\n\n# Set the title and labels\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='red')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Synthetic vs Human-Authored Data')\nax.set_xlabel('Sentiment Categories')\nax.set_ylabel('Percentage of Sentiment')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Context: The human body can tolerate only a')\n\n# Set the x-axis label\nax.set_xlabel('Word')\n\n# Set the y-axis label\nax.set_ylabel('Probability')\n\n# Set the x-ticks\nax.set_xticks(range(len(words)))\nax.set_xticklabels(words)\n\n# Set the y-limits\nax.set_ylim([0, 0.3])\n\n# Set the y-ticks\nax.set_yticks([0, 0.1, 0.2, 0.3])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue', 'green', 'orange', 'purple'])\n\n# Set the color of the lines\nax.plot(range(len(words)), [0.1, 0.2, 0.3, 0.4, 0.5], 'o-')\n\n# Set the color of the bars\nax.bar(range(len(words)), [0.1, 0.2, 0.3, 0.4, 0.5], color='blue')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\n\n# Set the color of the scatter points\nax.scatter(range(len(words)), [0.1, 0.2, 0.3, 0.4, 0.5], color='green')\n\n# Set the color of the histograms\nax.hist(range(len(words)), bins=5, color='orange')\n\n# Set the color of the pie chart\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['red', 'blue', 'green', 'orange', 'purple'])\n\n# Set the color of the box plot\nax.boxplot([0.1, 0.2, 0.3, 0.4, 0.5], patch_artist=True, boxprops=dict(facecolor='blue'))\n\n# Set the color of the violin plot\nax.violinplot([0.1, 0.2, 0.3, 0.4, 0.5], showmeans=True, showmedians=False)\n\n# Set the color of the heatmap\nax.imshow([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], cmap='hot')\n\n# Set the color of the contour plot\nax.contourf([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], cmap='coolwarm')\n\n# Set the color of the stream plot\nax.streamplot([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the quiver plot\nax.quiver([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the polar plot\nax.polar([0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Set the color of the 3D plot\nax.plot_surface([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D scatter plot\nax.scatter3D([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D bar plot\nax.bar3d([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D contour plot\nax.contour3D([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D stream plot\nax.streamplot3D([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D quiver plot\nax.quiver3D([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D polar plot\nax.polar3D([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D 3D plot\nax.plot_trisurf([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D 3D scatter plot\nax.scatter_trisurf([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D 3D bar plot\nax.bar_trisurf([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D 3D contour plot\nax.contour_trisurf([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D 3D stream plot\nax.streamplot_trisurf([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D 3D quiver plot\nax.quiver_trisurf([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D 3D polar plot\nax.polar_trisurf([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]], [[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Set the color of the 3D 3D 3D plot\nax.plot_trisurf3D([[0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = ['Convertible', 'Coupe', 'Sedan', 'Truck', 'SUV']\nprobabilities = [0.75, 0.85, 0.95, 0.80, 0.90]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(models, probabilities, color='blue')\n\n# Add title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Car Models')\nax.set_ylabel('Probability')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='coral')\n\n# Set the title and labels\nax.set_title('Emotion Frequency')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Number of Videos by Profession')\n\n# Define the data for the bar chart\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideos = [4500, 6000, 7000, 5000, 6500, 8000]\n\n# Create a bar chart with the data\nax.bar(professions, videos, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Profession')\n\n# Set the y-axis label\nax.set_ylabel('Number of Videos')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Global Economy')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim([0, 50])\n\n# Set the y-axis limits\nax.set_ylim([0, 50])\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 51, 5))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 51, 5))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the title\nax.set_title('Global Economy', fontsize=16, fontweight='bold')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', fontsize=14, fontweight='bold')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', fontsize=14, fontweight='bold')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'], fontsize=12)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Real Estate Prices in Different Cities')\n\n# Set the x-axis label\nax.set_xlabel('City')\n\n# Set the y-axis label\nax.set_ylabel('Price (in thousands)')\n\n# Define the cities\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\n\n# Define the prices\nprices = [50, 45, 35, 25, 15, 5]\n\n# Define the colors for each city\ncolors = ['red', 'pink', 'orange', 'yellow', 'lightblue', 'blue']\n\n# Plot the data\nfor i, city in enumerate(cities):\n    ax.bar(city, prices[i], color=colors[i])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Create a bar chart with the data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [80, 70, 60, 50, 40, 30, 20]\nax.bar(categories, values, color='blue')\n\n# Add a color bar to the plot\ncmap = plt.get_cmap('coolwarm')\nnorm = plt.Normalize(min(values), max(values))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.01]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='skyblue')\n\n# Set the title and labels\nax.set_title('Emotion Frequency')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Yelp')\n\n# Set the x-axis label\nax.set_xlabel('Date')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment')\n\n# Create a bar chart with the data\nax.bar(['2020-01-01', '2020-01-02', '2020-01-03'], [4.8, 5.2, 5.6], color='blue')\n\n# Add a vertical line at the current date\nax.axvline(x=0, color='red')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Tech Industry Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Value ($)')\n\n# Set the x-axis limits\nax.set_xlim([0, 3250])\n\n# Set the y-axis limits\nax.set_ylim([0, 3250])\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 3251, 500))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 3251, 500))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['2000', '2005', '2010', '2015', '2020', '2025', '2030'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '500', '1000', '1500', '2000', '2500', '3000'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='orange')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval+synthetic_data[bar.get_x()], int(yval), va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Synthetic vs Human Authored Data')\nax.set_xlabel('Sentiment Categories')\nax.set_ylabel('Percentage of Sentences')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Scores by Category Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Time 0', 'Time 20', 'Time 40', 'Time 60', 'Time 80'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8'])\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10, width=2, direction='inout')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10, width=2, direction='inout')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('Air Quality Metrics by Region')\n\n# Define the regions and their corresponding air quality metrics\nregions = ['North', 'East', 'South', 'West']\nmetrics = [92.15, 84.32, 76.03, 65.49]\n\n# Create a bar chart with the regions and metrics\nbars = ax.bar(regions, metrics, color='skyblue')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Regions')\n\n# Set the y-axis label\nax.set_ylabel('Air Quality Metrics (ppm)')\n\n# Set the x-axis limits\nax.set_xlim([0, 4])\n\n# Set the y-axis limits\nax.set_ylim([0, 100])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scores by group and constraint word count')\n\n# Define the data for the bar chart\nbar_width = 0.25\nindex = range(1, 7)\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\nscores = [-2.2, -2.3, -3.3, -3.2]\ncolors = ['red', 'blue', 'orange', 'cyan']\n\n# Plot the bars\nfor i in index:\n    ax.bar(i - bar_width, scores[i-1], bar_width, label=constraint_words[i-1], color=colors[i-1])\n\n# Set the x-axis labels\nax.set_xticks(index)\nax.set_xticklabels(['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG'])\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Negative GDP Growth Rates by Country and Year')\n\n# Set the x-axis label\nax.set_xlabel('GDP Growth Rate (%)')\n\n# Set the y-axis label\nax.set_ylabel('Country')\n\n# Define the data for the bars\ngdp_rates = [-0.5, -0.4, -0.3, -0.2, -0.1, 0]\ncountries = ['USA', 'China', 'Germany', 'Brazil']\n\n# Create a bar chart with the data\nbars = ax.barh(countries, gdp_rates, color='blue')\n\n# Add labels to each bar\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, f'{width:.1f}', va='center', ha='left')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the data\nax.bar(models, performance, color='blue')\n\n# Set the title of the plot\nax.set_title('Human Study')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the chart\nax.set_title('Stacked Bar Chart of Transportation Data')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Define the categories\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\n\n# Define the values for each category\nvalues = [50, 20, 40, 80]\n\n# Define the colors for each bar\ncolors = ['blue', 'cyan', 'lightblue', 'darkblue']\n\n# Create a stacked bar chart\nax.bar(categories, values, color=colors)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the chart\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Create a bar chart with the data\nbar_width = 0.25\nindex = range(1, 8)\nsales_A = [40, 60, 80, 100, 120, 140, 160]\nsales_B = [30, 50, 70, 90, 110, 130, 150]\nsales_C = [20, 40, 60, 80, 100, 120, 140]\nsales_D = [10, 30, 50, 70, 90, 110, 130]\nsales_E = [5, 15, 25, 35, 45, 55, 65]\nsales_F = [15, 35, 55, 75, 95, 115, 135]\nsales_G = [5, 15, 25, 35, 45, 55, 65]\n\n# Create a stacked bar chart\nax.bar(index, sales_A, bar_width, label='Product A Sales', color='red')\nax.bar(index, sales_B, bar_width, bottom=sales_A, label='Product B Sales', color='orange')\nax.bar(index, sales_C, bar_width, bottom=[i+j for i,j in zip(sales_A, sales_B)], label='Product C Sales', color='pink')\nax.bar(index, sales_D, bar_width, bottom=[i+j+k for i,j,k in zip(sales_A, sales_B, sales_C)], label='Product D Sales', color='yellow')\nax.bar(index, sales_E, bar_width, bottom=[i+j+k+l for i,j,k,l in zip(sales_A, sales_B, sales_C, sales_D)], label='Product E Sales', color='lightblue')\nax.bar(index, sales_F, bar_width, bottom=[i+j+k+l+m for i,j,k,l,m in zip(sales_A, sales_B, sales_C, sales_D, sales_E)], label='Product F Sales', color='green')\nax.bar(index, sales_G, bar_width, bottom=[i+j+k+l+m+n for i,j,k,l,m,n in zip(sales_A, sales_B, sales_C, sales_D, sales_E, sales_F)], label='Product G Sales', color='purple')\n\n# Add labels to the x-axis\nax.set_xlabel('Product Categories')\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G'])\n\n# Add labels to the y-axis\nax.set_ylabel('Sales Units')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\naccuracies = [0.83, 0.6, 0.11]\nembeddings = [0.75, 0.25, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#E0E0E0')\n\n# Set the title of the plot\nax.set_title('Feature Embedding Distance')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Feature Embedding Distance (%)')\n\n# Set the x-ticks\nax.set_xticks(range(len(categories)))\n\n# Set the x-tick labels\nax.set_xticklabels(categories)\n\n# Set the y-ticks\nax.set_yticks(embeddings)\n\n# Set the y-tick labels\nax.set_yticklabels(embeddings)\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=1"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the x-axis label\nax.set_xlabel('Human Annotator')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6])\n\n# Set the x-tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n\n# Set the y-ticks\nax.set_yticks(range(0, 51, 10))\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 0), 1, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 0), 1, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 0), 1, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 0), 1, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 0), 1, 6, color='lightgreen'))\nax.add_patch(plt.Rectangle((5, 0), 1, 12, color='lightseagreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 10), 6, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 10), 5, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 10), 4, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 10), 3, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 10), 2, 6, color='lightgreen'))\nax.add_patch(plt.Rectangle((5, 10), 1, 12, color='lightseagreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 20), 1, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 20), 1, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 20), 1, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 20), 1, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 20), 1, 6, color='lightgreen'))\nax.add_patch(plt.Rectangle((5, 20), 1, 12, color='lightseagreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 30), 6, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 30), 5, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 30), 4, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 30), 3, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 30), 2, 6, color='lightgreen'))\nax.add_patch(plt.Rectangle((5, 30), 1, 12, color='lightseagreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 40), 1, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 40), 1, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 40), 1, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 40), 1, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 40), 1, 6, color='lightgreen'))\nax.add_patch(plt.Rectangle((5, 40), 1, 12, color='lightseagreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 50), 6, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 50), 5, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 50), 4, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 50), 3, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 50), 2, 6, color='lightgreen'))\nax.add_patch(plt.Rectangle((5, 50), 1, 12, color='lightseagreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 0), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 0), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 0), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 0), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 0), 1, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 0), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 10), 6, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 10), 5, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 10), 4, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 10), 3, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 10), 2, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 10), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 20), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 20), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 20), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 20), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 20), 1, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 20), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 30), 6, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 30), 5, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 30), 4, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 30), 3, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 30), 2, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 30), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 40), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 40), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 40), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 40), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 40), 1, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 40), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 50), 6, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 50), 5, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 50), 4, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 50), 3, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 50), 2, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 50), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 0), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 0), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 0), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 0), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 0), 1, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 0), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 10), 6, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 10), 5, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 10), 4, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 10), 3, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 10), 2, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 10), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 20), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 20), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 20), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 20), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 20), 1, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 20), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 30), 6, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 30), 5, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 30), 4, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 30), 3, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 30), 2, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 30), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 40), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 40), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 40), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 40), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 40), 1, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 40), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 50), 6, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 50), 5, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 50), 4, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 50), 3, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 50), 2, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 50), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 0), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 0), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 0), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 0), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 0), 1, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 0), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 10), 6, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 10), 5, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 10), 4, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 10), 3, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 10), 2, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 10), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 20), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 20), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 20), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 20), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 20), 1, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 20), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 30), 6, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 30), 5, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 30), 4, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 30), 3, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 30), 2, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 30), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 40), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 40), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 40), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 40), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 40), 1, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 40), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each score\nax.add_patch(plt.Rectangle((0, 50), 6, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 50), 5, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 50), 4, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 50), 3, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((4, 50), 2, 6, color='darkgreen'))\nax.add_patch(plt.Rectangle((5, 50), 1, 12, color='darkgreen'))\n\n# Draw a rectangle for each annotator's scores\nax.add_patch(plt.Rectangle((0, 0), 1, 10, color='darkgreen'))\nax.add_patch(plt.Rectangle((1, 0), 1, 8, color='darkgreen'))\nax.add_patch(plt.Rectangle((2, 0), 1, 12, color='darkgreen'))\nax.add_patch(plt.Rectangle((3, 0), 1, 10, color='darkgreen'))\nax.add_patch"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Create a list of products\nproducts = ['coreutis', 'gizip', 'scp', 'libq', 'mcf', 'omnet.', 'perl.']\n\n# Create a list of sales data\nsales = [50, 60, 70, 80, 90, 100, 110]\n\n# Create a bar chart\nax.bar(products, sales, color='blue')\n\n# Add a grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the performance data\nax.bar(models, performance, color='blue')\n\n# Add a title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Model with Language')\nax.set_ylabel('Performance [%]')\n\n# Add a color bar for the languages\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('Language')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the graph\nax.set_title('Fiscal Quarter Index Change')\n\n# Set the x-axis label\nax.set_xlabel('Fiscal Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Index Change (%)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'])\n\n# Set the y-limits\nax.set_ylim(-5, 5)\n\n# Set the y-ticks\nax.set_yticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n\n# Set the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'])\n\n# Set the grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Set the border color\nax.spines['bottom'].set_color('#000000')\nax.spines['top'].set_color('#000000')\nax.spines['right'].set_color('#000000')\nax.spines['left'].set_color('#000000')\n\n# Set the tick colors\nax.tick_params(axis='x', colors='#000000')\nax.tick_params(axis='y', colors='#000000')\n\n# Set the tick label rotation\nax.tick_params(axis='x', rotation=0)\nax.tick_params(axis='y', rotation=0)\n\n# Set the tick label size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label font color\nax.tick_params(axis='x', labelcolor='#000000')\nax.tick_params(axis='y', labelcolor='#000000')\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=14)\n\n# Set"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny = [39.4, 35.18, 30.84, 34.06]\ny2 = [35.1, 34.06, 33.0, 32.0, 30.0, 28.0, 26.82, 24.27, 22.2, 20.0, 18.84, 16.96, 14.84, 12.84, 10.84, 8.84, 6.84, 4.84, 2.84, 0.84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(x, y, label='Series 1')\nax.plot(x, y2, label='Series 2')\n\n# Set the title and labels\nax.set_title('Series Labels')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntruthful = [30.1, 34, 43.7]\nmisleading = [46.3, 57.9, 53.8, 20, 19.4]\nlabels = ['Truthful', 'Misleading']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.bar(labels, truthful, color='blue')\nax.bar(labels, misleading, bottom=truthful, color='red')\n\n# Set the title and labels\nax.set_title('Truthful vs Misleading Recalls')\nax.set_xlabel('Recall Type')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Environmental Impact by Sector')\n\n# Set the x-axis label\nax.set_xlabel('Industry Sectors')\n\n# Set the y-axis label\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['Light Industry', 'Heavy Industry', 'Transportation', 'Residential', 'Manufacturing'])\n\n# Set the y-ticks\nax.set_yticks(range(-1600, 1601, 200))\nax.set_yticklabels(['-1600', '-1400', '-1200', '-1000', '-800', '-600', '-400', '-200', '0', '200', '400', '600', '800', '1000', '1200', '1400', '1600'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', bottom=True, top=True, left=True, right=True)\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Current Year', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='#4682B4')\nax.text(0.5, 0.5, 'Previous Year', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='#CD853F')\n\n# Set the color of the bars\nax.bar([0, 1, 2, 3, 4], [1200, 1400, 1600, 1800, 2000], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [1000, 1200, 1400, 1600, 1800], color='#FFD700', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [800, 1000, 1200, 1400, 1600], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [600, 800, 1000, 1200, 1400], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [400, 600, 800, 1000, 1200], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [200, 400, 600, 800, 1000], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [0, 200, 400, 600, 800], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [-200, 0, 200, 400, 600], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [-400, -200, 0, 200, 400], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [-600, -400, -200, 0, 200], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [-800, -600, -400, -200, 0], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [-1000, -800, -600, -400, -200], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [-1200, -1000, -800, -600, -400], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [-1400, -1200, -1000, -800, -600], color='#FFA500', edgecolor='black')\nax.bar([0, 1, 2, 3, 4], [-1600, -1400, -1200, -1000, -800], color='#FFA500', edgecolor='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10,5))\n\n# Set the title of the plot\nax.set_title('Average City Temperatures')\n\n# Create a bar chart with the data\nax.bar(['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu'], [12, 16, 18, 22, 17], color='skyblue')\n\n# Set the x-axis label\nax.set_xlabel('City')\n\n# Set the y-axis label\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Annual Pollution Emission Reductions')\n\n# Set the x-axis label\nax.set_xlabel('Regions')\n\n# Set the y-axis label\nax.set_ylabel('Emissions (in tons)')\n\n# Define the data for the plot\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [120, 150, 180, 210]\nemissions_2021 = [130, 160, 190, 220]\n\n# Plot the data\nax.plot(regions, emissions_2020, color='red', label='2020 Emissions')\nax.plot(regions, emissions_2021, color='blue', label='2021 Emissions')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie charts\ndata = [26, 32, 13, 10, 29, 17, 15, 10, 22, 35, 37, 19, 12, 11, 9, 14, 13, 10, 15, 11, 10, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, "}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis labels\nx_labels = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\n# Set the y-axis values\ny_values = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0]\n\n# Plot the data\nax.plot(x_labels, y_values, color='blue')\n\n# Add a horizontal line at the mean value\nmean_value = sum(y_values) / len(y_values)\nax.axhline(mean_value, color='red')\n\n# Set the title and labels\nax.set_title('Top-10 Superfamilies in Training Dataset')\nax.set_xlabel('Superfamily')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Create a color bar for the legend\ncbar = fig.colorbar(plt.cm.ScalarMappable(cmap='Blues'), ax=ax)\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a scatter plot\nscatter = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap='Blues')\n\n# Create a bar chart\nbar = ax.bar(range(10), np.random.rand(10), color='blue')\n\n# Create a line chart\nline = ax.plot(range(10), np.random.rand(10), 'r-')\n\n# Create a histogram\nhist = ax.hist(np.random.rand(100), bins=10, color='green')\n\n# Create a pie chart\npie = ax.pie([1, 2, 3], labels=['A', 'B', 'C'], colors=['red', 'green', 'blue'])\n\n# Create a box plot\nbox = ax.boxplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], patch_artist=True)\n\n# Create a violin plot\nviolin = ax.violinplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)])\n\n# Create a heatmap\nheatmap = ax.imshow(np.random.rand(10, 10), cmap='hot', interpolation='nearest')\n\n# Create a contour plot\ncontour = ax.contourf(np.random.rand(10, 10), cmap='coolwarm')\n\n# Create a scatter plot with a color map\nscatter_cmap = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap='viridis')\n\n# Create a bar chart with a color map\nbar_cmap = ax.bar(range(10), np.random.rand(10), color='orange')\n\n# Create a line chart with a color map\nline_cmap = ax.plot(range(10), np.random.rand(10), 'g-')\n\n# Create a histogram with a color map\nhist_cmap = ax.hist(np.random.rand(100), bins=10, color='purple')\n\n# Create a pie chart with a color map\npie_cmap = ax.pie([1, 2, 3], labels=['A', 'B', 'C'], colors=['cyan', 'magenta', 'yellow'])\n\n# Create a box plot with a color map\nbox_cmap = ax.boxplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], patch_artist=True, boxprops=dict(facecolor='pink'))\n\n# Create a violin plot with a color map\nviolin_cmap = ax.violinplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], showmeans=True, showmedians=False, showextrema=False)\n\n# Create a heatmap with a color map\nheatmap_cmap = ax.imshow(np.random.rand(10, 10), cmap='spring')\n\n# Create a contour plot with a color map\ncontour_cmap = ax.contourf(np.random.rand(10, 10), cmap='autumn')\n\n# Create a scatter plot with a color map and a marker\nscatter_cmap_marker = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap='plasma', marker='^')\n\n# Create a bar chart with a color map and a marker\nbar_cmap_marker = ax.bar(range(10), np.random.rand(10), color='brown', marker='s')\n\n# Create a line chart with a color map and a marker\nline_cmap_marker = ax.plot(range(10), np.random.rand(10), 'y-', marker='o')\n\n# Create a histogram with a color map and a marker\nhist_cmap_marker = ax.hist(np.random.rand(100), bins=10, color='gray', marker='D')\n\n# Create a pie chart with a color map and a marker\npie_cmap_marker = ax.pie([1, 2, 3], labels=['A', 'B', 'C'], colors=['lime', 'silver', 'gold'], marker='*')\n\n# Create a box plot with a color map and a marker\nbox_cmap_marker = ax.boxplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], patch_artist=True, boxprops=dict(facecolor='teal'), marker='p')\n\n# Create a violin plot with a color map and a marker\nviolin_cmap_marker = ax.violinplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], showmeans=True, showmedians=False, showextrema=False, marker='h')\n\n# Create a heatmap with a color map and a marker\nheatmap_cmap_marker = ax.imshow(np.random.rand(10, 10), cmap='winter')\n\n# Create a contour plot with a color map and a marker\ncontour_cmap_marker = ax.contourf(np.random.rand(10, 10), cmap='summer')\n\n# Create a scatter plot with a color map, a marker, and a size\nscatter_cmap_marker_size = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap='spring', marker='^', s=100)\n\n# Create a bar chart with a color map, a marker, and a size\nbar_cmap_marker_size = ax.bar(range(10), np.random.rand(10), color='brown', marker='s', s=200)\n\n# Create a line chart with a color map, a marker, and a size\nline_cmap_marker_size = ax.plot(range(10), np.random.rand(10), 'y-', marker='o', markersize=10)\n\n# Create a histogram with a color map, a marker, and a size\nhist_cmap_marker_size = ax.hist(np.random.rand(100), bins=10, color='gray', marker='D', markersize=15)\n\n# Create a pie chart with a color map, a marker, and a size\npie_cmap_marker_size = ax.pie([1, 2, 3], labels=['A', 'B', 'C'], colors=['lime', 'silver', 'gold'], marker='*', markersize=20)\n\n# Create a box plot with a color map, a marker, and a size\nbox_cmap_marker_size = ax.boxplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], patch_artist=True, boxprops=dict(facecolor='teal'), marker='p', markersize=25)\n\n# Create a violin plot with a color map, a marker, and a size\nviolin_cmap_marker_size = ax.violinplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], showmeans=True, showmedians=False, showextrema=False, marker='h', markersize=30)\n\n# Create a heatmap with a color map, a marker, and a size\nheatmap_cmap_marker_size = ax.imshow(np.random.rand(10, 10), cmap='winter')\n\n# Create a contour plot with a color map, a marker, and a size\ncontour_cmap_marker_size = ax.contourf(np.random.rand(10, 10), cmap='summer')\n\n# Create a scatter plot with a color map, a marker, a size, and a label\nscatter_cmap_marker_size_label = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap='spring', marker='^', s=100, label='Label 1')\n\n# Create a bar chart with a color map, a marker, a size, and a label\nbar_cmap_marker_size_label = ax.bar(range(10), np.random.rand(10), color='brown', marker='s', s=200, label='Label 2')\n\n# Create a line chart with a color map, a marker, a size, and a label\nline_cmap_marker_size_label = ax.plot(range(10), np.random.rand(10), 'y-', marker='o', markersize=10, label='Label 3')\n\n# Create a histogram with a color map, a marker, a size, and a label\nhist_cmap_marker_size_label = ax.hist(np.random.rand(100), bins=10, color='gray', marker='D', markersize=15, label='Label 4')\n\n# Create a pie chart with a color map, a marker, a size, and a label\npie_cmap_marker_size_label = ax.pie([1, 2, 3], labels=['A', 'B', 'C'], colors=['lime', 'silver', 'gold'], marker='*', markersize=20, label='Label 5')\n\n# Create a box plot with a color map, a marker, a size, and a label\nbox_cmap_marker_size_label = ax.boxplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], patch_artist=True, boxprops=dict(facecolor='teal'), marker='p', markersize=25, label='Label 6')\n\n# Create a violin plot with a color map, a marker, a size, and a label\nviolin_cmap_marker_size_label = ax.violinplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], showmeans=True, showmedians=False, showextrema=False, marker='h', markersize=30, label='Label 7')\n\n# Create a heatmap with a color map, a marker, a size, and a label\nheatmap_cmap_marker_size_label = ax.imshow(np.random.rand(10, 10), cmap='winter')\n\n# Create a contour plot with a color map, a marker, a size, and a label\ncontour_cmap_marker_size_label = ax.contourf(np.random.rand(10, 10), cmap='summer')\n\n# Create a scatter plot with a color map, a marker, a size, a label, and a title\nscatter_cmap_marker_size_label_title = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap='spring', marker='^', s=100, label='Label 1', title='Title 1')\n\n# Create a bar chart with a color map, a marker, a size, a label, and a title\nbar_cmap_marker_size_label_title = ax.bar(range(10), np.random.rand(10), color='brown', marker='s', s=200, label='Label 2', title='Title 2')\n\n# Create a line chart with a color map, a marker, a size, a label, and a title\nline_cmap_marker_size_label_title = ax.plot(range(10), np.random.rand(10), 'y-', marker='o', markersize=10, label='Label 3', title='Title 3')\n\n# Create a histogram with a color map, a marker, a size, a label, and a title\nhist_cmap_marker_size_label_title = ax.hist(np.random.rand(100), bins=10, color='gray', marker='D', markersize=15, label='Label 4', title='Title 4')\n\n# Create a pie chart with a color map, a marker, a size, a label, and a title\npie_cmap_marker_size_label_title = ax.pie([1, 2, 3], labels=['A', 'B', 'C'], colors=['lime', 'silver', 'gold'], marker='*', markersize=20, label='Label 5', title='Title 5')\n\n# Create a box plot with a color map, a marker, a size, a label, and a title\nbox_cmap_marker_size_label_title = ax.boxplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], patch_artist=True, boxprops=dict(facecolor='teal'), marker='p', markersize=25, label='Label 6', title='Title 6')\n\n# Create a violin plot with a color map, a marker, a size, a label, and a title\nviolin_cmap_marker_size_label_title = ax.violinplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], showmeans=True, showmedians=False, showextrema=False, marker='h', markersize=30, label='Label 7', title='Title 7')\n\n# Create a heatmap with a color map, a marker, a size, a label, and a title\nheatmap_cmap_marker_size_label_title = ax.imshow(np.random.rand(10, 10), cmap='winter')\n\n# Create a contour plot with a color map, a marker, a size, a label, and a title\ncontour_cmap_marker_size_label_title = ax.contourf(np.random.rand(10, 10), cmap='summer')\n\n# Create a scatter plot with a color map, a marker, a size, a label, a title, and a legend\nscatter_cmap_marker_size_label_title_legend = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap='spring', marker='^', s=100, label='Label 1', title='Title 1')\nax.legend()\n\n# Create a bar chart with a color map, a marker, a size, a label, a title, and a legend\nbar_cmap_marker_size_label_title_legend = ax.bar(range(10), np.random.rand(10), color='brown', marker='s', s=200, label='Label 2', title='Title 2')\nax.legend()\n\n# Create a line chart with a color map, a marker, a size, a label, a title, and a legend\nline_cmap_marker_size_label_title_legend = ax.plot(range(10), np.random.rand(10), 'y-', marker='o', markersize=10, label='Label 3', title='Title 3')\nax.legend()\n\n# Create a histogram with a color map, a marker, a size, a label, a title, and a legend\nhist_cmap_marker_size_label_title_legend = ax.hist(np.random.rand(100), bins=10, color='gray', marker='D', markersize=15, label='Label 4', title='Title 4')\nax.legend()\n\n# Create a pie chart with a color map, a marker, a size, a label, a title, and a legend\npie_cmap_marker_size_label_title_legend = ax.pie([1, 2, 3], labels=['A', 'B', 'C'], colors=['lime', 'silver', 'gold'], marker='*', markersize=20, label='Label 5', title='Title 5')\nax.legend()\n\n# Create a box plot with a color map, a marker, a size, a label, a title, and a legend\nbox_cmap_marker_size_label_title_legend = ax.boxplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], patch_artist=True, boxprops=dict(facecolor='teal'), marker='p', markersize=25, label='Label 6', title='Title 6')\nax.legend()\n\n# Create a violin plot with a color map, a marker, a size, a label, a title, and a legend\nviolin_cmap_marker_size_label_title_legend = ax.violinplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], showmeans=True, showmedians=False, showextrema=False, marker='h', markersize=30, label='Label 7', title='Title 7')\nax.legend()\n\n# Create a heatmap with a color map, a marker, a size, a label, a title, and a legend\nheatmap_cmap_marker_size_label_title_legend = ax.imshow(np.random.rand(10, 10), cmap='winter')\n\n# Create a contour plot with a color map, a marker, a size, a label, a title, and a legend\ncontour_cmap_marker_size_label_title_legend = ax.contourf(np.random.rand(10, 10), cmap='summer')\n\n# Create a scatter plot with a color map, a marker, a size, a label, a title, a legend, and a grid\nscatter_cmap_marker_size_label_title_legend_grid = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap='spring', marker='^', s=100, label='Label 1', title='Title 1')\nax.legend()\nax.grid(True)\n\n# Create a bar chart with a color map, a marker, a size, a label, a title, a legend, and a grid\nbar_cmap_marker_size_label_title_legend_grid = ax.bar(range(10), np.random.rand(10), color='brown', marker='s', s=200, label='Label 2', title='Title 2')\nax.legend()\nax.grid(True)\n\n# Create a line chart with a color map, a marker, a size, a label, a title, a legend, and a grid\nline_cmap_marker_size_label_title_legend_grid = ax.plot(range(10), np.random.rand(10), 'y-', marker='o', markersize=10, label='Label 3', title='Title 3')\nax.legend()\nax.grid(True)\n\n# Create a histogram with a color map, a marker, a size, a label, a title, a legend, and a grid\nhist_cmap_marker_size_label_title_legend_grid = ax.hist(np.random.rand(100), bins=10, color='gray', marker='D', markersize=15, label='Label 4', title='Title 4')\nax.legend()\nax.grid(True)\n\n# Create a pie chart with a color map, a marker, a size, a label, a title, a legend, and a grid\npie_cmap_marker_size_label_title_legend_grid = ax.pie([1, 2, 3], labels=['A', 'B', 'C'], colors=['lime', 'silver', 'gold'], marker='*', markersize=20, label='Label 5', title='Title 5')\nax.legend()\nax.grid(True)\n\n# Create a box plot with a color map, a marker, a size, a label, a"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\nrewards = [46.3, 56.9, 53.8, 43.7]\nmisleading_rewards = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.bar(brands, rewards, color='blue')\nax.bar(brands, misleading_rewards, bottom=rewards, color='pink')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Misleading Recalls')\nax.set_title('Truthful: Misleading Recalls = 2:0')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Toyota', 'Honda', 'Ford', 'Chevrolet', 'Dodge', 'BMW', 'Audi', 'Mercedes-Benz', 'Lexus', 'Jaguar']\nprobabilities = [25, 30, 15, 20, 25, 28, 22, 24, 26, 29]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Create a bar chart\nax.bar(brands, probabilities, color='blue')\n\n# Set the title of the chart\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Set the x-axis label\nax.set_xlabel('Car Brands')\n\n# Set the y-axis label\nax.set_ylabel('Probability of Improvement')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nmetrics = [7.6, 7.1, 7.0, 7.0, 6.5, 6.5, 6.0, 6.0, 5.5, 5.5, 5.0, 5.0, 4.6, 4.6, 4.0, 3.7, 3.0, 2.6]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the bar chart\nax.bar(emotions, metrics, color='blue')\n\n# Set the title and labels\nax.set_title('Emotion Frequency Metrics')\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency Metric (%)')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('1st Experiment')\n\n# Create a bar chart with the data\nax.bar(['Experiment 1', 'Experiment 2', 'Experiment 3'], [0.5, 0.7, 0.9], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Experiment')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Global Energy Consumption')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Energy Consumption (TWh)')\n\n# Set the x-axis limits\nax.set_xlim(0, 2000)\n\n# Set the y-axis limits\nax.set_ylim(0, 1600)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 2001, 500))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 1601, 400))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Sentiment')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 35)\n\n# Set the x-axis ticks\nax.set_xticks(range(-20, 21, 10))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 36, 5))\n\n# Set the x-axis grid lines\nax.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-20', '-10', '0', '10', '20'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '5%', '10%', '15%', '20%', '25%', '30%', '35%'])\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='minor', bottom=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='minor', left=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x',"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Set the x-axis limits\nax.set_xlim(-10, 10)\n\n# Set the y-axis limits\nax.set_ylim(-20, 20)\n\n# Add a grid to the plot\nax.grid(True)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Beauty', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Yelp', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='green')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'MovieLens-1M', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='yellow')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'More', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'News', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='orange')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Social Media', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='pink')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='brown')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Customer Reviews', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='cyan')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='magenta')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='grey')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='silver')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='gold')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='white')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='brown')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='cyan')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='magenta')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='grey')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='silver')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='gold')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='white')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='brown')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='cyan')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='magenta')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='grey')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='silver')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='gold')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='white')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='brown')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='cyan')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='magenta')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='grey')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='silver')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='gold')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='white')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='brown')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='cyan')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='magenta')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='grey')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='silver')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='gold')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='white')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='brown')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='cyan')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='magenta')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='grey')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='silver')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='gold')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='white')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='brown')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment Analysis', fontsize=12, ha='center', va='center')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-5, -5), 10, 10, color='cyan')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0, 0, 'Sentiment"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Scores by group and constraint word count')\n\n# Define the x-axis values\nx = [-3.5, -3, -2.5, -2, -1.5, -1, -0.5, 0]\n\n# Define the y-axis values for each group\ny1 = [3.2, 3.3, 3.2, 2.2, 2.3, 2.2, 2.2, 2.2]\ny2 = [1.9, 1.9, 1.9, 1.7, 1.6, 1.8, 1.9, 1.9]\ny3 = [0.8, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6, 0.6]\ny4 = [0.5, 0.5, 0.5, 0.4, 0.4, 0.4, 0.4, 0.4]\ny5 = [0.3, 0.3, 0.3, 0.2, 0.2, 0.2, 0.2, 0.2]\ny6 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Plot the data\nax.plot(x, y1, label='Vicuna-HAG', color='#FF6347')\nax.plot(x, y2, label='Vicuna-Default', color='#4682B4')\nax.plot(x, y3, label='LLAMA-HAG', color='#FF6347')\nax.plot(x, y4, label='LLAMA-Default', color='#4682B4')\nax.plot(x, y5, label='3 Constraint Words', color='#FF6347')\nax.plot(x, y6, label='5 Constraint Words', color='#4682B4')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis limits\nax.set_xlim(-3.5, 0)\n\n# Set the y-axis limits\nax.set_ylim(0, 3.5)\n\n# Set the x-axis ticks\nax.set_xticks([-3.5, -3, -2.5, -2, -1.5, -1, -0.5, 0])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.5, 1, 1.5, 2, 2.5, 3])\n\n# Set the x-axis labels\nax.set_xticklabels(['-3.5', '-3', '-2.5', '-2', '-1.5', '-1', '-0.5', '0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '0.5', '1', '1.5', '2', '2.5', '3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Top 10 Superfamilies in Training Dataset')\n\n# Set the x-axis label\nax.set_xlabel('Superfamily')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a bar chart with the data\nax.bar(range(1, 11), [0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.05], color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('GENIA')\n\n# Create a bar chart with the data\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [50, 40, 30, 20, 10], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Product Type')\n\n# Set the y-axis label\nax.set_ylabel('Error Correction Rate (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [20, 25, 15, 10, 5, 25, 15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the bar chart\nax.bar(models, scores_a, color='red')\nax.bar(models, scores_b, bottom=scores_a, color='blue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Score A (%)')\n\n# Add a horizontal line at y=50\nax.axhline(y=50, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the color of the rectangle\nax.set_facecolor('lightblue')\n\n# Create a list of colors for the rectangles\ncolors = ['blue', 'orange', 'red', 'pink']\n\n# Create a list of labels for the rectangles\nlabels = ['Democratic', 'Mixed', 'Republican', 'Independent']\n\n# Create a list of values for the rectangles\nvalues = [80, 75, 90, 85]\n\n# Create a bar chart with the specified parameters\nax.bar(labels, values, color=colors)\n\n# Set the title of the chart\nax.set_title('Political Party Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Political Parties')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Data for the first subplot\nx1 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\nax.plot(x1, y1, 'b-')\nax.fill_between(x1, y1, color='blue', alpha=0.2)\n\n# Data for the second subplot\nx2 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny2 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\nax.plot(x2, y2, 'g-')\nax.fill_between(x2, y2, color='green', alpha=0.2)\n\n# Data for the third subplot\nx3 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny3 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\nax.plot(x3, y3, 'r-')\nax.fill_between(x3, y3, color='red', alpha=0.2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\neffort_data = [20.4, 29.6, 20.4, 20.4, 9.3]\nbrainwave_data = [7.1, 38.1, 14.3, 16.7, 20.4, 20.4, 9.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot the data\nax.bar(range(len(effort_data)), effort_data, color='red')\nax.bar(range(len(brainwave_data)), brainwave_data, color='green')\n\n# Set the labels\nax.set_xticks(range(len(effort_data)))\nax.set_xticklabels(['Very Low', 'Low', 'Neutral', 'High', 'Very High'])\n\n# Set the title\nax.set_title('Eye Movement')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Rate of Gain Change[%]')\nax.set_xlabel('Time')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_xlim([0.5, 1.2])\nax.set_ylim([-30, 30])\nax.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90], 'r-')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nax2.set_title('Rate of Gain Change[%]')\nax2.set_xlabel('Time')\nax2.set_ylabel('Rate of Gain Change[%]')\nax2.set_xlim([0.5, 1.2])\nax2.set_ylim([-30, 30])\nax2.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90], 'b-')\n\n# Create a third subplot\nax3 = fig.add_subplot(122)\nax3.set_title('Rate of Gain Change[%]')\nax3.set_xlabel('Time')\nax3.set_ylabel('Rate of Gain Change[%]')\nax3.set_xlim([0.5, 1.2])\nax3.set_ylim([-30, 30])\nax3.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90], 'g-')\n\n# Create a fourth subplot\nax4 = fig.add_subplot(122)\nax4.set_title('Rate of Gain Change[%]')\nax4.set_xlabel('Time')\nax4.set_ylabel('Rate of Gain Change[%]')\nax4.set_xlim([0.5, 1.2])\nax4.set_ylim([-30, 30])\nax4.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90], 'y-')\n\n# Create a fifth subplot\nax5 = fig.add_subplot(122)\nax5.set_title('Rate of Gain Change[%]')\nax5.set_xlabel('Time')\nax5.set_ylabel('Rate of Gain Change[%]')\nax5.set_xlim([0.5, 1.2])\nax5.set_ylim([-30, 30])\nax5.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90], 'c-')\n\n# Create a sixth subplot\nax6 = fig.add_subplot(122)\nax6.set_title('Rate of Gain Change[%]')\nax6.set_xlabel('Time')\nax6.set_ylabel('Rate of Gain Change[%]')\nax6.set_xlim([0.5, 1.2])\nax6.set_ylim([-30, 30])\nax6.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90], 'm-')\n\n# Create a seventh subplot\nax7 = fig.add_subplot(122)\nax7.set_title('Rate of Gain Change[%]')\nax7.set_xlabel('Time')\nax7.set_ylabel('Rate of Gain Change[%]')\nax7.set_xlim([0.5, 1.2])\nax7.set_ylim([-30, 30])\nax7.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90], 'k-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Model Performance Improvement by Language')\n\n# Set the x-axis label\nax.set_xlabel('Language')\n\n# Set the y-axis label\nax.set_ylabel('Performance [mW]')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5])\n\n# Set the x-tick labels\nax.set_xticklabels(['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES'])\n\n# Set the y-limits\nax.set_ylim([-5, 5])\n\n# Set the y-ticks\nax.set_yticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n\n# Set the y-tick labels\nax.set_yticklabels(['-5.0', '-4.0', '-3.0', '-2.0', '-1.0', '0.0', '1.0', '2.0', '3.0', '4.0', '5.0'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Set the border color\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the tick colors\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the tick width\nax.tick_params(axis='both', width=2)\n\n# Set the tick length\nax.tick_params(axis='both', length=8)\n\n# Set the tick direction\nax.tick_params(axis='both', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='both', rotation=0)\n\n# Set the tick label rotation\nax.tick_params(axis='both', labelrotation=0)\n\n# Set the tick label size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label color\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the tick label font\nax.tick_params(axis='both', labelfont='Arial')\n\n# Set the tick label style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label spacing\nax.tick_params(axis='both', labelspacing=0.5)\n\n# Set the tick label padding\nax.tick_params(axis='both', labelpad=5)\n\n# Set the tick label horizontal alignment\nax.tick_params(axis='both', labelha='center')\n\n# Set the tick label vertical alignment\nax.tick_params(axis='both', labelva='center')\n\n# Set the tick label rotation mode\nax.tick_params(axis='both', rotation_mode='anchor')\n\n# Set the tick label rotation units\nax.tick_params(axis='both', rotation_units='degrees')\n\n# Set the tick label rotation style\nax.tick_params(axis='both', rotation_style='default')\n\n# Set the tick label rotation direction\nax.tick_params(axis='both', rotation_direction='clockwise')\n\n# Set the tick label rotation angle\nax.tick_params(axis='both', rotation_angle=0)\n\n# Set the tick label rotation interval\nax.tick_params(axis='both', rotation_interval=1)\n\n# Set the tick label rotation threshold\nax.tick_params(axis='both', rotation_threshold=0.5)\n\n# Set the tick label rotation precision\nax.tick_params(axis='both', rotation_precision=0.1)\n\n# Set the tick label rotation rounding\nax.tick_params(axis='both', rotation_rounding=True)\n\n# Set the tick label rotation alignment\nax.tick_params(axis='both', rotation_alignment='center')\n\n# Set the tick label rotation baseline\nax.tick_params(axis='both', rotation_baseline='middle')\n\n# Set the tick label rotation vertical alignment\nax.tick_params(axis='both', rotation_verticalalignment='center')\n\n# Set the tick label rotation horizontal alignment\nax.tick_params(axis='both', rotation_horizontalalignment='center')\n\n# Set the tick label rotation rotation mode\nax.tick_params(axis='both', rotation_rotationmode='anchor')\n\n# Set the tick label rotation rotation units\nax.tick_params(axis='both', rotation_rotationunits='degrees')\n\n# Set the tick label rotation rotation style\nax.tick_params(axis='both', rotation_rotationstyle='default')\n\n# Set the tick label rotation rotation direction\nax.tick_params(axis='both', rotation_rotationdirection='clockwise')\n\n# Set the tick label rotation rotation angle\nax.tick_params(axis='both', rotation_rotationangle=0)\n\n# Set the tick label rotation rotation interval\nax.tick_params(axis='both', rotation_rotationinterval=1)\n\n# Set the tick label rotation rotation threshold\nax.tick_params(axis='both', rotation_rotationthreshold=0.5)\n\n# Set the tick label rotation rotation precision\nax.tick_params(axis='both', rotation_rotationprecision=0.1)\n\n# Set the tick label rotation rotation rounding\nax.tick_params(axis='both', rotation_rotationrounding=True)\n\n# Set the tick label rotation rotation alignment\nax.tick_params(axis='both', rotation_rotationalignment='center')\n\n# Set the tick label rotation rotation baseline\nax.tick_params(axis='both', rotation_rotationbaseline='middle')\n\n# Set the tick label rotation rotation vertical alignment\nax.tick_params(axis='both', rotation_rotationverticalalignment='center')\n\n# Set the tick label rotation rotation horizontal alignment\nax.tick_params(axis='both', rotation_rotationhorizontalalignment='center')\n\n# Set the tick label rotation rotation rotation mode\nax.tick_params(axis='both', rotation_rotationrotationmode='anchor')\n\n# Set the tick label rotation rotation rotation units\nax.tick_params(axis='both', rotation_rotationrotationunits='degrees')\n\n# Set the tick label rotation rotation rotation style\nax.tick_params(axis='both', rotation_rotationrotationstyle='default')\n\n# Set the tick label rotation rotation rotation direction\nax.tick_params(axis='both', rotation_rotationrotationdirection='clockwise')\n\n# Set the tick label rotation rotation rotation angle\nax.tick_params(axis='both', rotation_rotationrotationangle=0)\n\n# Set the tick label rotation rotation rotation interval\nax.tick_params(axis='both', rotation_rotationrotationinterval=1)\n\n# Set the tick label rotation rotation rotation threshold\nax.tick_params(axis='both', rotation_rotationrotationthreshold=0.5)\n\n# Set the tick label rotation rotation rotation precision\nax.tick_params(axis='both', rotation_rotationrotationprecision=0.1)\n\n# Set the tick label rotation rotation rotation rounding\nax.tick_params(axis='both', rotation_rotationrotationrounding=True)\n\n# Set the tick label rotation rotation rotation alignment\nax.tick_params(axis='both', rotation_rotationrotationalignment='center')\n\n# Set the tick label rotation rotation rotation baseline\nax.tick_params(axis='both', rotation_rotationrotationbaseline='middle')\n\n# Set the tick label rotation rotation rotation vertical alignment\nax.tick_params(axis='both', rotation_rotationrotationverticalalignment='center')\n\n# Set the tick label rotation rotation rotation horizontal alignment\nax.tick_params(axis='both', rotation_rotationrotationhorizontalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation mode\nax.tick_params(axis='both', rotation_rotationrotationrotationmode='anchor')\n\n# Set the tick label rotation rotation rotation rotation units\nax.tick_params(axis='both', rotation_rotationrotationrotationunits='degrees')\n\n# Set the tick label rotation rotation rotation rotation style\nax.tick_params(axis='both', rotation_rotationrotationrotationstyle='default')\n\n# Set the tick label rotation rotation rotation rotation direction\nax.tick_params(axis='both', rotation_rotationrotationrotationdirection='clockwise')\n\n# Set the tick label rotation rotation rotation rotation angle\nax.tick_params(axis='both', rotation_rotationrotationrotationangle=0)\n\n# Set the tick label rotation rotation rotation rotation interval\nax.tick_params(axis='both', rotation_rotationrotationrotationinterval=1)\n\n# Set the tick label rotation rotation rotation rotation threshold\nax.tick_params(axis='both', rotation_rotationrotationrotationthreshold=0.5)\n\n# Set the tick label rotation rotation rotation rotation precision\nax.tick_params(axis='both', rotation_rotationrotationrotationprecision=0.1)\n\n# Set the tick label rotation rotation rotation rotation rounding\nax.tick_params(axis='both', rotation_rotationrotationrotationrounding=True)\n\n# Set the tick label rotation rotation rotation rotation alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationalignment='center')\n\n# Set the tick label rotation rotation rotation rotation baseline\nax.tick_params(axis='both', rotation_rotationrotationrotationbaseline='middle')\n\n# Set the tick label rotation rotation rotation rotation vertical alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationverticalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation horizontal alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationhorizontalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation mode\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationmode='anchor')\n\n# Set the tick label rotation rotation rotation rotation rotation units\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationunits='degrees')\n\n# Set the tick label rotation rotation rotation rotation rotation style\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationstyle='default')\n\n# Set the tick label rotation rotation rotation rotation rotation direction\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationdirection='clockwise')\n\n# Set the tick label rotation rotation rotation rotation rotation angle\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationangle=0)\n\n# Set the tick label rotation rotation rotation rotation rotation interval\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationinterval=1)\n\n# Set the tick label rotation rotation rotation rotation rotation threshold\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationthreshold=0.5)\n\n# Set the tick label rotation rotation rotation rotation rotation precision\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationprecision=0.1)\n\n# Set the tick label rotation rotation rotation rotation rotation rounding\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrounding=True)\n\n# Set the tick label rotation rotation rotation rotation rotation alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation baseline\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationbaseline='middle')\n\n# Set the tick label rotation rotation rotation rotation rotation vertical alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationverticalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation horizontal alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationhorizontalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation mode\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationmode='anchor')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation units\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationunits='degrees')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation style\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationstyle='default')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation direction\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationdirection='clockwise')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation angle\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationangle=0)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation interval\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationinterval=1)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation threshold\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationthreshold=0.5)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation precision\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationprecision=0.1)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rounding\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrounding=True)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation baseline\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationbaseline='middle')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation vertical alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationverticalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation horizontal alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationhorizontalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation mode\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationmode='anchor')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation units\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationunits='degrees')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation style\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationstyle='default')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation direction\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationdirection='clockwise')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation angle\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationangle=0)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation interval\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationinterval=1)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation threshold\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationthreshold=0.5)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation precision\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationprecision=0.1)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rounding\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrounding=True)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation baseline\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationbaseline='middle')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation vertical alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationverticalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation horizontal alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationhorizontalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation mode\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationmode='anchor')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation units\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationunits='degrees')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation style\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationstyle='default')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation direction\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationdirection='clockwise')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation angle\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationangle=0)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation interval\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationinterval=1)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation threshold\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationthreshold=0.5)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation precision\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationprecision=0.1)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rounding\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrounding=True)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation baseline\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationbaseline='middle')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation vertical alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationverticalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation horizontal alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationhorizontalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation mode\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationmode='anchor')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation units\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationunits='degrees')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation style\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationstyle='default')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation direction\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationdirection='clockwise')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation angle\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationangle=0)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation interval\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationinterval=1)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation threshold\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationthreshold=0.5)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation precision\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationprecision=0.1)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation rounding\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationrounding=True)\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation baseline\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationbaseline='middle')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation vertical alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationverticalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation horizontal alignment\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationhorizontalalignment='center')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation rotation mode\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationrotationmode='anchor')\n\n# Set the tick label rotation rotation rotation rotation rotation rotation rotation rotation rotation rotation units\nax.tick_params(axis='both', rotation_rotationrotationrotationrotationrotationrotationrotationrotationrotationunits='degrees')\n\n# Set the tick label rotation rotation rotation rotation rotation"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Truthful: Misleading = 2:0')\n\n# Create a bar chart with the data\nax.bar(['Random', 'Ours', 'SOTA'], [66.3, 61.9, 53.8], color='blue')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Add a horizontal line at the y=0 point\nax.axhline(y=0, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\nfig.suptitle('Human Labeling and Agreement Bias Checking')\n\n# Scores\naxs[0, 0].set_title('Scores')\naxs[0, 0].plot([1, 2, 3, 4, 5, 6], [50, 55, 60, 65, 70, 75])\naxs[0, 0].set_ylim(0, 80)\naxs[0, 0].set_xlim(0, 7)\n\n# Human Annotator 1\naxs[0, 1].set_title('Human Annotator 1')\naxs[0, 1].bar([1, 2, 3, 4, 5, 6], [55, 50, 45, 40, 35, 30], color='pink')\naxs[0, 1].set_ylim(0, 60)\naxs[0, 1].set_xlim(0, 7)\n\n# Human Annotator 2\naxs[1, 0].set_title('Human Annotator 2')\naxs[1, 0].bar([1, 2, 3, 4, 5, 6], [50, 45, 40, 35, 30, 25], color='orange')\naxs[1, 0].set_ylim(0, 60)\naxs[1, 0].set_xlim(0, 7)\n\n# Human Annotator 3\naxs[1, 1].set_title('Human Annotator 3')\naxs[1, 1].bar([1, 2, 3, 4, 5, 6], [45, 40, 35, 30, 25, 20], color='purple')\naxs[1, 1].set_ylim(0, 60)\naxs[1, 1].set_xlim(0, 7)\n\n# Scores\naxs[0, 0].set_title('Scores')\naxs[0, 0].plot([1, 2, 3, 4, 5, 6], [50, 55, 60, 65, 70, 75])\naxs[0, 0].set_ylim(0, 80)\naxs[0, 0].set_xlim(0, 7)\n\n# Human Annotator 1\naxs[0, 1].set_title('Human Annotator 1')\naxs[0, 1].bar([1, 2, 3, 4, 5, 6], [55, 50, 45, 40, 35, 30], color='pink')\naxs[0, 1].set_ylim(0, 60)\naxs[0, 1].set_xlim(0, 7)\n\n# Human Annotator 2\naxs[1, 0].set_title('Human Annotator 2')\naxs[1, 0].bar([1, 2, 3, 4, 5, 6], [50, 45, 40, 35, 30, 25], color='orange')\naxs[1, 0].set_ylim(0, 60)\naxs[1, 0].set_xlim(0, 7)\n\n# Human Annotator 3\naxs[1, 1].set_title('Human Annotator 3')\naxs[1, 1].bar([1, 2, 3, 4, 5, 6], [45, 40, 35, 30, 25, 20], color='purple')\naxs[1, 1].set_ylim(0, 60)\naxs[1, 1].set_xlim(0, 7)\n\n# Scores\naxs[0, 0].set_title('Scores')\naxs[0, 0].plot([1, 2, 3, 4, 5, 6], [50, 55, 60, 65, 70, 75])\naxs[0, 0].set_ylim(0, 80)\naxs[0, 0].set_xlim(0, 7)\n\n# Human Annotator 1\naxs[0, 1].set_title('Human Annotator 1')\naxs[0, 1].bar([1, 2, 3, 4, 5, 6], [55, 50, 45, 40, 35, 30], color='pink')\naxs[0, 1].set_ylim(0, 60)\naxs[0, 1].set_xlim(0, 7)\n\n# Human Annotator 2\naxs[1, 0].set_title('Human Annotator 2')\naxs[1, 0].bar([1, 2, 3, 4, 5, 6], [50, 45, 40, 35, 30, 25], color='orange')\naxs[1, 0].set_ylim(0, 60)\naxs[1, 0].set_xlim(0, 7)\n\n# Human Annotator 3\naxs[1, 1].set_title('Human Annotator 3')\naxs[1, 1].bar([1, 2, 3, 4, 5, 6], [45, 40, 35, 30, 25, 20], color='purple')\naxs[1, 1].set_ylim(0, 60)\naxs[1, 1].set_xlim(0, 7)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nscores = [54.9, 38.3, 71.5, 79.2, 70.3, 54.5, 52.9, 42.4, 92.6, 89.2, 83.3, 96.4, 88.7, 83.8, 80.2, 7.1, 8.7, 2.0, 1.2]\ncolors = ['green', 'orange', 'brown', 'red', 'blue', 'cyan', 'magenta', 'yellow']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nfor i, model in enumerate(models):\n    ax.bar(model, scores[i], color=colors[i % len(colors)])\n\n# Set the title and labels\nax.set_title('Performance Comparison by Model')\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\n\n# Add a horizontal line at the mean score\nmean_score = sum(scores) / len(scores)\nax.axhline(y=mean_score, color='r', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny = [150.0, 180.0, 75.0, 90.0, 80.0]\ncolors = ['orange', 'orange', 'orange', 'orange', 'orange']\n\n# Data for the second graph\nx2 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny2 = [2.5, 2.0, 1.5, 2.0, 1.0]\ncolors2 = ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\n\n# Data for the third graph\nx3 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny3 = [60.0, 55.0, 70.0, 65.0, 72.0]\ncolors3 = ['lightgreen', 'lightgreen', 'lightgreen', 'lightgreen', 'lightgreen']\n\n# Data for the fourth graph\nx4 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny4 = [80.0, 75.0, 90.0, 85.0, 88.0]\ncolors4 = ['yellow', 'yellow', 'yellow', 'yellow', 'yellow']\n\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\naxs[0, 0].bar(x, y, color=colors)\naxs[0, 0].set_title('Dataset 1')\naxs[0, 0].set_xlabel('Metrics')\naxs[0, 0].set_ylabel('Values')\n\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Dataset 2')\naxs[0, 1].set_xlabel('Metrics')\naxs[0, 1].set_ylabel('Values')\n\naxs[1, 0].bar(x3, y3, color=colors3)\naxs[1, 0].set_title('Dataset 3')\naxs[1, 0].set_xlabel('Metrics')\naxs[1, 0].set_ylabel('Values')\n\naxs[1, 1].bar(x4, y4, color=colors4)\naxs[1, 1].set_title('Dataset 4')\naxs[1, 1].set_xlabel('Metrics')\naxs[1, 1].set_ylabel('Values')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10, 8))\nax.set_title('Dominance')\nax.set_xlabel('SAM Rating')\nax.set_ylabel('Color')\n\n# Define the colors and their corresponding SAM ratings\ncolors = ['neutral', 'yellow high', 'yellow low', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'orange']\nsam_ratings = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n# Create a bar chart with the SAM ratings for each color\nbars = ax.bar(colors, sam_ratings, color='blue')\n\n# Add a label to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a bar chart for gaming duration\ngaming_duration = [10, 20, 30, 40, 50]\ngaming_duration_err = [2, 3, 4, 5, 6]\nax.bar(range(len(gaming_duration)), gaming_duration, yerr=gaming_duration_err, capsize=5, color='blue', label='Gaming Duration')\n\n# Create a bar chart for exercise duration\nexercise_duration = [15, 25, 35, 45, 55]\nexercise_duration_err = [1, 2, 3, 4, 5]\nax.bar(range(len(exercise_duration)), exercise_duration, yerr=exercise_duration_err, capsize=5, color='green', label='Exercise Duration')\n\n# Create a bar chart for reading duration\nreading_duration = [20, 30, 40, 50, 60]\nreading_duration_err = [2, 3, 4, 5, 6]\nax.bar(range(len(reading_duration)), reading_duration, yerr=reading_duration_err, capsize=5, color='yellow', label='Reading Duration')\n\n# Create a bar chart for music playtime\nmusic_playtime = [10, 20, 30, 40, 50]\nmusic_playtime_err = [1, 2, 3, 4, 5]\nax.bar(range(len(music_playtime)), music_playtime, yerr=music_playtime_err, capsize=5, color='cyan', label='Music Playtime')\n\n# Add labels to the x-axis\nax.set_xticks(range(len(gaming_duration)))\nax.set_xticklabels(['20', '30', '40', '50', '60'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Llama-70b (T2TT) vs Llama-70b (S2TT)', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Time (s)', fontsize=15)\n\n# Set the y-axis label\nax.set_ylabel('Bleu Score', fontsize=15)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([15, 17, 19, 21, 23, 25])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['15', '17', '19', '21', '23', '25'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\n# Set the color of the text\nax.text(5, 22, '1.0 BLEU', fontsize=15, ha='center', va='center', color='orange')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 17), 8, 5, fill=False, edgecolor='orange'))\n\n# Set the color of the line\nax.plot([1, 9], [17, 22], 'r-', lw=2)\n\n# Set the color of the scatter plot\nax.scatter([2, 4, 6, 8], [19, 21, 17, 23], s=100, c='blue')\n\n# Set the color of the bar chart\nax.bar([1, 3, 5, 7], [18, 20, 16, 22], width=0.5, color='green')\n\n# Set the color of the pie chart\nax.pie([10, 20, 30, 40], labels=['A', 'B', 'C', 'D'], colors=['red', 'green', 'blue', 'yellow'], autopct='%1.1f%%')\n\n# Set the color of the histogram\nax.hist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bins=5, color='purple')\n\n# Set the color of the box plot\nax.boxplot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vert=True, patch_artist=True, labels=['A'])\n\n# Set the color of the violin plot\nax.violinplot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the heatmap\nax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([1, 2, 3], [4, 5, 6], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Set the color of the contourf plot\nax.contourf([1, 2, 3], [4, 5, 6], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Set the color of the streamplot\nax.streamplot([1, 2, 3], [4, 5, 6], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Set the color of the quiver plot\nax.quiver([1, 2, 3], [4, 5, 6], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Set the color of the polar plot\nax.polar([0, 1, 2, 3], [1, 2, 3, 4], 'ro')\n\n# Set the color of the smith chart\nax.smith()\n\n# Set the color of the smith chart with a specific impedance\nax.smith(impedance=[1+1j, 2+2j, 3+3j])\n\n# Set the color of the smith chart with a specific impedance and a specific radius\nax.smith(impedance=[1+1j, 2+2j, 3+3j], radius=1)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase\nax.smith(impedance=[1+1j, 2+2j, 3+3j], radius=1, phase=0)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color\nax.smith(impedance=[1+1j, 2+2j, 3+3j], radius=1, phase=0, color='red')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style\nax.smith(impedance=[1+1j, 2+2j, 3+3j], radius=1, phase=0, color='red', style='dashed')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label\nax.smith(impedance=[1+1j, 2+2j, 3+3j], radius=1, phase=0, color='red', style='dashed', label='Impedance')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend\nax.legend()\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title\nax.set_title('Smith Chart')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel\nax.set_xlabel('Real Part')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel\nax.set_ylabel('Imaginary Part')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim\nax.set_xlim(-1, 1)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim\nax.set_ylim(-1, 1)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect\nax.set_aspect('equal')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid\nax.grid(True)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend\nax.legend()\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title\nax.set_title('Smith Chart')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel\nax.set_xlabel('Real Part')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel\nax.set_ylabel('Imaginary Part')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim\nax.set_xlim(-1, 1)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim\nax.set_ylim(-1, 1)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect\nax.set_aspect('equal')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid\nax.grid(True)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend\nax.legend()\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title\nax.set_title('Smith Chart')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel\nax.set_xlabel('Real Part')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel\nax.set_ylabel('Imaginary Part')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim\nax.set_xlim(-1, 1)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim\nax.set_ylim(-1, 1)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect\nax.set_aspect('equal')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid\nax.grid(True)\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend\nax.legend()\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title\nax.set_title('Smith Chart')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel\nax.set_xlabel('Real Part')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel\nax.set_ylabel('Imaginary Part')\n\n# Set the color of the smith chart with a specific impedance and a specific radius and a specific phase and a specific color and a specific style and a specific label and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim and a specific ylim and a specific aspect and a specific grid and a specific legend and a specific title and a specific xlabel and a specific ylabel and a specific xlim\nax.set_xlim(-1,"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['AlphaBeta', 'z^', 'Gamma(\u03b3 = 0.05)', 'Gamma(\u03b3 = 0.1)', 'Gamma(\u03b3 = 0.25)'])\n\n# Set the y-ticks\nax.set_yticks([2.5, 3, 3.5, 4, 4.5, 5, 5.5])\n\n# Set the grid lines\nax.grid(True)\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4], [5, 5.5, 5, 4.5, 5], color='orange')\nax.plot([0, 1, 2, 3, 4], [5, 5, 4.5, 4.5, 4.5], color='blue')\nax.plot([0, 1, 2, 3, 4], [5, 5, 5, 4, 4], color='green')\nax.plot([0, 1, 2, 3, 4], [5, 5, 5, 5, 4.5], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Execution Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT'])\n\n# Set the y-limits\nax.set_ylim(0.75, 0.95)\n\n# Set the y-ticks\nax.set_yticks([0.75, 0.80, 0.85, 0.90])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.75', '0.80', '0.85', '0.90'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box edges\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the box fill\nax.patch.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the left plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the left plot\nax.set_title('Region Classification Accuracy')\n\n# Create a bar chart with the accuracy data\naccuracy_data = [0.88, 0.87, 0.83]\nregions = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\nax.bar(regions, accuracy_data, color='blue')\n\n# Add a star icon at the top of the bar chart\nax.text(1.5, 1.1, '*', fontsize=20, ha='center', va='center')\n\n# Create a figure and axis for the right plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the right plot\nax.set_title('Slice Mean Error (ms)')\n\n# Create a bar chart with the slice mean error data\nslice_mean_error_data = [19.5, 16.2, 14.5, 12.3, 10.1, 8.9, 7.7, 6.5, 5.3, 4.1, 2.9]\nslices = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine', 'DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine', 'DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine', 'DENSE (ref)', 'Joint Multimodal Framework (ours)']\nax.bar(slices, slice_mean_error_data, color='green')\n\n# Add a star icon at the top of the bar chart\nax.text(1.5, 22.5, '*', fontsize=20, ha='center', va='center')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Create a scatter plot with the data\nax.scatter(['w/o att', 'w/o DP', '1xQ', '20xQ'], [3, 4, 5, 6], color='blue')\n\n# Add a horizontal line at the threshold\nax.axhline(y=5, color='r', linestyle='-')\n\n# Add a vertical line at the threshold\nax.axvline(x=10, color='g', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.set_xlim([0, 3])\nax.set_ylim([0, 1])\nax.set_aspect('equal')\n\n# REM\nax.text(0.5, 0.9, 'REM', ha='center', va='center')\nax.add_patch(plt.Rectangle((0.2, 0.7), 0.6, 0.2, color='blue'))\n\n# No POP\nax.text(1.5, 0.9, 'No POP', ha='center', va='center')\nax.add_patch(plt.Rectangle((1.2, 0.7), 0.6, 0.2, color='green'))\n\n# Separate M emb.\nax.text(2.5, 0.9, 'Separate M emb.', ha='center', va='center')\nax.add_patch(plt.Rectangle((2.2, 0.7), 0.6, 0.2, color='cyan'))\n\n# 4 x 4 tokenizer\nax.text(0.5, 0.5, '4 x 4 tokenizer', ha='center', va='center')\nax.add_patch(plt.Rectangle((0.2, 0.3), 0.6, 0.2, color='orange'))\nax.add_patch(plt.Rectangle((0.8, 0.3), 0.2, 0.2, color='black'))\n\n# No latent space C\nax.text(1.5, 0.5, 'No latent space C', ha='center', va='center')\nax.add_patch(plt.Rectangle((1.2, 0.3), 0.6, 0.2, color='purple'))\nax.add_patch(plt.Rectangle((1.8, 0.3), 0.2, 0.2, color='black'))\n\n# C w/o action inputs\nax.text(2.5, 0.5, 'C w/o action inputs', ha='center', va='center')\nax.add_patch(plt.Rectangle((2.2, 0.3), 0.6, 0.2, color='brown'))\nax.add_patch(plt.Rectangle((2.8, 0.3), 0.2, 0.2, color='black'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis labels\nx_labels = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\nax.set_xticks(np.arange(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightyellow')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.2, color='blue')\nax.add_artist(circle)\n\n# Add a line to the plot\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='green')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nscatter = plt.scatter(x, y, color='purple')\nax.add_collection(scatter)\n\n# Add a bar chart to the plot\nbar = plt.bar(['A', 'B', 'C'], [1, 2, 3], color='orange')\nax.add_collection(bar)\n\n# Add a histogram to the plot\nhist = plt.hist(np.random.randn(1000), bins=30, color='cyan')\nax.add_collection(hist)\n\n# Add a pie chart to the plot\npie = plt.pie([1, 2, 3], labels=['A', 'B', 'C'], colors=['pink', 'yellow', 'brown'])\nax.add_collection(pie)\n\n# Add a text annotation to the plot\ntext = plt.text(0.5, 0.5, 'Hello World', fontsize=12, color='black')\nax.add_artist(text)\n\n# Add a title to the plot\ntitle = plt.title('My Plot', fontsize=14, color='black')\nax.add_artist(title)\n\n# Add a legend to the plot\nlegend = plt.legend(['A', 'B', 'C'], loc='upper right')\nax.add_artist(legend)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10, 4))\n\n# Set the title for each subplot\naxs[0, 0].set_title('EME sentences')\naxs[0, 1].set_title('Neutral sentences')\naxs[0, 2].set_title('ME sentences')\n\n# Create a scatter plot for each subplot\nfor i in range(3):\n    axs[0, i].scatter(np.random.rand(10), np.random.rand(10))\n    axs[0, i].set_xlim([0, 1])\n    axs[0, i].set_ylim([0, 1])\n\n# Create a bar chart for each subplot\nfor i in range(3):\n    axs[1, i].bar(['BERT Base', 'MacBERT', 'English HLM'], [0.8, 0.9, 0.7], color='blue')\n    axs[1, i].set_xlim([-0.5, 2.5])\n    axs[1, i].set_ylim([0, 1])\n\n# Add a legend to the first subplot\naxs[0, 0].legend(['Sentence 1', 'Sentence 2', 'Sentence 3'])\n\n# Add a color bar to the second subplot\ncbar = fig.colorbar(axs[0, 1].scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10)), ax=axs[0, 1])\ncbar.set_label('Confidence')\n\n# Add a text annotation to the third subplot\naxs[0, 2].annotate('This is a sentence', xy=(0.5, 0.5), xytext=(0.5, 0.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(8, 6))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Ratings')\naxs[0, 1].set_title('Intrustion')\naxs[1, 0].set_title('Ratings')\naxs[1, 1].set_title('Intrustion')\n\n# Add a rectangle to each subplot\nfor ax in axs.flat:\n    ax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, fill=False))\n    ax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, fill=False))\n    ax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, fill=False))\n    ax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, fill=False))\n\n# Set the y-axis limits for each subplot\naxs[0, 0].set_ylim([0, 3])\naxs[0, 1].set_ylim([0, 1])\naxs[1, 0].set_ylim([0, 3])\naxs[1, 1].set_ylim([0, 1])\n\n# Set the x-axis limits for each subplot\naxs[0, 0].set_xlim([0, 1])\naxs[0, 1].set_xlim([0, 1])\naxs[1, 0].set_xlim([0, 1])\naxs[1, 1].set_xlim([0, 1])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10, 5))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Digit span')\naxs[0, 1].set_title('Lexical decision')\naxs[0, 2].set_title('Lexical decision')\naxs[1, 0].set_title('Reaction time')\naxs[1, 1].set_title('Trail making')\naxs[1, 2].set_title('Trail making')\n\n# Create a scatter plot for each subplot\naxs[0, 0].scatter(np.random.rand(10), np.random.rand(10), color='blue')\naxs[0, 1].scatter(np.random.rand(10), np.random.rand(10), color='orange')\naxs[0, 2].scatter(np.random.rand(10), np.random.rand(10), color='red')\naxs[1, 0].scatter(np.random.rand(10), np.random.rand(10), color='blue')\naxs[1, 1].scatter(np.random.rand(10), np.random.rand(10), color='orange')\naxs[1, 2].scatter(np.random.rand(10), np.random.rand(10), color='red')\n\n# Add a legend to each subplot\naxs[0, 0].legend(['target', 'control'], loc='upper left')\naxs[0, 1].legend(['target', 'control'], loc='upper left')\naxs[0, 2].legend(['target', 'control'], loc='upper left')\naxs[1, 0].legend(['target', 'control'], loc='upper left')\naxs[1, 1].legend(['target', 'control'], loc='upper left')\naxs[1, 2].legend(['target', 'control'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\nax.set_title('Methods')\nax.set_xlabel('Prediction Accuracy v_{D_1}')\nax.set_ylabel('Prediction Accuracy v_{D_2}')\n\n# Create rectangles for each method\nrects1 = ax.bar(['BG', 'IBP', 'SSP', 'NBP'], [70, 60, 80, 90], color='brown')\nrects2 = ax.bar(['BG', 'IBP', 'SSP', 'NBP'], [60, 50, 70, 80], color='green')\nrects3 = ax.bar(['BG', 'IBP', 'SSP', 'NBP'], [50, 40, 60, 70], color='blue')\nrects4 = ax.bar(['BG', 'IBP', 'SSP', 'NBP'], [40, 30, 50, 60], color='purple')\n\n# Add text annotations to each bar\nfor rect in rects1:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nfor rect in rects2:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nfor rect in rects3:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nfor rect in rects4:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(50, 350)\n\n# Set the y-axis limits\nax.set_ylim(-0.06, 0.06)\n\n# Set the x-axis label\nax.set_xlabel('Search depth')\n\n# Set the y-axis label\nax.set_ylabel('Reward')\n\n# Create a bar chart\nax.bar([50, 100, 150, 200, 250, 300, 350], [0.04, 0.04, 0.02, 0.02, 0.02, 0.02, 0.02], color='blue')\n\n# Add a title\nax.set_title('Deep Q-Learning Reward')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a bar chart with the data\nax.bar(['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration'], [65.1, 55.7, 50.3, 29.5], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Activity')\n\n# Set the y-axis label\nax.set_ylabel('Duration (minutes)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Mean Value')\n\n# Create a bar chart with the mean values\nax.bar(['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment'], [2.5, 2.3, 2.7, 2.4, 2.6], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Intervention Type')\n\n# Set the y-axis label\nax.set_ylabel('Mean Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('SOCP Optimization')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust [N]')\n\n# Set the x-axis limits\nax.set_xlim(-40, 40)\n\n# Set the y-axis limits\nax.set_ylim(-0.4, 7.6)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(-40, 50, 10))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(-0.4, 8, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-0.4', '0', '1.6', '3.6', '5.6', '7.6'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis border lines\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Stock Market Performance')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Set the x-axis limits\nax.set_xlim([0, 10])\n\n# Set the y-axis limits\nax.set_ylim([-10, 70])\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(-10, 71, 10))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 3))\n\n# Set the title of the plot\nax.set_title('Human Normalized Score')\n\n# Create a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Human Normalized Score')\n\n# Set the y-axis label\nax.set_ylabel('Human Normalized Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Set the x-axis limits\nax.set_xlim([2.0, 5.0])\n\n# Set the y-axis limits\nax.set_ylim([-60, 60])\n\n# Draw a rectangle for each data point\nfor i in range(10):\n    ax.add_patch(plt.Rectangle((i*0.5, -60), 0.5, 120, color='blue'))\n\n# Draw a line for each data point\nfor i in range(10):\n    ax.plot([i*0.5, i*0.5], [-60, 60], 'k-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Candlestick (db)')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price (USD)')\n\n# Set the x-axis limits\nax.set_xlim(-10, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Create a rectangle for the stock price\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Create a rectangle for the candlestick\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Create a rectangle for the moving average\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Create a rectangle for the RSI\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Create a rectangle for the MACD\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Create a rectangle for the Bollinger Bands\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Create a rectangle for the volume\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the market cap\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the debt-to-equity ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the ROE\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the ROA\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the EPS\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the PEG ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the P/S ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the P/C ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the P/E ratio\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the P/B"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(25, 8))\n\n# Set the title for each subplot\naxs[0].set_title('Linear travel times')\naxs[1].set_title('Exponential travel times')\naxs[2].set_title('Sigmoidal travel times')\n\n# Create a scatter plot for each subplot\nfor i in range(3):\n    axs[i].scatter(np.random.rand(10), np.random.rand(10), color='blue')\n    axs[i].scatter(np.random.rand(10), np.random.rand(10), color='red')\n    axs[i].scatter(np.random.rand(10), np.random.rand(10), color='green')\n\n# Add a legend to each subplot\nfor i in range(3):\n    axs[i].legend(['Linear', 'Exponential', 'Sigmoidal'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Healthcare Provider Ratings')\n\n# Set the x-axis label\nax.set_xlabel('Healthcare Providers')\n\n# Set the y-axis label\nax.set_ylabel('Ratings')\n\n# Define the data for the plot\nx = ['Hospital 1', 'Hospital 2', 'Hospital 3']\ny = [95, 90, 85]\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Add a legend\nax.legend(['Hospital 1', 'Hospital 2', 'Hospital 3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n# Set the title for each subplot\naxs[0].set_title('0.25 HIAR')\naxs[1].set_title('0.1 HIAR')\n\n# Create a scatter plot for each subplot\naxs[0].scatter(np.random.rand(10), np.random.rand(10))\naxs[1].scatter(np.random.rand(10), np.random.rand(10))\n\n# Set the limits for the x and y axes\naxs[0].set_xlim([0, 1])\naxs[0].set_ylim([0, 1])\naxs[1].set_xlim([0, 1])\naxs[1].set_ylim([0, 1])\n\n# Add a rectangle to each subplot\nrect1 = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', alpha=0.3)\nrect2 = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red', alpha=0.3)\naxs[0].add_patch(rect1)\naxs[1].add_patch(rect2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\ncolors = np.random.rand(50)\narea = (30 * np.random.rand(50))**2  # 0 to 15 point radii\nscatter = ax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Ground Truth',\n                          markerfacecolor='blue', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Generated',\n                          markerfacecolor='red', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Set the limits of the x and y axes\nax.set_xlim(-80, 80)\nax.set_ylim(-80, 80)\n\n# Draw a circle around the origin\ncircle = plt.Circle((0, 0), 40, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), 80, 80, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle around the origin\nrectangle = plt.Rectangle((-40, -40), "}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('\u03bb(x, z)')\n\n# Create a color map for the plot\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of points\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the values of \u03bb(x, z)\nZ = np.sin(X**2 + Y**2)\n\n# Plot the values of \u03bb(x, z)\nCS = ax.contourf(X, Y, Z, cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(CS)\n\n# Set the limits of the x and y axes\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\n\n# Create a scatter plot with random data points\nx = np.random.randint(50, 160, 100)\ny = np.random.randint(50, 100, 100)\nax.scatter(x, y, c='blue')\n\n# Create a scatter plot with random data points\nx = np.random.randint(50, 160, 100)\ny = np.random.randint(50, 100, 100)\nax.scatter(x, y, c='red')\n\n# Add a legend\nax.legend(['Female', 'Male'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Draw a circle with radius 10\ncircle1 = plt.Circle((0, 0), 10, color='blue', fill=False)\nax.add_artist(circle1)\n\n# Draw a circle with radius 8\ncircle2 = plt.Circle((0, 0), 8, color='green', fill=False)\nax.add_artist(circle2)\n\n# Draw a circle with radius 6\ncircle3 = plt.Circle((0, 0), 6, color='cyan', fill=False)\nax.add_artist(circle3)\n\n# Draw a circle with radius 4\ncircle4 = plt.Circle((0, 0), 4, color='magenta', fill=False)\nax.add_artist(circle4)\n\n# Draw a circle with radius 2\ncircle5 = plt.Circle((0, 0), 2, color='yellow', fill=False)\nax.add_artist(circle5)\n\n# Draw a circle with radius 0\ncircle6 = plt.Circle((0, 0), 0, color='red', fill=False)\nax.add_artist(circle6)\n\n# Draw a rectangle with width 10 and height 10\nrectangle = plt.Rectangle((-5, -5), 10, 10, color='orange', fill=False)\nax.add_artist(rectangle)\n\n# Draw a rectangle with width 8 and height 8\nrectangle2 = plt.Rectangle((-4, -4), 8, 8, color='purple', fill=False)\nax.add_artist(rectangle2)\n\n# Draw a rectangle with width 6 and height 6\nrectangle3 = plt.Rectangle((-3, -3), 6, 6, color='brown', fill=False)\nax.add_artist(rectangle3)\n\n# Draw a rectangle with width 4 and height 4\nrectangle4 = plt.Rectangle((-2, -2), 4, 4, color='pink', fill=False)\nax.add_artist(rectangle4)\n\n# Draw a rectangle with width 2 and height 2\nrectangle5 = plt.Rectangle((-1, -1), 2, 2, color='gray', fill=False)\nax.add_artist(rectangle5)\n\n# Draw a rectangle with width 0 and height 0\nrectangle6 = plt.Rectangle((0, 0), 0, 0, color='black', fill=False)\nax.add_artist(rectangle6)\n\n# Draw a line from (-10, 0) to (10, 0)\nline = plt.Line2D([-10, 10], [0, 0], color='cyan')\nax.add_artist(line)\n\n# Draw a line from (0, -10) to (0, 10)\nline2 = plt.Line2D([0, 0], [-10, 10], color='magenta')\nax.add_artist(line2)\n\n# Draw a line from (-10, -10) to (10, 10)\nline3 = plt.Line2D([-10, 10], [-10, 10], color='yellow')\nax.add_artist(line3)\n\n# Draw a line from (-10, 10) to (10, -10)\nline4 = plt.Line2D([-10, 10], [10, -10], color='pink')\nax.add_artist(line4)\n\n# Draw a line from (-10, 0) to (0, -10)\nline5 = plt.Line2D([-10, 0], [0, -10], color='gray')\nax.add_artist(line5)\n\n# Draw a line from (0, 10) to (10, 0)\nline6 = plt.Line2D([0, 10], [10, 0], color='black')\nax.add_artist(line6)\n\n# Draw a line from (0, 0) to (10, 10)\nline7 = plt.Line2D([0, 10], [0, 10], color='cyan')\nax.add_artist(line7)\n\n# Draw a line from (0, 0) to (10, -10)\nline8 = plt.Line2D([0, 10], [0, -10], color='magenta')\nax.add_artist(line8)\n\n# Draw a line from (0, 0) to (-10, 10)\nline9 = plt.Line2D([0, -10], [0, 10], color='yellow')\nax.add_artist(line9)\n\n# Draw a line from (0, 0) to (-10, -10)\nline10 = plt.Line2D([0, -10], [0, -10], color='pink')\nax.add_artist(line10)\n\n# Draw a line from (0, 0) to (0, 0)\nline11 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line11)\n\n# Draw a line from (0, 0) to (0, 0)\nline12 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line12)\n\n# Draw a line from (0, 0) to (0, 0)\nline13 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line13)\n\n# Draw a line from (0, 0) to (0, 0)\nline14 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line14)\n\n# Draw a line from (0, 0) to (0, 0)\nline15 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line15)\n\n# Draw a line from (0, 0) to (0, 0)\nline16 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line16)\n\n# Draw a line from (0, 0) to (0, 0)\nline17 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line17)\n\n# Draw a line from (0, 0) to (0, 0)\nline18 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line18)\n\n# Draw a line from (0, 0) to (0, 0)\nline19 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line19)\n\n# Draw a line from (0, 0) to (0, 0)\nline20 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line20)\n\n# Draw a line from (0, 0) to (0, 0)\nline21 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line21)\n\n# Draw a line from (0, 0) to (0, 0)\nline22 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line22)\n\n# Draw a line from (0, 0) to (0, 0)\nline23 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line23)\n\n# Draw a line from (0, 0) to (0, 0)\nline24 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line24)\n\n# Draw a line from (0, 0) to (0, 0)\nline25 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line25)\n\n# Draw a line from (0, 0) to (0, 0)\nline26 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line26)\n\n# Draw a line from (0, 0) to (0, 0)\nline27 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line27)\n\n# Draw a line from (0, 0) to (0, 0)\nline28 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line28)\n\n# Draw a line from (0, 0) to (0, 0)\nline29 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line29)\n\n# Draw a line from (0, 0) to (0, 0)\nline30 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line30)\n\n# Draw a line from (0, 0) to (0, 0)\nline31 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line31)\n\n# Draw a line from (0, 0) to (0, 0)\nline32 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line32)\n\n# Draw a line from (0, 0) to (0, 0)\nline33 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line33)\n\n# Draw a line from (0, 0) to (0, 0)\nline34 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line34)\n\n# Draw a line from (0, 0) to (0, 0)\nline35 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line35)\n\n# Draw a line from (0, 0) to (0, 0)\nline36 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line36)\n\n# Draw a line from (0, 0) to (0, 0)\nline37 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line37)\n\n# Draw a line from (0, 0) to (0, 0)\nline38 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line38)\n\n# Draw a line from (0, 0) to (0, 0)\nline39 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line39)\n\n# Draw a line from (0, 0) to (0, 0)\nline40 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line40)\n\n# Draw a line from (0, 0) to (0, 0)\nline41 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line41)\n\n# Draw a line from (0, 0) to (0, 0)\nline42 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line42)\n\n# Draw a line from (0, 0) to (0, 0)\nline43 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line43)\n\n# Draw a line from (0, 0) to (0, 0)\nline44 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line44)\n\n# Draw a line from (0, 0) to (0, 0)\nline45 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line45)\n\n# Draw a line from (0, 0) to (0, 0)\nline46 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line46)\n\n# Draw a line from (0, 0) to (0, 0)\nline47 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line47)\n\n# Draw a line from (0, 0) to (0, 0)\nline48 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line48)\n\n# Draw a line from (0, 0) to (0, 0)\nline49 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line49)\n\n# Draw a line from (0, 0) to (0, 0)\nline50 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line50)\n\n# Draw a line from (0, 0) to (0, 0)\nline51 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line51)\n\n# Draw a line from (0, 0) to (0, 0)\nline52 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line52)\n\n# Draw a line from (0, 0) to (0, 0)\nline53 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line53)\n\n# Draw a line from (0, 0) to (0, 0)\nline54 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line54)\n\n# Draw a line from (0, 0) to (0, 0)\nline55 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line55)\n\n# Draw a line from (0, 0) to (0, 0)\nline56 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line56)\n\n# Draw a line from (0, 0) to (0, 0)\nline57 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line57)\n\n# Draw a line from (0, 0) to (0, 0)\nline58 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line58)\n\n# Draw a line from (0, 0) to (0, 0)\nline59 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line59)\n\n# Draw a line from (0, 0) to (0, 0)\nline60 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line60)\n\n# Draw a line from (0, 0) to (0, 0)\nline61 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line61)\n\n# Draw a line from (0, 0) to (0, 0)\nline62 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line62)\n\n# Draw a line from (0, 0) to (0, 0)\nline63 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line63)\n\n# Draw a line from (0, 0) to (0, 0)\nline64 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line64)\n\n# Draw a line from (0, 0) to (0, 0)\nline65 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line65)\n\n# Draw a line from (0, 0) to (0, 0)\nline66 = plt.Line2D([0, 0], [0, 0], color='black')\nax.add_artist(line66)\n\n# Draw a line from (0, 0) to (0, 0)\nline67 = plt.Line2D([0, 0], [0, 0], color='cyan')\nax.add_artist(line67)\n\n# Draw a line from (0, 0) to (0, 0)\nline68 = plt.Line2D([0, 0], [0, 0], color='magenta')\nax.add_artist(line68)\n\n# Draw a line from (0, 0) to (0, 0)\nline69 = plt.Line2D([0, 0], [0, 0], color='yellow')\nax.add_artist(line69)\n\n# Draw a line from (0, 0) to (0, 0)\nline70 = plt.Line2D([0, 0], [0, 0], color='pink')\nax.add_artist(line70)\n\n# Draw a line from (0, 0) to (0, 0)\nline71 = plt.Line2D([0, 0], [0, 0], color='gray')\nax.add_artist(line71)\n\n# Draw a line from (0, 0) to (0, 0)\nline72 = plt.Line"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a circle with a radius of 10\ncircle = plt.Circle((5, 5), 10, color='red')\nax.add_artist(circle)\n\n# Create a circle with a radius of 8\ncircle = plt.Circle((5, 5), 8, color='orange')\nax.add_artist(circle)\n\n# Create a circle with a radius of 6\ncircle = plt.Circle((5, 5), 6, color='yellow')\nax.add_artist(circle)\n\n# Create a circle with a radius of 4\ncircle = plt.Circle((5, 5), 4, color='green')\nax.add_artist(circle)\n\n# Create a circle with a radius of 2\ncircle = plt.Circle((5, 5), 2, color='cyan')\nax.add_artist(circle)\n\n# Create a circle with a radius of 0\ncircle = plt.Circle((5, 5), 0, color='blue')\nax.add_artist(circle)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data for the plot\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Add a title and labels\nax.set_title('Stock Market Data')\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.5, color='pink')\nax.add_artist(circle)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Create a scatter plot\nx = np.linspace(-1.0, 1.0, 100)\ny = np.sin(x)\nax.plot(x, y, color='blue')\n\n# Create a histogram\nax.hist(y, bins=20, color='green', alpha=0.5)\n\n# Create a KDE plot\nfrom scipy.stats import gaussian_kde\nkde = gaussian_kde(y)\nx_kde = np.linspace(min(y), max(y), 100)\ny_kde = kde(x_kde)\nax.plot(x_kde, y_kde, color='red')\n\n# Set the x-axis label\nax.set_xlabel('Spearman Coefficient')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(7, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(7, 16, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the grid\nax.grid(True)\n\n# Set the title\nax.set_title('Stock Price Prediction')\n\n# Set the labels\nax.set_xlabel('Time (p)')\nax.set_ylabel('Price ($)')\n\n# Plot the data\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='blue')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='red')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='green')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='purple')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='orange')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='pink')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='magenta')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Fashion Trends Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['Brand 1', 'Brand 2', 'Brand 3']\ny = [5, 10, 15]\nax.bar(x, y)\n\n# Create a pie chart with random data\nx = ['Category 1', 'Category 2', 'Category 3']\ny = [20, 30, 50]\nax.pie(y, labels=x)\n\n# Create a histogram with random data\nx = np.random.randn(1000)\nax.hist(x, bins=30)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a 3D scatter plot with random data\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z)\n\n# Create a 3D wireframe plot with random data\nax.plot_wireframe(X, Y, Z)\n\n# Create a 3D contour plot with random data\nax.contour3D(X, Y, Z)\n\n# Create a 3D bar chart with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\ndx = dy = 0.5\ndz = z\nax.bar3d(x, y, z, dx, dy, dz)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter3D(x, y, z)\n\n# Create a 3D surface plot with random data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Log Probability Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Log Probability')\n\n# Set the y-axis label\nax.set_ylabel('Probability')\n\n# Set the x-axis limits\nax.set_xlim(-1.0, 0.8)\n\n# Set the y-axis limits\nax.set_ylim(-0.2, 0.8)\n\n# Set the x-axis ticks\nax.set_xticks([-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([-0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-1.0', '-0.75', '-0.5', '-0.25', '0.0', '0.25', '0.5', '0.75', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-0.2', '-0.1', '0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the x-axis grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick marks\nax.tick_params(axis='x', which='both', bottom=True, top=False, labelbottom=True)\n\n# Set the y-axis tick marks\nax.tick_params(axis='y', which='both', left=True, right=False, labelleft=True)\n\n# Set the x-axis tick mark labels\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark labels\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark width\nax.tick_params(axis='x', which='major', width=1)\n\n# Set the y-axis tick mark width\nax.tick_params(axis='y', which='major', width=1)\n\n# Set the x-axis tick mark color\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the y-axis tick mark color\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the x-axis tick mark length\nax.tick_params(axis='x', which='major', length=5)\n\n# Set the y-axis tick mark length\nax.tick_params(axis='y', which='major', length=5)\n\n# Set the x-axis tick mark rotation\nax.tick_params(axis='x', which='major', rotation=0)\n\n# Set the y-axis tick mark rotation\nax.tick_params(axis='y', which='major', rotation=0)\n\n# Set the x-axis tick mark style\nax.tick_params(axis='x', which='major', style='-')\n\n# Set the y-axis tick mark style\nax.tick_params(axis='y', which='major', style='-')\n\n# Set the x-axis tick mark position\nax.tick_params(axis='x', which='major', pad=5)\n\n# Set the y-axis tick mark position\nax.tick_params(axis='y', which='major', pad=5)\n\n# Set the x-axis tick mark label position\nax.tick_params(axis='x', which='major', labelpad=5)\n\n# Set the y-axis tick mark label position\nax.tick_params(axis='y', which='major', labelpad=5)\n\n# Set the x-axis tick mark label rotation\nax.tick_params(axis='x', which='major', labelrotation=0)\n\n# Set the y-axis tick mark label rotation\nax.tick_params(axis='y', which='major', labelrotation=0)\n\n# Set the x-axis tick mark label style\nax.tick_params(axis='x', which='major', labelstyle='-')\n\n# Set the y-axis tick mark label style\nax.tick_params(axis='y', which='major', labelstyle='-')\n\n# Set the x-axis tick mark label color\nax.tick_params(axis='x', which='major', labelcolor='black')\n\n# Set the y-axis tick mark label color\nax.tick_params(axis='y', which='major', labelcolor='black')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Expert dimension')\n\n# Create a bar chart with the data\nax.bar([1, 2, 3, 4, 5, 6, 7, 8], [5, 6, 7, 8, 9, 10, 11, 12], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('IQM Human Normalized Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Accuracy by hospital and method')\n\n# Create a list of hospitals\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\n\n# Create a list of methods\nmethods = ['Baseline 1', 'Baseline 2', 'FedMM']\n\n# Create a list of accuracy values for each hospital and method\naccuracy_values = [\n    [0.748, 0.759, 0.715],\n    [0.762, 0.748, 0.78],\n    [0.709, 0.687, 0.713]\n]\n\n# Create a color map for the rectangles\ncmap = plt.get_cmap('tab20')\n\n# Create a list of colors for the rectangles\ncolors = [cmap(i) for i in range(len(hospitals))]\n\n# Create a list of labels for the rectangles\nlabels = [f'{hospital} {method}' for hospital in hospitals for method in methods]\n\n# Create a list of positions for the rectangles\npositions = [(i, j) for i in range(len(hospitals)) for j in range(len(methods))]\n\n# Create a list of widths for the rectangles\nwidths = [0.5] * len(positions)\n\n# Create a list of heights for the rectangles\nheights = [0.5] * len(positions)\n\n# Create a list of edge colors for the rectangles\nedge_colors = ['black'] * len(positions)\n\n# Create a list of face colors for the rectangles\nface_colors = [colors[i % len(colors)] for i in range(len(positions))]\n\n# Create a list of hatch patterns for the rectangles\nhatches = ['///'] * len(positions)\n\n# Create a list of text colors for the rectangles\ntext_colors = ['white'] * len(positions)\n\n# Create a list of text sizes for the rectangles\ntext_sizes = [12] * len(positions)\n\n# Create a list of text alignments for the rectangles\ntext_alignments = ['center'] * len(positions)\n\n# Create a list of text vertical alignments for the rectangles\ntext_vertical_alignments = ['center'] * len(positions)\n\n# Create a list of text rotation angles for the rectangles\ntext_rotation_angles = [0] * len(positions)\n\n# Create a list of text rotation modes for the rectangles\ntext_rotation_modes = ['anchor'] * len(positions)\n\n# Create a list of text background colors for the rectangles\ntext_background_colors = ['none'] * len(positions)\n\n# Create a list of text border colors for the rectangles\ntext_border_colors = ['none'] * len(positions)\n\n# Create a list of text border widths for the rectangles\ntext_border_widths = [0] * len(positions)\n\n# Create a list of text border styles for the rectangles\ntext_border_styles = ['solid'] * len(positions)\n\n# Create a list of text border join styles for the rectangles\ntext_border_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border cap styles for the rectangles\ntext_border_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border miter limits for the rectangles\ntext_border_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext_border_dash_join_styles = ['miter'] * len(positions)\n\n# Create a list of text border dash miter limits for the rectangles\ntext_border_dash_miter_limits = [4] * len(positions)\n\n# Create a list of text border dash patterns for the rectangles\ntext_border_dash_patterns = [[1, 1]] * len(positions)\n\n# Create a list of text border dash offsets for the rectangles\ntext_border_dash_offsets = [0] * len(positions)\n\n# Create a list of text border dash cap styles for the rectangles\ntext_border_dash_cap_styles = ['butt'] * len(positions)\n\n# Create a list of text border dash join styles for the rectangles\ntext"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('#F0F0F0')\n\n# Set the title of the plot\nax.set_title('Car Prices (valuation 40)', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Car Models', fontsize=15)\n\n# Set the y-axis label\nax.set_ylabel('Price', fontsize=15)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['GPT-4 Buyer (valuation 40)', 'Claude-2 Buyer (valuation 40)', 'Claude-3 Buyer (valuation 40)', 'GPT-3.5 Buyer (valuation 40)'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([-20, -10, 0, 10, 20])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('DNN x red (k=1)')\n\n# Create a bar chart with the data\nax.bar(['[m]', '[\u0394R]', '[\u0394R^-1]', '[none]'], [0.96, 0.86, 0.78, 0.7], color='blue')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Classes')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-1, 5)\n\n# Set the y-axis limits\nax.set_ylim(0, 2.5)\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Posterior accuracy (\u0394 to no prompting)')\n\n# Set the title of the plot\nax.set_title('Posterior Accuracy over Time')\n\n# Create a bar chart with the data\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='blue')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='orange')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='green')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='red')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='yellow')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='gray')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='pink')\n\n# Add a legend\nax.legend(['Player 1', 'Player 2', 'Player 3', 'Player 4', 'Player 5', 'Player 6', 'Player 7'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the title of the graph\nax.set_title('Performance Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Create a bar chart\nax.bar(['a', 'b', 'c'], [85, 90, 88], color='blue')\n\n# Add a legend\nax.legend(['Performance'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('black')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.set_title('FashionMNIST (NEURAL)', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Metric', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Value', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-',"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Higher Education Enrollment Rate')\n\n# Create a bar chart with the data\nax.bar(['Japan', 'Brazil', 'India', 'Germany', 'United States'], [25, 18, 12, 15, 30], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Enrollment Rate')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Annual Carbon Dioxide Emissions')\n\n# Create a bar chart with the data\nax.bar(['Africa', 'South America', 'North America', 'Asia', 'Europe'], [1200, 1800, 5000, 3200, 10400], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Region')\n\n# Set the y-axis label\nax.set_ylabel('Emissions (in millions of metric tons)')\n\n# Create a second subplot for forest coverage rate\nax2 = fig.add_subplot(212)\nax2.set_title('Forest Coverage Rate')\nax2.bar(['Africa', 'South America', 'North America', 'Asia', 'Europe'], [21, 34, 25, 28, 38], color='green')\n\n# Set the x-axis label\nax2.set_xlabel('Region')\n\n# Set the y-axis label\nax2.set_ylabel('Coverage (%)')\n\n# Create a third subplot for renewable energy usage\nax3 = fig.add_subplot(212)\nax3.set_title('Renewable Energy Usage')\nax3.bar(['Africa', 'South America', 'North America', 'Asia', 'Europe'], [18, 28, 25, 34, 38], color='orange')\n\n# Set the x-axis label\nax3.set_xlabel('Region')\n\n# Set the y-axis label\nax3.set_ylabel('Usage (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 9))\n\n# Set the title of the graph\nax.set_title('Political Sentiment Analysis')\n\n# Create a bar chart with the data\nax.bar(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'], [85, 75, 65, 55], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Sentiment')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Create a list of labels for the judges\njudges = ['Expert', 'Blind', 'Consultancy', 'Debate', 'Interactive Consultancy', 'Interactive Debate']\n\n# Create a list of colors for the bars\ncolors = ['blue', 'green', 'orange', 'red', 'pink', 'purple']\n\n# Create a list of values for the bars\nvalues = [85, 90, 75, 80, 95, 85]\n\n# Create a bar chart with the judges and values\nbars = ax.bar(judges, values, color=colors)\n\n# Add a label to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), va='bottom')\n\n# Set the limits of the x-axis\nax.set_xlim(-1, len(judges))\n\n# Set the limits of the y-axis\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Annual Average Temperature')\nax.set_xlabel('City')\nax.set_ylabel('Temperature (\u00b0C)')\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [12, 14, 16, 18], color='blue')\n\n# Create a figure and axis for the second graph\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Annual Rainfall')\nax.set_xlabel('City')\nax.set_ylabel('Rainfall (mm)')\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [1000, 800, 600, 400], color='green')\n\n# Create a figure and axis for the third graph\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Wind Speed')\nax.set_xlabel('City')\nax.set_ylabel('Speed (m/s)')\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [3, 4, 5, 6], color='red')\n\n# Create a figure and axis for the fourth graph\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Air Quality Index')\nax.set_xlabel('City')\nax.set_ylabel('AQI')\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [50, 60, 70, 80], color='purple')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Total Energy Consumption by Country')\n\n# Create a bar chart with the data\nax.bar(['Germany', 'China', 'USA', 'India', 'Brazil'], [2000, 3000, 4000, 5000, 6000], color='purple')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Energy Consumption (Petajoules)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nratings = [0.30, 0.25, 0.20]\ncolors = ['red', 'green', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.bar(models, ratings, color=colors)\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Energy Assessment Entity')\n\n# Create a bar chart with the data\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [90, 80, 70, 60], color='blue')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [80, 70, 60, 50], color='green')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [70, 60, 50, 40], color='purple')\n\n# Add a horizontal line at y=50\nax.axhline(y=50, color='black', linestyle='-')\n\n# Add a vertical line at x=2\nax.axvline(x=2, color='black', linestyle='-')\n\n# Add a rectangle at (1, 80)\nax.add_patch(plt.Rectangle((1, 80), 1, 10, color='red'))\n\n# Add a text annotation at (3, 70)\nax.text(3, 70, 'Efficiency', fontsize=12)\n\n# Add a text annotation at (1, 60)\nax.text(1, 60, 'Costs', fontsize=12)\n\n# Add a text annotation at (2, 50)\nax.text(2, 50, 'Sustainability', fontsize=12)\n\n# Add a text annotation at (3, 40)\nax.text(3, 40, 'Regulatory', fontsize=12)\n\n# Add a text annotation at (1, 30)\nax.text(1, 30, 'Safety', fontsize=12)\n\n# Add a text annotation at (2, 20)\nax.text(2, 20, 'Environmental', fontsize=12)\n\n# Add a text annotation at (3, 10)\nax.text(3, 10, 'Impact', fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Educational Metrics by Region')\n\n# Define the regions and their metrics\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nmetrics = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]\n\n# Create a bar chart\nax.bar(regions, metrics, color='lightblue')\n\n# Add a horizontal line for the average metric\nax.axhline(y=50, color='black', linestyle='-')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='High School Graduation', markerfacecolor='b', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Higher Education Enrollment', markerfacecolor='y', markersize=10)]\nax.legend(handles=legend_elements)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\nrecall_rates = [46.3, 34.1, 53.8, 19.4]\nmisleading_rates = [30.1, 57.9, 53.7, 20.0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart\nax.bar(brands, recall_rates, color='blue')\nax.bar(brands, misleading_rates, bottom=recall_rates, color='orange')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Recall Rates')\nax.set_title('Comparison of Recall Rates Across Products')\n\n# Add a legend\nax.legend(['Truthful Recall', 'Misleading Recall'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsatisfaction_scores = [15, 18, 20, 12, 17, 10, 8]\ncomplaint_rates = [75, 82, 78, 85, 80, 88, 90]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart\nax.bar(categories, satisfaction_scores, color='blue')\n\n# Add a title and labels\nax.set_title('Satisfaction Scores')\nax.set_xlabel('Categories')\nax.set_ylabel('Satisfaction Score')\n\n# Draw a vertical line at the center of the plot\nax.axvline(x=len(categories)/2, color='black')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Customer Satisfaction Ratings')\n\n# Set the x-axis labels\nax.set_xlabel('Customer Satisfaction Metrics')\nax.set_ylabel('Percentage')\n\n# Define the data for the bars\nmetrics = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsatisfaction = [75, 82, 78, 85, 80, 88, 90]\ndisagreement = [15, 18, 20, 12, 17, 10, 8]\n\n# Create the bar chart\nbars = ax.bar(metrics, satisfaction, color='orange', label='Satisfaction')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(metrics, disagreement, bottom=satisfaction, color='pink', label='Disagreement')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the x-axis limits\nax.set_xlim(-0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 1.2)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the x-axis labels\nax.set_xticklabels(['Watering Frequency', 'Planting Density', 'Plant Variety', 'CO2 Levels', 'Pesticides'])\n\n# Set the y-axis labels\nax.set_yticklabels(['Impact on Plant Growth (\u0394 to control)'])\n\n# Set the title of the plot\nax.set_title('Impact of Environmental Factors on Plant Growth')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, 0.95, 'Environmental Factors', ha='center', va='center', fontsize=14, color='green')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='lightgreen'))\nax.add_patch(plt.Rectangle((0.3, 0.1), 0.2, 0.2, color='lightblue'))\nax.add_patch(plt.Rectangle((0.5, 0.1), 0.2, 0.2, color='lightgrey'))\nax.add_patch(plt.Rectangle((0.7, 0.1), 0.2, 0.2, color='lightyellow'))\nax.add_patch(plt.Rectangle((0.9, 0.1), 0.2, 0.2, color='lightpink'))\n\n# Set the color of the text\nax.text(0.1, 0.95, 'Watering Frequency', ha='center', va='center', fontsize=12, color='black')\nax.text(0.3, 0.95, 'Planting Density', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, 0.95, 'Plant Variety', ha='center', va='center', fontsize=12, color='black')\nax.text(0.7, 0.95, 'CO2 Levels', ha='center', va='center', fontsize=12, color='black')\nax.text(0.9, 0.95, 'Pesticides', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='lightgreen'))\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='lightblue'))\nax.add_patch(plt.Rectangle((0.5, 0.3), 0.2, 0.2, color='lightgrey'))\nax.add_patch(plt.Rectangle((0.7, 0.3), 0.2, 0.2, color='lightyellow'))\nax.add_patch(plt.Rectangle((0.9, 0.3), 0.2, 0.2, color='lightpink'))\n\n# Set the color of the text\nax.text(0.1, 0.75, 'Temperature', ha='center', va='center', fontsize=12, color='black')\nax.text(0.3, 0.75, 'Fertilizer', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, 0.75, 'Soil pH', ha='center', va='center', fontsize=12, color='black')\nax.text(0.7, 0.75, 'Water Quality', ha='center', va='center', fontsize=12, color='black')\nax.text(0.9, 0.75, 'Sunlight', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='lightgreen'))\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='lightblue'))\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='lightgrey'))\nax.add_patch(plt.Rectangle((0.7, 0.5), 0.2, 0.2, color='lightyellow'))\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.2, color='lightpink'))\n\n# Set the color of the text\nax.text(0.1, 0.5, 'Pesticides', ha='center', va='center', fontsize=12, color='black')\nax.text(0.3, 0.5, 'Temperature', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, 0.5, 'Fertilizer', ha='center', va='center', fontsize=12, color='black')\nax.text(0.7, 0.5, 'Soil pH', ha='center', va='center', fontsize=12, color='black')\nax.text(0.9, 0.5, 'Water Quality', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.2, 0.2, color='lightgreen'))\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='lightblue'))\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='lightgrey'))\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='lightyellow'))\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='lightpink'))\n\n# Set the color of the text\nax.text(0.1, 0.25, 'Watering Frequency', ha='center', va='center', fontsize=12, color='black')\nax.text(0.3, 0.25, 'Planting Density', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, 0.25, 'Plant Variety', ha='center', va='center', fontsize=12, color='black')\nax.text(0.7, 0.25, 'CO2 Levels', ha='center', va='center', fontsize=12, color='black')\nax.text(0.9, 0.25, 'Pesticides', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.2, 0.2, color='lightgreen'))\nax.add_patch(plt.Rectangle((0.3, 0.9), 0.2, 0.2, color='lightblue'))\nax.add_patch(plt.Rectangle((0.5, 0.9), 0.2, 0.2, color='lightgrey'))\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='lightyellow'))\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='lightpink'))\n\n# Set the color of the text\nax.text(0.1, 0.15, 'Watering Frequency', ha='center', va='center', fontsize=12, color='black')\nax.text(0.3, 0.15, 'Planting Density', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, 0.15, 'Plant Variety', ha='center', va='center', fontsize=12, color='black')\nax.text(0.7, 0.15, 'CO2 Levels', ha='center', va='center', fontsize=12, color='black')\nax.text(0.9, 0.15, 'Pesticides', ha='center', va='center', fontsize=12, color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncities = ['New York', 'Los Angeles', 'Chicago']\nmetrics = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nvalues = [[250, 230, 220], [220, 210, 200], [190, 180, 170]]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot each city's metrics\nfor i, city in enumerate(cities):\n    axs[i].bar(metrics, values[i], color='blue')\n    axs[i].set_title(city)\n    axs[i].set_ylim([0, 250])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim([0, 1])\n\n# Set the y-axis limits\nax.set_ylim([0, 1])\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'FashionMNIST (NEURAL)', horizontalalignment='center', verticalalignment='center', fontsize=12, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.1, 0.1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange'))\n\n# Set the color of the rectangle\nax"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the x-axis label\nax.set_xlabel('Cities')\n\n# Set the y-axis label\nax.set_ylabel('Environmental Impact Score')\n\n# Define the data for the bar chart\ncities = ['City A', 'City B', 'City C', 'City D']\nscores = [2.3, 4.5, 3.2, 1.9]\n\n# Create a bar chart\nbars = ax.bar(cities, scores, color='green')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the limits of the y-axis\nax.set_ylim(0, 20)\n\n# Set the ticks on the y-axis\nax.set_yticks([0, 5, 10, 15, 20])\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax.grid(axis='y', color='gray', linestyle='--')\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Environmental Impact Scores Across Cities', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Cities', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Environmental Impact Score', color='black')\n\n# Set the color of the grid lines\nax"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nroles = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\ndurations = [84.97, 102.67, 78.22, 85.17, 90]\ntokens = [449.33, 780.67, 612.99, 547.39, 618.52]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the first subplot\naxs[0].bar(roles, durations, color='skyblue')\naxs[0].set_title('a) Speak duration of roles')\naxs[0].set_xlabel('Role')\naxs[0].set_ylabel('Duration (s)')\naxs[0].set_ylim([0, 120])\n\n# Plot the second subplot\naxs[1].bar(roles, tokens, color='lightgreen')\naxs[1].set_title('b) Speak tokens of roles')\naxs[1].set_xlabel('Role')\naxs[1].set_ylabel('Tokens')\naxs[1].set_ylim([0, 800])\n\n# Add a horizontal line at the top of each bar\nfor i in range(len(roles)):\n    axs[0].plot([i, i], [120, 120], 'k-')\n    axs[1].plot([i, i], [800, 800], 'k-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('Data Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Size of Data for Training and Validation')\n\n# Set the y-axis label\nax.set_ylabel('True+info (%)')\n\n# Define the data points\nx = ['5%', '10%', '20%', '30%', '40%', '50%']\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add rectangles for each data point\nfor i in range(len(x)):\n    ax.add_patch(plt.Rectangle((x[i], 0), 0.1, 66, color='skyblue'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Out-of-domain accuracy')\n\n# Create a bar chart with the data\nax.bar(['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'test.7', 'test.8', 'test.9', 'test.10'], [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816, 0.814, 0.812, 0.810], color='blue')\n\n# Add a vertical line at the mean value\nax.axvline(x=6.5, color='black')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Mini Crosswords Performance')\n\n# Create a bar chart with the data\nax.bar(['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three'], [0.7, 0.8, 0.6, 0.5, 0.4], color='skyblue')\n\n# Add a vertical line at the current time\nax.axvline(x=0.5, color='black')\n\n# Add a horizontal line at the current time\nax.axhline(y=0.6, color='red')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.4, 0.5), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a text box to the plot\nax.text(0.45, 0.55, 'ToT (0.675)', fontsize=12, color='white', bbox=dict(facecolor='red', alpha=0.5))\n\n# Set the x-axis limits\nax.set_xlim([0, 1])\n\n# Set the y-axis limits\nax.set_ylim([0, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Define the data for the bars\nbars = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'DeBERTaV2', 'Llama2']\naccuracies = [55, 60, 58, 62, 57, 59, 64, 61, 56, 53]\n\n# Create a bar chart\nax.bar(bars, accuracies, color='blue')\n\n# Add labels to the bars\nfor i, v in enumerate(accuracies):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Model Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the chart\nax.set_title('Your Chart Title Here')\n\n# Set the x-axis label\nax.set_xlabel('A')\n\n# Set the y-axis label\nax.set_ylabel('B')\n\n# Set the x-axis limits\nax.set_xlim(-3.5, 1.5)\n\n# Set the y-axis limits\nax.set_ylim(-2.5, 2.5)\n\n# Set the x-axis ticks\nax.set_xticks([-3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5])\n\n# Set the y-axis ticks\nax.set_yticks([-2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-3.5', '-3.0', '-2.5', '-2.0', '-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-2.5', '-2.0', '-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5', '2.0', '2.5'])\n\n# Set the color of the x-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='#ADD8E6'))\n\n# Set the color of the line\nax.plot([0.2, 0.8], [0.2, 0.8], 'k-')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Your Text Here', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis labels\nx_labels = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\n\n# Set the y-axis values\ny_values = [0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18]\n\n# Plot the data\nax.plot(x_labels, y_values, marker='o')\n\n# Set the title of the plot\nax.set_title('Shouting Fraction (Fraction of videos)')\n\n# Set the x-axis label\nax.set_xlabel('Category')\n\n# Set the y-axis label\nax.set_ylabel('Shouting Fraction')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.2)\n\n# Set the y-axis ticks\nax.set_yticks([0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.02%', '0.04%', '0.06%', '0.08%', '0.10%', '0.12%', '0.14%', '0.16%', '0.18%'])\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 5.5)\n\n# Set the x-axis ticks\nax.set_xticks(range(len(x_labels)))\n\n# Set the x-axis tick labels\nax.set_xticklabels(x_labels)\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend(['Dataset mean', 'Mean'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Variable, Symmetric Error')\n\n# Create a scatter plot with random data\nax.scatter([1, 2, 3, 4, 5], [10, 15, 12, 18, 17])\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the graph\nx = [0.16, 0.18, 0.20, 0.22, 0.24, 0.26, 0.28]\ny = [0.16, 0.18, 0.20, 0.22, 0.24, 0.26, 0.28]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Incivility (Fraction of Videos)')\nax.set_xlabel('Dataset mean')\nax.set_ylabel('Mean')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the x-axis limits\nax.set_xlim(-19.6, -19)\n\n# Set the y-axis limits\nax.set_ylim(-19.6, -19)\n\n# Set the x-axis label\nax.set_xlabel('M$_B$')\n\n# Set the y-axis label\nax.set_ylabel('M$_{AB}$')\n\n# Set the title of the plot\nax.set_title('Pantheon')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='cyan')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19, -19), 0.1, 0.1, color='magenta')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18.9, -18.9), 0.1, 0.1, color='white')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18.8, -18.8), 0.1, 0.1, color='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18.7, -18.7), 0.1, 0.1, color='gray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18.6, -18.6), 0.1, 0.1, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18.5, -18.5), 0.1, 0.1, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18.4, -18.4), 0.1, 0.1, color='brown')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18.3, -18.3), 0.1, 0.1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18.2, -18.2), 0.1, 0.1, color='orange')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18.1, -18.1), 0.1, 0.1, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-18, -18), 0.1, 0.1, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17.9, -17.9), 0.1, 0.1, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17.8, -17.8), 0.1, 0.1, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17.7, -17.7), 0.1, 0.1, color='teal')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17.6, -17.6), 0.1, 0.1, color='coral')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17.5, -17.5), 0.1, 0.1, color='crimson')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17.4, -17.4), 0.1, 0.1, color='cyan')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17.3, -17.3), 0.1, 0.1, color='darkblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17.2, -17.2), 0.1, 0.1, color='darkgreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17.1, -17.1), 0.1, 0.1, color='darkgrey')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-17, -17), 0.1, 0.1, color='darkkhaki')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16.9, -16.9), 0.1, 0.1, color='darkmagenta')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16.8, -16.8), 0.1, 0.1, color='darkolivegreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16.7, -16.7), 0.1, 0.1, color='darkorange')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16.6, -16.6), 0.1, 0.1, color='darkred')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16.5, -16.5), 0.1, 0.1, color='darksalmon')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16.4, -16.4), 0.1, 0.1, color='darkseagreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16.3, -16.3), 0.1, 0.1, color='darkslateblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16.2, -16.2), 0.1, 0.1, color='darkslategray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16.1, -16.1), 0.1, 0.1, color='darkturquoise')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-16, -16), 0.1, 0.1, color='darkviolet')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15.9, -15.9), 0.1, 0.1, color='deeppink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15.8, -15.8), 0.1, 0.1, color='deepskyblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15.7, -15.7), 0.1, 0.1, color='dimgray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15.6, -15.6), 0.1, 0.1, color='dodgerblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15.5, -15.5), 0.1, 0.1, color='firebrick')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15.4, -15.4), 0.1, 0.1, color='floralwhite')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15.3, -15.3), 0.1, 0.1, color='forestgreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15.2, -15.2), 0.1, 0.1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15.1, -15.1), 0.1, 0.1, color='gainsboro')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-15, -15), 0.1, 0.1, color='ghostwhite')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14.9, -14.9), 0.1, 0.1, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14.8, -14.8), 0.1, 0.1, color='goldenrod')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14.7, -14.7), 0.1, 0.1, color='gray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14.6, -14.6), 0.1, 0.1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14.5, -14.5), 0.1, 0.1, color='greenyellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14.4, -14.4), 0.1, 0.1, color='honeydew')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14.3, -14.3), 0.1, 0.1, color='hotpink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14.2, -14.2), 0.1, 0.1, color='indianred')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14.1, -14.1), 0.1, 0.1, color='indigo')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-14, -14), 0.1, 0.1, color='ivory')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13.9, -13.9), 0.1, 0.1, color='khaki')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13.8, -13.8), 0.1, 0.1, color='lavender')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13.7, -13.7), 0.1, 0.1, color='lavenderblush')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13.6, -13.6), 0.1, 0.1, color='lawngreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13.5, -13.5), 0.1, 0.1, color='lemonchiffon')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13.4, -13.4), 0.1, 0.1, color='lightblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13.3, -13.3), 0.1, 0.1, color='lightcoral')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13.2, -13.2), 0.1, 0.1, color='lightcyan')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13.1, -13.1), 0.1, 0.1, color='lightgoldenrodyellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-13, -13), 0.1, 0.1, color='lightgray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12.9, -12.9), 0.1, 0.1, color='lightgreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12.8, -12.8), 0.1, 0.1, color='lightpink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12.7, -12.7), 0.1, 0.1, color='lightsalmon')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12.6, -12.6), 0.1, 0.1, color='lightseagreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12.5, -12.5), 0.1, 0.1, color='lightskyblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12.4, -12.4), 0.1, 0.1, color='lightslategray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12.3, -12.3), 0.1, 0.1, color='lightsteelblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12.2, -12.2), 0.1, 0.1, color='lightyellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12.1, -12.1), 0.1, 0.1, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-12, -12), 0.1, 0.1, color='limegreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11.9, -11.9), 0.1, 0.1, color='linen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11.8, -11.8), 0.1, 0.1, color='magenta')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11.7, -11.7), 0.1, 0.1, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11.6, -11.6), 0.1, 0.1, color='mediumaquamarine')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11.5, -11.5), 0.1, 0.1, color='mediumblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11.4, -11.4), 0.1, 0.1, color='mediumorchid')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11.3, -11.3), 0.1, 0.1, color='mediumpurple')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11.2, -11.2), 0.1, 0.1, color='mediumseagreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11.1, -11.1), 0.1, 0.1, color='mediumslateblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-11, -11), 0.1, 0.1, color='mediumspringgreen')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-10.9, -10.9), 0.1, 0.1, color='mediumturquoise')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-10.8, -10.8), 0.1, 0.1, color='mediumvioletred')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-10.7, -10.7), 0.1, 0.1, color='midnightblue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-10.6, -10.6), 0.1, 0.1, color='mintcream')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-10.5"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the x-axis label\nax.set_xlabel('Number of speakers')\n\n# Set the y-axis label\nax.set_ylabel('Unique speaker count mean')\n\n# Create a scatter plot with random data\nax.scatter([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], color='blue')\n\n# Create a bar chart with random data\nax.bar([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], color='red')\n\n# Create a line graph with random data\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], color='green')\n\n# Create a pie chart with random data\nax.pie([10, 12, 14, 16, 18], colors=['blue', 'red', 'green', 'yellow', 'purple'])\n\n# Create a histogram with random data\nax.hist([10, 12, 14, 16, 18], bins=5, color='orange')\n\n# Create a box plot with random data\nax.boxplot([10, 12, 14, 16, 18])\n\n# Create a violin plot with random data\nax.violinplot([10, 12, 14, 16, 18])\n\n# Create a heatmap with random data\nax.imshow([[10, 12, 14, 16, 18], [10, 12, 14, 16, 18]], cmap='hot')\n\n# Create a contour plot with random data\nax.contourf([10, 12, 14, 16, 18], [10, 12, 14, 16, 18], [[10, 12, 14, 16, 18], [10, 12, 14, 16, 18]])\n\n# Create a scatter plot with random data\nax.scatter([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], color='blue')\n\n# Create a bar chart with random data\nax.bar([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], color='red')\n\n# Create a line graph with random data\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], color='green')\n\n# Create a pie chart with random data\nax.pie([10, 12, 14, 16, 18], colors=['blue', 'red', 'green', 'yellow', 'purple'])\n\n# Create a histogram with random data\nax.hist([10, 12, 14, 16, 18], bins=5, color='orange')\n\n# Create a box plot with random data\nax.boxplot([10, 12, 14, 16, 18])\n\n# Create a violin plot with random data\nax.violinplot([10, 12, 14, 16, 18])\n\n# Create a heatmap with random data\nax.imshow([[10, 12, 14, 16, 18], [10, 12, 14, 16, 18]], cmap='hot')\n\n# Create a contour plot with random data\nax.contourf([10, 12, 14, 16, 18], [10, 12, 14, 16, 18], [[10, 12, 14, 16, 18], [10, 12, 14, 16, 18]])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Global Stock Market')\n\n# Set the x-axis label\nax.set_xlabel('Date')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Set the x-axis tick labels\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Set the y-axis limits\nax.set_ylim(0.5, 2.5)\n\n# Set the y-axis tick labels\nax.set_yticks([0.5, 1, 1.5, 2, 2.5])\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the y-axis width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis position\nax.spines['left'].set_position('zero')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('blue')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(14)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label rotation\nax.yaxis.label.set_rotation(0)\n\n# Set the y-axis label horizontal alignment\nax.yaxis.label.set_horizontalalignment('center')\n\n# Set the y-axis label vertical alignment\nax.yaxis.label.set_verticalalignment('center')\n\n# Set the y-axis label background color\nax.yaxis.label.set_facecolor('white')\n\n# Set the y-axis label edge color\nax.yaxis.label.set_edgecolor('black')\n\n# Set the y-axis label line width\nax.yaxis.label.set_linewidth(1)\n\n# Set the y-axis label line style\nax.yaxis.label.set_linestyle('-')\n\n# Set the y-axis label line join style\nax.yaxis.label.set_joinstyle('round')\n\n# Set the y-axis label line cap style\nax.yaxis.label.set_capstyle('projecting')\n\n# Set the y-axis label line miter limit\nax.yaxis.label.set_miterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis label line dash cap style\nax.yaxis.label.set_dashcapstyle('butt')\n\n# Set the y-axis label line dash join style\nax.yaxis.label.set_dashjoinstyle('miter')\n\n# Set the y-axis label line dash miter limit\nax.yaxis.label.set_dashmiterlimit(10)\n\n# Set the y-axis label line dash pattern\nax.yaxis.label.set_dashpattern([2, 2])\n\n# Set the y-axis label line dash offset\nax.yaxis.label.set_dashoffset(0)\n\n# Set the y-axis"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Errorbar upper and lower limits')\n\n# Create a scatter plot with error bars\nx = [1, 2, 3, 4, 5]\ny = [1.5, 2.5, 3.5, 4.5, 5.5]\nyerr = [0.5, 0.5, 0.5, 0.5, 0.5]\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='r', capsize=5)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the first graph\nx = np.linspace(0, 3.5, 100)\ny = np.sin(x)\naxs[0].plot(x, y, 'r-')\naxs[0].set_title('variable, symmetric error')\n\n# Plot the second graph\nx = np.linspace(0, 3.5, 100)\ny = np.cos(x)\naxs[1].plot(x, y, 'b-')\naxs[1].set_title('variable, symmetric error')\n\n# Add a legend\naxs[0].legend(['sin(x)', 'cos(x)'])\naxs[1].legend(['sin(x)', 'cos(x)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Set the x-axis label\nax.set_xlabel('time')\n\n# Set the y-axis label\nax.set_ylabel('value')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(15, 36, 5))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['15', '20', '25', '30', '35'])\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the line width\nax.spines['top'].set_linewidth(2)\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\n\n# Set the line style\nax.spines['top'].set_linestyle('--')\nax.spines['bottom'].set_linestyle('--')\nax.spines['left'].set_linestyle('--')\nax.spines['right'].set_linestyle('--')\n\n# Set the line color\nax.spines['top'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('green')\nax.spines['right'].set_color('yellow')\n\n# Set the line cap\nax.spines['top'].set_capstyle('round')\nax.spines['bottom'].set_capstyle('round')\nax.spines['left'].set_capstyle('round')\nax.spines['right'].set_capstyle('round')\n\n# Set the line join\nax.spines['top'].set_joinstyle('round')\nax.spines['bottom'].set_joinstyle('round')\nax.spines['left'].set_joinstyle('round')\nax.spines['right'].set_joinstyle('round')\n\n# Set the line dash pattern\nax.spines['top'].set_dashes([2, 2])\nax.spines['bottom'].set_dashes([2, 2])\nax.spines['left'].set_dashes([2, 2])\nax.spines['right'].set_dashes([2, 2])\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\nax.spines['bottom'].set_dashoffset(2)\nax.spines['left'].set_dashoffset(2)\nax.spines['right'].set_dashoffset(2)\n\n# Set the line dash phase\nax.spines['top'].set_dashphase(2)\nax.spines['bottom'].set_dashphase(2)\nax.spines['left'].set_dashphase(2)\nax.spines['right'].set_dashphase(2)\n\n# Set the line dash length\nax.spines['top'].set_dashlength(2)\nax.spines['bottom'].set_dashlength(2)\nax.spines['left'].set_dashlength(2)\nax.spines['right'].set_dashlength(2)\n\n# Set the line dash angle\nax.spines['top'].set_dashangle(2)\nax.spines['bottom'].set_dashangle(2)\nax.spines['left'].set_dashangle(2)\nax.spines['right'].set_dashangle(2)\n\n# Set the line dash cap\nax.spines['top'].set_dashcapstyle('round')\nax.spines['bottom'].set_dashcapstyle('round')\nax.spines['left'].set_dashcapstyle('round')\nax.spines['right'].set_dashcapstyle('round')\n\n# Set the line dash join\nax.spines['top'].set_dashjoinstyle('round')\nax.spines['bottom'].set_dashjoinstyle('round')\nax.spines['left'].set_dashjoinstyle('round')\nax.spines['right'].set_dashjoinstyle('round')\n\n# Set the line dash offset\nax.spines['top'].set_dashoffset(2)\n"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Create a rectangle for the errorbar\nerrorbar = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(errorbar)\n\n# Create a scatter plot with the data\nx = [0, 5, 10, 15, 20]\ny = [-2.1, -2.6, -1.2, -1.0, -2.7]\nax.scatter(x, y, c='purple')\n\n# Create a line plot with the data\nax.plot(x, y, 'o-', color='purple')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 20)\n\n# Set the limits of the y-axis\nax.set_ylim(-3, 20)\n\n# Set the tick labels\nax.set_xticks([0, 5, 10, 15, 20])\nax.set_yticks([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the number of points\nn = 100\n\n# Generate random data for the scatter plot\nx = np.random.rand(n)\ny = np.random.rand(n)\n\n# Plot the scatter plot\nax.scatter(x, y)\n\n# Set the title and labels\nax.set_title('Scatter Plot')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='pink')\nax.add_artist(circle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.5], [0.3, 0.7], [0.7, 0.7], [0.5, 0.5], [0.3, 0.3], [0.7, 0.3]], color='pink')\nax.add_artist(star)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.5, 0.1], [0.3, 0.9], [0.7, 0.9]], color='pink')\nax.add_artist(triangle)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='pink')\nax.add_artist(line)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the plot\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Sine Wave')\n\n# Set the x and y labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Sine Wave')\n\n# Set the x and y labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data for the plot\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Create a bar chart with the data\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [0.61, 0.74, 0.70, 0.70, 0.57], color='orange')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [0.69, 0.64, 0.67, 0.45, 0.57], color='pink')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [0.67, 0.62, 0.69, 0.45, 0.57], color='lightblue')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [0.65, 0.60, 0.67, 0.45, 0.57], color='lightgreen')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [0.63, 0.58, 0.65, 0.45, 0.57], color='lightyellow')\n\n# Add a legend\nax.legend(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Define the data for the pie chart\ndata = [50.8, 28.1, 2.6, 0.5, 4.1, 8.1, 9.2, 10.5, 14.3, 12.3, 0.9, 6.2, 7.8, 15.5, 17.3, 13.9, 16.3]\n\n# Define the labels for the pie chart\nlabels = ['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain']\n\n# Create a pie chart with the data and labels\nwedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the colors of the wedges\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\nfor wedge, color in zip(wedges, colors):\n    wedge.set_facecolor(color)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 4)\n\n# Add a color bar\ncbar = fig.colorbar(cmap(np.linspace(0, 1, 256)), ax=ax, orientation='vertical')\n\n# Add a title\nax.set_title('Player Performance')\n\n# Add a subtitle\nax.set_xlabel('Players')\n\n# Add a legend\nax.legend()\n\n# Add a grid\nax.grid(True)\n\n# Add a scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap=cmap)\n\n# Add a histogram\nax.hist(np.random.rand(100), bins=10, color='blue')\n\n# Add a boxplot\nax.boxplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)], patch_artist=True)\n\n# Add a violin plot\nax.violinplot([np.random.rand(10), np.random.rand(10), np.random.rand(10)])\n\n# Add a bar chart\nax.bar(['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu'], [0.9, 0.8, 0.7, 0.6, 0.5], color='orange')\n\n# Add a pie chart\nax.pie([0.9, 0.8, 0.7, 0.6, 0.5], labels=['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu'], colors=['red', 'green', 'blue', 'yellow', 'purple'])\n\n# Add a heatmap\nax.imshow(np.random.rand(10, 10), cmap=cmap)\n\n# Add a contour plot\nax.contourf(np.random.rand(10, 10), cmap=cmap)\n\n# Add a streamplot\nax.streamplot(np.random.rand(10, 10), np.random.rand(10, 10), cmap=cmap)\n\n# Add a quiver plot\nax.quiver(np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), cmap=cmap)\n\n# Add a polar plot\nax.polar(np.random.rand(10), np.random.rand(10), cmap=cmap)\n\n# Add a 3D plot\nax.plot_surface(np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), cmap=cmap)\n\n# Add a 3D scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap=cmap)\n\n# Add a 3D bar chart\nax.bar3d(np.random.rand(10), np.random.rand(10), np.random.rand(10), np.random.rand(10), np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a 3D pie chart\nax.pie3d([0.9, 0.8, 0.7, 0.6, 0.5], labels=['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu'], colors=['red', 'green', 'blue', 'yellow', 'purple'])\n\n# Add a 3D heatmap\nax.imshow3d(np.random.rand(10, 10), cmap=cmap)\n\n# Add a 3D contour plot\nax.contourf3d(np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), cmap=cmap)\n\n# Add a 3D streamplot\nax.streamplot3d(np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), cmap=cmap)\n\n# Add a 3D quiver plot\nax.quiver3d(np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), cmap=cmap)\n\n# Add a 3D polar plot\nax.polar3d(np.random.rand(10), np.random.rand(10), np.random.rand(10), cmap=cmap)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Live vs Predicted Category Similarity', fontsize=24)\n\n# Set the x-axis label\nax.set_xlabel('Live Category', fontsize=18)\n\n# Set the y-axis label\nax.set_ylabel('Predicted Category', fontsize=18)\n\n# Set the x-axis tick labels\nax.set_xticks(np.arange(0, 51, 10))\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticks(np.arange(0, 51, 10))\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the plot title\nax.title.set_color('black')\n\n# Set the color of the plot grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.set_title('LOH0')\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 3)\nax1 = fig.add_subplot(gs[0, :])\nax2 = fig.add_subplot(gs[1, :-1])\nax3 = fig.add_subplot(gs[1:, -1])\nax4 = fig.add_subplot(gs[-1, 0:-1])\nax5 = fig.add_subplot(gs[-1, -1])\n\n# Set the color of the rectangles\nax1.set_facecolor('grey')\nax2.set_facecolor('lightblue')\nax3.set_facecolor('lightgreen')\nax4.set_facecolor('lightyellow')\nax5.set_facecolor('brown')\n\n# Set the text of the rectangles\nax1.text(0.5, 0.5, 'D''2', ha='center', va='center', fontsize=18)\nax2.text(0.5, 0.5, 'D''1', ha='center', va='center', fontsize=18)\nax3.text(0.5, 0.5, 'D''0', ha='center', va='center', fontsize=18)\nax4.text(0.5, 0.5, 'LOH1', ha='center', va='center', fontsize=18)\nax5.text(0.5, 0.5, 'LOH2', ha='center', va='center', fontsize=18)\n\n# Set the text of the rectangles\nax1.text(0.5, 0.5, '4.0%', ha='center', va='center', fontsize=18)\nax2.text(0.5, 0.5, '8.0%', ha='center', va='center', fontsize=18)\nax3.text(0.5, 0.5, '12.0%', ha='center', va='center', fontsize=18)\nax4.text(0.5, 0.5, '16.0%', ha='center', va='center', fontsize=18)\nax5.text(0.5, 0.5, '20.0%', ha='center', va='center', fontsize=18)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Global Economy')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('GDP')\n\n# Set the x-axis limits\nax.set_xlim(-1, 1)\n\n# Set the y-axis limits\nax.set_ylim(-1, 1)\n\n# Create a color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a color bar\ncbar = fig.colorbar(cmap(np.linspace(0, 1, 256)), ax=ax)\n\n# Set the color bar label\ncbar.set_label('GDP')\n\n# Set the color bar ticks\ncbar.set_ticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['-100', '-50', '0', '50', '100'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(logo)\n\n# Create a bar chart for the ratings\nratings = [1, 2, 3, 4, 5]\nax.bar(ratings, np.random.rand(5), color='red')\n\n# Create a scatter plot for the reviews\nreviews = np.random.rand(10)\nax.scatter(reviews, np.random.rand(10), color='green')\n\n# Create a histogram for the price range\nprice_range = np.random.rand(10)\nax.hist(price_range, bins=5, color='blue')\n\n# Create a pie chart for the categories\ncategories = ['Electronics', 'Clothing', 'Toys', 'Books', 'Home']\nax.pie(np.random.rand(5), labels=categories, colors=['purple', 'orange', 'yellow', 'pink', 'brown'])\n\n# Add a title and labels\nax.set_title('Product Information')\nax.set_xlabel('To layer')\nax.set_ylabel('Price')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the chart\nax.set_title('Sales Performance Heatmap')\n\n# Create a color map for the heatmap\ncmap = plt.get_cmap('OrRd')\n\n# Create a heatmap with random data\nheatmap = ax.imshow(np.random.rand(10, 10), cmap=cmap)\n\n# Add a color bar to the right of the heatmap\ncbar = fig.colorbar(heatmap)\n\n# Set the tick labels for the x-axis\nax.set_xticks(np.arange(len(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])))\nax.set_yticks(np.arange(len(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])))\nax.set_xticklabels(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])):\n    for j in range(len(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])):\n        text = ax.text(j, i, np.random.randint(100, 1000),\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the title of the plot\nax.set_title('Time Series Data')\n\n# Create a color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a list of colors\ncolors = [cmap(i) for i in np.linspace(0, 1, 10)]\n\n# Create a list of labels\nlabels = ['context', 'option', 'cot', 'last']\n\n# Create a list of data\ndata = [[i, j] for i in range(10) for j in range(10)]\n\n# Plot the data\nfor i, label in enumerate(labels):\n    ax.plot(data[i], color=colors[i], label=label)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Weather')\n\n# Create a color map for the scatter plot\ncmap = plt.get_cmap('YlOrBr')\n\n# Create a scatter plot with random data\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\nsizes = 1000 * np.random.rand(100)\n\n# Plot the scatter plot\nscatter = ax.scatter(x, y, c=colors, s=sizes, cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(scatter)\n\n# Set the limits of the x-axis and y-axis\nax.set_xlim([96, 720])\nax.set_ylim([96, 720])\n\n# Set the labels of the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Temperature')\n\n# Set the tick labels of the x-axis and y-axis\nax.set_xticks(np.arange(96, 721, 36))\nax.set_yticks(np.arange(96, 721, 36))\n\n# Set the tick labels of the x-axis and y-axis\nax.set_xticklabels(['96', '120', '144', '168', '192', '216', '240', '264', '288', '312', '336', '360', '384', '408', '432', '456', '480', '504', '528', '552', '576', '600', '624', '648', '672', '696', '720'])\nax.set_yticklabels(['96', '120', '144', '168', '192', '216', '240', '264', '288', '312', '336', '360', '384', '408', '432', '456', '480', '504', '528', '552', '576', '600', '624', '648', '672', '696', '720'])\n\n# Set the color of the scatter plot\nscatter.set_facecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_edgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_alpha(0.5)\n\n# Set the color of the scatter plot\nscatter.set_linewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_marker('o')\n\n# Set the color of the scatter plot\nscatter.set_markersize(10)\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n# Set the color of the scatter plot\nscatter.set_markeredgecolor('black')\n\n# Set the color of the scatter plot\nscatter.set_markerfacecolor('orange')\n\n# Set the color of the scatter plot\nscatter.set_markeredgewidth(0.5)\n\n"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20, 8))\n\n# Set the title of the plot\nax.set_title('a) Role voting in the Werewolf game')\n\n# Create a bar chart\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [15.7, 28.1, 9.2, 13.9, 16.3], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Role')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the plot\nax2.set_title('b) Final state of roles')\n\n# Create a bar chart\nax2.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [31.5, 25.3, 17.4, 26.0, 17.3], color='blue')\n\n# Set the x-axis label\nax2.set_xlabel('Role')\n\n# Set the y-axis label\nax2.set_ylabel('Percentage')\n\n# Add a color bar\ncbar = fig.colorbar(ax2.images[0])\n\n# Set the color bar limits\ncbar.set_clim(0, 100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Create a color map\ncmap = plt.get_cmap('hot')\n\n# Create a bar chart\nax.bar(range(10), [1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234], color=cmap(range(10)))\n\n# Set the x-axis label\nax.set_xlabel('Response Action Category')\n\n# Set the y-axis label\nax.set_ylabel('Number of Responses')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\ndata = {\n    'angry': [0.10, 0.00, 0.00, 0.00, 0.50, 0.00, 0.00],\n    'sad': [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'disgust': [0.30, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'contempt': [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'fear': [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'neutral': [0.50, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'surprise': [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],\n    'happy': [0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\n}\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    ax.plot(value, label=key)\n    ax.text(len(value)-1, value[-1], key, ha='right', va='bottom')\n\n# Set the title of the plot\nax.set_title('Original')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Define the data for the pie chart\ndata = [50.3, 28.1, 26, 14.5, 10.5, 9.2, 8.1, 7.2, 6.2, 5.5, 4.1, 3.4, 2.8, 2.1, 1.5, 0.9, 0.6, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, "}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('LLaMA')\n\n# Create a color map for the heatmap\ncmap = plt.get_cmap('YlOrRd')\n\n# Create a heatmap with the data\nheatmap = ax.imshow(np.random.rand(5, 5), cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(heatmap)\n\n# Set the labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['Baseline', 'Reversed Order', 'Reversed IDs'])\n\n# Set the labels for the y-axis\nax.set_yticks([0, 1, 2, 3, 4])\nax.set_yticklabels(['#17', '#24', '#3', '#10', '#1'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Create a scatter plot with random data\nax.scatter(range(10), [0.1, 0.08, 0.3, 0.6, 0.0, 0.5, 0.07, 0.1, 0.44, 0.0])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Harvest [t/year]')\n\n# Create a color map\ncmap = plt.get_cmap('YlGnBu')\n\n# Create a bar chart\nbars = ax.bar(range(10), np.random.rand(10), color=cmap(np.linspace(0, 1, 10)))\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Farms')\n\n# Set the y-axis label\nax.set_ylabel('Harvest [t/year]')\n\n# Set the x-ticks\nax.set_xticks(range(10))\nax.set_xticklabels(['Farmer Joe', 'Upland Bros.', 'Smith Gardening', 'Agrifun', 'Organicure', 'BioGoods Ltd.', 'Cornylee Corp.', 'Cucumber', 'Tomato', 'Lettuce'])\n\n# Set the y-limits\nax.set_ylim([0, 6])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Crops and their characteristics')\n\n# Create a bar chart with the data\nax.bar(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], [0.8, 2.4, 1.1, 0.6, 0.7, 0.1], color='green')\nax.bar(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], bottom=[0.8, 2.4, 1.1, 0.6, 0.7, 0.1], color='yellow')\nax.bar(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], [3.9, 1.0, 0.8, 0.3, 0.6, 0.4], bottom=[0.8, 2.4, 1.1, 0.6, 0.7, 0.1], color='orange')\nax.bar(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], bottom=[3.9, 1.0, 0.8, 0.3, 0.6, 0.4], color='red')\nax.bar(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], bottom=[3.9, 1.0, 0.8, 0.3, 0.6, 0.4], color='blue')\nax.bar(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], bottom=[3.9, 1.0, 0.8, 0.3, 0.6, 0.4], color='purple')\nax.bar(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], bottom=[3.9, 1.0, 0.8, 0.3, 0.6, 0.4], color='pink')\n\n# Set the x-axis label\nax.set_xlabel('Crops')\n\n# Set the y-axis label\nax.set_ylabel('Yield')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create a grid of subplots\ngs = fig.add_gridspec(4, 4)\n\n# Add a subplot for each image\nax1 = fig.add_subplot(gs[0, :2])\nax2 = fig.add_subplot(gs[0, 2:])\nax3 = fig.add_subplot(gs[1, :2])\nax4 = fig.add_subplot(gs[1, 2:])\nax5 = fig.add_subplot(gs[2, :2])\nax6 = fig.add_subplot(gs[2, 2:])\nax7 = fig.add_subplot(gs[3, :2])\nax8 = fig.add_subplot(gs[3, 2:])\n\n# Display the images\nax1.imshow(np.random.rand(10, 10), cmap='Greens')\nax2.imshow(np.random.rand(10, 10), cmap='Blues')\nax3.imshow(np.random.rand(10, 10), cmap='Reds')\nax4.imshow(np.random.rand(10, 10), cmap='Greens')\nax5.imshow(np.random.rand(10, 10), cmap='Blues')\nax6.imshow(np.random.rand(10, 10), cmap='Reds')\nax7.imshow(np.random.rand(10, 10), cmap='Greens')\nax8.imshow(np.random.rand(10, 10), cmap='Blues')\n\n# Set the title of each subplot\nax1.set_title('None')\nax2.set_title('none')\nax3.set_title('nearest')\nax4.set_title('bilinear')\nax5.set_title('bicubic')\nax6.set_title('spline16')\nax7.set_title('spline36')\nax8.set_title('hanning')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Create a color map for the rectangles\ncmap = plt.get_cmap('tab20')\n\n# Create a grid of rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=cmap(i*10+j)))\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a grid of subplots\ngrid = ax.grid(True)\n\n# Set the title of the plot\nax.set_title('Sales of vendors (in tons/year)')\n\n# Set the x-axis labels\nax.set_xlabel('Vendors')\nax.set_xticks([1, 2, 3, 4, 5, 6, 7])\nax.set_xticklabels(['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G'])\n\n# Set the y-axis labels\nax.set_ylabel('Sales')\nax.set_yticks([0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10])\n\n# Create a color map for the rectangles\ncmap = plt.get_cmap('tab20')\n\n# Create a list of colors for the rectangles\ncolors = [cmap(i) for i in range(20)]\n\n# Create a list of rectangles\nrectangles = []\n\n# Add rectangles to the plot\nfor i in range(1, 21):\n    # Create a rectangle\n    rect = plt.Rectangle((i-1, 0), 1, 1, color=colors[i%20])\n    \n    # Add the rectangle to the list\n    rectangles.append(rect)\n    \n    # Add the rectangle to the plot\n    ax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Degree of acceptance of a product')\n\n# Create a bar chart\nax.bar(['High', 'Medium', 'Low'], [42, 38, 35], color='green')\nax.bar(['High', 'Medium', 'Low'], [79, 53, 35], color='blue')\nax.bar(['High', 'Medium', 'Low'], [4, 5, 75], color='red')\nax.bar(['High', 'Medium', 'Low'], [17, 36, 23], color='yellow')\n\n# Set the x-axis label\nax.set_xlabel('Degree of acceptance')\n\n# Set the y-axis label\nax.set_ylabel('Number of people')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bottlebeck Distance')\n\n# Create a color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 4)\n\n# Add a subplot for the bottlebeck distance\nbottleneck_distance_ax = fig.add_subplot(gs[:, 0])\nbottleneck_distance_ax.imshow(np.random.rand(10, 10), cmap=cmap)\nbottleneck_distance_ax.set_title('Bottlebeck Distance')\n\n# Add a subplot for the Wasserstein distance\nwasserstein_distance_ax = fig.add_subplot(gs[:, 1])\nwasserstein_distance_ax.imshow(np.random.rand(10, 10), cmap=cmap)\nwasserstein_distance_ax.set_title('Wasserstein Distance')\n\n# Add a subplot for the ada\nada_ax = fig.add_subplot(gs[0, 2:])\nada_ax.imshow(np.random.rand(10, 10), cmap=cmap)\nada_ax.set_title('ada')\n\n# Add a subplot for the mistral\nmistral_ax = fig.add_subplot(gs[1, 2:])\nmistral_ax.imshow(np.random.rand(10, 10), cmap=cmap)\nmistral_ax.set_title('mistral')\n\n# Add a subplot for the distilroberta\ndistilroberta_ax = fig.add_subplot(gs[2, 2:])\ndistilroberta_ax.imshow(np.random.rand(10, 10), cmap=cmap)\ndistilroberta_ax.set_title('distilroberta')\n\n# Add a subplot for the mpnet\nmpnet_ax = fig.add_subplot(gs[0:2, 3])\nmpnet_ax.imshow(np.random.rand(10, 10), cmap=cmap)\nmpnet_ax.set_title('mpnet')\n\n# Add a subplot for the minilm\nminilm_ax = fig.add_subplot(gs[2, 3])\nminilm_ax.imshow(np.random.rand(10, 10), cmap=cmap)\nminilm_ax.set_title('MiniLM')\n\n# Add a subplot for the qa-distilbert\nqa_distilbert_ax = fig.add_subplot(gs[0:2, 4])\nqa_distilbert_ax.imshow(np.random.rand(10, 10), cmap=cmap)\nqa_distilbert_ax.set_title('qa-distilbert')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('ROC\\'s AUC')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='hot'), ax=ax)\n\n# Set the ticks for the x-axis\nax.set_xticks(np.arange(0, 13, 2))\nax.set_yticks(np.arange(0, 13, 2))\n\n# Set the labels for the x-axis\nax.set_xticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Set the labels for the y-axis\nax.set_yticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Create a color map\ncmap = plt.get_cmap('Greens')\n\n# Create a grid of rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i*2, j*2), 2, 2, color=cmap(np.random.rand())))\n\n# Set the limits of the plot\nax.set_xlim(0, 20)\nax.set_ylim(0, 20)\n\n# Set the title of the plot\nax.set_title('C Subject')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 4)\n\n# Add a color bar\ncbar_ax = fig.add_axes([0.91, 0.15, 0.03, 0.7])\nfig.colorbar(cax=cbar_ax, orientation='vertical', cmap=cmap)\n\n# Add a title\nfig.suptitle('Predicted vs Actual Home Prices', fontsize=16)\n\n# Add a subplot for each home\nfor i in range(3):\n    for j in range(4):\n        # Create a subplot\n        ax = fig.add_subplot(gs[i, j])\n\n        # Set the title\n        ax.set_title(f'Home {i*4+j+1}')\n\n        # Set the x-axis label\n        ax.set_xlabel('Predicted category')\n\n        # Set the y-axis label\n        ax.set_ylabel('Actual category')\n\n        # Set the x-axis limits\n        ax.set_xlim(0, 100)\n\n        # Set the y-axis limits\n        ax.set_ylim(0, 100)\n\n        # Set the x-axis ticks\n        ax.set_xticks(np.arange(0, 101, 20))\n\n        # Set the y-axis ticks\n        ax.set_yticks(np.arange(0, 101, 20))\n\n        # Set the x-axis tick labels\n        ax.set_xticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the y-axis tick labels\n        ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color map\n        ax.imshow(np.random.rand(10, 10), cmap=cmap)\n\n        # Set the aspect ratio\n        ax.set_aspect('equal')\n\n        # Set the grid\n        ax.grid(True)\n\n        # Set the color bar\n        cbar = fig.colorbar(ax, ax=ax, orientation='vertical', cmap=cmap)\n\n        # Set the color bar label\n        cbar.set_label('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar ticks\n        cbar.set_ticks(np.arange(0, 101, 20))\n\n        # Set the color bar tick labels\n        cbar.set_ticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        cbar.ax.set_position([0.91, 0.15, 0.03, 0.7])\n\n        # Set the color bar label position\n        cbar.ax.set_ylabel('Price (in thousands)', rotation=270, labelpad=15)\n\n        # Set the color bar tick labels position\n        cbar.ax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n        # Set the color bar orientation\n        cbar.ax.set_aspect('auto')\n\n        # Set the color bar padding\n        c"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Create a rectangle for the graph\nrect = plt.Rectangle((0, 0), 1, 1, fc='none', ec='k')\nax.add_patch(rect)\n\n# Set the title of the graph\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Programming Model', fontsize=15)\n\n# Set the y-axis label\nax.set_ylabel('Average Memory Bandwidth (GB/s)', fontsize=15)\n\n# Set the x-ticks\nx_ticks = ['Kokkos', 'RAJA', 'OMP', 'OACC', 'SYCL', 'Native Port']\nax.set_xticks(np.arange(len(x_ticks)))\nax.set_xticklabels(x_ticks, rotation=45, ha=\"right\")\n\n# Set the y-ticks\ny_ticks = [200, 400, 600, 800, 1000, 1200, 1400, 1600]\nax.set_yticks(y_ticks)\n\n# Set the y-tick labels\ny_tick_labels = ['200', '400', '600', '800', '1000', '1200', '1400', '1600']\nax.set_yticklabels(y_tick_labels)\n\n# Set the color bar\nsm = plt.cm.ScalarMappable(cmap=cmap)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', fraction=0.046, pad=0.04)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the data\ndata = [\n    [876, 136, 435, 534, 322, 804],\n    [750, 1737, 742, 375, 750, 1825],\n    [764, 676, 782, 421, 925, 911],\n    [482, 120, 843, 1170, 925, 911]\n]\n\n# Set the colors\ncolors = [\n    '#FFA500',\n    '#800000',\n    '#FFC0CB',\n    '#808080'\n]\n\n# Set the rectangles\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        rect = plt.Rectangle((j, i), 1, 1, fc=colors[j], ec='k')\n        ax.add_patch(rect)\n\n# Set the text\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.text(j + 0.5, i + 0.5, str(data[i][j]), ha='center', va='center', fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Correlation Coefficients')\n\n# Create a color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 4)\n\n# Create a subplot for each correlation coefficient\nfor i, (x, y) in enumerate([('en', 'fr'), ('es', 'fr'), ('pt', 'fr'), ('bn', 'fr'), ('ur', 'fr'), ('hi', 'fr'), ('ar', 'fr'), ('zh', 'fr')]):\n    ax = fig.add_subplot(gs[i])\n    ax.set_xlabel(x)\n    ax.set_ylabel(y)\n    ax.set_title(f'{x} vs {y}')\n    ax.imshow(np.random.rand(10, 10), cmap=cmap)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('Blues')\n\n# Create a bar chart\nbars = ax.bar(range(10), np.random.rand(10), color=cmap(np.linspace(0, 1, 10)))\n\n# Add labels and title\nax.set_xlabel('Players')\nax.set_ylabel('Rankings')\nax.set_title('Player Rankings')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('navy')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Add a title to the plot\nax.set_title('pythia-1b', fontsize=20, color='white')\n\n# Add a subtitle to the plot\nax.set_xlabel('Layers', fontsize=14, color='white')\nax.set_ylabel('Time', fontsize=14, color='white')\n\n# Add a legend to the plot\nax.legend(['No / The', 'athlete', 'that', 'loved', 'the', 'ministers', 'has', 'landed'], loc='upper left')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='Blues'), ax=ax)\ncbar.ax.set_ylabel('Intensity', rotation=-90, va=\"bottom\", color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'athlete', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'that', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'loved', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'the', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'ministers', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'has', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'landed', transform=ax.transAxes, fontsize=12, verticalalignment='center', color='white')\n\n# Add a text box to the plot\nax.text(0.5, 0.5, 'No / The', transform=ax.trans"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis label\nax.set_xlabel('Test Winning Distance')\n\n# Set the y-axis label\nax.set_ylabel('Number of Pairs')\n\n# Set the title\nax.set_title('Tennis Pairing System')\n\n# Create a bar chart\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [20, 40, 60, 80, 100, 80, 60, 40, 20], color='blue')\n\n# Create a scatter plot\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [20, 40, 60, 80, 100, 80, 60, 40, 20], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 3))\n\n# Create some data for the plots\nx = np.linspace(-1, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\naxs[0].plot(x, y1, 'b-')\naxs[0].set_title('Sine Wave')\naxs[0].set_xlabel('Time (s)')\naxs[0].set_ylabel('Amplitude')\n\naxs[1].plot(x, y2, 'r-')\naxs[1].set_title('Cosine Wave')\naxs[1].set_xlabel('Time (s)')\naxs[1].set_ylabel('Amplitude')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Baseline')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 8.0))\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the title of the plot\nax.set_title('MATHWELL')\n\n# Set the x and y labels\nax.set_xlabel('FKGL')\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Desert Animals in the Wild')\n\n# Set the x-axis label\nax.set_xlabel('Animal Weight (Tons)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1000)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.02, 0.04, 0.06, 0.08])\n\n# Set the y-axis ticks\nax.set_yticks([0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the x-axis label\nax.set_xlabel('Time (in hours)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a bar chart\nax.bar([0, 2, 4, 6, 8], [50, 70, 90, 100, 110], color='blue', label='Uniform data')\nax.bar([1, 3, 5, 7, 9], [40, 60, 80, 90, 100], color='red', label='Normal data')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Number of Measurements')\n\n# Create a histogram with 10 bins\nax.hist([2, 3, 4, 5, 6, 7, 8, 9, 10, 11], bins=10, color='blue', edgecolor='black')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny1 = [10, 20, 30, 40, 50, 60, 70]\ny2 = [80, 90, 100, 110, 120, 130, 140]\ny3 = [150, 140, 130, 120, 110, 100, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Baguette')\nax.plot(x, y2, color='orange', label='Youtiao')\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Tennis Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Test Winning Distance')\n\n# Set the y-axis label\nax.set_ylabel('Number of Pairs')\n\n# Create a scatter plot with random data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [0, 20, 40, 60, 80, 100]\nax.scatter(x, y, color='blue')\n\n# Create a bar chart with random data\nx = ['Player 1', 'Player 2', 'Player 3', 'Player 4', 'Player 5']\ny = [100, 90, 80, 70, 60]\nax.bar(x, y, color='red')\n\n# Create a line graph with random data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [10, 20, 30, 40, 50, 60]\nax.plot(x, y, color='green')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim([0, 300])\n\n# Set the y-axis limits\nax.set_ylim([0, 25])\n\n# Set the x-axis label\nax.set_xlabel('Number of Nominations')\n\n# Set the y-axis label\nax.set_ylabel('Grammy Points')\n\n# Set the title of the plot\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Define the categories and their corresponding points\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\npoints = [18, 19, 17, 16, 15]\n\n# Create a bar chart with the categories and points\nax.bar(categories, points, color='orange')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST - Defect Detection')\n\n# Create a color bar for the images\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='viridis'))\n\n# Set the tick labels for the x-axis\nax.set_xticks(np.arange(0, 10, 1))\nax.set_yticks(np.arange(0, 10, 1))\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['Non-defective', 'Defective'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.00', '0.05', '0.10', '0.15', '0.20', '0.25', '0.30', '0.35', '0.40', '0.45'])\n\n# Set the limits for the x-axis\nax.set_xlim([0, 9])\n\n# Set the limits for the y-axis\nax.set_ylim([0, 9])\n\n# Set the color map for the images\ncbar.set_label('Defect Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis ticks\nax.set_xticks([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Performance', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot the first subplot\naxs[0, 0].imshow(np.random.rand(10, 10), cmap='Blues')\naxs[0, 0].set_title('a) Milk Chocolate')\naxs[0, 0].set_xlabel('Sweetness')\naxs[0, 0].set_ylabel('Density')\n\n# Plot the second subplot\naxs[0, 1].imshow(np.random.rand(10, 10), cmap='Oranges')\naxs[0, 1].set_title('b) Dark Chocolate')\naxs[0, 1].set_xlabel('Sweetness')\naxs[0, 1].set_ylabel('Density')\n\n# Plot the third subplot\naxs[1, 0].imshow(np.random.rand(10, 10), cmap='Greens')\naxs[1, 0].set_title('c) White Chocolate')\naxs[1, 0].set_xlabel('Sweetness')\naxs[1, 0].set_ylabel('Density')\n\n# Plot the fourth subplot\naxs[1, 1].imshow(np.random.rand(10, 10), cmap='Reds')\naxs[1, 1].set_title('d) Ruby Chocolate')\naxs[1, 1].set_xlabel('Sweetness')\naxs[1, 1].set_ylabel('Density')\n\n# Add colorbar to the first subplot\nfig.colorbar(axs[0, 0].images[0], ax=axs[0, 0])\n\n# Add colorbar to the second subplot\nfig.colorbar(axs[0, 1].images[0], ax=axs[0, 1])\n\n# Add colorbar to the third subplot\nfig.colorbar(axs[1, 0].images[0], ax=axs[1, 0])\n\n# Add colorbar to the fourth subplot\nfig.colorbar(axs[1, 1].images[0], ax=axs[1, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Set the x-axis label\nax.set_xlabel('Concept Weight')\n\n# Set the y-axis label\nax.set_ylabel('Count')\n\n# Define the data for the plot\nx = [0.00, 0.05, 0.10, 0.15]\ny = [1000, 2000, 3000, 4000]\n\n# Plot the data\nax.plot(x, y)\n\n# Add a legend\nax.legend(['Class', 'Camel', 'Kangaroo'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Create a colormap for the histogram\ncmap = plt.get_cmap('viridis')\n\n# Create a histogram with random data\nax.hist(np.random.randn(1000), bins=20, color=cmap(0.2), alpha=0.7)\n\n# Add a title and labels\nax.set_title('Histogram of Random Data')\nax.set_xlabel('Value')\nax.set_ylabel('Frequency')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the color of the rectangle\nax.set_facecolor('tan')\n\n# Set the title of the graph\nax.set_title('Number of Clusters vs Number of Repetition')\n\n# Set the x-axis label\nax.set_xlabel('Number of Repetition')\n\n# Set the y-axis label\nax.set_ylabel('Number of Clusters')\n\n# Set the x-axis limits\nax.set_xlim(0, 12)\n\n# Set the y-axis limits\nax.set_ylim(0, 1500)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10, 12])\n\n# Set the y-axis ticks\nax.set_yticks([0, 250, 500, 750, 1000, 1250, 1500])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '250', '500', '750', '1000', '1250', '1500'])\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('tan')\n\n# Set the color of the text\nax.set_color('black')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10, 12], [1000, 1200, 1300, 1400, 1450, 1475, 1490], color='brown')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10, 12], [1000, 1200, 1300, 1400, 1450, 1475, 1490], marker='o', color='brown')\n\n# Set the color of the legend\nax.legend(['Cluster 1'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Number of Clusters vs Number of Repetition', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of Repetition', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Clusters', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['0', '2', '4', '6', '8', '10', '12'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '250', '500', '750', '1000', '1250', '1500'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('tan')\n\n# Set the color of the text\nax.set_color('black')\n\nplt.show()"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Classification Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Distance to threshold')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a bar chart\nax.bar(['0', '1', '2', '3', '4'], [0.9, 0.8, 0.7, 0.6, 0.5], color='blue')\n\n# Create a line chart\nax.plot([0, 1, 2, 3, 4], [0.9, 0.8, 0.7, 0.6, 0.5], color='orange')\n\n# Add a legend\nax.legend(['Correctly classified', 'Misclassified'])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Casualty Rate Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Casualty Rate')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 11, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0e68c')\n\n# Set the color of the text\nax.set_facecolor('#f0e68c')\n\n# Set the color of the title\nax.set_title('Casualty Rate Over Time', color='#ff6347')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='#8b4513')\n\n# Set the color of the y-axis label\nax.set_ylabel('Casualty Rate', color='#8b4513')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='#8b4513')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='#8b4513')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b4513')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], color='#8b45"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Number of Queries Overlap')\n\n# Set the x-axis label\nax.set_xlabel('Time (in hours)')\n\n# Set the y-axis label\nax.set_ylabel('Number of queries')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 6000)\n\n# Set the x-ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-ticks\nax.set_yticks([0, 1000, 2000, 3000, 4000, 5000, 6000])\n\n# Set the x-tick labels\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '1000', '2000', '3000', '4000', '5000', '6000'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_color('black')\n\n# Set the color of the line\nax.plot([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], color='blue')\n\n# Set the color of the scatter points\nax.scatter([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], color='red')\n\n# Set the color of the bar chart\nax.bar([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], color='green')\n\n# Set the color of the histogram\nax.hist([0, 0.2, 0.4, 0.6, 0.8, 1], bins=10, color='yellow')\n\n# Set the color of the pie chart\nax.pie([0, 1000, 2000, 3000, 4000, 5000], colors=['cyan', 'magenta', 'yellow', 'black', 'white', 'grey'], startangle=90)\n\n# Set the color of the box plot\nax.boxplot([0, 1000, 2000, 3000, 4000, 5000], vert=True, patch_artist=True)\n\n# Set the color of the violin plot\nax.violinplot([0, 1000, 2000, 3000, 4000, 5000], showmeans=True, showmedians=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1000, 2000, 3000, 4000, 5000]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the contourf plot\nax.contourf([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the streamplot\nax.streamplot([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the quiver plot\nax.quiver([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the polar plot\nax.polar([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the smith plot\nax.smith([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the ternary plot\nax.ternary([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the hexbin plot\nax.hexbin([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the errorbar plot\nax.errorbar([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], yerr=[100, 200, 300, 400, 500, 600], fmt='o')\n\n# Set the color of the fill_between plot\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [100, 200, 300, 400, 500, 600], color='blue')\n\n# Set the color of the fill_betweenx plot\nax.fill_betweenx([0, 1000, 2000, 3000, 4000, 5000], [0, 0.2, 0.4, 0.6, 0.8, 1], [100, 200, 300, 400, 500, 600], color='blue')\n\n# Set the color of the step plot\nax.step([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], where='post', color='blue')\n\n# Set the color of the stem plot\nax.stem([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], basefmt=\" \")\n\n# Set the color of the hist2d plot\nax.hist2d([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], bins=10, cmap='hot')\n\n# Set the color of the hexbin plot\nax.hexbin([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], bins=10, cmap='hot')\n\n# Set the color of the pie plot\nax.pie([0, 1000, 2000, 3000, 4000, 5000], colors=['cyan', 'magenta', 'yellow', 'black', 'white', 'grey'], startangle=90)\n\n# Set the color of the barh plot\nax.barh([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], color='green')\n\n# Set the color of the violin plot\nax.violinplot([0, 1000, 2000, 3000, 4000, 5000], showmeans=True, showmedians=True)\n\n# Set the color of the box plot\nax.boxplot([0, 1000, 2000, 3000, 4000, 5000], vert=True, patch_artist=True)\n\n# Set the color of the scatter plot\nax.scatter([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], color='red')\n\n# Set the color of the line plot\nax.plot([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], color='blue')\n\n# Set the color of the bar chart\nax.bar([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], color='green')\n\n# Set the color of the histogram\nax.hist([0, 0.2, 0.4, 0.6, 0.8, 1], bins=10, color='yellow')\n\n# Set the color of the pie chart\nax.pie([0, 1000, 2000, 3000, 4000, 5000], colors=['cyan', 'magenta', 'yellow', 'black', 'white', 'grey'], startangle=90)\n\n# Set the color of the box plot\nax.boxplot([0, 0.2, 0.4, 0.6, 0.8, 1], vert=True, patch_artist=True)\n\n# Set the color of the violin plot\nax.violinplot([0, 1000, 2000, 3000, 4000, 5000], showmeans=True, showmedians=True)\n\n# Set the color of the heatmap\nax.imshow([[0, 1000, 2000, 3000, 4000, 5000]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the contourf plot\nax.contourf([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the streamplot\nax.streamplot([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the quiver plot\nax.quiver([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the polar plot\nax.polar([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the smith plot\nax.smith([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the ternary plot\nax.ternary([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the hexbin plot\nax.hexbin([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [[0, 1000, 2000, 3000, 4000, 5000]])\n\n# Set the color of the errorbar plot\nax.errorbar([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], yerr=[100, 200, 300, 400, 500, 600], fmt='o')\n\n# Set the color of the fill_between plot\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 1000, 2000, 3000, 4000, 5000], [100, 200, 300, "}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, color='blue')\n\n# Set the x and y limits\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a grid\nax.grid(True)\n\n# Save the figure\nplt.savefig('mnist.png')\n\n# Display the figure\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Deep Learning Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the x-ticks\nax.set_xticks([5, 10, 15, 20])\n\n# Set the y-ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Plot the data\nax.plot([5, 10, 15, 20], [90, 80, 70, 60], 'r-', label='JPEG+LDPC')\nax.plot([5, 10, 15, 20], [80, 70, 60, 50], 'o-', label='DEEPJSCC w/o ofdm')\nax.plot([5, 10, 15, 20], [70, 60, 50, 40], 'g-', label='DEEPJSCC w/ ofdm')\nax.plot([5, 10, 15, 20], [60, 50, 40, 30], 'b-', label='OURS')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Time (n)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5])\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Set the grid\nax.grid(True)\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], 'b-', label='Content')\nax.plot([0, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], 'y-', label='Organization')\nax.plot([0, 1, 2, 3, 4, 5], [2, 3, 2, 1, 2, 3], 'g-', label='Language')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-axis ticks\nax.set_yticks([0.55, 0.60, 0.65, 0.70, 0.75])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '20', '40', '60', '80'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.55', '0.60', '0.65', '0.70', '0.75'])\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border around the plot\nax.spines['top'].set_linewidth(3)\nax.spines['bottom'].set_linewidth(3)\nax.spines['left'].set_linewidth(3)\nax.spines['right'].set_linewidth(3)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the text\nax.text(0.5, 0.95, 'Dictionary', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Set the color of the text\nax.text(0.5, 0.90, 'coco (10k)', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the text\nax.text(0.5, 0.85, 'laion (10k)', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='green')\n\n# Set the color of the text\nax.text(0.5, 0.80, 'coco (5k)', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.75, 'laion (5k)', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.70, 'CLIP', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'r-')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'g-')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'b-')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'y-')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'o-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the x-axis label\nax.set_xlabel('Sample Ratio')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Create a scatter plot with a red star marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='*')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green', marker='s')\n\n# Create a line plot with a blue line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue')\n\n# Create a scatter plot with a red triangle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', marker='^')\n\n# Create a line plot with a green line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='green')\n\n# Create a scatter plot with a blue circle marker\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='blue', marker='o')\n\n# Create a line plot with a red line\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red')\n\n# Create a scatter plot with a green square marker\nax.scatter([0.25"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Training Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Training iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], 'b-', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.3, 0.4, 0.5, 0.6], 'y-', label='ours')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis values\nx = np.arange(1, 30)\n\n# Set the y-axis values for each product\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Product 1')\nax.plot(x, y2, 'g-', label='Product 2')\nax.plot(x, y3, 'r-', label='Product 3')\nax.plot(x, y4, 'c-', label='Product 4')\nax.plot(x, y5, 'm-', label='Product 5')\n\n# Add a legend\nax.legend()\n\n# Set the title of the plot\nax.set_title('Product Performance')\n\n# Set the x-axis label\nax.set_xlabel('Week')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [80, 85, 90, 95, 98, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25]\ny2 = [75, 80, 85, 90, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\ny3 = [70, 75, 80, 85, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15]\ny4 = [65, 70, 75, 80, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10]\ny5 = [60, 65, 70, 75, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='blue')\nax.plot(x, y2, label='LWF', color='#FF6347')\nax.plot(x, y3, label='EWC', color='#C71585')\nax.plot(x, y4, label='SEQ', color='#FF69B4')\n\n# Set the title and labels\nax.set_title('Average Accuracy of Machine Learning Models')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Unertainty threshold')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the plots\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\ny2 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\ny3 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Oesense')\nax.plot(x, y2, 'r-', label='KWS')\nax.plot(x, y3, 'g-', label='ECG5000')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Log KL Divergence')\n\n# Set the x-axis label\nax.set_xlabel('Number of Parameters')\n\n# Set the y-axis label\nax.set_ylabel('Log KL Divergence')\n\n# Generate some data\nx = np.linspace(0, 120, 100)\ny = np.log(x + 1)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Add a legend\nax.legend(['KL Divergence'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the graph\nax.set_title('GPT-4 Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Attack Success Rate')\n\n# Create a line plot with a blue color\nax.plot([0, 500, 1000, 1500, 2000], [0.8, 0.6, 0.4, 0.2, 0], 'b-', label='7B')\n\n# Create a line plot with a pink color\nax.plot([0, 500, 1000, 1500, 2000], [0.9, 0.7, 0.5, 0.3, 0], 'pink', label='7B (Fine-tuned)')\n\n# Add a legend to the graph\nax.legend()\n\n# Display the graph\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5], [60, 70, 80, 90, 100], 'g-')\nax.plot([1, 2, 3, 4, 5], [50, 60, 70, 80, 90], 'r-')\nax.plot([1, 2, 3, 4, 5], [40, 50, 60, 70, 80], 'b-')\n\n# Add labels and title\nax.set_xlabel('Fraction of training data (log scale)')\nax.set_ylabel('Test accuracy (%)')\nax.set_title('Comparison of different models')\n\n# Add legend\nax.legend(['Full', 'SPT', 'VPT'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the title and labels\nax.set_title('Temperature vs Gradient Steps')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Temperature')\n\n# Create a scatter plot with different colors for each point\ncolors = ['red', 'blue', 'green', 'orange', 'purple']\nfor i in range(len(colors)):\n    ax.scatter(np.random.rand(10), np.random.rand(10), color=colors[i])\n\n# Add a legend\nax.legend(['Point 1', 'Point 2', 'Point 3', 'Point 4', 'Point 5'])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Create a scatter plot\nax.scatter([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='blue')\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Top-1 Acc (%)')\n\n# Set the x-axis label\nax.set_xlabel('Imbalance Ratio of Unlabeled Data')\n\n# Set the y-axis label\nax.set_ylabel('Top-1 Acc (%)')\n\n# Create a scatter plot with the data\nax.plot([120, 90, 60, 30, 10], [95, 92, 90, 88, 85], 'bo-', label='Ours')\nax.plot([120, 90, 60, 30, 10], [94, 91, 89, 87, 84], 'go-', label='ACR')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Perplexity vs. Ratio of 4-bit Utilization')\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Add a legend\nax.legend(['APTQ', 'LLaMa-7B (FP16): 5.22', 'OWQ-4bit: 5.56', 'GPTQ-4bit: 5.62', 'LLM-QAT-4bit: 7.4', 'LMM-QAT-4bit: 7.4'], loc='upper right')\n\n# Add a grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 2.0))\n\n# Set the x-axis values\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\n\n# Set the y-axis values\ny = [67.32, 82.98, 89.53, 90.47, 92.47, 93.7, 96.75]\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title of the plot\nax.set_title('Coverage Ratio vs Number of Training Objects')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Number of Training Objects')\nax.set_ylabel('Coverage Ratio (%)')\n\n# Set the limits for the x and y axes\nax.set_xlim(2**1, 2**7)\nax.set_ylim(60, 100)\n\n# Set the tick marks for the x and y axes\nax.set_xticks([2**i for i in range(1, 8)])\nax.set_yticks(range(60, 101, 10))\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the plot line\nax.plot(x, y, color='blue')\n\n# Set the color of the markers\nax.plot(x, y, 'o', color='orange')\n\n# Set the color of the title and labels\nax.set_title('Coverage Ratio vs Number of Training Objects', color='blue')\nax.set_xlabel('Number of Training Objects', color='blue')\nax.set_ylabel('Coverage Ratio (%)', color='blue')\n\n# Set the color of the tick labels\nax.set_xticklabels([str(2**i) for i in range(1, 8)], color='blue')\nax.set_yticklabels(range(60, 101, 10), color='blue')\n\n# Set the color of the legend\nax.legend(['Coverage Ratio'], loc='upper left', frameon=False, fontsize=10, labelcolor='blue')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the graph\nax.set_title('N-ELBO')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('N-ELBO')\n\n# Create a scatter plot\nx = np.linspace(0, 10, 100)\ny = np.random.normal(loc=700, scale=50, size=100)\nax.scatter(x, y, color='blue')\n\n# Create a line plot\nax.plot(x, y, color='blue')\n\n# Create a shaded region\nax.fill_between(x, 650, 750, where=(x >= 2) & (x <= 8), color='lightblue', alpha=0.5)\n\n# Add a legend\nax.legend(['Average', 'Standard Deviation'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('IQM Human Normalized Score')\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('DoN')\n\n# Create a list of dates\ndates = ['1', '2', '3', '4', '5', '6', '7', '8']\n\n# Create a list of DoN values\ndoN_values = [3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5]\n\n# Create a list of Rainbow values\nrainbow_values = [5.2, 5.1, 5.0, 4.9, 4.8, 4.7, 4.6, 4.5]\n\n# Plot the data\nax.plot(dates, doN_values, color='blue')\nax.plot(dates, rainbow_values, color='green')\n\n# Add a legend\nax.legend(['DoN', 'Rainbow'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Test set TPR | FPR = $10^{-4}$')\n\n# Set the x-axis label\nax.set_xlabel('Vocabulary size')\n\n# Set the y-axis label\nax.set_ylabel('TPR')\n\n# Define the data points for the plot\nx = [256, 512, 1024, 2048, 4096, 8192, 16384]\ny = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 0.98]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add a legend\nax.legend(['BPE', 'Wordpunct', 'Whitespaces'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Word Error Rate vs Compression Rate')\n\n# Set the x-axis label\nax.set_xlabel('Compression Rate')\n\n# Set the y-axis label\nax.set_ylabel('Word Error Rate (%)')\n\n# Create a scatter plot with the data\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [15.8, 18.0, 19.8, 20.0, 22.6, 24.7, 26.0, 28.6, 30.2, 32.4], color='blue', marker='o')\n\n# Create a line plot with the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [15.8, 18.0, 19.8, 20.0, 22.6, 24.7, 26.0, 28.6, 30.2, 32.4], color='red', linestyle='--')\n\n# Add a legend to the plot\nax.legend(['CNN', 'CIF', 'STAR'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([25, 50, 75, 100, 125, 150, 175, 200], [80, 85, 90, 95, 90, 85, 80, 75], 'b-')\nax.plot([25, 50, 75, 100, 125, 150, 175, 200], [85, 90, 95, 90, 85, 80, 75, 70], 'r-')\nax.plot([25, 50, 75, 100, 125, 150, 175, 200], [90, 95, 90, 85, 80, 75, 70, 65], 'g-')\n\n# Add markers for each point\nax.plot(25, 80, 'ro')\nax.plot(50, 85, 'ro')\nax.plot(75, 90, 'ro')\nax.plot(100, 95, 'ro')\nax.plot(125, 90, 'ro')\nax.plot(150, 85, 'ro')\nax.plot(175, 80, 'ro')\nax.plot(200, 75, 'ro')\n\n# Add labels and title\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\nax.set_title('Model accuracy over time')\n\n# Add legends\nax.legend(['PILOTE', 'Re-trained model', 'Pre-trained model accuracy'])\n\n# Add grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Average Fidelity Over Time')\n\n# Set the x-axis label\nax.set_xlabel('# of Steps')\n\n# Set the y-axis label\nax.set_ylabel('Average Fidelity')\n\n# Create a scatter plot with a blue color for the points\nax.scatter(range(21), [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15], color='blue')\n\n# Create a line plot with a red color for the trend\nax.plot(range(21), [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15], color='red')\n\n# Add a legend to the plot\nax.legend(['xLLM', 'Single-Pass LLM'])\n\n# Set the y-axis limits\nax.set_ylim([0, 1.2])\n\n# Set the x-axis limits\nax.set_xlim([0, 20])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Hits')\n\n# Define the players\nplayers = ['All', 'MLP', 'GCF', 'NCN', 'NC', 'NEO', 'SEAL', 'Node2Vec']\n\n# Define the hits for each player\nhits = [80, 75, 70, 65, 60, 55, 50, 45]\n\n# Plot the hits for each player\nfor i in range(len(players)):\n    ax.plot([i], [hits[i]], 'ro')  # 'ro' means red circle\n\n# Set the x-ticks to be the players\nax.set_xticks(range(len(players)))\nax.set_xticklabels(players)\n\n# Set the y-limits\nax.set_ylim(40, 90)\n\n# Set the y-ticks\nax.set_yticks(range(40, 91, 10))\n\n# Set the y-tick labels\nax.set_yticklabels(['40', '50', '60', '70', '80', '90'])\n\n# Set the color of the y-ticks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Player Performance', color='blue')\n\n# Set the color of the x-label\nax.set_xlabel('Players', color='blue')\n\n# Set the color of the y-label\nax.set_ylabel('Hits', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n#"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Android')\n\n# Create a scatter plot with different colors for each layer\nax.scatter([2, 4, 6, 8, 10, 12], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05], color='blue', label='outside-code-diff')\nax.scatter([2, 4, 6, 8, 10, 12], [0.04, 0.04, 0.04, 0.04, 0.04, 0.04], color='orange', label='inside-code-diff')\n\n# Create a line plot with different colors for each layer\nax.plot([2, 4, 6, 8, 10, 12], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05], color='blue')\nax.plot([2, 4, 6, 8, 10, 12], [0.04, 0.04, 0.04, 0.04, 0.04, 0.04], color='orange')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Layer')\nax.set_ylabel('Value')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 9)\n\n# Set the y-axis limits\nax.set_ylim(0.3, 10)\n\n# Set the x-axis label\nax.set_xlabel('Digit Length')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Plot the data\nax.plot([6, 7, 8, 9], [0.5, 0.7, 0.8, 0.9], 'b-')\nax.plot([6, 7, 8, 9], [0.4, 0.6, 0.7, 0.8], 'g-')\nax.plot([6, 7, 8, 9], [0.3, 0.5, 0.6, 0.7], 'r-')\n\n# Add a legend\nax.legend(['Model 1', 'Model 2', 'Model 3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 0.4)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 90, 10))\n\n# Set the y-axis ticks\nax.set_yticks([0.25, 0.3, 0.35, 0.4])\n\n# Draw a horizontal line at y=0.375\nax.axhline(y=0.375, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.35\nax.axhline(y=0.35, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.325\nax.axhline(y=0.325, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.3\nax.axhline(y=0.3, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.275\nax.axhline(y=0.275, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.25\nax.axhline(y=0.25, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.225\nax.axhline(y=0.225, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.2\nax.axhline(y=0.2, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.175\nax.axhline(y=0.175, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.15\nax.axhline(y=0.15, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.125\nax.axhline(y=0.125, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.1\nax.axhline(y=0.1, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.075\nax.axhline(y=0.075, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.05\nax.axhline(y=0.05, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.025\nax.axhline(y=0.025, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Draw a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Draw a vertical line at x=20\nax.axvline(x=20, color='black', linestyle='-')\n\n# Draw a vertical line at x=40\nax.axvline(x=40, color='black', linestyle='-')\n\n# Draw a vertical line at x=60\nax.axvline(x=60, color='black', linestyle='-')\n\n# Draw a vertical line at x=80\nax.axvline(x=80, color='black', linestyle='-')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(40, 0.3, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(60, 0.35, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(80, 0.4, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(0, 0.225, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a circle marker\nax.scatter(20, 0.25, s=100, c='orange', marker='o')\n\n# Draw a scatter plot with a"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each company\ndata = {\n    'CNN': [0.55, 0.60, 0.65, 0.70, 0.75],\n    'CNN+HMM': [0.50, 0.55, 0.60, 0.65, 0.70],\n    'RF': [0.45, 0.50, 0.55, 0.60, 0.65],\n    'RF+HMM': [0.40, 0.45, 0.50, 0.55, 0.60]\n}\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data for each company\nfor company, values in data.items():\n    ax.plot(values, label=company)\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Stock Prices of Different Companies')\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.15]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.plot(x, y1, 'r-', label='WER (%)')\nax.plot(x, y2, 'b-', label='AMI WER (%)')\n\n# Markers\nfor i, j in zip(x, y1):\n    ax.annotate('\u25b3', xy=(i, j), xytext=(i+0.5, j+0.5),\n                arrowprops=dict(facecolor='black', shrink=0.05))\n\nfor i, j in zip(x, y2):\n    ax.annotate('\u25cf', xy=(i, j), xytext=(i+0.5, j+0.5),\n                arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Title and labels\nax.set_title('Microphone Performance')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\n\n# Legend\nax.legend()\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Quantization error')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Quantization error')\n\n# Set the x-axis limits\nax.set_xlim(10**-7, 10**4)\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis ticks\nax.set_xticks([10**-7, 10**-6, 10**-5, 10**-4, 10**-3, 10**-2, 10**-1, 10**0, 10**1, 10**2, 10**3, 10**4])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^-7', '10^-6', '10^-5', '10^-4', '10^-3', '10^-2', '10^-1', '10^0', '10^1', '10^2', '10^3', '10^4'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7'])\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('green')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='orange')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='cyan')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='pink')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='brown')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='grey')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='olive')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='navy')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 3, figsize=(15, 5))\n\n# Set the title for each subplot\naxs[0, 0].set_title('SPMotif-0.5')\naxs[0, 1].set_title('SPMotif-0.7')\naxs[0, 2].set_title('SPMotif-0.9')\n\n# Create a rectangle patch for the logo\nlogo = plt.Rectangle((0.05, 0.85), 0.1, 0.1, color='blue')\naxs[0, 0].add_patch(logo)\naxs[0, 1].add_patch(logo)\naxs[0, 2].add_patch(logo)\n\n# Create a rectangle patch for the social media icons\nsocial_media = plt.Rectangle((0.05, 0.05), 0.1, 0.1, color='red')\naxs[0, 0].add_patch(social_media)\naxs[0, 1].add_patch(social_media)\naxs[0, 2].add_patch(social_media)\n\n# Create a rectangle patch for the performance graph\nperformance = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\naxs[0, 0].add_patch(performance)\naxs[0, 1].add_patch(performance)\naxs[0, 2].add_patch(performance)\n\n# Create a rectangle patch for the market share graph\nmarket_share = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='purple')\naxs[1, 0].add_patch(market_share)\naxs[1, 1].add_patch(market_share)\naxs[1, 2].add_patch(market_share)\n\n# Create a rectangle patch for the revenue graph\nrevenue = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\naxs[2, 0].add_patch(revenue)\naxs[2, 1].add_patch(revenue)\naxs[2, 2].add_patch(revenue)\n\n# Add text to the plots\naxs[0, 0].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[0, 0].transAxes, fontsize=12, color='purple')\naxs[0, 1].text(0.5, 0.5, 'GIN + ours', horizontalalignment='center', verticalalignment='center', transform=axs[0, 1].transAxes, fontsize=12, color='orange')\naxs[0, 2].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[0, 2].transAxes, fontsize=12, color='purple')\naxs[1, 0].text(0.5, 0.5, 'GIN + ours', horizontalalignment='center', verticalalignment='center', transform=axs[1, 0].transAxes, fontsize=12, color='orange')\naxs[1, 1].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[1, 1].transAxes, fontsize=12, color='purple')\naxs[1, 2].text(0.5, 0.5, 'GIN + ours', horizontalalignment='center', verticalalignment='center', transform=axs[1, 2].transAxes, fontsize=12, color='orange')\naxs[2, 0].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[2, 0].transAxes, fontsize=12, color='purple')\naxs[2, 1].text(0.5, 0.5, 'GIN + ours', horizontalalignment='center', verticalalignment='center', transform=axs[2, 1].transAxes, fontsize=12, color='orange')\naxs[2, 2].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[2, 2].transAxes, fontsize=12, color='purple')\n\n# Plot the data\nx = np.linspace(0.1, 1.0, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\naxs[0, 0].plot(x, y1, color='purple')\naxs[0, 1].plot(x, y2, color='orange')\naxs[0, 2].plot(x, y3, color='purple')\naxs[1, 0].plot(x, y1, color='purple')\naxs[1, 1].plot(x, y2, color='orange')\naxs[1, 2].plot(x, y3, color='purple')\naxs[2, 0].plot(x, y1, color='purple')\naxs[2, 1].plot(x, y2, color='orange')\naxs[2, 2].plot(x, y3, color='purple')\n\n# Set the x-axis limits\naxs[0, 0].set_xlim([0.1, 1.0])\naxs[0, 1].set_xlim([0.1, 1.0])\naxs[0, 2].set_xlim([0.1, 1.0])\naxs[1, 0].set_xlim([0.1, 1.0])\naxs[1, 1].set_xlim([0.1, 1.0])\naxs[1, 2].set_xlim([0.1, 1.0])\naxs[2, 0].set_xlim([0.1, 1.0])\naxs[2, 1].set_xlim([0.1, 1.0])\naxs[2, 2].set_xlim([0.1, 1.0])\n\n# Set the y-axis limits\naxs[0, 0].set_ylim([0.4, 1.0])\naxs[0, 1].set_ylim([0.4, 1.0])\naxs[0, 2].set_ylim([0.4, 1.0])\naxs[1, 0].set_ylim([0.4, 1.0])\naxs[1, 1].set_ylim([0.4, 1.0])\naxs[1, 2].set_ylim([0.4, 1.0])\naxs[2, 0].set_ylim([0.4, 1.0])\naxs[2, 1].set_ylim([0.4, 1.0])\naxs[2, 2].set_ylim([0.4, 1.0])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Model Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a scatter plot with a blue color\nax.scatter([6, 9, 12, 15, 18, 21, 24, 27, 30], [75.5, 76.5, 77.5, 78.5, 79.5, 80.5, 81.5, 82.5, 83.5], color='blue')\n\n# Create a line plot with a red color\nax.plot([6, 9, 12, 15, 18, 21, 24, 27, 30], [75.5, 76.5, 77.5, 78.5, 79.5, 80.5, 81.5, 82.5, 83.5], color='red')\n\n# Create a rectangle patch for the first model\nrect1 = plt.Rectangle((6, 75.5), 3, 2, color='lightblue')\nax.add_patch(rect1)\n\n# Create a rectangle patch for the second model\nrect2 = plt.Rectangle((9, 76.5), 3, 2, color='lightgreen')\nax.add_patch(rect2)\n\n# Create a rectangle patch for the third model\nrect3 = plt.Rectangle((12, 77.5), 3, 2, color='lightyellow')\nax.add_patch(rect3)\n\n# Create a rectangle patch for the fourth model\nrect4 = plt.Rectangle((15, 78.5), 3, 2, color='lightpink')\nax.add_patch(rect4)\n\n# Create a rectangle patch for the fifth model\nrect5 = plt.Rectangle((18, 79.5), 3, 2, color='lightcoral')\nax.add_patch(rect5)\n\n# Create a rectangle patch for the sixth model\nrect6 = plt.Rectangle((21, 80.5), 3, 2, color='lightsalmon')\nax.add_patch(rect6)\n\n# Create a rectangle patch for the seventh model\nrect7 = plt.Rectangle((24, 81.5), 3, 2, color='lightseagreen')\nax.add_patch(rect7)\n\n# Create a rectangle patch for the eighth model\nrect8 = plt.Rectangle((27, 82.5), 3, 2, color='lightsteelblue')\nax.add_patch(rect8)\n\n# Create a rectangle patch for the ninth model\nrect9 = plt.Rectangle((30, 83.5), 3, 2, color='lightcyan')\nax.add_patch(rect9)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('GPT-Neo Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('# Epochs')\n\n# Set the y-axis label\nax.set_ylabel('MAE')\n\n# Create a list of epochs\nepochs = [3, 5, 10, 30, 100]\n\n# Create a list of MAE values\nmae_values = [0.8, 0.7, 0.6, 0.5, 0.4]\n\n# Create a list of colors for each line\ncolors = ['red', 'blue', 'green', 'yellow', 'black']\n\n# Create a list of labels for each line\nlabels = ['GPT-Neo', '5', '10', '30', '100']\n\n# Plot the data\nfor i in range(len(epochs)):\n    ax.plot(epochs[i], mae_values[i], color=colors[i], marker='o', label=labels[i])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(15, 6))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Traffic')\naxs[0, 1].set_title('ETMm2')\naxs[0, 2].set_title('ETTh2')\naxs[1, 0].set_title('ECL')\n\n# Plot the data\naxs[0, 0].plot([96, 192, 336, 720], [0.12, 0.14, 0.16, 0.18], 'r-')\naxs[0, 0].plot([96, 192, 336, 720], [0.10, 0.12, 0.14, 0.16], 'g-')\naxs[0, 0].plot([96, 192, 336, 720], [0.08, 0.10, 0.12, 0.14], 'b-')\naxs[0, 0].plot([96, 192, 336, 720], [0.06, 0.08, 0.10, 0.12], 'c-')\naxs[0, 0].plot([96, 192, 336, 720], [0.04, 0.06, 0.08, 0.10], 'm-')\naxs[0, 0].plot([96, 192, 336, 720], [0.02, 0.04, 0.06, 0.08], 'y-')\naxs[0, 0].plot([96, 192, 336, 720], [0.00, 0.02, 0.04, 0.06], 'k-')\n\naxs[0, 1].plot([96, 192, 336, 720], [0.12, 0.14, 0.16, 0.18], 'r-')\naxs[0, 1].plot([96, 192, 336, 720], [0.10, 0.12, 0.14, 0.16], 'g-')\naxs[0, 1].plot([96, 192, 336, 720], [0.08, 0.10, 0.12, 0.14], 'b-')\naxs[0, 1].plot([96, 192, 336, 720], [0.06, 0.08, 0.10, 0.12], 'c-')\naxs[0, 1].plot([96, 192, 336, 720], [0.04, 0.06, 0.08, 0.10], 'm-')\naxs[0, 1].plot([96, 192, 336, 720], [0.02, 0.04, 0.06, 0.08], 'y-')\naxs[0, 1].plot([96, 192, 336, 720], [0.00, 0.02, 0.04, 0.06], 'k-')\n\naxs[0, 2].plot([96, 192, 336, 720], [0.12, 0.14, 0.16, 0.18], 'r-')\naxs[0, 2].plot([96, 192, 336, 720], [0.10, 0.12, 0.14, 0.16], 'g-')\naxs[0, 2].plot([96, 192, 336, 720], [0.08, 0.10, 0.12, 0.14], 'b-')\naxs[0, 2].plot([96, 192, 336, 720], [0.06, 0.08, 0.10, 0.12], 'c-')\naxs[0, 2].plot([96, 192, 336, 720], [0.04, 0.06, 0.08, 0.10], 'm-')\naxs[0, 2].plot([96, 192, 336, 720], [0.02, 0.04, 0.06, 0.08], 'y-')\naxs[0, 2].plot([96, 192, 336, 720], [0.00, 0.02, 0.04, 0.06], 'k-')\n\naxs[1, 0].plot([96, 192, 336, 720], [0.12, 0.14, 0.16, 0.18], 'r-')\naxs[1, 0].plot([96, 192, 336, 720], [0.10, 0.12, 0.14, 0.16], 'g-')\naxs[1, 0].plot([96, 192, 336, 720], [0.08, 0.10, 0.12, 0.14], 'b-')\naxs[1, 0].plot([96, 192, 336, 720], [0.06, 0.08, 0.10, 0.12], 'c-')\naxs[1, 0].plot([96, 192, 336, 720], [0.04, 0.06, 0.08, 0.10], 'm-')\naxs[1, 0].plot([96, 192, 336, 720], [0.02, 0.04, 0.06, 0.08], 'y-')\naxs[1, 0].plot([96, 192, 336, 720], [0.00, 0.02, 0.04, 0.06], 'k-')\n\naxs[1, 1].plot([96, 192, 336, 720], [0.12, 0.14, 0.16, 0.18], 'r-')\naxs[1, 1].plot([96, 192, 336, 720], [0.10, 0.12, 0.14, 0.16], 'g-')\naxs[1, 1].plot([96, 192, 336, 720], [0.08, 0.10, 0.12, 0.14], 'b-')\naxs[1, 1].plot([96, 192, 336, 720], [0.06, 0.08, 0.10, 0.12], 'c-')\naxs[1, 1].plot([96, 192, 336, 720], [0.04, 0.06, 0.08, 0.10], 'm-')\naxs[1, 1].plot([96, 192, 336, 720], [0.02, 0.04, 0.06, 0.08], 'y-')\naxs[1, 1].plot([96, 192, 336, 720], [0.00, 0.02, 0.04, 0.06], 'k-')\n\naxs[1, 2].plot([96, 192, 336, 720], [0.12, 0.14, 0.16, 0.18], 'r-')\naxs[1, 2].plot([96, 192, 336, 720], [0.10, 0.12, 0.14, 0.16], 'g-')\naxs[1, 2].plot([96, 192, 336, 720], [0.08, 0.10, 0.12, 0.14], 'b-')\naxs[1, 2].plot([96, 192, 336, 720], [0.06, 0.08, 0.10, 0.12], 'c-')\naxs[1, 2].plot([96, 192, 336, 720], [0.04, 0.06, 0.08, 0.10], 'm-')\naxs[1, 2].plot([96, 192, 336, 720], [0.02, 0.04, 0.06, 0.08], 'y-')\naxs[1, 2].plot([96, 192, 336, 720], [0.00, 0.02, 0.04, 0.06], 'k-')\n\n# Add a legend\naxs[0, 0].legend(['Traffic', 'ETMm2', 'ETTh2', 'ECL'], loc='upper left')\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 1].images[0])\n\n# Add a color bar\nfig.colorbar(axs[1, 2].images[0])\n\n# Add a color bar\nfig.colorbar(axs[0, 0].images[0])\n\n# Add a color bar\nfig.colorbar(axs["}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the plot\nax.set_title('Serial (n=8, m=1)')\n\n# Create a scatter plot with orange dots\nax.scatter([224, 128, 64, 32], [70, 60, 50, 40], color='orange')\n\n# Create a line plot with orange line\nax.plot([224, 128, 64, 32], [70, 60, 50, 40], color='orange')\n\n# Add text annotations\nax.annotate('ImageNet-1k', xy=(224, 70), xytext=(224, 75),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('ImageNet-C/P (Fog)', xy=(32, 40), xytext=(32, 35),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(224, 32)\nax.set_ylim(0, 70)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Year')\nax.set_ylabel('Top-1 Acc.')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second subplot\nax2.set_title('Parallel (n=2, m=4)')\n\n# Create a scatter plot with blue dots\nax2.scatter([224, 128, 64, 32], [80, 70, 60, 50], color='blue')\n\n# Create a line plot with blue line\nax2.plot([224, 128, 64, 32], [80, 70, 60, 50], color='blue')\n\n# Add text annotations\nax2.annotate('ImageNet-1k', xy=(224, 80), xytext=(224, 85),\n             arrowprops=dict(facecolor='black', shrink=0.05))\nax2.annotate('ImageNet-C/P (Fog)', xy=(32, 50), xytext=(32, 45),\n             arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Set the x-axis and y-axis limits\nax2.set_xlim(224, 32)\nax2.set_ylim(0, 80)\n\n# Set the x-axis and y-axis labels\nax2.set_xlabel('Year')\nax2.set_ylabel('Top-1 Acc.')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Deep Learning Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the x-axis ticks\nax.set_xticks([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25])\n\n# Set the y-axis ticks\nax.set_yticks([20, 40, 60, 80, 100])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper left')\n\n# Set the color of the labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the color of the title\nax.set_title('Deep Learning Model Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'r-')\n\n# Set the color of the marker\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [20, 40, 60, 80, 100, 80, 60, 40, 20], 'ro')\n\n# Set the color of the legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Plot the data\nax.plot([0, 100, 200], [1, 2, 3], 'r-')\nax.plot([0, 100, 200], [3, 2, 1], 'b-')\nax.plot([0, 100, 200], [2, 3, 4], 'g-')\nax.plot([0, 100, 200], [4, 3, 2], 'y-')\n\n# Add a legend\nax.legend(['Line 1 (Sinusoidal)', 'Line 2 (Quadratic)', 'Line 3 (Random Noise)', 'Line 4 (Exponential Focus)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the plots\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x/10)\ny2 = np.cos(x/10)\ny3 = np.tan(x/10)\n\n# Plot the data\nax.plot(x, y1, 'r-', label='Line 1')\nax.plot(x, y2, 'g-', label='Line 2')\nax.plot(x, y3, 'b-', label='Line 3')\n\n# Add a legend\nax.legend()\n\n# Set the title of the plot\nax.set_title('My Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Set the title of the graph\nax.set_title('ogbl-collab Results')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Results')\n\n# Create a list of teams\nteams = ['All', 'MLP', 'GNC', 'NCN', 'SEAL', 'Node2Vec']\n\n# Create a list of results\nresults = [78, 76, 74, 72, 70, 68]\n\n# Create a list of colors for each team\ncolors = ['blue', 'green', 'red', 'orange', 'yellow', 'purple']\n\n# Create a list of markers for each team\nmarkers = ['o', 's', '^', 'v', '<', '>']\n\n# Plot the data\nfor i in range(len(teams)):\n    ax.plot(results, color=colors[i], marker=markers[i])\n\n# Add a legend\nax.legend(teams)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(10, 60)\nax.set_ylim(10**-14, 10**-12)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('N')\nax.set_ylabel('Precision')\n\n# Plot the data\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2], 'b-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2], 'g-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2], 'r-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2], 'm-')\n\n# Add a legend\nax.legend(['Standard', 'Constrained', 'Experimental', 'Hypothetical'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig1, ax1 = plt.subplots(figsize=(12, 8))\nax1.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'b-')\nax1.set_title('Graph Variation 1')\nax1.set_xlabel('N')\nax1.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the second graph\nfig2, ax2 = plt.subplots(figsize=(12, 8))\nax2.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'r-')\nax2.set_title('Graph Variation 2')\nax2.set_xlabel('N')\nax2.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the third graph\nfig3, ax3 = plt.subplots(figsize=(12, 8))\nax3.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'g-')\nax3.set_title('Graph Variation 3')\nax3.set_xlabel('N')\nax3.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the fourth graph\nfig4, ax4 = plt.subplots(figsize=(12, 8))\nax4.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'y-')\nax4.set_title('Graph Variation 4')\nax4.set_xlabel('N')\nax4.set_ylabel('Peak Performance')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot(np.linspace(0, 25, 100), np.sin(np.linspace(0, 25, 100)), color='blue')\nax.set_title('Daytime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\n\n# Create a second figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot(np.linspace(0, 25, 100), np.cos(np.linspace(0, 25, 100)), color='red')\nax.set_title('Nighttime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Create a color bar for the legend\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='Blues'))\n\n# Add a color bar to the plot\ncbar.set_label('Performance Index')\n\n# Add a legend to the plot\nlegend_elements = [Line2D([0], [0], marker='o', color='w', label='Standard Performance', markerfacecolor='blue', markersize=10),\n                  Line2D([0], [0], marker='o', color='w', label='Innovative Performance', markerfacecolor='red', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Sales and Temperature Correlation Over a Year')\n\n# Create a line graph with a red line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='red')\n\n# Create a scatter plot with blue dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='blue')\n\n# Create a scatter plot with red dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='red')\n\n# Create a scatter plot with green dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='green')\n\n# Create a scatter plot with black dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='black')\n\n# Create a scatter plot with white dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='white')\n\n# Create a scatter plot with yellow dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='yellow')\n\n# Create a scatter plot with cyan dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='cyan')\n\n# Create a scatter plot with magenta dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='magenta')\n\n# Create a scatter plot with brown dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='brown')\n\n# Create a scatter plot with gray dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='gray')\n\n# Create a scatter plot with silver dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='gold')\n\n# Create a scatter plot with bronze dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='bronze')\n\n# Create a scatter plot with copper dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='copper')\n\n# Create a scatter plot with tin dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='tin')\n\n# Create a scatter plot with zinc dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='zinc')\n\n# Create a scatter plot with lead dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='lead')\n\n# Create a scatter plot with mercury dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='mercury')\n\n# Create a scatter plot with thallium dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='thallium')\n\n# Create a scatter plot with arsenic dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='arsenic')\n\n# Create a scatter plot with selenium dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='selenium')\n\n# Create a scatter plot with tellurium dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='tellurium')\n\n# Create a scatter plot with polonium dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='polonium')\n\n# Create a scatter plot with auburn dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='auburn')\n\n# Create a scatter plot with sienna dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='sienna')\n\n# Create a scatter plot with peru dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='peru')\n\n# Create a scatter plot with chocolate dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='chocolate')\n\n# Create a scatter plot with saddlebrown dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='saddlebrown')\n\n# Create a scatter plot with sienna dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='sienna')\n\n# Create a scatter plot with peru dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='peru')\n\n# Create a scatter plot with chocolate dots\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, "}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each graph\ngrowth_data = [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\ndecay_data = [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\noscillation_data = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.plot(growth_data, label='Growth', color='green')\nax.plot(decay_data, label='Decay', color='red')\nax.plot(oscillation_data, label='Oscillation', color='blue')\n\n# Add a legend\nax.legend()\n\n# Set the title of the graph\nax.set_title('Exponential Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('5-shot accuracy over time')\n\n# Set the x-axis label\nax.set_xlabel('Digit Length')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a list of digit lengths\ndigit_lengths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Create a list of accuracy values\naccuracy_values = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Plot the data\nax.plot(digit_lengths, accuracy_values, 'o-')\n\n# Add a legend\nax.legend(['5-shot direct', '5-shot scratchpad', '5-shot rule-following'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5, 10))\n\n# Set the title of the graph\nax.set_title('Smoothed Representation')\n\n# Create a list of dates\ndates = ['2', '4', '6', '8', '10', '12', '14', '16', '18', '20']\n\n# Create a list of values\nvalues = [0.3, 0.2, 0.1, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7]\n\n# Plot the values\nax.plot(dates, values, 'b-')\n\n# Add a legend\nax.legend(['Smoothed Data'])\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim([0, 20])\n\n# Set the y-axis limits\nax.set_ylim([-1, 0.5])\n\n# Set the grid\nax.grid(True)\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(5, 10))\n\n# Set the title of the graph\nax.set_title('First Difference of Data')\n\n# Create a list of dates\ndates = ['2.5', '5.0', '7.5', '10.0', '12.5', '15.0', '17.5', '20.0']\n\n# Create a list of values\nvalues = [100, 90, 80, 70, 60, 50, 40, 30]\n\n# Plot the values\nax.plot(dates, values, 'y-')\n\n# Add a legend\nax.legend(['Difference Data'])\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim([0, 20])\n\n# Set the y-axis limits\nax.set_ylim([0, 100])\n\n# Set the grid\nax.grid(True)\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(5, 10))\n\n# Set the title of the graph\nax.set_title('Cumulative Sum Over Time')\n\n# Create a list of dates\ndates = ['0.0', '2.5', '5.0', '7.5', '10.0', '12.5', '15.0', '17.5', '20.0']\n\n# Create a list of values\nvalues = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Plot the values\nax.plot(dates, values, 'g-')\n\n# Add a legend\nax.legend(['Cumulative Sum'])\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim([0, 20])\n\n# Set the y-axis limits\nax.set_ylim([0, 2.5])\n\n# Set the grid\nax.grid(True)\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Sinusoidal Pattern')\n\n# Create a sine wave with a frequency of 1 Hz and amplitude of 1\nt = np.linspace(0, 10, 1000)\ny = np.sin(t)\nax.plot(t, y, 'm-', label='Sin Wave')\n\n# Set the x-axis and y-axis limits\nax.set_xlim([0, 10])\nax.set_ylim([-1.5, 1.5])\n\n# Add a legend to the plot\nax.legend()\n\n# Repeat for other patterns\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\nax.set_title('Cosine Pattern')\ny = np.cos(t)\nax.plot(t, y, 'g-', label='Cos Wave')\nax.set_xlim([0, 10])\nax.set_ylim([-1.5, 1.5])\nax.legend()\n\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\nax.set_title('Exponential Decay')\ny = np.exp(-t)\nax.plot(t, y, 'b-', label='Exp Decay')\nax.set_xlim([0, 10])\nax.set_ylim([0.2, 1.2])\nax.legend()\n\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\nax.set_title('Logarithmic Growth')\ny = np.log(t + 1)\nax.plot(t, y, 'r-', label='Log Growth')\nax.set_xlim([0, 10])\nax.set_ylim([0.5, 2.5])\nax.legend()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], 'b-')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], 'ro')\n\n# Set the title and labels\nax.set_title('Positive bound')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Weight (kg)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Positive Bound')\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4], [79, 76, 75, 75], 'r-')\nax.plot([0.5, 0.6, 0.7, 0.8, 0.9], [75, 75, 75, 75, 75], 'g-')\nax.plot([1.0], [75], 'bo')\n\n# Add a legend\nax.legend(['Positive Bound', 'Negative Bound', 'Contrastive Loss Weight'])\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0.0, 1.0)\nax.set_ylim(70, 85)\n\n# Add grid lines\nax.grid(True)\n\n# Save the figure\nplt.savefig('positive_bound.png')\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Define the data for each subplot\ndata = [\n    {'x': [1, 2, 3, 4, 5], 'y': [1.2, 1.1, 1.0, 0.9, 0.8], 'color': 'red', 'label': 'Passive'},\n    {'x': [1, 2, 3, 4, 5], 'y': [1.4, 1.3, 1.2, 1.1, 1.0], 'color': 'blue', 'label': 'Rain'},\n    {'x': [1, 2, 3, 4, 5], 'y': [1.6, 1.5, 1.4, 1.3, 1.2], 'color': 'green', 'label': 'Snow'},\n    {'x': [1, 2, 3, 4, 5], 'y': [1.8, 1.7, 1.6, 1.5, 1.4], 'color': 'orange', 'label': 'Fog'},\n    {'x': [1, 2, 3, 4, 5], 'y': [2.0, 1.9, 1.8, 1.7, 1.6], 'color': 'purple', 'label': 'Sportive'}\n]\n\n# Plot the data on each subplot\nfor i, ax in enumerate(axs):\n    ax.plot([d['x'] for d in data if d['label'] == 'Passive'], [d['y'] for d in data if d['label'] == 'Passive'], color='black')\n    ax.plot([d['x'] for d in data if d['label'] == 'Rain'], [d['y'] for d in data if d['label'] == 'Rain'], color='red')\n    ax.plot([d['x'] for d in data if d['label'] == 'Snow'], [d['y'] for d in data if d['label'] == 'Snow'], color='green')\n    ax.plot([d['x'] for d in data if d['label'] == 'Fog'], [d['y'] for d in data if d['label'] == 'Fog'], color='orange')\n    ax.plot([d['x'] for d in data if d['label'] == 'Sportive'], [d['y'] for d in data if d['label'] == 'Sportive'], color='purple')\n    ax.set_title('Relaxation Level')\n    ax.set_xlabel('Driving Style')\n    ax.set_ylabel('Relaxation Level')\n\n# Add a legend to the first subplot\naxs[0].legend(['Passive', 'Rain', 'Snow', 'Fog', 'Sportive'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Set the x-axis label\nax.set_xlabel('n_aug')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Create a list of n_aug values\nn_aug_values = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n# Create a list of performance gain values\nperformance_gain_values = [2, 4, 6, 8, 7, 5, 3, 1, 0]\n\n# Plot the data\nax.plot(n_aug_values, performance_gain_values, 'b-')\n\n# Add a legend\nax.legend(['Content', 'Organization', 'Language'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot the first subplot\naxs[0].plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'r-')\naxs[0].scatter([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], color='red')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Decomposition IO Norm')\naxs[0].set_ylabel('Accuracy')\n\n# Plot the second subplot\naxs[1].plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'b-')\naxs[1].scatter([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], color='blue')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Decomposition IO Norm')\naxs[1].set_ylabel('Accuracy')\n\n# Plot the third subplot\naxs[2].plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'g-')\naxs[2].scatter([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], color='green')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Decomposition IO Norm')\naxs[2].set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig1, ax1 = plt.subplots(figsize=(12, 9))\nax1.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'b-')\nax1.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax1.set_title('Error Rate vs. Learning Rate')\nax1.set_xlabel('Parameter Rate')\nax1.set_ylabel('Error Rate')\n\n# Create a figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(12, 9))\nax2.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'r-')\nax2.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'bo')\nax2.set_title('Accuracy vs. Dropout')\nax2.set_xlabel('Parameter Rate')\nax2.set_ylabel('Accuracy')\n\n# Create a figure and axis for the third plot\nfig3, ax3 = plt.subplots(figsize=(12, 9))\nax3.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'g-')\nax3.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'go')\nax3.set_title('Error Rate vs. Learning Rate')\nax3.set_xlabel('Parameter Rate')\nax3.set_ylabel('Error Rate')\n\n# Create a figure and axis for the fourth plot\nfig4, ax4 = plt.subplots(figsize=(12, 9))\nax4.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'y-')\nax4.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'yo')\nax4.set_title('Accuracy vs. Dropout')\nax4.set_xlabel('Parameter Rate')\nax4.set_ylabel('Accuracy')\n\n# Create a figure and axis for the fifth plot\nfig5, ax5 = plt.subplots(figsize=(12, 9))\nax5.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'm-')\nax5.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'mo')\nax5.set_title('Error Rate vs. Learning Rate')\nax5.set_xlabel('Parameter Rate')\nax5.set_ylabel('Error Rate')\n\n# Create a figure and axis for the sixth plot\nfig6, ax6 = plt.subplots(figsize=(12, 9))\nax6.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'c-')\nax6.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'co')\nax6.set_title('Accuracy vs. Dropout')\nax6.set_xlabel('Parameter Rate')\nax6.set_ylabel('Accuracy')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], label='Base Model', color='blue')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.08, 0.04, 0.02], label='Our Model', color='orange')\n\n# Set the title and labels\nax.set_title('Metric 1')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5, 3))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Create a line plot for the base model\nax.plot([0, 100, 200], [0.8, 0.6, 0.4], 'b-', label='Base Model')\n\n# Create a line plot for the our model\nax.plot([0, 100, 200], [0.7, 0.5, 0.3], 'g-', label='Our Model')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 10**10)\n\n# Set the y-axis limits\nax.set_ylim(10**-10, 10**1)\n\n# Set the x-axis ticks\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-10, 10**-7, 10**-4, 10**-1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^1', '2*10^1', '3*10^1', '4*10^1', '5*10^1', '6*10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-10', '10^-7', '10^-4', '10^-1'])\n\n# Set the title of the plot\nax.set_title('Logarithmic Scale Plot')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the plot title\nax.title.set_color('purple')\n\n# Set the color of the plot legend\nax.legend().get_texts()[0].set_color('orange')\n\n# Set the color of the plot annotations\nax.annotate('Annotation 1', xy=(10**1, 10**-10), xytext=(10**2, 10**-8),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Set the color of the plot text\nax.text(10**1, 10**-10, 'Text 1', fontsize=12, color='blue')\n\n# Set the color of the plot line\nax.plot([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], 'r-')\n\n# Set the color of the plot markers\nax.plot([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], 'ro')\n\n# Set the color of the plot fill\nax.fill_between([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], color='yellow')\n\n# Set the color of the plot hatch\nax.hatch_between([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], color='cyan')\n\n# Set the color of the plot scatter\nax.scatter([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], color='magenta')\n\n# Set the color of the plot bar\nax.bar([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], color='brown')\n\n# Set the color of the plot pie\nax.pie([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], colors=['red', 'green', 'blue', 'yellow', 'cyan', 'magenta'], startangle=90)\n\n# Set the color of the plot histogram\nax.hist([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], bins=10, color='orange')\n\n# Set the color of the plot boxplot\nax.boxplot([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], vert=False, patch_artist=True, boxprops=dict(facecolor='blue'))\n\n# Set the color of the plot violin plot\nax.violinplot([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], showmeans=True, showmedians=True, showextrema=True)\n\n# Set the color of the plot heatmap\nax.imshow([[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]], cmap='hot', interpolation='nearest')\n\n# Set the color of the plot contour plot\nax.contourf([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot stream plot\nax.streamplot([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot quiver plot\nax.quiver([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot polar plot\nax.polar([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D plot\nax.plot_surface([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D scatter plot\nax.scatter([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D bar plot\nax.bar3d([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D contour plot\nax.contour3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D stream plot\nax.streamplot3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D quiver plot\nax.quiver3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D polar plot\nax.polar3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D heatmap\nax.imshow3D([[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]], cmap='hot', interpolation='nearest')\n\n# Set the color of the plot 3D contour plot\nax.contourf3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D stream plot\nax.streamplot3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D quiver plot\nax.quiver3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D polar plot\nax.polar3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D 3D plot\nax.plot_surface3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D 3D scatter plot\nax.scatter3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1]])\n\n# Set the color of the plot 3D 3D bar plot\nax.bar3d3D([10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**0, 10**1], [[10**-10, 10**-7, 10**-4, 10**-"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Create a scatter plot with a blue color for performance\nax.scatter([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], c='b', label='Performance')\n\n# Create a scatter plot with a red color for efficiency\nax.scatter([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], c='r', label='Efficiency')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Create a scatter plot for each data series\nax.scatter([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], color='blue', label='Performance')\nax.scatter([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], color='red', label='Efficiency')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 30)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 31, 5))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 13, 2))\n\n# Add a grid to the plot\nax.grid(True)\n\n# Add a legend to the plot\nax.legend()\n\n# Add a scatter plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\n\n# Add a line plot to the plot\nax.plot([1, 2, 3], [4, 5, 6], color='blue', label='Efficiency')\n\n# Add a bar chart to the plot\nax.bar([1, 2, 3], [4, 5, 6], color='red', label='Growth')\n\n# Add a pie chart to the plot\nax.pie([1, 2, 3], colors=['green', 'blue', 'red'], labels=['Performance', 'Efficiency', 'Growth'])\n\n# Add a histogram to the plot\nax.hist([1, 2, 3], bins=3, color='green', label='Performance')\n\n# Add a box plot to the plot\nax.boxplot([1, 2, 3], vert=False, patch_artist=True, labels=['Performance'])\n\n# Add a violin plot to the plot\nax.violinplot([1, 2, 3], showmeans=True, showmedians=True, showextrema=True)\n\n# Add a heatmap to the plot\nax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Add a contour plot to the plot\nax.contourf([1, 2, 3], [4, 5, 6], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Add a scatter plot with a regression line to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\n\n# Add a scatter plot with a regression line and a confidence interval to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\nresiduals = [4 - p(1), 5 - p(2), 6 - p(3)]\nax.scatter([1, 2, 3], residuals, color='red', label='Residuals')\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot and a QQ plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\nresiduals = [4 - p(1), 5 - p(2), 6 - p(3)]\nax.scatter([1, 2, 3], residuals, color='red', label='Residuals')\nqqplot(residuals, line='45', fit=True)\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot and a QQ plot and a normal probability plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\nresiduals = [4 - p(1), 5 - p(2), 6 - p(3)]\nax.scatter([1, 2, 3], residuals, color='red', label='Residuals')\nqqplot(residuals, line='45', fit=True)\nprobplot(residuals, dist=\"norm\", plot=ax)\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot and a QQ plot and a normal probability plot and a histogram to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\nresiduals = [4 - p(1), 5 - p(2), 6 - p(3)]\nax.scatter([1, 2, 3], residuals, color='red', label='Residuals')\nqqplot(residuals, line='45', fit=True)\nprobplot(residuals, dist=\"norm\", plot=ax)\nax.hist(residuals, bins=3, color='green', label='Residuals')\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot and a QQ plot and a normal probability plot and a histogram and a box plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\nresiduals = [4 - p(1), 5 - p(2), 6 - p(3)]\nax.scatter([1, 2, 3], residuals, color='red', label='Residuals')\nqqplot(residuals, line='45', fit=True)\nprobplot(residuals, dist=\"norm\", plot=ax)\nax.hist(residuals, bins=3, color='green', label='Residuals')\nax.boxplot([1, 2, 3], vert=False, patch_artist=True, labels=['Performance'])\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot and a QQ plot and a normal probability plot and a histogram and a box plot and a violin plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\nresiduals = [4 - p(1), 5 - p(2), 6 - p(3)]\nax.scatter([1, 2, 3], residuals, color='red', label='Residuals')\nqqplot(residuals, line='45', fit=True)\nprobplot(residuals, dist=\"norm\", plot=ax)\nax.hist(residuals, bins=3, color='green', label='Residuals')\nax.boxplot([1, 2, 3], vert=False, patch_artist=True, labels=['Performance'])\nax.violinplot([1, 2, 3], showmeans=True, showmedians=True, showextrema=True)\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot and a QQ plot and a normal probability plot and a histogram and a box plot and a violin plot and a heatmap to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\nresiduals = [4 - p(1), 5 - p(2), 6 - p(3)]\nax.scatter([1, 2, 3], residuals, color='red', label='Residuals')\nqqplot(residuals, line='45', fit=True)\nprobplot(residuals, dist=\"norm\", plot=ax)\nax.hist(residuals, bins=3, color='green', label='Residuals')\nax.boxplot([1, 2, 3], vert=False, patch_artist=True, labels=['Performance'])\nax.violinplot([1, 2, 3], showmeans=True, showmedians=True, showextrema=True)\nax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot and a QQ plot and a normal probability plot and a histogram and a box plot and a violin plot and a heatmap and a contour plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\nresiduals = [4 - p(1), 5 - p(2), 6 - p(3)]\nax.scatter([1, 2, 3], residuals, color='red', label='Residuals')\nqqplot(residuals, line='45', fit=True)\nprobplot(residuals, dist=\"norm\", plot=ax)\nax.hist(residuals, bins=3, color='green', label='Residuals')\nax.boxplot([1, 2, 3], vert=False, patch_artist=True, labels=['Performance'])\nax.violinplot([1, 2, 3], showmeans=True, showmedians=True, showextrema=True)\nax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\nax.contourf([1, 2, 3], [4, 5, 6], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Add a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot and a QQ plot and a normal probability plot and a histogram and a box plot and a violin plot and a heatmap and a contour plot and a scatter plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='Performance')\nz = np.polyfit([1, 2, 3], [4, 5, 6], 1)\np = np.poly1d(z)\nax.plot([1, 2, 3], p([1, 2, 3]), \"r--\")\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 0.5, p([1, 2, 3]) + 0.5, color='red', alpha=0.2)\nax.fill_between([1, 2, 3], p([1, 2, 3]) - 1, p([1, 2, 3]) + 1, color='red', alpha=0.1)\nresiduals = [4 - p(1), 5 - p(2), 6 - p(3)]\n"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('bisque')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks', fontsize=24)\n\n# Set the x-axis label\nax.set_xlabel('Weeks', fontsize=16)\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value', fontsize=16)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the grid lines\nax.grid(True)\n\n# Plot the data series\nax.plot([0, 5, 10, 15, 20, 25], [10, 8, 6, 4, 2, 0], 'b-', label='Data Series 1')\nax.plot([0, 5, 10, 15, 20, 25], [9, 7, 5, 3, 1, -1], 'g--', label='Data Series 2 with Gradient')\nax.plot([0, 5, 10, 15, 20, 25], [8, 6, 4, 2, 0, -2], 'r-.', label='Data Series 3')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the background color of the plot\nax.set_facecolor('azure')\n\n# Set the title of the plot\nax.set_title('Average Accuracy (%)')\n\n# Set the x-axis label\nax.set_xlabel('Task')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the y-ticks\nax.set_yticks(range(0, 101, 10))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the line colors\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 85, 80, 75, 70, 65, 60, 55, 50, 45], 'b-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'g-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 75, 70, 65, 60, 55, 50, 45, 40, 35], 'r-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'c-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 65, 60, 55, 50, 45, 40, 35, 30, 25], 'm-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'y-')\n\n# Set the legend\nax.legend(['BaCE', 'LWF', 'EWC', 'SEQ'])\n\n# Set the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 85, 80, 75, 70, 65, 60, 55, 50, 45], 'bs')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 75, 70, 65, 60, 55, 50, 45, 40, 35], 'rs')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'cs')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 65, 60, 55, 50, 45, 40, 35, 30, 25], 'ms')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'ys')\n\n# Set the marker sizes\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 85, 80, 75, 70, 65, 60, 55, 50, 45], 'bs', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 75, 70, 65, 60, 55, 50, 45, 40, 35], 'rs', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'cs', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 65, 60, 55, 50, 45, 40, 35, 30, 25], 'ms', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'ys', markersize=10)\n\n# Set the marker facecolors\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 85, 80, 75, 70, 65, 60, 55, 50, 45], 'bs', markerfacecolor='blue')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markerfacecolor='green')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 75, 70, 65, 60, 55, 50, 45, 40, 35], 'rs', markerfacecolor='red')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'cs', markerfacecolor='cyan')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 65, 60, 55, 50, 45, 40, 35, 30, 25], 'ms', markerfacecolor='magenta')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'ys', markerfacecolor='yellow')\n\n# Set the marker edgecolors\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 85, 80, 75, 70, 65, 60, 55, 50, 45], 'bs', markeredgecolor='black')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markeredgecolor='black')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 75, 70, 65, 60, 55, 50, 45, 40, 35], 'rs', markeredgecolor='black')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'cs', markeredgecolor='black')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 65, 60, 55, 50, 45, 40, 35, 30, 25], 'ms', markeredgecolor='black')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'ys', markeredgecolor='black')\n\n# Set the marker linewidths\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 85, 80, 75, 70, 65, 60, 55, 50, 45], 'bs', markeredgewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markeredgewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 75, 70, 65, 60, 55, 50, 45, 40, 35], 'rs', markeredgewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'cs', markeredgewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 65, 60, 55, 50, 45, 40, 35, 30, 25], 'ms', markeredgewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'ys', markeredgewidth=2)\n\n# Set the marker fill styles\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 85, 80, 75, 70, 65, 60, 55, 50, 45], 'bs', markerfacecolor='none')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markerfacecolor='none')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 75, 70, 65, 60, 55, 50, 45, 40, 35], 'rs', markerfacecolor='none')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'cs', markerfacecolor='none')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 65, 60, 55, 50, 45, 40, 35, 30, 25], 'ms', markerfacecolor='none')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'ys', markerfacecolor='none')\n\n# Set the marker sizes\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 85, 80, 75, 70, 65, 60, 55, 50, 45], 'bs', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 75, 70, 65, 60, 55, 50, 45, 40, 35], 'rs', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'cs', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 65, 60, 55, 50, 45, 40, 35, 30, 25], 'ms', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 3"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [80, 85, 90, 95, 92, 88, 85, 82, 78, 75]\ny2 = [70, 75, 80, 85, 82, 78, 75, 72, 68, 65]\ny3 = [60, 65, 70, 75, 72, 68, 65, 62, 58, 55]\ny4 = [50, 55, 60, 65, 62, 58, 55, 52, 48, 45]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the data on the first subplot\naxs[0].plot(x, y1, 'b-', label='BaCE')\naxs[0].plot(x, y2, 'g-', label='EWC')\naxs[0].set_title('Performance Comparison: BaCE vs EWC')\naxs[0].legend()\naxs[0].grid(True)\n\n# Plot the data on the second subplot\naxs[1].plot(x, y3, 'r-', label='LWF')\naxs[1].plot(x, y4, 'm-', label='SEQ')\naxs[1].set_title('Performance Comparison: LWF vs SEQ')\naxs[1].legend()\naxs[1].grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Set the title of the plot\nax.set_title('model1 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate')\n\n# Create a scatter plot with a color map\nscatter = ax.scatter([0, 250, 500, 1000, 1500, 2000], [0.8, 0.6, 0.4, 0.2, 0.1, 0.0], c='blue', cmap='coolwarm')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Set the limits of the x-axis\nax.set_xlim(0, 2000)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 1)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 250, 500, 1000, 1500, 2000])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]\ny2 = [2.2, 3.2, 4.2, 5.2, 6.2, 7.2, 8.2]\ny3 = [2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nax.plot(x, y1, 'b-', label='IHM')\nax.plot(x, y2, 'r-', label='SDM')\nax.plot(x, y3, 'g-', label='AMII')\n\n# Markers\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'bo')\n    ax.plot(x[i], y2[i], 'ro')\n    ax.plot(x[i], y3[i], 'go')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Wearability Comparison')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Wear (%)')\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Trend Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Number of microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the y-axis limits\nax.set_ylim(2, 30)\n\n# Set the x-axis limits\nax.set_xlim(2, 10)\n\n# Set the y-axis ticks\nax.set_yticks([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30])\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Add a legend\nax.legend()\n\n# Add a trend line\ntrend_line = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\nax.plot(trend_line, 'r--')\n\n# Add a scatter plot\nscatter_plot = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.scatter(scatter_plot, [2, 4, 6, 8, 10, 12, 14, 16, 18], color='blue')\n\n# Add a bar chart\nbar_chart = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.bar(bar_chart, [2, 4, 6, 8, 10, 12, 14, 16, 18], color='green')\n\n# Add a pie chart\npie_chart = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.pie(pie_chart, colors=['red', 'blue', 'green', 'yellow', 'orange', 'purple', 'pink', 'brown', 'gray'])\n\n# Add a histogram\nhistogram = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.hist(histogram, bins=10, color='cyan')\n\n# Add a box plot\nbox_plot = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.boxplot(box_plot, vert=False, patch_artist=True)\n\n# Add a violin plot\nviolin_plot = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.violinplot(violin_plot, showmeans=True)\n\n# Add a heatmap\nheatmap = [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]\nax.imshow(heatmap, cmap='hot', interpolation='nearest')\n\n# Add a contour plot\ncontour_plot = [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]\nax.contour(contour_plot, cmap='coolwarm')\n\n# Add a stream plot\nstream_plot = [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]\nax.streamplot(stream_plot, stream_plot, cmap='spring')\n\n# Add a quiver plot\nquiver_plot = [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]\nax.quiver(quiver_plot, quiver_plot, cmap='summer')\n\n# Add a polar plot\npolar_plot = [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]\nax.polar(polar_plot, polar_plot, cmap='autumn')\n\n# Add a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nx = [2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [2, 4, 6, 8, 10, 12, 14, 16, 18]\nz = [2, 4, 6, 8, 10, 12, 14, 16, 18]\nax3d.plot(x, y, z, 'r-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Add a horizontal line at WER=0.7\nax.axhline(y=0.7, color='r', linestyle='-')\n\n# Add a vertical line at time=4\nax.axvline(x=4, color='g', linestyle='-')\n\n# Add a scatter plot with orange dots for each highlight\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], color='orange')\n\n# Add a line plot with blue line for the overall performance\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], color='blue')\n\n# Add a legend with a colored rectangle for each highlight\nhighlight_labels = ['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7']\nhighlight_colors = ['orange', 'blue', 'red', 'green', 'purple', 'cyan', 'magenta']\nfor i in range(len(highlight_labels)):\n    ax.text(2, 0.9 - i * 0.1, highlight_labels[i], color=highlight_colors[i])\n\n# Add a legend with a colored rectangle for the overall performance\nax.legend(['Overall Performance'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(12, 6))\n\n# Plot the first subplot\nx = np.linspace(0.7, 1, 100)\ny = np.sin(x)\naxs[0, 0].plot(x, y, 'b-')\naxs[0, 0].set_title('a) Positive bound.')\naxs[0, 0].fill_between(x, y, where=(y > 0), color='lightblue')\n\n# Plot the second subplot\nx = np.linspace(0.8, 1, 100)\ny = np.cos(x)\naxs[0, 1].plot(x, y, 'r-')\naxs[0, 1].set_title('b) Negative bound.')\naxs[0, 1].fill_between(x, y, where=(y < 0), color='lightgreen')\n\n# Plot the third subplot\nx = np.linspace(0.9, 1, 100)\ny = np.tan(x)\naxs[1, 0].plot(x, y, 'g-')\naxs[1, 0].set_title('c) Fuzzy coefficient.')\naxs[1, 0].fill_between(x, y, where=(y > 0), color='lightgrey')\n\n# Plot the fourth subplot\nx = np.linspace(0.1, 1, 100)\ny = np.exp(x)\naxs[1, 1].plot(x, y, 'k-')\naxs[1, 1].set_title('d) Contrastive loss weight.')\naxs[1, 1].fill_between(x, y, where=(y > 0), color='lightpink')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Microphone Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('Sales ($ millions)')\n\n# Create a scatter plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.plot(x, y, 'r-')\n\n# Add a legend\nax.legend(['LibriCSS WER', 'Threshold'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Create a list of colors for the lines\ncolors = ['blue', 'green']\n\n# Create a list of labels for the lines\nlabels = ['PNA', 'GIN']\n\n# Create a list of ratios\nratios = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a list of performance values\nperformance_values = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6]\n\n# Plot the data\nfor i in range(len(colors)):\n    ax.plot(ratios, performance_values, color=colors[i], label=labels[i])\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0.1, 1.0)\nax.set_ylim(0.4, 1.0)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Trends')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1)\n\n# Set the y-axis limits\nax.set_ylim(-80, 20)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both',"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 1.5)\n\n# Add a rectangle for the logo\nlogo = plt.Rectangle((0.05, 0.9), 0.1, 0.1, color='blue')\nax.add_patch(logo)\n\n# Add a text box for the description\ndesc = plt.Rectangle((0.2, 0.9), 0.3, 0.1, color='yellow')\nax.add_patch(desc)\n\n# Add a line graph for the performance data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], 'b-')\n\n# Add a scatter plot for the performance data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], color='red')\n\n# Add a legend\nax.legend(['Performance', 'Data'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Create a scatter plot with a blue color for the points\nax.scatter([0.2, 0.4, 0.6, 0.8, 1.0], [0.5, 0.7, 0.9, 1.1, 1.3], c='blue')\n\n# Create a line plot with a red color for the trend\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.5, 0.7, 0.9, 1.1, 1.3], c='red')\n\n# Add a legend to the plot\nax.legend(['Model 1', 'Model 2'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Comparison of Model Accuracies')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Model Accuracy')\n\n# Set the x-ticks\nax.set_xticks([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n\n# Set the y-ticks\nax.set_yticks(range(60, 90, 5))\n\n# Create a grid\nax.grid(True)\n\n# Create a legend\nax.legend()\n\n# Create a scatter plot\nax.scatter([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104], color='red', label='Model 1')\n\n# Create a line plot\nax.plot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], color='blue', label='Model 2')\n\n# Create a bar chart\nax.bar([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='orange', label='Model 3')\n\n# Create a pie chart\nax.pie([10, 20, 30, 40], colors=['red', 'green', 'blue', 'yellow'], labels=['Model 1', 'Model 2', 'Model 3', 'Model 4'], autopct='%1.1f%%')\n\n# Create a histogram\nax.hist([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], bins=5, color='purple', label='Model 5')\n\n# Create a scatter plot with a regression line\nax.scatter([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], color='red', label='Model 1')\nz = np.polyfit([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], 1)\np = np.poly1d(z)\nax.plot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]), \"r--\")\n\n# Create a scatter plot with a regression line and a confidence interval\nax.scatter([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], color='red', label='Model 1')\nz = np.polyfit([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], 1)\np = np.poly1d(z)\nax.plot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]), \"r--\")\nax.fill_between([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) - 1, p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) + 1, color='gray', alpha=0.5)\n\n# Create a scatter plot with a regression line and a confidence interval and a prediction interval\nax.scatter([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], color='red', label='Model 1')\nz = np.polyfit([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], 1)\np = np.poly1d(z)\nax.plot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]), \"r--\")\nax.fill_between([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) - 1, p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) + 1, color='gray', alpha=0.5)\nax.fill_between([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) - 2, p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) + 2, color='gray', alpha=0.5)\n\n# Create a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot\nax.scatter([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], color='red', label='Model 1')\nz = np.polyfit([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], 1)\np = np.poly1d(z)\nax.plot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]), \"r--\")\nax.fill_between([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) - 1, p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) + 1, color='gray', alpha=0.5)\nax.fill_between([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) - 2, p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) + 2, color='gray', alpha=0.5)\nresiduals = [75 - p(5), 77 - p(7), 79 - p(9), 81 - p(11), 83 - p(13), 85 - p(15), 87 - p(17), 89 - p(19), 91 - p(21), 93 - p(23), 95 - p(25), 97 - p(27), 99 - p(29)]\nax.scatter([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], residuals, color='blue', label='Residuals')\n\n# Create a scatter plot with a regression line and a confidence interval and a prediction interval and a residual plot and a QQ-plot\nax.scatter([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], color='red', label='Model 1')\nz = np.polyfit([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], 1)\np = np.poly1d(z)\nax.plot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]), \"r--\")\nax.fill_between([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) - 1, p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) + 1, color='gray', alpha=0.5)\nax.fill_between([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) - 2, p([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) + 2, color='gray', alpha=0.5)\nresiduals = [75 - p(5), 77 - p(7), 79 - p(9), 81 - p(11), 83 - p(13), 85 - p(15), 87 - p(17), 89 - p(19), 91 - p(21), 93 - p(23), 95 - p(25), 97 - p(27), 99 - p(29)]\nax.scatter([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], residuals, color='blue', label='Residuals')\nqq_plot = sm.qqplot(residuals, line='45')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\nax.set_title('Performance of Model X')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [90, 92, 95, 93, 91, 94, 92, 95, 93], 'r-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [85, 87, 90, 88, 86, 89, 87, 90, 88], 'g-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [80, 82, 85, 83, 81, 84, 82, 85, 83], 'b-')\n\n# Add the legend\nax.legend(['Config A - Model X', 'Config B - Model X', 'Config C - Model X'])\n\n# Add the red rectangle\nrect = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add the green rectangle\nrect = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(rect)\n\n# Add the blue rectangle\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add the red circle\ncircle = plt.Circle((0, 0), 0.5, color='red')\nax.add_artist(circle)\n\n# Add the green circle\ncircle = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(circle)\n\n# Add the blue circle\ncircle = plt.Circle((0, 0), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add the red triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='red')\nax.add_patch(triangle)\n\n# Add the green triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='green')\nax.add_patch(triangle)\n\n# Add the blue triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='blue')\nax.add_patch(triangle)\n\n# Add the red square\nsquare = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(square)\n\n# Add the green square\nsquare = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(square)\n\n# Add the blue square\nsquare = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(square)\n\n# Add the red star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(star)\n\n# Add the green star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(star)\n\n# Add the blue star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(star)\n\n# Add the red diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1]], color='red')\nax.add_patch(diamond)\n\n# Add the green diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1]], color='green')\nax.add_patch(diamond)\n\n# Add the blue diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1]], color='blue')\nax.add_patch(diamond)\n\n# Add the red heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(heart)\n\n# Add the green heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(heart)\n\n# Add the blue heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(heart)\n\n# Add the red cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(cross)\n\n# Add the green cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(cross)\n\n# Add the blue cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(cross)\n\n# Add the red plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(plus)\n\n# Add the green plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(plus)\n\n# Add the blue plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(plus)\n\n# Add the red minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(minus)\n\n# Add the green minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(minus)\n\n# Add the blue minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(minus)\n\n# Add the red triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='red')\nax.add_patch(triangle)\n\n# Add the green triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='green')\nax.add_patch(triangle)\n\n# Add the blue triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='blue')\nax.add_patch(triangle)\n\n# Add the red square\nsquare = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(square)\n\n# Add the green square\nsquare = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(square)\n\n# Add the blue square\nsquare = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(square)\n\n# Add the red star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(star)\n\n# Add the green star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(star)\n\n# Add the blue star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(star)\n\n# Add the red diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1]], color='red')\nax.add_patch(diamond)\n\n# Add the green diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1]], color='green')\nax.add_patch(diamond)\n\n# Add the blue diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1]], color='blue')\nax.add_patch(diamond)\n\n# Add the red heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(heart)\n\n# Add the green heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(heart)\n\n# Add the blue heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(heart)\n\n# Add the red cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(cross)\n\n# Add the green cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(cross)\n\n# Add the blue cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(cross)\n\n# Add the red plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(plus)\n\n# Add the green plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(plus)\n\n# Add the blue plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(plus)\n\n# Add the red minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(minus)\n\n# Add the green minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(minus)\n\n# Add the blue minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(minus)\n\n# Add the red triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='red')\nax.add_patch(triangle)\n\n# Add the green triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='green')\nax.add_patch(triangle)\n\n# Add the blue triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='blue')\nax.add_patch(triangle)\n\n# Add the red square\nsquare = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(square)\n\n# Add the green square\nsquare = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(square)\n\n# Add the blue square\nsquare = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(square)\n\n# Add the red star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(star)\n\n# Add the green star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(star)\n\n# Add the blue star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(star)\n\n# Add the red diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1]], color='red')\nax.add_patch(diamond)\n\n# Add the green diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1]], color='green')\nax.add_patch(diamond)\n\n# Add the blue diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1]], color='blue')\nax.add_patch(diamond)\n\n# Add the red heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(heart)\n\n# Add the green heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(heart)\n\n# Add the blue heart\n"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Performance of Llama\naxs[0].plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 92, 93, 94, 95, 94, 93, 92, 91, 90], 'r--', label='Llama')\naxs[0].set_title('Performance of Llama')\naxs[0].legend()\naxs[0].set_xlabel('Iteration')\naxs[0].set_ylabel('Score')\n\n# Performance of Falcon\naxs[1].plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 72, 73, 74, 75, 74, 73, 72, 71, 70], 'g--', label='Falcon')\naxs[1].set_title('Performance of Falcon')\naxs[1].legend()\naxs[1].set_xlabel('Iteration')\naxs[1].set_ylabel('Score')\n\n# Performance of Qwen\naxs[2].plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 82, 83, 84, 85, 84, 83, 82, 81, 80], 'b--', label='Qwen')\naxs[2].set_title('Performance of Qwen')\naxs[2].legend()\naxs[2].set_xlabel('Iteration')\naxs[2].set_ylabel('Score')\n\n# Configurations\nfor ax in axs:\n    for i in range(1, 11):\n        ax.text(i, 95, f'Config A - Llama', color='pink', ha='center', va='bottom')\n        ax.text(i, 94, f'Config B - Llama', color='lightgreen', ha='center', va='bottom')\n        ax.text(i, 93, f'Config C - Llama', color='skyblue', ha='center', va='bottom')\n        ax.text(i, 70, f'Config A - Falcon', color='pink', ha='center', va='bottom')\n        ax.text(i, 69, f'Config B - Falcon', color='lightgreen', ha='center', va='bottom')\n        ax.text(i, 68, f'Config C - Falcon', color='skyblue', ha='center', va='bottom')\n        ax.text(i, 80, f'Config A - Qwen', color='pink', ha='center', va='bottom')\n        ax.text(i, 79, f'Config B - Qwen', color='lightgreen', ha='center', va='bottom')\n        ax.text(i, 78, f'Config C - Qwen', color='skyblue', ha='center', va='bottom')\n\n# Teams\nfor ax in axs:\n    for i in range(1, 11):\n        ax.text(i, 95, 'Team A', color='blue', ha='center', va='bottom')\n        ax.text(i, 94, 'Team B', color='red', ha='center', va='bottom')\n        ax.text(i, 93, 'Team C', color='green', ha='center', va='bottom')\n        ax.text(i, 70, 'Team A', color='blue', ha='center', va='bottom')\n        ax.text(i, 69, 'Team B', color='red', ha='center', va='bottom')\n        ax.text(i, 68, 'Team C', color='green', ha='center', va='bottom')\n        ax.text(i, 80, 'Team A', color='blue', ha='center', va='bottom')\n        ax.text(i, 79, 'Team B', color='red', ha='center', va='bottom')\n        ax.text(i, 78, 'Team C', color='green', ha='center', va='bottom')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Add a title to the plot\nax.set_title('Sales Growth Over Time')\n\n# Add a legend to the plot\nax.legend()\n\n# Add a grid to the plot\nax.grid(True)\n\n# Add a scatter plot to the plot\nax.scatter([1, 2, 3, 4], [1, 2, 3, 4], color='red')\n\n# Add a line plot to the plot\nax.plot([1, 2, 3, 4], [1, 2, 3, 4], color='blue')\n\n# Add a bar chart to the plot\nax.bar([1, 2, 3, 4], [1, 2, 3, 4], color='green')\n\n# Add a pie chart to the plot\nax.pie([1, 2, 3, 4], colors=['red', 'blue', 'green', 'yellow'])\n\n# Add a histogram to the plot\nax.hist([1, 2, 3, 4], bins=5, color='purple')\n\n# Add a box plot to the plot\nax.boxplot([1, 2, 3, 4])\n\n# Add a violin plot to the plot\nax.violinplot([1, 2, 3, 4])\n\n# Add a heatmap to the plot\nax.imshow([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], cmap='hot')\n\n# Add a contour plot to the plot\nax.contourf([1, 2, 3, 4], [1, 2, 3, 4], [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n\n# Add a scatter plot with a colormap\nax.scatter([1, 2, 3, 4], [1, 2, 3, 4], c=[1, 2, 3, 4], cmap='coolwarm')\n\n# Add a line plot with a colormap\nax.plot([1, 2, 3, 4], [1, 2, 3, 4], c=[1, 2, 3, 4], cmap='coolwarm')\n\n# Add a bar chart with a colormap\nax.bar([1, 2, 3, 4], [1, 2, 3, 4], color=plt.cm.coolwarm([1, 2, 3, 4]))\n\n# Add a pie chart with a colormap\nax.pie([1, 2, 3, 4], colors=plt.cm.coolwarm([1, 2, 3, 4]))\n\n# Add a histogram with a colormap\nax.hist([1, 2, 3, 4], bins=5, color=plt.cm.coolwarm([1, 2, 3, 4]))\n\n# Add a box plot with a colormap\nax.boxplot([1, 2, 3, 4], patch_artist=True, boxprops=dict(facecolor=plt.cm.coolwarm(0.2)))\n\n# Add a violin plot with a colormap\nax.violinplot([1, 2, 3, 4], showmeans=True, showmedians=True, showextrema=True, bw_method=None, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None, bw_method=None, showmeans=False, showmedians=False, showextrema=True, points=100, gridsize=300, widths=0.8, showfliers=True, vert=True, kernel=None,"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18, 4))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the title of the plot\nax.set_title('Traffic Performance')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Create a scatter plot\nx = np.linspace(0, 700, 100)\ny = np.sin(x/50)\nax.plot(x, y, 'o-')\n\n# Add a legend\nax.legend(['Traffic Performance'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Relaxation Level by Driving Style')\n\n# Set the x-axis label\nax.set_xlabel('Driving Style')\n\n# Set the y-axis label\nax.set_ylabel('Relaxation Level')\n\n# Define the data for the plot\ndriving_styles = ['Passive', 'Racing', 'Replay', 'Sportive']\nrelaxation_levels = [14, 12, 10, 8]\n\n# Plot the data\nax.plot(driving_styles, relaxation_levels, 'ro-')\n\n# Add a legend\nax.legend(['Relaxation Level'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Add a title to the plot\nax.set_title('Category A Growth')\n\n# Add labels to the x and y axes\nax.set_xlabel('Phase')\nax.set_ylabel('Growth')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 30)\n\n# Set the y-axis limits\nax.set_ylim(10, 15)\n\n# Set the x-axis ticks\nax.set_xticks([4, 10, 20, 30])\n\n# Set the y-axis ticks\nax.set_yticks([10, 12, 14, 15])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['4\u00d710^0', '1\u00d710^1', '2\u00d710^1', '3\u00d710^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10', '12', '14', '15'])\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Company Name', transform=ax.transAxes, fontsize=15,\n        verticalalignment='center', horizontalalignment='center')\n\n# Set the color of the legend\nax.legend(['Standard', 'Constrained'], loc='upper left', bbox_to_anchor=(1,1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Define the data for the pie chart\nlabels = ['North', 'South', 'East', 'West', 'Central']\nsizes = [40, 25, 15, 10, 5]\ncolors = ['#FF6347', '#4682B4', '#90EE90', '#FFD700', '#87CEEB']\n\n# Create the pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that it appears as a circle\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Set the title of the plot\nax.set_title('Beauty Product Ratings')\n\n# Create a bar chart with the data\nax.bar(['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive'], [1.5, 1.3, 1.2, 1.1, 1.0], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Product')\n\n# Set the y-axis label\nax.set_ylabel('Rating')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nengr = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nzhang = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nrice = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nrade = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nhendry = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\naddep = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\ncarmon = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(engr, label='Engstrom (M1)')\nax.plot(zhang, label='Zhang (M2)')\nax.plot(rice, label='Rice (M3)')\nax.plot(rade, label='Rade (M4)')\nax.plot(hendry, label='Hendryks (M5)')\nax.plot(addep, label='Addep. (M6)')\nax.plot(carmon, label='Carmon (M7)')\n\n# Set the title and labels\nax.set_title('Robust Error (%)')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Error (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'VGG16': [0.551, 0.538, 0.744, 0.762],\n    'Resnet101': [0.744, 0.394, 0.477, 0.62],\n    'Rotation Invariance': [0.8, 0.85, 0.9, 0.95]\n}\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    axs[i].plot(value, label=key)\n    axs[i].set_xlabel('Time')\n    axs[i].set_ylabel('Accuracy')\n    axs[i].legend()\n\n# Set the title of the first subplot\naxs[0].set_title('A VGG16')\n\n# Set the title of the second subplot\naxs[1].set_title('B Resnet101')\n\n# Set the title of the third subplot\naxs[2].set_title('C Rotation invariance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the colorbar\ncmap = plt.get_cmap('coolwarm')\nnorm = plt.Normalize(vmin=-0.5, vmax=1.5)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm)\n\n# Set the title\nax.set_title('Color Palette')\n\n# Set the x-axis label\nax.set_xlabel('Attribute')\n\n# Set the y-axis label\nax.set_ylabel('Intensity')\n\n# Set the x-ticks\nax.set_xticks(np.arange(0, 10, 1))\nax.set_yticks(np.arange(0, 10, 1))\n\n# Set the x-tick labels\nax.set_xticklabels(['PaleSkin', 'OvalFace', 'Smiling', 'Attactive', 'Male', 'BigLips', 'PointyNose', 'White', 'BigNose', 'NoBeard', 'HeavyMakeup'])\n\n# Set the y-tick labels\nax.set_yticklabels(['Light', 'Medium', 'Dark', 'Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Violet'])\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('GPT2 Tokenizer Performance')\n\n# Create a scatter plot with random data\nx = np.random.randint(0, 50, 10)\ny = np.random.randint(0, 10, 10)\nax.scatter(x, y)\n\n# Add a line plot with random data\nz = np.random.randint(0, 10, 10)\nax.plot(z)\n\n# Add a shaded rectangle\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gray', alpha=0.5))\n\n# Add a legend\nax.legend(['Token Rarity', 'Length'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Create a bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.20]\nbars = ax.bar(categories, values, color='darkblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Sentiment Analysis')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Create a second subplot for the sentiment analysis\nax2 = fig.add_subplot(122)\nsentiments = ['Sentiment', 'Toxicity', 'News']\nsentiment_values = [-0.40, -0.13, -0.24]\nax2.bar(sentiments, sentiment_values, color='skyblue')\n\n# Add labels and title\nax2.set_xlabel('Sentiments')\nax2.set_ylabel('Values')\nax2.set_title('Sentiment Analysis')\n\n# Create a second subplot for the toxicity analysis\nax3 = fig.add_subplot(122)\ntoxicities = ['Unchanged Correct', 'Unfixed Mistake', 'New Correct', 'New Mistake']\ntoxicity_values = [-0.03, 0.05, 0.31, 0.17]\nax3.bar(toxicities, toxicity_values, color='lightgrey')\n\n# Add labels and title\nax3.set_xlabel('Toxicities')\nax3.set_ylabel('Values')\nax3.set_title('Toxicity Analysis')\n\n# Create a second subplot for the news analysis\nax4 = fig.add_subplot(122)\nnews = ['Unchanged Correct', 'Unfixed Mistake', 'New Correct', 'New Mistake']\nnews_values = [0.13, 0.12, 0.17, 0.17]\nax4.bar(news, news_values, color='pink')\n\n# Add labels and title\nax4.set_xlabel('News')\nax4.set_ylabel('Values')\nax4.set_title('News Analysis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Success Rate of Adversarial Circuits')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('# Successful adv. circuits')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['c1355', 'c1908', 'c2670', 'c3540'])\n\n# Set the y-ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60])\n\n# Set the y-limits\nax.set_ylim(0, 60)\n\n# Set the x-limits\nax.set_xlim(-1, 4)\n\n# Draw a rectangle for each year\nrects = [ax.bar(i, 50, color='blue') for i in range(4)]\n\n# Draw a horizontal line for each threshold\nax.axhline(y=0.5, color='r', linestyle='-')\nax.axhline(y=0.6, color='r', linestyle='-')\n\n# Draw a rectangle for each circuit\ncircuits = ['c1355', 'c1908', 'c2670', 'c3540']\nfor i, circuit in enumerate(circuits):\n    ax.text(i, 0.5, circuit, ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the graph\nax.set_title('Knowledge Increase by Subject Area')\n\n# Create a bar chart with the data\nax.bar(['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance'], [20, 30, 50, 40, 60, 70, 80], color='blue')\n\n# Create a second figure and axis for the second graph\nfig2, ax2 = plt.subplots(figsize=(10, 4))\n\n# Set the title of the graph\nax2.set_title('Number of Publications by Domain')\n\n# Create a bar chart with the data\nax2.bar(['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance'], [250, 200, 220, 150, 180, 120, 190], color='green')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the graph\nax.set_title('Technological Advancements')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Progress (%)')\n\n# Set the x-ticks\nax.set_xticks([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022])\n\n# Set the y-ticks\nax.set_yticks([0, 20, 40, 60, 80, 100, 120])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'orange', 'green'])\n\n# Set the color of the line\nax.plot([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022], [0, 20, 40, 60, 80, 100, 120, 120], 'o-')\n\n# Set the color of the bar chart\nax.bar([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022], [0, 20, 40, 60, 80, 100, 120, 120], color='blue')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2016, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2017, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2018, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2019, 0), 1, 120, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2020, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2021, 0), 1, 120, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2022, 0), 1, 120, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((2015,"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the graph\nax.set_title('Average Legal Crime Rates by Country')\n\n# Create a bar chart with the data\nax.bar(['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain'], [3.2, 2.9, 2.5, 2.7, 2.4, 2.6], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Student Performance in Schools')\nax.set_xlabel('Score')\nax.set_ylabel('Number of Students')\n\n# Create a bar chart for the first graph\nax.bar([40, 50, 60, 70, 80, 90, 100], [20, 30, 40, 50, 60, 70, 80], color='blue')\n\n# Create a second graph with a different color scheme\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Resource Allocation in Schools')\nax.set_xlabel('Resource')\nax.set_ylabel('Percentage')\n\n# Create a pie chart for the second graph\nax.pie([20, 10, 15, 10, 5, 5], labels=['Books', 'Staff', 'Extracurricular', 'Technology', 'Facilities', 'Sports'], colors=['blue', 'gray', 'silver', 'orange', 'green', 'purple'])\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the map\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the regions and their temperatures\nregions = ['Region 1', 'Region 2']\ntemperatures = [20, 25]\n\n# Create a scatter plot of the regions\nax.scatter(regions, temperatures, color='blue')\n\n# Add labels and title\nax.set_xlabel('Regions')\nax.set_ylabel('Temperature (\u00b0C)')\nax.set_title('Average Annual Temperature')\n\n# Create a figure and axis for the elevation distribution\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the elevations and their densities\nelevations = np.linspace(0, 2000, 100)\ndensities = np.sin(elevations / 100) * 1000 + 1000\n\n# Create a line plot of the elevations\nax.plot(elevations, densities, color='red')\n\n# Add labels and title\nax.set_xlabel('Elevation (m)')\nax.set_ylabel('Density (kg/m\u00b3)')\nax.set_title('Geographical Elevation Distribution')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nyears = ['2019', '2020', '2021', '2022']\ntotal_investment = [400, 350, 300, 250]\nproduct_types = ['Savings', 'CDs', 'Stocks', 'Bonds', 'ETFs', 'Mutual Funds']\npopularity = [200, 175, 150, 125, 100, 75]\nloan_amounts = [80, 70, 60, 50, 40, 30, 20, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the total investment over time\nax.plot(years, total_investment, color='orange')\nax.fill_between(years, total_investment, color='yellow')\n\n# Plot the popularity of financial products\nax.bar(product_types, popularity, color='skyblue')\n\n# Plot the loan amount distribution by region\nax.barh(loan_amounts, range(len(loan_amounts)), color='pink')\n\n# Set the title and labels\nax.set_title('Investment Growth Over Time')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Accounts (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Task Success Rate\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('AI Task Success Rates')\nax.set_xlabel('Task')\nax.set_ylabel('Success Rate (%)')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\n\n# Algorithm Efficiency Scores\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Algorithm Efficiency Scores')\nax.set_xlabel('Algorithm')\nax.set_ylabel('Efficiency (%)')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\n\n# Model Adaptability\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('AI Model Adaptability')\nax.set_xlabel('Model')\nax.set_ylabel('Adaptability Score (%)')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'g^-')\n\n# Conditions\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\n\n# Models\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Models')\nax.set_xlabel('Model')\nax.set_ylabel('Score (%)')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\n\n# Conditions and Models\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions and Models')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\n\n# Conditions, Models, and Task Success Rate\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, and Task Success Rate')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\n\n# Conditions, Models, Task Success Rate, and Algorithm Efficiency Scores\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, Task Success Rate, and Algorithm Efficiency Scores')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\n\n# Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, and Model Adaptability\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, and Model Adaptability')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'g^-')\n\n# Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, and Task Success Rate\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, and Task Success Rate')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'g^-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\n\n# Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, and Algorithm Efficiency Scores\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, and Algorithm Efficiency Scores')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'g^-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\n\n# Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, and Task Success Rate\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, and Task Success Rate')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'g^-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\n\n# Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, and Algorithm Efficiency Scores\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, and Algorithm Efficiency Scores')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'g^-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\n\n# Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, Algorithm Efficiency Scores, and Task Success Rate\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, Algorithm Efficiency Scores, and Task Success Rate')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'g^-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\n\n# Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, and Algorithm Efficiency Scores\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, and Algorithm Efficiency Scores')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'g^-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\n\n# Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, Algorithm Efficiency Scores, and Task Success Rate\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Conditions, Models, Task Success Rate, Algorithm Efficiency Scores, Model Adaptability, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, Algorithm Efficiency Scores, Task Success Rate, Algorithm Efficiency Scores, and Task Success Rate')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\nax.plot(['Dry Conditions', 'Wet Conditions'], [90, 85], 'go-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'bo-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], 'g^-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro-')\nax.plot(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [95, 90, 85, 80], 'bs-')\nax.plot(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 80, 75], 'ro"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the map\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Define the locations and their coordinates\nlocations = ['Urban', 'Highway']\nx = [20, 80]\ny = [50, 50]\n\n# Plot the locations on the map\nfor i in range(len(locations)):\n    ax.plot(x[i], y[i], 'bo')\n    ax.annotate(locations[i], (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Draw a line between the locations\nax.plot([x[0], x[1]], [y[0], y[1]], 'k-')\n\n# Set the limits of the axes\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\n\n# Set the title of the map\nax.set_title('Traffic Volume by Time of Day')\n\n# Add a color bar to indicate the time of day\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='hot'), ax=ax)\ncbar.set_label('Time of Day')\n\n# Display the map\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Define the data for the pie chart\narts = ['Literature', 'Visual Arts', 'Performing Arts', 'Music', 'Dance']\npercentages = [30, 25, 10, 15, 20]\n\n# Create a pie chart with the data\nwedges, texts, autotexts = ax.pie(percentages, labels=arts, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a bar chart\nax.bar([0.0, 0.1, 0.2, 0.3, 0.4, 0.5], [1000, 1500, 2000, 2500, 3000, 3500], color='blue')\nax.set_xlabel('Sale Probability')\nax.set_ylabel('Number of Sales')\n\n# Add a legend\nax.legend(['Known Sales', 'Unknown Sales'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Histogram of Stock Returns')\n\n# Create a histogram with random data\nax.hist([120, 130, 140, 150, 160], bins=10, color='green', alpha=0.7)\nax.hist([100, 110, 120, 130, 140], bins=10, color='red', alpha=0.7)\n\n# Set the x-axis label\nax.set_xlabel('Returns')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a bar chart with random data\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.bar([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a pie chart with random data\nax.pie([10, 20, 30, 40, 50], labels=['Tech Stocks', 'Energy Stocks'], colors=['orange', 'cyan'])\n\n# Create a line chart with random data\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.plot([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, "}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first graph\nfig, ax = plt.subplots(figsize=(8, 6))\nax.plot([0, 1, 2, 3, 4], [10, 9, 8, 7, 6], 'b-')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Energy Consumption (GWh)')\nax.set_title('Energy Consumption Over Time')\n\n# Create a scatter plot for the second graph\nfig, ax = plt.subplots(figsize=(8, 6))\nx = np.linspace(-4, 4, 100)\ny = np.sin(x)\nax.scatter(x, y, color='blue')\nax.set_xlabel('Relative Month')\nax.set_ylabel('Renewable Energy Ratio (%)')\nax.set_title('Renewable Energy Ratio Over Time')\n\n# Create a 3D plot for the third graph\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_surface(x, y, z, cmap='Blues')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Relative Month')\nax.set_zlabel('Renewable Energy Ratio (%)')\nax.set_title('Renewable Energy Ratio Over Time')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15, 35, 30, 20]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Plot the pie chart\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Create a scatter plot\nfig, ax = plt.subplots(figsize=(10, 5))\nx = np.array([1000, 1200, 1400, 1600, 1800, 2000])\ny = np.array([150, 200, 250, 300, 350, 400])\ncolors = np.random.randint(0, 100, len(x))\narea = np.pi * (np.random.rand(len(x)) * 10)**2  # 0 to 15 point radiuses\n\nplt.scatter(x, y, s=area, c=colors, alpha=0.5)\nplt.title('Document Count Over Historical Periods')\nplt.xlabel('Year')\nplt.ylabel('Number of Documents')\n\n# Add colored circles for each period\nperiods = ['Modern', 'Medieval', 'Renaissance', 'Ancient']\nyears = [2000, 1600, 1200, 1000]\ncounts = [350, 300, 250, 200]\nfor i in range(len(periods)):\n    circle = plt.Circle((years[i], counts[i]), 50, color='purple')\n    ax.add_artist(circle)\n    ax.text(years[i], counts[i], periods[i], fontsize=12, ha='center', va='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the scatter plot\nx = [2000, 2005, 2010, 2015, 2020]\ny = [9.25, 9.00, 8.75, 8.50, 8.25]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.scatter(x, y)\n\n# Set the title and labels\nax.set_title('Luxury Brand Popularity vs Price')\nax.set_xlabel('Average Price ($)')\nax.set_ylabel('Popularity Index')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Louis Vuitton', markerfacecolor='g', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Chanel', markerfacecolor='c', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Gucci', markerfacecolor='m', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Dior', markerfacecolor='y', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Prada', markerfacecolor='b', markersize=10)]\nax.legend(handles=legend_elements, loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first graph\naccuracy = [75.32, 77.11, 77.03, 76.86, 75.34, 74.52]\nyears = [2020, 2021, 2022, 2023, 2024, 2025]\n\n# Data for the second graph\nrobustness = [60.5, 59.3, 58.35, 55.95, 55.5, 55.1, 54.7, 54.3, 53.9, 53.5, 53.1, 52.7, 52.3, 51.9, 51.5, 51.1, 50.7, 50.3, 50.0, 49.6, 49.2, 48.8, 48.4, 48.0, 47.6, 47.2, 46.8, 46.4, 46.0, 45.6, 45.2, 44.8, 44.4, 44.0, 43.6, 43.2, 42.8, 42.4, 42.0, 41.6, 41.2, 40.8, 40.4, 40.0, 39.6, 39.2, 38.8, 38.4, 38.0, 37.6, 37.2, 36.8, 36.4, 36.0, 35.6, 35.2, 34.8, 34.4, 34.0, 33.6, 33.2, 32.8, 32.4, 32.0, 31.6, 31.2, 30.8, 30.4, 30.0, 29.6, 29.2, 28.8, 28.4, 28.0, 27.6, 27.2, 26.8, 26.4, 26.0, 25.6, 25.2, 24.8, 24.4, 24.0, 23.6, 23.2, 22.8, 22.4, 22.0, 21.6, 21.2, 20.8, 20.4, 20.0, 19.6, 19.2, 18.8, 18.4, 18.0, 17.6, 17.2, 16.8, 16.4, 16.0, 15.6, 15.2, 14.8, 14.4, 14.0, 13.6, 13.2, 12.8, 12.4, 12.0, 11.6, 11.2, 10.8, 10.4, 10.0, 9.6, 9.2, 8.8, 8.4, 8.0, 7.6, 7.2, 6.8, 6.4, 6.0, 5.6, 5.2, 4.8, 4.4, 4.0, 3.6, 3.2, 2.8, 2.4, 2.0, 1.6, 1.2, 0.8, 0.4, 0.0]\nyears_robustness = [2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(years, accuracy, 'ro-', label='Accuracy (%)')\nax.plot(years_robustness, robustness, 'go-', label='Robustness (%)')\n\n# Set the title and labels\nax.set_title('Machine Learning Model Performance Over Time')\nax.set_xlabel('Year')\nax.set_ylabel('Performance (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Trials')\n\n# Set the y-axis label\nax.set_ylabel('General Variance')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 30, 5))\n\n# Set the y-axis ticks\nax.set_yticks([0.05*i for i in range(21)])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot area\nax.set_facecolor('yellow')\n\n# Set the color of the background\nax.set_facecolor('green')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Hello World', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='purple')\n\n# Set the color of the legend\nax.legend(['Random', 'Sobol', 'HCube'], loc='upper left', shadow=True, fancybox=True)\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'b-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'g-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'r-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'y-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'm-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'c-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'k-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'w-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'x-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'o-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '^-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '<-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '>-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'p-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '*-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'h-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'H-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '+-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 's-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'D-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'd-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '|-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '_-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '1-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '2-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '3-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '4-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '8-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '9-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '0-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'p-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'h-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'H-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '+-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 's-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'D-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'd-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '|-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '_-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '1-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '2-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '3-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '4-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '8-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '9-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '0-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'p-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'h-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'H-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '+-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 's-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'D-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'd-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '|-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '_-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '1-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '2-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '3-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '4-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6], '8-')\n\n# Set the color of the plot\nax.plot([0, 1, 2, 3, 4, 5], [0."}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Set the title for the first subplot\naxs[0].set_title('Debater')\n# Add a colored rectangle to the first subplot\naxs[0].add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\n\n# Set the title for the second subplot\naxs[1].set_title('Correct Rating - Incorrect Rating')\n# Add a scatter plot to the second subplot\nx = np.random.rand(50)\ny = np.random.rand(50)\naxs[1].scatter(x, y)\n\n# Set the title for the third subplot\naxs[2].set_title('Judge Accuracy (%)')\n# Add a line graph to the third subplot\nx = np.linspace(-200, 200, 100)\ny = np.sin(x)\naxs[2].plot(x, y)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data for the pie chart\nsizes = [4.6, 10.6, 11.3, 13.2, 29.8, 30.5]\nlabels = ['Red', 'Blue', 'Green', 'Yellow', 'Purple', 'Cyan']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Matplotlib bakery: A donut')\n\n# Create a circle for the donut\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a rectangle for the ingredients\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rect)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the filling\nfilling = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='green')\nax.add_artist(filling)\n\n# Create a rectangle for the glaze\nglaze = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='red')\nax.add_artist(glaze)\n\n# Create a rectangle for the sprinkles\nsprinkles = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='purple')\nax.add_artist(sprinkles)\n\n# Create a rectangle for the butter\nbutter = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='brown')\nax.add_artist(butter)\n\n# Create a rectangle for the sugar\nsugar = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='yellow')\nax.add_artist(sugar)\n\n# Create a rectangle for the flour\nflour = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='orange')\nax.add_artist(flour)\n\n# Create a rectangle for the egg\negg = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='green')\nax.add_artist(egg)\n\n# Create a rectangle for the yeast\nyeast = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='brown')\nax.add_artist(yeast)\n\n# Create a rectangle for the milk\nmilk = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='pink')\nax.add_artist(milk)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='blue')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='purple')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='brown')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='yellow')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='orange')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='green')\nax.add_artist(dough)\n\n# Create a rectangle for the dough\ndough = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='red')\nax.add_artist(dough)\n\n# Create a rectangle for"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for each category\ncategories = ['Entertainment', 'Utilities', 'Transport', 'Food', 'Others']\nvalues = [16.7, 20.0, 37.5, 41.7, 10.0]\ncolors = ['#FFD700', '#90EE90', '#ADD8E6', '#FF6347', '#FFA07A']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a title\nax.set_title('Expenses - Company vs. Project')\n\n# Add a legend\nax.legend(wedges, categories, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlora_data = [31.4, 15.7, 19.9, 33.0]\nlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\n\n# Data for QLoRA\nqlora_data = [54.8, 10.5, 6.3, 28.4]\nqlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plotting LoRA\naxs[0].pie(lora_data, labels=lora_labels, autopct='%1.1f%%', startangle=90)\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(qlora_data, labels=qlora_labels, autopct='%1.1f%%', startangle=90)\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Full Finetuning')\n\n# Create a pie chart with the data\nax.pie([12.6, 15.9], labels=['Model', 'Optimizer'], colors=['orange', 'grey'])\n\n# Create a second pie chart with the data\nax.pie([4.6, 5.3], labels=['Gradient+Activations+Other', 'Unused'], colors=['green', 'yellow'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the pie chart\ndata = [25, 10, 10, 20, 35, 10]\nlabels = ['Fruits', 'Dairy', 'Grains', 'Vegetables', 'Proteins', 'Nuts']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add title\nax.set_title('Nutritional Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the chart\nax.set_title('Market Share by Sector - External vs. Internal')\n\n# Define the data for the chart\ndata = [31.2, 28.6, 27.5, 35.7, 37.5]\nlabels = ['E-commerce', 'Education', 'Entertainment', 'Technology', 'Healthcare']\n\n# Create a pie chart with the data\nwedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the colors of the wedges\ncolors = ['#FFD700', '#FFA500', '#4169E1', '#00FF00', '#008000']\nfor wedge, color in zip(wedges, colors):\n    wedge.set_facecolor(color)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a pie chart with the data\nax.pie([45, 30, 15], labels=[\"Dogs\", \"Cats\", \"Birds\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Pet Ownership')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [11, 29, 40, 20]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Create a pie chart with a color map\ncmap = plt.get_cmap('tab20')\ncolors = cmap(range(10))\nax.pie([18, 12, 28], colors=colors, startangle=90)\n\n# Add a title\nax.set_title('Countries in Europe')\n\n# Add labels\nlabels = ['France', 'Germany', 'Italy']\nax.legend(labels, loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [26.2, 13.4, 21.4, 19.0, 14.3, 10.7]\nlabels = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5', 'Category 6']\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#FFA07A', '#FFC0CB', '#FF69B4']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add title\nax.set_title('Slice of a pie chart')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [12.4, 35.4, 17.2, 24.7, 10.3]\ncolors = ['blue', 'green', 'skyblue', 'orange', 'pink']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 15, 10, 5]\ncolors = ['#ADD8E6', '#87CEEB', '#0000FF', '#000000']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Social Media Usage')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the pie chart\nsizes = [34.7, 12.2, 25.4, 20.3]\nlabels = ['ACL', 'COLING', 'EACL', 'NAACL', 'EMNLP']\ncolors = ['#FFD700', '#800080', '#CD5C5C', '#4682B4', '#008000']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that it appears as a circle\nax.axis('equal')\n\n# Add a title to the pie chart\nax.set_title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a pie chart with the data\nax.pie([25, 37.5, 15, 12.5, 25, 30], labels=[\"Coal\", \"Hydro\", \"Wind\", \"Solar\", \"Other\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Energy Consumption - National vs. Project')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Set the title for each subplot\naxs[0, 0].set_title('English')\naxs[0, 1].set_title('French')\naxs[1, 0].set_title('German')\naxs[1, 1].set_title('Chinese')\n\n# Create a scatter plot for each subplot\naxs[0, 0].scatter(np.random.rand(10), np.random.rand(10), color='red')\naxs[0, 1].scatter(np.random.rand(10), np.random.rand(10), color='blue')\naxs[1, 0].scatter(np.random.rand(10), np.random.rand(10), color='green')\naxs[1, 1].scatter(np.random.rand(10), np.random.rand(10), color='black')\n\n# Add a legend to the figure\nfig.legend(['Out-group bias (Collectivism)', 'In-group bias (Individualism)'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-5, 5)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(-5, 6, 1))\n\n# Set the x-axis labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'])\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time (in hours)')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((2, -4), 3, 2, color='red')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((5, -3), 1, color='blue')\nax.add_patch(circle)\n\n# Add a line to the plot\nline = plt.Line2D([1, 4], [-2, -5], color='green')\nax.add_line(line)\n\n# Add a text box to the plot\ntext_box = plt.TextBox((0.1, 0.9), \"Out-group bias (Collectivism)\")\nax.add_artist(text_box)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('SINDy Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('X1')\n\n# Set the y-axis label\nax.set_ylabel('X2')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add a grid to the plot\nax.grid(True)\n\n# Add a legend to the plot\nax.legend()\n\n# Add a scatter plot to the plot\nax.scatter(np.random.rand(50), np.random.rand(50), c='r', label='True Field')\n\n# Add a scatter plot to the plot\nax.scatter(np.random.rand(50), np.random.rand(50), c='b', label='Train Sample')\n\n# Add a scatter plot to the plot\nax.scatter(np.random.rand(50), np.random.rand(50), c='g', label='Test Sample')\n\n# Add a scatter plot to the plot\nax.scatter(np.random.rand(50), np.random.rand(50), c='y', label='SINDy Train')\n\n# Add a scatter plot to the plot\nax.scatter(np.random.rand(50), np.random.rand(50), c='c', label='SINDy Test')\n\n# Add a line plot to the plot\nax.plot([0, 1], [0, 1], 'k--', label='True Field')\n\n# Add a line plot to the plot\nax.plot([0, 1], [0, 0.5], 'b-', label='Train Sample')\n\n# Add a line plot to the plot\nax.plot([0, 1], [0.5, 1], 'g-', label='Test Sample')\n\n# Add a line plot to the plot\nax.plot([0, 1], [0, 0.25], 'y-', label='SINDy Train')\n\n# Add a line plot to the plot\nax.plot([0, 1], [0.25, 0.75], 'c-', label='SINDy Test')\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, fill=False, edgecolor='red'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, fill=False, edgecolor='blue'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.2, 0.2, fill=False, edgecolor='green'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.1, 0.1, fill=False, edgecolor='yellow'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.05, 0.05, fill=False, edgecolor='cyan'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.025, 0.025, fill=False, edgecolor='magenta'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.0125, 0.0125, fill=False, edgecolor='black'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.00625, 0.00625, fill=False, edgecolor='white'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.9, 0.9, fill=False, edgecolor='gray'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.8, 0.8, fill=False, edgecolor='silver'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.7, 0.7, fill=False, edgecolor='gold'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.6, 0.6, fill=False, edgecolor='chartreuse'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, fill=False, edgecolor='orange'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.4, 0.4, fill=False, edgecolor='pink'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.3, 0.3, fill=False, edgecolor='purple'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, fill=False, edgecolor='brown'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, fill=False, edgecolor='navy'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.9, 0.9, fill=False, edgecolor='maroon'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.8, 0.8, fill=False, edgecolor='olive'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.7, 0.7, fill=False, edgecolor='silver'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.6, 0.6, fill=False, edgecolor='gold'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, fill=False, edgecolor='chartreuse'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.4, 0.4, fill=False, edgecolor='orange'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.3, 0.3, fill=False, edgecolor='pink'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, fill=False, edgecolor='purple'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, fill=False, edgecolor='brown'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.9, 0.9, fill=False, edgecolor='navy'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.8, 0.8, fill=False, edgecolor='maroon'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.7, 0.7, fill=False, edgecolor='olive'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.6, 0.6, fill=False, edgecolor='silver'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, fill=False, edgecolor='gold'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.4, 0.4, fill=False, edgecolor='chartreuse'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.3, 0.3, fill=False, edgecolor='orange'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, fill=False, edgecolor='pink'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, fill=False, edgecolor='purple'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.9, 0.9, fill=False, edgecolor='brown'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.8, 0.8, fill=False, edgecolor='navy'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.7, 0.7, fill=False, edgecolor='maroon'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.6, 0.6, fill=False, edgecolor='olive'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, fill=False, edgecolor='silver'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.4, 0.4, fill=False, edgecolor='gold'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.3, 0.3, fill=False, edgecolor='chartreuse'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, fill=False, edgecolor='orange'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, fill=False, edgecolor='pink'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.9, 0.9, fill=False, edgecolor='purple'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.8, 0.8, fill=False, edgecolor='brown'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.7, 0.7, fill=False, edgecolor='navy'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.6, 0.6, fill=False, edgecolor='maroon'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, fill=False, edgecolor='olive'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.4, 0.4, fill=False, edgecolor='silver'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.3, 0.3, fill=False, edgecolor='gold'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, fill=False, edgecolor='chartreuse'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, fill=False, edgecolor='orange'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.9, 0.9, fill=False, edgecolor='pink'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.8, 0.8, fill=False, edgecolor='purple'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.7, 0.7, fill=False, edgecolor='brown'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.6, 0.6, fill=False, edgecolor='navy'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, fill=False, edgecolor='maroon'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.4, 0.4, fill=False, edgecolor='olive'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.3, 0.3, fill=False, edgecolor='silver'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, fill=False, edgecolor='gold'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, fill=False, edgecolor='chartreuse'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.9, 0.9, fill=False, edgecolor='orange'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.8, 0.8, fill=False, edgecolor='pink'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.7, 0.7, fill=False, edgecolor='purple'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.6, 0.6, fill=False, edgecolor='brown'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, fill=False, edgecolor='navy'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.4, 0.4, fill=False, edgecolor='maroon'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.3, 0.3, fill=False, edgecolor='olive'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, fill=False, edgecolor='silver'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, fill=False, edgecolor='gold'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.9, 0.9, fill=False, edgecolor='chartreuse'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.8, 0.8, fill=False, edgecolor='orange'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.7, 0.7, fill=False, edgecolor='pink'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.6, 0.6, fill=False, edgecolor='purple'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, fill=False, edgecolor='brown'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.4, 0.4, fill=False, edgecolor='navy'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.3, 0.3, fill=False, edgecolor='maroon'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, fill=False, edgecolor='olive'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.1, 0.1, fill=False, edgecolor='silver'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.9, 0.9, fill=False, edgecolor='gold'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.8, 0.8, fill=False, edgecolor='chartreuse'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.7, 0.7, fill=False, edgecolor='orange'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.6, 0.6, fill=False, edgecolor='pink'))\n\n# Add a rectangle to the plot\nax.add_patch(plt.Rectangle((0"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field\nU = -X**2 - Y**2\nV = X**2 + Y**2\n\n# Plot the vector field\nQ = ax.quiver(X, Y, U, V, color='b', scale=20)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(Q)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Set the x and y limits\nax.set_xlim(-2.0, 2.0)\nax.set_ylim(-2.0, 2.0)\n\n# Set the x and y labels\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Create a grid\nax.grid(True)\n\n# Create a scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='blue')\n\n# Create a line plot\nax.plot(np.linspace(-2.0, 2.0, 100), np.sin(np.linspace(-2.0, 2.0, 100)), color='red')\n\n# Create a bar chart\nax.bar(np.linspace(-2.0, 2.0, 10), np.random.rand(10), color='green')\n\n# Create a histogram\nax.hist(np.random.rand(100), bins=10, color='yellow')\n\n# Create a pie chart\nax.pie([1, 2, 3], colors=['cyan', 'magenta', 'yellow'], startangle=90)\n\n# Create a contour plot\nX, Y = np.meshgrid(np.linspace(-2.0, 2.0, 100), np.linspace(-2.0, 2.0, 100))\nZ = np.sin(X) + np.cos(Y)\nCS = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Create a quiver plot\nU = np.cos(X)\nV = np.sin(Y)\nax.quiver(X, Y, U, V, color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('TextVQA')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Add text to the circle\nax.text(0.5, 0.5, 'TextVQA', horizontalalignment='center', verticalalignment='center', fontsize=12, color='white')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('XNLI (speed-up ratio: 4)')\n\n# Define the colors for the plots\ncolors = ['pink', 'green', 'blue', 'red']\n\n# Define the labels for the plots\nlabels = ['fr', 'es', 'en', 'el', 'de', 'bg', 'sw', 'ar', 'ur', 'th', 'ru', 'hi', 'vi', 'zh']\n\n# Define the data for the plots\ndata = [20, 40, 60, 80]\n\n# Create a pie chart with the data\nwedges, texts, autotexts = ax.pie(data, startangle=90, colors=colors, autopct='%1.1f%%', textprops=dict(color=\"w\"))\n\n# Add the labels to the plot\nfor i, label in enumerate(labels):\n    ax.text(0.5, 0.5, label, transform=ax.transAxes, fontsize=12, ha='center', va='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\nax.add_artist(rectangle)\n\n# Draw a polygon\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.3], [0.7, 0.1]], color='red')\nax.add_artist(polygon)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('My Diagram')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('My Plot', color='white')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label', color='white')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick labels\nax.set_xticklabels(['Label 1', 'Label 2', 'Label 3'], color='white')\nax.set_yticklabels(['Label 4', 'Label 5', 'Label 6'], color='white')\n\n# Set the tick colors\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, bottom=True, top=False, left=True, right=False)\n\n# Set the tick mark labels\nax.set_xticks([0.1, 0.2, 0.3])\nax.set_yticks([0.4, 0.5, 0.6])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick mark colors\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the tick mark widths\nax.spines['bottom'].set_linewidth(2)\nax.spines['top'].set_linewidth(2)\nax.spines['right'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n# Set the tick mark styles\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the tick mark positions\nax.spines['bottom'].set_position('zero')\nax.spines['top'].set_position('zero')\nax.spines['right'].set_position('zero')\nax.spines['left'].set_position('zero')\n\n# Set the tick mark limits\nax.set_xlim(-0.1, 0.7)\nax.set_ylim(-0.1, 0.7)\n\n# Set the tick mark ticks\nax.set_xticks(np.arange(0, 0.8, 0.1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the tick mark labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3',"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('My Artistic Journey')\n\n# Define the categories and their corresponding colors\ncategories = ['novel', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event']\ncolors = ['blue', 'green', 'red', 'purple', 'orange', 'cyan', 'magenta']\n\n# Create a pie chart with the categories and colors\nwedges, texts, autotexts = ax.pie(np.ones(len(categories)), labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a legend\nax.legend(wedges, categories,\n          title=\"Categories\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Roleplay')\n\n# Define the colors for each subject\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Define the subjects\nsubjects = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'Humanities', 'STEM']\n\n# Define the number of students\nnum_students = 10\n\n# Define the scores\nscores = [np.random.randint(50, 100) for _ in range(num_students)]\n\n# Plot the scores\nfor i, score in enumerate(scores):\n    ax.plot([i], [score], 'o', color=colors[i % len(colors)])\n\n# Draw a circle around the plot\ncircle = plt.Circle((0, 0), 1, color='black', fill=False)\nax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(-1, len(subjects))\nax.set_ylim(-1, 100)\n\n# Set the labels of the plot\nax.set_xticks(range(len(subjects)))\nax.set_xticklabels(subjects)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Draw a circle around the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle around the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Draw a triangle around the plot\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='green')\nax.add_artist(triangle)\n\n# Draw a star around the plot\nstar = plt.Polygon([[0.5, 0.9], [0.4, 0.8], [0.6, 0.8], [0.5, 0.6], [0.3, 0.8], [0.4, 0.7], [0.6, 0.7]], color='red')\nax.add_artist(star)\n\n# Draw a pentagon around the plot\npentagon = plt.Polygon([[0.2, 0.5], [0.4, 0.4], [0.6, 0.4], [0.5, 0.2], [0.5, 0.6]], color='orange')\nax.add_artist(pentagon)\n\n# Draw a hexagon around the plot\nhexagon = plt.Polygon([[0.7, 0.5], [0.8, 0.4], [0.8, 0.6], [0.7, 0.7], [0.5, 0.7], [0.5, 0.5]], color='purple')\nax.add_artist(hexagon)\n\n# Draw a heptagon around the plot\nheptagon = plt.Polygon([[0.3, 0.3], [0.4, 0.2], [0.6, 0.2], [0.7, 0.3], [0.6, 0.4], [0.4, 0.4], [0.5, 0.2]], color='pink')\nax.add_artist(heptagon)\n\n# Draw a octagon around the plot\noctagon = plt.Polygon([[0.2, 0.7], [0.3, 0.6], [0.5, 0.6], [0.6, 0.7], [0.6, 0.9], [0.4, 0.9], [0.4, 0.7], [0.3, 0.6]], color='cyan')\nax.add_artist(octagon)\n\n# Draw a nonagon around the plot\nnonagon = plt.Polygon([[0.7, 0.3], [0.8, 0.2], [0.8, 0.4], [0.7, 0.5], [0.6, 0.5], [0.6, 0.3], [0.5, 0.4], [0.5, 0.2], [0.4, 0.3]], color='magenta')\nax.add_artist(nonagon)\n\n# Draw a decagon around the plot\ndecagon = plt.Polygon([[0.3, 0.5], [0.4, 0.4], [0.6, 0.4], [0.7, 0.5], [0.6, 0.6], [0.4, 0.6], [0.4, 0.4], [0.3, 0.5], [0.4, 0.6], [0.6, 0.6]], color='yellow')\nax.add_artist(decagon)\n\n# Draw a dodecagon around the plot\ndodecagon = plt.Polygon([[0.2, 0.7], [0.3, 0.6], [0.5, 0.6], [0.6, 0.7], [0.6, 0.9], [0.4, 0.9], [0.4, 0.7], [0.3, 0.6], [0.4, 0.7], [0.6, 0.7], [0.6, 0.9], [0.4, 0.9]], color='brown')\nax.add_artist(dodecagon)\n\n# Draw a trapezoid around the plot\ntrapezoid = plt.Polygon([[0.3, 0.3], [0.4, 0.2], [0.6, 0.2], [0.7, 0.3]], color='grey')\nax.add_artist(trapezoid)\n\n# Draw a parallelogram around the plot\nparallelogram = plt.Polygon([[0.2, 0.5], [0.4, 0.4], [0.6, 0.4], [0.5, 0.2]], color='silver')\nax.add_artist(parallelogram)\n\n# Draw a rhombus around the plot\nrhombus = plt.Polygon([[0.5, 0.9], [0.4, 0.8], [0.6, 0.8], [0.5, 0.6]], color='gold')\nax.add_artist(rhombus)\n\n# Draw a kite around the plot\nkite = plt.Polygon([[0.3, 0.7], [0.4, 0.6], [0.6, 0.6], [0.5, 0.4], [0.5, 0.8], [0.4, 0.8], [0.4, 0.6], [0.3, 0.7]], color='lime')\nax.add_artist(kite)\n\n# Draw a ellipse around the plot\nellipse = plt.Ellipse((0.5, 0.5), 0.4, 0.2, color='navy')\nax.add_artist(ellipse)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='maroon', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='olive', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='gold', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lime', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='navy', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='maroon', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='olive', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='gold', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lime', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='navy', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='maroon', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='olive', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='gold', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lime', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='navy', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='maroon', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='olive', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='gold', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lime', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='navy', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='maroon', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='olive', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='gold', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lime', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='navy', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='maroon', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='olive', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='gold', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lime', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='navy', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='maroon', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='olive', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='gold', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lime', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='navy', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='maroon', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='olive', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver', edgecolor='black', linewidth=1, fill=False)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with rounded corners around the plot\nrounded_rectangle = plt.Rectangle((0."}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Create a circle for the world map\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a rectangle for the Europe region\nrectangle_europe = plt.Rectangle((0.2, 0.6), 0.1, 0.1, color='orange')\nax.add_artist(rectangle_europe)\n\n# Create a rectangle for the China region\nrectangle_china = plt.Rectangle((0.3, 0.4), 0.1, 0.1, color='blue')\nax.add_artist(rectangle_china)\n\n# Create a rectangle for the India region\nrectangle_india = plt.Rectangle((0.4, 0.3), 0.1, 0.1, color='green')\nax.add_artist(rectangle_india)\n\n# Create a rectangle for the Brazil region\nrectangle_brazil = plt.Rectangle((0.5, 0.2), 0.1, 0.1, color='red')\nax.add_artist(rectangle_brazil)\n\n# Create a rectangle for the USA region\nrectangle_usa = plt.Rectangle((0.6, 0.1), 0.1, 0.1, color='yellow')\nax.add_artist(rectangle_usa)\n\n# Add labels to the rectangles\nax.text(0.25, 0.65, 'Apple', fontsize=12, ha='center', va='center', color='white')\nax.text(0.35, 0.45, 'Samsung', fontsize=12, ha='center', va='center', color='white')\nax.text(0.45, 0.35, 'Huawei', fontsize=12, ha='center', va='center', color='white')\nax.text(0.55, 0.25, 'Europe', fontsize=12, ha='center', va='center', color='white')\nax.text(0.65, 0.15, 'China', fontsize=12, ha='center', va='center', color='white')\nax.text(0.75, 0.05, 'India', fontsize=12, ha='center', va='center', color='white')\nax.text(0.85, 0.05, 'Brazil', fontsize=12, ha='center', va='center', color='white')\nax.text(0.95, 0.15, 'USA', fontsize=12, ha='center', va='center', color='white')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Add text to the circle\nax.text(0.5, 0.5, 'Extrusion', horizontalalignment='center', verticalalignment='center', fontsize=20, color='white')\n\n# Add a rectangle patch\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='red')\nax.add_patch(rect)\n\n# Add text to the rectangle\nax.text(0.5, 0.5, 'Blow Molding', horizontalalignment='center', verticalalignment='center', fontsize=20, color='white')\n\n# Add a triangle patch\ntriangle = plt.Polygon([[0.2, 0.2], [0.6, 0.2], [0.4, 0.6]], color='green')\nax.add_patch(triangle)\n\n# Add text to the triangle\nax.text(0.5, 0.5, 'Injection Molding', horizontalalignment='center', verticalalignment='center', fontsize=20, color='white')\n\n# Add a pentagon patch\npentagon = plt.Polygon([[0.2, 0.7], [0.4, 0.9], [0.6, 0.9], [0.8, 0.7], [0.5, 0.5]], color='blue')\nax.add_patch(pentagon)\n\n# Add text to the pentagon\nax.text(0.5, 0.5, 'Compression', horizontalalignment='center', verticalalignment='center', fontsize=20, color='white')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Create a circle for the park map\ncircle = plt.Circle((0.5, 0.5), 0.4, color='orange')\nax.add_artist(circle)\n\n# Add labels for each section\nlabels = ['Food Quality', 'Shows', 'Staff', 'Family Rides', 'Thrill Rides', 'Cleanliness', 'Wait Times', 'Ticket Price', 'Souvenirs', 'Parking']\nsections = [0.2, 0.3, 0.1, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lavender', 'purple', 'orange', 'pink', 'brown', 'grey']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sections, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a legend\nax.legend(wedges, labels, title=\"Sections\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Fashion Trends', color='white')\n\n# Set the labels for the categories\ncategories = ['Chanel', 'Dior', 'Gucci']\nax.set_xticks([1, 2, 3])\nax.set_xticklabels(categories, color='yellow')\n\n# Set the labels for the subcategories\nsubcategories = ['Creativity', 'Versatility', 'Longevity', 'Projection', 'Value', 'Sillage', 'Popularity', 'Packaging']\nax.set_yticks([1, 2, 3, 4, 5, 6, 7, 8])\nax.set_yticklabels(subcategories, color='white')\n\n# Set the colors for the subcategories\ncolors = ['yellow', 'lightblue', 'green', 'orange', 'cyan', 'magenta', 'gray', 'brown']\n\n# Set the sizes for the subcategories\nsizes = [10, 20, 30, 40, 50, 60, 70, 80]\n\n# Create a pie chart\nax.pie(sizes, colors=colors, startangle=90)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('POPE')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red')\nax.add_patch(rectangle)\n\n# Create a polygon patch\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.9], [0.7, 0.1]], color='green')\nax.add_patch(polygon)\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='purple')\n\n# Create a bar chart\nheights = [10, 20, 30, 40, 50]\nbars = ax.bar(range(len(heights)), heights, color='orange')\n\n# Create a pie chart\nsizes = [10, 20, 30, 40, 50]\nax.pie(sizes, colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\n\n# Create a histogram\ndata = np.random.randn(1000)\nax.hist(data, bins=30, color='brown')\n\n# Create a heatmap\nheatmap_data = np.random.rand(10, 10)\nax.imshow(heatmap_data, cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nCS = ax.contourf(X, Y, Z, locator=plt.LogLocator(), cmap='coolwarm')\n\n# Create a streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot(X, Y, U, V, color='grey')\n\n# Create a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.plot(theta, r, color='pink')\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax = fig.add_subplot(111, projection='3d')\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='spring')\n\n# Create a timeline\nevents = ['TinyLaMA', 'StableLM', 'Phi-2']\nax.eventplot(events, lineoffsets=np.arange(len(events)), linelengths=0.5, colors='blue')\n\n# Create a word cloud\nfrom wordcloud import WordCloud\ntext = \"This is a sample text for creating a word cloud.\"\nwordcloud = WordCloud(width=800, height=400).generate(text)\nax.imshow(wordcloud, interpolation='bilinear')\n\n# Create a sunburst chart\nfrom sunburst import sunburst\ndata = {'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50}\nsunburst(data, ax=ax)\n\n# Create a radar chart\ncategories = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\nvalues = [10, 20, 30, 40, 50]\nax.plot(categories, values, color='purple')\n\n# Create a bubble chart\nx = np.random.rand(10)\ny = np.random.rand(10)\nsizes = np.random.rand(10) * 1000\nax.scatter(x, y, s=sizes, alpha=0.5)\n\n# Create a box plot\ndata = [np.random.randn(100), np.random.randn(100), np.random.randn(100)]\nax.boxplot(data, vert=False, patch_artist=True)\n\n# Create a violin plot\nax.violinplot(data, showmeans=True)\n\n# Create a heatmap with a colorbar\nheatmap_data = np.random.rand(10, 10)\ncax = ax.matshow(heatmap_data, cmap='hot', fignum=None)\nfig.colorbar(cax)\n\n# Create a scatter plot with a colorbar\nx = np.random.rand(100)\ny = np.random.rand(100)\nc = np.random.rand(100)\nsc = ax.scatter(x, y, c=c, cmap='coolwarm')\nfig.colorbar(sc)\n\n# Create a scatter plot with a colorbar and a legend\nx = np.random.rand(100)\ny = np.random.rand(100)\nc = np.random.rand(100)\nsc = ax.scatter(x, y, c=c, cmap='coolwarm')\nfig.colorbar(sc)\nlegend = ax.legend(*sc.legend_elements(), loc=\"upper left\", title=\"Classes\")\n\n# Create a scatter plot with a colorbar and a legend and a title\nx = np.random.rand(100)\ny = np.random.rand(100)\nc = np.random.rand(100)\nsc = ax.scatter(x, y, c=c, cmap='coolwarm')\nfig.colorbar(sc)\nlegend = ax.legend(*sc.legend_elements(), loc=\"upper left\", title=\"Classes\")\nax.set_title('Scatter Plot with Colorbar and Legend')\n\n# Create a scatter plot with a colorbar and a legend and a title and a subtitle\nx = np.random.rand(100)\ny = np.random.rand(100)\nc = np.random.rand(100)\nsc = ax.scatter(x, y, c=c, cmap='coolwarm')\nfig.colorbar(sc)\nlegend = ax.legend(*sc.legend_elements(), loc=\"upper left\", title=\"Classes\")\nax.set_title('Scatter Plot with Colorbar and Legend')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Create a scatter plot with a colorbar and a legend and a title and a subtitle and a caption\nx = np.random.rand(100)\ny = np.random.rand(100)\nc = np.random.rand(100)\nsc = ax.scatter(x, y, c=c, cmap='coolwarm')\nfig.colorbar(sc)\nlegend = ax.legend(*sc.legend_elements(), loc=\"upper left\", title=\"Classes\")\nax.set_title('Scatter Plot with Colorbar and Legend')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.text(0.5, 0.5, 'This is a caption.', transform=ax.transAxes, ha='center', va='center')\n\n# Create a scatter plot with a colorbar and a legend and a title and a subtitle and a caption and a footer\nx = np.random.rand(100)\ny = np.random.rand(100)\nc = np.random.rand(100)\nsc = ax.scatter(x, y, c=c, cmap='coolwarm')\nfig.colorbar(sc)\nlegend = ax.legend(*sc.legend_elements(), loc=\"upper left\", title=\"Classes\")\nax.set_title('Scatter Plot with Colorbar and Legend')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.text(0.5, 0.5, 'This is a caption.', transform=ax.transAxes, ha='center', va='center')\nax.text(0.5, 0.05, 'This is a footer.', transform=ax.transAxes, ha='center', va='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 3, figsize=(18, 6))\n\n# Set the title of the figure\nfig.suptitle('Perfume Brand Comparison')\n\n# Set the title of each subplot\naxs[0, 0].set_title('Creativity')\naxs[0, 1].set_title('Creativity')\naxs[0, 2].set_title('Creativity')\naxs[1, 0].set_title('Creativity')\naxs[1, 1].set_title('Creativity')\naxs[1, 2].set_title('Creativity')\naxs[2, 0].set_title('Creativity')\naxs[2, 1].set_title('Creativity')\naxs[2, 2].set_title('Creativity')\n\n# Create a color map for the first subplot\ncmap = plt.get_cmap('Blues')\n\n# Create a color map for the second subplot\ncmap2 = plt.get_cmap('Greens')\n\n# Create a color map for the third subplot\ncmap3 = plt.get_cmap('Reds')\n\n# Create a color map for the fourth subplot\ncmap4 = plt.get_cmap('Purples')\n\n# Create a color map for the fifth subplot\ncmap5 = plt.get_cmap('Oranges')\n\n# Create a color map for the sixth subplot\ncmap6 = plt.get_cmap('Greys')\n\n# Create a color map for the seventh subplot\ncmap7 = plt.get_cmap('Greens')\n\n# Create a color map for the eighth subplot\ncmap8 = plt.get_cmap('Blues')\n\n# Create a color map for the ninth subplot\ncmap9 = plt.get_cmap('Greens')\n\n# Create a color map for the tenth subplot\ncmap10 = plt.get_cmap('Blues')\n\n# Create a color map for the eleventh subplot\ncmap11 = plt.get_cmap('Greens')\n\n# Create a color map for the twelfth subplot\ncmap12 = plt.get_cmap('Blues')\n\n# Create a color map for the thirteenth subplot\ncmap13 = plt.get_cmap('Greens')\n\n# Create a color map for the fourteenth subplot\ncmap14 = plt.get_cmap('Blues')\n\n# Create a color map for the fifteenth subplot\ncmap15 = plt.get_cmap('Greens')\n\n# Create a color map for the sixteenth subplot\ncmap16 = plt.get_cmap('Blues')\n\n# Create a color map for the seventeenth subplot\ncmap17 = plt.get_cmap('Greens')\n\n# Create a color map for the eighteenth subplot\ncmap18 = plt.get_cmap('Blues')\n\n# Create a color map for the nineteenth subplot\ncmap19 = plt.get_cmap('Greens')\n\n# Create a color map for the twentieth subplot\ncmap20 = plt.get_cmap('Blues')\n\n# Create a color map for the twenty-first subplot\ncmap21 = plt.get_cmap('Greens')\n\n# Create a color map for the twenty-second subplot\ncmap22 = plt.get_cmap('Blues')\n\n# Create a color map for the twenty-third subplot\ncmap23 = plt.get_cmap('Greens')\n\n# Create a color map for the twenty-fourth subplot\ncmap24 = plt.get_cmap('Blues')\n\n# Create a color map for the twenty-fifth subplot\ncmap25 = plt.get_cmap('Greens')\n\n# Create a color map for the twenty-sixth subplot\ncmap26 = plt.get_cmap('Blues')\n\n# Create a color map for the twenty-seventh subplot\ncmap27 = plt.get_cmap('Greens')\n\n# Create a color map for the twenty-eighth subplot\ncmap28 = plt.get_cmap('Blues')\n\n# Create a color map for the twenty-ninth subplot\ncmap29 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth subplot\ncmap30 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-first subplot\ncmap31 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-second subplot\ncmap32 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-third subplot\ncmap33 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-fourth subplot\ncmap34 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-fifth subplot\ncmap35 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-sixth subplot\ncmap36 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-seventh subplot\ncmap37 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-eighth subplot\ncmap38 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-ninth subplot\ncmap39 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-tenth subplot\ncmap40 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-eleventh subplot\ncmap41 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-twelfth subplot\ncmap42 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirteenth subplot\ncmap43 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-fourteenth subplot\ncmap44 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-fifteenth subplot\ncmap45 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-sixteenth subplot\ncmap46 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-seventeenth subplot\ncmap47 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-eighteenth subplot\ncmap48 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-nineteenth subplot\ncmap49 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-twentieth subplot\ncmap50 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-twenty-first subplot\ncmap51 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-twenty-second subplot\ncmap52 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-twenty-third subplot\ncmap53 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-twenty-fourth subplot\ncmap54 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-twenty-fifth subplot\ncmap55 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-twenty-sixth subplot\ncmap56 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-twenty-seventh subplot\ncmap57 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-twenty-eighth subplot\ncmap58 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-twenty-ninth subplot\ncmap59 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth subplot\ncmap60 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-first subplot\ncmap61 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-second subplot\ncmap62 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-third subplot\ncmap63 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-fourth subplot\ncmap64 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-fifth subplot\ncmap65 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-sixth subplot\ncmap66 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-seventh subplot\ncmap67 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-eighth subplot\ncmap68 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-ninth subplot\ncmap69 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-tenth subplot\ncmap70 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-eleventh subplot\ncmap71 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-twelfth subplot\ncmap72 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirteenth subplot\ncmap73 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-fourteenth subplot\ncmap74 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-fifteenth subplot\ncmap75 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-sixteenth subplot\ncmap76 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-seventeenth subplot\ncmap77 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-eighteenth subplot\ncmap78 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-nineteenth subplot\ncmap79 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-twentieth subplot\ncmap80 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-twenty-first subplot\ncmap81 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-twenty-second subplot\ncmap82 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-twenty-third subplot\ncmap83 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-twenty-fourth subplot\ncmap84 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-twenty-fifth subplot\ncmap85 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-twenty-sixth subplot\ncmap86 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-twenty-seventh subplot\ncmap87 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-twenty-eighth subplot\ncmap88 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-twenty-ninth subplot\ncmap89 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth subplot\ncmap90 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-first subplot\ncmap91 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-second subplot\ncmap92 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-third subplot\ncmap93 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-fourth subplot\ncmap94 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-fifth subplot\ncmap95 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-sixth subplot\ncmap96 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-seventh subplot\ncmap97 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-eighth subplot\ncmap98 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-ninth subplot\ncmap99 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-tenth subplot\ncmap100 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-eleventh subplot\ncmap101 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twelfth subplot\ncmap102 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-thirteenth subplot\ncmap103 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-fourteenth subplot\ncmap104 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-fifteenth subplot\ncmap105 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-sixteenth subplot\ncmap106 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-seventeenth subplot\ncmap107 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-eighteenth subplot\ncmap108 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-nineteenth subplot\ncmap109 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twentieth subplot\ncmap110 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twenty-first subplot\ncmap111 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twenty-second subplot\ncmap112 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twenty-third subplot\ncmap113 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twenty-fourth subplot\ncmap114 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twenty-fifth subplot\ncmap115 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twenty-sixth subplot\ncmap116 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twenty-seventh subplot\ncmap117 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twenty-eighth subplot\ncmap118 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-twenty-ninth subplot\ncmap119 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-thirtieth subplot\ncmap120 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-thirtieth-first subplot\ncmap121 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-thirtieth-second subplot\ncmap122 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-thirtieth-third subplot\ncmap123 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-thirtieth-fourth subplot\ncmap124 = plt.get_cmap('Blues')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-thirtieth-fifth subplot\ncmap125 = plt.get_cmap('Greens')\n\n# Create a color map for the thirtieth-thirtieth-thirtieth-thirtieth-sixth subplot"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle with a radius of 1 centered at (0, 0)\ncircle = plt.Circle((0, 0), 1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='red')\nax.add_artist(rectangle)\n\n# Draw a polygon with 6 sides centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 1], [-1, 1], [-1, -1], [1, -1], [0, 0]]), color='blue')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='green')\nax.add_artist(star)\n\n# Draw a triangle with a base of 2 and a height of 1 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-1, 0], [1, 0], [0, 1]]), color='yellow')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.5 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.5, color='orange')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 1 and a height of 0.5 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -0.25), 1, 0.5, color='purple')\nax.add_artist(rectangle)\n\n# Draw a polygon with 4 sides centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]), color='pink')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='brown')\nax.add_artist(star)\n\n# Draw a triangle with a base of 1 and a height of 0.5 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-0.5, 0], [0.5, 0], [0, 0.5]]), color='cyan')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.25 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.25, color='gray')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.25 centered at (0, 0)\nrectangle = plt.Rectangle((-0.25, -0.125), 0.5, 0.25, color='silver')\nax.add_artist(rectangle)\n\n# Draw a polygon with 3 sides centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 0], [0.5, 0.866], [0, 0]]), color='gold')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='lime')\nax.add_artist(star)\n\n# Draw a triangle with a base of 0.5 and a height of 0.25 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-0.25, 0], [0.25, 0], [0, 0.25]]), color='magenta')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.125 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.125, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.25 and a height of 0.125 centered at (0, 0)\nrectangle = plt.Rectangle((-0.125, -0.0625), 0.25, 0.125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with 2 sides centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 0], [0, 0]]), color='brown')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='cyan')\nax.add_artist(star)\n\n# Draw a triangle with a base of 0.25 and a height of 0.125 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-0.125, 0], [0.125, 0], [0, 0.125]]), color='magenta')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.0625 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.0625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.125 and a height of 0.0625 centered at (0, 0)\nrectangle = plt.Rectangle((-0.0625, -0.03125), 0.125, 0.0625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with 1 side centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 0], [0, 0]]), color='brown')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='cyan')\nax.add_artist(star)\n\n# Draw a triangle with a base of 0.125 and a height of 0.0625 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-0.0625, 0], [0.0625, 0], [0, 0.0625]]), color='magenta')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.03125 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.03125, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.0625 and a height of 0.03125 centered at (0, 0)\nrectangle = plt.Rectangle((-0.03125, -0.015625), 0.0625, 0.03125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with 0 sides centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 0], [0, 0]]), color='brown')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='cyan')\nax.add_artist(star)\n\n# Draw a triangle with a base of 0.0625 and a height of 0.03125 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-0.03125, 0], [0.03125, 0], [0, 0.03125]]), color='magenta')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.015625 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.015625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.03125 and a height of 0.015625 centered at (0, 0)\nrectangle = plt.Rectangle((-0.015625, -0.0078125), 0.03125, 0.015625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with -1 sides centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 0], [0, 0]]), color='brown')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='cyan')\nax.add_artist(star)\n\n# Draw a triangle with a base of 0.03125 and a height of 0.015625 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-0.015625, 0], [0.015625, 0], [0, 0.015625]]), color='magenta')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.0078125 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.0078125, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.03125 and a height of 0.0078125 centered at (0, 0)\nrectangle = plt.Rectangle((-0.0078125, -0.00390625), 0.03125, 0.0078125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with -2 sides centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 0], [0, 0]]), color='brown')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='cyan')\nax.add_artist(star)\n\n# Draw a triangle with a base of 0.03125 and a height of 0.0078125 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-0.0078125, 0], [0.0078125, 0], [0, 0.0078125]]), color='magenta')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.00390625 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.00390625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.03125 and a height of 0.00390625 centered at (0, 0)\nrectangle = plt.Rectangle((-0.00390625, -0.001953125), 0.03125, 0.00390625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with -3 sides centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 0], [0, 0]]), color='brown')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='cyan')\nax.add_artist(star)\n\n# Draw a triangle with a base of 0.03125 and a height of 0.00390625 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-0.00390625, 0], [0.00390625, 0], [0, 0.00390625]]), color='magenta')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.001953125 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.001953125, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.03125 and a height of 0.001953125 centered at (0, 0)\nrectangle = plt.Rectangle((-0.001953125, -0.0009765625), 0.03125, 0.001953125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with -4 sides centered at (0, 0)\npolygon = plt.Polygon(np.array([[0, 0], [1, 0], [0, 0]]), color='brown')\nax.add_artist(polygon)\n\n# Draw a star with 5 points centered at (0, 0)\nstar = plt.Polygon(np.array([[0, 0], [0.5, 0.5], [1, 0], [0.5, -0.5], [0, 0], [0.5, 0.5], [0.25, 0.75], [0, 0.5], [0.25, 0.25], [0, 0]]), color='cyan')\nax.add_artist(star)\n\n# Draw a triangle with a base of 0.03125 and a height of 0.001953125 centered at (0, 0)\ntriangle = plt.Polygon(np.array([[-0.001953125, 0], [0.001953125, 0], [0, 0.001953125]]), color='magenta')\nax.add_artist(triangle)\n\n# Draw a circle with a radius of 0.0009765625 centered at (0, 0)\ncircle = plt.Circle((0, 0), 0.0009765625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.03125 and a height of 0.0009765625"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 6))\n\n# Define the data for each subplot\ndata1 = [1, 2, 3, 4, 5]\ndata2 = [1, 2, 3, 4, 5]\ndata3 = [1, 2, 3, 4, 5]\n\n# Plot the data in each subplot\naxs[0].plot(data1)\naxs[1].plot(data2)\naxs[2].plot(data3)\n\n# Set the title of each subplot\naxs[0].set_title('Fidelity(D_train)')\naxs[1].set_title('Fidelity(D_test)')\naxs[2].set_title('Fidelity(D_train)')\n\n# Set the x-axis label of each subplot\naxs[0].set_xlabel('MLA')\naxs[1].set_xlabel('MLA')\naxs[2].set_xlabel('MLA')\n\n# Set the y-axis label of each subplot\naxs[0].set_ylabel('Query Error')\naxs[1].set_ylabel('Query Error')\naxs[2].set_ylabel('Query Error')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Heterocycle formation', color='white')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\n\n# Draw a circle around the plot\ncircle = plt.Circle((50, 50), 40, color='red')\nax.add_artist(circle)\n\n# Draw a rectangle around the plot\nrectangle = plt.Rectangle((20, 20), 60, 60, color='blue')\nax.add_artist(rectangle)\n\n# Draw a triangle around the plot\ntriangle = plt.Polygon([[30, 70], [70, 70], [50, 90]], color='green')\nax.add_artist(triangle)\n\n# Draw a star around the plot\nstar = plt.Polygon([[50, 30], [60, 40], [70, 30], [65, 20], [50, 30], [45, 20], [40, 30], [50, 40]], color='yellow')\nax.add_artist(star)\n\n# Draw a pentagon around the plot\npentagon = plt.Polygon([[50, 50], [60, 60], [70, 50], [60, 40], [50, 50]], color='orange')\nax.add_artist(pentagon)\n\n# Draw a hexagon around the plot\nhexagon = plt.Polygon([[50, 50], [60, 60], [70, 50], [60, 40], [50, 50], [40, 40]], color='purple')\nax.add_artist(hexagon)\n\n# Draw a heptagon around the plot\nheptagon = plt.Polygon([[50, 50], [60, 60], [70, 50], [60, 40], [50, 50], [40, 40], [50, 30]], color='pink')\nax.add_artist(heptagon)\n\n# Draw a octagon around the plot\noctagon = plt.Polygon([[50, 50], [60, 60], [70, 50], [60, 40], [50, 50], [40, 40], [50, 30], [60, 20]], color='cyan')\nax.add_artist(octagon)\n\n# Draw a nonagon around the plot\nnonagon = plt.Polygon([[50, 50], [60, 60], [70, 50], [60, 40], [50, 50], [40, 40], [50, 30], [60, 20], [50, 10]], color='magenta')\nax.add_artist(nonagon)\n\n# Draw a decagon around the plot\ndecagon = plt.Polygon([[50, 50], [60, 60], [70, 50], [60, 40], [50, 50], [40, 40], [50, 30], [60, 20], [50, 10], [40, 20]], color='lime')\nax.add_artist(decagon)\n\n# Draw a dodecagon around the plot\ndodecagon = plt.Polygon([[50, 50], [60, 60], [70, 50], [60, 40], [50, 50], [40, 40], [50, 30], [60, 20], [50, 10], [40, 20], [50, 30], [60, 40]], color='brown')\nax.add_artist(dodecagon)\n\n# Draw a trapezoid around the plot\ntrapezoid = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='grey')\nax.add_artist(trapezoid)\n\n# Draw a parallelogram around the plot\nparallelogram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(parallelogram)\n\n# Draw a rhombus around the plot\nrhombus = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(rhombus)\n\n# Draw a kite around the plot\nkite = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(kite)\n\n# Draw a pentagram around the plot\npentagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(pentagram)\n\n# Draw a hexagram around the plot\nhexagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(hexagram)\n\n# Draw a heptagram around the plot\nheptagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(heptagram)\n\n# Draw a octagram around the plot\noctagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(octagram)\n\n# Draw a nonagram around the plot\nnonagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(nonagram)\n\n# Draw a decagram around the plot\ndecagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(decagram)\n\n# Draw a dodecagram around the plot\ndodecagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(dodecagram)\n\n# Draw a trapezoid around the plot\ntrapezoid = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(trapezoid)\n\n# Draw a parallelogram around the plot\nparallelogram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(parallelogram)\n\n# Draw a rhombus around the plot\nrhombus = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(rhombus)\n\n# Draw a kite around the plot\nkite = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(kite)\n\n# Draw a pentagram around the plot\npentagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(pentagram)\n\n# Draw a hexagram around the plot\nhexagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(hexagram)\n\n# Draw a heptagram around the plot\nheptagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(heptagram)\n\n# Draw a octagram around the plot\noctagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(octagram)\n\n# Draw a nonagram around the plot\nnonagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(nonagram)\n\n# Draw a decagram around the plot\ndecagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(decagram)\n\n# Draw a dodecagram around the plot\ndodecagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(dodecagram)\n\n# Draw a trapezoid around the plot\ntrapezoid = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(trapezoid)\n\n# Draw a parallelogram around the plot\nparallelogram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(parallelogram)\n\n# Draw a rhombus around the plot\nrhombus = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(rhombus)\n\n# Draw a kite around the plot\nkite = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(kite)\n\n# Draw a pentagram around the plot\npentagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(pentagram)\n\n# Draw a hexagram around the plot\nhexagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(hexagram)\n\n# Draw a heptagram around the plot\nheptagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(heptagram)\n\n# Draw a octagram around the plot\noctagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(octagram)\n\n# Draw a nonagram around the plot\nnonagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(nonagram)\n\n# Draw a decagram around the plot\ndecagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(decagram)\n\n# Draw a dodecagram around the plot\ndodecagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(dodecagram)\n\n# Draw a trapezoid around the plot\ntrapezoid = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(trapezoid)\n\n# Draw a parallelogram around the plot\nparallelogram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(parallelogram)\n\n# Draw a rhombus around the plot\nrhombus = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(rhombus)\n\n# Draw a kite around the plot\nkite = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(kite)\n\n# Draw a pentagram around the plot\npentagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(pentagram)\n\n# Draw a hexagram around the plot\nhexagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(hexagram)\n\n# Draw a heptagram around the plot\nheptagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(heptagram)\n\n# Draw a octagram around the plot\noctagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(octagram)\n\n# Draw a nonagram around the plot\nnonagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(nonagram)\n\n# Draw a decagram around the plot\ndecagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(decagram)\n\n# Draw a dodecagram around the plot\ndodecagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(dodecagram)\n\n# Draw a trapezoid around the plot\ntrapezoid = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(trapezoid)\n\n# Draw a parallelogram around the plot\nparallelogram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(parallelogram)\n\n# Draw a rhombus around the plot\nrhombus = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(rhombus)\n\n# Draw a kite around the plot\nkite = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(kite)\n\n# Draw a pentagram around the plot\npentagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(pentagram)\n\n# Draw a hexagram around the plot\nhexagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(hexagram)\n\n# Draw a heptagram around the plot\nheptagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(heptagram)\n\n# Draw a octagram around the plot\noctagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='silver')\nax.add_artist(octagram)\n\n# Draw a nonagram around the plot\nnonagram = plt.Polygon([[30, 70], [70, 70], [80, 50], [20, 50]], color='gold')\nax.add_artist(nonagram"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle with a radius of 1 centered at (0,0)\ncircle = plt.Circle((0,0), 1, color='lightgrey')\nax.add_artist(circle)\n\n# Define the data for the scatter plot\nx = np.linspace(-1, 1, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Add a title\nax.set_title('Scatter Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('3D-bar')\n\n# Create a circle for the radar chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black', fill=False)\nax.add_artist(circle)\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='line_num', markerfacecolor='blue', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='pie', markerfacecolor='orange', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='funnel', markerfacecolor='green', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='radar', markerfacecolor='red', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='red')\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.9], [0.4, 0.8], [0.6, 0.8], [0.5, 0.6], [0.4, 0.6], [0.5, 0.4], [0.6, 0.6], [0.4, 0.6]], color='green')\nax.add_artist(star)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0.2, 0.2], [0.4, 0.3], [0.5, 0.2], [0.6, 0.3], [0.4, 0.4]], color='purple')\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.7, 0.2], [0.8, 0.3], [0.8, 0.5], [0.7, 0.6], [0.6, 0.5], [0.6, 0.3]], color='orange')\nax.add_artist(hexagon)\n\n# Draw a heptagon\nheptagon = plt.Polygon([[0.2, 0.7], [0.3, 0.8], [0.4, 0.8], [0.5, 0.7], [0.6, 0.8], [0.7, 0.8], [0.8, 0.7]], color='cyan')\nax.add_artist(heptagon)\n\n# Draw a octagon\noctagon = plt.Polygon([[0.3, 0.2], [0.4, 0.3], [0.5, 0.2], [0.6, 0.3], [0.7, 0.2], [0.8, 0.3], [0.8, 0.5], [0.7, 0.6]], color='magenta')\nax.add_artist(octagon)\n\n# Draw a nonagon\nnonagon = plt.Polygon([[0.4, 0.2], [0.5, 0.3], [0.6, 0.2], [0.7, 0.3], [0.8, 0.2], [0.9, 0.3], [0.9, 0.5], [0.8, 0.6], [0.7, 0.5]], color='yellow')\nax.add_artist(nonagon)\n\n# Draw a decagon\ndecagon = plt.Polygon([[0.5, 0.2], [0.6, 0.3], [0.7, 0.2], [0.8, 0.3], [0.9, 0.2], [0.9, 0.3], [0.9, 0.5], [0.8, 0.6], [0.7, 0.5], [0.6, 0.4]], color='brown')\nax.add_artist(decagon)\n\n# Draw a dodecagon\ndodecagon = plt.Polygon([[0.6, 0.2], [0.7, 0.3], [0.8, 0.2], [0.9, 0.3], [0.9, 0.5], [0.8, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.3], [0.4, 0.4], [0.3, 0.5], [0.4, 0.6]], color='pink')\nax.add_artist(dodecagon)\n\n# Draw a trapezoid\ntrapezoid = plt.Polygon([[0.2, 0.5], [0.4, 0.6], [0.6, 0.6], [0.8, 0.5]], color='grey')\nax.add_artist(trapezoid)\n\n# Draw a parallelogram\nparallelogram = plt.Polygon([[0.3, 0.5], [0.5, 0.6], [0.7, 0.5], [0.5, 0.4]], color='silver')\nax.add_artist(parallelogram)\n\n# Draw a rhombus\nrhombus = plt.Polygon([[0.4, 0.5], [0.5, 0.6], [0.6, 0.5], [0.5, 0.4]], color='gold')\nax.add_artist(rhombus)\n\n# Draw a kite\nkite = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4]], color='lime')\nax.add_artist(kite)\n\n# Draw a ellipse\nellipse = plt.Ellipse((0.5, 0.5), 0.4, 0.2, color='cyan')\nax.add_artist(ellipse)\n\n# Draw a rectangle with rounded corners\nrounded_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', edgecolor='black', linewidth=1, alpha=0.5)\nax.add_artist(rounded_rectangle)\n\n# Draw a rectangle with dashed border\ndashed_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='--', linewidth=1)\nax.add_artist(dashed_rectangle)\n\n# Draw a rectangle with dotted border\ndotted_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle=':', linewidth=1)\nax.add_artist(dotted_rectangle)\n\n# Draw a rectangle with dashed-dotted border\ndashed_dotted_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-.', linewidth=1)\nax.add_artist(dashed_dotted_rectangle)\n\n# Draw a rectangle with solid border\nsolid_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1)\nax.add_artist(solid_rectangle)\n\n# Draw a rectangle with no border\nno_border_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', edgecolor='none')\nax.add_artist(no_border_rectangle)\n\n# Draw a rectangle with a dashed border and a solid fill\ndashed_solid_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='--', linewidth=1, alpha=0.5)\nax.add_artist(dashed_solid_rectangle)\n\n# Draw a rectangle with a dotted border and a solid fill\ndotted_solid_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle=':', linewidth=1, alpha=0.5)\nax.add_artist(dotted_solid_rectangle)\n\n# Draw a rectangle with a dashed-dotted border and a solid fill\ndashed_dotted_solid_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-.', linewidth=1, alpha=0.5)\nax.add_artist(dashed_dotted_solid_rectangle)\n\n# Draw a rectangle with a solid border and a solid fill\nsolid_solid_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_solid_rectangle)\n\n# Draw a rectangle with a solid border and a transparent fill\nsolid_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.1)\nax.add_artist(solid_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a semi-transparent fill\nsolid_semi_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.5)\nax.add_artist(solid_semi_transparent_rectangle)\n\n# Draw a rectangle with a solid border and a fully transparent fill\nsolid_fully_transparent_rectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', linestyle='-', linewidth=1, alpha=0.0)\nax.add_artist(solid_fully_transparent_rectangle)\n\n#"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', color='white')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticks(np.arange(0, 10, 1))\nax.set_yticks(np.arange(0, 100, 10))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the tick labels\n"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 4, figsize=(12, 4))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Model-Basedness')\naxs[0, 1].set_title('Meta-Cognition')\naxs[0, 2].set_title('Exploration')\naxs[0, 3].set_title('Risk Taking')\naxs[0, 4].set_title('Bayesian Reasoning')\naxs[0, 5].set_title('Simple Bandits')\n\n# Create a scatter plot for each subplot\naxs[0, 0].scatter(np.random.rand(10), np.random.rand(10), color='blue')\naxs[0, 1].scatter(np.random.rand(10), np.random.rand(10), color='orange')\naxs[0, 2].scatter(np.random.rand(10), np.random.rand(10), color='green')\naxs[0, 3].scatter(np.random.rand(10), np.random.rand(10), color='red')\naxs[0, 4].scatter(np.random.rand(10), np.random.rand(10), color='purple')\naxs[0, 5].scatter(np.random.rand(10), np.random.rand(10), color='brown')\n\n# Add a vertical line to each subplot\nfor ax in axs.flat:\n    ax.axvline(x=0.5, color='black', linestyle='--')\n\n# Add a horizontal line to each subplot\nfor ax in axs.flat:\n    ax.axhline(y=0.5, color='black', linestyle='--')\n\n# Add a rectangle around each subplot\nfor ax in axs.flat:\n    ax.add_patch(plt.Rectangle((0, 0), 1, 1, fill=False, edgecolor='black'))\n\n# Add a text label to each subplot\nfor ax in axs.flat:\n    ax.text(0.5, 0.5, 'llama-2-70-chat', ha='center', va='center', color='blue')\n\n# Add a text label to each subplot\nfor ax in axs.flat:\n    ax.text(0.5, 0.5, 'llama-2-70', ha='center', va='center', color='blue')\n\n# Add a text label to each subplot\nfor ax in axs.flat:\n    ax.text(0.5, 0.5, 'hf_falcon-40b', ha='center', va='center', color='orange')\n\n# Add a text label to each subplot\nfor ax in axs.flat:\n    ax.text(0.5, 0.5, 'text-bison@002', ha='center', va='center', color='blue')\n\n# Add a text label to each subplot\nfor ax in axs.flat:\n    ax.text(0.5, 0.5, 'claude-2', ha='center', va='center', color='blue')\n\n# Add a text label to each subplot\nfor ax in axs.flat:\n    ax.text(0.5, 0.5, 'claude-1', ha='center', va='center', color='blue')\n\n# Add a text label to each subplot\nfor ax in axs.flat:\n    ax.text(0.5, 0.5, 'text-davinci-002', ha='center', va='center', color='blue')\n\n# Add a text label to each subplot\nfor ax in axs.flat:\n    ax.text(0.5, 0.5, 'text-davinci-003', ha='center', va='center', color='blue')\n\n# Add a text label to each subplot\nfor ax in axs.flat:\n    ax.text(0.5, 0.5, 'gpt-4', ha='center', va='center', color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the x-axis label\nax.set_xlabel('Pre-training GPU Hours')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy [%]')\n\n# Set the x-axis limits\nax.set_xlim(0, 4000)\n\n# Set the y-axis limits\nax.set_ylim(75, 90)\n\n# Create a scatter plot with a green color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='g', s=100)\n\n# Create a line plot with a black color\nax.plot([1000, 2000, 3000], [85, 83, 81], c='k', linestyle='--')\n\n# Create a scatter plot with a red color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='r', s=100)\n\n# Create a scatter plot with a blue color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='b', s=100)\n\n# Create a scatter plot with a yellow color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='y', s=100)\n\n# Create a scatter plot with a cyan color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='c', s=100)\n\n# Create a scatter plot with a magenta color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='m', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='w', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='white', s=100)\n\n# Create a scatter plot with a gray color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='gray', s=100)\n\n# Create a scatter plot with a black color\nax.scatter([1000, 2000, 3000], [85, 83, 81], c='black', s=100)\n\n# Create a scatter plot with a white color\nax.scatter([1000, 200"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Set the x-axis label\nax.set_xlabel('Infernece Time (seconds)')\n\n# Set the y-axis label\nax.set_ylabel('Average Score')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Draw a rectangle at the bottom left corner of the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Draw a circle at the top right corner of the plot\ncircle = plt.Circle((1, 1), 0.5, fc='red')\nax.add_patch(circle)\n\n# Draw a line graph with a scatter plot\nx = [10, 20, 30, 40, 50, 60]\ny = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nax.plot(x, y, 'o-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Number of parameters')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Set the x and y limits\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Set the x and y labels\nax.set_xlabel('EgoSchema VQA accuracy')\nax.set_ylabel('Perception Test VQA accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Relative Error, u')\n\n# Set the x-axis label\nax.set_xlabel('Test Case Index')\n\n# Set the y-axis label\nax.set_ylabel('Average Relative Error, u')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-ticks\nax.set_yticks([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n# Set the x-tick labels\nax.set_xticklabels(['1.0', '1.5', '2.0', '2.5', '3.0', '3.5', '4.0', '4.5', '5.0'])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.01', '0.02', '0.03', '0.04', '0.05', '0.06', '0.07', '0.08', '0.09', '0.1', '0.11', '0.12', '0.13', '0.14', '0.15', '0.16', '0.17', '0.18', '0.19', '0.2', '0.21', '0.22', '0.23', '0.24', '0.25', '0.26', '0.27', '0.28', '0.29', '0.3', '0.31', '0.32', '0.33', '0.34', '0.35', '0.36', '0.37', '0.38', '0.39', '0.4', '0.41', '0.42', '0.43', '0.44', '0.45', '0.46', '0.47', '0.48', '0.49', '0.5', '0.51', '0.52', '0.53', '0.54', '0.55', '0.56', '0.57', '0.58', '0.59', '0.6', '0.61', '0.62', '0.63', '0.64', '0.65', '0.66', '0.67', '0.68', '0.69', '0.7', '0.71', '0.72', '0.73', '0.74', '0.75', '0.76', '0.77', '0.78', '0.79', '0.8', '0.81', '0.82', '0.83', '0.84', '0.85', '0.86', '0.87', '0.88', '0.89', '0.9', '0.91', '0.92', '0.93', '0.94', '0.95', '0.96', '0.97', '0.98', '0.99'])\n\n# Add a rectangle for each test case\nrects = []\nfor i in range(1, 6):\n    rect = plt.Rectangle((i-1, 0.01), 1, 0.99, color='blue')\n    rects.append(rect)\n    ax.add_patch(rect)\n\n# Add a rectangle for each LSTM model\nlstms = ['Single LSTM', 'Ensemble LSTMs', 'CAE Reconstruction']\ncolors = ['green', 'red', 'blue']\nfor i, lstm in enumerate(lstms):\n    rect = plt.Rectangle((0, i*0.1+0.01), 0.99, 0.08, color=colors[i])\n    rects.append(rect)\n    ax.add_patch(rect)\n\n# Add a rectangle for each error value\nerrors = [0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01]\nfor i, error in enumerate(errors):\n    rect = plt.Rectangle((i*0.1+0.01, 0.01), 0.08, 0.99, color='green')\n    rects.append(rect)\n    ax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Set the x-axis label\nax.set_xlabel('Classes')\n\n# Set the y-axis label\nax.set_ylabel('Accuracies')\n\n# Define the classes and their accuracies\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\naccuracies = [0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25]\n\n# Plot the data\nax.plot(classes, accuracies, 'ro-')\n\n# Add a legend\nax.legend(['Majority', 'Minority'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Set the title for each subplot\naxs[0].set_title('Logic Grid Puzzle(Accuracy versus token cost)')\naxs[1].set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\n\n# Define the data for the plots\nx = [50, 40, 30, 20, 10, 0]\ny1 = [68, 66, 64, 62, 60, 58]\ny2 = [68, 66, 64, 62, 60, 58]\n\n# Plot the data\naxs[0].plot(x, y1, 'ro-')\naxs[0].plot(x, y2, 'bo-')\n\n# Add labels to the plots\naxs[0].set_xlabel('Token cost($)')\naxs[0].set_ylabel('Accuracy(%)')\n\n# Define the data for the scatter plots\nx = [50, 40, 30, 20, 10, 0]\ny1 = [68, 66, 64, 62, 60, 58]\ny2 = [68, 66, 64, 62, 60, 58]\n\n# Plot the data\naxs[1].scatter(x, y1, c='r', label='MAD+judge')\naxs[1].scatter(x, y2, c='b', label='CoT(maj@1)')\n\n# Add labels to the plots\naxs[1].set_xlabel('TFLOPS')\naxs[1].set_ylabel('Accuracy(%)')\n\n# Show the legend\naxs[1].legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Energy Efficiency')\n\n# Set the x-axis label\nax.set_xlabel('Efficiency (%)')\n\n# Set the y-axis label\nax.set_ylabel('Carbon Reduction (%)')\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny = [10, 20, 30, 40, 50, 60, 70, 80]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('\u0394 Robust Accuracy (%)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Create a scatter plot with random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nax.scatter(x, y, c='blue', alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(2, 16)\n\n# Set the y-axis limits\nax.set_ylim(80, 110)\n\n# Set the x-axis ticks\nax.set_xticks(range(2, 17, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(80, 111, 10))\n\n# Set the x-axis labels\nax.set_xticklabels(['2', '4', '6', '8', '10', '12', '14', '16'])\n\n# Set the y-axis labels\nax.set_yticklabels(['80', '90', '100', '110'])\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the text\nax.text(1, 105, 'Day 1', color='blue')\nax.text(3, 105, 'Day 2', color='orange')\n\n# Plot the data\nax.plot([2, 4, 6, 8, 10, 12, 14, 16], [85, 90, 95, 100, 105, 110, 105, 100], 'o-', color='blue')\nax.plot([2, 4, 6, 8, 10, 12, 14, 16], [90, 95, 100, 105, 110, 105, 100, 95], 'o-', color='orange')\nax.plot([2, 4, 6, 8, 10, 12, 14, 16], [95, 100, 105, 110, 105, 100, 95, 90], 'o-', color='green')\nax.plot([2, 4, 6, 8, 10, 12, 14, 16], [100, 105, 110, 105, 100, 95, 90, 85], 'o-', color='red')\nax.plot([2, 4, 6, 8, 10, 12, 14, 16], [105, 110, 105, 100, 95, 90, 85, 80], 'o-', color='purple')\nax.plot([2, 4, 6, 8, 10, 12, 14, 16], [110, 105, 100, 95, 90, 85, 80, 75], 'o-', color='brown')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(2, 16)\nax.set_ylim(0, 110)\n\n# Add a color bar\ncbar = fig.colorbar(ax.imshow([[0, 100], [100, 0]], cmap='coolwarm'))\n\n# Add scatter plots\nax.scatter([2, 4, 6, 8, 10, 12, 14, 16], [95, 90, 85, 80, 75, 70, 65, 60], c='blue')\nax.scatter([3, 5, 7, 9, 11, 13, 15], [90, 85, 80, 75, 70, 65, 60], c='green')\nax.scatter([4, 6, 8, 10, 12, 14], [85, 80, 75, 70, 65, 60], c='red')\n\n# Add a title\nax.set_title('Stock Prices')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Energy Production Trends')\n\n# Create a list of energy sources\nenergy_sources = ['Solar Energy', 'Wind Energy', 'Hydropower']\n\n# Create a list of colors for each energy source\ncolors = ['cyan', 'red', 'gray']\n\n# Create a list of energy output values\nenergy_output = [220, 210, 200]\n\n# Create a list of installed capacity values\ninstalled_capacity = [175, 200, 225, 250, 275, 300]\n\n# Plot the data\nfor i in range(len(energy_sources)):\n    ax.plot(installed_capacity, energy_output[i], color=colors[i], label=energy_sources[i])\n\n# Add a legend\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Installed Capacity (GW)')\n\n# Set the y-axis label\nax.set_ylabel('Energy Output (TWh)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Create a scatter plot\nscatter = ax.scatter([10, 20, 30, 40, 50, 60, 70, 80, 90], [10, 20, 30, 40, 50, 60, 70, 80, 90], c=[10, 20, 30, 40, 50, 60, 70, 80, 90], cmap='coolwarm')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Set the limits of the color bar\ncbar.set_clim(0, 100)\n\n# Set the labels for the color bar\ncbar.set_label('Colorbar label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('LibriCSS vs Additional Data 1')\n\n# Create a scatter plot with random data\nx = [2, 3, 4, 5, 6, 7, 8]\ny = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\nax.scatter(x, y, color='blue')\n\n# Add a legend\nax.legend(['LibriCSS WER', 'Additional Data 1'])\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Create a scatter plot\nax.scatter([0.5, 0.7, 0.9], [0.3, 0.4, 0.5], color='blue')\nax.scatter([0.2, 0.4, 0.6], [0.1, 0.2, 0.3], color='orange')\nax.scatter([0.8, 0.9, 0.1], [0.7, 0.8, 0.9], color='red')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Value')\nax.set_ylabel('Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Create a scatter plot with blue dots\nax.scatter([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend(['Model-Basedness'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(15, 5))\n\n# Scatter plot for the first subplot\naxs[0, 0].scatter([70, 80, 90], [40, 50, 60], color='blue')\naxs[0, 0].set_title('Scatter Plot - deepskyblue')\n\n# Scatter plot for the second subplot\naxs[0, 1].scatter([70, 80, 90], [30, 40, 50], color='magenta')\naxs[0, 1].set_title('Scatter Plot - magenta')\n\n# Scatter plot for the third subplot\naxs[1, 0].scatter([70, 80, 90], [20, 30, 40], color='limegreen')\naxs[1, 0].set_title('Scatter Plot - limegreen')\n\n# Scatter plot for the fourth subplot\naxs[1, 1].scatter([70, 80, 90], [10, 20, 30], color='cyan')\naxs[1, 1].set_title('Scatter Plot - cyan')\n\n# Set the x-axis and y-axis limits for all subplots\nfor ax in axs.flat:\n    ax.set_xlim(70, 90)\n    ax.set_ylim(10, 60)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [30, 32, 35, 37, 39, 41, 43, 45, 47, 49]\ny2 = [35, 37, 39, 41, 43, 45, 47, 49, 51, 53]\ny3 = [40, 42, 44, 46, 48, 50, 52, 54, 56, 58]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot the data\naxs[0].plot(x, y1, 'b-')\naxs[1].plot(x, y2, 'r-')\naxs[2].plot(x, y3, 'g-')\n\n# Add a legend\naxs[0].legend(['ViTPose (sc) Performance'])\naxs[1].legend(['ViTPose (ft) Performance'])\naxs[2].legend(['VLPose Performance'])\n\n# Set the title of each subplot\naxs[0].set_title('ViTPose (sc) Performance')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[2].set_title('VLPose Performance')\n\n# Set the x-axis label\naxs[0].set_xlabel('Average Precision on HumanArt (%)')\naxs[1].set_xlabel('Average Precision on HumanArt (%)')\naxs[2].set_xlabel('Average Precision on HumanArt (%)')\n\n# Set the y-axis label\naxs[0].set_ylabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on MSCOCO (%)')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\naxs[1].legend(handlelength=0)\naxs[2].legend(handlelength=0)\n\n# Set the color of the plot\naxs[0].plot(x, y1, 'o', color='pink')\naxs[1].plot(x, y2, 'o', color='purple')\naxs[2].plot(x, y3, 'o', color='orange')\n\n# Set the color of the legend\naxs[0].legend(handlelength=0)\n"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Token Cost ($)')\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n# Set the y-axis label\nax.set_ylabel('Token Cost ($)')\n\n# Define the data for the plot\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [1.0, 2.5, 10.0, 20.0, 25.0, 1.0, 2.5, 10.0, 20.0, 25.0, 1.0, 2.5, 10.0, 20.0, 25.0, 1.0, 2.5, 10.0, 20.0, 25.0, 1.0, 2.5, 10.0, 20.0, 25.0]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 6)\n# Set the limits of the y-axis\nax.set_ylim(0, 30)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a scatter plot with random data points\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\nsizes = 1000 * np.random.rand(100)\nscatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.5)\n\n# Set the title of the plot\nax.set_title('Random Scatter Plot')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Set the x-axis label\nax.set_xlabel('Bit per pixel (BPP)')\n\n# Set the y-axis label\nax.set_ylabel('WRMSE')\n\n# Create a scatter plot with the data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='blue')\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='red')\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='green')\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='cyan')\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='magenta')\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='yellow')\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a scatter plot with orange dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='orange')\n\n# Create a scatter plot with blue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='blue')\n\n# Create a scatter plot with green dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='green')\n\n# Create a scatter plot with red dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='red')\n\n# Create a scatter plot with black dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='black')\n\n# Create a scatter plot with white dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='white')\n\n# Create a scatter plot with yellow dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='yellow')\n\n# Create a scatter plot with cyan dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='cyan')\n\n# Create a scatter plot with magenta dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='magenta')\n\n# Create a scatter plot with gray dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gray')\n\n# Create a scatter plot with brown dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='brown')\n\n# Create a scatter plot with pink dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='pink')\n\n# Create a scatter plot with purple dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='purple')\n\n# Create a scatter plot with olive dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='olive')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='teal')\n\n# Create a scatter plot with lime dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lime')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with indigo dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='indigo')\n\n# Create a scatter plot with chartreuse dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chartreuse')\n\n# Create a scatter plot with aqua dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aqua')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='teal')\n\n# Create a scatter plot with lime dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lime')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with indigo dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='indigo')\n\n# Create a scatter plot with chartreuse dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chartreuse')\n\n# Create a scatter plot with aqua dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aqua')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='teal')\n\n# Create a scatter plot with lime dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lime')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with indigo dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='indigo')\n\n# Create a scatter plot with chartreuse dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chartreuse')\n\n# Create a scatter plot with aqua dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aqua')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='teal')\n\n# Create a scatter plot with lime dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lime')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with indigo dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='indigo')\n\n# Create a scatter plot with chartreuse dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chartreuse')\n\n# Create a scatter plot with aqua dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aqua')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='teal')\n\n# Create a scatter plot with lime dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lime')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with indigo dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='indigo')\n\n# Create a scatter plot with chartreuse dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chartreuse')\n\n# Create a scatter plot with aqua dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aqua')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='teal')\n\n# Create a scatter plot with lime dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lime')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with indigo dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='indigo')\n\n# Create a scatter plot with chartreuse dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chartreuse')\n\n# Create a scatter plot with aqua dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aqua')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='teal')\n\n# Create a scatter plot with lime dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lime')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with indigo dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='indigo')\n\n# Create a scatter plot with chartreuse dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chartreuse')\n\n# Create a scatter plot with aqua dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aqua')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='teal')\n\n# Create a scatter plot with lime dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lime')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with indigo dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='indigo')\n\n# Create a scatter plot with chartreuse dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chartreuse')\n\n# Create a scatter plot with aqua dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aqua')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Set the x-axis label\nax.set_xlabel('Number of parameters (M)')\n\n# Set the y-axis label\nax.set_ylabel('NMAE')\n\n# Define the data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='white')\n\n# Add a polygon to represent another model\npolygon = plt.Polygon([[6, 14], [7, 15], [8, 14]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(7, 14.5, 'InfGCN', color='white')\n\n# Add a star to represent another model\nstar = plt.Patch(facecolor='purple', edgecolor='black', hatch='/', alpha=0.5)\nax.add_patch(star)\n\n# Add a text label to the star\nax.text(9, 16, 'DeepDFT2', color='white')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 10), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 10.5, 'LNO', color='white')\n\n# Add a circle to represent another model\ncircle = plt.Circle((4, 12), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(4.5, 12.5, 'GNO', color='"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the x-axis label\nax.set_xlabel('PC1')\n\n# Set the y-axis label\nax.set_ylabel('PC2')\n\n# Set the x-axis limits\nax.set_xlim(-0.4, 0.4)\n\n# Set the y-axis limits\nax.set_ylim(-0.2, 0.4)\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='blue', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='pink', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='yellow', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='green', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='red', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='purple', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='orange', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='cyan', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='magenta', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='brown', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='grey', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='black', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='white', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='silver', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='gold', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='navy', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='lime', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='olive', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='cyan', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='magenta', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='brown', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='grey', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='black', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='white', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='silver', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='gold', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='navy', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='lime', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='olive', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='cyan', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='magenta', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='brown', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='grey', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='black', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='white', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='silver', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='gold', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='navy', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='lime', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='olive', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='cyan', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='magenta', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='brown', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='grey', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='black', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='white', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='silver', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='gold', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='navy', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='lime', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='olive', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='cyan', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='magenta', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='brown', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='grey', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='black', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='white', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='silver', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='gold', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='navy', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='lime', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='olive', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='cyan', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='magenta', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='brown', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='grey', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='black', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='white', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='silver', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='gold', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='navy', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='lime', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='olive', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='cyan', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='magenta', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='brown', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='grey', label='ar')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='black', label='de')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='white', label='fr')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='silver', label='he')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('DE')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7], [0.1, 0.2, 0.3], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('CFA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-axis limits\nax.set_xlim(0.5, 0.8)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.4)\n\n# Add a legend\nax.legend(['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer'], loc='upper left')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(12.0, 8.0))\n\n# Set the color of the subplots\naxs[0, 0].set_facecolor('lightblue')\naxs[0, 1].set_facecolor('lightcoral')\naxs[1, 0].set_facecolor('lightgreen')\naxs[1, 1].set_facecolor('lightsalmon')\naxs[2, 0].set_facecolor('lightsteelblue')\naxs[2, 1].set_facecolor('lightyellow')\n\n# Set the title of each subplot\naxs[0, 0].set_title('physicsforums.com 18.42%')\naxs[0, 1].set_title('gmatclub.com 6.26%')\naxs[1, 0].set_title('stackexchange.com 30.6%')\naxs[1, 1].set_title('mathworks.com 4.91%')\naxs[2, 0].set_title('mathoverflow.net 10.91%')\naxs[2, 1].set_title('mathhelpforum.com 14.21%')\n\n# Set the text of each subplot\naxs[0, 0].text(0.5, 0.5, 'physicsforums.com', horizontalalignment='center', verticalalignment='center', fontsize=12)\naxs[0, 1].text(0.5, 0.5, 'gmatclub.com', horizontalalignment='center', verticalalignment='center', fontsize=12)\naxs[1, 0].text(0.5, 0.5, 'stackexchange.com', horizontalalignment='center', verticalalignment='center', fontsize=12)\naxs[1, 1].text(0.5, 0.5, 'mathworks.com', horizontalalignment='center', verticalalignment='center', fontsize=12)\naxs[2, 0].text(0.5, 0.5, 'mathoverflow.net', horizontalalignment='center', verticalalignment='center', fontsize=12)\naxs[2, 1].text(0.5, 0.5, 'mathhelpforum.com', horizontalalignment='center', verticalalignment='center', fontsize=12)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('#f5f5f5')\n\n# Create a bar chart with the data\nax.bar(['Java', 'Python', 'JavaScript', 'C++'], [10, 20, 27, 23], color='#9c27b0')\n\n# Add labels to the bars\nfor i, v in enumerate([10, 20, 27, 23]):\n    ax.text(i, v + 1, str(v) + '%', ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Programming Language Popularity')\n\n# Set the x-axis label\nax.set_xlabel('Programming Languages')\n\n# Set the y-axis label\nax.set_ylabel('Popularity (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.5, 0.9), 0.4, 0.1, color='blue')\nax.add_patch(logo)\n\n# Create a rectangle for the product categories\nproduct_categories = plt.Rectangle((0.5, 0.7), 0.4, 0.2, color='lightgreen')\nax.add_patch(product_categories)\n\n# Create a rectangle for the latest products\nlatest_products = plt.Rectangle((0.5, 0.5), 0.4, 0.3, color='orange')\nax.add_patch(latest_products)\n\n# Create a rectangle for the latest promotions\nlatest_promotions = plt.Rectangle((0.5, 0.2), 0.4, 0.3, color='pink')\nax.add_patch(latest_promotions)\n\n# Set the title of the plot\nax.set_title('Sports Brand Website', fontsize=20)\n\n# Set the x and y limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Create a bar chart with the data\nax.bar(['5%', '15%', '20%'], [5, 15, 20], color='blue')\n\n# Set the title of the plot\nax.set_title('Stock Market Performance')\n\n# Set the x-axis label\nax.set_xlabel('Time Period')\n\n# Set the y-axis label\nax.set_ylabel('Percentage Change')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Global Stock Market')\n\n# Create a rectangle for the European stock market\nrect1 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='yellow')\nax.add_patch(rect1)\nax.text(0.5, 0.9, 'European 15%', ha='center', va='center')\n\n# Create a rectangle for the Australian stock market\nrect2 = plt.Rectangle((0.1, 0.4), 0.8, 0.2, color='purple')\nax.add_patch(rect2)\nax.text(0.5, 0.6, 'Australian 18%', ha='center', va='center')\n\n# Create a rectangle for the Asian stock market\nrect3 = plt.Rectangle((0.1, 0.1), 0.8, 0.2, color='pink')\nax.add_patch(rect3)\nax.text(0.5, 0.3, 'Asian 25%', ha='center', va='center')\n\n# Create a rectangle for the South American stock market\nrect4 = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='cyan')\nax.add_patch(rect4)\nax.text(0.5, 0.9, 'South American 10%', ha='center', va='center')\n\n# Create a rectangle for the African stock market\nrect5 = plt.Rectangle((0.7, 0.7), 0.4, 0.2, color='skyblue')\nax.add_patch(rect5)\nax.text(0.5, 0.9, 'African 12%', ha='center', va='center')\n\n# Create a rectangle for the North American stock market\nrect6 = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='limegreen')\nax.add_patch(rect6)\nax.text(0.5, 0.3, 'North American 20%', ha='center', va='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL)')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Add a legend\nax.legend(['Llama2', 'Llama2 (In-Chat)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Scores with and without Memory')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='hot'), ax=ax)\n\n# Set the labels for the color bar\ncbar.set_label('Score')\n\n# Set the labels for the x-axis\nax.set_xlabel('Memory Type')\nax.set_xticks([0, 5, 10])\nax.set_xticklabels(['Without Memory', 'With Memory'])\n\n# Set the labels for the y-axis\nax.set_ylabel('Efficiency')\nax.set_yticks([0, 5, 10])\nax.set_yticklabels(['High', 'Medium', 'Low'])\n\n# Add stars to the plot\nax.plot([0, 5, 10], [0, 5, 10], 'ro')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the bar chart\ncategories = ['Efficiency', 'Comfort', 'Safety']\nvalues = [0.8, 0.7, 0.9]\ncolors = ['pink', 'lightblue']\n\n# Create a bar chart\nax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Score')\nax.set_title('Car Comparison')\n\n# Add a legend\nax.legend(['Without Memory', 'With Memory'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Create a bar chart with the data\nax.bar(range(1, 7), [0.5, 0.3, 0.8, 0.9, 0.7, 0.6], color='green')\n\n# Set the x-axis labels\nax.set_xticks(range(1, 7))\nax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data for the plot\nx = ['jTrans', 'PalmTree', 'CLAP']\ny = [0.7, 0.8, 0.9]\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Accuracy of Models')\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the teacher style\nteacher_style = plt.Rectangle((0.1, 0.1), 0.8, 0.8, fc='darkblue', ec='black')\nax.add_patch(teacher_style)\n\n# Create a rectangle for the standardize style\nstandardize_style = plt.Rectangle((0.2, 0.2), 0.6, 0.6, fc='orange', ec='black')\nax.add_patch(standardize_style)\n\n# Create a circle for the student performance\nstudent_performance = plt.Circle((0.5, 0.5), 0.3, fc='yellow', ec='black')\nax.add_patch(student_performance)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Student Performance by Teaching Style')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.5, 0.5), 0.1, 0.1, color='black')\nax.add_patch(logo)\n\n# Create a circle for the product images\nvanilla = plt.Circle((0.3, 0.7), 0.3, color='pink')\ncot = plt.Circle((0.7, 0.7), 0.3, color='skyblue')\n\n# Add the circles to the plot\nax.add_artist(vanilla)\nax.add_artist(cot)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Product Comparison')\n\n# Set the labels of the plot\nax.set_xlabel('Products')\nax.set_ylabel('Customer Satisfaction')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('% Decrease in Test MSE vs. FLAM-GL')\n\n# Create a bar chart with the data\nax.bar(['Group l0', 'AGIS'], [163, 97], color='skyblue')\nax.bar(['Group l0', 'AGIS'], [201, 97], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Number of Features')\n\n# Set the y-axis label\nax.set_ylabel('% Decrease in Test MSE')\n\n# Display the plot\nplt.show()\n\n# Create a second figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('% Decrease in Test MSE vs. EBM-RS')\n\n# Create a bar chart with the data\nax.bar(['Group l0', 'AGIS'], [163, 97], color='skyblue')\nax.bar(['Group l0', 'AGIS'], [201, 97], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Number of Features')\n\n# Set the y-axis label\nax.set_ylabel('% Decrease in Test MSE')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data\nx = np.array([0.88, 0.85, 0.79, 0.67, 0.57])\ny = np.array([0.18, 0.19, 0.19, 0.18, 0.16])\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\narea = np.pi * (np.array([2, 2, 2, 2, 2]))**2  # 0 to 15 point radii\n\n# Plot the scatter plot\nscatter = ax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Add labels and title\nax.set_xlabel('Decimated Sampling Rate')\nax.set_ylabel('KCC')\nax.set_title('KCC vs Decimated Sampling Rate')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\ncbar.set_label('Pearson R')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Distribution of Grades: Class 1')\n\n# Create a bar chart\nax.bar(['Boys', 'Girls'], [95, 85], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Gender')\n\n# Set the y-axis label\nax.set_ylabel('Grades')\n\n# Display the plot\nplt.show()\n```"}
