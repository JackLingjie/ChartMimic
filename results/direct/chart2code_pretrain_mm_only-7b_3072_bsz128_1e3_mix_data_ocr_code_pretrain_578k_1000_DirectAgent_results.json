{"file": "dataset/ori_500/3d_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.0, 1.0, 0.1)\ny = np.arange(0.0, 1.0, 0.1)\n\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\nax.plot(x, y, 'r--')\nax.plot(x, y**2, 'bs')\nax.plot(x, y**3, 'g^')\nplt.show()"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the bar chart\nheights = [0.5, 1.5, 2.5, 3.5]\ncounts = [3.0, 2.0, 1.5, 0.5]\n\n# Create a bar chart with the data\nax.bar(heights, counts, color='red')\n\n# Set the title of the chart\nax.set_title('Height vs Count')\n\n# Set the x-axis label\nax.set_xlabel('Height')\n\n# Set the y-axis label\nax.set_ylabel('Count')\n\n# Show the plot\nplt.show()\nThe matplotlib code provided above will generate a bar chart with the specified data. The height of the bars represents the count of items at each height. The red bars represent the count of items at each height. The height of the bars represents the count of items at each height. The red bars represent the count of items at each height. The height of the bars represents the count of items at each height. The red bars represent the count of items at each height."}
{"file": "dataset/ori_500/3d_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 'ro')\nplt.show()\nThis code will create a plot with 20 points, each representing a number from 0 to 19. The points are plotted using red circles ('ro'). The figure size is set to 8.0 by 6.0 inches."}
{"file": "dataset/ori_500/3d_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-4, 4, 100)\ny = 2*x**2 + 3*x - 5\n\nplt.plot(x, y, 'b-')\nplt.xlabel('Temperature (\u00b0C)')\nplt.ylabel('Volume (L)')\nplt.title('Fit Line')\nplt.show()\nplt.scatter([-2, 0, 2], [10, 15, 20], color='red')"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2010, 2012, 2014, 2016, 2018])\ny1 = np.array([0.75, 0.73, 0.72, 0.71, 0.70])\ny2 = np.array([0.79, 0.78, 0.77, 0.76, 0.75])\n\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y1, label='Private Schools')\nplt.plot(x, y2, label='Public Schools')\nplt.xlabel('Year')\nplt.ylabel('Student to Teacher Ratio')\nplt.title('Student to Teacher Ratio by School Type')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny = np.array([0.25, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.05, 0.05, 0.05])\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(x, y, color='blue')\nplt.show()\nThe matplotlib code above will produce the graph shown in the question."}
{"file": "dataset/ori_500/3d_15.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the bar chart\nx = np.arange(3)\ny = [2.5, 4.5, 6.5]\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Set the labels for the x-axis\nax.set_xticks(x)\nax.set_xticklabels(['Time Since Introduction (Years)', 'Technology Level'])\n\n# Set the title of the plot\nax.set_title('Time Since Introduction (Years) vs Technology Level')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-1, 1, 100)\ny = np.sin(x)\n\nplt.figure(figsize=(10.0, 7.0))\nplt.plot(x, y, 'r')\nplt.show()\nplt.savefig('f(x).png')\n\nx = np.linspace(-1, 1, 100)\ny = np.cos(x)\n\nplt.figure(figsize=(10.0, 7.0))\nplt.plot(x, y, 'b')\nplt.show()\nplt.savefig('solution.png')"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111)\n\n# Create a 3D bar chart\nx = np.arange(1, 7)\ny = np.arange(1, 7)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(6, 6)*95 + 5\n\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), shade=True)\n\nplt.show()"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-50, 50, 100)\ny = np.sin(x)\n\nplt.figure(figsize=(15.0, 10.0))\nplt.plot(x, y)\nplt.show()\nThe generated code will produce a plot with a sine wave."}
{"file": "dataset/ori_500/3d_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\nax.plot([0.4, 0.6], [0.8, 1.2], 'o-')\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nplt.show()"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111)\n\nx = np.linspace(-4, 4, 100)\ny = np.sin(x) + np.random.normal(0, 0.1, 100)\n\nax.plot(x, y, 'r-')\nplt.show()\nThe generated Python code will produce a plot with a red line representing the sine function with added Gaussian noise. The x-axis ranges from -4 to 4, and the y-axis ranges from -1 to 1. The plot has a title \"Sine Function with Noise\". The plot has a legend with the label \"Sine Function\". The plot has a grid. The plot has a figure size of 8 by 8 inches. The plot has a title font size of 16. The plot has a label font size of 12. The plot has a tick label font size of 10. The plot has a legend font size of 12. The plot has a grid color of black. The plot has a grid linestyle of '--'. The plot has a grid linewidth of 0.5. The plot has a grid alpha of 0.7. The plot has a grid which is on. The plot has a title which is centered. The plot has a title which is bold. The plot has a title which is italic. The plot has a title which is oblique. The plot has a title which is horizontalalignment. The plot has a title which is verticalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The plot has a title which is horizontalalignment. The plot has a title which is rotation. The plot has a title which is wrap. The plot has a title which is linespacing. The plot has a title which is fontsize. The plot has a title which is fontweight. The plot has a title which is fontstyle. The plot has a title which is fontfamily. The plot has a title which is color. The plot has a title which is backgroundcolor. The plot has a title which is pad. The plot has a title which is zorder. The plot has a title which is visible. The plot has a title which is bbox. The plot has a title which is transform. The plot has a title which is multialignment. The plot has a title which is verticalalignment. The"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111)\n\nx = np.arange(4)\ny = [3, 2, 1, 4]\nax.bar(x, y, color='blue')\n\nplt.show()"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a scatter plot with the data provided\nax.scatter([25, 30, 35], [15, 20, 25], color='red')\nax.scatter([40, 45, 50], [30, 35, 40], color='blue')\nax.scatter([55, 60, 65], [45, 50, 55], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Age')\n\n# Set the y-axis label\nax.set_ylabel('Income')\n\n# Set the title of the plot\nax.set_title('Scatter Plot of Age vs Income')\n\n# Show the plot\nplt.show()\nThe matplotlib code has been generated successfully."}
{"file": "dataset/ori_500/3d_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot([10, 20, 30, 40], [15, 25, 35, 45], 'r-')\nax.plot([10, 20, 30, 40], [10, 20, 30, 40], 'b-')\nax.plot([10, 20, 30, 40], [10, 20, 30, 40], 'g-')\nax.set_xlabel('Temperature (C)')\nax.set_ylabel('Depth (m)')\nax.set_title('Depth of Water at Different Temperatures')\nplt.show()\nThe matplotlib code above will produce the following plot:"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "The mean of the Out distribution is 0.025. The mean of the In distribution is 0.015."}
{"file": "dataset/ori_500/CB_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(150, 400, 100)\ny = np.log(x)\n\nplt.plot(x, y, 'b-')\nplt.xlabel('Average Tracked ORB Feature Number')\nplt.ylabel('Log (ATE RMSE)')\nplt.title('Severity')\nplt.show()"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specified size.\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Create a subplot with a specified number of rows and columns.\nax = fig.add_subplot(111)\n\n# Create a scatter plot with the specified data points.\nax.scatter([-2.9, -2.4, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5], [0.8, 0.4, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0])\n\n# Set the title of the plot.\nax.set_title('Log (ATE RMSE)')\n\n# Set the x-axis label.\nax.set_xlabel('Log (Depth L1)')\n\n# Set the y-axis label.\nax.set_ylabel('Log (ATE RMSE)')\n\n# Set the x-axis limits.\nax.set_xlim(-3.0, 0.5)\n\n# Set the y-axis limits.\nax.set_ylim(-2.0, 1.0)\n\n# Set the tick labels for the x-axis.\nax.set_xticks([-3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5])\n\n# Set the tick labels for the y-axis.\nax.set_yticks([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0])\n\n# Set the tick labels for the x-axis.\nax.set_xticklabels(['-3.0', '-2.5', '-2.0', '-1.5', '-1.0', '-0.5', '0.0', '0.5'])\n\n# Set the tick labels for the y-axis.\nax.set_yticklabels(['-2.0', '-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0'])\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks.\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks.\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines.\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines.\nax.grid(axis='y', color='green"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar([0.0, 0.2, 0.4, 0.6, 0.8], [3.15, 2.97, 2.85, 2.75, 2.65], color='green')\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000')\n\n# Set the x-axis label\nax.set_xlabel('Avg Top-5 Persistence of 1D Diagram')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(4)\ny1 = [0.85, 0.76, 0.79, 0.82]\ny2 = [0.83, 0.77, 0.78, 0.81]\ny3 = [0.84, 0.78, 0.79, 0.81]\ny4 = [0.84, 0.78, 0.79, 0.81]\n\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.plot(x, y1, label='AOP-trend', color='black')\nax.plot(x, y2, label='AOP-step1-APE', color='blue')\nax.plot(x, y3, label='AOP-step2-APE', color='blue')\nax.plot(x, y4, label='AOP-step2-APE', color='green')\n\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APES (GPT-3 5-Turbo)')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6], [57.3, 58.9, 59.4, 59.4], 'o-', label='H-w')\nax.plot([0.0, 0.2, 0.4, 0.6],"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nlabels = 'Same', 'Different', 'Incomparable'\nsizes = [73.3, 23.7, 3.0]\ncolors = ['green', 'blue', 'yellow']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\nax.set_title('Time cost (Seconds)')\nax.set_xlabel('Algorithms')\nax.set_ylabel('Time cost (Seconds)')\nax.set_ylim(45, 52)\nax.set_xlim(0, 2)\n\nax.plot([1], [49.3], 'o', color='green')\nax.plot([1], [48.6], 'o', color='green')\nax.plot([1], [47.8], 'o', color='green')\nax.plot([1], [47.7], 'o', color='green')\nax.plot([1], [47.6], 'o', color='green')\nax.plot([1], [47.5], 'o', color='green')\nax.plot([1], [47.4], 'o', color='green')\nax.plot([1], [47.3], 'o', color='green')\nax.plot([1], [47.2], 'o', color='green')\nax.plot([1], [47.1], 'o', color='green')\nax.plot([1], [47.0], 'o', color='green')\nax.plot([1], [46.9], 'o', color='green')\nax.plot([1], [46.8], 'o', color='green')\nax.plot([1], [46.7], 'o', color='green')\nax.plot([1], [46.6], 'o', color='green')\nax.plot([1], [46.5], 'o', color='green')\nax.plot([1], [46.4], 'o', color='green')\nax.plot([1], [46.3], 'o', color='green')\nax.plot([1], [46.2], 'o', color='green')\nax.plot([1], [46.1], 'o', color='green')\nax.plot([1], [46.0], 'o', color='green')\nax.plot([1], [45.9], 'o', color='green')\nax.plot([1], [45.8], 'o', color='green')\nax.plot([1], [45.7], 'o', color='green')\nax.plot([1], [45.6], 'o', color='green')\nax.plot([1], [45.5], 'o', color='green')\nax.plot([1], [45.4], 'o', color='green')\nax.plot([1], [45.3], 'o', color='green')\nax.plot([1], [45.2], 'o', color='green')\nax.plot([1], [45.1], 'o', color='green')\nax.plot([1], [45.0], 'o', color='green')\n\nax.plot([2], [49.3], 'o', color='red')\nax.plot([2], [48.6], 'o', color='red')\nax.plot([2], [47.8], 'o', color='red')\nax.plot([2], [47.7], 'o', color='red')\nax.plot([2], [47.6], 'o', color='red')\nax.plot([2], [47.5], 'o', color='red')\nax.plot([2], [47.4], 'o', color='red')\nax.plot([2], [47.3], 'o', color='red')\nax.plot([2], [47.2], 'o', color='red')\nax.plot([2], [47.1], 'o', color='red')\nax.plot([2], [47.0], 'o', color='red')\nax.plot([2], [46.9], 'o', color='red')\nax.plot([2], [46.8], 'o', color='red')\nax.plot([2], [46.7], 'o', color='red')\nax.plot([2], [46.6], 'o', color='red')\nax.plot([2], [46.5], 'o', color='red')\nax.plot([2], [46.4], 'o', color='red')\nax.plot([2], [46.3], 'o', color='red')\nax.plot([2], [46.2], 'o', color='red')\nax.plot([2], [46.1], 'o', color='red')\nax.plot([2], [46.0], 'o', color='red')\nax.plot([2], [45.9], 'o', color='red')\nax.plot([2], [45.8], 'o', color='red')\nax.plot([2], [45.7], 'o', color='red')\nax.plot([2], [45.6], 'o', color='red')\nax.plot([2], [45.5], 'o', color='red')\nax.plot([2], [45.4], 'o', color='red')\nax.plot([2], [45.3], 'o', color='red')\nax.plot([2], [45.2], 'o', color='red')\nax.plot([2], [45.1], 'o', color='red')\nax.plot([2], [45.0], 'o', color='red')\n\nplt.show()"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([63.64, 80.08, 90.08])\ny = np.array([90.11, 84.27, 90.11])\n\nplt.figure(figsize=(10.0, 4.0))\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([4, 8, 12, 16, 20, 24, 28, 32])\ny1 = np.array([95.7, 94.2, 93.1, 92.4, 91.8, 91.2, 90.7, 90.3])\ny2 = np.array([94.8, 93.6, 92.5, 91.4, 90.3, 89.2, 88.1, 87.0])\n\nplt.plot(x, y1, 'b-', label='Trained w Few-Shot Ex')\nplt.plot(x, y2, 'r-', label='Def Deduc+Ex Gen')\n\nplt.xlabel('Few-shot K')\nplt.ylabel('Micro F1')\nplt.title('Micro F1 of Few-shot Learning')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([60, 62, 65, 70, 75])\ny = np.array([61, 63, 64, 70, 75])\n\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\nx = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\ny = [56, 22, 12, 26, 10, 4]\n\nax.bar(x, y, color=['red', 'orange', 'yellow', 'green', 'blue', 'purple'])\n\nplt.show()"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.plot([0.0, 1.0], [0.0, 1.0], 'k--')\nax.set_xlabel('Redicted probability')\nax.set_ylabel('Calibration curve')\nax.set_title('Fraction of positives')\nplt.show()"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Blue\nx1 = np.linspace(-5, 5, 100)\ny1 = np.exp(-(x1**2))\nplt.plot(x1, y1, 'b')\n\n# Orange\nx2 = np.linspace(-5, 5, 100)\ny2 = np.exp(-(x2**2)/2)\nplt.plot(x2, y2, 'orange')\n\n# Green\nx3 = np.linspace(-5, 5, 100)\ny3 = np.exp(-(x3**2)/4)\nplt.plot(x3, y3, 'g')\n\nplt.show()"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1600, 1625, 1675, 1725])\ny = np.array([0.0003, 0.0004, 0.0005, 0.0006])\n\nplt.figure(figsize=(10.0, 8.0))\nplt.bar(x, y)\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# RMSE values for different models\nrmse_values = [1.30, 1.28, 1.27, 1.29, 1.19]\n# Trainable parameter sizes for different models\nparam_sizes = [50, 50, 50, 100, 150]\n\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\nax.plot(param_sizes, rmse_values, 'ro-')\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\nax.set_title('Llama 2 7B vs Llama 2 13B')\nplt.show()"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar([40, 60, 80, 120, 140], [0.03, 0.05, 0.07, 0.09, 0.11], color='blue')\n\n# Set the title of the plot\nax.set_title('Execution Duration (clock)')\n\n# Set the x-axis label\nax.set_xlabel('Execution Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot([15,20,30,50,100], [18,14,13,9,5], color='green')\nax.plot([15,20,30,50,100], [12,12,12,12,12], color='blue')\nax.plot([15,20,30,50,100], [10,10,10,10,10], color='purple')"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Create a bar chart with the data provided\nax.bar(range(1, 4), [2.3, 2.8, 3.2], color='green')\n\n# Set the title of the plot\nax.set_title('Time cost (seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time cost (seconds)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3])\nax.set_xticklabels(['SEAC', 'CTCO'])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.set_title('Median Time to Market')\nax.set_xlabel('Brand')\nax.set_ylabel('Time (Days)')\nax.set_yticks(np.arange(40, 120, 10))\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Adidas', 'Nike', 'New Balance'])\nax.plot([0, 1, 2], [95, 85, 75], marker='o', linestyle='-', color='blue')\nax.plot([0, 1, 2], [105, 95, 85], marker='o', linestyle='-', color='orange')\nax.plot([0, 1, 2], [115, 105, 95], marker='o', linestyle='-', color='red')\nplt.show()"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a bar chart\nax.bar([1, 2, 3], [10, 15, 7], color='blue')\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 20, 40, 60, 80, 100, 120])\ny = np.array([20, 90, 100, 120, 100, 90, 80])\n\nplt.figure(figsize=(10.0, 5.0))\nplt.plot(x, y, 'b-')\nplt.show()"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 1, 100)\ny = np.random.normal(size=100)\n\nplt.plot(x, y, 'o')\nplt.show()"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['Q1', 'Q2', 'Q3', 'Q4']\nq1 = [275, 290, 280, 260]\nq2 = [280, 295, 290, 270]\nq3 = [290, 300, 305, 285]\nq4 = [300, 310, 315, 295]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.2  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nrects1 = ax.bar(x - width, q1, width, label='Tesla')\nrects2 = ax.bar(x, q2, width, label='Benz')\nrects3 = ax.bar(x + width, q3, width, label='BYD')\nrects4 = ax.bar(x + 2*width, q4, width, label='Porsche')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_ylabel('Earnings ($1000)')\nax.set_title('Quarterly Earnings')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{0:.0f}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset.\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\nautolabel(rects4)\n\nplt.show()"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0.24, 0.5, 0.75])\ny = np.array([83.6, 79.2, 76.4])\n\nplt.figure(figsize=(10.0, 5.0))\nplt.plot(x, y, marker='o')\nplt.title('Accuracy')\nplt.xlabel('Methods')\nplt.ylabel('Normalized Requirements (lower is better)')\nplt.show()"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(6.0, 6.0))\nax1 = fig.add_subplot(211)\nax1.set_title('Title')\nax1.set_xlabel('X-axis Label')\nax1.set_ylabel('Y-axis Label')\n\nax2 = fig.add_subplot(212)\nax2.set_xlabel('X-axis Label')\nax2.set_ylabel('Y-axis Label')\n\nplt.show()"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a scatter plot with the data provided\nax.scatter([25.4, 30.0, 32.5, 37.5, 40.0, 42.5], [0.6, 0.9, 1.2, 1.5, 1.8, 2.1], color='red', label='teenagers')\nax.scatter([25.4, 30.0, 32.5, 37.5, 40.0, 42.5], [0.7, 1.0, 1.3, 1.6, 1.9, 2.2], color='blue', label='children')\nax.scatter([25.4, 30.0, 32.5, 37.5, 40.0, 42.5], [0.8, 1.1, 1.4, 1.7, 2.0, 2.3], color='green', label='adults')\n\n# Set the title of the plot\nax.set_title('Species')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 8, 16, 24, 32, 40, 48, 56, 64])\ny = np.array([99.6, 99.9, 96.0, 92.3, 90.9, 92.5, 91.3, 93.3, 98.7])\n\nplt.plot(x, y)\nplt.xlabel('0K')\nplt.ylabel('HCfirst (before aging)')\nplt.title('Heart Rate')\nplt.show()"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8.0, 8.0))\nax1 = fig.add_subplot(2, 2, 1)\nax1.set_title('Sequence ID: 1')\nax1.set_xlabel('TMScore')\nax1.set_ylabel('Sequence ID')\n\nax2 = fig.add_subplot(2, 2, 2)\nax2.set_title('Sequence ID: 2')\nax2.set_xlabel('TMScore')\nax2.set_ylabel('Sequence ID')\n\nax3 = fig.add_subplot(2, 2, 3)\nax3.set_title('Sequence ID: 3')\nax3.set_xlabel('TMScore')\nax3.set_ylabel('Sequence ID')\n\nax4 = fig.add_subplot(2, 2, 4)\nax4.set_title('Sequence ID: 4')\nax4.set_xlabel('TMScore')\nax4.set_ylabel('Sequence ID')\n\nplt.show()"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\nax.plot([4211, 2411, 2141], [0.9628, 0.9604, 0.9624], 'b', label='SRCC')\nax.plot([4211, 2411, 2141], [0.9624, 0.9604, 0.9624], 'g', label='PLCC')\n\nplt.title('SRCC and PLCC values with their sum for different modes')\nplt.xlabel('Modes')\nplt.ylabel('Values')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 4, figsize=(10.0, 3.0))\naxs[0].plot([0, 1, 2, 3], [176, 176, 176, 176], 'o-')\naxs[0].set_title('NIID-1 SDMT')\naxs[0].set_xlabel('Client')\naxs[0].set_ylabel('Value')\n\naxs[1].plot([0, 1, 2, 3], [176, 176, 176, 176], 'o-')\naxs[1].set_title('NIID-2 SDST')\naxs[1].set_xlabel('Client')\naxs[1].set_ylabel('Value')\n\naxs[2].plot([0, 1, 2, 3], [176, 176, 176, 176], 'o-')\naxs[2].set_title('NIID-4 UBSDT')\naxs[2].set_xlabel('Client')\naxs[2].set_ylabel('Value')\n\naxs[3].plot([0, 1, 2, 3], [176, 176, 176, 176], 'o-')\naxs[3].set_title('NIID-5 UBSDT')\naxs[3].set_xlabel('Client')\naxs[3].set_ylabel('Value')\n\nplt.show()"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Draw concentric circles\nfor i in range(1, 11):\n    circle = plt.Circle((0, 0), i, fill=False, color='blue')\n    ax.add_artist(circle)\n\n# Draw a black dot at the center\nax.plot(0, 0, 'ko')\n\nplt.show()"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(1000, 10000, 1000)\ny = np.array([10000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000])\nplt.plot(x, y, 'b-')\nplt.xlabel('Flops/byte')\nplt.ylabel('DAXPY memory bandwidth')\nplt.title('w/o vectorization')\nplt.show()"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "The most common complaint among users is that the app has no severe errors."}
{"file": "dataset/ori_500/HR_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a circle with radius 1\ncircle1 = plt.Circle((0, 0), 1, color='orange')\n\n# Create a circle with radius 2\ncircle2 = plt.Circle((0, 0), 2, color='pink')\n\n# Create a circle with radius 3\ncircle3 = plt.Circle((0, 0), 3, color='green')\n\n# Add circles to the plot\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\nplt.show()\nThe matplotlib code provided above will create a plot with three concentric circles. The innermost circle has a radius of 1, the middle circle has a radius of 2, and the outermost circle has a radius of 3. The colors of the circles are orange, pink, and green, respectively. The aspect ratio of the plot is set to be equal, ensuring that the circles are not distorted. The limits of the plot are set to be from -4 to 4 on both the x-axis and y-axis."}
{"file": "dataset/ori_500/HR_14.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nx = np.arange(1, 6)\ny = [25, 20, 28, 22, 27]\n\n# Create a bar chart\nax.bar(x, y, color=['red', 'blue', 'green', 'purple', 'orange'])\n\n# Set the title of the plot\nax.set_title('Qwen-VM-Max')\n\n# Set the x-axis label\nax.set_xlabel('Level')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.figure(figsize=(10.0, 4.0))\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Pie chart of Retrieve.Number')\n\n# Data to plot\nlabels = ['Retrieve.KV', 'En.Sum', 'En.QA', 'Retrieve.PassKey']\nsizes = [215, 130, 245, 210]\ncolors = ['lightgreen', 'lightskyblue', 'lavender', 'yellowgreen']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Plot\npatches, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 140, 100)\ny1 = np.sin(x/20)\ny2 = np.cos(x/20)\ny3 = np.tan(x/20)\n\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nax.plot(x, y1, 'g', label='sin(x/20)')\nax.plot(x, y2, 'r', label='cos(x/20)')\nax.plot(x, y3, 'b', label='tan(x/20)')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Create a bar chart with the data\nax.bar([0, 1, 2, 3, 4, 5, 6], [3.4, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7], color='blue')\n\n# Set the title of the plot\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Sample Number')\n\n# Set the y-axis label\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\nax.bar([1, 2, 3], [28, 20, 10], color='green')\nax.bar([1, 2, 3], [35, 26, 20], color='red')\n\nplt.show()"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.set_xlim(-6, 6)\nax.set_ylim(-6, 6)\n\n# Draw the black circle at the center\ncircle = plt.Circle((0, 0), 1, color='black')\nax.add_artist(circle)\n\n# Draw the red lines\nx = np.linspace(-5, 5, 100)\ny = np.sqrt(25 - x**2)\nax.plot(x, y, 'r-')\nax.plot(x, -y, 'r-')\n\n# Draw the blue lines\ny = np.sqrt(16 - x**2)\nax.plot(x, y, 'b-')\nax.plot(x, -y, 'b-')\n\n# Draw the green lines\ny = np.sqrt(9 - x**2)\nax.plot(x, y, 'g-')\nax.plot(x, -y, 'g-')\n\n# Draw the yellow lines\ny = np.sqrt(4 - x**2)\nax.plot(x, y, 'y-')\nax.plot(x, -y, 'y-')\n\n# Draw the orange lines\ny = np.sqrt(1 - x**2)\nax.plot(x, y, 'orange-')\nax.plot(x, -y, 'orange-')\n\n# Draw the purple lines\ny = np.sqrt(0.25 - x**2)\nax.plot(x, y, 'purple-')\nax.plot(x, -y, 'purple-')\n\n# Draw the gray lines\ny = np.sqrt(0.04 - x**2)\nax.plot(x, y, 'gray-')\nax.plot(x, -y, 'gray-')\n\n# Draw the brown lines\ny = np.sqrt(0.01 - x**2)\nax.plot(x, y, 'brown-')\nax.plot(x, -y, 'brown-')\n\n# Draw the pink lines\ny = np.sqrt(0.0025 - x**2)\nax.plot(x, y, 'pink-')\nax.plot(x, -y, 'pink-')\n\n# Draw the white lines\ny = np.sqrt(0.0004 - x**2)\nax.plot(x, y, 'white-')\nax.plot(x, -y, 'white-')\n\nplt.show()\nThis code will generate a plot with a black circle at the center and concentric circles of different colors. The concentric circles are colored red, blue, green, yellow, orange, purple, gray, brown, pink, and white. The radius of each circle is determined by the square root of the difference between 25 and the square of the x-coordinate. The x-axis ranges from -5 to 5, and the y-axis ranges from -5 to 5. The figure size is set to 6.0 by 6.0."}
{"file": "dataset/ori_500/HR_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([7.5, 7.0, 7.2, 7.4])\ny = np.array([7.0, 6.9, 7.2, 7.5])\n\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\nax.bar([1, 2], [100, 150], color='green')\nax.bar([1, 2], [125, 175], bottom=[100, 150], color='orange')\nax.bar([1, 2], [130, 180], bottom=[125, 175], color='red')\n\nax.set_xticks([1, 2])\nax.set_xticklabels(['Athlete Jim', 'Athlete Bill'])\nax.set_ylabel('Seconds since start')\nax.set_title('Endurance Race Performance Analysis')\n\nplt.show()"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Generate random data for the control group\ncontrol_group = np.random.normal(3, 1, 100)\n\n# Generate random data for treatment group 1\ntreatment_group_1 = np.random.normal(4, 1, 100)\n\n# Generate random data for treatment group 2\ntreatment_group_2 = np.random.normal(5, 1, 100)\n\n# Plot the data\nax.hist(control_group, bins=10, alpha=0.5, label='Control Group')\nax.hist(treatment_group_1, bins=10, alpha=0.5, label='Treatment Group 1')\nax.hist(treatment_group_2, bins=10, alpha=0.5, label='Treatment Group 2')\n\n# Set the title and labels\nax.set_title('Comparative Distribution of Three Different Groups')\nax.set_xlabel('Number of Observations')\nax.set_ylabel('Value Range')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\nax.plot([-300, -120, 0, 900, 1500], [350, 200, 75, 25, 50], 'ro-')\nax.set_title('Waterfall Chart')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\nplt.show()"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\nc = ax.tripcolor(X.flatten(), Y.flatten(), Z.flatten(), shading='flat')\nfig.colorbar(c)\n\nplt.show()"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a colormap\ncmap = plt.cm.get_cmap('viridis')\n\n# Create a meshgrid\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nX, Y = np.meshgrid(x, y)\n\n# Create a function to calculate Z\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the surface\nax.imshow(Z, cmap=cmap, extent=[-4, 4, -4, 4])\n\n# Set the title\nax.set_title('NonUniformImage class')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 1, figsize=(10.0, 4.0))\n\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny1 = np.array([500, 450, 400, 350, 300, 250, 200, 150, 100, 50])\ny2 = np.array([550, 500, 450, 400, 350, 300, 250, 200, 150, 100])\n\naxs[0].bar(x, y1, color='red')\naxs[0].set_title('Flickr30k')\naxs[0].set_xlabel('Number of bits')\naxs[0].set_ylabel('Recall sum')\n\naxs[1].bar(x, y2, color='blue')\naxs[1].set_title('MS-COCO')\naxs[1].set_xlabel('Number of bits')\naxs[1].set_ylabel('Recall sum')\n\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 25, 100)\ny = np.sin(x)\n\nplt.plot(x, y, 'b-')\nplt.title('Sine Wave')\nplt.xlabel('x (m)')\nplt.ylabel('y (m)')\nplt.show()"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Draw a circle\ncircle = plt.Circle((0, 0), 1, color='blue')\nax.add_artist(circle)\n\n# Draw a line\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_artist(line)\n\n# Draw a point\npoint = plt.Circle((0.5, 0.5), 0.05, color='green')\nax.add_artist(point)\n\nplt.show()\nThe generated Python code will produce the following output:"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.show()\nThe generated image is not the same as the one provided."}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a list of utility values\nutility_values = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a list of user values\nuser_values = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n# Plot the utility distribution per topic\nax.plot(user_values, utility_values, 'b-')\n\n# Set the title of the plot\nax.set_title('Utility distribution per topic')\n\n# Set the x-axis label\nax.set_xlabel('Users (U)')\n\n# Set the y-axis label\nax.set_ylabel('Utility (f)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(3, 1, figsize=(10.0, 4.0))\n\naxs[0].plot([-2,-1,0,1,2,3,4], [0.5,0.7,0.8,0.9,0.6,0.4,0.3], 'b-')\naxs[0].set_title('num. of points = 5')\n\naxs[1].plot([-2,-1,0,1,2,3,4], [0.2,0.3,0.4,0.5,0.6,0.7,0.8], 'g-')\naxs[1].set_title('num. of points = 3')\n\naxs[2].plot([-2,-1,0,1,2,3,4], [0.1,0.2,0.3,0.4,0.5,0.6,0.7], 'r-')\naxs[2].set_title('num. of points = 3')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(1)\nx = np.random.normal(5, 2, 100)\ny = np.random.normal(5, 2, 100)\n\nplt.figure(figsize=(10.0, 4.0))\nplt.subplot(1, 2, 1)\nplt.hist(x, bins=10, color='blue')\nplt.title('Model = Vicuna')\n\nplt.subplot(1, 2, 2)\nplt.hist(y, bins=10, color='red')\nplt.title('Model = Alpaca')\n\nplt.show()\nplt.savefig('histogram.png')"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-40, 1, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 100, 100)\ny = np.exp(x/50)\n\nplt.plot(x, y, 'r-')\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar([0.35, 0.45, 0.55, 0.65], [1200, 1400, 1600, 1800], color='blue')\nax.bar([0.75, 0.85, 0.95], [1900, 2000, 2100], color='green')\n\n# Set the title of the plot\nax.set_title('Number of Examples')\n\n# Set the x-axis label\nax.set_xlabel('Maximum Predicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\nplt.show()"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2, 3, 4, 5, 6, 7, 8, 9])\ny = np.array([2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8])\n\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar([0.0, 0.2], [1450, 1300], color='blue')\nax.bar([0.4, 0.5], [1200, 1100], color='red')\n\n# Set the title of the plot\nax.set_title('Maximum Predicted Probability')\n\n# Set the x-axis label\nax.set_xlabel('Probability')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with a specified size.\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Create a subplot with a specified number of rows and columns.\nax = fig.add_subplot(111)\n\n# Set the x-axis limits to 2.6 and 2.1.\nax.set_xlim([2.6, 2.1])\n\n# Set the y-axis limits to 0 and 30000.\nax.set_ylim([0, 30000])\n\n# Set the x-axis tick labels to 2.6, 2.7, 2.8, 2.9, 3.0, 3.1.\nax.set_xticks([2.6, 2.7, 2.8, 2.9, 3.0, 3.1])\n\n# Set the y-axis tick labels to 0, 5000, 10000, 15000, 20000, 25000, 30000.\nax.set_yticks([0, 5000, 10000, 15000, 20000, 25000, 30000])\n\n# Set the x-axis label to 'Width of Layer'.\nax.set_xlabel('Width of Layer')\n\n# Set the y-axis label to 'Empirical Lipschitz Constant'.\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'b-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'r-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'g-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'y-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'm-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'c-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'k-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'w-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'o-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 's-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'p-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'h-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'D-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], '^-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], '<-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], '>-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'P-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'H-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'X-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'x-')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'o')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 's')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'p')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'h')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'D')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], '^')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], '<')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], '>')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'P')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'H')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'X')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'x')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'o')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 's')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'p')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'h')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'D')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], '^')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], '<')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], '>')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'P')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15000, 20000, 25000, 30000, 35000], 'H')\n\n# Create a line plot with the specified data points.\nax.plot([2.6, 2.7, 2.8, 2.9, 3.0, 3.1], [10000, 15"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 2000, 4000, 6000, 8000, 10000])\ny1 = np.array([35000, 40000, 45000, 50000, 55000, 60000])\ny2 = np.array([37000, 42000, 47000, 52000, 57000, 62000])\ny3 = np.array([39000, 44000, 49000, 54000, 59000, 64000])\n\nplt.plot(x, y1, 'r')\nplt.plot(x, y2, 'g')\nplt.plot(x, y3, 'b')\n\nplt.xlabel('Time Steps')\nplt.ylabel('Discounted Cumulative Reward')\nplt.title('Discounted Cumulative Reward vs Time Steps')\nplt.legend(['WI', 'ISQ', 'WQL'])\nplt.show()\nThe legend of the plot is WI, ISQ, and WQL. The x-axis label is Time Steps. The y-axis label is Discounted Cumulative Reward. The title of the plot is Discounted Cumulative Reward vs Time Steps."}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 25, 50, 75, 100, 125, 150, 175, 200])\ny1 = np.array([0.38, 0.39, 0.37, 0.36, 0.35, 0.34, 0.33, 0.32, 0.31])\ny2 = np.array([0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40])\n\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'b-', label='WI')\nax.plot(x, y2, 'r-', label='ISQ')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a scatter plot with the specified data points\nax.scatter([1.2, 1.3, 1.4, 1.5], [0.7, 0.8, 0.9, 1.0], color='green')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the title of the plot\nax.set_title('Daytime Sunny')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(6.0, 6.0))\nax = fig.add_subplot(111)\n\nx = np.linspace(-8, 8, 100)\ny = np.sin(x)\nax.plot(x, y, 'r-')\n\nplt.show()\nThe generated Python code will produce a plot with a red line representing the sine function from -8 to 8."}
{"file": "dataset/ori_500/area_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([10000, 50000, 1000000])\ny1 = np.array([27.3, 26.4, 29.1])\ny2 = np.array([20.1, 21.2, 22.3])\ny3 = np.array([15.6, 16.7, 17.8])\n\nplt.plot(x, y1, 'r')\nplt.plot(x, y2, 'o')\nplt.plot(x, y3, 'g')\n\nplt.xlabel('Number of Followers')\nplt.ylabel('Engagement Rate')\nplt.title('Engagement Rate by Number of Followers')\nplt.legend(['ActivityNet mloU', 'Breakfast MoF', 'ActivityNet CIDER'])\nplt.show()"}
{"file": "dataset/ori_500/area_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 3, 1)\ny1 = [10.2, 19.8, 27.5]\ny2 = [10.4, 19.6, 27.3]\ny3 = [10.6, 19.4, 27.1]\n\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.plot(x, y1, 'b-', label='GT')\nax.plot(x, y2, 'r-', label='DRS')\nax.plot(x, y3, 'g-', label='PR-based')\n\nax.set_xlabel('time step')\nax.set_ylabel('RSA')\nax.set_title('RSA of GT, DRS and PR-based')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/area_3.pdf", "response": "import matplotlib.pyplot as plt\n\nx = [0, 20, 40, 60, 80]\ny_clip = [0.53, 0.6, 0.65, 0.7, 0.75]\ny_laion_5k = [0.53, 0.6, 0.65, 0.7, 0.75]\ny_coco_5k = [0.53, 0.6, 0.65, 0.7, 0.75]\ny_laion_10k = [0.53, 0.6, 0.65, 0.7, 0.75]\ny_coco_10k = [0.53, 0.6, 0.65, 0.7, 0.75]\n\nplt.plot(x, y_clip, label='clip')\nplt.plot(x, y_laion_5k, label='laion (5k)')\nplt.plot(x, y_coco_5k, label='coco (5k)')\nplt.plot(x, y_laion_10k, label='laion (10k)')\nplt.plot(x, y_coco_10k, label='coco (10k)')\n\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\nplt.title('Dynamic Effect of Vocab on Zero Shot Accuracy')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/area_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.0, 1.0, 0.25)\ny1 = [3.2, 6.7, 8.9, 9.5]\ny2 = [2.1, 4.5, 6.3, 7.8]\ny3 = [1.2, 3.4, 5.6, 7.8]\n\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.plot(x, y1, 'b-', label='Content')\nax.plot(x, y2, 'o-', label='Organization')\nax.plot(x, y3, 'g-', label='Language')\n\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/area_5.pdf", "response": "import matplotlib.pyplot as plt\n\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [3400, 3500, 3600, 3700, 3800, 3900, 4000]\namericas = [2000, 2100, 2200, 2300, 2400, 2500, 2600]\nasia = [1000, 1100, 1200, 1300, 1400, 1500, 1600]\neurope = [500, 600, 700, 800, 900, 1000, 1100]\noceania = [100, 200, 300, 400, 500, 600, 700]\n\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(years, africa, label='Africa', color='green')\nplt.plot(years, americas, label='Americas', color='yellow')\nplt.plot(years, asia, label='Asia', color='red')\nplt.plot(years, europe, label='Europe', color='blue')\nplt.plot(years, oceania, label='Oceania', color='grey')\n\nplt.xlabel('Year')\nplt.ylabel('Population (millions)')\nplt.title('World population')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 20, 40])\ny = np.array([0.1, 0.3, 0.6])\n\nplt.figure(figsize=(7.0, 5.0))\nplt.bar(x, y, color=['blue', 'green', 'red'])\nplt.show()"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nlabels = 'Fill', 'Select', 'Identify'\nsizes = [54, 32, 14]\ncolors = ['blue', 'green', 'red']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nregion_1_sales = [67, 89, 45, 23, 12]\nregion_2_sales = [98, 87, 100, 95, 86]\nregion_3_sales = [90, 85, 78, 65, 54]\n\n# Creating a figure and axis\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Plotting the data\nax.bar(products, region_1_sales, color='green')\nax.bar(products, region_2_sales, bottom=region_1_sales, color='blue')\nax.bar(products, region_3_sales, bottom=[sum(x) for x in zip(region_1_sales, region_2_sales)], color='red')\n\n# Adding labels and title\nax.set_xlabel('Products')\nax.set_ylabel('Sales')\nax.set_title('Average Monthly Sales by Product Across Regions')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.bar([0.9, 10.9, 20.9, 30.9], [0.54, 0.27, 0.38, 0.49], color='blue')\nplt.show()"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\naxs[0].bar(['FMLP-Rec'], [2.2], color='black')\naxs[0].bar(['Bert4Rec'], [11.2], color='black')\naxs[0].bar(['SASRec'], [2.4], color='black')\naxs[0].bar(['Caser'], [19.9], color='black')\naxs[0].bar(['GRU4Rec'], [14.3], color='black')\n\naxs[1].bar(['MovieLens-1M'], [3.0], color='black')\naxs[1].bar(['Yelp'], [5.1], color='black')\n\naxs[2].bar(['MovieLens-1M'], [4.8], color='red')\naxs[2].bar(['Yelp'], [4.7], color='red')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\nax.barh(['Bactrian-X', 'Lima-X'], [3.5, 3.5], color='blue')\nax.barh(['Bactrian-X', 'Lima-X'], [2.8, 2.8], color='red')\nax.barh(['Bactrian-X', 'Lima-X'], [1.3, 1.3], color='green')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\nx = [0.82, 0.84, 0.83, 0.81]\ny = [0.76, 0.79, 0.78, 0.77]\n\nax.bar(range(len(x)), x, color='blue')\nax.bar(range(len(y)), y, color='red')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Data for plotting\nlabels = ['1', '2', '3', '4', '5', '6']\nmen_means = [49.7, 48.8, 48.5, 48.4, 48.3, 48.2]\nwomen_means = [48.7, 48.6, 48.4, 48.3, 48.2, 48.1]\n\nx = range(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nrects1 = ax.bar(x - width/2, men_means, width, label='Men')\nrects2 = ax.bar(x + width/2, women_means, width, label='Women')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset.\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nplt.show()"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([0, 100, 200, 300, 400, 500, 600, 700, 800])\ny1 = np.array([0, 100, 200, 300, 400, 500, 600, 700, 800])\ny2 = np.array([0, 100, 200, 300, 400, 500, 600, 700, 800])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Role 1')\nax.plot(x, y2, 'r-', label='Role 2')\n\n# Set the title and labels\nax.set_title('Resonance Preference Plot for rich_context')\nax.set_xlabel('Count')\nax.set_ylabel('Role')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.bar(['ARC', 'MMLU', 'TruthfulQDA', 'Average'], [53.0, 56.2, 73.1, 53.8], color=['blue', 'green', 'red', 'orange'])\nplt.show()"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([35, 40, 45, 50, 55, 60, 65, 70])\ny = np.array([62, 64, 66, 68, 70, 72, 74, 76])\n\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(['DLMA-7B VS. LLAMA-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMA-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-7B', 'DLMA-13B VS. RLCD-7B'], [0.602, 0.602, 0.468, 0.347, 0.625, 0.625, 0.492, 0.309], color='green')\nax.set_title('DLMA VS. Tie')\nax.set_xlabel('Match')\nax.set_ylabel('Win Percentage')\nplt.show()"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data\ntime = np.array([0, 10, 20, 30, 40])\ntrot = np.array([0.95, 0.87, 0.82, 0.78, 0.75])\npace = np.array([0.98, 0.92, 0.88, 0.85, 0.83])\nbound = np.array([0.99, 0.95, 0.92, 0.89, 0.87])\nprok = np.array([0.99, 0.96, 0.94, 0.92, 0.91])\ntransition = np.array([0.99, 0.97, 0.95, 0.93, 0.92])\n\n# Plot the data\nax.plot(time, trot, 'g-', label='trot')\nax.plot(time, pace, 'r-', label='pace')\nax.plot(time, bound, 'b-', label='bound')\nax.plot(time, prok, 'y-', label='prok')\nax.plot(time, transition, 'k-', label='transition')\n\n# Set the labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Gait Distribution Over Time (%)')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Add a legend\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instuctor']\nAP1KL = [68, 82, 68, 72, 68]\ntie = [24, 15, 22, 19, 23]\nAG1kL = [8, 3, 10, 9, 9]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.25  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nrects1 = ax.bar(x - width/2, AP1KL, width, label='AP-1kL wins')\nrects2 = ax.bar(x, tie, width, label='Tie')\nrects3 = ax.bar(x + width/2, AG1kL, width, label='AG-1kL wins')\n\nax.set_ylabel('Number of games')\nax.set_title('Number of games won by each team')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset.\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\n\nfig.tight_layout()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(60)\ny1 = [14.8, 29.6, 29.6, 18.5, 8.4, 9.0]\ny2 = [9.4, 24.1, 27.8, 33.3, 40.7, 9.3]\ny3 = [8.3, 14.8, 33.3, 40.4, 20.4, 9.3]\ny4 = [24.1, 29.6, 33.3, 20.4, 16.7, 9.3]\ny5 = [11.9, 19.0, 33.3, 29.6, 14.3, 9.5]\ny6 = [12.0, 26.2, 35.7, 38.1, 45.2, 38.1]\ny7 = [19.0, 21.4, 35.7, 38.1, 45.2, 38.1]\ny8 = [14.0, 19.5, 35.7, 38.1, 45.2, 38.1]\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.plot(x, y1, 'r-', label='Strong Disagree')\nax.plot(x, y2, 'r--', label='Disagree')\nax.plot(x, y3, 's-', label='Strong Disagree')\nax.plot(x, y4, 's--', label='Disagree')\nax.plot(x, y5, 'o-', label='Strong Disagree')\nax.plot(x, y6, 'o--', label='Disagree')\nax.plot(x, y7, '^-', label='Strong Disagree')\nax.plot(x, y8, '^--', label='Disagree')\n\nax.set_xlabel('Eye Movement')\nax.set_ylabel('Percentage (%)')\nax.set_title('Eye Movement')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plotting the data for Ours\nax.plot([0.5, 0.6, 0.7, 0.8, 0.9], [2.3, 1.4, 1.5, 1.3, 1.2], 'bo-', label='Ours')\n\n# Plotting the data for Saliency-based Sampling\nax.plot([0.5, 0.6, 0.7, 0.8, 0.9], [1.5, 1.4, 1.3, 1.2, 1.1], 'ro-', label='Saliency-based Sampling')\n\n# Setting the title of the plot\nax.set_title('Rate of Brightness Change')\n\n# Setting the x-axis label\nax.set_xlabel('Rotation Angle(\u00b0)')\n\n# Setting the y-axis label\nax.set_ylabel('Rate of Brightness Change(%)')\n\n# Adding a legend to the plot\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\nax.bar(['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL'], [2.86, 2.71, 2.65, 2.58, 2.57, 2.5], color=['blue', 'orange', 'red', 'green', 'grey', 'purple'])\n\nplt.show()"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\nax.bar(['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4'], [0.302, 0.601, 0.468, 0.653], color='blue')\nax.bar(['Wizard13b', 'Vicuna13b', 'Vicuna33b', 'Mistral17b'], [0.384, 0.379, 0.347, 0.364], color='yellow')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(2, 2, figsize=(10.0, 4.0))\n\nax[0, 0].bar(['Alpaca-52k+'], [78.8], color='red')\nax[0, 0].bar(['Alpaca-52k+'], [11.7], bottom=[78.8], color='blue')\nax[0, 0].bar(['Alpaca-52k+'], [9.5], bottom=[78.8, 11.7], color='blue')\n\nax[0, 1].bar(['Alpaca-52k+'], [77.6], color='red')\nax[0, 1].bar(['Alpaca-52k+'], [18.0], bottom=[77.6], color='blue')\nax[0, 1].bar(['Alpaca-52k+'], [4.4], bottom=[77.6, 18.0], color='blue')\n\nax[1, 0].bar(['Alpaca-52k+'], [67.4], color='red')\nax[1, 0].bar(['Alpaca-52k+'], [18.1], bottom=[67.4], color='blue')\nax[1, 0].bar(['Alpaca-52k+'], [14.5], bottom=[67.4, 18.1], color='blue')\n\nax[1, 1].bar(['Alpaca-52k+'], [66.3], color='red')\nax[1, 1].bar(['Alpaca-52k+'], [23.7], bottom=[66.3], color='blue')\nax[1, 1].bar(['Alpaca-52k+'], [8.0], bottom=[66.3, 23.7], color='blue')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Ang, Cnt, Dis, Joy, Ntr, Sad, Sur\nx = np.array([1, 2, 3, 4, 5, 6, 7])\ny = np.array([1980, 1400, 1200, 1500, 3000, 1800, 1600])\n\nplt.bar(x, y, color=['red', 'orange', 'green', 'yellow', 'gray', 'blue', 'purple'])\nplt.xticks(x, ['Ang', 'Cnt', 'Dis', 'Joy', 'Ntr', 'Sad', 'Sur'])\nplt.show()"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Success\nax.bar('GPT-4V', 9.5, color='green')\nax.bar('RoboCodeX', 9.8, color='green')\n\n# Occupancy Error\nax.bar('GPT-4V', 0.2, bottom=9.5, color='orange')\nax.bar('RoboCodeX', 0.2, bottom=9.8, color='orange')\n\n# Grounding Error\nax.bar('GPT-4V', 0.3, bottom=[9.7, 9.9], color='gray')\nax.bar('RoboCodeX', 0.3, bottom=[9.8, 10.0], color='gray')\n\n# Grasper Collision\nax.bar('GPT-4V', 0.1, bottom=[9.8, 10.1], color='yellow')\nax.bar('RoboCodeX', 0.1, bottom=[9.9, 10.2], color='yellow')\n\n# Trajectory Optimization Error\nax.bar('GPT-4V', 0.1, bottom=[9.9, 10.2], color='blue')\nax.bar('RoboCodeX', 0.1, bottom=[10.0, 10.3], color='blue')\n\n# Gripper Failed\nax.bar('GPT-4V', 0.1, bottom=[10.0, 10.3], color='purple')\nax.bar('RoboCodeX', 0.1, bottom=[10.1, 10.4], color='purple')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data for each dataset\njpeg_data = [2.3, 1.8, 1.4, 1.2]\ndeepjcc_data = [3.1, 2.9, 2.7, 2.5]\nours_data = [2.8, 2.6, 2.4, 2.2]\n\n# Define the x-axis labels\nx_labels = ['VOC 2012', 'COCO 2017']\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(x_labels))\n\n# Plot the data for each dataset\nax.bar(index - bar_width, jpeg_data, bar_width, label='JPEG')\nax.bar(index, deepjcc_data, bar_width, label='DEEPJCC w/ ofdm')\nax.bar(index + bar_width, ours_data, bar_width, label='OURS')\n\n# Add labels and title\nax.set_xlabel('Datasets')\nax.set_ylabel('Transmission Delay (ms)')\nax.set_title('Transmission Delay Comparison')\nax.set_xticks(index)\nax.set_xticklabels(x_labels)\nax.legend()\n\n# Show the plot\nplt.show()\nThis code will generate a bar chart with three datasets: JPEG, DEEPJCC w/ ofdm, and Ours. The x-axis represents the datasets, and the y-axis represents the transmission delay in milliseconds. The legend will display the names of the datasets. The bar chart will be displayed with a title and labels for both axes."}
{"file": "dataset/ori_500/bar_29.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for each PDE\npde_data = {\n    'Wave': [0.95, 0.85, 0.75],\n    'Diffusion': [0.85, 0.75, 0.65],\n    'Heat': [0.75, 0.65, 0.55],\n    'Poisoning': [0.65, 0.55, 0.45],\n    'N-S': [0.55, 0.45, 0.35]\n}\n\n# Define the colors for each PDE\ncolors = ['purple', 'red', 'orange']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data for each PDE\nfor i, (pde, data) in enumerate(pde_data.items()):\n    ax.barh(range(len(data)), data, color=colors[i], label=pde)\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('log L2')\nax.set_ylabel('PDEs')\n\n# Set the title of the plot\nax.set_title('PDEs')\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(len(pde_data['Wave'])))\nax.set_yticklabels(['Wave', 'Diffusion', 'Heat', 'Poisoning', 'N-S'])\n\n# Add a legend to the plot\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(4)\ny1 = [0.975, 0.965, 0.962, 0.96]\ny2 = [0.97, 0.96, 0.95, 0.94]\ny3 = [0.975, 0.965, 0.962, 0.96]\ny4 = [0.975, 0.965, 0.962, 0.96]\n\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\nax.plot(x, y1, 'b-o', label='w/o DaQQRN')\nax.plot(x, y2, 'r-o', label='w/o CQN')\nax.plot(x, y3, 'g-o', label='Full model')\nax.plot(x, y4, 'y-o', label='w/o QCN')\n\nax.set_xlabel('Models')\nax.set_ylabel('Metric values')\nax.set_title('Metrics')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(['GPT-3.5', 'GPT-4'], [85.0, 99.44], color='blue')\nax.bar(['Mixtral-8x7b-Instructor', 'GPT-3.5'], [28.33, 85.0], color='red')\nax.bar(['Mixtral-8x7b-Instructor', 'GPT-4'], [31.11, 99.44], color='purple')\nax.set_ylabel('One pass rate (%)')\nplt.show()"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "import matplotlib.pyplot as plt fig, ax = plt.subplots(figsize=(10.0, 6.0)) ax.bar(['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template'], [17.0, 20.0, 25.0, 30.5, 31.5, 19.5], color=['blue', 'green', 'red']) ax.set_ylabel('Percentage') ax.set_title('LMM-based vs. TPLM-based') plt.show()"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(['Combat Spider', 'Milky Cow', 'Shear Sheep'], [0.72, 0.74, 0.56], color='blue')\nplt.show()"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "import matplotlib.pyplot as plt\n\nx = [0, 1, 2, 3, 4]\ny1 = [100.0, 60.0, 27.7, 91.7, 60.8]\ny2 = [83.3, 83.0, 29.8, 100.0, 63.4]\ny3 = [26.7, 27.7, 29.8, 38.5, 30.8]\n\nplt.figure(figsize=(10.0, 5.0))\nplt.plot(x, y1, 's-', label='Avg. Following Rate')\nplt.plot(x, y2, 'o-', label='Following-related Format Error Rate')\nplt.plot(x, y3, '^-', label='Following-related Error Rate')\n\nplt.xlabel('Steps')\nplt.ylabel('Scores')\nplt.title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.plot([1, 2, 3, 4, 5], [10, 20, 25, 30, 45], label='RegOpt')\nax.plot([1, 2, 3, 4, 5], [15, 25, 30, 35, 50], label='BIOPt')\nax.plot([1, 2, 3, 4, 5], [20, 30, 35, 40, 60], label='LoopOpt')\nax.set_xlabel('Core Utilization (%)')\nax.set_ylabel('Average Response Time (ms)')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(['Llama2', 'Mistral'], [6.9, 7.08], color=['blue', 'orange'])\nplt.show()"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\nax.bar([100, 1000], [49.98, 50.74], color=['blue', 'orange'])\nplt.show()"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\nax.bar(['ResNet18', 'AlexNet', 'ResNet50'], [7.4, 8.7, 4.3], color=['red', 'blue', 'pink'])\nplt.show()"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\nax.bar(['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b'], [92.8, 87.4, 86.2, 96.7], color='green')\nax.bar(['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b'], [89.1, 84.7, 83.5, 95.2], color='blue')\nax.bar(['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b'], [85.4, 81.0, 80.8, 94.3], color='red')\n\nax.set_title('LeetCode, DS-6.7b')\nax.set_xlabel('Test')\nax.set_ylabel('Accuracy')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\nlabels = ['Recost (1% wins)', 'Tie', 'Alpaca wins']\nvicuna = [53, 6, 21]\nkoala = [80, 6, 67]\nwizardlm = [116, 33, 49]\nsinstuct = [99, 50, 103]\nlima = [179, 23, 98]\n\nx = [i for i, _ in enumerate(labels)]\nwidth = 0.2\n\nax.bar([p - width for p in x], vicuna, width, label='Vicuna')\nax.bar(x, koala, width, label='Koala')\nax.bar([p + width for p in x], wizardlm, width, label='WizardLM')\nax.bar([p + 2*width for p in x], sinstuct, width, label='SInstruct')\nax.bar([p + 3*width for p in x], lima, width, label='LIMA')\n\nax.set_ylabel('Number of games')\nax.set_title('Number of games won by each model')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\nx = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'WassCombo']\ny = [35.15, 26.86, 19.08, 20.67, 58.99, 66.19, 48.38]\nz = [36.63, 26.38, 23.9, 26.06, 33.9, 42.5, 17.06]\n\nax.plot(x, y, label='Non-agg')\nax.plot(x, z, label='Agg')\n\nax.set_xlabel('Networks')\nax.set_ylabel('FPR@90TPR')\nax.set_title('FPR@90TPR on Guerreo et al. 2022')\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\nax.barh(['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Statement', 'Loop', 'Conditional Declaration', 'Variable Declaration', 'Parameter'], [23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], color='blue')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 2, figsize=(14.0, 4.0))\naxs[0, 0].bar([5, 10, 20], [66.3, 61.9, 53.8], color='blue')\naxs[0, 0].set_title('Truthful: Misleading = 2:0')\naxs[0, 0].set_xlabel('Time (in minutes)')\naxs[0, 0].set_ylabel('Percentage (%)')\n\naxs[0, 1].bar([5, 10, 20], [66.3, 61.9, 53.8], color='red')\naxs[0, 1].set_title('Misleading: Truthful = 2:0')\naxs[0, 1].set_xlabel('Time (in minutes)')\naxs[0, 1].set_ylabel('Percentage (%)')\n\naxs[1, 0].bar([5, 10, 20], [66.3, 61.9, 53.8], color='blue')\naxs[1, 0].set_title('Truthful: Misleading = 2:0')\naxs[1, 0].set_xlabel('Time (in minutes)')\naxs[1, 0].set_ylabel('Percentage (%)')\n\naxs[1, 1].bar([5, 10, 20], [66.3, 61.9, 53.8], color='red')\naxs[1, 1].set_title('Misleading: Truthful = 2:0')\naxs[1, 1].set_xlabel('Time (in minutes)')\naxs[1, 1].set_ylabel('Percentage (%)')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a list of values for the x-axis\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n# Create a list of values for the y-axis\ny = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny2 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors2 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels2 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny3 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors3 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels3 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny4 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors4 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels4 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny5 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors5 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels5 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny6 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors6 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels6 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny7 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors7 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels7 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny8 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors8 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels8 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny9 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors9 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels9 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny10 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors10 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels10 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny11 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors11 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels11 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny12 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors12 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels12 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny13 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors13 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels13 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny14 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors14 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels14 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny15 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors15 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels15 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny16 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors16 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels16 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny17 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors17 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels17 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny18 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors18 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels18 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny19 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors19 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels19 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny20 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors20 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels20 = ['HellaSWAG-actnet', 'HellaSWAG-wikiHow', 'HellaSWAG-actnet']\n\n# Create a list of values for the y-axis\ny21 = [-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27]\n\n# Create a list of colors for each data point\ncolors21 = ['blue', 'orange', 'green']\n\n# Create a list of labels for each data point\nlabels21 = ['HellaSWAG"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [92.0, 93.2, 93.0, 95.2, 95.2, 95.2, 95.2]\n\n# Create a bar chart\nplt.bar(x, y, color='red')\n\n# Set the title of the plot\nplt.title('Performance Score')\n\n# Set the x-axis label\nplt.xlabel('Performance Score')\n\n# Set the y-axis label\nplt.ylabel('Performance Score')\n\n# Set the figure size\nplt.figure(figsize=(10.0, 8.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Data for plotting\ncategories = ['AFAN', 'AFBE', 'AFEO', 'AFEX', 'AFIG', 'AFPP', 'AFPR', 'AFSC', 'AFSI', 'AFTH', 'AFVC', 'AFVT', 'AFWT', 'ADAH', 'ADDA', 'ADIC', 'ADSS']\ngpt3 = [42.5, 41.7, 41.5, 41.4, 41.3, 41.2, 41.1, 41.0, 40.9, 40.8, 40.7, 40.6, 40.5, 40.4, 40.3, 40.2]\ngpt4 = [40.1, 39.9, 39.7, 39.5, 39.3, 39.1, 38.9, 38.7, 38.5, 38.3, 38.1, 37.9, 37.7, 37.5, 37.3, 37.1]\n\n# Plotting the data\nax.bar(categories, gpt3, color='blue', label='GPT-3-Turbo')\nax.bar(categories, gpt4, color='orange', bottom=gpt3, label='GPT-4')\n\n# Adding labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Non-valid NLAs')\nax.set_title('Non-valid NLAs by Category')\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define the data for the plot\nx = np.array([3, 5, 7, 10])\ny = np.array([-2.4, -2.1, -1.8, -1.6])\n\n# Create a bar chart with the specified colors\nax.bar(x, y, color=['red', 'blue', 'green', 'purple'])\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Set the x-axis label\nax.set_xlabel('Num of Constraint Words')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\nax.bar(['Lavila', 'Video-LLMA', 'BLIP1', 'BLIP2 Model', 'Llava', 'OSCAR', 'GPT4V'], [0.0, 0.71, 4.64, 31.79, 73.93, 82.5, 82.5], color='blue')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['HH', 'Reddit', 'IMDB', 'AVG']\nwin = [22, 50, 50, 45]\ntie = [0, 0, 0, 38]\nlose = [78, 50, 50, 62]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.25  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\nrects1 = ax.bar(x - width/2, win, width, label='Win')\nrects2 = ax.bar(x, tie, width, label='Tie')\nrects3 = ax.bar(x + width/2, lose, width, label='Lose')\n\nax.set_ylabel('Percentage')\nax.set_title('COPR v.s. Golden (Human Eval)')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\nfig.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(3, 1, figsize=(5.0, 6.0))\n\naxs[0].bar(['Accuracy', 'Unfairness'], [0.28, 0.14], color=['blue', 'red'])\naxs[0].set_title('NDCG@20')\n\naxs[1].bar(['Accuracy', 'Unfairness'], [0.27, 0.12], color=['blue', 'red'])\naxs[1].set_title('Tenrec')\n\naxs[2].bar(['Accuracy', 'Unfairness'], [0.19, 0.11], color=['blue', 'red'])\naxs[2].set_title('CV@20')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nax.bar([224, 128, 64], [29, 29, 29], color='blue')\nax.bar([224, 128, 64], [29, 29, 29], color='orange')\nax.bar([224, 128, 64], [29, 29, 29], color='grey')\n\nax.set_title('Top-1 Accuracy by Resolution and Method')\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 ACC (%)')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "import matplotlib.pyplot as plt\n\nx = [1, 2, 4]\ny = [50.0, 50.0, 50.0]\ncolors = ['yellow', 'blue', 'red']\nplt.bar(x, y, color=colors)\nplt.show()"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [17, 19, 20, 22, 24, 25]\ny = [39.4, 35.18, 34.06, 34.6, 34.0, 35]\n\nplt.figure(figsize=(6.0, 5.0))\nplt.plot(x, y)\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpet', 'Making bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\ny = [4375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nplt.bar(x, y, color='purple')\n\n# Set the title of the chart\nplt.title('Number of Videos by Profession')\n\n# Set the x-axis label\nplt.xlabel('Profession')\n\n# Set the y-axis label\nplt.ylabel('Number of Videos')\n\n# Set the figure size\nplt.figure(figsize=(12.0, 8.0))\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.barh(['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking'], [8, 31, 24, 7, 10, 10, 9], color=['violet', 'purple', 'lightblue', 'lightgreen', 'orange', 'brown', 'red'])\nplt.show()"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the plot\nx = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3])\ny = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3])\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title of the plot\nax.set_title('Context: The human body can tolerate only a')\n\n# Set the x-axis label\nax.set_xlabel('Word')\n\n# Set the y-axis label\nax.set_ylabel('Probability')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.barh(['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan'], [0.15, 0.3, 0.4, 0.5, 0.7], color=['yellow', 'green', 'blue', 'purple', 'pink'])\nplt.show()"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Prize', 'Sadness', 'Unhappiness', 'Amusement'], [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6], color='red')\nplt.show()"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\nax.bar(['Making Bricks', 'Carpet', 'Baker'], [500, 400, 300], color='red')\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ngdp_growth = [10, 20, 30, 40, 50]\nunemployment_rate = [1, 2, 3, 4, 5]\ninflation_rate = [10, 20, 30, 40, 50]\nnasdaq = [10, 20, 30, 40, 50]\nexchange_rate = [10, 20, 30, 40, 50]\nreal_estate_prices = [10, 20, 30, 40, 50]\ncorporate_profits = [10, 20, 30, 40, 50]\n\n# Creating a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plotting GDP Growth\nax.bar(gdp_growth, color='red', label='US')\n\n# Plotting Unemployment Rate\nax.bar(unemployment_rate, color='blue', label='China')\n\n# Plotting Inflation Rate\nax.bar(inflation_rate, color='green', label='EU')\n\n# Plotting NASDAQ\nax.bar(nasdaq, color='blue', label='Brazil')\n\n# Plotting Exchange Rate\nax.bar(exchange_rate, color='green', label='India')\n\n# Plotting Real Estate Prices\nax.bar(real_estate_prices, color='red', label='US')\n\n# Plotting Corporate Profits\nax.bar(corporate_profits, color='blue', label='China')\n\n# Setting the title of the plot\nax.set_title('GDP Growth')\n\n# Setting the x-axis label\nax.set_xlabel('Year')\n\n# Setting the y-axis label\nax.set_ylabel('GDP Growth')\n\n# Adding a legend to the plot\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# New York\nax.barh([0], [25], color='red')\nax.barh([0], [30], left=[25], color='orange')\nax.barh([0], [45], left=[55], color='lightgrey')\n\n# Los Angeles\nax.barh([1], [20], color='red')\nax.barh([1], [30], left=[20], color='orange')\nax.barh([1], [50], left=[50], color='lightgrey')\n\n# Chicago\nax.barh([2], [15], color='red')\nax.barh([2], [25], left=[15], color='orange')\nax.barh([2], [60], left=[40], color='lightgrey')\n\n# Houston\nax.barh([3], [10], color='red')\nax.barh([3], [20], left=[10], color='orange')\nax.barh([3], [70], left=[30], color='lightgrey')\n\n# Phoenix\nax.barh([4], [15], color='red')\nax.barh([4], [25], left=[15], color='orange')\nax.barh([4], [80], left=[40], color='lightgrey')\n\n# Philadelphia\nax.barh([5], [10], color='red')\nax.barh([5], [20], left=[10], color='orange')\nax.barh([5], [90], left=[30], color='lightgrey')\n\nax.set_yticks(np.arange(6))\nax.set_yticklabels(['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia'])\nax.legend(['Excellent', 'Good', 'Moderate', 'Poor', 'Very Poor'], loc='upper right')"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\nx = np.arange(-80, 81, 20)\ny = [79, 76, 70, 60, 50, 40, 30, 20, 10, 0]\n\nax.bar(x, y, color='red')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Relative Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Emotions\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unobothered', 'Amusement']\n\n# Frequencies\nfrequencies = [7, 6, 5, 4, 3, 2, 1]\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='blue')\nplt.show()"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.barh([0], [4.8], color='grey')\nax.barh([1], [19.7], color='grey')\nax.barh([2], [15.9], color='red')\nax.barh([3], [8.5], color='grey')\nax.barh([4], [7.6], color='grey')\nax.barh([5], [0.7], color='red')\nax.set_yticks([0, 1, 2, 3, 4, 5])\nax.set_yticklabels(['GRU4Rec', 'Bert4Rec', 'Caser', 'SASRec', 'FMLP-Rec', 'Bert4Rec'])\nplt.show()"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Patents Filed\npatents = [12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\npatents_labels = ['2000', '2005', '2010', '2015', '2020', '2025', '2030', '2035', '2040', '2045']\npatents_colors = ['red']*len(patents)\n\n# Research Investment\nresearch = [1750, 2250, 2750, 3250, 3750, 4250, 4750, 5250, 5750, 6250]\nresearch_labels = ['2000', '2005', '2010', '2015', '2020', '2025', '2030', '2035', '2040', '2045']\nresearch_colors = ['blue']*len(research)\n\n# Smartphone Usage\nsmartphone = [1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000]\nsmartphone_labels = ['2000', '2005', '2010', '2015', '2020', '2025', '2030', '2035', '2040', '2045']\nsmartphone_colors = ['green']*len(smartphone)\n\n# Internet Penetration\ninternet = [1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500]\ninternet_labels = ['2000', '2005', '2010', '2015', '2020', '2025', '2030', '2035', '2040', '2045']\ninternet_colors = ['grey']*len(internet)\n\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 5.0))\n\naxs[0].bar(patents_labels, patents, color=patents_colors)\naxs[0].set_title('Patents Filed')\n\naxs[1].bar(research_labels, research, color=research_colors)\naxs[1].set_title('Research Investment')\n\naxs[2].bar(smartphone_labels, smartphone, color=smartphone_colors)\naxs[2].set_title('Smartphone Usage')\n\naxs[2].bar(internet_labels, internet, color=internet_colors)\naxs[2].set_title('Internet Penetration')\n\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.barh(['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking'], [12, 35, 28, 15, 18, 14, 16], color=['blue', 'orange', 'green', 'red', 'purple', 'pink', 'grey'])\nplt.show()"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a list of categories\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devs', 'Notre-Dame de Paris']\n\n# Create a list of scores for each category\nscores = [0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Create a bar chart with the specified colors and labels\nplt.bar(categories, scores, color=['blue', 'blue', 'blue', 'blue', 'blue'], label='Time 0')\n\n# Set the title of the plot\nplt.title('Scores by Category Over Time')\n\n# Set the x-axis label\nplt.xlabel('Categories')\n\n# Set the y-axis label\nplt.ylabel('Scores')\n\n# Set the tick labels on the y-axis\nplt.yticks([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])\n\n# Show the legend\nplt.legend()\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define the data for each region\nregions = ['West', 'East', 'South', 'North']\nCO2 = [40.44, 56.03, 48.23, 65.49]\nPM = [11.59, 17.38, 26.15, 22.89]\nSO2 = [54.46, 56.03, 32.15, 37.12]\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(regions))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create bars for each region\nax.bar(r1, CO2, color='tab:blue', width=bar_width, edgecolor='grey', label='CO2 (ppm)')\nax.bar(r2, PM, color='tab:red', width=bar_width, edgecolor='grey', label='PM (\u00b5g/m\u00b3)')\nax.bar(r3, SO2, color='tab:purple', width=bar_width, edgecolor='grey', label='SO2 (\u00b5g/m\u00b3)')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Region')\nax.set_ylabel('Concentration')\nax.set_title('Air Quality Metrics by Region')\nax.set_xticks([r + bar_width for r in range(len(regions))])\nax.set_xticklabels(regions)\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\nax.bar(['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG'], [0.9, 0.7, 0.5, 0.3], color='red')\nax.set_xlabel('Score by group and constraint word count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\nax.plot([2018, 2019, 2020], [0.3, 0.4, 0.5], 'r-')\nax.plot([2018, 2019, 2020], [0.2, 0.3, 0.4], 'b-')\nax.plot([2018, 2019, 2020], [0.1, 0.2, 0.3], 'g-')\n\nax.set_xlabel('Year')\nax.set_ylabel('GDP Growth Rate (%)')\nax.set_title('Negative GDP Growth Rates by Country and Year')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\nax.barh(['GPT4V', 'Oscar', 'LLaMA'], [82.5, 73.93, 31.79], color='red')\nax.barh(['BLIP2', 'BLIP1', 'Video-LLMa'], [4.64, 4.64, 0.71], color='green')\nax.barh(['Lavila'], [0.0], color='purple')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a list of categories\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\n\n# Create a list of values for each category\nvalues = [50, 70, 80, 90]\n\n# Create a list of colors for each category\ncolors = ['blue', 'lightblue', 'lightgrey', 'grey']\n\n# Create a bar chart with the specified data and colors\nplt.bar(categories, values, color=colors)\n\n# Set the title of the plot\nplt.title('Stacked Bar Chart of Transportation Data')\n\n# Set the x-axis label\nplt.xlabel('Categories')\n\n# Set the y-axis label\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Data for plotting\ncategory_A = [65, 25, 10]\ncategory_B = [45, 30, 25]\ncategory_C = [50, 30, 20]\ncategory_D = [55, 35, 10]\ncategory_E = [60, 30, 10]\ncategory_F = [65, 30, 5]\ncategory_G = [70, 30, 5]\n\n# Create a bar chart\nax.bar(['Category A', 'Category B', 'Category C'], category_A, color='red')\nax.bar(['Category A', 'Category B', 'Category C'], category_B, bottom=category_A, color='orange')\nax.bar(['Category A', 'Category B', 'Category C'], category_C, bottom=[sum(x) for x in zip(category_A, category_B)], color='yellow')\n\nax.bar(['Category D', 'Category E', 'Category F'], category_D, color='red')\nax.bar(['Category D', 'Category E', 'Category F'], category_E, bottom=category_D, color='orange')\nax.bar(['Category D', 'Category E', 'Category F'], category_F, bottom=[sum(x) for x in zip(category_D, category_E)], color='yellow')\n\nax.bar(['Category G'], category_G, color='red')\n\n# Set the title and labels\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\nax.set_xlabel('Product Categories')\nax.set_ylabel('Sales Units')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nax.barh(['-9.44', '-9.12', '-37.9'], [0.83, 0.83, 0.6], color='grey')\nax.barh(['-9.44', '-9.12', '-37.9'], [0.11, 0.11, 0.11], left=[0.83, 0.83, 0.6], color='white')\n\nax.set_xlabel('Feature embedding distance')\nax.set_title('Probing FGT vs Observed FGT')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\nx = np.arange(1, 7)\ny1 = [10, 8, 12, 10, 15, 10]\ny2 = [8, 8, 12, 10, 12, 7]\ny3 = [6, 6, 12, 8, 8, 8]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.bar(x, y1, color='green')\nax.bar(x, y2, bottom=y1, color='blue')\nax.bar(x, y3, bottom=[sum(i) for i in zip(y1, y2)], color='red')\n\n# Set the labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.barh(['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet', 'perl'], [95.2, 87.1, 83.6, 78.4, 77.1, 76.8, 76.7], color='blue')\nax.barh(['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet', 'perl'], [89.8, 82.1, 78.6, 73.4, 72.1, 71.8, 71.7], color='yellow')\nax.barh(['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet', 'perl'], [84.8, 77.1, 73.6, 68.4, 67.1, 66.8, 66.7], color='green')\nplt.show()"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\nax.bar(['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT'], [3.5, 2.3, 4.4, 1.3], color=['blue', 'red', 'orange', 'green'])\n\nplt.show()"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Dow Jones Index\ndow_jones = [0.5, 1.5, 2.2, 3.9, 4.6]\n# Nasdaq Index\nnasdaq = [-0.6, -0.8, 0.4, 3.9, 4.6]\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.plot(dow_jones, 'o-', label='Dow Jones Index')\nax.plot(nasdaq, 's-', label='Nasdaq Index')\n\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\nax.set_title('Dow Jones Index vs Nasdaq Index')\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([39.4, 35.18, 34.06])\ny = np.array([30.84, 28.4, 24.27])\nz = np.array([34.06, 30, 22.2])\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(x, y, color='r')\nax.bar(x, z, bottom=y, color='b')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\nax.barh([1,2,3], [46.3, 57.9, 53.8], color='black')\nax.barh([1,2,3], [30.1, 34, 20], left=[46.3, 57.9, 53.8], color='pink')\n\nax.set_yticks([1,2,3])\nax.set_yticklabels(['Truthful Recall', 'Misleading Recall', 'Misleading Recall'])\nax.set_xlabel('Percentage (%)')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the current year\nlight_industry_current = [1500, 1200, 1300]\nheavy_industry_current = [1800, 1700, 1900]\ntransportation_current = [1400, 1300, 1500]\n\n# Define the data for the previous year\nlight_industry_previous = [1400, 1100, 1200]\nheavy_industry_previous = [1700, 1600, 1800]\ntransportation_previous = [1300, 1200, 1400]\n\n# Define the labels for the sectors\nsectors = ['Light Industry', 'Heavy Industry', 'Transportation']\n\n# Define the colors for the bars\ncolors = ['blue', 'orange']\n\n# Plot the data for the current year\nax.bar(sectors, light_industry_current, color=colors[0], label='Current Year')\nax.bar(sectors, heavy_industry_current, bottom=light_industry_current, color=colors[0])\nax.bar(sectors, transportation_current, bottom=[x+y for x,y in zip(light_industry_current, heavy_industry_current)], color=colors[0])\n\n# Plot the data for the previous year\nax.bar(sectors, light_industry_previous, color=colors[1], label='Previous Year')\nax.bar(sectors, heavy_industry_previous, bottom=light_industry_previous, color=colors[1])\nax.bar(sectors, transportation_previous, bottom=[x+y for x,y in zip(light_industry_previous, heavy_industry_previous)], color=colors[1])\n\n# Set the title of the plot\nax.set_title('Environmental Impact by Sector')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Industry Sectors')\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a bar chart\nax.bar(['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu'], [12, 15, 17, 19, 16], color='blue')\n\n# Set the title of the plot\nax.set_title('Average City Temperatures')\n\n# Set the x-axis label\nax.set_xlabel('City')\n\n# Set the y-axis label\nax.set_ylabel('Temperature (\u00b0C)')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\nax.plot([2020, 2021], [175, 185], 'ro-')\nax.plot([2020, 2021], [195, 205], 'bo-')\nax.plot([2020, 2021], [205, 215], 'go-')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the first question\nquestion1 = [26, 32, 17, 15, 10, 10, 26]\nquestion2 = [32, 29, 13, 12, 10, 15, 37]\nquestion3 = [35, 22, 33, 19, 14, 11, 30]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data for the first question\nax.bar(range(len(question1)), question1, color='lightpink', label='Strongly disagree')\nax.bar(range(len(question1)), question2, bottom=question1, color='lavender', label='Disagree')\nax.bar(range(len(question1)), question3, bottom=[sum(x) for x in zip(question1, question2)], color='orange', label='Neither agree nor disagree')\n\n# Set the title and labels for the plot\nax.set_title('Question 1 Responses')\nax.set_xlabel('Responses')\nax.set_ylabel('Percentage (%)')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.05])\n\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data\nx = np.arange(3, 11)\ny1 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\ny2 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\ny3 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Plot the data\nax.plot(x, y1, label='LLAMA-Default')\nax.plot(x, y2, label='Vicuna-Default')\nax.plot(x, y3, label='Vicuna-HAG')\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\nax.bar(['LLAMA', 'Vicuna', 'Alpaca', 'WizardLM'], [46.3, 56.9, 53.8, 20], color=['blue', 'green', 'blue', 'red'])\nax.set_title('Truthful: Misleading Recall')\nax.set_ylabel('Misleading Recall')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nx = np.arange(31)\ny = [29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nax.barh(x, y, color='blue')\nplt.show()"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2.1, 3.0, 3.5, 3.5, 3.5, 6.0, 6.0, 6.0, 7.0, 7.0])\ny = np.array([2.1, 3.0, 3.5, 3.5, 3.5, 6.0, 6.0, 6.0, 7.6, 7.6])\n\nplt.figure(figsize=(10.0, 4.0))\nplt.bar(x, y, color='red')\nplt.show()"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0.0, 0.2, 0.4, 0.6])\ny = np.array([0.0, 0.2, 0.4, 0.5])\n\nfig, axs = plt.subplots(3, 3, figsize=(10.0, 6.0))\n\naxs[0, 0].bar(x, y)\naxs[0, 0].set_title('Attack on Titan')\naxs[0, 0].set_xlabel('Time')\naxs[0, 0].set_ylabel('Score')\n\naxs[0, 1].bar(x, y)\naxs[0, 1].set_title('Game of Thrones')\naxs[0, 1].set_xlabel('Time')\naxs[0, 1].set_ylabel('Score')\n\naxs[0, 2].bar(x, y)\naxs[0, 2].set_title('The Count of Monte Cristo')\naxs[0, 2].set_xlabel('Time')\naxs[0, 2].set_ylabel('Score')\n\naxs[1, 0].bar(x, y)\naxs[1, 0].set_title('Demi-Gods and Semi-Devs')\naxs[1, 0].set_xlabel('Time')\naxs[1, 0].set_ylabel('Score')\n\naxs[1, 1].bar(x, y)\naxs[1, 1].set_title('Notre-Dame de Paris')\naxs[1, 1].set_xlabel('Time')\naxs[1, 1].set_ylabel('Score')\n\naxs[1, 2].bar(x, y)\naxs[1, 2].set_title('Attack on Titan')\naxs[1, 2].set_xlabel('Time')\naxs[1, 2].set_ylabel('Score')\n\naxs[2, 0].bar(x, y)\naxs[2, 0].set_title('Attack on Titan')\naxs[2, 0].set_xlabel('Time')\naxs[2, 0].set_ylabel('Score')\n\naxs[2, 1].bar(x, y)\naxs[2, 1].set_title('Attack on Titan')\naxs[2, 1].set_xlabel('Time')\naxs[2, 1].set_ylabel('Score')\n\naxs[2, 2].bar(x, y)\naxs[2, 2].set_title('Attack on Titan')\naxs[2, 2].set_xlabel('Time')\naxs[2, 2].set_ylabel('Score')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Japan\njapan = [1000, 2000, 3000]\njapan_labels = ['Total Energy Consumption (10^2 PJ)', 'Electricity Production (10^1 TWh)', 'Renewable Energy Ratio (%)']\nplt.bar(japan_labels, japan, color='red')\n\n# Australia\naustralia = [1000, 2000, 3000]\naustralia_labels = ['Total Energy Consumption (10^2 PJ)', 'Electricity Production (10^1 TWh)', 'Renewable Energy Ratio (%)']\nplt.bar(australia_labels, australia, color='red')\n\n# Canada\ncanada = [1000, 2000, 3000]\ncanada_labels = ['Total Energy Consumption (10^2 PJ)', 'Electricity Production (10^1 TWh)', 'Renewable Energy Ratio (%)']\nplt.bar(canada_labels, canada, color='red')\n\n# Germany\ngermany = [1000, 2000, 3000]\ngermany_labels = ['Total Energy Consumption (10^2 PJ)', 'Electricity Production (10^1 TWh)', 'Renewable Energy Ratio (%)']\nplt.bar(germany_labels, germany, color='red')\n\n# Italy\nitaly = [1000, 2000, 3000]\nitaly_labels = ['Total Energy Consumption (10^2 PJ)', 'Electricity Production (10^1 TWh)', 'Renewable Energy Ratio (%)']\nplt.bar(italy_labels, italy, color='red')\n\n# France\nfrance = [1000, 2000, 3000]\nfrance_labels = ['Total Energy Consumption (10^2 PJ)', 'Electricity Production (10^1 TWh)', 'Renewable Energy Ratio (%)']\nplt.bar(france_labels, france, color='red')\n\n# UK\nuk = [1000, 2000, 3000]\nuk_labels = ['Total Energy Consumption (10^2 PJ)', 'Electricity Production (10^1 TWh)', 'Renewable Energy Ratio (%)']\nplt.bar(uk_labels, uk, color='red')\n\n# USA\nusa = [1000, 2000, 3000]\nusa_labels = ['Total Energy Consumption (10^2 PJ)', 'Electricity Production (10^1 TWh)', 'Renewable Energy Ratio (%)']\nplt.bar(usa_labels, usa, color='red')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Original data\nlabels = ['Leaving', 'Thanking', 'Persuasion', 'Apology', 'Criticism', 'Request', 'Greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# New data\nnew_synthetic_data = [10, 10, 10, 7, 24, 31, 8]\nnew_human_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\nfig, ax = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\nax[0].bar(labels, synthetic_data, color='blue')\nax[0].set_title('Original data')\nax[0].set_xlabel('Data type')\nax[0].set_ylabel('Percentage')\n\nax[1].bar(labels, human_authored_data, color='green')\nax[1].set_title('New data')\nax[1].set_xlabel('Data type')\nax[1].set_ylabel('Percentage')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a bar chart\nax.bar([-5, -5, -5], [8, 6, 10], color='blue')\n\n# Set the title of the plot\nax.set_title('Beauty')\n\n# Create a second figure and axis\nfig2, ax2 = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a bar chart\nax2.bar([-5, -5, -5], [3, 2.9, 3.1], color='red')\n\n# Set the title of the plot\nax2.set_title('MovieLens-1M')\n\n# Create a third figure and axis\nfig3, ax3 = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a bar chart\nax3.bar([-5, -5, -5], [19.7, 19.7, 19.7], color='green')\n\n# Set the title of the plot\nax3.set_title('More')\n\n# Create a fourth figure and axis\nfig4, ax4 = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a bar chart\nax4.bar([-5, -5, -5], [20, 20, 20], color='purple')\n\n# Set the title of the plot\nax4.set_title('Yelp')\n\nplt.show()\nThe height of the bar for 'MovieLens-1M' is 3.0."}
{"file": "dataset/ori_500/bar_88.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([-3.2, -3.3, -2.2, -2.3, -2.5, -2.6, -2.7, -2.8, -2.9, -3.0])\ny = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])\n\nplt.figure(figsize=(10.0, 8.0))\nplt.plot(x, y, 'ro')\nplt.show()"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0], 'o-')\nplt.show()"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [85, 72, 43, 58, 61], color=['red', 'yellow', 'green', 'grey', 'blue'])\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\nax.bar(['GPT4V', 'Oscar', 'LLava', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila'], [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0], color=['red', 'orange', 'green', 'blue', 'purple', 'pink', 'grey'])\n\nplt.show()"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([78.4, 82.3, 86.9])\ny = np.array([75.1, 79.2, 83.4])\n\nplt.figure(figsize=(10.0, 5.0))\nplt.bar(x, y)\nplt.show()"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar(['human', 'gpt4', 'gpt4-cot'], [700, 600, 500], color='blue')\nax.bar(['human', 'gpt4', 'gpt4-cot'], [600, 500, 400], bottom=[700, 600, 500], color='orange')\nax.bar(['human', 'gpt4', 'gpt4-cot'], [500, 400, 300], bottom=[600, 500, 400], color='green')\nax.bar(['human', 'gpt4', 'gpt4-cot'], [400, 300, 200], bottom=[500, 400, 300], color='red')\nax.bar(['human', 'gpt4', 'gpt4-cot'], [300, 200, 100], bottom=[400, 300, 200], color='purple')\n\n# Set the title of the plot\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Set the x-axis label\nax.set_xlabel('Role')\n\n# Set the y-axis label\nax.set_ylabel('Count')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.bar([20, 29.6, 30], [20.4, 29.6, 20.4], color='red')\nax.bar([20, 29.6, 30], [9.3, 20.4, 20.4], bottom=[20.4, 29.6, 20.4], color='green')\nax.bar([20, 29.6, 30], [29.6, 20.4, 20.4], bottom=[20.4, 29.6, 20.4], color='yellow')\n\nax.set_xlabel('Effort')\nax.set_ylabel('Percentage')\nax.set_title('Eye Movement')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.5, 1.25, 0.1)\ny = np.array([8.3, 7.9, 9.1, 10.4, 11.1, 12.0, 12.9, 13.8, 14.7, 15.6, 16.5, 17.4, 18.3, 19.2, 20.1, 21.0, 21.9, 22.8, 23.7, 24.6, 25.5, 26.4, 27.3, 28.2, 29.1, 30.0, 30.9, 31.8, 32.7, 33.6, 34.5, 35.4, 36.3, 37.2, 38.1, 39.0, 39.9, 40.8, 41.7, 42.6, 43.5, 44.4, 45.3, 46.2, 47.1, 48.0, 48.9, 49.8, 50.7, 51.6, 52.5, 53.4, 54.3, 55.2, 56.1, 57.0, 57.9, 58.8, 59.7, 60.6, 61.5, 62.4, 63.3, 64.2, 65.1, 66.0, 66.9, 67.8, 68.7, 69.6, 70.5, 71.4, 72.3, 73.2, 74.1, 75.0, 75.9, 76.8, 77.7, 78.6, 79.5, 80.4, 81.3, 82.2, 83.1, 84.0, 84.9, 85.8, 86.7, 87.6, 88.5, 89.4, 90.3, 91.2, 92.1, 93.0, 93.9, 94.8, 95.7, 96.6, 97.5, 98.4, 99.3, 100.2, 101.1, 102.0, 102.9, 103.8, 104.7, 105.6, 106.5, 107.4, 108.3, 109.2, 110.1, 111.0, 111.9, 112.8, 113.7, 114.6, 115.5, 116.4, 117.3, 118.2, 119.1, 120.0, 120.9, 121.8, 122.7, 123.6, 124.5, 125.4, 126.3, 127.2, 128.1, 129.0, 129.9, 130.8, 131.7, 132.6, 133.5, 134.4, 135.3, 136.2, 137.1, 138.0, 138.9, 139.8, 140.7, 141.6, 142.5, 143.4, 144.3, 145.2, 146.1, 147.0, 147.9, 148.8, 149.7, 150.6, 151.5, 152.4, 153.3, 154.2, 155.1, 156.0, 156.9, 157.8, 158.7, 159.6, 160.5, 161.4, 162.3, 163.2, 164.1, 165.0, 165.9, 166.8, 167.7, 168.6, 169.5, 170.4, 171.3, 172.2, 173.1, 174.0, 174.9, 175.8, 176.7, 177.6, 178.5, 179.4, 180.3, 181.2, 182.1, 183.0, 183.9, 184.8, 185.7, 186.6, 187.5, 188.4, 189.3, 190.2, 191.1, 192.0, 192.9, 193.8, 194.7, 195.6, 196.5, 197.4, 198.3, 199.2, 200.1, 201.0, 201.9, 202.8, 203.7, 204.6, 205.5, 206.4, 207.3, 208.2, 209.1, 210.0, 210.9, 211.8, 212.7, 213.6, 214.5, 215.4, 216.3, 217.2, 218.1, 219.0, 219.9, 220.8, 221.7, 222.6, 223.5, 224.4, 225.3, 226.2, 227.1, 228.0, 228.9, 229.8, 230.7, 231.6, 232.5, 233.4, 234.3, 235.2, 236.1, 237.0, 237.9, 238.8, 239.7, 240.6, 241.5, 242.4, 243.3, 244.2, 245.1, 246.0, 246.9, 247.8, 248.7, 249.6, 250.5, 251.4, 252.3, 253.2, 254.1, 255.0, 255.9, 256.8, 257.7, 258.6, 259.5, 260.4, 261.3, 262.2, 263.1, 264.0, 264.9, 265.8, 266.7, 267.6, 268.5, 269.4, 270.3, 271.2, 272.1, 273.0, 273.9, 274.8, 275.7, 276.6, 277.5, 278.4, 279.3, 280.2, 281.1, 282.0, 282.9, 283.8, 284.7, 285.6, 286.5, 287.4, 288.3, 289.2, 290.1, 291.0, 291.9, 292.8, 293.7, 294.6, 295.5, 296.4, 297.3, 298.2, 299.1, 300.0, 300.9, 301.8, 302.7, 303.6, 304.5, 305.4, 306.3, 307.2, 308.1, 309.0, 309.9, 310.8, 311.7, 312.6, 313.5, 314.4, 315.3, 316.2, 317.1, 318.0, 318.9, 319.8, 320.7, 321.6, 322.5, 323.4, 324.3, 325.2, 326.1, 327.0, 327.9, 328.8, 329.7, 330.6, 331.5, 332.4, 333.3, 334.2, 335.1, 336.0, 336.9, 337.8, 338.7, 339.6, 340.5, 341.4, 342.3, 343.2, 344.1, 345.0, 345.9, 346.8, 347.7, 348.6, 349.5, 350.4, 351.3, 352.2, 353.1, 354.0, 354.9, 355.8, 356.7, 357.6, 358.5, 359.4, 360.3, 361.2, 362.1, 363.0, 363.9, 364.8, 365.7, 366.6, 367.5, 368.4, 369.3, 370.2, 371.1, 372.0, 372.9, 373.8, 374.7, 375.6, 376.5, 377.4, 378.3, 379.2, 380.1, 381.0, 381.9, 382.8, 383.7, 384.6, 385.5, 386.4, 387.3, 388.2, 389.1, 390.0, 390.9, 391.8, 392.7, 393.6, 394.5, 395.4, 396.3, 397.2, 398.1, 399.0, 399.9, 400.8, 401.7, 402.6, 403.5, 404.4, 405.3, 406.2, 407.1, 408.0, 408.9, 409.8, 410.7, 411.6, 412.5, 413.4, 414.3, 415.2, 416.1, 417.0, 417.9, 418.8, 419.7, 420.6, 421.5, 422.4, 423.3, 424.2, 425.1, 426.0, 426.9, 427.8, 428.7, 429.6, 430.5, 431.4, 432.3, 433.2, 434.1, 435.0, 435.9, 436.8, 437.7, 438.6, 439.5, 440.4, 441.3, 442.2, 443.1, 444.0, 444.9, 445.8, 446.7, 447.6, 448.5, 449.4, 450.3, 451.2, 452.1, 453.0, 453.9, 454.8, 455.7, 456.6, 457.5, 458.4, 459.3, 460.2, 461.1, 462.0, 462.9, 463.8, 464.7, 465.6, 466.5, 467.4, 468.3, 469.2, 470.1, 471.0, 471.9, 472.8, 473.7, 474.6, 475.5, 476.4, 477.3, 478.2, 479.1, 480.0, 480.9, 481.8, 482.7, 483.6, 484.5, 485.4, 486.3, 487.2, 488.1, 489.0, 489.9, 490.8, 491.7, 492.6, 493.5, 494.4, 495.3, 496.2, 497.1, 498.0, 498.9, 499.8, 500.7, 501.6, 502.5, 503.4, 504.3, 505.2, 506.1, 507.0, 507.9, 508.8, 509.7, 510.6, 511.5, 512.4, 513.3, 514.2, 515.1, 516.0, 516.9, 517.8, 518.7, 519.6, 520.5, 521.4, 522.3, 523.2, 524.1, 525.0, 525.9, 526.8, 527.7, 528.6, 529.5, 530.4, 531.3, 532.2, 533.1, 534.0, 534.9, 535.8, 536.7, 537.6, 538.5, 539.4, 540.3, 541.2, 542.1, 5"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([-1.0, 0.3, -3.3])\ny = np.array([3.5, 2.3, -0.7])\n\nplt.figure(figsize=(10.0, 6.0))\nplt.bar(x, y, color=['purple', 'red', 'green'])\nplt.show()"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Random\naxs[0, 0].bar(['Random', 'Ours', 'SOTA'], [66.3, 61.9, 53.8], color='blue')\naxs[0, 0].set_title('Truthful: Misleading = 2:0')\n\n# Ours\naxs[0, 1].bar(['Random', 'Ours', 'SOTA'], [49.3, 41.0, 36.3], color='red')\naxs[0, 1].set_title('Truthful: Misleading = 2:1')\n\n# SOTA\naxs[1, 0].bar(['Random', 'Ours', 'SOTA'], [36.3, 31.5, 33.8], color='green')\naxs[1, 0].set_title('Truthful: Misleading = 2:2')\n\n# SOTA\naxs[1, 1].bar(['Random', 'Ours', 'SOTA'], [40.5, 49.6, 36.5], color='orange')\naxs[1, 1].set_title('Truthful: Misleading = 1:2')\n\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Score Type 1\naxs[0, 0].bar(np.arange(1, 7), [54, 39, 36, 30, 27, 22], color='red')\naxs[0, 0].set_title('Score Type 1')\n\n# Score Type 2\naxs[0, 1].bar(np.arange(1, 7), [59, 48, 40, 33, 27, 22], color='blue')\naxs[0, 1].set_title('Score Type 2')\n\n# Score Type 3\naxs[1, 0].bar(np.arange(1, 7), [55, 48, 40, 33, 27, 22], color='green')\naxs[1, 0].set_title('Score Type 3')\n\n# Score Type 4\naxs[1, 1].bar(np.arange(1, 7), [56, 48, 40, 33, 27, 22], color='orange')\naxs[1, 1].set_title('Score Type 4')\n\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\nx = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ny = [54.9, 71.5, 60.3, 52.4, 92.6, 89.2, 83.3, 89.7, 96.4]\n\nax.bar(x, y, color='red')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Dataset 1\nx1 = np.array([1, 2, 3, 4])\ny1 = np.array([150.0, 180.0, 90.0, 80.0])\n\n# Dataset 2\nx2 = np.array([1, 2, 3, 4])\ny2 = np.array([2.5, 2.0, 1.5, 2.8])\n\n# Dataset 3\nx3 = np.array([1, 2, 3, 4])\ny3 = np.array([70.0, 55.0, 65.0, 72.0])\n\n# Dataset 4\nx4 = np.array([1, 2, 3, 4])\ny4 = np.array([80.0, 75.0, 90.0, 85.0])\n\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\naxs[0, 0].bar(x1, y1, color='orange')\naxs[0, 0].set_title('Dataset 1')\naxs[0, 0].set_xlabel('X-axis')\naxs[0, 0].set_ylabel('Y-axis')\n\naxs[0, 1].bar(x2, y2, color='blue')\naxs[0, 1].set_title('Dataset 2')\naxs[0, 1].set_xlabel('X-axis')\naxs[0, 1].set_ylabel('Y-axis')\n\naxs[1, 0].bar(x3, y3, color='green')\naxs[1, 0].set_title('Dataset 3')\naxs[1, 0].set_xlabel('X-axis')\naxs[1, 0].set_ylabel('Y-axis')\n\naxs[1, 1].bar(x4, y4, color='yellow')\naxs[1, 1].set_title('Dataset 4')\naxs[1, 1].set_xlabel('X-axis')\naxs[1, 1].set_ylabel('Y-axis')\n\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/box_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(1, 10)\ny = [7, 6, 5, 4, 3, 2, 1, 9, 8]\nplt.figure(figsize=(10.0, 8.0))\nplt.plot(x, y, 'o-')\nplt.show()"}
{"file": "dataset/ori_500/box_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Create a bar chart for gaming duration\nax.bar([1, 2, 3], [40, 60, 80], color='blue')\n\n# Create a bar chart for exercise duration\nax.bar([1, 2, 3], [30, 50, 70], color='yellow')\n\n# Create a bar chart for reading duration\nax.bar([1, 2, 3], [20, 40, 60], color='green')\n\n# Create a bar chart for music playtime\nax.bar([1, 2, 3], [50, 70, 90], color='red')\n\n# Set the x-axis labels\nax.set_xticks([1, 2, 3])\nax.set_xticklabels(['Gaming', 'Exercise', 'Reading'])\n\n# Set the y-axis label\nax.set_ylabel('Duration (minutes)')\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\nplt.show()"}
{"file": "dataset/ori_500/box_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(['Llama-70b (T2TT)', 'Llama-70b (S2TT)'], [19.5, 18.3], color=['orange', 'black'])\nplt.show()"}
{"file": "dataset/ori_500/box_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar(['AlphaBeta', 'z^', 'Gamma(y=0.05)', 'Gamma(y=0.1)', 'Gamma(y=0.25)'], [5.3, 4.7, 4.2, 3.9, 3.5], color='blue')\n\n# Set the title of the plot\nax.set_title('Gamma Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Parameters')\n\n# Set the y-axis label\nax.set_ylabel('Gamma Distribution')\n\nplt.show()"}
{"file": "dataset/ori_500/box_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data for each bar\nsql_only = [825, 875, 850, 840]\npot = [830, 860, 855, 845]\nic_lp = [810, 870, 860, 850]\ndail = [820, 875, 850, 845]\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(sql_only))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\n\n# Create a bar chart\nax.bar(r1, sql_only, color='blue', width=bar_width, edgecolor='grey', label='SQL-Only')\nax.bar(r2, pot, color='green', width=bar_width, edgecolor='grey', label='PoT')\nax.bar(r3, ic_lp, color='red', width=bar_width, edgecolor='grey', label='IC-LP')\nax.bar(r4, dail, color='purple', width=bar_width, edgecolor='grey', label='DAIL')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Execution Accuracy')\nax.set_ylabel('Execution Accuracy')\nax.set_title('Execution Accuracy by Database')\nax.set_xticks([r + bar_width for r in range(len(sql_only))])\nax.set_xticklabels(['SQL-Only', 'PoT', 'IC-LP', 'DAIL'])\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/box_14.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a bar chart\nax.bar(['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine'], [0.88, 0.87, 0.83], color=['blue', 'orange', 'green'])\n\n# Set the title of the plot\nax.set_title('Region Classification Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/box_15.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Create a bar chart with the data provided\nax.bar([0, 1, 2], [14.3, 17.6, 19.2], color='blue')\n\n# Set the x-axis labels\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['w/o att', 'w/o DP', '20xQ'])\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Set the title of the plot\nax.set_title('Threshold')\n\n# Set the color of the threshold line\nax.axhline(y=15, color='red', linestyle='-')\n\nplt.show()"}
{"file": "dataset/ori_500/box_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Data for plotting\nlabels = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nmen_means = [2.9, 2.5, 2.0, 1.5, 1.0, 0.5]\n\n# Set the positions and width for the bars\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\n# Plotting the data\nrects1 = ax.bar(x - width/2, men_means, width, label='Mean')\n\n# Adding some text for labels, title, and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\nfig.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/box_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1,2,3,4,5,6,7,8,9,10])\ny = np.array([85,87,88,89,90,91,92,93,94,95])\n\nplt.figure(figsize=(8.0, 4.0))\nplt.plot(x, y)\nplt.show()\nThe matplotlib code that reproduces the picture above is as follows:\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1,2,3,4,5,6,7,8,9,10])\ny = np.array([85,87,88,89,90,91,92,93,94,95])\n\nplt.figure(figsize=(8.0, 4.0))\nplt.plot(x, y)\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nx = np.arange(0.0, 1.0, 0.1)\nax.plot(x, np.sin(2 * np.pi * x), 'r-')\nplt.show()"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 4.0))\naxs[0].hist(np.random.normal(0.8, 0.2, 100), bins=10)\naxs[0].set_title('Bert Base')\naxs[1].hist(np.random.normal(0.9, 0.15, 100), bins=10)\naxs[1].set_title('MacBERT')\naxs[2].hist(np.random.normal(0.7, 0.15, 100), bins=10)\naxs[2].set_title('English HLM')\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart with the data\nax.bar(['Our Model', 'NTM+CL'], [2.5, 2.3], color='red')\n\n# Set the title of the plot\nax.set_title('Our Model')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Rating')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 5.0))\n\n# Digit span\naxs[0, 0].bar(['target', 'control'], [7.4, 6.8], color='blue')\naxs[0, 0].set_title('Digit span')\n\n# Lexical decision\naxs[0, 1].bar(['target', 'control'], [1.9, 1.3], color='green')\naxs[0, 1].set_title('Lexical decision')\n\n# Lexical decision\naxs[1, 0].bar(['target', 'control'], [1.8, 1.2], color='red')\naxs[1, 0].set_title('Lexical decision')\n\n# Reaction time\naxs[1, 1].bar(['target', 'control'], [1.1, 0.9], color='orange')\naxs[1, 1].set_title('Reaction time')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(100)\ny = np.random.randint(0, 100, 100)\n\nplt.figure(figsize=(9.0, 5.0))\nplt.plot(x, y, 'o')\nplt.show()"}
{"file": "dataset/ori_500/box_22.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([50, 100, 150, 200, 350])\ny = np.array([0.04, 0.02, 0.01, 0.03, 0.05])\n\nplt.bar(x, y, color='blue')\nplt.xlabel('Search depth')\nplt.ylabel('Reward')\nplt.title('Reward by Search Depth')\nplt.show()"}
{"file": "dataset/ori_500/box_23.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\nax.bar(['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Game Duration'], [65.1, 55.7, 38.1, 29.5], color=['blue', 'orange', 'green', 'purple'])\n\nplt.show()"}
{"file": "dataset/ori_500/box_24.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a bar chart with the data provided\nax.bar(['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment'], [2.9, 2.7, 2.4, 2.3, 2.1], color='blue')\n\n# Set the title of the plot\nax.set_title('Mean Value')\n\n# Set the x-axis label\nax.set_xlabel('Intervention')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/box_25.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar(np.arange(4), [7.5, 6.3, 5.6, 4.2], color='blue')\n\n# Set the x-axis tick labels\nax.set_xticks(np.arange(4))\nax.set_xticklabels(['SOCP No Learning', 'SOCP Learning (Proposed)', 'FMPC No Learning', 'FMPC Learning'])\n\n# Set the y-axis label\nax.set_ylabel('Thrust [rad/s]')\n\n# Set the title of the plot\nax.set_title('Comparison of Thrust for Different Models')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/box_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1, 2, 3])\ny = np.array([55, 57, 60])\n\nplt.bar(x, y, color=['blue', 'purple', 'red'])\nplt.show()"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(1, 4, figsize=(12.0, 3.0))\n\naxs[0].bar([0.2, 0.4, 0.6], [0.8, 0.9, 0.7], color='red')\naxs[0].set_title('REM (ours)')\naxs[0].set_xlabel('Human Normalized Score')\naxs[0].set_ylabel('Interquartile Gap')\n\naxs[1].bar([0.2, 0.4, 0.6], [0.5, 0.6, 0.7], color='orange')\naxs[1].set_title('IRIS -')\naxs[1].set_xlabel('Human Normalized Score')\naxs[1].set_ylabel('Interquartile Gap')\n\naxs[2].bar([0.2, 0.4, 0.6], [0.4, 0.5, 0.6], color='green')\naxs[2].set_title('STORM -')\naxs[2].set_xlabel('Human Normalized Score')\naxs[2].set_ylabel('Interquartile Gap')\n\naxs[3].bar([0.2, 0.4, 0.6], [0.3, 0.4, 0.5], color='blue')\naxs[3].set_title('TWM -')\naxs[3].set_xlabel('Human Normalized Score')\naxs[3].set_ylabel('Interquartile Gap')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each subplot\nx = [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]\ny1 = [29.7, 29.8, 30.0, 30.1, 30.2, 30.3, 30.4]\ny2 = [29.6, 29.7, 29.9, 30.0, 30.1, 30.2, 30.3]\ny3 = [29.5, 29.6, 29.8, 29.9, 30.0, 30.1, 30.2]\n\n# Create a figure with a specified size\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 6.0))\n\n# Plot the data for each subplot\naxs[0].bar(x, y1, color='blue')\naxs[1].bar(x, y2, color='orange')\naxs[2].bar(x, y3, color='red')\n\n# Set the title of each subplot\naxs[0].set_title('SOCP Learning (Proposed)')\naxs[1].set_title('SOCP No Learning')\naxs[2].set_title('FMPC')\n\n# Set the x-axis label for each subplot\naxs[0].set_xlabel('Angular Frequency [rad/s]')\naxs[1].set_xlabel('Angular Frequency [rad/s]')\naxs[2].set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label for each subplot\naxs[0].set_ylabel('Trust Angle')\naxs[1].set_ylabel('Trust Angle')\naxs[2].set_ylabel('Trust Angle')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.array([0, -10])\ny = np.array([11.25, 11.25])\n\n# Plot the data\nax.plot(x, y, 'o')\n\n# Set the title of the plot\nax.set_title('SE (bps/Hz)')\n\n# Set the labels for the x and y axes\nax.set_xlabel('CCE (dB)')\nax.set_ylabel('SE (bps/Hz)')\n\n# Set the limits for the x and y axes\nax.set_xlim(-10, 0)\nax.set_ylim(4, 12)\n\n# Set the tick marks for the x and y axes\nax.set_xticks([-10, 0])\nax.set_yticks([4, 6, 8, 10, 12])\n\n# Set the color of the line\nax.plot(x, y, color='red')\n\nplt.show()"}
{"file": "dataset/ori_500/box_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(25.0, 8.0))\n\n# Create a bar chart\nax.bar(range(1, 6), [15, 17, 19, 21, 23], color='blue')\n\n# Set the title of the plot\nax.set_title('Linear travel times')\n\n# Set the x-axis label\nax.set_xlabel('Day')\n\n# Set the y-axis label\nax.set_ylabel('Time (in minutes)')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Create a bar chart\nax2.bar(range(1, 6), [150, 170, 190, 210, 230], color='red')\n\n# Set the title of the plot\nax2.set_title('Exponential travel times')\n\n# Set the x-axis label\nax2.set_xlabel('Day')\n\n# Set the y-axis label\nax2.set_ylabel('Time (in minutes)')\n\nplt.show()"}
{"file": "dataset/ori_500/box_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data for the bar chart\nx = np.arange(3)\ny1 = [92.4, 96.7, 98.5]\ny2 = [90.1, 94.3, 96.2]\ny3 = [89.7, 93.1, 95.8]\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Create the bar chart\nax.bar(x - bar_width, y1, bar_width, label='Only WSI Modality')\nax.bar(x, y2, bar_width, label='Only CNV Modality')\nax.bar(x + bar_width, y3, bar_width, label='WSI+CNV Modality')\n\n# Add labels and title\nax.set_xlabel('Hospital')\nax.set_ylabel('AUC')\nax.set_title('AUC Comparison')\nax.set_xticks(x)\nax.set_xticklabels(['Hospital 1', 'Hospital 2', 'Hospital 3'])\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/box_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a bar chart\nax.bar(['Vanilla DIP', 'SGLD DIP', 'Ours'], [23.1, 22.9, 22.8], color='blue')\n\n# Set the title of the plot\nax.set_title('0.25 HIAR')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('PSNR (dB)')\n\n# Display the plot\nplt.show()\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a bar chart\nax.bar(['Vanilla DIP', 'SGLD DIP', 'Ours'], [19.6, 19.4, 19.2], color='blue')\n\n# Set the title of the plot\nax.set_title('0.1 HIAR')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('PSNR (dB)')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.set_title('T-SNE plot for the output variable Y3')\nax.set_xlabel('Output Variable X1')\nax.set_ylabel('Output Variable X2')\n\n# Ground Truth\nax.scatter(50, 70, color='blue', label='Ground Truth')\nax.scatter(40, 60, color='blue')\nax.scatter(30, 50, color='blue')\nax.scatter(20, 40, color='blue')\nax.scatter(10, 30, color='blue')\n\n# Generated\nax.scatter(70, 80, color='red', label='Generated')\nax.scatter(60, 70, color='red')\nax.scatter(50, 60, color='red')\nax.scatter(40, 50, color='red')\nax.scatter(30, 40, color='red')\n\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('\u03bb(x, z)')\nax.set_xlabel('x1')\nax.set_ylabel('x2')\n\n# Create a color map for the plot\ncmap = plt.cm.get_cmap('viridis', 5)\n\n# Create a grid of points\nx1 = np.linspace(0, 1, 100)\nx2 = np.linspace(0, 1, 100)\nX1, X2 = np.meshgrid(x1, x2)\n\n# Compute the values of the function at each point\nZ = np.sin(X1) * np.cos(X2)\n\n# Plot the function using a contour plot\ncontour = ax.contourf(X1, X2, Z, cmap=cmap)\n\n# Add a color bar to the plot\nfig.colorbar(contour)\n\nplt.show()"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('DBP (mmHg)')\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Draw blue circles for female data\nfemale_data = [95, 85, 75, 65, 55]\nfor i, d in enumerate(female_data):\n    circle = plt.Circle((d, 95), radius=2, color='blue')\n    ax.add_artist(circle)\n\n# Draw red circles for male data\nmale_data = [90, 80, 70, 60, 50]\nfor i, d in enumerate(male_data):\n    circle = plt.Circle((d, 90), radius=2, color='red')\n    ax.add_artist(circle)\n\nplt.show()\n\"\"\""}
{"file": "dataset/ori_500/contour_4.pdf", "response": "The value of z at point C is 12."}
{"file": "dataset/ori_500/contour_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.set_xlim(-4, 10)\nax.set_ylim(-2, 10)\n\n# Draw the outer circle\ncircle1 = plt.Circle((5, 5), 8, color='lightgrey')\nax.add_artist(circle1)\n\n# Draw the middle circle\ncircle2 = plt.Circle((5, 5), 6, color='lightblue')\nax.add_artist(circle2)\n\n# Draw the inner circle\ncircle3 = plt.Circle((5, 5), 4, color='lightgreen')\nax.add_artist(circle3)\n\n# Draw the innermost circle\ncircle4 = plt.Circle((5, 5), 2, color='lightcoral')\nax.add_artist(circle4)\n\n# Draw the blue square\nsquare = plt.Rectangle((4, 4), 2, 2, color='blue')\nax.add_artist(square)\n\n# Draw the red square\nsquare = plt.Rectangle((7, 4), 2, 2, color='red')\nax.add_artist(square)\n\n# Draw the green square\nsquare = plt.Rectangle((4, 7), 2, 2, color='green')\nax.add_artist(square)\n\n# Draw the yellow square\nsquare = plt.Rectangle((7, 7), 2, 2, color='yellow')\nax.add_artist(square)\n\n# Draw the black square\nsquare = plt.Rectangle((5, 5), 2, 2, color='black')\nax.add_artist(square)\n\n# Draw the white square\nsquare = plt.Rectangle((5, 5), 2, 2, color='white')\nax.add_artist(square)\n\n# Draw the orange square\nsquare = plt.Rectangle((5, 5), 2, 2, color='orange')\nax.add_artist(square)\n\n# Draw the purple square\nsquare = plt.Rectangle((5, 5), 2, 2, color='purple')\nax.add_artist(square)\n\n# Draw the brown square\nsquare = plt.Rectangle((5, 5), 2, 2, color='brown')\nax.add_artist(square)\n\n# Draw the pink square\nsquare = plt.Rectangle((5, 5), 2, 2, color='pink')\nax.add_artist(square)\n\n# Draw the grey square\nsquare = plt.Rectangle((5, 5), 2, 2, color='grey')\nax.add_artist(square)\n\n# Draw the teal square\nsquare = plt.Rectangle((5, 5), 2, 2, color='teal')\nax.add_artist(square)\n\n# Draw the indigo square\nsquare = plt.Rectangle((5, 5), 2, 2, color='indigo')\nax.add_artist(square)\n\n# Draw the violet square\nsquare = plt.Rectangle((5, 5), 2, 2, color='violet')\nax.add_artist(square)\n\n# Draw the magenta square\nsquare = plt.Rectangle((5, 5), 2, 2, color='magenta')\nax.add_artist(square)\n\n# Draw the cyan square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cyan')\nax.add_artist(square)\n\n# Draw the olive square\nsquare = plt.Rectangle((5, 5), 2, 2, color='olive')\nax.add_artist(square)\n\n# Draw the navy square\nsquare = plt.Rectangle((5, 5), 2, 2, color='navy')\nax.add_artist(square)\n\n# Draw the maroon square\nsquare = plt.Rectangle((5, 5), 2, 2, color='maroon')\nax.add_artist(square)\n\n# Draw the silver square\nsquare = plt.Rectangle((5, 5), 2, 2, color='silver')\nax.add_artist(square)\n\n# Draw the gold square\nsquare = plt.Rectangle((5, 5), 2, 2, color='gold')\nax.add_artist(square)\n\n# Draw the bronze square\nsquare = plt.Rectangle((5, 5), 2, 2, color='bronze')\nax.add_artist(square)\n\n# Draw the copper square\nsquare = plt.Rectangle((5, 5), 2, 2, color='copper')\nax.add_artist(square)\n\n# Draw the rose square\nsquare = plt.Rectangle((5, 5), 2, 2, color='rose')\nax.add_artist(square)\n\n# Draw the lavender square\nsquare = plt.Rectangle((5, 5), 2, 2, color='lavender')\nax.add_artist(square)\n\n# Draw the azure square\nsquare = plt.Rectangle((5, 5), 2, 2, color='azure')\nax.add_artist(square)\n\n# Draw the beige square\nsquare = plt.Rectangle((5, 5), 2, 2, color='beige')\nax.add_artist(square)\n\n# Draw the cream square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cream')\nax.add_artist(square)\n\n# Draw the khaki square\nsquare = plt.Rectangle((5, 5), 2, 2, color='khaki')\nax.add_artist(square)\n\n# Draw the coral square\nsquare = plt.Rectangle((5, 5), 2, 2, color='coral')\nax.add_artist(square)\n\n# Draw the peach square\nsquare = plt.Rectangle((5, 5), 2, 2, color='peach')\nax.add_artist(square)\n\n# Draw the apricot square\nsquare = plt.Rectangle((5, 5), 2, 2, color='apricot')\nax.add_artist(square)\n\n# Draw the plum square\nsquare = plt.Rectangle((5, 5), 2, 2, color='plum')\nax.add_artist(square)\n\n# Draw the indigo square\nsquare = plt.Rectangle((5, 5), 2, 2, color='indigo')\nax.add_artist(square)\n\n# Draw the violet square\nsquare = plt.Rectangle((5, 5), 2, 2, color='violet')\nax.add_artist(square)\n\n# Draw the magenta square\nsquare = plt.Rectangle((5, 5), 2, 2, color='magenta')\nax.add_artist(square)\n\n# Draw the cyan square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cyan')\nax.add_artist(square)\n\n# Draw the olive square\nsquare = plt.Rectangle((5, 5), 2, 2, color='olive')\nax.add_artist(square)\n\n# Draw the navy square\nsquare = plt.Rectangle((5, 5), 2, 2, color='navy')\nax.add_artist(square)\n\n# Draw the maroon square\nsquare = plt.Rectangle((5, 5), 2, 2, color='maroon')\nax.add_artist(square)\n\n# Draw the silver square\nsquare = plt.Rectangle((5, 5), 2, 2, color='silver')\nax.add_artist(square)\n\n# Draw the gold square\nsquare = plt.Rectangle((5, 5), 2, 2, color='gold')\nax.add_artist(square)\n\n# Draw the bronze square\nsquare = plt.Rectangle((5, 5), 2, 2, color='bronze')\nax.add_artist(square)\n\n# Draw the copper square\nsquare = plt.Rectangle((5, 5), 2, 2, color='copper')\nax.add_artist(square)\n\n# Draw the rose square\nsquare = plt.Rectangle((5, 5), 2, 2, color='rose')\nax.add_artist(square)\n\n# Draw the lavender square\nsquare = plt.Rectangle((5, 5), 2, 2, color='lavender')\nax.add_artist(square)\n\n# Draw the azure square\nsquare = plt.Rectangle((5, 5), 2, 2, color='azure')\nax.add_artist(square)\n\n# Draw the beige square\nsquare = plt.Rectangle((5, 5), 2, 2, color='beige')\nax.add_artist(square)\n\n# Draw the cream square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cream')\nax.add_artist(square)\n\n# Draw the khaki square\nsquare = plt.Rectangle((5, 5), 2, 2, color='khaki')\nax.add_artist(square)\n\n# Draw the coral square\nsquare = plt.Rectangle((5, 5), 2, 2, color='coral')\nax.add_artist(square)\n\n# Draw the peach square\nsquare = plt.Rectangle((5, 5), 2, 2, color='peach')\nax.add_artist(square)\n\n# Draw the apricot square\nsquare = plt.Rectangle((5, 5), 2, 2, color='apricot')\nax.add_artist(square)\n\n# Draw the plum square\nsquare = plt.Rectangle((5, 5), 2, 2, color='plum')\nax.add_artist(square)\n\n# Draw the indigo square\nsquare = plt.Rectangle((5, 5), 2, 2, color='indigo')\nax.add_artist(square)\n\n# Draw the violet square\nsquare = plt.Rectangle((5, 5), 2, 2, color='violet')\nax.add_artist(square)\n\n# Draw the magenta square\nsquare = plt.Rectangle((5, 5), 2, 2, color='magenta')\nax.add_artist(square)\n\n# Draw the cyan square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cyan')\nax.add_artist(square)\n\n# Draw the olive square\nsquare = plt.Rectangle((5, 5), 2, 2, color='olive')\nax.add_artist(square)\n\n# Draw the navy square\nsquare = plt.Rectangle((5, 5), 2, 2, color='navy')\nax.add_artist(square)\n\n# Draw the maroon square\nsquare = plt.Rectangle((5, 5), 2, 2, color='maroon')\nax.add_artist(square)\n\n# Draw the silver square\nsquare = plt.Rectangle((5, 5), 2, 2, color='silver')\nax.add_artist(square)\n\n# Draw the gold square\nsquare = plt.Rectangle((5, 5), 2, 2, color='gold')\nax.add_artist(square)\n\n# Draw the bronze square\nsquare = plt.Rectangle((5, 5), 2, 2, color='bronze')\nax.add_artist(square)\n\n# Draw the copper square\nsquare = plt.Rectangle((5, 5), 2, 2, color='copper')\nax.add_artist(square)\n\n# Draw the rose square\nsquare = plt.Rectangle((5, 5), 2, 2, color='rose')\nax.add_artist(square)\n\n# Draw the lavender square\nsquare = plt.Rectangle((5, 5), 2, 2, color='lavender')\nax.add_artist(square)\n\n# Draw the azure square\nsquare = plt.Rectangle((5, 5), 2, 2, color='azure')\nax.add_artist(square)\n\n# Draw the beige square\nsquare = plt.Rectangle((5, 5), 2, 2, color='beige')\nax.add_artist(square)\n\n# Draw the cream square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cream')\nax.add_artist(square)\n\n# Draw the khaki square\nsquare = plt.Rectangle((5, 5), 2, 2, color='khaki')\nax.add_artist(square)\n\n# Draw the coral square\nsquare = plt.Rectangle((5, 5), 2, 2, color='coral')\nax.add_artist(square)\n\n# Draw the peach square\nsquare = plt.Rectangle((5, 5), 2, 2, color='peach')\nax.add_artist(square)\n\n# Draw the apricot square\nsquare = plt.Rectangle((5, 5), 2, 2, color='apricot')\nax.add_artist(square)\n\n# Draw the plum square\nsquare = plt.Rectangle((5, 5), 2, 2, color='plum')\nax.add_artist(square)\n\n# Draw the indigo square\nsquare = plt.Rectangle((5, 5), 2, 2, color='indigo')\nax.add_artist(square)\n\n# Draw the violet square\nsquare = plt.Rectangle((5, 5), 2, 2, color='violet')\nax.add_artist(square)\n\n# Draw the magenta square\nsquare = plt.Rectangle((5, 5), 2, 2, color='magenta')\nax.add_artist(square)\n\n# Draw the cyan square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cyan')\nax.add_artist(square)\n\n# Draw the olive square\nsquare = plt.Rectangle((5, 5), 2, 2, color='olive')\nax.add_artist(square)\n\n# Draw the navy square\nsquare = plt.Rectangle((5, 5), 2, 2, color='navy')\nax.add_artist(square)\n\n# Draw the maroon square\nsquare = plt.Rectangle((5, 5), 2, 2, color='maroon')\nax.add_artist(square)\n\n# Draw the silver square\nsquare = plt.Rectangle((5, 5), 2, 2, color='silver')\nax.add_artist(square)\n\n# Draw the gold square\nsquare = plt.Rectangle((5, 5), 2, 2, color='gold')\nax.add_artist(square)\n\n# Draw the bronze square\nsquare = plt.Rectangle((5, 5), 2, 2, color='bronze')\nax.add_artist(square)\n\n# Draw the copper square\nsquare = plt.Rectangle((5, 5), 2, 2, color='copper')\nax.add_artist(square)\n\n# Draw the rose square\nsquare = plt.Rectangle((5, 5), 2, 2, color='rose')\nax.add_artist(square)\n\n# Draw the lavender square\nsquare = plt.Rectangle((5, 5), 2, 2, color='lavender')\nax.add_artist(square)\n\n# Draw the azure square\nsquare = plt.Rectangle((5, 5), 2, 2, color='azure')\nax.add_artist(square)\n\n# Draw the beige square\nsquare = plt.Rectangle((5, 5), 2, 2, color='beige')\nax.add_artist(square)\n\n# Draw the cream square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cream')\nax.add_artist(square)\n\n# Draw the khaki square\nsquare = plt.Rectangle((5, 5), 2, 2, color='khaki')\nax.add_artist(square)\n\n# Draw the coral square\nsquare = plt.Rectangle((5, 5), 2, 2, color='coral')\nax.add_artist(square)\n\n# Draw the peach square\nsquare = plt.Rectangle((5, 5), 2, 2, color='peach')\nax.add_artist(square)\n\n# Draw the apricot square\nsquare = plt.Rectangle((5, 5), 2, 2, color='apricot')\nax.add_artist(square)\n\n# Draw the plum square\nsquare = plt.Rectangle((5, 5), 2, 2, color='plum')\nax.add_artist(square)\n\n# Draw the indigo square\nsquare = plt.Rectangle((5, 5), 2, 2, color='indigo')\nax.add_artist(square)\n\n# Draw the violet square\nsquare = plt.Rectangle((5, 5), 2, 2, color='violet')\nax.add_artist(square)\n\n# Draw the magenta square\nsquare = plt.Rectangle((5, 5), 2, 2, color='magenta')\nax.add_artist(square)\n\n# Draw the cyan square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cyan')\nax.add_artist(square)\n\n# Draw the olive square\nsquare = plt.Rectangle((5, 5), 2, 2, color='olive')\nax.add_artist(square)\n\n# Draw the navy square\nsquare = plt.Rectangle((5, 5), 2, 2, color='navy')\nax.add_artist(square)\n\n# Draw the maroon square\nsquare = plt.Rectangle((5, 5), 2, 2, color='maroon')\nax.add_artist(square)\n\n# Draw the silver square\nsquare = plt.Rectangle((5, 5), 2, 2, color='silver')\nax.add_artist(square)\n\n# Draw the gold square\nsquare = plt.Rectangle((5, 5), 2, 2, color='gold')\nax.add_artist(square)\n\n# Draw the bronze square\nsquare = plt.Rectangle((5, 5), 2, 2, color='bronze')\nax.add_artist(square)\n\n# Draw the copper square\nsquare = plt.Rectangle((5, 5), 2, 2, color='copper')\nax.add_artist(square)\n\n# Draw the rose square\nsquare = plt.Rectangle((5, 5), 2, 2, color='rose')\nax.add_artist(square)\n\n# Draw the lavender square\nsquare = plt.Rectangle((5, 5), 2, 2, color='lavender')\nax.add_artist(square)\n\n# Draw the azure square\nsquare = plt.Rectangle((5, 5), 2, 2, color='azure')\nax.add_artist(square)\n\n# Draw the beige square\nsquare = plt.Rectangle((5, 5), 2, 2, color='beige')\nax.add_artist(square)\n\n# Draw the cream square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cream')\nax.add_artist(square)\n\n# Draw the khaki square\nsquare = plt.Rectangle((5, 5), 2, 2, color='khaki')\nax.add_artist(square)\n\n# Draw the coral square\nsquare = plt.Rectangle((5, 5), 2, 2, color='coral')\nax.add_artist(square)\n\n# Draw the peach square\nsquare = plt.Rectangle((5, 5), 2, 2, color='peach')\nax.add_artist(square)\n\n# Draw the apricot square\nsquare = plt.Rectangle((5, 5), 2, 2, color='apricot')\nax.add_artist(square)\n\n# Draw the plum square\nsquare = plt.Rectangle((5, 5), 2, 2, color='plum')\nax.add_artist(square)\n\n# Draw the indigo square\nsquare = plt.Rectangle((5, 5), 2, 2, color='indigo')\nax.add_artist(square)\n\n# Draw the violet square\nsquare = plt.Rectangle((5, 5), 2, 2, color='violet')\nax.add_artist(square)\n\n# Draw the magenta square\nsquare = plt.Rectangle((5, 5), 2, 2, color='magenta')\nax.add_artist(square)\n\n# Draw the cyan square\nsquare = plt.Rectangle((5, 5), 2, 2, color='cyan')\nax.add_artist(square)\n\n# Draw the olive square\nsquare = plt.Rectangle((5, 5), 2, 2, color='olive')\nax.add_artist(square)\n\n# Draw the navy square\nsquare = plt.Rectangle((5, 5), 2, 2, color='navy')\nax"}
{"file": "dataset/ori_500/density_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(8, 16)\ny = [14.5, 17.2, 19.1, 16.8, 15.4, 13.2, 12.1, 11.0]\nplt.bar(x, y, color='red')\nplt.show()"}
{"file": "dataset/ori_500/density_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='pink'))\n\n# Draw a triangle\nax.add_patch(plt.Polygon([[0.75, 0.25], [0.75, 0.75], [1.25, 0.5]], color='pink'))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.25, color='pink')\nax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Show the plot\nplt.show()\nplt.close()"}
{"file": "dataset/ori_500/density_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a histogram of the data\nax.hist(np.random.normal(0.5, 0.2, 1000), bins=30, color='lightblue')\n\n# Set the title of the plot\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Spearmen Coefficient')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\nplt.show()"}
{"file": "dataset/ori_500/density_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\nx = np.arange(7, 16)\ny1 = [0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\ny2 = [0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\ny3 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\nax.plot(x, y1, 'b-', label='Random Bundle')\nax.plot(x, y2, 'r-', label='Increase Price')\nax.plot(x, y3, 'g-', label='Reserved price')\n\nax.set_xlabel('p')\nax.set_ylabel('Shape Density')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/density_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.0, 5.0, 0.1)\ny1 = np.sin(2 * np.pi * x)\ny2 = np.cos(2 * np.pi * x)\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.plot(x, y1, 'b-', label='Gucci')\nax.plot(x, y2, 'g-', label='Chanel')\n\nplt.show()"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [-0.5, -0.4, -0.3, -0.2, -0.1, 0.0]\ny}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nax.bar([1, 2, 4], [5.3, 5.7, 6.1], color='green')\nax.bar([8], [6.4], color='purple')\n\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\nax.set_title('Expert dimension')\n\nplt.show()"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Create a bar chart with the data provided\nax.bar(['Hospital 1', 'Hospital 2', 'Hospital 3'], [0.748, 0.759, 0.713], color='blue')\nax.bar(['Hospital 1', 'Hospital 2', 'Hospital 3'], [0.715, 0.762, 0.709], bottom=[0.748, 0.759, 0.713], color='red')\nax.bar(['Hospital 1', 'Hospital 2', 'Hospital 3'], [0.748, 0.748, 0.713], bottom=[0.748+0.715, 0.759+0.762, 0.713+0.709], color='green')\n\n# Set the title of the plot\nax.set_title('Accuracy by hospital and method')\n\n# Set the labels for the x-axis\nax.set_xlabel('Hospital')\n\n# Set the labels for the y-axis\nax.set_ylabel('Accuracy')\n\nplt.show()"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Create a bar chart with the data provided\nax.bar(['GPT-4 Buyer (valuation 40)', 'GPT-2.1 Buyer (valuation 40)', 'GPT-3.5 Buyer (valuation 40)'], [-17.6, -19.1, -18.4], color='blue')\nax.bar(['GPT-4 Buyer (valuation 40)', 'GPT-2.1 Buyer (valuation 40)', 'GPT-3.5 Buyer (valuation 40)'], [-16.1, -17.6, -16.9], color='red')\nax.bar(['GPT-4 Buyer (valuation 40)', 'GPT-2.1 Buyer (valuation 40)', 'GPT-3.5 Buyer (valuation 40)'], [-14.6, -16.1, -15.4], color='green')\n\n# Set the title of the plot\nax.set_title('GPT-4 Buyer (valuation 40)')\n\n# Set the x-axis label\nax.set_xlabel('Buyer')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(['[m]', '[&DAR-1]', '[none]'], [0.96, 0.86, 0.78], color='gray')\nax.set_title('DNN x red (k=1)')\nax.set_ylabel('Accuracy')\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(1, 5)\ny = [0.02, 0.01, 0.01, 0.01]\nplt.bar(x, y, color='red')\nplt.show()"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 3.0))\n\n# AUG\naxs[0].bar(['Medium'], [85], color='red')\naxs[0].set_title('AUG')\n\n# TEstimation\naxs[1].bar(['Medium'], [87], color='yellow')\naxs[1].set_title('TEstimation')\n\n# Quality\naxs[2].bar(['Medium'], [89], color='blue')\naxs[2].set_title('Quality')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('FashionMNIST (NEURAL)')\nax.set_xlabel('Hyperparameters')\nax.set_ylabel('Metric')\n\nx = np.arange(128, 64, -1)\ny = [0.95, 0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80, 0.79, 0.78, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.70, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.61, 0.60, 0.59, 0.58, 0.57, 0.56, 0.55, 0.54, 0.53, 0.52, 0.51, 0.50, 0.49, 0.48, 0.47, 0.46, 0.45, 0.44, 0.43, 0.42, 0.41, 0.40, 0.39, 0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.32, 0.31, 0.30, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.10, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01, 0.00]\n\nax.plot(x, y, 'o-')\n\nplt.show()"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(4)\ny1 = [0.8, 0.7, 0.6, 0.5]\ny2 = [0.3, 0.2, 0.1, 0.0]\n\n# Creating the bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.bar(x, y1, color='purple')\nax.bar(x, y2, bottom=y1, color='pink')\n\n# Adding labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Higher Education Enrollment Rate')\nax.set_title('Higher Education Enrollment Rate')\nax.set_xticks(x)\nax.set_xticklabels(['Japan', 'Brazil', 'India', 'Germany'])\n\nplt.show()"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Annual Carbon Dioxide Emissions\nemissions = [1200, 1800, 5000, 3200, 4000, 10000]\nlabels = ['Africa', 'South America', 'Asia', 'Europe']\ncolors = ['orange', 'yellow', 'lightblue', 'pink']\n\nplt.figure(figsize=(6.0, 9.0))\nplt.bar(labels, emissions, color=colors)\nplt.title('Annual Carbon Dioxide Emissions')\nplt.xlabel('Region')\nplt.ylabel('Emissions (Millions of Metric Tons)')\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Crime Rate\nplt.subplot(3, 1, 1)\nplt.bar(['Detroit', 'Philadelphia', 'Baltimore'], [85, 76, 82], color='purple')\nplt.title('Crime Rate')\n\n# Happiness Index\nplt.subplot(3, 1, 2)\nplt.bar(['Detroit', 'Philadelphia', 'Baltimore'], [84, 77, 80], color='blue')\nplt.title('Happiness Index')\n\n# Social Security Coverage\nplt.subplot(3, 1, 3)\nplt.bar(['Detroit', 'Philadelphia', 'Baltimore'], [88, 85, 87], color='red')\nplt.title('Social Security Coverage')\n\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([20, 40, 60, 80, 100])\ny_expert = np.array([95, 97, 98, 99, 100])\ny_blind = np.array([85, 87, 88, 89, 90])\ny_consultancy = np.array([75, 77, 78, 79, 80])\ny_debate = np.array([65, 67, 68, 69, 70])\n\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y_expert, label='Expert')\nplt.plot(x, y_blind, label='Blind')\nplt.plot(x, y_consultancy, label='Consultancy')\nplt.plot(x, y_debate, label='Debate')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.plot([1, 2, 3], [18.4, 17.6, 17.9], 'ro-', label='Spring')\nax.plot([1, 2, 3], [14.2, 14.1, 14.0], 'bo-', label='Autumn')\nax.set_xlabel('City')\nax.set_ylabel('Temperature (\u00b0C)')\nax.set_title('Annual Average Temperature')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Germany\ngermany = [25, 20, 15, 10, 5]\n# China\nchina = [20, 15, 10, 5, 0]\n# USA\nusa = [15, 10, 5, 0, 0]\n# India\nindia = [10, 5, 0, 0, 0]\n# Brazil\nbrazil = [5, 0, 0, 0, 0]\n\nx = np.arange(len(germany))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width/2, germany, width, label='Germany')\nrects2 = ax.bar(x, china, width, label='China')\nrects3 = ax.bar(x + width/2, usa, width, label='USA')\n\nax.set_ylabel('Energy Consumption (Petajoules)')\nax.set_title('Total Energy Consumption by Country')\nax.set_xticks(x)\nax.set_xticklabels(['-6000', '-5000', '-4000', '-3000', '-2000'])\nax.legend()\n\nfig.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Data for plotting\nx = [-0.1, 0.0, 0.0]\ny = [0.15, 0.05, 0.05]\nz = [0.2, 0.15, 0.1]\n\n# Creating the bar chart\nax.bar(x, y, color='red')\nax.bar(x, z, bottom=y, color='blue')\n\n# Adding labels and title\nax.set_xlabel('Appliance')\nax.set_ylabel('Energy Efficiency Rating')\nax.set_title('Energy Efficiency Ratings by Appliance Model')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\nx = np.array([92.3, 87.6, 94.1, 96.7])\ny = np.array([98.7, 95.4, 97.2, 96.1])\n\nax.bar(x, y, color='blue')\nax.set_xlabel('Energy Assessment Entity')\nax.set_ylabel('Energy Efficiency and Cost Scores')\nax.set_title('Energy Assessment Protocol')\n\nplt.show()"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a list of countries\ncountries = ['North America', 'Europe', 'Asia', 'Australia', 'Central America', 'South America', 'Middle East', 'Southeast Asia', 'Canada']\n\n# Create a list of values for high school graduation rates\nhigh_school_graduation_rates = [95.2, 94.8, 93.7, 93.6, 92.8, 92.7, 92.6, 92.5, 92.4]\n\n# Create a list of values for higher education enrollment rates\nhigher_education_enrollment_rates = [108.4, 107.8, 107.6, 107.5, 107.4, 107.3, 107.2, 107.1, 107.0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Create a bar chart with the data from the lists\nax.bar(countries, high_school_graduation_rates, color='lightgrey')\n\n# Create a second bar chart with the data from the lists\nax.bar(countries, higher_education_enrollment_rates, bottom=high_school_graduation_rates, color='orange')\n\n# Set the title of the plot\nax.set_title('Educational Metrics by Region')\n\n# Set the x-axis label\nax.set_xlabel('Region')\n\n# Set the y-axis label\nax.set_ylabel('Percentage (%)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\nax.barh(['iPhone 13', 'Samsung S21', 'Google Pixel 6'], [46.3, 30.1, 34.0], color='blue')\nax.barh(['iPhone 13', 'Samsung S21', 'Google Pixel 6'], [57.9, 53.8, 43.7], color='red')\n\nax.set_xlabel('Misleading Recall Rate (%)')\nax.set_title('Comparison of Recall Rates Across Products')\n\nplt.show()"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nx = np.arange(5)\ny = [15, 75, 18, 82, 20]\nax.barh(x, y, color='skyblue')\nax.set_yticks(x)\nax.set_yticklabels(['Support', 'Delivery', 'Product Quality', 'Returns', 'Price'])\nplt.show()"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nx = np.arange(4)\ny = [75, 82, 78, 85]\nax.bar(x, y, color=['pink', 'orange', 'red', 'yellow'])\nax.set_xticks(x)\nax.set_xticklabels(['Support', 'Delivery', 'Product Quality', 'Returns'])\nplt.show()"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Watering Frequency\nwatering_freq = [0.25, 0.2, 0.15, 0.1, 0.05]\nwatering_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(watering_labels, watering_freq, color='lightgreen')\n\n# Planting Density\nplanting_density = [0.25, 0.2, 0.15, 0.1, 0.05]\nplanting_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(planting_labels, planting_density, color='lightblue')\n\n# Plant Variety\nplant_variety = [0.25, 0.2, 0.15, 0.1, 0.05]\nplant_variety_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(plant_variety_labels, plant_variety, color='lightcoral')\n\n# CO2 Levels\nco2_levels = [0.25, 0.2, 0.15, 0.1, 0.05]\nco2_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(co2_labels, co2_levels, color='lightskyblue')\n\n# Pesticides\npesticides = [0.25, 0.2, 0.15, 0.1, 0.05]\npesticide_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(pesticide_labels, pesticides, color='lightgreen')\n\n# Temperature\ntemperature = [0.25, 0.2, 0.15, 0.1, 0.05]\ntemperature_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(temperature_labels, temperature, color='lightblue')\n\n# Fertilizer\nfertilizer = [0.25, 0.2, 0.15, 0.1, 0.05]\nfertilizer_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(fertilizer_labels, fertilizer, color='lightcoral')\n\n# Soil pH\nsoil_ph = [0.25, 0.2, 0.15, 0.1, 0.05]\nsoil_ph_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(soil_ph_labels, soil_ph, color='lightskyblue')\n\n# Water Quality\nwater_quality = [0.25, 0.2, 0.15, 0.1, 0.05]\nwater_quality_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(water_quality_labels, water_quality, color='lightgreen')\n\n# Sunlight\nsunlight = [0.25, 0.2, 0.15, 0.1, 0.05]\nsunlight_labels = ['0.25', '0.2', '0.15', '0.1', '0.05']\nplt.bar(sunlight_labels, sunlight, color='lightblue')\n\n# Setting the figure size\nfig = plt.figure(figsize=(10.0, 8.0))\n\nplt.show()"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# New York\naxs[0].barh(['Traffic Volume', 'Public Transit', 'Accident Rate'], [250, 175, 200], color=['red', 'blue', 'green'])\naxs[0].set_title('New York')\n\n# Los Angeles\naxs[1].barh(['Traffic Volume', 'Public Transit', 'Accident Rate'], [220, 160, 180], color=['red', 'blue', 'green'])\naxs[1].set_title('Los Angeles')\n\n# Chicago\naxs[2].barh(['Traffic Volume', 'Public Transit', 'Accident Rate'], [210, 150, 160], color=['red', 'blue', 'green'])\naxs[2].set_title('Chicago')\n\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.8, 0.9, 0.8, 0.7], 'o-')\n\nplt.show()"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = ['City A', 'City B', 'City C', 'City D']\ny1 = [0.2, -0.4, -0.6, -0.8]\ny2 = [-0.3, -0.5, -0.7, -0.9]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(x, y1, color='red', label='Air Quality')\nax.bar(x, y2, bottom=y1, color='green', label='Water Quality')\n\n# Set the title and labels\nax.set_title('Environmental Impact Scores Across Cities')\nax.set_xlabel('Cities')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([\"Werewolf\", \"Seer\", \"Witch\", \"Hunter\", \"Villager\"])\ny = np.array([84.97, 67.17, 78.22, 85.17, 92.67])\nplt.figure(figsize=(10.0, 4.0))\nplt.bar(x, y)\nplt.show()"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "import matplotlib.pyplot as plt\n\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\nplt.figure(figsize=(10.0, 7.0))\nplt.plot(x, y, 'bo-')\nplt.xlabel('Size of Data for Training and Validation')\nplt.ylabel('Size+info (%)')\nplt.title('Size+info (%) by Size of Data for Training and Validation')\nplt.show()"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.plot([1, 2, 3, 4, 5], [832.6, 830.7, 829.8, 828.9, 827.0], 'ro')\nax.set_title('Out-of-domain accuracy')\nax.set_xlabel('Test set')\nax.set_ylabel('Accuracy')\nplt.show()"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.plot([0.7], [0.8], 'ro')\nplt.show()"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['BART', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'DeBERTa', 'Llama2']\nground_truth = [64.5, 58.7, 60.9, 62.1, 59.4, 60.2, 61.1, 57.8]\nweak_labels = [54.2, 48.5, 50.3, 51.4, 49.1, 50.2, 51.1, 48.6]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\nrects1 = ax.bar(x - width/2, ground_truth, width, label='Ground-Truth labels')\nrects2 = ax.bar(x + width/2, weak_labels, width, label='Weak labels')\n\nax.set_ylabel('Accuracy (%)')\nax.set_title('Accuracy of different models')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{:.1f}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset.\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\nx = np.arange(-3.5, 1.5, 0.1)\ny = np.sin(x)\n\nax.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([\"Kashmir\", \"Religion\", \"Crime and Justice\", \"C_AA\", \"Pulwama Balakot\", \"Politics\"])\ny = np.array([1.2, 1.4, 1.6, 1.7, 1.8, 1.9])\n\nplt.figure(figsize=(8.0, 5.0))\nplt.bar(x, y, color='blue')\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Create a bar chart\nax.bar(range(1, 21), np.random.rand(20)*10)\n\n# Set the title of the plot\nax.set_title('Variable, Symmetric Error')\n\n# Set the x-axis label\nax.set_xlabel('X-axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis Label')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.16, 0.29, 0.01)\ny = np.random.rand(13)\n\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y, 'ro')\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\nax.plot([-19.6, -19.5], [-19.353, -19.353], 'k-')\nax.plot([-19.6, -19.5], [-19.220, -19.220], 'k-')\n\nax.text(-19.6, -19.353, '-19.353', fontsize=12)\nax.text(-19.6, -19.220, '-19.220', fontsize=12)\n\nax.set_xlabel('M$_B$')\nax.set_ylabel('M$_\\odot$')\nax.set_title('CC+Pantheon+')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([4, 8, 12, 16])\ny = np.array([13.5, 12.5, 14.5, 15.5])\n\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y, 'o')\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([\"KASHMIR\", \"COVID/LOCKDOWN\", \"SPORTS\", \"CHINA\"])\ny = np.array([1.95, 1.72, 1.43, 1.21])\n\nplt.bar(x, y, color = 'blue')\nplt.title('Female Face Presence in Fraction of Videos')\nplt.xlabel('Category')\nplt.ylabel('Fraction of Videos')\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(1, 6)\ny = np.array([2.3, 1.8, 1.5, 1.4, 1.2])\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.plot(x, y, 'o-')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Errorbar upper and lower limits')\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(1)\nx = np.random.normal(5, 2, 100)\ny = np.random.normal(10, 2, 100)\n\nplt.figure(figsize=(10.0, 4.0))\nplt.scatter(x, y)\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 2, 4, 6, 8, 10])\ny = np.array([3.587, 3.704, 3.774, 2.889, 2.044, 1.829])\n\nplt.figure(figsize=(10.0, 7.0))\nplt.plot(x, y, 'g-')\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-3, 2, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw a circle with radius 1 centered at (0,0)\ncircle = plt.Circle((0,0), 1, color='blue')\nax.add_artist(circle)\n\n# Draw a line from the center of the circle to the point (1,0)\nline = plt.Line2D([0,1], [0,0], color='black')\nax.add_artist(line)\n\n# Draw a point at (1,0)\npoint = plt.Circle((1,0), 0.05, color='red')\nax.add_artist(point)\n\n# Draw a line from the point (1,0) to the point (1,1)\nline = plt.Line2D([1,1], [0,1], color='black')\nax.add_artist(line)\n\n# Draw a point at (1,1)\npoint = plt.Circle((1,1), 0.05, color='green')\nax.add_artist(point)\n\n# Draw a line from the point (1,1) to the point (0,1)\nline = plt.Line2D([1,0], [1,1], color='black')\nax.add_artist(line)\n\n# Draw a point at (0,1)\npoint = plt.Circle((0,1), 0.05, color='purple')\nax.add_artist(point)\n\n# Draw a line from the point (0,1) to the point (0,0)\nline = plt.Line2D([0,0], [1,0], color='black')\nax.add_artist(line)\n\n# Draw a point at (0,0)\npoint = plt.Circle((0,0), 0.05, color='orange')\nax.add_artist(point)\n\n# Set the limits of the plot\nax.set_xlim(-1, 2)\nax.set_ylim(-1, 2)\n\n# Show the plot\nplt.show()\nThis code will create a plot with a blue circle, a black line, and red, green, purple, and orange points. The points are connected by black lines. The plot has a white background. The plot is displayed in a window."}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111)\n\n# Draw the network\nax.plot([0, 1, 2, 3], [0, 1, 2, 3], 'o-')\n\n# Draw the nodes\nax.plot([0, 1, 2, 3], [0, 1, 2, 3], 'ro')\n\nplt.show()"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "The number at point 12 is 2."}
{"file": "dataset/ori_500/graph_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Draw a circle at the center of the figure\nax.add_artist(plt.Circle((5, 5), 2, color='blue'))\n\n# Draw a rectangle with a width of 4 and a height of 3\nax.add_patch(plt.Rectangle((2, 2), 4, 3, color='red'))\n\n# Draw a triangle with vertices at (0, 0), (5, 0), and (2.5, 4)\nax.add_patch(plt.Polygon([(0, 0), (5, 0), (2.5, 4)], color='green'))\n\n# Draw a square with a side length of 2\nax.add_patch(plt.Rectangle((0, 5), 2, 2, color='purple'))\n\n# Draw a pentagon with vertices at (0, 7), (2, 6), (4, 7), (3, 9), and (1, 8)\nax.add_patch(plt.Polygon([(0, 7), (2, 6), (4, 7), (3, 9), (1, 8)], color='orange'))\n\n# Draw a hexagon with vertices at (6, 7), (8, 6), (10, 7), (9, 9), (7, 8), and (5, 7)\nax.add_patch(plt.Polygon([(6, 7), (8, 6), (10, 7), (9, 9), (7, 8), (5, 7)], color='pink'))\n\n# Draw a heptagon with vertices at (6, 2), (8, 3), (10, 2), (9, 0), (7, 1), (5, 2), and (3, 1)\nax.add_patch(plt.Polygon([(6, 2), (8, 3), (10, 2), (9, 0), (7, 1), (5, 2), (3, 1)], color='brown'))\n\n# Draw an octagon with vertices at (0, 2), (2, 3), (4, 2), (3, 0), (1, 1), (0, 2), (-1, 1), and (-3, 0)\nax.add_patch(plt.Polygon([(0, 2), (2, 3), (4, 2), (3, 0), (1, 1), (0, 2), (-1, 1), (-3, 0)], color='cyan'))\n\n# Draw a nonagon with vertices at (0, 7), (2, 6), (4, 7), (3, 9), (1, 8), (0, 7), (-1, 6), (-3, 7), and (-2, 9)\nax.add_patch(plt.Polygon([(0, 7), (2, 6), (4, 7), (3, 9), (1, 8), (0, 7), (-1, 6), (-3, 7), (-2, 9)], color='magenta'))\n\n# Draw a decagon with vertices at (6, 2), (8, 3), (10, 2), (9, 0), (7, 1), (5, 2), (3, 1), (1, 2), (0, 3), and (-1, 2)\nax.add_patch(plt.Polygon([(6, 2), (8, 3), (10, 2), (9, 0), (7, 1), (5, 2), (3, 1), (1, 2), (0, 3), (-1, 2)], color='yellow'))\n\n# Set the limits of the x and y axes\nax.set_xlim(-5, 15)\nax.set_ylim(-5, 15)\n\n# Display the plot\nplt.show()\nThis code will create a figure with a circle, rectangle, triangle, square, pentagon, hexagon, heptagon, octagon, nonagon, and decagon. The colors of the shapes are set to blue, red, green, purple, orange, pink, brown, cyan, magenta, and yellow, respectively. The limits of the x and y axes are set to -5 and 15, respectively."}
{"file": "dataset/ori_500/graph_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Draw a triangle\nax.plot([0, 1, 1, 0], [0, 0, 1, 0], 'k-')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.2, color='r')\nax.add_artist(circle)\n\n# Draw a point\nax.plot(0.5, 0.5, 'ro')\n\n# Set the limits of the plot\nax.set_xlim(-0.5, 1.5)\nax.set_ylim(-0.5, 1.5)\n\n# Show the plot\nplt.show()\nThis code will create a plot with a black triangle, a red circle, and a red point at the center of the circle. The circle is centered at (0.5, 0.5) with a radius of 0.2. The limits of the plot are set to (-0.5, 1.5) for both x and y axes."}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# CoreNLP\nx1 = np.arange(0, 1, 0.1)\ny1 = np.random.rand(10)\nplt.bar(x1, y1, color='red')\n\n# Stanza\nx2 = np.arange(0, 1, 0.1)\ny2 = np.random.rand(10)\nplt.bar(x2, y2, color='black')\n\n# Biaffine\nx3 = np.arange(0, 1, 0.1)\ny3 = np.random.rand(10)\nplt.bar(x3, y3, color='blue')\n\n# StackPointer\nx4 = np.arange(0, 1, 0.1)\ny4 = np.random.rand(10)\nplt.bar(x4, y4, color='green')\n\n# TowerParse\nx5 = np.arange(0, 1, 0.1)\ny5 = np.random.rand(10)\nplt.bar(x5, y5, color='purple')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('Voter Preferences')\nax.set_xlabel('Voter')\nax.set_ylabel('Percentage')\n\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\nvoter_data = [15.7, 26.0, 2.1, 12.3, 50.3]\ncolors = ['blue', 'blue', 'orange', 'blue', 'blue']\n\nfor i, data in enumerate(voter_data):\n    ax.barh(voters[i], data, color=colors[i])\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a color map\ncmap = plt.cm.get_cmap('viridis')\n\n# Create a list of players\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\n\n# Create a list of player scores\nscores = [0.95, 0.75, 0.45, 0.25, 0.1]\n\n# Create a list of colors for each player\ncolors = ['orange', 'red', 'purple', 'pink', 'blue']\n\n# Create a bar chart\nax.bar(players, scores, color=colors)\n\n# Set the title of the plot\nax.set_title('Player Scores')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\nThe matplotlib code that reproduces the picture above is as follows:\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a color map\ncmap = plt.cm.get_cmap('viridis')\n\n# Create a list of players\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\n\n# Create a list of player scores\nscores = [0.95, 0.75, 0.45, 0.25, 0.1]\n\n# Create a list of colors for each player\ncolors = ['orange', 'red', 'purple', 'pink', 'blue']\n\n# Create a bar chart\nax.bar(players, scores, color=colors)\n\n# Set the title of the plot\nax.set_title('Player Scores')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Create a bar chart with the data provided\nax.bar([10, 20, 30, 40], [15, 25, 35, 45], color='blue')\n\n# Set the title of the plot\nax.set_title('Labeling Function Similarity')\n\n# Set the x-axis label\nax.set_xlabel('Predicted category')\n\n# Set the y-axis label\nax.set_ylabel('Labeling function similarity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a bar chart\nax.bar(['D2', 'D1', 'D0'], [1.0, 1.0, 1.0], color='gray')\n\n# Set the title of the plot\nax.set_title('D0')\n\n# Set the x-axis label\nax.set_xlabel('Teams')\n\n# Set the y-axis label\nax.set_ylabel('Points')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.set_title('2020 Q4 EBITDA by Industry')\nax.set_xlabel('Industry')\nax.set_ylabel('EBITDA (in millions)')\nax.set_yticks(np.arange(-10, 10, 0.5))\nax.set_yticklabels(['-10', '-9.5', '-9', '-8.5', '-8', '-7.5', '-7', '-6.5', '-6', '-5.5', '-5', '-4.5', '-4', '-3.5', '-3', '-2.5', '-2', '-1.5', '-1', '0', '0.5', '1', '1.5', '2', '2.5', '3', '3.5', '4', '4.5', '5', '5.5', '6', '6.5', '7', '7.5', '8', '8.5', '9', '9.5', '10'])\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nax.set_xticklabels(['LLVA', 'BakLVA', 'GEMINIProVision', 'GPT4V', 'CODI'])\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='blue')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='red')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='green')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='yellow')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='orange')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='purple')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='pink')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='brown')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='grey')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='cyan')\nax.bar([0, 1, 2, 3, 4], [8.5, 7.2, 6.8, 6.5, 6.2], color='magenta')\nplt.show()\nThe maximum value of the bar chart is 10."}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Create a bar chart with the data provided\nax.bar([1, 3, 5, 9, 12], [0.7, 0.4, 0.2, 0.1, 0.5], color=['purple', 'orange', 'red', 'yellow', 'green'])\n\n# Set the title of the plot\nax.set_title('Perplexity')\n\n# Set the x-axis label\nax.set_xlabel('To layer')\n\n# Set the y-axis label\nax.set_ylabel('Increase in perplexity')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating a list of sales data\nsales_data = [659, 807, 109, 459, 784, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292, 949, 635, 935, 292"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\nax.set_title('Context')\nax.set_xlabel('Option')\nax.set_ylabel('Last')\n\nx = np.arange(31)\ny = np.random.rand(31)\nz = np.random.rand(31)\nw = np.random.rand(31)\nv = np.random.rand(31)\n\nax.plot(x, y, 'ro-')\nax.plot(x, z, 'bs-')\nax.plot(x, w, 'g^-')\nax.plot(x, v, 'm>-')\n\nplt.show()\nfig.savefig('context_option_last.png')"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(96, 720)\n\n# Set the y-axis limits\nax.set_ylim(0.5, 1.0)\n\n# Set the x-axis tick labels\nax.set_xticks([96, 192, 336, 720])\n\n# Set the y-axis tick labels\nax.set_yticks(np.arange(0.5, 1.1, 0.1))\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the title of the plot\nax.set_title('Weather')\n\n# Create a bar chart\nax.bar([96, 192, 336, 720], [0.55, 0.72, 0.60, 0.54], color='red')\nax.bar([96, 192, 336, 720], [0.72, 0.65, 0.44, 0.89], bottom=[0.55, 0.72, 0.60, 0.54], color='orange')\nax.bar([96, 192, 336, 720], [0.60, 0.89, 0.53, 0.09], bottom=[0.72, 0.65, 0.44, 0.89], color='yellow')\n\n# Create a scatter plot\nax.scatter([96, 192, 336, 720], [0.55, 0.72, 0.60, 0.54], color='red', marker='o')\nax.scatter([96, 192, 336, 720], [0.72, 0.65, 0.44, 0.89], color='orange', marker='o')\nax.scatter([96, 192, 336, 720], [0.60, 0.89, 0.53, 0.09], color='yellow', marker='o')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(1, 2, figsize=(20.0, 8.0))\n\n# Data for plotting\nx = np.arange(1, 6)\ny = [15.7, 28.1, 14.5, 28.6, 10.5]\nz = [76.0, 2.1, 0.5, 4.1, 8.1]\na = [50.8, 12.3, 0.9, 6.2, 15.5]\nb = [49.2, 11.2, 0.6, 7.8, 13.9]\nc = [50.3, 12.0, 0.9, 7.0, 16.3]\n\nax[0].bar(x, y, color='blue')\nax[0].bar(x, z, bottom=y, color='red')\nax[0].bar(x, a, bottom=[i+j for i,j in zip(y,z)], color='green')\nax[0].bar(x, b, bottom=[i+j+k for i,j,k in zip(y,z,a)], color='purple')\nax[0].bar(x, c, bottom=[i+j+k+l for i,j,k,l in zip(y,z,a,b)], color='orange')\n\nax[0].set_title('Role voting in the Werewolf game')\nax[0].set_xlabel('Roles')\nax[0].set_ylabel('Percentage of votes')\n\n# Data for plotting\nx = np.arange(1, 6)\ny = [31.5, 4.3, 2.5, 27.1, 17.3]\nz = [35.3, 2.2, 0.8, 32.5, 17.3]\na = [38.6, 2.2, 0.8, 55.3, 31.0]\nb = [44.4, 10.0, 0.0, 22.9, 14.9]\nc = [61.5, 2.0, 0.0, 8.7, 13.0]\n\nax[1].bar(x, y, color='blue')\nax[1].bar(x, z, bottom=y, color='red')\nax[1].bar(x, a, bottom=[i+j for i,j in zip(y,z)], color='green')\nax[1].bar(x, b, bottom=[i+j+k for i,j,k in zip(y,z,a)], color='purple')\nax[1].bar(x, c, bottom=[i+j+k+l for i,j,k,l in zip(y,z,a,b)], color='orange')\n\nax[1].set_title('Final state of roles')\nax[1].set_xlabel('Roles')\nax[1].set_ylabel('Percentage of votes')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a list of question types\nquestion_types = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\n\n# Create a list of response action categories\nresponse_action_categories = ['0', '1', '2', '3', '4', '5']\n\n# Create a list of colors for each question type\ncolors = ['blue', 'green', 'red', 'yellow', 'orange']\n\n# Create a list of values for each question type\nvalues = [169, 115, 219, 67, 177]\n\n# Create a list of labels for each question type\nlabels = ['169', '115', '219', '67', '177']\n\n# Create a list of colors for each response action category\nresponse_colors = ['pink', 'purple', 'brown', 'grey', 'cyan', 'magenta']\n\n# Create a list of values for each response action category\nresponse_values = [547, 439, 585, 557, 554, 554]\n\n# Create a list of labels for each response action category\nresponse_labels = ['547', '439', '585', '557', '554', '554']\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create a bar chart for each question type\nfor i, question_type in enumerate(question_types):\n    ax.bar(response_action_categories, response_values, color=response_colors[i], label=question_type)\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Set the x-axis label\nax.set_xlabel('Response Action Category')\n\n# Set the y-axis label\nax.set_ylabel('Number of Responses')\n\n# Add a legend to the plot\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Original data\noriginal_data = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00]\nlabels = ['angry', 'sad', 'disgust', 'contempt', 'neutral', 'surprise', 'happy']\n\n# Adjusted data\nadjusted_data = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00]\n\nfig, ax = plt.subplots(2, 1, figsize=(10.0, 8.0))\n\nax[0].bar(labels, original_data, color='blue')\nax[0].set_title('Original')\n\nax[1].bar(labels, adjusted_data, color='blue')\nax[1].set_title('Adjusted')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a list of colors\ncolors = ['blue', 'lightblue', 'skyblue']\n\n# Create a list of labels\nlabels = ['Villager', 'Hunter', 'Witch']\n\n# Create a list of sizes\nsizes = [15.7, 28.1, 2.6]\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title of the plot\nax.set_title('Voter Preferences')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Create a bar chart\nax.bar([1, 2, 3], [17, 17, 15], color='blue')\n\n# Set the title of the chart\nax.set_title('GPT')\n\n# Set the x-axis label\nax.set_xlabel('Rank')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Create a list of colors\ncolors = ['gray', 'black', 'white']\n\n# Create a list of values\nvalues = [0.10, 0.08, 0.30, 0.60, 0.00, 0.50, 0.70]\n\n# Create a list of labels\nlabels = ['0.10', '0.08', '0.30', '0.60', '0.00', '0.50', '0.70']\n\n# Create a bar chart\nax.bar(labels, values, color=colors)\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Set the x-axis label\nax.set_xlabel('Values')\n\n# Set the y-axis label\nax.set_ylabel('Colors')\n\nplt.show()\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Create a list of colors\ncolors = ['gray', 'black', 'white']\n\n# Create a list of values\nvalues = [0.12, 0.22, 0.30, 0.44, 0.32, 0.44, 0.10]\n\n# Create a list of labels\nlabels = ['0.12', '0.22', '0.30', '0.44', '0.32', '0.44', '0.10']\n\n# Create a bar chart\nax.bar(labels, values, color=colors)\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Set the x-axis label\nax.set_xlabel('Values')\n\n# Set the y-axis label\nax.set_ylabel('Colors')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Data for plotting\nx = np.arange(1, 26)\ny = [0.8, 2.4, 1.1, 0.6, 0.7, 1.3, 0.1, 2.0, 1.0]\ncolors = ['yellow', 'green', 'yellow', 'green', 'yellow', 'green', 'yellow', 'green', 'yellow']\n\nax.bar(x, y, color=colors)\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Data for plotting\nx = [1, 2, 3, 4, 5, 6]\ny = [5.9, 57.1, 40.2, 20.1, 10.0, 0.0]\n\nax.plot(x, y, marker='o', linestyle='-', color='b')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create a list of colors\ncolors = ['red', 'green', 'blue']\n\n# Create a list of labels\nlabels = ['None', 'Nearest', 'Bilinear', 'Bicubic', 'Spline16']\n\n# Create a list of images\nimages = [np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10)]\n\n# Create a list of markers\nmarkers = ['o', 's', '^', 'D', 'p']\n\n# Create a list of line styles\nlinestyles = ['-', '--', '-.', ':', '-']\n\n# Create a list of marker sizes\nmarkersizes = [5, 7, 9, 11, 13]\n\n# Create a list of line widths\nlinewidths = [1, 2, 3, 4, 5]\n\n# Create a list of hatch patterns\nhatches = ['/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*']\n\n# Create a list of edge colors\nedgecolors = ['black', 'white', 'grey', 'cyan', 'magenta']\n\n# Create a list of face colors\nfacecolors = ['none', 'none', 'none', 'none', 'none']\n\n# Create a list of alpha values\nalphas = [0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create a list of zorder values\nzorders = [1, 2, 3, 4, 5]\n\n# Create a list of clip_on values\nclip_ons = [True, False, True, False, True]\n\n# Create a list of visible values\nvisibles = [True, True, True, True, True]\n\n# Create a list of pickable values\npickables = [True, True, True, True, True]\n\n# Create a list of transform values\ntransforms = [ax.transAxes, ax.transAxes, ax.transAxes, ax.transAxes, ax.transAxes]\n\n# Create a list of path effects\npath_effects = [None, None, None, None, None]\n\n# Create a list of rasterized values\nrasterizeds = [False, False, False, False, False]\n\n# Create a list of antialiased values\nantialiaseds = [True, True, True, True, True]\n\n# Create a list of capstyle values\ncapstyles = ['butt', 'round', 'projecting']\n\n# Create a list of joinstyle values\njoinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of solid_capstyle values\nsolid_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of solid_joinstyle values\nsolid_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash_capstyles = ['butt', 'round', 'projecting']\n\n# Create a list of dash_joinstyle values\ndash_joinstyles = ['miter', 'round', 'bevel']\n\n# Create a list of dash_pattern values\ndash_patterns = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n# Create a list of dash_offset values\ndash_offsets = [0, 1, 2, 3, 4]\n\n# Create a list of dash_capstyle values\ndash"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "import matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add nodes and edges to the graph\nG.add_node(1)\nG.add_node(2)\nG.add_node(3)\nG.add_node(4)\nG.add_node(5)\nG.add_node(6)\nG.add_node(7)\nG.add_node(8)\nG.add_node(9)\nG.add_node(10)\n\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(2, 4)\nG.add_edge(2, 5)\nG.add_edge(3, 6)\nG.add_edge(3, 7)\nG.add_edge(4, 8)\nG.add_edge(4, 9)\nG.add_edge(5, 10)\nG.add_edge(6, 10)\nG.add_edge(7, 10)\nG.add_edge(8, 10)\nG.add_edge(9, 10)\nG.add_edge(10, 10)\n\n# Draw the graph\npos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color='lightblue', node_size=500)\nnx.draw_networkx_edges(G, pos, width=2)\nnx.draw_networkx_labels(G, pos, font_size=10, font_family='sans-serif')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.arange(1, 5)\ny = [1.5, 2.8, 1.0, 0.7, 0.9, 1.2, 0.3, 1.9, 0.6, 1.3, 0.8, 1.8, 3.1, 4.8, 5.9]\n\n# Create a bar chart\nax.bar(x, y, color='orange')\n\n# Set the title and labels\nax.set_title('Sales of vendors (in tons/year)')\nax.set_xlabel('Vendor')\nax.set_ylabel('Sales')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data\ndegree = ['Low', 'Medium', 'High']\nacceptance = [17, 28, 36, 23, 17, 79, 53, 34, 35, 0, 0, 4, 5, 38, 0, 0, 42, 55]\n\n# Create a bar chart\nplt.bar(degree, acceptance, color=['blue', 'green', 'red'])\n\n# Set the title and labels\nplt.title('Degree of acceptance of a product')\nplt.xlabel('Degree')\nplt.ylabel('Acceptance')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar(['a', 'm', 'd', 'p', 'q'], [0.95, 0.85, 0.75, 0.65, 0.55], color='blue')\n\n# Set the title of the plot\nax.set_title('Bottle Neck Distance')\n\n# Set the x-axis label\nax.set_xlabel('Networks')\n\n# Set the y-axis label\nax.set_ylabel('Bottle Neck Distance')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('ROC\\'s AUC')\nax.set_xlabel('Timeshift')\nax.set_ylabel('AUC')\n\n# Create a grid of points\nx = np.linspace(0, 12, 13)\ny = np.linspace(0, 12, 13)\n\n# Create a meshgrid\nX, Y = np.meshgrid(x, y)\n\n# Create a color map\ncmap = plt.cm.Reds\n\n# Create a contour plot\ncontour = ax.contourf(X, Y, X + Y, cmap=cmap)\n\n# Add a color bar\nfig.colorbar(contour)\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.set_title('C Subject')\nax.set_xlabel('Count')\nax.set_ylabel('Value')\n\nx = np.arange(29)\ny = np.random.rand(29)\nax.plot(x, y, 'g-')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [0, 1, 2, 3]\ny = [44, 42, 40, 38]\n\nplt.figure(figsize=(12.0, 6.0))\nplt.bar(x, y, color='yellow')\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\nx = np.array([750, 764, 782, 843, 925, 942, 951, 975, 982, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260, 1270, 1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370, 1380, 1390, 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480, 1490, 1500, 1510, 1520, 1530, 1540, 1550, 1560, 1570, 1580, 1590, 1600])\ny = np.array([876, 136, 435, 534, 322, 375, 35, 742, 782, 795, 800, 805, 810, 815, 820, 825, 830, 835, 840, 845, 850, 855, 860, 865, 870, 875, 880, 885, 890, 895, 900, 905, 910, 915, 920, 925, 930, 935, 940, 945, 950, 955, 960, 965, 970, 975, 980, 985, 990, 995, 1000, 1005, 1010, 1015, 1020, 1025, 1030, 1035, 1040, 1045, 1050, 1055, 1060, 1065, 1070, 1075, 1080, 1085, 1090, 1095, 1100, 1105, 1110, 1115, 1120, 1125, 1130, 1135, 1140, 1145, 1150, 1155, 1160, 1165, 1170, 1175, 1180, 1185, 1190, 1195, 1200, 1205, 1210, 1215, 1220, 1225, 1230, 1235, 1240, 1245, 1250, 1255, 1260, 1265, 1270, 1275, 1280, 1285, 1290, 1295, 1300, 1305, 1310, 1315, 1320, 1325, 1330, 1335, 1340, 1345, 1350, 1355, 1360, 1365, 1370, 1375, 1380, 1385, 1390, 1395, 1400, 1405, 1410, 1415, 1420, 1425, 1430, 1435, 1440, 1445, 1450, 1455, 1460, 1465, 1470, 1475, 1480, 1485, 1490, 1495, 1500, 1505, 1510, 1515, 1520, 1525, 1530, 1535, 1540, 1545, 1550, 1555, 1560, 1565, 1570, 1575, 1580, 1585, 1590, 1595, 1600])\n\nax.plot(x, y, 'ro-')\nplt.show()"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a list of correlation coefficients\ncorrelation_coefficients = [1.00, 0.90, 0.89, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0."}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for each company\nx = np.array([0.19, 0.19, 0.16, 0.3, 0.3, 0.24, 0.24, 0.39, 0.5, 0.34, 0.2, 0.6, 0.5, 0.39, 0.5, 0.34, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 15)\n\n# Set the x-axis tick labels\nax.set_xticks(np.arange(0, 16, 1))\n\n# Set the y-axis tick labels\nax.set_yticks(np.arange(0, 16, 1))\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Years')\n\n# Set the title of the plot\nax.set_title('Player Career Progression')\n\n# Set the color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(7.5, 14, 'No / The', fontsize=12, ha='center', va='center')\nax.text(7.5, 13, 'athlete', fontsize=12, ha='center', va='center')\nax.text(7.5, 12, 'that', fontsize=12, ha='center', va='center')\nax.text(7.5, 11, 'loved', fontsize=12, ha='center', va='center')\nax.text(7.5, 10, 'the', fontsize=12, ha='center', va='center')\nax.text(7.5, 9, 'has', fontsize=12, ha='center', va='center')\nax.text(7.5, 8, 'landed', fontsize=12, ha='center', va='center')\n\nplt.show()"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data for the plot\nx = np.arange(10)\ny = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Test Winning Distance')\n\n# Set the x-axis label\nax.set_xlabel('Number of Players')\n\n# Set the y-axis label\nax.set_ylabel('Test Winning Distance')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random data for the histogram\nnp.random.seed(42)\ndata_inter = np.random.normal(loc=0.5, scale=0.2, size=1000)\ndata_intra = np.random.normal(loc=0.7, scale=0.1, size=1000)\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\naxs[0].hist(data_inter, bins=20, color='blue', alpha=0.5, label='Inter Class')\naxs[0].hist(data_intra, bins=20, color='green', alpha=0.5, label='Intra Class')\naxs[0].set_xlabel('Cosine Similarity')\naxs[0].set_ylabel('Frequency')\naxs[0].legend()\n\naxs[1].hist(data_inter, bins=20, color='blue', alpha=0.5, label='Inter Class')\naxs[1].hist(data_intra, bins=20, color='green', alpha=0.5, label='Intra Class')\naxs[1].set_xlabel('Cosine Similarity')\naxs[1].set_ylabel('Frequency')\naxs[1].legend()\n\nplt.show()\nThe generated code will produce a plot with two subplots. The first subplot displays the distribution of cosine similarity values for the inter class and intra class. The second subplot also displays the distribution of cosine similarity values for the inter class and intra class. The first subplot has a blue color for the inter class and green color for the intra class. The second subplot has a blue color for the inter class and green color for the intra class. The first subplot has a legend that labels the inter class as 'Inter Class' and the intra class as 'Intra Class'. The second subplot has a legend that labels the inter class as 'Inter Class' and the intra class as 'Intra Class'. The first subplot has a title that reads 'Cosine Similarity'. The second subplot has a title that reads 'Cosine Similarity'. The first subplot has a y-axis label that reads 'Frequency'. The second subplot has a y-axis label that reads 'Frequency'. The first subplot has a x-axis label that reads 'Cosine Similarity'. The second subplot has a x-axis label that reads 'Cosine Similarity'. The first subplot has a grid that is turned off. The second subplot has a grid that is turned off. The first subplot has a tick label size of 8. The second subplot has a tick label size of 8. The first subplot has a tick label rotation of 0. The second subplot has a tick label rotation of 0. The first subplot has a tick label color of black. The second subplot has a tick label color of black. The first subplot has a tick label font size of 8. The second subplot has a tick label font size of 8. The first subplot has a tick label font weight of normal. The second subplot has a tick label font weight of normal. The first subplot has a tick label font style of normal. The second subplot has a tick label font style of normal. The first subplot has a tick label horizontal alignment of center. The second subplot has a tick label horizontal alignment of center. The first subplot has a tick label vertical alignment of center. The second subplot has a tick label vertical alignment of center. The first subplot has a tick label background color of none. The second subplot has a tick label background color of none. The first subplot has a tick label border color of none. The second subplot has a tick label border color of none. The first subplot has a tick label border width of 0. The second subplot has a tick label border width of 0. The first subplot has a tick label clip box of none. The second subplot has a tick label clip box of none. The first subplot has a tick label clip on of False. The second subplot has a tick label clip on of False. The first subplot has a tick label clip path of none. The second subplot has a tick label clip path of none. The first subplot has a tick label clip path transform of none. The second subplot has a tick label clip path transform of none. The first subplot has a tick label clip path units of None. The second subplot has a tick label clip path units of None. The first subplot has a tick label clip path visible of True. The second subplot has a tick label clip path visible of True. The first subplot has a tick label clip path zorder of 0. The second subplot has a tick label clip path zorder of 0. The first subplot has a tick label clip path hatch of none. The second subplot has a tick label clip path hatch of none. The first subplot has a tick label clip path edgecolor of none. The second subplot has a tick label clip path edgecolor of none. The first subplot has a tick label clip path facecolor of none. The second subplot has a tick label clip path facecolor of none. The first subplot has a tick label clip path linewidth of 0. The second subplot has a tick label clip path linewidth of 0. The first subplot has a tick label clip path linestyle of solid. The second subplot has a tick label clip path linestyle of solid. The first subplot has a tick label clip path marker of none. The second subplot has a tick label clip path marker of none. The first subplot has a tick label clip path markersize of 0. The second subplot has a tick label clip path markersize of 0. The first subplot has a tick label clip path markeredgecolor of none. The second subplot has a tick label clip path markeredgecolor of none. The first subplot has a tick label clip path markerfacecolor of none. The second subplot has a tick label clip path markerfacecolor of none. The first subplot has a tick label clip path markeredgewidth of 0. The second subplot has a tick label clip path markeredgewidth of 0. The first subplot has a tick label clip path markerlinecap of butt. The second subplot has a tick label clip path markerlinecap of butt. The first subplot has a tick label clip path markerlinejoin of miter. The second subplot has a tick label clip path markerlinejoin of miter. The first subplot has a tick label clip path markeroverhang of 0. The second subplot has a tick label clip path markeroverhang of 0. The first subplot has a tick label clip path markerorientation of horizontal. The second subplot has a tick label clip path markerorientation of horizontal. The first subplot has a tick label clip path markerposition of none. The second subplot has a tick label clip path markerposition of none. The first subplot has a tick label clip path markerrotation of 0. The second subplot has a tick label clip path markerrotation of 0. The first subplot has a tick label clip path markertransform of none. The second subplot has a tick label clip path markertransform of none. The first subplot has a tick label clip path markerunits of None. The second subplot has a tick label clip path markerunits of None. The first subplot has a tick label clip path markervisible of True. The second subplot has a tick label clip path markervisible of True. The first subplot has a tick label clip path markerzorder of 0. The second subplot has a tick label clip path markerzorder of 0. The first subplot has a tick label clip path hatch of none. The second subplot has a tick label clip path hatch of none. The first subplot has a tick label clip path edgecolor of none. The second subplot has a tick label clip path edgecolor of none. The first subplot has a tick label clip path facecolor of none. The second subplot has a tick label clip path facecolor of none. The first subplot has a tick label clip path linewidth of 0. The second subplot has a tick label clip path linewidth of 0. The first subplot has a tick label clip path linestyle of solid. The second subplot has a tick label clip path linestyle of solid. The first subplot has a tick label clip path marker of none. The second subplot has a tick label clip path marker of none. The first subplot has a tick label clip path markersize of 0. The second subplot has a tick label clip path markersize of 0. The first subplot has a tick label clip path markeredgecolor of none. The second subplot has a tick label clip path markeredgecolor of none. The first subplot has a tick label clip path markerfacecolor of none. The second subplot has a tick label clip path markerfacecolor of none. The first subplot has a tick label clip path markeredgewidth of 0. The second subplot has a tick label clip path markeredgewidth of 0. The first subplot has a tick label clip path markerlinecap of butt. The second subplot has a tick label clip path markerlinecap of butt. The first subplot has a tick label clip path markerlinejoin of miter. The second subplot has a tick label clip path markerlinejoin of miter. The first subplot has a tick label clip path markeroverhang of 0. The second subplot has a tick label clip path markeroverhang of 0. The first subplot has a tick label clip path markerorientation of horizontal. The second subplot has a tick label clip path markerorientation of horizontal. The first subplot has a tick label clip path markerposition of none. The second subplot has a tick label clip path markerposition of none. The first subplot has a tick label clip path markerrotation of 0. The second subplot has a tick label clip path markerrotation of 0. The first subplot has a tick label clip path markertransform of none. The second subplot has a tick label clip path markertransform of none. The first subplot has a tick label clip path markerunits of None. The second subplot has a tick label clip path markerunits of None. The first subplot has a tick label clip path markervisible of True. The second subplot has a tick label clip path markervisible of True. The first subplot has a tick label clip path markerzorder of 0. The second subplot has a tick label clip path markerzorder of 0. The first subplot has a tick label clip path hatch of none. The second subplot has a tick label clip path hatch of none. The first subplot has a tick label clip path edgecolor of none. The second subplot has a tick label clip path edgecolor of none. The first subplot has a tick label clip path facecolor of none. The second subplot has a tick label clip path facecolor of none. The first subplot has a tick label clip path linewidth of 0. The second subplot has a tick label clip path linewidth of 0. The first subplot has a tick label clip path linestyle of solid. The second subplot has a tick label clip path linestyle of solid. The first subplot has a tick label clip path marker of none. The second subplot has a tick label clip path marker of none. The first subplot has a tick label clip path markersize of 0. The second subplot has a tick label clip path markersize of 0. The first subplot has a tick label clip path markeredgecolor of none. The second subplot has a tick label clip path markeredgecolor of none. The first subplot has a tick label clip path markerfacecolor of none. The second subplot has a tick label clip path markerfacecolor of none. The first subplot has a tick label clip path markeredgewidth of 0. The second subplot has a tick label clip path markeredgewidth of 0. The first subplot has a tick label clip path markerlinecap of butt. The second subplot has a tick label clip path markerlinecap of butt. The first subplot has a tick label clip path markerlinejoin of miter. The second subplot has a tick label clip path markerlinejoin of miter. The first subplot has a tick label clip path markeroverhang of 0. The second subplot has a tick label clip path markeroverhang of 0. The first subplot has a tick label clip path markerorientation of horizontal. The second subplot has a tick label clip path markerorientation of horizontal. The first subplot has a tick label clip path markerposition of none. The second subplot has a tick label clip path markerposition of none. The first subplot has a tick label clip path markerrotation of 0. The second subplot has a tick label clip path markerrotation of 0. The first subplot has a tick label clip path markertransform of none. The second subplot has a tick label clip path markertransform of none. The first subplot has a tick label clip path markerunits of None. The second subplot has a tick label clip path markerunits of None. The first subplot has a tick label clip path markervisible of True. The second subplot has a tick label clip path markervisible of True. The first subplot has a tick label clip path markerzorder of 0. The second subplot has a tick label clip path markerzorder of 0. The first subplot has a tick label clip path hatch of none. The second subplot has a tick label clip path hatch of none. The first subplot has a tick label clip path edgecolor of none. The second subplot has a tick label clip path edgecolor of none. The first subplot has a tick label clip path facecolor of none. The second subplot has a tick label clip path facecolor of none. The first subplot has a tick label clip path linewidth of 0. The second subplot has a tick label clip path linewidth of 0. The first subplot has a tick label clip path linestyle of solid. The second subplot has a tick label clip path linestyle of solid. The first subplot has a tick label clip path marker of none. The second subplot has a tick label clip path marker of none. The first subplot has a tick label clip path markersize of 0. The second subplot has a tick label clip path markersize of 0. The first subplot has a tick label clip path markeredgecolor of none. The second subplot has a tick label clip path markeredgecolor of none. The first subplot has a tick label clip path markerfacecolor of none. The second subplot has a tick label clip path markerfacecolor of none. The first subplot has a tick label clip path markeredgewidth of 0. The second subplot has a tick label clip path markeredgewidth of 0. The first subplot has a tick label clip path markerlinecap of butt. The second subplot has a tick label clip path markerlinecap of butt. The first subplot has a tick label clip path markerlinejoin of miter. The second subplot has a tick label clip path markerlinejoin of miter. The first subplot has a tick label clip path markeroverhang of 0. The second subplot has a tick label clip path markeroverhang of 0. The first subplot has a tick label clip path markerorientation of horizontal. The second subplot has a tick label clip path markerorientation of horizontal. The first subplot has a tick label clip path markerposition of none. The second subplot has a tick label clip path markerposition of none. The first subplot has a tick label clip path markerrotation of 0. The second subplot has a tick label clip path markerrotation of 0. The first subplot has a tick label clip path markertransform of none. The second subplot has a tick label clip path markertransform of none. The first subplot has a tick label clip path markerunits of None. The second subplot has a tick label clip path markerunits of None. The first subplot has a tick label clip path markervisible of True. The second subplot has a tick label clip path markervisible of True. The first subplot has a tick label clip path markerzorder of 0. The second subplot has a tick label clip path markerzorder of 0. The first subplot has a tick label clip path hatch of none. The second subplot has a tick label clip path hatch of none. The first subplot has a tick label clip path edgecolor of none. The second subplot has a tick label clip path edgecolor of none. The first subplot has a tick label clip path facecolor of none. The second subplot has a tick label clip path facecolor of none. The first subplot has a tick label clip path linewidth of 0. The second subplot has a tick label clip path linewidth of 0. The first subplot has a tick label clip path linestyle of solid. The second subplot has a tick label clip path linestyle of solid. The first subplot has a tick label clip path marker of none. The second subplot has a tick label clip path marker of none. The first subplot has a tick label clip path markersize of 0. The second subplot has a tick label clip path markersize of 0. The first subplot has a tick label clip path markeredgecolor of none. The second subplot has a tick label clip path markeredgecolor of none. The first subplot has a tick label clip path markerfacecolor of none. The second subplot has a tick label clip path markerfacecolor of none. The first subplot has a tick label clip path markeredgewidth of 0. The second subplot has a tick label clip path markeredgewidth of 0. The first subplot has a tick label clip path markerlinecap of butt. The second subplot has a tick label clip path markerlinecap of butt. The first subplot has a tick label clip path markerlinejoin of miter. The second subplot has a tick label clip path markerlinejoin of miter. The first subplot has a tick label clip path markeroverhang of 0. The second subplot has a tick label clip path markeroverhang of 0. The first subplot has a tick label clip path markerorientation of horizontal. The second subplot has a tick label clip path markerorientation of horizontal. The first subplot has a tick label clip path markerposition of none. The second subplot has a tick label clip path markerposition of none. The first subplot has a tick label clip path markerrotation of 0. The second subplot has a tick label clip path markerrotation of 0. The first subplot has a tick label clip path markertransform of none. The second subplot has a tick label clip path markertransform of none. The first subplot has a tick label clip path markerunits of None. The second subplot has a tick label clip path markerunits of None. The first subplot has a tick label clip path markervisible of True. The second subplot has a tick label clip path markervisible of True. The first subplot has a tick label clip path markerzorder of 0. The second subplot has a tick label clip path markerzorder of 0. The first subplot has a tick label clip path hatch of none. The second subplot has a tick label clip path hatch of none. The first subplot has a tick label clip path edgecolor of none. The second subplot has a tick label clip path edgecolor of none. The first subplot has a tick label clip path facecolor of none. The second subplot has a tick label clip path facecolor of none. The first subplot has a tick label clip path linewidth of 0. The second subplot has a tick label clip path linewidth of 0. The first subplot has a tick label clip path linestyle of solid. The second subplot has a tick label clip path linestyle of solid. The first subplot has a tick label clip path marker of none. The second subplot has a tick label clip path marker of none. The first subplot has a tick label clip path markersize of 0. The second subplot has a tick label clip path markersize of 0. The first subplot has a tick label clip path markeredgecolor of none. The second"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure with a specified size of 10x8 inches.\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Create a subplot with 2 rows and 2 columns, and assign it to ax1.\nax1 = fig.add_subplot(2, 2, 1)\n\n# Create a bar chart with the data provided in the question.\nax1.bar([0.5, 1.0, 1.5, 2.0], [1.3, 1.1, 1.4, 1.2], color=['orange', 'blue'])\n\n# Set the title of the first subplot to \"V-I positive\".\nax1.set_title('V-I positive')\n\n# Create a second subplot with 2 rows and 2 columns, and assign it to ax2.\nax2 = fig.add_subplot(2, 2, 2)\n\n# Create a bar chart with the data provided in the question.\nax2.bar([0.5, 1.0, 1.5, 2.0], [1.2, 1.1, 1.3, 1.4], color=['orange', 'blue'])\n\n# Set the title of the second subplot to \"V-I negative\".\nax2.set_title('V-I negative')\n\n# Create a third subplot with 2 rows and 2 columns, and assign it to ax3.\nax3 = fig.add_subplot(2, 2, 3)\n\n# Create a bar chart with the data provided in the question.\nax3.bar([0.5, 1.0, 1.5, 2.0], [1.3, 1.1, 1.4, 1.2], color=['orange', 'blue'])\n\n# Set the title of the third subplot to \"MIRL + OCLR w/ MUL\".\nax3.set_title('MIRL + OCLR w/ MUL')\n\n# Create a fourth subplot with 2 rows and 2 columns, and assign it to ax4.\nax4 = fig.add_subplot(2, 2, 4)\n\n# Create a bar chart with the data provided in the question.\nax4.bar([0.5, 1.0, 1.5, 2.0], [1.2, 1.1, 1.3, 1.4], color=['orange', 'blue'])\n\n# Set the title of the fourth subplot to \"MIRL + OCLR w/ DOTLA\".\nax4.set_title('MIRL + OCLR w/ DOTLA')\n\n# Display the plot.\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 8.0))\n\n# Create a bar chart\nax.bar([1, 2, 3], [0.1, 0.2, 0.3], color='blue')\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\nax.bar([0.02, 0.04, 0.06], [1000, 1000, 1000], color='blue')\nax.bar([0.02, 0.04, 0.06], [900, 800, 700], color='orange')\n\nplt.show()"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Data for plotting\nx = [0, 2, 4, 6, 8]\ny1 = [75, 73, 70, 68, 65]\ny2 = [78, 76, 74, 72, 70]\n\n# Plotting the data\nax.plot(x, y1, 'r-', label='Uniform data')\nax.plot(x, y2, 'b-', label='Normal data')\n\n# Adding labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Frequency')\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Adding legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.hist([2, 3, 4], bins=[-2, -1, 0, 1, 2, 3, 4, 5, 6], color='blue')\nax.set_title('Histogram of Wind Speed Measurements')\nax.set_xlabel('Wind Speed (km/h)')\nax.set_ylabel('Number of Measurements')\nplt.show()"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Define the data\nx = np.arange(0.0, 3.0, 0.1)\ny1 = np.exp(-x)\ny2 = np.sin(2 * np.pi * x)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Baguette')\nax.plot(x, y2, 'r-', label='Youtiao')\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [0.0, 0.2, 0.4, 0.8]\ny = [135.9, 129.4, 119.2, 109.1]\n\nplt.figure(figsize=(16.0, 7.0))\nplt.plot(x, y, 'ro-')\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nnominations = [50, 100, 150, 200, 250]\nrecord_of_the_year = [19.4, 17.3, 16.2, 15.1, 14.0]\nalbum_of_the_year = [18.3, 16.2, 15.1, 14.0, 12.9]\nsong_of_the_year = [17.2, 15.1, 14.0, 12.9, 11.8]\nbest_new_artist = [16.1, 14.0, 12.9, 11.8, 10.7]\nbest_pop_song_performance = [15.0, 13.9, 12.8, 11.7, 10.6]\n\n# Create a bar chart with the specified data and labels\nplt.bar(nominations, record_of_the_year, color='red', label='Record of the Year')\nplt.bar(nominations, album_of_the_year, bottom=record_of_the_year, color='orange', label='Album of the Year')\nplt.bar(nominations, song_of_the_year, bottom=[i+j for i,j in zip(record_of_the_year, album_of_the_year)], color='yellow', label='Song of the Year')\nplt.bar(nominations, best_new_artist, bottom=[i+j+k for i,j,k in zip(record_of_the_year, album_of_the_year, song_of_the_year)], color='pink', label='Best New Artist')\nplt.bar(nominations, best_pop_song_performance, bottom=[i+j+k+l for i,j,k,l in zip(record_of_the_year, album_of_the_year, song_of_the_year, best_new_artist)], color='yellow', label='Best Pop Song Performance')\n\n# Set the title of the plot\nplt.title('Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Set the x-axis label\nplt.xlabel('Number of Nominations')\n\n# Set the y-axis label\nplt.ylabel('Number of Nominations')\n\n# Add a legend to the plot\nplt.legend()\n\n# Set the figure size\nplt.figure(figsize=(12.0, 8.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Generate random data for the non-defective and defective groups\nx = np.random.normal(0.15, 0.05, 1000)\ny = np.random.normal(0.12, 0.03, 1000)\n\n# Plot the data\nax.hist(x, bins=20, color='green', alpha=0.5, label='Non-defective')\nax.hist(y, bins=20, color='red', alpha=0.5, label='Defective')\n\n# Set the title and labels\nax.set_title('FashionMNIST - Defect Detection')\nax.set_xlabel('Defect Probability')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\nax.bar([0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [12.3, 14.5, 16.7, 18.9, 21.1, 23.3], color='blue')\nax.bar([0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [24.5, 26.7, 28.9, 31.1, 33.3, 35.5], bottom=[12.3, 14.5, 16.7, 18.9, 21.1, 23.3], color='green')\nax.bar([0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [36.7, 38.9, 41.1, 43.3, 45.5, 47.7], bottom=[36.7, 38.9, 41.1, 43.3, 45.5, 47.7], color='red')\n\nplt.show()"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure with a specified size of 10x8 inches.\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Create a subplot with 2 rows and 2 columns, and select the first subplot.\nax1 = fig.add_subplot(2, 2, 1)\n\n# Create a bar chart with the data provided for the first subplot.\nax1.bar([1, 2, 3, 4], [0.95, 0.76, 0.65, 0.54], color='blue')\n\n# Set the title of the first subplot to 'Swiss'.\nax1.set_title('Swiss')\n\n# Create a subplot with 2 rows and 2 columns, and select the second subplot.\nax2 = fig.add_subplot(2, 2, 2)\n\n# Create a bar chart with the data provided for the second subplot.\nax2.bar([1, 2, 3, 4], [0.95, 0.76, 0.65, 0.54], color='red')\n\n# Set the title of the second subplot to 'New Zealand'.\nax2.set_title('New Zealand')\n\n# Create a subplot with 2 rows and 2 columns, and select the third subplot.\nax3 = fig.add_subplot(2, 2, 3)\n\n# Create a bar chart with the data provided for the third subplot.\nax3.bar([1, 2, 3, 4], [0.95, 0.76, 0.65, 0.54], color='blue')\n\n# Set the title of the third subplot to 'Swiss'.\nax3.set_title('Swiss')\n\n# Create a subplot with 2 rows and 2 columns, and select the fourth subplot.\nax4 = fig.add_subplot(2, 2, 4)\n\n# Create a bar chart with the data provided for the fourth subplot.\nax4.bar([1, 2, 3, 4], [0.95, 0.76, 0.65, 0.54], color='red')\n\n# Set the title of the fourth subplot to 'New Zealand'.\nax4.set_title('New Zealand')\n\n# Display the plot.\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\nax.bar([0.0, 0.05, 0.1], [1000, 1000, 1000], color='red')\nax.bar([0.0, 0.05, 0.1], [900, 800, 700], color='green')\nax.bar([0.0, 0.05, 0.1], [800, 700, 600], color='blue')\nax.set_xlabel('Concept Weight')\nax.set_ylabel('Count')\nax.set_title('CIFAR100 \\'Desert\\' Concept')\nplt.show()"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\nax.bar(np.arange(10), [87, 92, 94, 96, 97, 98, 99, 100, 101, 102], color='orange')\nax.bar(np.arange(10), [85, 88, 90, 92, 93, 94, 95, 96, 97, 98], color='blue')\nplt.show()"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\nax.bar([0.0, 2.5, 5.0, 7.5, 10.0, 12.5], [1000, 900, 800, 700, 600, 500], color='orange')\nplt.show()"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\nax.bar([0,1,2,3,4], [187, 169, 130, 110, 100], color='blue')\nax.bar([0,1,2,3,4], [11, 21, 30, 40, 50], bottom=[187, 169, 130, 110, 100], color='orange')\nplt.show()"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a bar chart with the data provided\nax.bar([0.0, 0.2, 0.4, 0.6, 0.8], [0.95, 0.75, 0.55, 0.35, 0.15], color='brown')\n\n# Set the title of the plot\nax.set_title('Calibration Error: 0.31')\n\n# Set the x-axis label\nax.set_xlabel('Confidence')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy in bin')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0.0, 0.2, 0.4, 0.6, 0.8])\ny = np.array([1973.0, 2000.0, 2000.0, 2000.0, 2000.0])\n\nplt.bar(x, y, color='blue')\nplt.title('Number of Queries Overlap')\nplt.xlabel('Overlap')\nplt.ylabel('Number of Queries')\nplt.show()"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(42)\nx = np.random.normal(0.1, 0.05, 1000)\ny = np.random.normal(0.1, 0.05, 1000)\n\nplt.figure(figsize=(10.0, 7.0))\nplt.hist(x, bins=30, color='blue', alpha=0.7)\nplt.title('MNIST')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.show()\n\nplt.figure(figsize=(10.0, 7.0))\nplt.hist(y, bins=30, color='blue', alpha=0.7)\nplt.title('FashionMNIST')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.show()"}
{"file": "dataset/ori_500/line_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([5,10,15,20])\ny1 = np.array([97.4,97.3,97.2,97.1])\ny2 = np.array([96.8,96.7,96.6,96.5])\ny3 = np.array([96.3,96.2,96.1,96.0])\ny4 = np.array([95.8,95.7,95.6,95.5])\n\nplt.plot(x, y1, 'b', label='JPEG+LDPC')\nplt.plot(x, y2, 'r', label='DEEPJSCC w/o ofdm')\nplt.plot(x, y3, 'g', label='DEEPJSCC w/ ofdm')\nplt.plot(x, y4, 'y', label='OURS')\n\nplt.xlabel('SNR')\nplt.ylabel('Classification Accuracy (%)')\nplt.title('Comparison of Different Methods')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.0, 1.0, 0.05)\ny1 = np.exp(-x**2)\ny2 = np.cos(2*np.pi*x)\ny3 = np.log(x)\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y1, 'b-', label='Content')\nax.plot(x, y2, 'o-', label='Organization')\nax.plot(x, y3, 'g-', label='Language')\n\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data points\nx = np.array([0, 20, 40, 60, 80])\ny1 = np.array([0.55, 0.65, 0.72, 0.73, 0.74])\ny2 = np.array([0.56, 0.66, 0.73, 0.74, 0.75])\ny3 = np.array([0.57, 0.67, 0.74, 0.75, 0.76])\ny4 = np.array([0.58, 0.68, 0.75, 0.76, 0.77])\n\n# Plot the data points\nax.plot(x, y1, 'ro-', label='coco (10k)')\nax.plot(x, y2, 'go-', label='laion (10k)')\nax.plot(x, y3, 'bo-', label='coco (5k)')\nax.plot(x, y4, 'yo-', label='laion (5k)')\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0.25, 1.0, 100)\ny1 = 0.07\ny2 = 0.06\ny3 = 0.05\ny4 = 0.04\ny5 = 0.03\ny6 = 0.02\ny7 = 0.01\n\nplt.plot(x, y1, 'g', label='MAXN=512')\nplt.plot(x, y2, 'r', label='MAXN=1024')\nplt.plot(x, y3, 'b', label='MAXN=2048')\n\nplt.xlabel('Sample Ratio')\nplt.ylabel('Std of ACC')\nplt.title('Standard Deviation of ACC')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 200, 1)\ny1 = np.random.rand(200)\ny2 = np.random.rand(200)\ny3 = np.random.rand(200)\ny4 = np.random.rand(200)\ny5 = np.random.rand(200)\ny6 = np.random.rand(200)\ny7 = np.random.rand(200)\ny8 = np.random.rand(200)\ny9 = np.random.rand(200)\ny10 = np.random.rand(200)\n\nfig, axs = plt.subplots(4, 2, figsize=(8.0, 10.0))\naxs[0, 0].plot(x, y1, 'b', x, y2, 'r')\naxs[0, 0].set_title('FID (base, ours)')\naxs[0, 1].plot(x, y3, 'b', x, y4, 'r')\naxs[0, 1].set_title('IS (base, ours)')\naxs[1, 0].plot(x, y5, 'b', x, y6, 'r')\naxs[1, 0].set_title('FID (base, ours)')\naxs[1, 1].plot(x, y7, 'b', x, y8, 'r')\naxs[1, 1].set_title('IS (base, ours)')\naxs[2, 0].plot(x, y9, 'b', x, y10, 'r')\naxs[2, 0].set_title('FID (base, ours)')\naxs[2, 1].plot(x, y9, 'b', x, y10, 'r')\naxs[2, 1].set_title('IS (base, ours)')\nplt.show()"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\ny1 = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\ny2 = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\ny3 = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\n\nplt.plot(x, y1, 'r-')\nplt.plot(x, y2, 'b-')\nplt.plot(x, y3, 'b-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3]\ny2 = [87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3]\ny3 = [87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3]\ny4 = [87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3, 87.3]\n\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y1, 'b-')\nplt.plot(x, y2, 'r-')\nplt.plot(x, y3, 'm-')\nplt.plot(x, y4, 'p-')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.0, 1.0, 0.2)\ny1 = [0.99, 0.96, 0.93, 0.92, 0.91]\ny2 = [0.98, 0.97, 0.96, 0.95, 0.94]\ny3 = [0.87, 0.86, 0.85, 0.84, 0.83]\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y1, 'b-', label='Oesense')\nax.plot(x, y2, 'r-', label='KWS')\nax.plot(x, y3, 'g-', label='ECG5000')\n\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([20, 40, 60, 80, 100, 120])\ny = np.array([9.5, 9.3, 9.1, 8.9, 8.7, 8.5])\n\nplt.plot(x, y, 'bo')\nplt.xlabel('Number of Parameters')\nplt.ylabel('Log KL Divergence')\nplt.title('Log KL Divergence vs Number of Parameters')\nplt.show()"}
{"file": "dataset/ori_500/line_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 2001, 500)\ny1 = [0.7, 0.6, 0.5, 0.4]\ny2 = [0.8, 0.7, 0.6, 0.5]\ny3 = [0.9, 0.8, 0.7, 0.6]\n\nfig, axs = plt.subplots(2, 1, figsize=(9.0, 4.0))\naxs[0].plot(x, y1, 'b', label='7B')\naxs[0].plot(x, y2, 'r', label='7B (Fine-tuned)')\naxs[0].set_title('GPT-4 Evaluation')\naxs[0].set_xlabel('Iterations')\naxs[0].set_ylabel('Attack Success Rate')\naxs[0].legend()\n\naxs[1].plot(x, y3, 'b', label='7B')\naxs[1].plot(x, y2, 'r', label='7B (Fine-tuned)')\naxs[1].set_title('Llama Guard Evaluation')\naxs[1].set_xlabel('Iterations')\naxs[1].set_ylabel('Attack Success Rate')\naxs[1].legend()\n\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/line_19.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(10**-2, 10**0, 100)\ny1 = 75 + 2.5 * x\ny2 = 70 + 3 * x\ny3 = 65 + 3.5 * x\n\nplt.plot(x, y1, 'r', label='Full')\nplt.plot(x, y2, 'b', label='SPT')\nplt.plot(x, y3, 'g', label='VPT')\n\nplt.xlabel('Fraction of training data (log scale)')\nplt.ylabel('Test accuracy (%)')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 50, 100, 150, 200])\ny1 = np.array([1.8, 1.6, 1.4, 1.2, 1.0])\ny2 = np.array([1.7, 1.5, 1.3, 1.1, 0.9])\ny3 = np.array([1.6, 1.4, 1.2, 1.0, 0.8])\n\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\nax.plot(x, y1, 'b', label='Group A')\nax.plot(x, y2, 'r', label='Group B')\nax.plot(x, y3, 'g', label='Group C')\n\nax.set_xlabel('Gradient Steps (x62.5K)')\nax.set_ylabel('Value')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.75, 0.85)\n\n# Set the x-axis tick labels\nax.set_xticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-axis tick labels\nax.set_yticks(np.arange(0.75, 0.86, 0.01))\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the title of the plot\nax.set_title('MNIST-7SP')\n\n# Create a bar chart\nax.bar([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='orange')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([120, 90, 30, 1, 60, 90, 120])\ny1 = np.array([87.5, 82.5, 85.0, 84.0, 80.0, 80.0, 80.0])\ny2 = np.array([89.0, 82.0, 85.0, 84.0, 80.0, 80.0, 80.0])\n\nplt.figure(figsize=(9.0, 6.0))\nplt.plot(x, y1, \"bo-\", label=\"Ours\")\nplt.plot(x, y2, \"g^-\", label=\"ACR\")\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [3.11, 3.32, 3.53, 3.63, 3.74, 3.94, 4.0]\n\nplt.plot(x, y, 'b-')\nplt.xlabel('Ratio of 4-bit Utilization (%)')\nplt.ylabel('Perflet (PPL)')\nplt.title('Performance vs. 4-bit Utilization')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\nx = [2, 3, 5, 7]\ny = [82.98, 89.53, 90.47, 96.75]\n\nplt.plot(x, y, 'o-')\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio')\nplt.title('Coverage Ratio vs Number of Training Objects')\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 2, 4, 6, 8])\ny = np.array([615, 630, 645, 660, 675])\n\nplt.errorbar(x, y, fmt='o', ecolor='r', capsize=5)\nplt.xlabel('Iterations')\nplt.ylabel('N-ELBO')\nplt.title('ELBO vs Iterations')\nplt.show()"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny1 = [2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2]\ny2 = [2.8, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1]\ny3 = [2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0]\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y1, 'b-', label='Baseline')\nax.plot(x, y2, 'g-', label='SoftMoE')\nax.plot(x, y3, 'r-', label='Top1-MoE')\n\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN Humanized Score')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([256, 512, 1024, 2048, 4096, 8192, 16384])\ny1 = np.array([0.75, 0.85, 0.95, 0.98, 0.99, 0.995, 0.998])\ny2 = np.array([0.65, 0.75, 0.85, 0.95, 0.98, 0.99, 0.995])\ny3 = np.array([0.55, 0.65, 0.75, 0.85, 0.95, 0.98, 0.99])\n\nplt.plot(x, y1, 'b-', label='BPE')\nplt.plot(x, y2, 'r-', label='Wordpunct')\nplt.plot(x, y3, 'g-', label='Whitespace')\n\nplt.xlabel('Vocabulary Size')\nplt.ylabel('Test set TPR | FPR = 10^-4')\nplt.title('Test set TPR | FPR = 10^-4')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [1, 12, 18, 30]\ny = [26.0, 22.6, 19.8, 36.8]\n\nplt.plot(x, y, marker='o')\nplt.xlabel('Compression Rate')\nplt.ylabel('Word Error Rate (%)')\nplt.title('CNN vs CIF vs STAR')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([25, 50, 100, 125, 175, 200])\ny1 = np.array([0.89, 0.87, 0.86, 0.85, 0.83, 0.82])\ny2 = np.array([0.88, 0.86, 0.85, 0.84, 0.82, 0.81])\ny3 = np.array([0.87, 0.85, 0.84, 0.83, 0.81, 0.80])\n\nplt.plot(x, y1, 'r', label='PILOTE')\nplt.plot(x, y2, 'b', label='Re-trained model')\nplt.plot(x, y3, 'g', label='Pre-trained model')\n\nplt.xlabel('Number of exemplars in class \\'Run\\'')\nplt.ylabel('Avg accuracy in five rounds')\nplt.title('Accuracy of models')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_29.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 20, 100)\ny1 = 150 + 50 * np.sin(x/10)\ny2 = 100 + 20 * np.cos(x/10)\n\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\nax.plot(x, y1, 'b', label='xLLM')\nax.plot(x, y2, 'r', label='Single-Pass LLM')\nax.set_xlabel('# of Steps')\nax.set_ylabel('Avg Fidelity')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([42, 43, 44, 45, 46, 47, 48, 49, 50])\ny1 = np.array([74, 75, 76, 77, 78, 79, 80, 81, 82])\ny2 = np.array([64, 65, 66, 67, 68, 69, 70, 71, 72])\n\nplt.plot(x, y1, label='ogbl-collab')\nplt.plot(x, y2, label='ogbl-ppa')\n\nplt.xlabel('Hits@50')\nplt.ylabel('Number of Nodes')\nplt.title('Hits@50 for ogbl-collab and ogbl-ppa')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_30.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2, 4, 6, 8, 10, 12])\ny1 = np.array([0.35, 0.37, 0.39, 0.41, 0.43, 0.45])\ny2 = np.array([0.36, 0.38, 0.40, 0.42, 0.44, 0.46])\n\nplt.plot(x, y1, 'b-', label='outside-code-diff')\nplt.plot(x, y2, 'r-', label='inside-code-diff')\n\nplt.xlabel('Layer')\nplt.ylabel('Android')\nplt.title('Android')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_31.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([6,7,8,9])\ny1 = np.array([0.95, 0.85, 0.75, 0.65])\ny2 = np.array([0.93, 0.83, 0.73, 0.63])\ny3 = np.array([0.92, 0.82, 0.72, 0.62])\n\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y1, 'b', label='Direct (100 samples)')\nplt.plot(x, y2, 'g', label='RFFT (100 samples)')\nplt.plot(x, y3, 'r', label='Scratpad (5000 samples)')\nplt.xlabel('Digit Length')\nplt.ylabel('Accuracy')\nplt.title('Accuracy of Different Methods')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_32.pdf", "response": "The accuracy of CLIP is higher than that of LAION."}
{"file": "dataset/ori_500/line_33.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([20, 40, 60, 80, 100])\ny1 = np.array([0.57, 0.63, 0.69, 0.75, 0.76])\ny2 = np.array([0.55, 0.61, 0.67, 0.73, 0.74])\ny3 = np.array([0.53, 0.59, 0.65, 0.71, 0.72])\ny4 = np.array([0.51, 0.57, 0.63, 0.69, 0.70])\n\nplt.plot(x, y1, 'r', label='CNN')\nplt.plot(x, y2, 'b', label='RF')\nplt.plot(x, y3, 'g', label='CNN+HMM')\nplt.plot(x, y4, 'y', label='RF+HMM')\n\nplt.xlabel('No. of Users in Development Set')\nplt.ylabel('F1')\nplt.title('F1 Score for Different Models')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [3.96, 3.71, 3.49, 3.34, 3.31, 3.34, 3.34]\n\nplt.plot(x, y1, 'o-', label='LibriCSS (test)')\nplt.plot(x, y2, 'o-', label='AMID (dev)')\n\nplt.xlabel('Number of microphones')\nplt.ylabel('AM WER (%)')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(10**-7, 10**-5, 100)\ny = 10**-6 * x**2 + 10**-4 * x + 10**-3\n\nplt.plot(x, y, 'b-', label='empirical rel. (B2=8.0)')\nplt.xlabel('Quantization error')\nplt.ylabel('Search window size ratio')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Create a list of values for the x-axis\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a list of values for the y-axis\ny1 = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\ny2 = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\ny3 = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\n\n# Plot the data\nax.plot(x, y1, label='SPMotif-0.5')\nax.plot(x, y2, label='SPMotif-0.7')\nax.plot(x, y3, label='SPMotif-0.9')\n\n# Set the title and labels\nax.set_title('Performance Comparison')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/line_37.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([6, 9, 12, 15, 18, 21, 24, 27, 30])\ny = np.array([77.4, 77.5, 77.6, 77.7, 77.8, 77.9, 78.0, 78.1, 78.2])\n\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(3, 100, 100)\ny1 = 0.5 * x + 0.2\ny2 = 0.4 * x + 0.3\ny3 = 0.7 * x + 0.1\n\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(x, y1, 'r-', label='GPT-Neo')\nax.plot(x, y2, 'b-', label='GPT-3')\nax.plot(x, y3, 'g-', label='GPT-30')\n\nax.set_xlabel('# Epochs')\nax.set_ylabel('MA')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([96, 192, 336, 512, 720])\ny1 = np.array([0.06, 0.08, 0.1, 0.12, 0.14])\ny2 = np.array([0.1, 0.12, 0.14, 0.16, 0.18])\ny3 = np.array([0.12, 0.14, 0.16, 0.18, 0.2])\n\nplt.figure(figsize=(15.0, 4.0))\nplt.plot(x, y1, 'o-', color='blue')\nplt.plot(x, y2, 'o-', color='orange')\nplt.plot(x, y3, 'o-', color='green')\n\nplt.show()"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\nax.plot([224, 128, 64, 32], [39.1, 35.7, 32.9, 30.1], 'o-', color='orange', label='ImageNet-1k')\nax.plot([224, 128, 64, 32], [22.9, 22.9, 22.9, 22.9], 'o-', color='blue', label='ImageNet-C/P (Fog)')\nax.set_xlabel('n')\nax.set_ylabel('Top-1 Acc.')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.array([5.0, 7.5, 10.0, 12.5, 15.0, 20.0, 22.5, 25.0])\ny1 = np.array([93.4, 88.2, 84.1, 80.2, 77.0, 74.0, 71.0, 68.0])\ny2 = np.array([96.0, 91.0, 87.0, 83.0, 80.0, 77.0, 74.0, 71.0])\ny3 = np.array([98.0, 93.0, 89.0, 85.0, 82.0, 79.0, 76.0, 73.0])\n\n# Plot the data\nax.plot(x, y1, 'o-', label='JPEG+LDPC')\nax.plot(x, y2, 'o-', label='DEEPJSCC w/o OFDM')\nax.plot(x, y3, 'o-', label='DEEPJSCC w/ OFDM')\n\n# Set the title and labels\nax.set_title('SNR Accuracy (%)')\nax.set_xlabel('SNR (dB)')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/line_41.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\n\nplt.figure(figsize=(6.0, 8.0))\nplt.plot(x, y1, 'm', label='Line 1 (Sinusoidal)')\nplt.plot(x, y2, 'b', label='Line 2 (Quadratic)')\nplt.plot(x, y3, 'g', label='Line 3 (Random Noise)')\nplt.plot(x, y4, 'r', label='Line 4 (Exponential Focus)')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_42.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 200, 100)\ny1 = 1.791 - 0.001*x\ny2 = 1.391 + 0.001*x\ny3 = 1.691 + 0.001*x\n\nplt.figure(figsize=(10.0, 5.0))\nplt.plot(x, y1, 'g-')\nplt.plot(x, y2, 'b-')\nplt.plot(x, y3, 'r-')\nplt.show()"}
{"file": "dataset/ori_500/line_43.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Create a list of x values\nx = [1, 2, 3, 4, 5]\n\n# Create a list of y values\ny = [78, 76, 74, 72, 70]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('ogbl-coll Results')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Nodes')\nax.set_ylabel('Hits')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_44.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(10, 60, 100)\ny1 = 10 - 2*np.exp(-0.1*x)\ny2 = 10 - 2*np.exp(-0.1*(x-10))\ny3 = 10 - 2*np.exp(-0.1*(x-20))\ny4 = 10 - 2*np.exp(-0.1*(x-30))\ny5 = 10 - 2*np.exp(-0.1*(x-40))\ny6 = 10 - 2*np.exp(-0.1*(x-50))\n\nplt.plot(x, y1, 'b-', label='Standard')\nplt.plot(x, y2, 'r-', label='Constrained')\nplt.plot(x, y3, 'g-', label='Experimental')\nplt.plot(x, y4, 'm-', label='Hypothetical')\n\nplt.xlabel('N')\nplt.ylabel('Precision')\nplt.title('Precision vs N')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(4, 1, figsize=(12.0, 8.0))\n\n# Graph 1\naxs[0].plot([10**i for i in range(5)], [10**i for i in range(5)], 'b-')\naxs[0].set_title('Graph Variation 1')\n\n# Graph 2\naxs[1].plot([10**i for i in range(5)], [10**i for i in range(5)], 'b-')\naxs[1].set_title('Graph Variation 2')\n\n# Graph 3\naxs[2].plot([10**i for i in range(5)], [10**i for i in range(5)], 'b-')\naxs[2].set_title('Graph Variation 3')\n\n# Graph 4\naxs[3].plot([10**i for i in range(5)], [10**i for i in range(5)], 'b-')\naxs[3].set_title('Graph Variation 4')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 26)\ny = [0.8, 0.7, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]\nplt.plot(x, y, 'b-')\nplt.show()"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ny1 = [0.7, 0.8, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02]\ny2 = [0.8, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\ny3 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005]\n\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y1, 'b-', label='Standard Performance')\nplt.plot(x, y2, 'r-', label='Innovative Performance')\nplt.fill_between(x, y1, y2, color='pink', alpha=0.5)\nplt.xlabel('Time (Months)')\nplt.ylabel('Performance Index')\nplt.title('Comparative Performance Analysis Over Time')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a new figure with a specific size.\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Create a subplot with a specified number of rows and columns.\nax = fig.add_subplot(111)\n\n# Plot the data for monthly sales and average temperature.\nax.plot(months, monthly_sales, 'b-', label='Monthly Sales')\nax.plot(months, avg_temp, 'r-', label='Average Temperature')\n\n# Set the title of the plot.\nax.set_title('Sales and Temperature Correlation Over a Year')\n\n# Set the x-axis label.\nax.set_xlabel('Month')\n\n# Set the y-axis label.\nax.set_ylabel('Temperature (Celsius)')\n\n# Set the legend of the plot.\nax.legend()\n\n# Display the plot.\nplt.show()"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Exponential Growth Over Time\nplt.plot([0, 2, 4, 6, 8, 10], [0.5, 0.7, 0.8, 0.9, 1.0, 1.1], 'g-')\nplt.title('Exponential Growth Over Time')\nplt.xlabel('Time')\nplt.ylabel('Value')\n\n# Exponential Decay Over Time\nplt.plot([0, 2, 4, 6, 8, 10], [0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'r-')\nplt.title('Exponential Decay Over Time')\nplt.xlabel('Time')\nplt.ylabel('Value')\n\n# Oscillatory Behavior Over Time\nplt.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'b-')\nplt.title('Oscillatory Behavior Over Time')\nplt.xlabel('Time')\nplt.ylabel('Value')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(1, 11)\ny1 = [0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61]\ny2 = [0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51]\ny3 = [0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41]\n\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'b-', label='5-shot direct')\nax.plot(x, y2, 'r-', label='5-shot scatchpad')\nax.plot(x, y3, 'g-', label='5-shot rule-following')\n\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 10.0))\nax.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.27, 0.19, 0.13, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06], 'o-')\nax.set_title('Smoothed Representation')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.exp(-x)\ny4 = np.log(x + 1)\n\nax.plot(x, y1, 'm', label='Sin Wave')\nax.plot(x, y2, 'g', label='Cos Wave')\nax.plot(x, y3, 'b', label='Exp Decay')\nax.plot(x, y4, 'r', label='Log Growth')\n\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude/Value')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_52.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.1, 0.5, 0.1)\ny = np.arange(0.1, 0.5, 0.1)\n\nfig, axs = plt.subplots(4, 3, figsize=(9.0, 6.0))\n\naxs[0, 0].plot(x, y, 'b-')\naxs[0, 0].set_title('Positive bound')\n\naxs[0, 1].plot(x, y, 'b-')\naxs[0, 1].set_title('Negative bound')\n\naxs[0, 2].plot(x, y, 'b-')\naxs[0, 2].set_title('Contrastive loss weight')\n\naxs[1, 0].plot(x, y, 'b-')\naxs[1, 0].set_title('Fuzzy coefficient')\n\naxs[1, 1].plot(x, y, 'b-')\naxs[1, 1].set_title('Fuzzy coefficient')\n\naxs[1, 2].plot(x, y, 'b-')\naxs[1, 2].set_title('Fuzzy coefficient')\n\naxs[2, 0].plot(x, y, 'b-')\naxs[2, 0].set_title('Fuzzy coefficient')\n\naxs[2, 1].plot(x, y, 'b-')\naxs[2, 1].set_title('Fuzzy coefficient')\n\naxs[2, 2].plot(x, y, 'b-')\naxs[2, 2].set_title('Fuzzy coefficient')\n\naxs[3, 0].plot(x, y, 'b-')\naxs[3, 0].set_title('Fuzzy coefficient')\n\naxs[3, 1].plot(x, y, 'b-')\naxs[3, 1].set_title('Fuzzy coefficient')\n\naxs[3, 2].plot(x, y, 'b-')\naxs[3, 2].set_title('Fuzzy coefficient')\n\nplt.show()"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.0, 1.1, 0.1)\ny1 = np.random.rand(11)*85 + 75\ny2 = np.random.rand(11)*85 + 75\ny3 = np.random.rand(11)*85 + 75\ny4 = np.random.rand(11)*85 + 75\ny5 = np.random.rand(11)*85 + 75\ny6 = np.random.rand(11)*85 + 75\ny7 = np.random.rand(11)*85 + 75\ny8 = np.random.rand(11)*85 + 75\ny9 = np.random.rand(11)*85 + 75\ny10 = np.random.rand(11)*85 + 75\ny11 = np.random.rand(11)*85 + 75\n\nfig, axs = plt.subplots(6, 1, figsize=(12.0, 8.0))\naxs[0].plot(x, y1, 'r-')\naxs[0].set_title('Positive Bound')\naxs[1].plot(x, y2, 'g-')\naxs[1].set_title('Negative Bound')\naxs[2].plot(x, y3, 'b-')\naxs[2].set_title('Contrastive Loss Weight')\naxs[3].plot(x, y4, 'm-')\naxs[3].set_title('Fuzzy Coefficient')\naxs[4].plot(x, y5, 'c-')\naxs[4].set_title('Additional Metric 1')\naxs[5].plot(x, y6, 'y-')\naxs[5].set_title('Additional Metric 2')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 3, figsize=(12.0, 4.0))\n\n# Data for plotting\nx = np.arange(4)\ny1 = [1.2, 1.1, 1.3, 1.4]\ny2 = [1.0, 0.9, 1.1, 1.2]\ny3 = [0.8, 0.7, 0.9, 1.0]\n\naxs[0].bar(x, y1, color='red')\naxs[0].set_title('Dry vs Rain')\naxs[0].set_xlabel('Driving Style')\naxs[0].set_ylabel('Relaxation Level')\n\naxs[1].bar(x, y2, color='blue')\naxs[1].set_title('Snow vs Fog')\naxs[1].set_xlabel('Driving Style')\naxs[1].set_ylabel('Relaxation Level')\n\naxs[2].bar(x, y3, color='green')\naxs[2].set_title('Rain vs Snow')\naxs[2].set_xlabel('Driving Style')\naxs[2].set_ylabel('Relaxation Level')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nn_aug = np.arange(0.0, 8.0, 1.0)\ncontent = [7.42, 6.95, 6.48, 6.01, 5.54, 5.07, 4.60, 4.13]\norganization = [7.32, 6.85, 6.38, 5.91, 5.44, 4.97, 4.50, 4.03]\nlanguage = [7.22, 6.75, 6.28, 5.81, 5.34, 4.87, 4.40, 3.93]\n\nplt.figure(figsize=(8.0, 3.0))\nplt.plot(n_aug, content, 'b-', label='Content')\nplt.plot(n_aug, organization, 'r-', label='Organization')\nplt.plot(n_aug, language, 'g-', label='Language')\n\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\nx = np.arange(0, 81, 10)\ny1 = [0.65, 0.67, 0.68, 0.69, 0.70, 0.71, 0.72, 0.73, 0.74, 0.75]\ny2 = [0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 0.71, 0.72, 0.73, 0.74]\ny3 = [0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 0.71, 0.72, 0.73, 0.74]\n\naxs[0].plot(x, y1, 'r-')\naxs[0].set_title('COCO 10K')\n\naxs[1].plot(x, y2, 'b-')\naxs[1].set_title('LAION 10K')\n\naxs[2].plot(x, y3, 'g-')\naxs[2].set_title('COCO & LAION 5K')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 9.0))\n\nax.plot([0.05, 0.15, 0.25], [0.08, 0.08, 0.08], 'b-', label='Error Rate vs Learning Rate')\nax.plot([0.05, 0.15, 0.25], [0.12, 0.12, 0.12], 'r-', label='Error Rate vs Learning Rate')\nax.plot([0.05, 0.15, 0.25], [0.14, 0.14, 0.14], 'g-', label='Error Rate vs Learning Rate')\n\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Error Rate')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 200, 1)\ny1 = np.random.rand(200)\ny2 = np.random.rand(200)\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\naxs[0].plot(x, y1, 'b', label='Base Model')\naxs[0].plot(x, y2, 'r', label='Our Model')\naxs[0].set_title('Metric 1')\naxs[0].set_xlabel('Training Iterations')\naxs[0].set_ylabel('Metric Value')\n\ny3 = np.random.rand(200)\ny4 = np.random.rand(200)\n\naxs[1].plot(x, y3, 'b', label='Base Model')\naxs[1].plot(x, y4, 'r', label='Our Model')\naxs[1].set_title('Metric 2')\naxs[1].set_xlabel('Training Iterations')\naxs[1].set_ylabel('Metric Value')\n\nplt.show()"}
{"file": "dataset/ori_500/line_59.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 201, 1)\ny1 = np.random.normal(0.5, 0.1, 201)\ny2 = np.random.normal(0.7, 0.1, 201)\n\nplt.plot(x, y1, 'b', label='Base Model')\nplt.plot(x, y2, 'r', label='Our Model')\n\nplt.xlabel('Training Iterations')\nplt.ylabel('Metric Value')\nplt.title('Accuracy')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(2, 6, 100)\ny1 = 10**x\ny2 = 10**(x-1)\n\nplt.plot(x, y1, 'b-', label='Standard')\nplt.plot(x, y2, 'r-', label='Constrained')\n\nplt.xlabel('N')\nplt.ylabel('Value')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_60.pdf", "response": "import matplotlib.pyplot as plt\n\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.7, 0.4, 0.3, 0.2, 0.1, 0.05]\ny2 = [1.2, 1.1, 1.05, 1.02, 1.01, 1.0]\n\nplt.plot(x, y1, 'b-', label='Performance')\nplt.plot(x, y2, 'r-', label='Efficiency')\n\nplt.xlabel('Weeks')\nplt.ylabel('Score')\nplt.title('Performance and Efficiency Over Weeks')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_61.pdf", "response": "import matplotlib.pyplot as plt\n\nx = [5, 10, 15, 20, 25]\ny1 = [0.8, 0.7, 0.9, 0.8, 0.7]\ny2 = [0.9, 0.8, 0.7, 0.6, 0.5]\n\nplt.plot(x, y1, 'b-')\nplt.plot(x, y2, 'r-')\n\nplt.show()"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [5, 10, 15, 20, 25, 30]\ny_performance = [0.8, 0.7, 0.9, 0.6, 0.4, 0.2]\ny_efficiency = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny_growth = [1.1, 1.0, 0.9, 0.8, 0.7, 0.6]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the performance data\nax.plot(x, y_performance, 'bo-', label='Performance')\n\n# Plot the efficiency data\nax.plot(x, y_efficiency, 'ro-', label='Efficiency')\n\n# Plot the growth data\nax.plot(x, y_growth, 'go-', label='Growth')\n\n# Set the title of the plot\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.4, 0.3, 0.6, 0.7, 0.9, 0.8]\ny2 = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\ny3 = [0.5, 0.6, 0.7, 0.8, 0.9, 0.8]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Data Series 1')\nax.plot(x, y2, 'g-', label='Data Series 2 with Gradient')\nax.plot(x, y3, 'm-', label='Data Series 3')\n\n# Set the title and labels\nax.set_title('Dynamic Data Presentation Across Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Normalized Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([95.4, 94.4, 93.4, 92.4, 91.4, 90.4, 89.4, 88.4, 87.4, 86.4])\ny2 = np.array([98.4, 97.4, 96.4, 95.4, 94.4, 93.4, 92.4, 91.4, 90.4, 89.4])\ny3 = np.array([99.4, 98.4, 97.4, 96.4, 95.4, 94.4, 93.4, 92.4, 91.4, 90.4])\ny4 = np.array([96.4, 95.4, 94.4, 93.4, 92.4, 91.4, 90.4, 89.4, 88.4, 87.4])\n\nplt.figure(figsize=(12.0, 6.0))\nplt.plot(x, y1, 'b-', label='BaCE')\nplt.plot(x, y2, 'y-', label='LWF')\nplt.plot(x, y3, 'g-', label='EWC')\nplt.plot(x, y4, 'r-', label='SEQ')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [1,2,3,4,5,6,7,8,9,10]\ny1 = [85, 84, 83, 82, 81, 80, 79, 78, 77, 76]\ny2 = [88, 87, 86, 85, 84, 83, 82, 81, 80, 79]\ny3 = [90, 89, 88, 87, 86, 85, 84, 83, 82, 81]\n\nplt.figure(figsize=(8.0, 3.0))\nplt.plot(x, y1, 'b-', label='BaCE')\nplt.plot(x, y2, 'g-', label='EWC')\nplt.plot(x, y3, 'r-', label='LWF')\nplt.xlabel('Task')\nplt.ylabel('Average Accuracy (%)')\nplt.title('Performance Comparison: BaCE vs EWC')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 2001, 500)\ny1 = [0.003, 0.004, 0.006, 0.008, 0.009]\ny2 = [0.002, 0.003, 0.004, 0.005, 0.006]\ny3 = [0.001, 0.002, 0.003, 0.004, 0.005]\ny4 = [0.001, 0.002, 0.003, 0.004, 0.005]\ny5 = [0.001, 0.002, 0.003, 0.004, 0.005]\ny6 = [0.001, 0.002, 0.003, 0.004, 0.005]\ny7 = [0.001, 0.002, 0.003, 0.004, 0.005]\ny8 = [0.001, 0.002, 0.003, 0.004, 0.005]\ny9 = [0.001, 0.002, 0.003, 0.004, 0.005]\ny10 = [0.001, 0.002, 0.003, 0.004, 0.005]\n\nplt.figure(figsize=(9.0, 7.0))\nplt.plot(x, y1, label='model1 Series 1')\nplt.plot(x, y2, label='model1 Series 2')\nplt.plot(x, y3, label='model2 Series 1')\nplt.plot(x, y4, label='model2 Series 2')\nplt.plot(x, y5, label='model3 Series 1')\nplt.plot(x, y6, label='model3 Series 2')\nplt.plot(x, y7, label='model4 Series 1')\nplt.plot(x, y8, label='model4 Series 2')\nplt.plot(x, y9, label='model5 Series 1')\nplt.plot(x, y10, label='model5 Series 2')\n\nplt.xlabel('Iterations')\nplt.ylabel('Success Rate')\nplt.title('model1 Performance')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [8.4, 8.1, 7.9, 7.7, 7.5, 7.3, 7.1]\ny2 = [27.4, 26.6, 25.8, 25.0, 24.2, 23.4, 22.6]\n\nplt.plot(x, y1, 'o-', color='orange', label='SDM')\nplt.plot(x, y2, 'o-', color='blue', label='IHM')\n\nplt.xlabel('Number of microphones')\nplt.ylabel('AMMI WER(%)')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [3.4, 3.9, 4.2, 4.5, 4.7, 4.8, 4.9]\ny2 = [2.5, 2.8, 3.1, 3.3, 3.5, 3.6, 3.7]\ny3 = [2.1, 2.4, 2.6, 2.8, 3.0, 3.1, 3.2]\n\nplt.plot(x, y1, 'b-', label='LibriCSS (test)')\nplt.plot(x, y2, 'r-', label='AMi (dev)')\nplt.plot(x, y3, 'g-', label='SDM Trend')\nplt.xlabel('Number of microphones')\nplt.ylabel('WER (%)')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ny2 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\nplt.plot(x, y1, 'o-', color='orange', label='Highlight 3')\nplt.plot(x, y2, 'o-', color='blue', label='Highlight 5')\nplt.axhline(y=0.7, color='red', linestyle='--', label='Threshold')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.1, 1.1, 0.1)\ny1 = [78.5, 79.3, 79.6, 79.8, 80.0, 80.2, 80.4, 80.6, 80.8, 81.0]\ny2 = [77.5, 77.7, 77.9, 78.1, 78.3, 78.5, 78.7, 78.9, 79.1, 79.3]\ny3 = [76.5, 76.7, 76.9, 77.1, 77.3, 77.5, 77.7, 77.9, 78.1, 78.3]\ny4 = [75.5, 75.7, 75.9, 76.1, 76.3, 76.5, 76.7, 76.9, 77.1, 77.3]\n\nfig, axs = plt.subplots(1, 4, figsize=(12.0, 4.0))\naxs[0].plot(x, y1, 'b-')\naxs[0].set_title('Positive bound.')\naxs[1].plot(x, y2, 'b-')\naxs[1].set_title('Negative bound.')\naxs[2].plot(x, y3, 'b-')\naxs[2].set_title('Contrastive loss weight.')\naxs[3].plot(x, y4, 'b-')\naxs[3].set_title('Fuzzy coefficient.')\n\nplt.show()"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\n\nplt.plot(x, y, 'ro-')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Create a list of values for the x-axis\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a list of values for the y-axis\ny = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_72.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0.1, 1.0, 10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\n\nplt.plot(x, y1, 'o-', label='PNA + ours')\nplt.plot(x, y2, 'o-', label='GIN + ours')\n\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Dynamic Performance Trends')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_73.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1], 'o-', label='PNA + ours')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1], 'o-', label='GIN + ours')\n\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\nax.set_title('Modern Linear Performance Evaluation')\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/line_74.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0.2, 1.0, 0.2)\ny1 = [0.95, 0.85, 0.75, 0.65, 0.55]\ny2 = [0.9, 0.8, 0.7, 0.6, 0.5]\ny3 = [0.85, 0.75, 0.65, 0.55, 0.45]\n\nplt.plot(x, y1, 'b-', label='PNA + ours')\nplt.plot(x, y2, 'r-', label='GIN + ours')\nplt.plot(x, y3, 'r--', label='GIN + ours')\n\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Dynamic model performance')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_75.pdf", "response": "import matplotlib.pyplot as plt\n\nx = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\ny1 = [84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2]\ny2 = [84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2, 84.2]\n\nplt.plot(x, y1, 'b-', label='Model 1 Mean Accuracy')\nplt.plot(x, y2, 'r-', label='Model 2 Mean Accuracy')\n\nplt.xlabel('Ensemble Size')\nplt.ylabel('Model Accuracy')\nplt.title('Comparison of Model Accuracies')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_76.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Config A - Model X\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\ny1 = np.array([94.5, 92.3, 91.2, 90.1, 89.0, 87.9, 86.8, 85.7, 84.6])\n\n# Config B - Model X\ny2 = np.array([93.4, 92.2, 91.1, 90.0, 88.9, 87.8, 86.7, 85.6, 84.5])\n\n# Config C - Model X\ny3 = np.array([92.3, 91.2, 90.1, 89.0, 87.9, 86.8, 85.7, 84.6, 83.5])\n\n# Config A - Model Y\ny4 = np.array([75.4, 74.3, 73.2, 72.1, 71.0, 70.9, 69.8, 68.7, 67.6])\n\n# Config B - Model Y\ny5 = np.array([74.3, 73.2, 72.1, 71.0, 70.9, 69.8, 68.7, 67.6, 66.5])\n\n# Config C - Model Y\ny6 = np.array([73.2, 72.1, 71.0, 70.9, 69.8, 68.7, 67.6, 66.5, 65.4])\n\n# Config A - Model Z\ny7 = np.array([84.5, 83.4, 82.3, 81.2, 80.1, 79.0, 77.9, 76.8, 75.7])\n\n# Config B - Model Z\ny8 = np.array([83.4, 82.3, 81.2, 80.1, 79.0, 77.9, 76.8, 75.7, 74.6])\n\n# Config C - Model Z\ny9 = np.array([82.3, 81.2, 80.1, 79.0, 77.9, 76.8, 75.7, 74.6, 73.5])\n\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0))\naxs[0].plot(x, y1, 'r', label='Config A - Model X')\naxs[0].plot(x, y2, 'b', label='Config B - Model X')\naxs[0].plot(x, y3, 'g', label='Config C - Model X')\naxs[0].set_title('Performance of Model X')\naxs[0].legend()\n\naxs[1].plot(x, y4, 'r', label='Config A - Model Y')\naxs[1].plot(x, y5, 'b', label='Config B - Model Y')\naxs[1].plot(x, y6, 'g', label='Config C - Model Y')\naxs[1].set_title('Performance of Model Y')\naxs[1].legend()\n\naxs[2].plot(x, y7, 'r', label='Config A - Model Z')\naxs[2].plot(x, y8, 'b', label='Config B - Model Z')\naxs[2].plot(x, y9, 'g', label='Config C - Model Z')\naxs[2].set_title('Performance of Model Z')\naxs[2].legend()\n\nplt.show()"}
{"file": "dataset/ori_500/line_77.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Create a list of x values\nx = [2, 4, 6, 8, 10]\n\n# Create a list of y values for Config A - Llama\ny_a = [95.3, 92.7, 91.2, 90.1, 89.5]\n\n# Create a list of y values for Config B - Llama\ny_b = [94.2, 92.1, 91.0, 90.2, 89.6]\n\n# Create a list of y values for Config C - Llama\ny_c = [93.1, 92.0, 91.1, 90.3, 89.7]\n\n# Create a list of y values for Config A - Falcon\ny_a_falcon = [74.2, 72.1, 71.0, 70.2, 69.6]\n\n# Create a list of y values for Config B - Falcon\ny_b_falcon = [73.1, 71.0, 70.0, 69.2, 68.6]\n\n# Create a list of y values for Config C - Falcon\ny_c_falcon = [72.0, 70.0, 69.0, 68.2, 67.6]\n\n# Create a list of y values for Config A - Qwen\ny_a_qwen = [85.3, 82.7, 81.2, 80.1, 79.5]\n\n# Create a list of y values for Config B - Qwen\ny_b_qwen = [84.2, 82.1, 81.0, 80.2, 79.6]\n\n# Create a list of y values for Config C - Qwen\ny_c_qwen = [83.1, 82.0, 81.1, 80.3, 79.7]\n\n# Plot the data\nax.plot(x, y_a, 'r', label='Config A - Llama')\nax.plot(x, y_b, 'g', label='Config B - Llama')\nax.plot(x, y_c, 'b', label='Config C - Llama')\nax.plot(x, y_a_falcon, 'r--', label='Config A - Falcon')\nax.plot(x, y_b_falcon, 'g--', label='Config B - Falcon')\nax.plot(x, y_c_falcon, 'b--', label='Config C - Falcon')\nax.plot(x, y_a_qwen, 'r-.', label='Config A - Qwen')\nax.plot(x, y_b_qwen, 'g-.', label='Config B - Qwen')\nax.plot(x, y_c_qwen, 'b-.', label='Config C - Qwen')\n\n# Set the title of the plot\nax.set_title('Performance of Llama, Falcon, and Qwen')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.plot([1,2,3,4], [1.5, 1.8, 2.1, 2.4], 'r-')\nax.plot([1,2,3,4], [1.9, 1.7, 1.6, 1.5], 'b-')\nax.plot([1,2,3,4], [1.2, 1.3, 1.4, 1.5], 'g-')\nax.plot([1,2,3,4], [1.8, 1.7, 1.6, 1.5], 'y-')\nax.plot([1,2,3,4], [1.1, 1.2, 1.3, 1.4], 'm-')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Traffic Performance\nx = np.linspace(100, 700, 100)\ny = np.sin(x/100)\nplt.plot(x, y, label='Traffic Performance')\n\n# ETMM2 Performance\nx = np.linspace(100, 700, 100)\ny = np.cos(x/100)\nplt.plot(x, y, label='ETMM2 Performance')\n\n# ETTH2 Performance\nx = np.linspace(100, 700, 100)\ny = np.tan(x/100)\nplt.plot(x, y, label='ETTH2 Performance')\n\n# ECL Performance\nx = np.linspace(100, 700, 100)\ny = np.exp(x/100)\nplt.plot(x, y, label='ECL Performance')\n\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ny1 = [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7]\ny2 = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6]\ny3 = [1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\n\nplt.plot(x, y1, 'r-', label='Weather')\nplt.plot(x, y2, 'b-', label='Rail')\nplt.plot(x, y3, 'g-', label='Passive')\n\nplt.xlabel('Driving Style')\nplt.ylabel('Relaxation Level')\nplt.title('Relaxation Level by Driving Style')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny1 = [20, 25, 30, 35, 40]\ny2 = [15, 18, 20, 22, 25]\ny3 = [10, 12, 14, 16, 18]\ny4 = [5, 7, 9, 11, 13]\ny5 = [2, 4, 6, 8, 10]\n\nfig, axs = plt.subplots(3, 2, figsize=(9.0, 6.0))\n\naxs[0, 0].plot(x, y1, 'r', label='Run 1')\naxs[0, 0].plot(x, y2, 'b', label='Run 2')\naxs[0, 0].set_title('Category A Growth')\naxs[0, 0].legend()\n\naxs[0, 1].plot(x, y3, 'r', label='Run 1')\naxs[0, 1].plot(x, y4, 'b', label='Run 2')\naxs[0, 1].set_title('Category B Growth')\naxs[0, 1].legend()\n\naxs[1, 0].plot(x, y5, 'r', label='Run 1')\naxs[1, 0].plot(x, y4, 'b', label='Run 2')\naxs[1, 0].set_title('Category C Growth')\naxs[1, 0].legend()\n\naxs[1, 1].plot(x, y3, 'r', label='Run 1')\naxs[1, 1].plot(x, y2, 'b', label='Run 2')\naxs[1, 1].set_title('Category D Growth')\naxs[1, 1].legend()\n\naxs[2, 0].plot(x, y1, 'r', label='Run 1')\naxs[2, 0].plot(x, y2, 'b', label='Run 2')\naxs[2, 0].set_title('Category E Growth')\naxs[2, 0].legend()\n\naxs[2, 1].plot(x, y3, 'r', label='Run 1')\naxs[2, 1].plot(x, y4, 'b', label='Run 2')\naxs[2, 1].set_title('Category F Growth')\naxs[2, 1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(4, 12, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.plot(x, y1, 'b-', label='Standard')\nplt.plot(x, y2, 'r-', label='Constrained')\nplt.xlabel('N')\nplt.ylabel('Value')\nplt.title('Standard vs Constrained')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nlabels = 'Central', 'Others'\nsizes = [5, 5]\ncolors = ['orange', 'yellow']\nexplode = (0.1, 0)  # explode 1st slice\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Data to plot\nlabels = 'North', 'South', 'East', 'West'\nsizes = [40, 25, 15, 10]\ncolors = ['lightblue', 'lightgreen', 'lavender', 'lightcoral']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig2, ax2 = plt.subplots()\nax2.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=90)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\nax.plot(x, y, 'o-')\nplt.show()"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nx = np.arange(5)\ny = [44.15, 44.05, 41.55, 40.9, 40.65, 39.45, 36.7]\nax.bar(x, y, color='green')\nax.set_xticks(x)\nax.set_xticklabels(['Engstr\u00f6m (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addepalli (M6)', 'Carmon (M7)'])\nplt.show()"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Creating a bar chart\nax.bar(['Cartesian', 'Retinotopic'], [0.551, 0.043], color='blue')\nax.bar(['Cartesian', 'Retinotopic'], [0.538, 0.195], bottom=[0.551, 0.043], color='orange')\nax.bar(['Cartesian', 'Retinotopic'], [0.394, 0.395], bottom=[0.551 + 0.538, 0.043 + 0.195], color='red')\n\n# Setting the title of the plot\nax.set_title('Accuracy')\n\n# Setting the x-axis label\nax.set_xlabel('Type')\n\n# Setting the y-axis label\nax.set_ylabel('Accuracy')\n\n# Creating a second subplot\nax2 = fig.add_subplot(132)\n\n# Creating a line chart\nax2.plot([0, 90, 180], [0.744, 0.762, 0.762], color='blue')\nax2.plot([0, 90, 180], [0.744, 0.762, 0.762], color='orange')\nax2.plot([0, 90, 180], [0.744, 0.762, 0.762], color='red')\n\n# Setting the title of the plot\nax2.set_title('Rotation Invariance')\n\n# Setting the x-axis label\nax2.set_xlabel('Rotation angle (\u00b0)')\n\n# Setting the y-axis label\nax2.set_ylabel('Invariance')\n\n# Creating a third subplot\nax3 = fig.add_subplot(133)\n\n# Creating a line chart\nax3.plot([0, 90, 180], [0.744, 0.762, 0.762], color='blue')\nax3.plot([0, 90, 180], [0.744, 0.762, 0.762], color='orange')\nax3.plot([0, 90, 180], [0.744, 0.762, 0.762], color='red')\n\n# Setting the title of the plot\nax3.set_title('Rotation Invariance')\n\n# Setting the x-axis label\nax3.set_xlabel('Rotation angle (\u00b0)')\n\n# Setting the y-axis label\nax3.set_ylabel('Invariance')\n\nplt.show()"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Positive Attribute')\nax.set_xlabel('Attribute')\nax.set_ylabel('Intensity (Y,Z)')\n\n# Create a list of colors\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a list of labels\nlabels = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Male', 'BigLips', 'Pointy Nose', 'White', 'NoBeard', 'Heavy Makeup']\n\n# Create a list of values\nvalues = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a bar chart\nax.bar(labels, values, color=colors)\n\nplt.show()"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar([0, 10, 20, 30, 40], [7.8, 7.5, 9.2, 9.5, 10.2], color='blue')\n\n# Set the title of the plot\nax.set_title('Token Rarity')\n\n# Set the x-axis label\nax.set_xlabel('GPT2 Token Rank')\n\n# Set the y-axis label\nax.set_ylabel('Loss')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.bar(['Sentiment', 'Toxicity', 'News'], [0.35, 0.28, 0.27], color='blue')\nplt.show()"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.bar([1, 2, 3], [45, 55, 58], color='blue')\nax.set_title('Number of successful ad circuits')\nax.set_xlabel('Circuit')\nax.set_ylabel('# Successful Circuits')\nplt.show()"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 1, 2, 3, 4, 5])\ny = np.array([70, 60, 50, 40, 30, 20])\n\nplt.figure(figsize=(10.0, 4.0))\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the x-axis limits\nax.set_xlim([2015, 2022])\n\n# Set the y-axis limits\nax.set_ylim([0, 120])\n\n# Set the title of the plot\nax.set_title('Technological Advancements')\n\n# Set the labels for the x-axis\nax.set_xlabel('Year')\n\n# Set the labels for the y-axis\nax.set_ylabel('Progress (%)')\n\n# Create a bar chart with the data provided\nax.bar([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022], [43.2, 44.1, 45.2, 46.3, 47.4, 48.5, 49.6, 50.7], color='blue', label='Hardware')\nax.bar([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022], [43.2, 44.1, 45.2, 46.3, 47.4, 48.5, 49.6, 50.7], color='orange', label='Software')\nax.bar([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022], [43.2, 44.1, 45.2, 46.3, 47.4, 48.5, 49.6, 50.7], color='green', label='AI')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\nvalues = [3.2, 2.9, 2.5, 2.4, 2.3, 2.2]\n\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.bar(labels, values, color='orange')\n\nplt.show()"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(40, 120, 10)\ny = [93, 87, 96, 90, 85, 80, 75, 70, 65, 60, 55, 50]\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.plot(x, y, 'o-')\nax.set_xlabel('Score')\nax.set_ylabel('Number of Students')\nax.set_title('Student Performance in Schools')\n\nplt.show()"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.set_title('Average Annual Temperature')\nax.set_xlabel('Region')\nax.set_ylabel('Temperature (Celsius)')\nax.set_xticks([0, 1])\nax.set_xticklabels(['Region 1', 'Region 2'])\nax.set_yticks(np.arange(10, 28, 1))\nax.set_yticklabels(np.arange(10, 28, 1))\n\n# Create a bar chart\nax.bar([0, 1], [22.3, 24.7], color='blue')\n\nplt.show()"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.plot([2019, 2020, 2021, 2022], [300, 200, 100, 400], 'o-')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Accounts')\nax.set_title('Investment Growth Over Time')\nplt.show()"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Create a bar chart with the data provided\nax.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [85, 75, 95, 90], color='blue')\n\n# Set the title of the plot\nax.set_title('Al Task Success Rates')\n\n# Set the x-axis label\nax.set_xlabel('Task')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate (%)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Create a bar chart with the data provided\nax.bar([100, 200, 300], [50, 100, 150], color='red')\n\n# Set the title of the plot\nax.set_title('Traffic Volume by Time of Day')\n\n# Set the x-axis label\nax.set_xlabel('Frequency (Number of Vehicles)')\n\n# Set the y-axis label\nax.set_ylabel('Traffic Volume')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = 'Literature', 'Visual Arts', 'Performing Arts', 'Music'\nsizes = [10, 20, 30, 40]\nexplode = (0.1, 0, 0, 0)  # only \"explode\" the 1st slice (i.e., 'Literature')\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Bar chart\nlabels = ['Expression', 'Music', 'Collaboration', 'Creativity', 'Dedication']\nsizes = [0.8, 0.6, 0.4, 0.2, 0.2]\n\nfig2, ax2 = plt.subplots()\nax2.bar(labels, sizes, color='blue')\nplt.show()"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Known sales data\nx = np.array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5])\ny_known_sales = np.array([24769, 18000, 12000, 10000, 8000, 6000])\n\n# Unknown sales data\ny_unknown_sales = np.array([24769, 18000, 12000, 10000, 8000, 6000])\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.plot(x, y_known_sales, label='Known Sales', color='green')\nax.plot(x, y_unknown_sales, label='Unknown Sales', color='blue')\n\nax.set_xlabel('Sale Probability')\nax.set_ylabel('Sales')\nax.set_title('Sales by Sale Probability')\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random data for the histogram\nnp.random.seed(42)\ndata = np.random.normal(loc=0.5, scale=0.3, size=1000)\n\n# Create a histogram of the data\nplt.hist(data, bins=20, color='blue', alpha=0.7)\n\n# Set the title and labels\nplt.title('Histogram of Stock Returns')\nplt.xlabel('Returns')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.plot([0, 1, 2, 3, 4], [0.75, 0.65, 0.55, 0.45, 0.35], 'bo-')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Energy Consumption (GWh)')\nplt.show()"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a list of document types\ndoc_types = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\n\n# Create a list of document counts\ndoc_counts = [150, 350, 200, 300]\n\n# Create a list of colors for each document type\ncolors = ['red', 'yellow', 'green', 'blue']\n\n# Create a pie chart\nplt.pie(doc_counts, labels=doc_types, colors=colors, autopct='%1.1f%%')\n\n# Set the title of the pie chart\nplt.title('Historical Document Types in Library')\n\n# Display the pie chart\nplt.show()\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a list of years\nyears = [2000, 2001, 2002]\n\n# Create a list of document counts for each year\ndocument_counts = [1600, 1400, 1800]\n\n# Create a bar chart\nax.bar(years, document_counts, color='purple')\n\n# Set the title of the bar chart\nax.set_title('Document Count Over Historical Periods')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Number of Documents')\n\n# Display the bar chart\nplt.show()"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1000, 1200, 1400, 1600, 1800, 2000])\ny = np.array([8.5, 8.75, 8.75, 8.75, 8.75, 8.75])\n\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2020', 'Engstrom2019', 'Hendricks2019'], [75.32, 77.11, 77.03, 76.86, 74.52, 0.8], color='green')\nax.set_xlabel('Accuracy (%)')\nax.set_title('Accuracy of Different Models')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 9.0))\n\n# Create a bar chart with the data provided\nax.bar(['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random'], [0.85, 0.83, 0.82, 0.81, 0.80, 0.79], color='blue')\n\n# Set the title of the plot\nax.set_title('General Variance')\n\n# Set the y-axis label\nax.set_ylabel('General Variance')\n\n# Set the x-axis label\nax.set_xlabel('Context')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.plot([0, 200], [100, 100], 'k--')\nax.set_xlabel('Elo Rating')\nax.set_ylabel('Correct Rating - Incorrect Rating')\nax.set_title('Debaters')\nax.legend(['GPT-3-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo'])\nplt.show()"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [30.5, 29.8, 13.2, 11.3, 10.6, 4.6]\ncolors = ['green', 'blue', 'yellow', 'purple', 'gray', 'orange']\nlabels = ['30.5%', '29.8%', '13.2%', '11.3%', '10.6%', '4.6%']\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nsugar = 90\nflour = 225\negg = 1\nyeast = 0.5\nbutter = 60\nmilk = 100\n\n# Define the colors\ncolors = ['orange', 'blue', 'green', 'purple', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.pie([sugar, flour, egg, yeast, butter, milk], labels=[\"90 g sugar\", \"225 g flour\", \"1 egg\", \"1/2 package of yeast\", \"60 g butter\", \"100 ml milk\"], colors=colors, autopct='%1.1f%%')\n\nplt.show()"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Transport', 'Food', 'Utilities', 'Entertainment', 'Others']\nsizes = [37.5, 29.2, 16.7, 10.0, 6.7]\ncolors = ['blue', 'red', 'green', 'yellow', 'purple']\n\n# Create a pie chart with the specified data and colors\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Expenses - Company vs. Project')\n\n# Display the pie chart\nplt.show()"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\nlabels = ['Model', 'Optimizer', 'Gradient']\nsizes = [31.4, 19.9, 33.0]\ncolors = ['orange', 'blue', 'green']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\naxs[0].pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\naxs[0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nlabels = ['Model', 'Optimizer', 'Gradient']\nsizes = [54.8, 28.4, 6.3]\ncolors = ['orange', 'blue', 'green']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\naxs[1].pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\naxs[1].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 8.0))\n\n# Create a pie chart with the data provided\nax.pie([12.6, 15.9, 23.9], colors=['orange', 'gray', 'yellow'], labels=['Model', 'Optimizer', 'Gradient+Activations+Other'], autopct='%1.1f%%')\n\n# Set the title of the plot\nax.set_title('Full Finetuning')\n\nplt.show()"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Data to plot\nlabels = 'Fruits', 'Grains', 'Vegetables', 'Proteins'\nsizes = [25, 10, 35, 20]\ncolors = ['red', 'orange', 'green', 'blue']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Plot\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 12.5, 37.5]\ncolors = ['orange', 'blue', 'green']\n\n# Create a pie chart with the specified data and colors\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title of the pie chart\nplt.title('Market Share by Sector - External vs. Internal')\n\n# Display the pie chart\nplt.show()"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Logs', 'Hogs', 'Frogs']\nsizes = [20, 40, 30]\ncolors = ['red', 'blue', 'green']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Plot the pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "import matplotlib.pyplot as plt\n\ncolors = ['blue', 'orange', 'green', 'red']\nexplode = (0.1, 0, 0, 0)\nlabels = [\"David\", \"John\", \"Marry\", \"Peter\"]\nsizes = [11, 29, 20, 40]\n\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['France', 'Germany', 'Italy', 'UK']\nsizes = [18, 12, 28, 42]\ncolors = ['orange', 'blue', 'red', 'green']\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title of the pie chart\nplt.title('Countries in Europe')\n\n# Display the pie chart\nplt.show()"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['26.2%', '21.4%', '19.0%', '14.3%', '13.3%', '5.7%']\nsizes = [26.2, 21.4, 19.0, 14.3, 13.3, 5.7]\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple']\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nplt.title('Slice of a pie chart')\n\n# Display the pie chart\nplt.show()"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Social']\nsizes = [12.4, 17.2, 24.7, 10.3]\ncolors = ['blue', 'green', 'lightblue', 'orange']\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nplt.title('Pie Chart of Customer Satisfaction')\n\n# Display the pie chart\nplt.show()"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn', 'YouTube']\nsizes = [25, 35, 10, 10, 20]\ncolors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'lavender']\n\n# Create a pie chart with the specified data and colors\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nplt.title('Social Media Usage')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Display the pie chart\nplt.show()"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP', 'ACL']\nsizes = [25.4, 7.4, 12.2, 20.3, 34.7]\ncolors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'yellow']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Plot the pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for plotting\nlabels = ['Coal', 'Other', 'Solar', 'Wind', 'Hydro']\nsizes = [25, 10, 8.3, 30, 15]\ncolors = ['red', 'grey', 'yellow', 'green', 'blue']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Plot\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 11)\ny1 = [-4.00, -3.22, -2.44, -1.88, -1.50, -1.11, -0.78, -0.50, -0.25, 0.00]\ny2 = [1.88, 2.88, 3.38, 3.88, 4.00, 4.00, 4.00, 4.00, 4.00, 4.00]\n\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 4.0))\naxs[0, 0].plot(x, y1, 'r-', x, y2, 'b-')\naxs[0, 0].set_title('English')\n\ny1 = [-4.00, -3.22, -2.44, -1.88, -1.50, -1.11, -0.78, -0.50, -0.25, 0.00]\ny2 = [1.11, 1.11, 1.11, 1.11, 1.11, 1.11, 1.11, 1.11, 1.11, 1.11]\n\naxs[0, 1].plot(x, y1, 'r-', x, y2, 'b-')\naxs[0, 1].set_title('Chinese')\n\ny1 = [-4.00, -3.22, -2.44, -1.88, -1.50, -1.11, -0.78, -0.50, -0.25, 0.00]\ny2 = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\n\naxs[1, 0].plot(x, y1, 'r-', x, y2, 'b-')\naxs[1, 0].set_title('Korean')\n\ny1 = [-4.00, -3.22, -2.44, -1.88, -1.50, -1.11, -0.78, -0.50, -0.25, 0.00]\ny2 = [0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78]\n\naxs[1, 1].plot(x, y1, 'r-', x, y2, 'b-')\naxs[1, 1].set_title('Japanese')\n\nplt.show()\nThe English language has a negative bias of -4.00. The Chinese language has a positive bias of 1.11. The Korean language has a positive bias of 0.25. The Japanese language has a positive bias of 0.78."}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Create a bar chart\nax.bar(['English', 'French', 'German'], [7, 8, 9], color='blue')\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis limits\nax.set_xlim(0, 3)\n\n# Set the tick labels\nax.set_xticks([0.5, 1.5, 2.5])\nax.set_xticklabels(['English', 'French', 'German'])\n\n# Set the title\nax.set_title('Language Scores')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis label\nax.set_xlabel('Language')\n\nplt.show()\nThe English language has a score of 7. The French language has a score of 8. The German language has a score of 9."}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111)\n\nx = np.linspace(0, 5, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\nax.plot(x, y1, 'r-', label='True Field')\nax.plot(x, y2, 'b-', label='Train Sample')\nax.plot(x, y3, 'g-', label='Test Sample')\n\nax.set_xlabel('X1')\nax.set_ylabel('X2')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the x and y limits of the plot\nax.set_xlim(-1.0, 1.0)\nax.set_ylim(-1.0, 1.0)\n\n# Set the tick labels for the x and y axes\nax.set_xticks(np.arange(-1.0, 1.1, 0.25))\nax.set_yticks(np.arange(-1.0, 1.1, 0.25))\n\n# Set the tick label format\nax.ticklabel_format(useOffset=False)\n\n# Set the tick label size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label color\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the tick label rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', which='major', labelstretch='normal')\n\n# Set the tick label font slant\nax.tick_params(axis='both', which='major', labelslant='normal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', which='major', labelvariant='normal')\n\n# Set"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.2], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.2, -1.3], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.2, -1.3, -1.4], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-0.7, -0.8, -0.9, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-0.8, -0.9, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-0.9, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9], 'y-')\nax.plot([-2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0], [-1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -2.0], 'y-')\nplt.show()"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['VQA', 'SQA-I', 'TextVQA', 'MM-Vet']\nsizes = [79.9, 86.8, 78.2, 59.1]\ncolors = ['red', 'blue', 'orange', 'green']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.set_title('XNLI (speed-up ratio: 4)')\nax.set_xlabel('es')\nax.set_ylabel('en')\n\n# Create a list of colors for each bar\ncolors = ['red', 'green', 'blue']\n\n# Create a list of labels for each bar\nlabels = ['fr', 'hi', 'ru', 'th', 'tr', 'ur', 'vi', 'sw', 'bg', 'ar', 'zh']\n\n# Create a list of values for each bar\nvalues = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220]\n\n# Create a list of angles for each bar\nangles = np.linspace(0, 2*np.pi, len(labels), endpoint=False).tolist()\n\n# Add a '0' at the end of the list to close the circle\nangles += angles[:1]\nvalues += values[:1]\n\n# Plot the bars\nax.plot(angles, values, 'o-', linewidth=2, markersize=10)\n\n# Set the color of each bar\nfor i, label in enumerate(labels):\n    ax.fill(angles[i:i+2], values[i:i+2], colors[i], alpha=0.25)\n\n# Set the tick labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\n\nplt.show()"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Define the data\nlabels = ['Understanding', 'Questioning', 'Reasoning', 'Paraphrasing', 'Reflection']\nsizes = [25, 10, 15, 8, 12]\ncolors = ['green', 'blue', 'green', 'blue', 'green']\n\n# Plot the pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the plot to be equal\nax.axis('equal')\n\nplt.show()"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Draw a circle with radius 1 centered at (0,0)\ncircle = plt.Circle((0,0), 1, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.5 centered at (0,0)\ncircle = plt.Circle((0,0), 0.5, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.25 centered at (0,0)\ncircle = plt.Circle((0,0), 0.25, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.03125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.03125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.015625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.015625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0078125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0078125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00390625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00390625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.001953125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.001953125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0009765625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0009765625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00048828125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00048828125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000244140625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000244140625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0001220703125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0001220703125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00006103515625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00006103515625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000030517578125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000030517578125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000152587890625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000152587890625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000762939453125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000762939453125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000003814697265625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000003814697265625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000019073486328125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000019073486328125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000095367431640625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000095367431640625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000000476837158203125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000000476837158203125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000002384185791015625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000002384185791015625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000011920928955078125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000011920928955078125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000000059604644775390625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000000059604644775390625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000000298023223876953125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000000298023223876953125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000001490116119384765625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000001490116119384765625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000000007450580596923828125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000000007450580596923828125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000000037252902984619140625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000000037252902984619140625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000000186264514923095703125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000000186264514923095703125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000000000931322574615478515625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000000000931322574615478515625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000000004656612873077392578125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000000004656612873077392578125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000000023283064365386962890625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000000023283064365386962890625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000000000116415321826934814453125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000000000116415321826934814453125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000000000582076609134674072265625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000000000582076609134674072265625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000000002910383045673370361328125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000000002910383045673370361328125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000000000014551915228366851806640625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000000000014551915228366851806640625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000000000072759576141834259033203125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000000000072759576141834259033203125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000000000363797880709171295166015625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000000000363797880709171295166015625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000000000001818989403545856475830078125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000000000001818989403545856475830078125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000000000009094947017729282379150390625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000000000009094947017729282379150390625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000000000045474735088646411895751953125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000000000045474735088646411895751953125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000000000000227373675443232059478759765625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000000000000227373675443232059478759765625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000000000001136868377216160297393798828125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.0000000000001136868377216160297393798828125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.00000000000005684341886080801486968994140625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000000000005684341886080801486968994140625, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.000000000000028421709430404007434844970703125 centered at (0,0)\ncircle = plt.Circle((0,0), 0.000000000000028421709430404007434844970703125, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0.0000000000000142108547152020037174224853515625 centered at (0,0)\ncircle = plt.Circle((0,0), 0.00000000000001421085471520200371"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a list of labels for each category\nlabels = ['video game', 'programming world', 'mythology', 'general', 'movie', 'city', 'country', 'special place', 'landscape', 'novel', 'programming world', 'universe', 'fairytale', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world', 'programming world',"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for each role\nreasoning = [25, 30, 15, 20]\nwriting = [30, 25, 20, 25]\ncoding = [15, 20, 25, 30]\nstem = [20, 25, 30, 15]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a radar chart\nax.plot(reasoning, label='Reasoning')\nax.plot(writing, label='Writing')\nax.plot(coding, label='Coding')\nax.plot(stem, label='STEM')\n\n# Set the labels for each role\nax.set_xticks(range(len(reasoning)))\nax.set_xticklabels(['GPT-J-6B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E', 'Humanities'])\n\n# Add a legend to the plot\nax.legend()\n\nplt.show()\nThe matplotlib code has been generated successfully."}
{"file": "dataset/ori_500/radar_15.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['Nutrition', 'Material', 'Storage', 'Allergen', 'Pollution', 'Recall', 'Compliance']\nnestle = [25, 15, 30, 10, 5, 10, 10]\nmuji = [10, 20, 20, 15, 10, 25, 15]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(nestle, labels=labels, colors=['red'], startangle=90)\nax.pie(muji, labels=labels, colors=['green'], startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nlabels = ['Apple', 'Samsung', 'Huawei']\nsizes = [85.8, 86.4, 80.9]\ncolors = ['orange', 'blue', 'green']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 8.0))\naxs[0].pie([1,2,3,4,5], labels=[\"Injection\", \"Blow Molding\", \"Compression\", \"Rotational\", \"Extrusion\"], autopct='%1.1f%%')\naxs[1].pie([1,2,3,4,5], labels=[\"Injection\", \"Blow Molding\", \"Compression\", \"Rotational\", \"Extrusion\"], autopct='%1.1f%%')\naxs[2].pie([1,2,3,4,5], labels=[\"Injection\", \"Blow Molding\", \"Compression\", \"Rotational\", \"Extrusion\"], autopct='%1.1f%%')\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for each category\ndata = {\n    'Food Quality': [0.9, 0.7, 0.6],\n    'Shows': [0.8, 0.7, 0.6],\n    'Staff': [0.9, 0.8, 0.7],\n    'Cleanliness': [0.9, 0.8, 0.7],\n    'Wait Times': [0.8, 0.7, 0.6],\n    'Ticket Price': [1.0, 0.8, 0.6],\n    'Parking': [0.8, 0.7, 0.6],\n    'Souvenirs': [0.8, 0.7, 0.6]\n}\n\n# Define the labels for each category\nlabels = ['Disney', 'Universal Studios']\n\n# Define the colors for each category\ncolors = ['orange', 'purple']\n\n# Create a list of categories\ncategories = list(data.keys())\n\n# Create a list of values for each category\nvalues = [data[category] for category in categories]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(categories))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(categories)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range(len(value))]\n\n# Create a list of colors for each category\ncolors = [colors[i % len(colors)] for i in range(len(values))]\n\n# Create a list of labels for each category\nlabels = [f'{category} {i+1}' for i in range(len(values)) for category in categories]\n\n# Create a list of values for each category\nvalues = [value[i] for value in values for i in range"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nlabels = ['Chanel', 'Dior', 'Gucci']\nsizes = [15, 30, 45]\ncolors = ['yellow', 'lightgrey', 'green']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "The percentage of people who prefer StableLM is 66.4%. The percentage of people who prefer TinyLaMA is 59.3%. The percentage of people who prefer Phi-2 is 85.8%. The percentage of people who prefer TextVQA is 86.4%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer VQA is 50.8%. The percentage of people who prefer LLaVA-W is 66.1%. The percentage of people who prefer SQA-I is 85.8%. The percentage of people who prefer GQA is 85.8%. The percentage of people who prefer QVA is 50.8%. The percentage of people who prefer WQA is 50.8%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is 76.1%. The percentage of people who prefer POPE is "}
{"file": "dataset/ori_500/radar_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['Versatility', 'Longevity']\nchanel = [1, 9]\ndior = [5, 7]\ngucci = [3, 9]\n\n# Creating the figure and axes\nfig, axs = plt.subplots(1, 3, figsize=(18.0, 6.0))\n\n# Plotting the first subplot\naxs[0].bar(labels, chanel, color='blue')\naxs[0].set_title('Chanel')\naxs[0].set_xlabel('Perfume Brand')\naxs[0].set_ylabel('Value')\n\n# Plotting the second subplot\naxs[1].bar(labels, dior, color='green')\naxs[1].set_title('Dior')\naxs[1].set_xlabel('Perfume Brand')\naxs[1].set_ylabel('Value')\n\n# Plotting the third subplot\naxs[2].bar(labels, gucci, color='red')\naxs[2].set_title('Gucci')\naxs[2].set_xlabel('Perfume Brand')\naxs[2].set_ylabel('Value')\n\n# Adding a legend\nfig.legend(['Chanel', 'Dior', 'Gucci'], loc='upper right')\n\nplt.show()"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Loadings PC1', fontsize=14)\nax.set_xlabel('Loadings PC2', fontsize=14)\n\n# Create a list of angles for the plot\nangles = np.linspace(0, 2*np.pi, 7, endpoint=False).tolist()\nangles += angles[:1] # To close the loop\n\n# Create a list of values for the plot\nvalues = [0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2]\nvalues += values[:1] # To close the loop\n\n# Create a list of colors for the plot\ncolors = ['black', 'red']\n\n# Create a list of labels for the plot\nlabels = ['Loadings PC1', 'Loadings PC2']\n\n# Create a list of sizes for the plot\nsizes = [0.4, 0.2]\n\n# Create a list of positions for the plot\npositions = [0.5, 0.5]\n\n# Create a list of radii for the plot\nradii = [0.5, 0.5]\n\n# Create a list of widths for the plot\nwidths = [0.1, 0.1]\n\n# Create a list of edgecolors for the plot\nedgecolors = ['black', 'black']\n\n# Create a list of hatch patterns for the plot\nhatch = ['/', '\\\\']\n\n# Create a list of alpha values for the plot\nalpha = [0.5, 0.5]\n\n# Create a list of zorder values for the plot\nzorder = [1, 2]\n\n# Create a list of clip_on values for the plot\nclip_on = [True, True]\n\n# Create a list of transform values for the plot\ntransform = [None, None]\n\n# Create a list of path_effects values for the plot\npath_effects = [None, None]\n\n# Create a list of capstyle values for the plot\ncapstyle = ['butt', 'butt']\n\n# Create a list of joinstyle values for the plot\njoinstyle = ['miter', 'miter']\n\n# Create a list of solid_capstyle values for the plot\nsolid_capstyle = ['butt', 'butt']\n\n# Create a list of solid_joinstyle values for the plot\nsolid_joinstyle = ['miter', 'miter']\n\n# Create a list of linestyle values for the plot\nlinestyle = ['-', '-']\n\n# Create a list of linewidth values for the plot\nlinewidth = [1, 1]\n\n# Create a list of antialiased values for the plot\nantialiased = [True, True]\n\n# Create a list of visible values for the plot\nvisible = [True, True]\n\n# Create a list of pickradius values for the plot\npickradius = [5, 5]\n\n# Create a list of figure values for the plot\nfigure = [fig, fig]\n\n# Create a list of axes values for the plot\naxes = [ax, ax]\n\n# Create a list of data values for the plot\ndata = [np.array(values), np.array(sizes)]\n\n# Create a list of xdata values for the plot\nxdata = [np.array(values), np.array(sizes)]\n\n# Create a list of ydata values for the plot\nydata = [np.array(values), np.array(sizes)]\n\n# Create a list of xerr values for the plot\nxerr = [None, None]\n\n# Create a list of yerr values for the plot\nyerr = [None, None]\n\n# Create a list of xerr_kw values for the plot\nxerr_kw = [None, None]\n\n# Create a list of yerr_kw values for the plot\nyerr_kw = [None, None]\n\n# Create a list of ecolor values for the plot\necolor = [None, None]\n\n# Create a list of elinewidth values for the plot\nelinewidth = [None, None]\n\n# Create a list of capsize values for the plot\ncapsize = [None, None]\n\n# Create a list of marker values for the plot\nmarker = [None, None]\n\n# Create a list of markersize values for the plot\nmarkersize = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for the plot\nmarkerfacecolor = [None, None]\n\n# Create a list of markerfacecoloralt values for the plot\nmarkerfacecoloralt = [None, None]\n\n# Create a list of markeredgewidth values for the plot\nmarkeredgewidth = [None, None]\n\n# Create a list of markeredgecolor values for the plot\nmarkeredgecolor = [None, None]\n\n# Create a list of markerfacecolor values for"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 6.0))\n\n# PGM (\u03b5 = \u221e)\naxs[0].bar(['Fidelity(D-train)', 'Fidelity(D-test)'], [1, 2], color='green')\naxs[0].set_title('PGM (\u03b5 = \u221e)')\naxs[0].set_ylabel('Privacy')\n\n# PrivSyn (\u03b5 = \u221e)\naxs[1].bar(['Fidelity(D-train)', 'Fidelity(D-test)'], [1, 2], color='purple')\naxs[1].set_title('PrivSyn (\u03b5 = \u221e)')\naxs[1].set_ylabel('Privacy')\n\n# TVAE\naxs[2].bar(['Fidelity(D-train)', 'Fidelity(D-test)'], [1, 2], color='blue')\naxs[2].set_title('TVAE')\naxs[2].set_ylabel('Privacy')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# The data to plot\nlabels = ['Heterocycle formation', 'C-C bond formation', 'Acylation and related processes', 'Heteroatom alkylations and arylation', 'Functional group addition, FGA', 'Functional group interconversion, FGI']\nsizes = [40, 70, 80, 90, 60, 50]\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']\nexplode = (0.1, 0, 0, 0, 0, 0)  # explode 1st slice\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.array}
{"file": "dataset/ori_500/radar_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a list of values for each category\nrose = [12, 15, 13, 17, 14]\ncandlestick = [16, 19, 17, 20, 18]\nline_num = [10, 12, 11, 13, 14]\nheatmap = [14, 16, 15, 17, 16]\ntreemap = [18, 20, 19, 21, 20]\nbox = [12, 14, 13, 15, 14]\n\n# Create a list of categories\ncategories = ['rose', 'candlestick', 'line_num', 'heatmap', 'treemap', 'box']\n\n# Create a list of colors\ncolors = ['red', 'blue', 'orange', 'green', 'purple', 'pink']\n\n# Create a list of labels\nlabels = ['1', '2', '3', '4', '5']\n\n# Create a list of values for each label\nvalues = [1, 2, 3, 4, 5]\n\n# Create a list of values for each category\nvalues = [rose, candlestick, line_num, heatmap, treemap, box]\n\n# Create a list of colors for each category\ncolors = ['red', 'blue', 'orange', 'green', 'purple', 'pink']\n\n# Create a list of labels for each category\nlabels = ['rose', 'candlestick', 'line_num', 'heatmap', 'treemap', 'box']\n\n# Create a list of values for each label\nvalues = [1, 2, 3, 4, 5]\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(values, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.show()"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.set_title('Imputation')\n\n# Define the data for each category\nanomaly_detection = [10, 20, 30]\nlong_horizon_forecasting = [40, 50, 60]\nshort_horizon_forecasting = [70, 80, 90]\n\n# Define the colors for each category\ncolors = ['red', 'blue', 'green']\n\n# Create a pie chart for each category\nax.pie(anomaly_detection, colors=colors, startangle=90, radius=1.5)\nax.pie(long_horizon_forecasting, colors=colors, startangle=90, radius=1.0)\nax.pie(short_horizon_forecasting, colors=colors, startangle=90, radius=0.5)\n\n# Set the labels for each category\nax.legend(['Anomaly Detection', 'Long-horizon Forecasting', 'Short-horizon Forecasting'], loc='upper right')\n\nplt.show()"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data for SQA. The red bar represents the data for POPE. The blue bar represents the data"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 4, figsize=(12.0, 4.0))\naxs[0].plot([1, 2], [1, 2], 'b-')\naxs[0].set_title('Model-Basedness')\n\naxs[1].plot([1, 2], [1, 2], 'r-')\naxs[1].set_title('Meta-Cognition')\n\naxs[2].plot([1, 2], [1, 2], 'g-')\naxs[2].set_title('Risk Taking')\n\naxs[3].plot([1, 2], [1, 2], 'y-')\naxs[3].set_title('Simple Bandits')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1000, 2000, 3000])\ny = np.array([81, 83, 85])\n\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([10, 20, 30, 40, 50, 60])\ny = np.array([0.85, 0.80, 0.75, 0.65, 0.60, 0.55])\n\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [45, 40, 35, 30, 25]\ny = [51, 49, 47, 45, 43]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('EgoSchema VQA accuracy')\nax.set_xlabel('Number of parameters')\nax.set_ylabel('EgoSchema VQA accuracy')\n\nplt.show()"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.arange(1.0, 5.1, 1.0)\ny1 = [0.04, 0.03, 0.02, 0.01]\ny2 = [0.07, 0.06, 0.05, 0.04]\ny3 = [0.08, 0.07, 0.06, 0.05]\n\n# Plot the data\nax.plot(x, y1, 'bo-', label='Single LSTMs')\nax.plot(x, y2, 'go-', label='Ensemble LSTMs')\nax.plot(x, y3, 'ro-', label='CAE Reconstructions')\n\n# Set the title and labels\nax.set_title('Average Relative Error, u')\nax.set_xlabel('Test Case Index')\nax.set_ylabel('Average Relative Error, u')\n\n# Add a legend\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data\nx = np.array([1, 2, 3, 4, 5])\ny_majority = np.array([0.8, 0.7, 0.9, 0.6, 0.5])\ny_minority = np.array([0.9, 0.8, 0.7, 0.6, 0.5])\n\n# Plot the data\nax.plot(x, y_majority, 'bo-', label='Majority')\nax.plot(x, y_minority, 'ro-', label='Minority')\n\n# Set the labels and title\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies for the ImageNet Classes (ClarifAI)')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Add a legend\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 10, 1)\ny = np.random.randint(60, 70, 10)\n\nplt.figure(figsize=(10.0, 4.0))\nplt.plot(x, y, 'ro')\nplt.show()"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points\nx = np.array([15, 20, 25, 30, 35, 40, 45, 50])\ny = np.array([37, 29, 21, 15, 10, 5, 2, 1])\n\n# Plotting the data\nplt.plot(x, y, 'ro-')\n\n# Adding labels and title\nplt.xlabel('Efficiency (%)')\nplt.ylabel('Carbon Reduction (%)')\nplt.title('Energy Sources')\n\n# Setting the figure size\nplt.figure(figsize=(8.0, 4.0))\n\nplt.show()"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create a list of colors\ncolors = ['blue', 'green', 'red']\n\n# Create a list of labels\nlabels = ['A', 'B', 'C']\n\n# Create a list of values\nvalues = [15, 20, 25]\n\n# Create a bar chart\nax.bar(labels, values, color=colors)\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2, 4, 6, 8, 10, 12, 14, 16])\ny = np.array([95, 97, 98, 99, 100, 101, 102, 103])\n\nplt.plot(x, y)\nplt.show()"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.plot([2, 4, 6, 8, 10, 12, 14, 16], [95, 97, 98, 99, 100, 101, 102, 103], 'o-')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nplt.show()"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for each energy type\nx = [175, 200, 225, 250, 275, 300]\ny_solar = [190, 180, 170, 160, 150, 140]\ny_wind = [180, 170, 160, 150, 140, 130]\ny_hydro = [170, 160, 150, 140, 130, 120]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data points for each energy type\nax.plot(x, y_solar, 'ro-', label='Solar Energy')\nax.plot(x, y_wind, 'go-', label='Wind Energy')\nax.plot(x, y_hydro, 'bo-', label='Hydropower')\n\n# Set the title of the plot\nax.set_title('Energy Production Trends')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy output (TWh)')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a scatter plot with the data points\nax.scatter([10, 20, 30, 40, 50, 60, 70, 80, 90], [20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Create a colorbar\ncbar = fig.colorbar(ax.collections[0])\n\n# Set the colorbar label\ncbar.set_label('Colorbar')\n\nplt.show()"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\ny2 = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\n\nplt.figure(figsize=(10.0, 5.0))\nplt.plot(x, y1, 'o-', label='LibriCSS WER')\nplt.plot(x, y2, 'o-', label='AMi WER')\nplt.xlabel('Number of Microphones')\nplt.ylabel('WER (%)')\nplt.title('LibriCSS vs Additional Data 1')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Create a list of models\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hf-falcon-40b', 'text-bison@002', 'claudio-2', 'claudio-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\n\n# Create a list of values\nvalues = [1.98, 1.95, 1.93, 1.92, 1.91, 1.90, 1.89, 1.88, 1.87]\n\n# Create a list of colors\ncolors = ['blue', 'orange', 'yellow', 'green', 'red', 'purple', 'brown', 'pink', 'gray']\n\n# Create a bar chart\nax.bar(models, values, color=colors)\n\n# Set the title of the chart\nax.set_title('Performance Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\nplt.show()"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a bar chart\nax.bar([1, 2, 3, 4], [1.5, 1.2, 1.1, 1.3], color='blue')\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Create a second subplot\nax2 = fig.add_subplot(2, 2, 2)\n\n# Create a scatter plot\nax2.scatter([1, 2, 3, 4], [1.7, 1.6, 1.5, 1.4], color='orange')\n\n# Set the title of the plot\nax2.set_title('Meta-Cognition')\n\n# Set the x-axis label\nax2.set_xlabel('Models')\n\n# Set the y-axis label\nax2.set_ylabel('Score')\n\n# Create a third subplot\nax3 = fig.add_subplot(2, 2, 3)\n\n# Create a line plot\nax3.plot([1, 2, 3, 4], [1.8, 1.7, 1.6, 1.5], color='green')\n\n# Set the title of the plot\nax3.set_title('Exploration')\n\n# Set the x-axis label\nax3.set_xlabel('Models')\n\n# Set the y-axis label\nax3.set_ylabel('Score')\n\n# Create a fourth subplot\nax4 = fig.add_subplot(2, 2, 4)\n\n# Create a histogram\nax4.hist([1.9, 1.8, 1.7, 1.6], bins=4, color='red')\n\n# Set the title of the plot\nax4.set_title('Risk Taking')\n\n# Set the x-axis label\nax4.set_xlabel('Score')\n\n# Set the y-axis label\nax4.set_ylabel('Frequency')\n\nplt.show()"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating a scatter plot\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\nax.scatter([70, 80, 90], [30, 25, 20], color='red')\nax.set_xlabel('X Values')\nax.set_ylabel('Y Values')\n\n# Creating a scatter plot\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\nax.scatter([70, 80, 90], [30, 25, 20], color='red')\nax.set_xlabel('X Values')\nax.set_ylabel('Y Values')\n\n# Creating a scatter plot\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\nax.scatter([70, 80, 90], [30, 25, 20], color='red')\nax.set_xlabel('X Values')\nax.set_ylabel('Y Values')"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\nx = np.arange(70, 87)\ny1 = np.array([49.2, 48.6, 48.1, 47.7, 47.4, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1, 47.1,"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\ndef plot_data():\n    fig, ax = plt.subplots(figsize=(6.0, 6.0))\n    ax.plot([1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4], [75, 65, 30, 20, 10, 5, 2], 'ro-')\n    ax.set_xlabel('Diversity')\n    ax.set_ylabel('Accuracy (%)')\n    ax.set_title('Token cost($)')\n    ax.legend(['DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge'], loc='best')\n    plt.show()\n    \nplot_data()"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure with a specific size\nfig = plt.figure(figsize=(5.0, 5.0))\n\n# Add subplots to the figure\nax1 = fig.add_subplot(2, 2, 1)\nax2 = fig.add_subplot(2, 2, 2)\nax3 = fig.add_subplot(2, 2, 3)\nax4 = fig.add_subplot(2, 2, 4)\n\n# Set the color of each subplot\nax1.set_facecolor('green')\nax2.set_facecolor('yellow')\nax3.set_facecolor('blue')\nax4.set_facecolor('purple')\n\n# Set the title of each subplot\nax1.set_title('Subplot 1')\nax2.set_title('Subplot 2')\nax3.set_title('Subplot 3')\nax4.set_title('Subplot 4')\n\n# Display the figure\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data points for each line\nx = np.array([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2])\ny_siren = np.array([750, 700, 650, 600, 550, 500, 450, 400])\ny_wire = np.array([730, 680, 630, 580, 530, 480, 430, 380])\ny_ffn = np.array([720, 670, 620, 570, 520, 470, 420, 370])\ny_sz3 = np.array([710, 660, 610, 560, 510, 460, 410, 360])\ny_nncomp = np.array([700, 650, 600, 550, 500, 450, 400, 350])\ny_ours = np.array([690, 640, 590, 540, 490, 440, 390, 340])\n\n# Plot the data points\nax.plot(x, y_siren, 'bo-', label='SIREN')\nax.plot(x, y_wire, 'go-', label='WIRE')\nax.plot(x, y_ffn, 'ro-', label='FFN')\nax.plot(x, y_sz3, 'co-', label='SZ3')\nax.plot(x, y_nncomp, 'mo-', label='NNComp')\nax.plot(x, y_ours, 'yo-', label='Ours')\n\n# Set the title and labels\nax.set_title('Scatter Plot of WRMSE vs BPP')\nax.set_xlabel('Bit per pixel (BPP)')\nax.set_ylabel('WRMSE')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(1)\nx = np.random.rand(100)\ny = np.random.rand(100)\n\nplt.figure(figsize=(8.0, 8.0))\nplt.scatter(x, y, c='blue')\nplt.show()"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot([10, 20, 30], [15, 18, 25], 'ro')\nax.set_xlabel('Number of parameters (M)')\nax.set_ylabel('NMAE on QM9')\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a scatter plot with the data points\nax.scatter(np.random.rand(100), np.random.rand(100), color='blue', label='ar')\nax.scatter(np.random.rand(100), np.random.rand(100), color='pink', label='de')\nax.scatter(np.random.rand(100), np.random.rand(100), color='yellow', label='fr')\nax.scatter(np.random.rand(100), np.random.rand(100), color='green', label='he')\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the labels for the x and y axes\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\nax.plot([0.9], [1.0], 'ro')\nax.plot([0.8], [0.9], 'go')\nax.plot([0.6], [0.7], 'bo')\nax.set_xlabel('KCA Similarity')\nax.set_ylabel('MSE')\nplt.show()"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nlabels = ['mathworks.com', 'gmatclub.com', 'mathhelpboards.com', 'mathoverflow.net', 'stackexchange.com']\nsizes = [4.91, 6.26, 6.15, 10.91, 30.6]\ncolors = ['red', 'orange', 'yellow', 'blue', 'green']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "A graph has been created using matplotlib. The graph displays the percentage of different programming languages used in a project. The graph has a title \"Programming Language Usage\". The graph has a legend with the following labels: 'Java', 'JavaScript', 'Python', 'C++'. The graph has a color map that is a gradient of red and orange. The graph has a grid. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is located at the lower right corner of the graph. The graph has a title that is centered. The graph has a legend that is"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nlabels = 'Adidas', 'Nike', 'Reebok', 'Puma'\nsizes = [13.42, 30.6, 10.91, 14.21]\ncolors = ['lightblue', 'lightgreen', 'orange', 'lightgrey']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Red', 'Blue', 'Green']\nsizes = [50, 15, 20]\ncolors = ['#FFA07A', '#ADD8E6', '#90EE90']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the aspect ratio of the plot to be equal\nax.axis('equal')\n\n# Display the plot\nplt.show()\nThis code will create a pie chart with three sections: red, blue, and green. The red section represents 50% of the total, the blue section represents 15%, and the green section represents 20%. The color of each section corresponds to its name. The pie chart will be displayed with a square aspect ratio."}
{"file": "dataset/ori_500/tree_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a list of colors\ncolors = ['yellow', 'purple', 'blue', 'green', 'pink']\n\n# Create a list of labels\nlabels = ['European', 'Australian', 'South American', 'Asian', 'North American']\n\n# Create a list of sizes\nsizes = [15, 18, 10, 25, 20]\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title of the chart\nax.set_title('Pie Chart of Population Distribution')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Create a list of data points\ndata = [2.3, 2.1, 2.4, 2.5, 2.6]\n\n# Create a list of labels for each data point\nlabels = ['Llama2', 'Llama2 (In-Chat)', 'Llama2', 'Llama2', 'Llama2']\n\n# Create a list of colors for each data point\ncolors = ['blue', 'orange', 'blue', 'orange', 'blue']\n\n# Create a bar chart with the specified data, labels, and colors\nax.bar(labels, data, color=colors)\n\n# Set the title of the plot\nax.set_title('Number of Examples')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Number of examples')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.set_title('Comparison of Scores with and without Memory')\n\n# Define the data\nefficiency = [0.7, 0.8, 0.9]\ncomfort = [0.5, 0.6, 0.7]\nsafety = [0.3, 0.4, 0.5]\n\n# Define the colors\ncolors = ['blue', 'orange']\n\n# Create the bar chart\nax.bar(range(len(efficiency)), efficiency, color=colors[0], label='Efficiency')\nax.bar(range(len(comfort)), comfort, bottom=efficiency, color=colors[1], label='Comfort')\nax.bar(range(len(safety)), safety, bottom=[sum(x) for x in zip(efficiency, comfort)], color=colors[0], label='Safety')\n\n# Add labels and title\nax.set_xlabel('Memory')\nax.set_ylabel('Score')\nax.set_xticks(range(len(efficiency)))\nax.set_xticklabels(['Without Memory', 'With Memory'])\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the bar chart\nefficiency = [0.8, 0.7, 0.9]\ncomfort = [0.5, 0.4, 0.6]\nsafety = [0.3, 0.2, 0.1]\n\n# Create a bar chart with the specified data\nax.bar(range(len(efficiency)), efficiency, color='red', label='Efficiency')\nax.bar(range(len(comfort)), comfort, color='blue', label='Comfort')\nax.bar(range(len(safety)), safety, color='green', label='Safety')\n\n# Set the labels for the x-axis\nax.set_xticks(range(len(efficiency)))\nax.set_xticklabels(['Without Memory', 'With Memory'])\n\n# Set the title of the plot\nax.set_title('Memory Impact on User Experience')\n\n# Set the labels for the y-axis\nax.set_ylabel('Score')\n\n# Add a legend to the plot\nax.legend()\n\nplt.show()\nThis code will create a bar chart with three bars, each representing a different aspect of user experience. The first bar represents the efficiency of the system without memory, while the second bar represents the comfort of the system with memory. The third bar represents the safety of the system with memory. The x-axis labels are \"Without Memory\" and \"With Memory,\" and the y-axis label is \"Score.\" The title of the plot is \"Memory Impact on User Experience.\""}
{"file": "dataset/ori_500/violin_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(10)\nx = np.arange(1, 6)\ny = np.random.rand(5, 3)\n\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.plot(x, y[:,0], 'o-', color='green')\nax.plot(x, y[:,1], 'o-', color='red')\nax.plot(x, y[:,2], 'o-', color='blue')\n\nplt.show()"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.bar([1,2,3], [0.8, 0.9, 0.7], color=['red', 'blue', 'purple'])\nplt.show()"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a list of values for the x-axis\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create a list of values for the y-axis\ny = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create a scatter plot with the specified color and marker size\nax.scatter(x, y, c='blue', s=100)\n\n# Set the title of the plot\nax.set_title('Teacher-Style')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(['Vanilla', 'CoT'], [85, 75], color=['pink', 'blue'])\nplt.show()"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a bar chart with the data provided\nax.bar([2, 4, 6, 8, 10], [163, 97, 176, 159, 97], color='blue')\nax.bar([2, 4, 6, 8, 10], [201, 95, 176, 159, 97], bottom=[163, 97, 176, 159, 97], color='orange')\n\n# Set the title of the plot\nax.set_title('Percent Decrease in Test MSE vs. FLAM-GL')\n\n# Set the x-axis label\nax.set_xlabel('Number of Features')\n\n# Set the y-axis label\nax.set_ylabel('Percent Decrease')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Create a bar chart with the data provided\nax.bar([0.88, 0.85, 0.79], [0.82, 0.84, 0.87], color='blue')\nax.bar([0.88, 0.85, 0.79], [0.83, 0.85, 0.88], color='orange')\nax.bar([0.88, 0.85, 0.79], [0.84, 0.86, 0.89], color='green')\n\n# Set the title of the plot\nax.set_title('Decimated Sampling Rate')\n\n# Set the x-axis label\nax.set_xlabel('Frequency (Hz)')\n\n# Set the y-axis label\nax.set_ylabel('Decimated Sampling Rate')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Create a bar chart with the data\nax.bar(range(1, 5), [95, 90, 85, 80], color='blue')\n\n# Set the title of the plot\nax.set_title('Distribution of Grades: Class 1')\n\n# Set the x-axis label\nax.set_xlabel('Class')\n\n# Set the y-axis label\nax.set_ylabel('Grades')\n\nplt.show()"}
