{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Predicted vs Actual values for a regression model\nx = np.linspace(0, 10, 50)\ny_true = np.sin(x) + np.random.normal(0, 0.2, x.shape)\ny_pred = np.sin(x) + np.random.normal(0.1, 0.1, x.shape)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the true values and predictions\nax.plot(x, y_true, label='Targets', color='orange', marker='o', linestyle='-', linewidth=2)\nax.plot(x, y_pred, label='Predictions', color='blue', marker='s', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Time (s)', fontsize=12)\nax.set_ylabel('Amplitude', fontsize=12)\nax.set_title('Comparison of Targets and Predictions', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of objects with different dimensions\nheights = [1.2, 1.5, 1.8, 2.0, 2.2, 2.5, 2.7, 3.0, 3.2, 3.5]\nwidths = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ncounts = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Scatter plot with enhanced aesthetics\nscatter = ax.scatter(heights, widths, s=counts * 100, c='red', alpha=0.7, edgecolor='black')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Height', fontsize=12)\nax.set_ylabel('Width', fontsize=12)\nax.set_title('Object Dimensions and Counts', fontsize=14)\n\n# Add a color bar to indicate the count\ncbar = plt.colorbar(scatter)\ncbar.set_label('Count', fontsize=12)\n\n# Customize tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create data for a sphere\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = np.outer(np.cos(u), np.sin(v))\ny = np.outer(np.sin(u), np.sin(v))\nz = np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with a colormap\nsurface = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surface, ax=ax, shrink=0.5, aspect=5)\ncbar.set_label('Color scale')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_zlabel('Z-axis')\nax.set_title('3D Sphere Visualization')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(-4, 4, 10)\ny = np.linspace(-2, 2, 10)\nX, Y = np.meshgrid(x, y)\nZ = X**2 + Y**2\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Add a 3D subplot\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis', linewidth=0, antialiased=False)\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels for axes\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Set title\nax.set_title('3D Surface Plot of Volume vs Temperature and Pressure')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nyears = np.array([2010, 2012, 2014, 2016, 2018])\nprivate_schools = np.array([0.35, 0.45, 0.5, 0.55, 0.6])\npublic_schools = np.array([0.2, 0.25, 0.3, 0.35, 0.4])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different colors and styles\nax.bar(years - 0.2, private_schools, width=0.4, color='orange', label='Private Schools')\nax.bar(years + 0.2, public_schools, width=0.4, color='blue', label='Public Schools')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Student to Teacher Ratio')\nax.set_title('Student to Teacher Ratio in Schools Over Years')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create data\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis', linewidth=0, antialiased=False)\n\n# Add color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\ncbar.set_label('Incidence Rate')\n\n# Set labels for axes\nax.set_xlabel('Age')\nax.set_ylabel('Vaccination Number')\nax.set_zlabel('Incidence Rate')\n\n# Set title of the plot\nax.set_title('Influence of Age and Vaccination on Incidence Rate')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the first plot\nyears = np.array([2010, 2012, 2014, 2016, 2018])\ninvestment = np.array([3.5, 4.2, 5.1, 6.0, 7.5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(years, investment, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Add labels and title\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Investment (Billion USD)', fontsize=12)\nax.set_title('Annual Investment in Technology Sector', fontsize=14, fontweight='bold')\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Enhance the tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the grid\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\n\n# Define the function f(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with two subplots side by side\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 7.0), subplot_kw={'projection': '3d'})\n\n# Plot the first subplot\nsurf1 = ax1.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\nax1.set_title('f(x)')\nax1.set_xlabel('X')\nax1.set_ylabel('Y')\nax1.set_zlabel('Z')\nfig.colorbar(surf1, ax=ax1, shrink=0.5, aspect=5)\n\n# Plot the second subplot\nsurf2 = ax2.contourf(x, y, z, levels=20, cmap='coolwarm')\nax2.set_title('solution')\nax2.set_xlabel('X')\nax2.set_ylabel('Y')\nfig.colorbar(surf2, ax=ax2, shrink=0.5, aspect=5)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create data\nx = np.linspace(0, 6, 50)\ny = np.linspace(0, 6, 50)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with a colormap\nsurface = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\n\n# Add color bar which maps values to colors\ncbar = fig.colorbar(surface, ax=ax, shrink=0.5, aspect=5)\ncbar.set_label('Accuracy (%)')\n\n# Set labels for axes\nax.set_xlabel('K')\nax.set_ylabel('T')\nax.set_zlabel('tau')\n\n# Set title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T = 6')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the data for the plots\nx = np.linspace(-100, 100, 200)\ny = np.linspace(-100, 100, 200)\nx, y = np.meshgrid(x, y)\nz1 = np.sin(np.sqrt(x**2 + y**2))\nz2 = np.cos(np.sqrt(x**2 + y**2))\nz3 = np.tan(np.sqrt(x**2 + y**2))\nz4 = np.exp(-(x**2 + y**2))\n\n# Create a new figure with a larger size\nfig = plt.figure(figsize=(15.0, 10.0))\n\n# Plot 1: Origin\nax1 = fig.add_subplot(2, 2, 1, projection='3d')\nsurf1 = ax1.plot_surface(x, y, z1, cmap='viridis', edgecolor='none')\nax1.set_title('Origin')\nax1.set_xlabel('m')\nax1.set_ylabel('n')\nax1.set_zlabel('Freedom')\nfig.colorbar(surf1, ax=ax1, shrink=0.5, aspect=5)\n\n# Plot 2: MG (ours)\nax2 = fig.add_subplot(2, 2, 2, projection='3d')\nsurf2 = ax2.plot_surface(x, y, z2, cmap='plasma', edgecolor='none')\nax2.set_title('MG (ours)')\nax2.set_xlabel('m')\nax2.set_ylabel('n')\nax2.set_zlabel('Freedom')\nfig.colorbar(surf2, ax=ax2, shrink=0.5, aspect=5)\n\n# Plot 3: Origin\nax3 = fig.add_subplot(2, 2, 3, projection='3d')\nsurf3 = ax3.plot_surface(x, y, z3, cmap='inferno', edgecolor='none')\nax3.set_title('Origin')\nax3.set_xlabel('m')\nax3.set_ylabel('n')\nax3.set_zlabel('Freedom')\nfig.colorbar(surf3, ax=ax3, shrink=0.5, aspect=5)\n\n# Plot 4: MG (ours)\nax4 = fig.add_subplot(2, 2, 4, projection='3d')\nsurf4 = ax4.plot_surface(x, y, z4, cmap='magma', edgecolor='none')\nax4.set_title('MG (ours)')\nax4.set_xlabel('m')\nax4.set_ylabel('n')\nax4.set_zlabel('Freedom')\nfig.colorbar(surf4, ax=ax4, shrink=0.5, aspect=5)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data with specific styling\nax.plot(x, y, color='orange', linestyle='-', linewidth=2, marker='o', markersize=5, label='Targets')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X-axis Label', fontsize=12)\nax.set_ylabel('Y-axis Label', fontsize=12)\nax.set_title('Sine Wave Example', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to the plot\nax.legend(loc='upper right', fontsize=10)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create data\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with a colormap\nsurface = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surface, ax=ax, shrink=0.5, aspect=5)\ncbar.set_label('Intensity')\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Bus')\nax.set_zlabel('Value')\nax.set_title('3D Surface Plot of a Function')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([1, 2, 3, 4])\ny = np.array([5, 7, 9, 11])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(x, y, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Bar Chart Example')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([15, 25, 35, 45, 55])\nz = np.array([-10, -20, -30, -40, -50])\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Add a 3D subplot\nax = fig.add_subplot(111, projection='3d')\n\n# Scatter plot with custom colors and sizes\nscatter = ax.scatter(x, y, z, c='r', s=100, marker='o', edgecolor='k', alpha=0.7)\n\n# Set labels for axes\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Set title of the plot\nax.set_title('3D Scatter Plot of Age, Income, and Debt')\n\n# Add a color bar which maps values to colors\ncbar = plt.colorbar(scatter)\ncbar.set_label('Data Points')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(10, 40, 50)\ny = np.linspace(10, 40, 50)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X / 2) * np.cos(Y / 3)\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Add a 3D subplot\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels for axes\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Time (s)')\nax.set_zlabel('Depth (m)')\n\n# Set title of the plot\nax.set_title('3D Visualization of Depth vs Temperature and Time')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: two sets of data points with different distributions\nx = np.random.normal(0, 1, 1000)\ny = np.random.exponential(scale=1/1.5, size=1000)\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the first dataset with a blue color and a label\nax.scatter(x, y, c='b', alpha=0.6, label='Out')\n\n# Plot the second dataset with a red color and a label\nax.scatter(x + 2, y + 2, c='r', alpha=0.6, label='In')\n\n# Set labels for axes\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\n\n# Add a title to the plot\nax.set_title('Scatter Plot of Two Datasets')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([150, 200, 250, 300, 350, 400])\ny_low = np.array([180, 220, 260, 300, 340, 380])\ny_middle = np.array([190, 230, 270, 310, 350, 390])\ny_high = np.array([200, 240, 280, 320, 360, 400])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with different colors and markers\nax.plot(x, y_low, color='blue', marker='o', linestyle='-', label='Low')\nax.plot(x, y_middle, color='orange', marker='s', linestyle='--', label='Middle')\nax.plot(x, y_high, color='green', marker='^', linestyle='-.', label='High')\n\n# Add a title and labels\nax.set_title('Average Tracked ORB Feature Number vs Log (ATE RMSE)', fontsize=14)\nax.set_xlabel('Average Tracked ORB Feature Number', fontsize=12)\nax.set_ylabel('Log (ATE RMSE)', fontsize=12)\n\n# Add a grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Log of Depth (L1) and Log of ATE RMSE\nlog_depth = np.array([-3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0])\nlog_ate_rmse = np.array([-2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with enhanced styling\nax.plot(log_depth, log_ate_rmse, marker='o', linestyle='-', color='b', linewidth=2, markersize=8, label='Data')\n\n# Add a shaded region to represent a confidence interval\nax.fill_between(log_depth, log_ate_rmse - 0.5, log_ate_rmse + 0.5, color='gray', alpha=0.3)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Log (Depth L1)', fontsize=12, fontweight='bold')\nax.set_ylabel('Log (ATE RMSE)', fontsize=12, fontweight='bold')\nax.set_title('Log of ATE RMSE vs Log of Depth L1', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a custom location\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average Top-5 Persistence of 1D\nx = np.array([0.0, 0.2, 0.4, 0.6, 0.8])\ny1 = np.array([3.5, 3.2, 2.8, 2.5, 2.2])  # Benign\ny2 = np.array([4.0, 3.7, 3.3, 3.0, 2.7])  # BadNets\ny3 = np.array([3.8, 3.5, 3.1, 2.8, 2.5])  # Benign KDE\ny4 = np.array([4.2, 3.9, 3.5, 3.2, 2.9])  # BadNets KDE\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Benign', color='red', linestyle='-', linewidth=2)\nax.plot(x, y2, label='BadNets', color='green', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Benign KDE', color='blue', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='BadNets KDE', color='purple', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Average Top-5 Persistence of 1D')\nax.set_ylabel('Density')\nax.set_title('Comparison of Different Models')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([1, 2, 3, 4, 5])\ny_snacks = np.array([0.75, 0.8, 0.85, 0.9, 0.95])\ny_navigate = np.array([0.65, 0.7, 0.75, 0.8, 0.85])\ny_question_selection = np.array([0.55, 0.6, 0.65, 0.7, 0.75])\ny_object_counting = np.array([0.45, 0.5, 0.55, 0.6, 0.65])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y_snacks, label='snacks', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y_navigate, label='navigate', color='green', linestyle='--', linewidth=2)\nax.plot(x, y_question_selection, label='question selection', color='red', linestyle='-.', linewidth=2)\nax.plot(x, y_object_counting, label='object counting', color='purple', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: temperature vs. device count\ntemperature = np.linspace(0.0, 1.4, 15)\ndevice_count = np.array([\n    20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160\n])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nplt.plot(temperature, device_count, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Temperature (\u00b0C)', fontsize=12, fontweight='bold')\nplt.ylabel('Device Count', fontsize=12, fontweight='bold')\nplt.title('Device Count vs. Temperature', fontsize=14, fontweight='bold')\n\n# Customize the tick parameters\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Incomparable', 'Different', 'Same']\nsizes = [73.3, 23.7, 3.0]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Comparison of Responses')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Responses\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx1 = np.random.normal(48, 2, 100)\ny1 = np.random.normal(49, 2, 100)\n\nx2 = np.random.normal(49, 2, 100)\ny2 = np.random.normal(50, 2, 100)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the first dataset with a green color and a dashed line style\nax.plot(x1, y1, 'go--', label='SEAC')\n\n# Plot the second dataset with a red color and a solid line style\nax.plot(x2, y2, 'ro-', label='SAC(20Hz)')\n\n# Set labels for the axes\nax.set_xlabel('Time Cost (Seconds)')\nax.set_ylabel('Algorithms')\n\n# Set a title for the plot\nax.set_title('Comparison of Algorithms by Time Cost')\n\n# Add a legend to the plot\nax.legend()\n\n# Set grid lines for better readability\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([1, 2, 3, 4])\ny1 = np.array([63.64, 80.08, 84.27, 90.11])\ny2 = np.array([75.00, 87.20, 87.20, 93.89])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='CodeBERT', color='blue', marker='o', linestyle='-', linewidth=2)\nax.plot(x, y2, label='CodeF1', color='red', marker='s', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Method', fontsize=12)\nax.set_ylabel('Average Recall Scores', fontsize=12)\nax.set_title('Average Recall Scores by Method', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set x-ticks and labels\nax.set_xticks(x)\nax.set_xticklabels(['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent'], fontsize=10)\n\n# Set y-limits\nax.set_ylim(0, 100)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Two different models' performance over time\ntime = np.array([4, 8, 12, 16, 20, 24, 28, 32])\nmodel1 = np.array([84, 86, 88, 90, 92, 94, 96, 98])\nmodel2 = np.array([82, 84, 86, 88, 90, 92, 94, 96])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styling\nplt.plot(time, model1, label='Trained w Few-Shot Ex', color='b', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(time, model2, label='Def Deduce+Ex Gen', color='r', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Few-Shot K', fontsize=12)\nplt.ylabel('Micro F1', fontsize=12)\nplt.title('Comparison of Model Performance Over Time', fontsize=14)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Customize the x-axis ticks\nplt.xticks(time)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Vehicle efficiency vs. vehicle parameter size\nvehicle_sizes = np.array([60, 62, 65, 70, 75])\nefficiencies = np.array([60, 62, 65, 70, 75])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(vehicle_sizes, efficiencies, marker='o', linestyle='-', color='red', linewidth=2, markersize=8, label='Cars')\n\n# Add a title and labels with improved font sizes\nax.set_title('Vehicle Efficiency vs. Vehicle Parameter Size', fontsize=14, fontweight='bold')\nax.set_xlabel('Vehicle Parameter Size (units)', fontsize=12)\nax.set_ylabel('Efficiency (%)', fontsize=12)\n\n# Set grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a custom location\nax.legend(loc='upper left', fontsize=10)\n\n# Enhance the tick parameters for better visibility\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsimple_trend = [0, 6, 16, 20, 12, 10]\nsimple = [0, 6, 12, 20, 12, 4]\ncomplex_ = [0, 8, 12, 18, 26, 20]\ncode = [0, 4, 12, 20, 10, 22]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the bar width and positions\nbar_width = 0.2\nindex = np.arange(len(models))\n\n# Plot the bars with different colors and labels\nbars1 = ax.bar(index - bar_width, simple_trend, bar_width, label='Simple Trend', color='#FF6F61')\nbars2 = ax.bar(index, simple, bar_width, label='Simple', color='#FFC300')\nbars3 = ax.bar(index + bar_width, complex_, bar_width, label='Complex', color='#DAF7A6')\nbars4 = ax.bar(index + 2*bar_width, code, bar_width, label='Code', color='#900C3F')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Model', fontsize=12)\nax.set_ylabel('Success Rate (%)', fontsize=12)\nax.set_title('Encoding/Decoding Schelling Points by Model', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\nadd_value_labels(bars4)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: two sets of points with different colors and sizes\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the first dataset with a specific color and marker\nax.plot(x, y1, color='orange', marker='o', linestyle='-', linewidth=2, markersize=5, label='Subgroups')\n\n# Plot the second dataset with a different color and marker\nax.plot(x, y2, color='black', marker='s', linestyle='--', linewidth=2, markersize=5, label='Calibration curve')\n\n# Set labels for the axes\nax.set_xlabel('Reduced probability', fontsize=12)\nax.set_ylabel('Fraction of positives', fontsize=12)\n\n# Add a title to the plot\nax.set_title('Comparison of Subgroups and Calibration Curve', fontsize=14, fontweight='bold')\n\n# Add a legend to the plot\nax.legend(loc='upper left', fontsize=10)\n\n# Set grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(-1.2, 1.2)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(-6, 6, 100)\ny1 = np.exp(-(x + 2)**2 / 2) * np.exp(-(x - 2)**2 / 2)\ny2 = np.exp(-(x + 1)**2 / 2) * np.exp(-(x + 3)**2 / 2)\ny3 = np.exp(-(x - 1)**2 / 2) * np.exp(-(x - 3)**2 / 2)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Proposed', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='FOD-Net', color='orange', linestyle='--', linewidth=2)\nax.plot(x, y3, label='SS3T', color='green', linestyle='-.', linewidth=2)\n\n# Fill between curves with different colors\nax.fill_between(x, y1, where=y1 > y2, color='lightblue', alpha=0.5)\nax.fill_between(x, y2, where=y2 > y3, color='lightcoral', alpha=0.5)\nax.fill_between(x, y3, color='lightgreen', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('ACC')\nax.set_ylabel('Probability Density')\nax.set_title('Model Comparison')\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nx1 = np.array([1340, 1360, 1380, 1400, 1420, 1440, 1460])\ny1 = np.array([0.005, 0.007, 0.015, 0.025, 0.035, 0.045, 0.055])\n\n# Data for the second plot\nx2 = np.array([205, 210, 215, 220])\ny2 = np.array([0.125, 0.15, 0.175, 0.2])\n\n# Data for the third plot\nx3 = np.array([1340, 1360, 1380, 1400, 1420, 1440, 1460])\ny3 = np.array([0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075])\n\n# Data for the fourth plot\nx4 = np.array([48, 49, 50, 51, 52])\ny4 = np.array([0.06, 0.07, 0.08, 0.09, 0.1])\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot 1: Scatter plot\naxes[0, 0].scatter(x1, y1, color='blue', marker='o', s=100)\naxes[0, 0].set_title('Total')\naxes[0, 0].set_xlabel('Daily reward (Ether)')\naxes[0, 0].set_ylabel('Probability')\naxes[0, 0].grid(True)\n\n# Plot 2: Bar chart\naxes[0, 1].bar(x2, y2, color='orange', width=5, edgecolor='black')\naxes[0, 1].set_title('Proposer')\naxes[0, 1].set_xlabel('Daily reward (Ether)')\naxes[0, 1].set_ylabel('Probability')\naxes[0, 1].grid(True)\n\n# Plot 3: Line plot\naxes[1, 0].plot(x3, y3, color='green', marker='s', linestyle='--', linewidth=2)\naxes[1, 0].set_title('Attestor')\naxes[1, 0].set_xlabel('Daily reward (Ether)')\naxes[1, 0].set_ylabel('Probability')\naxes[1, 0].grid(True)\n\n# Plot 4: Histogram\naxes[1, 1].hist(x4, bins=5, color='purple', edgecolor='black', alpha=0.7)\naxes[1, 1].set_title('Sync committee member')\naxes[1, 1].set_xlabel('Daily reward (Ether)')\naxes[1, 1].set_ylabel('Probability')\naxes[1, 1].grid(True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: RMSE values for different models at various trainable parameter sizes\ntrainable_sizes = np.array([0, 50, 100, 150])\nrmse_values = np.array([\n    [1.30, 1.21, 1.27, 1.28],\n    [1.29, 1.22, 1.27, 1.28],\n    [1.25, 1.21, 1.26, 1.27],\n    [1.24, 1.20, 1.25, 1.26]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot each model's RMSE values\nmodels = ['LlaSMol Lite', 'LlaSMol', 'LlaSMol Attn', 'LlaSMol Large']\ncolors = ['red', 'blue', 'green', 'purple']\n\nfor i, model in enumerate(models):\n    ax.plot(trainable_sizes, rmse_values[i], marker='o', linestyle='-', color=colors[i], label=model)\n\n# Set labels and title\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\nax.set_title('Comparison of RMSE for Different Models')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to the plot\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Execution duration (in seconds) and distribution of two different processes\nexecution_times = np.array([40, 60, 80, 100, 120, 140, 160])\nprocess_0_distribution = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.15, 0.05])\nprocess_1_distribution = np.array([0.03, 0.06, 0.1, 0.15, 0.2, 0.15, 0.05])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the distributions with different colors and line styles\nax.plot(execution_times, process_0_distribution, color='red', linestyle='-', linewidth=2, label='D0')\nax.plot(execution_times, process_1_distribution, color='orange', linestyle='--', linewidth=2, label='D1')\n\n# Set labels and title\nax.set_xlabel('Execution Duration (seconds)', fontsize=12)\nax.set_ylabel('Distribution', fontsize=12)\nax.set_title('Distribution of Execution Durations for Two Processes', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Instance sizes and corresponding improvement percentages for different methods\ninstance_sizes = [15, 20, 30, 40, 50, 60]\npetriRL = [18, 14, 13, 12, 11, 10]\nGAM = [14, 12, 9, 7, 5, 3]\nGIN = [13, 11, 8, 6, 4, 2]\nDGERD = [12, 10, 7, 5, 3, 1]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles\nax.plot(instance_sizes, petriRL, marker='o', linestyle='-', color='green', label='PetriRL')\nax.plot(instance_sizes, GAM, marker='s', linestyle='--', color='orange', label='GAM')\nax.plot(instance_sizes, GIN, marker='^', linestyle='-.', color='blue', label='GIN')\nax.plot(instance_sizes, DGERD, marker='x', linestyle=':', color='purple', label='DGERD')\n\n# Set labels and title\nax.set_xlabel('Instance Size (in millions)')\nax.set_ylabel('Improvement (%)')\nax.set_title('Comparison of Different Methods Across Various Instance Sizes')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the lines\nax.legend(loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Time cost (in seconds) and Algorithms\ntime_costs = np.array([1.2, 1.8, 2.4, 3.0, 3.6, 4.2])\nalgorithms = np.array(['SEAC', 'CTCO'])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with different markers and colors\nax.scatter(time_costs, algorithms, color='blue', marker='o', label='Data Points')\n\n# Set labels and title\nax.set_xlabel('Time Cost (Seconds)')\nax.set_ylabel('Algorithms')\nax.set_title('Comparison of Time Costs for Different Algorithms')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Time to Market (in days) and Median Time to Market (in days)\ntime_to_market = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\nmedian_time_to_market = np.array([50, 60, 70, 80, 90, 100, 110, 120, 130, 140])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with markers and labels\nax.plot(time_to_market, median_time_to_market, marker='o', linestyle='-', color='b', label='Median Time to Market')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set axis limits\nax.set_xlim(0, 110)\nax.set_ylim(40, 150)\n\n# Set axis labels with improved font size and style\nax.set_xlabel('Time to Market (Days)', fontsize=12, fontweight='bold')\nax.set_ylabel('Median Time to Market (Days)', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nax.set_title('Time to Market vs Median Time to Market', fontsize=14, fontweight='bold')\n\n# Add a legend with a specific location\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Density vs Year for different eras\nera_labels = ['Early 20th Century', 'Mid 20th Century', 'Turn of the Century']\nyears = np.array([1900, 1925, 1950, 1975, 2000])\ndensities_early = np.array([0.005, 0.015, 0.025, 0.035, 0.045])\ndensities_mid = np.array([0.01, 0.02, 0.03, 0.04, 0.05])\ndensities_turn = np.array([0.008, 0.018, 0.028, 0.038, 0.048])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot each era with different colors and line styles\nax.plot(years, densities_early, label=era_labels[0], color='blue', linestyle='-', linewidth=2)\nax.plot(years, densities_mid, label=era_labels[1], color='orange', linestyle='--', linewidth=2)\nax.plot(years, densities_turn, label=era_labels[2], color='green', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Density')\nax.set_title('Era vs Density')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(title='Era')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Nano', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'Al']\nvalues_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\nvalues_2022 = [90, 50, 150, 100, 180, 250, 400, 200, 300, 500]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create the bar chart\nbars_2013 = ax.bar(np.arange(len(categories)), values_2013, bar_width, label='2013', color='skyblue')\nbars_2022 = ax.bar(np.arange(len(categories)) + bar_width, values_2022, bar_width, label='2022', color='salmon')\n\n# Add labels and title\nax.set_xlabel('Technology')\nax.set_ylabel('Number of Patents')\nax.set_title('Patent Filings in 2013 and 2022')\nax.set_xticks(np.arange(len(categories)) + bar_width / 2)\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nax.legend()\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for better readability\nfor bar in bars_2013:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, int(yval), ha='center', va='bottom')\n\nfor bar in bars_2022:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, int(yval), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Predicted probabilities and corresponding fractions of positives\npredicted_probabilities = np.linspace(0, 1, 100)\nfractions_of_positives = np.sin(predicted_probabilities * np.pi) + 0.5\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the calibration curve\nax.plot(predicted_probabilities, fractions_of_positives, color='black', label='Calibration curve')\n\n# Add data points for demonstration\ndata_points = np.array([\n    [0.0, 0.2],\n    [0.25, 0.3],\n    [0.5, 0.4],\n    [0.75, 0.5],\n    [1.0, 0.6]\n])\nax.scatter(data_points[:, 0], data_points[:, 1], color='orange', label='Data points')\n\n# Add bin edges for demonstration\nbin_edges = np.array([0.0, 0.25, 0.5, 0.75, 1.0])\nax.vlines(bin_edges, 0, 1, colors='darkgray', linestyles='--', linewidth=0.5, label='Bin edges')\n\n# Set labels and title\nax.set_xlabel('Predicted probability')\nax.set_ylabel('Fraction of positives')\nax.set_title('Calibration Curve and Data Points')\n\n# Add a legend\nax.legend()\n\n# Set axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Earnings and growth rates for different companies over quarters\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings_tesla = [250, 270, 290, 210]\nearnings_benz = [200, 220, 240, 180]\nearnings_byd = [150, 170, 190, 130]\nearnings_porsche = [300, 320, 340, 260]\n\ngrowth_tesla = [20, 15, 10, -10]\ngrowth_benz = [15, 10, 5, -5]\ngrowth_byd = [10, 5, 0, -10]\ngrowth_porsche = [25, 20, 15, 5]\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot earnings data\ncolor = 'tab:blue'\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Earnings ($1000s)', color=color)\nax1.plot(quarters, earnings_tesla, color=color, marker='o', linestyle='-', label='Tesla')\nax1.plot(quarters, earnings_benz, color='orange', marker='o', linestyle='--', label='Benz')\nax1.plot(quarters, earnings_byd, color='green', marker='o', linestyle='-.', label='BYD')\nax1.plot(quarters, earnings_porsche, color='purple', marker='o', linestyle=':', label='Porsche')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for growth rates\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Growth Rate (%)', color=color)\nax2.plot(quarters, growth_tesla, color=color, marker='x', linestyle='-', label='Tesla Growth', linewidth=2)\nax2.plot(quarters, growth_benz, color='orange', marker='x', linestyle='--', label='Benz Growth', linewidth=2)\nax2.plot(quarters, growth_byd, color='green', marker='x', linestyle='-.', label='BYD Growth', linewidth=2)\nax2.plot(quarters, growth_porsche, color='purple', marker='x', linestyle=':', label='Porsche Growth', linewidth=2)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.9), ncol=2)\n\n# Set title and labels\nplt.title('Earnings and Growth Rates Over Quarters')\nax1.set_xticks(range(len(quarters)))\nax1.set_xticklabels(quarters)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different methods over time\nmethods = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full fine-tuning', 'LoRA', 'Ours (LoSA)']\naccuracy = [\n    [72, 74, 76, 78, 80, 82],  # Linear probing\n    [73, 75, 77, 79, 81, 83],  # BitFit\n    [74, 76, 78, 80, 82, 84],  # Prompt tuning\n    [75, 77, 79, 81, 83, 85],  # Full fine-tuning\n    [76, 78, 80, 82, 84, 86],  # LoRA\n    [77, 79, 81, 83, 85, 87]   # Ours (LoSA)\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot each method's accuracy over time\nfor i, acc in enumerate(accuracy):\n    ax.plot(acc, label=methods[i], marker='o', linestyle='-', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Different Methods Over Time')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(title='Methods', loc='upper left', fontsize='small')\n\n# Set y-axis limits\nax.set_ylim(70, 85)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define data for plotting\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data with different styles\nax.plot(x, y1, label='sin(x)', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='cos(x)', color='green', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='tan(x)', color='red', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Trigonometric Functions')\n\n# Add a legend\nax.legend()\n\n# Show grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Relative Cluster Size vs Average Norm of Difference Vectors\nx = np.linspace(25, 45, 100)\ny_teenagers = np.sin(x) * 10 + 15\ny_children = np.cos(x) * 10 + 15\ny_adults = np.tan(x) * 10 + 15\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y_teenagers, 'r.', label='teenagers', markersize=5)\nax.plot(x, y_children, 'g.', label='children', markersize=5)\nax.plot(x, y_adults, 'b.', label='adults', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Relative Cluster Size')\nax.set_ylabel('Average Norm of Difference Vectors')\nax.set_title('Species')\n\n# Add a legend\nax.legend()\n\n# Set grid for better readability\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Age vs. Heart Rate\nages = np.array([0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80])\nheart_rates = np.array([99.6, 96.0, 92.3, 90.9, 92.5, 91.3, 90.9, 92.3, 93.3, 94.5, 95.6])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nplt.plot(ages, heart_rates, marker='o', linestyle='-', color='b', linewidth=2, markersize=8, label='Heart Rate')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with improved font size and style\nplt.xlabel('Age (years)', fontsize=12, fontweight='bold')\nplt.ylabel('Heart Rate (bpm)', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nplt.title('Heart Rate Trend Over Age', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks\nplt.xticks(ages, fontsize=10)\n\n# Customize the y-axis ticks\nplt.yticks(np.arange(90, 100, 1), fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='viridis', fignum=1)\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xlabel('TMScore')\nax.set_ylabel('Sequence ID')\nax.set_title('Heatmap of TMScore vs Sequence ID')\n\n# Customize ticks\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['0.2', '0.3', '0.4', '0.5', '0.6'])\nax.set_yticklabels(['0.1', '0.2', '0.3', '0.4', '0.5'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([4211, 2411, 2141, 1124])\ny1 = np.array([0.9628, 0.9604, 0.9624, 0.9592])\ny2 = np.array([0.9624, 0.9604, 0.9624, 0.9561])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='SRCC', color='blue', linestyle='-', linewidth=2, marker='o', markersize=8)\nax.plot(x, y2, label='PLCC', color='green', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\nax.set_title('SRCC and PLCC values with their sum for different modes')\n\n# Add a legend\nax.legend()\n\n# Set grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set x-axis limits\nax.set_xlim(min(x) - 100, max(x) + 100)\n\n# Set y-axis limits\nax.set_ylim(0.955, 0.975)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ndata = [\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176],\n    [176,"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(-10, 10, 400)\ny = np.sin(x) * np.exp(-0.1 * x**2)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, color='blue', linestyle='-', linewidth=2, marker='o', markersize=5, label='SINDy')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X-axis', fontsize=12)\nax.set_ylabel('Y-axis', fontsize=12)\nax.set_title('Compact Spiral with Elliptical Hollow Center', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Memory bandwidth vs. Flows/byte\nflows = np.array([1e-1, 1e0, 1e1, 1e2, 1e3, 1e4])\nmemory_bandwidth = np.array([1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 7.0))\n\n# Plot the data with enhanced styling\nplt.plot(flows, memory_bandwidth, marker='o', linestyle='-', color='b', linewidth=2, markersize=8, label='DAXPY memory bandwidth')\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Flows/byte', fontsize=12, fontweight='bold')\nplt.ylabel('Flops/s', fontsize=12, fontweight='bold')\nplt.title('Memory Bandwidth vs. Flows/byte', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Set axis limits\nplt.xlim(1e-1, 1e4)\nplt.ylim(1e-10, 1e-5)\n\n# Enhance tick parameters\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Satisfy constraints', 'No severe errors', 'Lengthy', 'Contain rich info', 'No moderate errors', 'Grammatical correctness', 'No minor errors', 'Clear', 'Non-repetitive', 'Support stances', '19 other features']\nvalues = [0.76, 0.18, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color palette\ncolors = ['#6a0dad', '#d73027', '#f46d43', '#fdae61', '#abd9e9', '#2c7bb6', '#00441b', '#91bfdb', '#e0f3f8', '#fee090', '#ffffbf']\n\n# Plot the bar chart with customized settings\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.set_xlabel('Categories', fontsize=12)\n\n# Customize the y-axis\nax.set_ylabel('f(x)', fontsize=12)\nax.set_ylim(0.45, 0.75)\n\n# Add a title\nax.set_title('Impact of Various Features on f(x)', fontsize=14, fontweight='bold')\n\n# Add a grid for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the Venn diagram\ncigar_r = 24\nchat_repair = 45\noverlap = 8\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the positions of the circles\ncircle1 = plt.Circle((0, 0), cigar_r, color='pink', alpha=0.7)\ncircle2 = plt.Circle((0, 0), chat_repair, color='orange', alpha=0.7)\n\n# Add circles to the axes\nax.add_artist(circle1)\nax.add_artist(circle2)\n\n# Fill the overlapping area\nax.fill_betweenx([-cigar_r, cigar_r], -chat_repair, chat_repair, where=np.abs(np.linspace(-cigar_r, cigar_r, 100)) < overlap, color='green', alpha=0.5)\n\n# Set the limits of the plot\nax.set_xlim(-50, 50)\nax.set_ylim(-50, 50)\n\n# Remove axes\nax.axis('off')\n\n# Add labels\nax.text(0, cigar_r + 5, 'CigaR', ha='center', va='center', fontsize=12, fontweight='bold')\nax.text(0, -chat_repair - 5, 'ChatRepair', ha='center', va='center', fontsize=12, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\ncategories = ['GPT4V', 'Gemini Pro']\nvalues = [15, 25]\ncolors = ['#FF9999','#66B3FF']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=140, textprops=dict(color=\"w\"))\n\n# Add a title\nax.set_title('Qwen-QL-Max', fontsize=14, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of matvecs and corresponding values\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([10, 100, 1000, 10000, 100000])\ny2 = np.array([100, 1000, 10000, 100000, 1000000])\n\n# Create a new figure with a specified size\nplt.figure(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nplt.plot(x, y1, label='s = 19', color='purple', marker='o', linestyle='-', linewidth=2)\nplt.plot(x, y2, label='s = 50', color='orange', marker='s', linestyle='--', linewidth=2)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nplt.xlabel('Number of matvecs m')\nplt.ylabel('Approximation error ||A - \\hat{A}||_F')\nplt.title('Approximation Error vs. Number of Matvecs')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'Retrive.PassKey']\nsizes = [15, 30, 45, 10]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Pie Chart of Retrieval Operations', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 140, 100)\ny1 = np.sin(x / 20) * 3 + 1\ny2 = np.cos(x / 20) * 2 - 1\ny3 = np.tan(x / 20) * 1.5 - 2\ny4 = np.sin(x / 20) * 2 + 0.5\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Sine Wave', color='green', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Cosine Wave', color='orange', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.plot(x, y3, label='Tangent Wave', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=4)\nax.plot(x, y4, label='Sine Wave (thinner)', color='purple', linestyle=':', linewidth=1, marker='D', markersize=4)\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\nax.set_title('Multiple Waves')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6])\ny = np.array([2.5, 3.0, 3.5, 4.0, 4.5, 4.0, 3.5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with a line style and marker\nax.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Set labels for the axes\nax.set_xlabel('Sample Number')\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Set a title for the plot\nax.set_title('Urgency in Thermal Conductivity Measurements')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the tick marks\nax.set_xticks(np.arange(0, 7, 1))\nax.set_yticks(np.arange(1.5, 5.0, 0.5))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([28, 20, 26, 20, 10])\ny2 = np.array([35, 30, 22, 25, 30])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Player A', color='darkorange', marker='o', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Player B', color='royalblue', marker='s', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Games')\nax.set_ylabel('Scores by number of game and players')\nax.set_title('Scores by number of game and players')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Set x-ticks and labels\nax.set_xticks(x)\nax.set_xticklabels(['I', 'II', 'III', 'IV', 'V'])\n\n# Set y-limits\nax.set_ylim(0, 60)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(-6, 6, 100)\ny = np.linspace(-6, 6, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the contourf with a colormap\ncontour = ax.contourf(X, Y, Z, levels=20, cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contour, ax=ax)\ncbar.set_label('Time', rotation=270, labelpad=15)\n\n# Set labels and title\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\nax.set_title('Contour Plot of a Function')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nvalues = [\n    [5.7, 6.0, 5.2, 5.1],\n    [6.2, 6.0, 5.2, 3.4],\n    [7.8, 7.5, 7.6, 7.2],\n    [7.4, 6.9, 6.6, 6.0]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for each category\ncolors = ['#FFC0CB', '#ADD8E6', '#90EE90', '#FFD700']\n\n# Plot the data with error bars\nfor i, category in enumerate(categories):\n    ax.errorbar(\n        np.arange(len(values[i])),\n        values[i],\n        yerr=0.2,  # Standard deviation of the data\n        fmt='o',\n        capsize=5,\n        label=category,\n        color=colors[i],\n        ecolor='gray',\n        elinewidth=1,\n        markeredgewidth=2\n    )\n\n# Set labels and title\nax.set_xlabel('Trustee Scenario')\nax.set_ylabel('Average Amount Sent ($)')\nax.set_title('Comparison of Average Amount Sent by Different Player Types')\n\n# Set x-ticks and labels\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Add grid lines\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Athlete Jim', 'Athlete Bill']\nrunning_times = [120, 140]\ninterrupted_times = [30, 20]\nrest_times = [10, 15]\nrunning2_times = [160, 180]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define colors for each category\ncolors = ['#008000', '#FFA500', '#FF4500', '#00FF00']\n\n# Plot bars for each category\nbar_width = 0.2\nindex = np.arange(len(categories))\n\n# Plot bars for each data series\nbars_running = ax.bar(index - bar_width, running_times, bar_width, label='Running', color=colors[0])\nbars_interrupted = ax.bar(index, interrupted_times, bar_width, label='Interrupted', color=colors[1])\nbars_rest = ax.bar(index + bar_width, rest_times, bar_width, label='Rest', color=colors[2])\nbars_running2 = ax.bar(index + 2 * bar_width, running2_times, bar_width, label='Running2', color=colors[3])\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Seconds Since Start')\nax.set_title('Endurance Race Performance Analysis')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate the bars with their values\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 2, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars_running)\nadd_value_labels(bars_interrupted)\nadd_value_labels(bars_rest)\nadd_value_labels(bars_running2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the plot\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\ny2 = np.array([1, 4, 6, 8, 12, 14, 16, 18, 20, 22])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Group 1', marker='o', linestyle='-', color='b')\nax.plot(x, y2, label='Group 2', marker='s', linestyle='--', color='r')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Comparative Distribution of Two Groups')\n\n# Add a legend\nax.legend()\n\n# Show grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the waterfall chart\ncategories = [-300, -120, -100, -75, -50, -35, -25, -10, 0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300]\nvalues = [350, 200, 100, 75, 50, 25, 20, 10, 0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Plot the waterfall chart\nbars = ax.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\nax.set_title('Waterfall Chart', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2)) / (np.sqrt(X**2 + Y**2))\n\n# Plot the data using a contourf plot\nc = ax.contourf(X, Y, Z, levels=50, cmap='viridis')\n\n# Add a colorbar to the plot\nfig.colorbar(c, ax=ax)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Contour Plot of a Function')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Define data for the plots\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nX, Y = np.meshgrid(x, y)\nZ_nearest = np.sin(np.sqrt(X**2 + Y**2))\nZ_bilinear = np.cos(np.sqrt(X**2 + Y**2))\n\n# Plot the first subplot: Nearest\ncax1 = axes[0, 0].contourf(X, Y, Z_nearest, cmap='viridis', levels=20)\naxes[0, 0].set_title('Nearest')\naxes[0, 0].set_xlabel('X')\naxes[0, 0].set_ylabel('Y')\nfig.colorbar(cax1, ax=axes[0, 0], orientation='vertical')\n\n# Plot the second subplot: Nearest (with different colormap)\ncax2 = axes[0, 1].contourf(X, Y, Z_nearest, cmap='plasma', levels=20)\naxes[0, 1].set_title('Nearest')\naxes[0, 1].set_xlabel('X')\naxes[0, 1].set_ylabel('Y')\nfig.colorbar(cax2, ax=axes[0, 1], orientation='vertical')\n\n# Plot the third subplot: Bilinear\ncax3 = axes[1, 0].contourf(X, Y, Z_bilinear, cmap='inferno', levels=20)\naxes[1, 0].set_title('Bilinear')\naxes[1, 0].set_xlabel('X')\naxes[1, 0].set_ylabel('Y')\nfig.colorbar(cax3, ax=axes[1, 0], orientation='vertical')\n\n# Plot the fourth subplot: Bilinear (with different colormap)\ncax4 = axes[1, 1].contourf(X, Y, Z_bilinear, cmap='magma', levels=20)\naxes[1, 1].set_title('Bilinear')\naxes[1, 1].set_xlabel('X')\naxes[1, 1].set_ylabel('Y')\nfig.colorbar(cax4, ax=axes[1, 1], orientation='vertical')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of bits vs. Recall sum\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny1 = np.array([100, 200, 300, 400, 500, 600, 550, 500, 450, 400])\ny2 = np.array([150, 250, 350, 450, 550, 650, 600, 550, 500, 450])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Flickr30k', marker='o', linestyle='-', color='purple')\nax.plot(x, y2, label='MS-COCO', marker='s', linestyle='--', color='blue')\n\n# Set labels and title\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\nax.set_title('Comparison of Recall Sum for Different Datasets')\n\n# Add grid lines for better readability\nax.grid(True)\n\n# Add a legend to explain the data\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.cos(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Monte Carlo', color='blue', linestyle='-', marker='o', markersize=4, linewidth=2)\nax.plot(x, y2, label='Mean-Taylor', color='red', linestyle='--', marker='s', markersize=4, linewidth=2)\n\n# Set labels and title\nax.set_xlabel('x (m)', fontsize=12)\nax.set_ylabel('y (m)', fontsize=12)\nax.set_title('Denser Points with Perfectly Circular Error Ellipses', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set limits for x and y axes\nax.set_xlim(0, 25)\nax.set_ylim(0, 3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the circle\ntheta = np.linspace(0, 2 * np.pi, 100)\nx = np.cos(theta)\ny = np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, color='blue', linestyle='-', linewidth=2, marker='o', markersize=5, markerfacecolor='white')\n\n# Set the aspect ratio to be equal to ensure the circle is not distorted\nax.set_aspect('equal', adjustable='box')\n\n# Remove the axis lines and ticks for a cleaner look\nax.axis('off')\n\n# Add a title\nax.set_title('Circle with Points', fontsize=14, fontweight='bold')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data for the heatmap\ndata = np.array([\n    [0.01, 0.02, 0.03, 0.04, 0.05],\n    [0.06, 0.07, 0.08, 0.09, 0.10],\n    [0.11, 0.12, 0.13, 0.14, 0.15],\n    [0.16, 0.17, 0.18, 0.19, 0.20],\n    [0.21, 0.22, 0.23, 0.24, 0.25]\n])\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xlabel('Alpha')\nax.set_ylabel('Beta')\nax.set_title('Heatmap of Data')\n\n# Customize ticks\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\nax.set_yticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for plotting\nx = np.linspace(0, 100, 100)\ny1 = -2 * np.sin(x / 10) + 1\ny2 = -2 * np.cos(x / 10) + 1\ny3 = -2 * np.tan(x / 10) + 1\ny4 = -2 * np.arctan(x / 10) + 1\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='Left', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Center Left', color='cyan', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Center Right', color='green', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='Right', color='red', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Users (U)', fontsize=12)\nax.set_ylabel('Utility (f)', fontsize=12)\nax.set_title('Utility distribution per topic', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the scatter plot\nx = np.array([-2, -1, 0, 1, 2, 3])\ny = np.array([1, 2, 3, 2, 1, 0])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the scatter plot with different sizes and colors\nscatter = ax.scatter(x, y, s=100, c='red', alpha=0.7, edgecolors='k')\n\n# Add labels and title\nax.set_xlabel('Reactive-2 payoff')\nax.set_ylabel('Memory-2 payoff')\nax.set_title('Scatter Plot of Reactive-2 and Memory-2 Payoffs')\n\n# Add grid lines\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Add a legend\nax.legend(['Data Points'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata_vicuna = np.array([\n    [2, 3, 5, 7, 8],\n    [4, 6, 9, 10, 11],\n    [1, 2, 3, 4, 5]\n])\n\ndata_alpaca = np.array([\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7]\n])\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for Model = Vicuna\ncax1 = axes[0].imshow(data_vicuna, cmap='viridis', interpolation='nearest')\naxes[0].set_title('Model = Vicuna')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\naxes[0].set_xticks(np.arange(len(data_vicuna[0])))\naxes[0].set_yticks(np.arange(len(data_vicuna)))\naxes[0].set_xticklabels(['A', 'B', 'C', 'D', 'E'])\naxes[0].set_yticklabels(['X', 'Y', 'Z'])\nfor i in range(len(data_vicuna)):\n    for j in range(len(data_vicuna[i])):\n        text = axes[0].text(j, i, data_vicuna[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Add a colorbar to the first subplot\nfig.colorbar(cax1, ax=axes[0])\n\n# Plot for Model = Alpaca\ncax2 = axes[1].imshow(data_alpaca, cmap='plasma', interpolation='nearest')\naxes[1].set_title('Model = Alpaca')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\naxes[1].set_xticks(np.arange(len(data_alpaca[0])))\naxes[1].set_yticks(np.arange(len(data_alpaca)))\naxes[1].set_xticklabels(['A', 'B', 'C', 'D', 'E'])\naxes[1].set_yticklabels(['X', 'Y', 'Z'])\nfor i in range(len(data_alpaca)):\n    for j in range(len(data_alpaca[i])):\n        text = axes[1].text(j, i, data_alpaca[i, j], ha=\"center\", va=\"center\", color=\"k\")\n\n# Add a colorbar to the second subplot\nfig.colorbar(cax2, ax=axes[1])\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Robust Accuracy vs Delta RNFR\nx = np.array([-40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40])\ny = np.array([10, 12, 15, 18, 20, 22, 25, 28, 30, 32, 35, 38, 40, 42, 44, 46, 48])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nplt.scatter(x, y, color='blue', marker='o', s=100, alpha=0.7, label='Data Points')\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.6)\n\n# Set axis labels with improved font size and style\nplt.xlabel('Delta Robust Accuracy (%)', fontsize=12, fontweight='bold')\nplt.ylabel('Delta RNFR (%)', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nplt.title('Relationship Between Delta Robust Accuracy and Delta RNFR', fontsize=14, fontweight='bold')\n\n# Add a legend with a specific location\nplt.legend(loc='upper left', fontsize=10)\n\n# Customize the x-axis limits and ticks\nplt.xlim(-50, 50)\nplt.xticks(np.arange(-50, 51, 10))\n\n# Customize the y-axis limits and ticks\nplt.ylim(0, 50)\nplt.yticks(np.arange(0, 51, 10))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Gradient steps and corresponding values\nx = np.linspace(0, 100, 200)\ny1 = np.exp(x / 50)  # Exponential growth\ny2 = np.sin(x / 10) + 3  # Sine wave with offset\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Line 3 (Random Noise)', color='green', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Line 4 (Exponential Focus)', color='red', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Exponential Scale')\nax.set_title('Comparison of Two Lines')\n\n# Add a legend\nax.legend()\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nax.set_xlim(0, 100)\nax.set_ylim(0, 7)\n\n# Annotate a point of interest\nax.annotate('Point of Interest', xy=(50, 3), xytext=(60, 5),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, color='blue')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Predicted probability vs. number of examples\nx = np.array([0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0])\ny_known = np.array([200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])\ny_unknown = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different colors and styles\nax.bar(x - 0.2, y_known, width=0.4, color='green', label='Known', edgecolor='black')\nax.bar(x + 0.2, y_unknown, width=0.4, color='blue', label='Unknown', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\nax.set_title('Comparison of Known vs Unknown Samples by Maximum Predicted Probability')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Set x-axis limits and ticks\nax.set_xlim(0.2, 1.0)\nax.set_xticks(x)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Bias scores for different models and data types\ndata_types = ['INT8', 'INT4']\nmodels = ['Qwen-7B-Chat', 'Llama2-7B-Chat', 'MPT-7B-Chat', 'CodeLlama-7B-Instruct']\nbias_scores = [\n    [9.5, 8.8, 8.3, 8.1],\n    [9.2, 8.9, 8.5, 8.3]\n]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot each model's bias scores\nfor i, model in enumerate(models):\n    ax.plot(data_types, bias_scores[i], marker='o', linestyle='-', label=model)\n\n# Set labels and title\nax.set_xlabel('Data Type')\nax.set_ylabel('Bias Score')\nax.set_title('Bias Score by Data Type and Model')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(title='Model')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of samples vs. Predicted Probability\nx = np.array([0.0, 0.2, 0.4, 0.6])\ny_known = np.array([1200, 500, 300, 100])\ny_unknown = np.array([800, 400, 200, 50])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different colors and styles\nax.bar(x - 0.2, y_known, width=0.4, color='orange', label='Known')\nax.bar(x + 0.2, y_unknown, width=0.4, color='blue', label='Unknown')\n\n# Set labels and title\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Samples')\nax.set_title('Comparison of Known vs Unknown Samples by Predicted Probability')\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Set x-ticks and labels\nax.set_xticks(x)\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Width of layer vs. Empirical Lipschitz constant\nx = np.array([2**6, 2**7, 2**8, 2**9, 2**10, 2**11])\ny1 = np.array([100000, 200000, 300000, 400000, 500000, 600000])  # Example data for Cos | n=0 = 200\ny2 = np.array([150000, 250000, 350000, 450000, 550000, 650000])  # Example data for Cos | n=0 = 400\ny3 = np.array([120000, 220000, 320000, 420000, 520000, 620000])  # Example data for ReLU | n=0 = 200\ny4 = np.array([130000, 230000, 330000, 430000, 530000, 630000])  # Example data for ReLU | n=0 = 400\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 6.0))\n\n# Plot the data with different styles and labels\nplt.plot(x, y1, label='Cos | n=0 = 200', color='green', linestyle='-', marker='o')\nplt.plot(x, y2, label='Cos | n=0 = 400', color='green', linestyle='--', marker='s')\nplt.plot(x, y3, label='ReLU | n=0 = 200', color='blue', linestyle='-', marker='^')\nplt.plot(x, y4, label='ReLU | n=0 = 400', color='blue', linestyle='--', marker='*')\n\n# Add grid lines for better readability\nplt.grid(True)\n\n# Set labels and title with improved formatting\nplt.xlabel('Width of Layer', fontsize=12)\nplt.ylabel('Empirical Lipschitz Constant', fontsize=12)\nplt.title('Empirical Lipschitz Constant vs. Width of Layer', fontsize=14)\n\n# Add a legend with a more compact layout\nplt.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Time steps and corresponding values for different scenarios\ntime_steps = np.linspace(0, 10000, 100)\nvalues_WI = np.exp(time_steps / 2000) * 35000\nvalues_ISQ = np.exp(time_steps / 2500) * 40000\nvalues_WIQL = np.exp(time_steps / 3000) * 45000\nvalues_Greedy = np.exp(time_steps / 3500) * 50000\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot each scenario with different styles\nplt.plot(time_steps, values_WI, label='WI', color='red', linestyle='-', linewidth=2, marker='o', markersize=4)\nplt.plot(time_steps, values_ISQ, label='ISQ', color='green', linestyle='--', linewidth=2, marker='s', markersize=4)\nplt.plot(time_steps, values_WIQL, label='WIQL', color='purple', linestyle='-.', linewidth=2, marker='^', markersize=4)\nplt.plot(time_steps, values_Greedy, label='Greedy', color='blue', linestyle=':', linewidth=2, marker='D', markersize=4)\n\n# Set labels and title\nplt.xlabel('Time Steps')\nplt.ylabel('Discounted Cumulative Reward')\nplt.title('Discounted Cumulative Rewards Over Time')\n\n# Add a grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the lines\nplt.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Discounted cumulative reward over time steps\ntime_steps = np.arange(0, 201, 10)\nwi_discounted_cumulative_reward = np.array([0.55, 0.53, 0.51, 0.49, 0.47, 0.45, 0.43, 0.41, 0.39, 0.37, 0.35, 0.33, 0.31, 0.29, 0.27, 0.25, 0.23, 0.21, 0.19, 0.17, 0.15])\nisq_discounted_cumulative_reward = np.array([0.50, 0.48, 0.46, 0.44, 0.42, 0.40, 0.38, 0.36, 0.34, 0.32, 0.30, 0.28, 0.26, 0.24, 0.22, 0.20, 0.18, 0.16, 0.14, 0.12, 0.10])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styling\nplt.plot(time_steps, wi_discounted_cumulative_reward, label='WI', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(time_steps, isq_discounted_cumulative_reward, label='ISQ', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Time Steps', fontsize=12)\nplt.ylabel('Discounted Cumulative Reward', fontsize=12)\nplt.title('Discounted Cumulative Reward Over Time', fontsize=14)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define data points for three different conditions\nx1 = np.array([-3, -2, -1, 0, 1, 2, 3])\ny1 = np.array([1.5, 2.5, 0.5, 1.0, 2.0, 1.5, 0.5])\n\nx2 = np.array([-3, -2, -1, 0, 1, 2, 3])\ny2 = np.array([0.5, 1.5, 2.5, 1.0, 0.5, 2.0, 1.5])\n\nx3 = np.array([-3, -2, -1, 0, 1, 2, 3])\ny3 = np.array([2.5, 1.5, 0.5, 2.0, 1.0, 0.5, 2.5])\n\n# Plot the data with different markers and colors\nax.scatter(x1, y1, color='orange', label='Daytime Sunny', marker='o')\nax.scatter(x2, y2, color='blue', label='Night Rainy', marker='s')\nax.scatter(x3, y3, color='green', label='PGST', marker='^')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Scatter Plot of Different Conditions')\n\n# Add a legend\nax.legend()\n\n# Set grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define data points for each category\nx1 = np.array([-7, -5, -3, -1, 1, 3, 5, 7])\ny1 = np.array([2, 4, 6, 8, 10, 12, 14, 16])\n\nx2 = np.array([-6, -4, -2, 0, 2, 4, 6, 8])\ny2 = np.array([1, 3, 5, 7, 9, 11, 13, 15])\n\nx3 = np.array([-5, -3, -1, 1, 3, 5, 7, 9])\ny3 = np.array([0, 2, 4, 6, 8, 10, 12, 14])\n\nx4 = np.array([-4, -2, 0, 2, 4, 6, 8, 10])\ny4 = np.array([-1, 1, 3, 5, 7, 9, 11, 13])\n\nx5 = np.array([-3, -1, 1, 3, 5, 7, 9, 11])\ny5 = np.array([-2, 0, 2, 4, 6, 8, 10, 12])\n\n# Plot each category with different colors and markers\nax.scatter(x1, y1, color='red', marker='o', label='Category 1')\nax.scatter(x2, y2, color='green', marker='s', label='Category 2')\nax.scatter(x3, y3, color='blue', marker='^', label='Category 3')\nax.scatter(x4, y4, color='purple', marker='D', label='Category 4')\nax.scatter(x5, y5, color='orange', marker='P', label='Category 5')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Scatter Plot with Multiple Categories')\n\n# Add a legend\nax.legend()\n\n# Set grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we have some data for three different conditions over time\ntime = np.arange(10, 110, 10)\ncondition1 = np.array([5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\ncondition2 = np.array([10, 15, 20, 25, 30, 35, 40, 45, 50, 55])\ncondition3 = np.array([15, 20, 25, 30, 35, 40, 45, 50, 55, 60])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Plot the data with different styles and labels\nax.plot(time, condition1, label='ActivityNet mIoU', color='darkred', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(time, condition2, label='ActivityNet CIDER', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(time, condition3, label='Breakfast MoF', color='darkgreen', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Time (seconds)', fontsize=12)\nax.set_ylabel('Performance Score', fontsize=12)\nax.set_title('Performance Comparison Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Customize ticks\nax.set_xticks(np.arange(10, 110, 10))\nax.set_yticks(np.arange(0, 70, 10))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Time series for three different conditions\ntime = np.arange(0, 4, 1)\ncondition1 = np.array([0.96, 0.98, 0.99, 1.02])\ncondition2 = np.array([0.95, 0.97, 0.98, 1.01])\ncondition3 = np.array([0.94, 0.96, 0.97, 1.00])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(10.0, 10.0))\n\n# Plot each condition with different styles\nplt.plot(time, condition1, label='GT', color='green', marker='o', linestyle='-', linewidth=2, markersize=8)\nplt.plot(time, condition2, label='DRS', color='blue', marker='s', linestyle='--', linewidth=2, markersize=8)\nplt.plot(time, condition3, label='PR-based', color='red', marker='^', linestyle='-.', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Time', fontsize=12, fontweight='bold')\nplt.ylabel('RSA', fontsize=12, fontweight='bold')\nplt.title('Comparison of RSA over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nplt.legend(loc='upper left', fontsize=10, frameon=True, shadow=True)\n\n# Set x and y limits\nplt.xlim(0, 4)\nplt.ylim(0.94, 1.02)\n\n# Add annotations to highlight key points\nfor i, txt in enumerate(condition1):\n    plt.annotate(f'{txt:.2f}', (time[i], condition1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Assuming we have some data for demonstration purposes\nx = np.linspace(0, 80, 100)\ny1 = np.sin(x / 20) * 0.75 + 0.65\ny2 = np.sin(x / 20 + np.pi / 4) * 0.75 + 0.65\ny3 = np.sin(x / 20 + np.pi / 2) * 0.75 + 0.65\ny4 = np.sin(x / 20 + 3 * np.pi / 4) * 0.75 + 0.65\ny5 = np.sin(x / 20 + np.pi) * 0.75 + 0.65\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='clip', color='black', linewidth=2)\nax.plot(x, y2, label='laion (5k)', color='yellow', linestyle='--', linewidth=2)\nax.plot(x, y3, label='coco (5k)', color='blue', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='laion (10k)', color='green', linestyle=':', linewidth=2)\nax.plot(x, y5, label='coco (10k)', color='red', marker='o', markersize=5, linestyle='-', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Set limits for x and y axes\nax.set_xlim(0, 80)\nax.set_ylim(0.53, 0.76)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(0, 8, 100)\ny1 = np.sin(x) * np.exp(-x / 5)\ny2 = np.cos(x) * np.exp(-x / 5)\ny3 = np.tan(x) * np.exp(-x / 5)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='Content', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Organization', color='orange', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Language', color='green', linestyle='-.', linewidth=2)\n\n# Set the title of the plot\nax.set_title('Cumulative Performance Gain by Augmentation Level')\n\n# Set the labels for the x and y axes\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to the plot\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: World population growth over time\nyears = np.array([1950, 1960, 1970, 1980, 1990, 2000, 2010])\npopulation_africa = np.array([100, 150, 200, 250, 300, 350, 400])\npopulation_americas = np.array([200, 250, 300, 350, 400, 450, 500])\npopulation_asia = np.array([300, 350, 400, 450, 500, 550, 600])\npopulation_europe = np.array([400, 450, 500, 550, 600, 650, 700])\npopulation_oceania = np.array([500, 550, 600, 650, 700, 750, 800])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each dataset with different colors and styles\nax.plot(years, population_africa, label='Africa', color='green', linestyle='-', linewidth=2)\nax.plot(years, population_americas, label='Americas', color='yellow', linestyle='--', linewidth=2)\nax.plot(years, population_asia, label='Asia', color='red', linestyle='-.', linewidth=2)\nax.plot(years, population_europe, label='Europe', color='purple', linestyle=':', linewidth=2)\nax.plot(years, population_oceania, label='Oceania', color='orange', linestyle='-', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\nax.set_title('World Population Growth')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([0, 20, 40])\ny1 = np.array([6.5, 3.5, 2.5])\ny2 = np.array([6.0, 3.0, 2.0])\ny3 = np.array([5.5, 2.5, 1.5])\ny4 = np.array([5.0, 2.0, 1.0])\ny5 = np.array([4.5, 1.5, 0.5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot each dataset with different colors and line styles\nax.plot(x, y1, label='Notre-Dame de Paris', color='darkblue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Demi-Gods and Semi-Devils', color='royalblue', linestyle='--', linewidth=2)\nax.plot(x, y3, label='The Count of Monte Cristo', color='tan', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='Game of Thrones', color='skyblue', linestyle=':', linewidth=2)\nax.plot(x, y5, label='Attack on Titan', color='darkblue', linestyle='-', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Time (Years)')\nax.set_ylabel('Scores')\nax.set_title('Scores Over Time')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to the plot\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\nvalues = [52, 45, 48, 55, 50, 53, 47, 51, 49, 46]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved styling\nax.set_title('Accuracy (%)', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\n\n# Customize the x-axis tick labels\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nregions = ['Region 1 Sales', 'Region 2 Sales', 'Region 3 Sales']\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales_data = [\n    [60, 40, 80, 90, 70],\n    [80, 60, 100, 80, 60],\n    [70, 50, 90, 70, 50]\n]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Plot each product's sales data across regions\nfor i, product in enumerate(products):\n    ax.bar([j + i * 0.2 for j in range(len(regions))], sales_data[i], width=0.2, label=product)\n\n# Set labels and title\nax.set_xlabel('Regions')\nax.set_ylabel('Sales')\nax.set_title('Average Monthly Sales by Product Across Regions')\nax.set_xticks([i + 0.2 for i in range(len(regions))])\nax.set_xticklabels(regions)\nax.legend()\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlengths = [0.9, 10.19, 20.29, 30.39, 40.49]\nspearmans = [-0.5, -0.4, -0.3, -0.2, -0.1]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with error bars\nbars = ax.bar(lengths, spearmans, color='skyblue', edgecolor='black')\n\n# Add error bars to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Length')\nax.set_ylabel('Spearman')\nax.set_title('Spearman Correlation by Length')\n\n# Set x-ticks\nax.set_xticks(lengths)\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'])\n\n# Set y-limits\nax.set_ylim(-1.0, 0.75)\n\n# Add grid lines\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nvalues = [\n    [2.2, 11.2, 14.3, 19.9],\n    [2.4, 11.2, 14.3, 19.9],\n    [2.4, 11.2, 14.3, 19.9],\n    [2.4, 11.2, 14.3, 19.9],\n    [2.4, 11.2, 14.3, 19.9]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#90EE90', '#FF4500']\n\n# Plot bars with different colors and add labels\nfor i, value in enumerate(values):\n    ax.bar(categories, value, color=colors[i], label=f'Category {i+1}')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values (%)')\nax.set_title('Comparison of Categories')\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Legend')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmodels = ['Bactrian-X', 'Lima-X']\nen_values = [3.5, 1.5]\nfr_values = [4.4, 2.3]\nes_values = [4.4, 1.5]\nde_values = [3.5, 0.8]\nit_values = [3.5, 1.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each language\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot bars for each language\nbar_width = 0.2\nindex = np.arange(len(models))\nbars = []\n\nfor i, (en, fr, es, de, it) in enumerate(zip(en_values, fr_values, es_values, de_values, it_values)):\n    bars.append(ax.bar(index + i * bar_width, [en, fr, es, de, it], bar_width, label=f'Language {i+1}', color=colors[i]))\n\n# Add some text for labels, title, and custom x-axis tick labels\nax.set_xlabel('Model')\nax.set_ylabel('Improvement [%]')\nax.set_title('ENDEFRRITES sampled')\nax.set_xticks(index + bar_width * 2.5)\nax.set_xticklabels(models)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nmacro_f1_scores = [0.82, 0.84, 0.83, 0.85, 0.86, 0.87]\nllm_mis = [0.78, 0.79, 0.80, 0.81, 0.82, 0.83]\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the first dataset (Macro F1-score)\ncolor = 'tab:blue'\nax1.set_xlabel('Pheme')\nax1.set_ylabel('Macro F1-score', color=color)\nax1.bar(pheme, macro_f1_scores, color=color, alpha=0.7, width=0.5, edgecolor='black')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second dataset (LLM-mis)\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('LLM-mis', color=color)\nax2.plot(pheme, llm_mis, color=color, marker='o', linestyle='--', linewidth=2, markersize=8)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a title and adjust layout\nplt.title('Performance Metrics by Pheme')\nfig.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['1', '2', '3', '4', '5', '6']\nvalues = [\n    [5, 10, 15, 20, 25, 30],\n    [4, 9, 14, 19, 24, 29],\n    [3, 8, 13, 18, 23, 28],\n    [2, 7, 12, 17, 22, 27],\n    [1, 6, 11, 16, 21, 26]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the color map\ncmap = plt.get_cmap('viridis')\n\n# Plot each category with different colors and labels\nfor i, value in enumerate(values):\n    ax.bar(categories, value, bottom=np.sum(values[:i], axis=0), color=cmap(i/len(values)), label=f'Category {i+1}')\n\n# Add title and labels\nax.set_title('Human Labeling and Agreement Bias Checking', fontsize=14, fontweight='bold')\nax.set_xlabel('Human Annotator', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Legend', loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['human', 'gpt4', 'gpt4-cot']\ns1_values = [200, 300, 500]\ns2_values = [100, 400, 700]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the data with bars\nbars = ax.bar(categories, s1_values, color=colors, label='s1')\nax.bar(categories, s2_values, bottom=s1_values, color=[c for c in colors if c != '#1f77b4'], label='s2')\n\n# Add labels and title\nax.set_xlabel('Role')\nax.set_ylabel('Count')\nax.set_title('Resonance Preference Plot for rich_context')\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 10, round(yval), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winogrande', 'Average']\naccuracies = [\n    [53.0, 51.3, 56.4, 56.2],\n    [46.6, 45.8, 48.0, 46.7],\n    [45.3, 44.5, 48.5, 39.0],\n    [73.1, 70.4, 73.2, 72.0],\n    [53.1, 53.7, 53.1]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for each task\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot bars for each task\nfor i, accs in enumerate(accuracies):\n    ax.bar(tasks[i], accs, color=colors[i], label=f'Task {i+1}')\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Model Accuracies on Different Tasks')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Model')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics for different models\nmodels = ['GSM8K', 'MNLI', 'race@High']\nperformance_metrics = [\n    [52, 54, 56, 58, 60],  # Example performance data for GSM8K\n    [62, 64, 66, 68, 70],  # Example performance data for MNLI\n    [55, 57, 59, 61, 63]   # Example performance data for race@High\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with customized colors and styles\nbar_width = 0.2\nindex = np.arange(len(models))\nopacity = 0.8\n\nbars = []\nfor i, metric in enumerate(performance_metrics):\n    bars.append(ax.bar(index + i * bar_width, metric, bar_width, alpha=opacity, label=f'M = {i+3}'))\n\n# Add labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Performance')\nax.set_title('Performance Metrics for Different Models')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(models)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['DLMA-7B VS. LLAMa-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMa-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\ndlma_win = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\ntie = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\ndlma_lose = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the width of each bar\nbar_width = 0.25\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the data\nbars1 = ax.bar(index, dlma_win, bar_width, label='DLMA win', color='#4caf50')\nbars2 = ax.bar(index + bar_width, tie, bar_width, label='Tie', color='#2196f3')\nbars3 = ax.bar(index + 2 * bar_width, dlma_lose, bar_width, label='DLMA lose', color='#f44336')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Matchups', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('DLMA vs. Baseline Methods On HHH (Evaluated by GPT4)', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ntime = np.array([0, 10, 20, 30, 40])\ntrot = np.array([0.5, 0.7, 0.8, 0.9, 0.95])\npace = np.array([0.3, 0.4, 0.5, 0.6, 0.7])\nbound = np.array([0.2, 0.3, 0.4, 0.5, 0.6])\npronk = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\ntransition = np.array([0.05, 0.1, 0.15, 0.2, 0.25])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot each dataset with different colors and labels\nax.plot(time, trot, color='green', label='trot')\nax.plot(time, pace, color='red', label='pace')\nax.plot(time, bound, color='purple', label='bound')\nax.plot(time, pronk, color='brown', label='pronk')\nax.plot(time, transition, color='gray', linestyle='--', label='transition')\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Gait Distribution (%)')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nap1k_wins = [68, 82, 68, 72, 68]\ntie_wins = [24, 15, 22, 19, 23]\nag1k_wins = [8, 3, 10, 9, 9]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for each category\nbars1 = ax.bar(index - bar_width, ap1k_wins, bar_width, label='AP-1k wins', color='#1f77b4')\nbars2 = ax.bar(index, tie_wins, bar_width, label='Tie', color='#ff7f0e')\nbars3 = ax.bar(index + bar_width, ag1k_wins, bar_width, label='AG-1k wins', color='#2ca02c')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Wins', fontsize=12)\nax.set_title('Comparison of Wins Across Categories', fontsize=14)\nax.set_xticks(index)\nax.set_xticklabels(categories, fontsize=10)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nsubcategories = ['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree']\nvalues = [\n    [14.8, 29.6, 29.6, 18.5, 8.4],\n    [9.4, 24.1, 27.8, 33.3, 9.0],\n    [8.3, 14.8, 40.7, 33.3, 9.3],\n    [24.1, 29.6, 16.7, 33.3, 9.3]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#FFA500', '#ADD8E6', '#87CEEB']\n\n# Plot bars for each category\nfor i, category in enumerate(categories):\n    ax.barh(subcategories, values[i], left=np.sum(values[:i], axis=0), color=colors[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Percentage')\nax.set_title('Eye Movement')\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([-150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150])\ny1 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Ours', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Saliency-based Sampling', color='purple', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Rotation Angle (\u00b0)', fontsize=12)\nax.set_ylabel('Rate of Gain Change (%)', fontsize=12)\nax.set_title('Comparison of Rate of Gain Change', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nax.set_xlim(-150, 150)\nax.set_ylim(-30, 120)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\nx = np.arange(len(labels))\nwidth = 0.2\n\n# Accuracy data\naccuracy = [3.2, 3.1, 2.8, 3.4, 3.0, 2.7]\n\n# Completeness data\ncompleteness = [3.0, 2.9, 2.6, 3.3, 2.9, 2.5]\n\n# Consiseness data\nconsiseness = [2.8, 2.7, 2.4, 3.2, 2.8, 2.4]\n\n# Readability data\nreadability = [2.5, 2.4, 2.1, 3.0, 2.6, 2.2]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot bars for each category\nbars1 = ax.bar(x - width, accuracy, width, label='Accuracy', color='royalblue')\nbars2 = ax.bar(x, completeness, width, label='Completeness', color='orange')\nbars3 = ax.bar(x + width, consiseness, width, label='Consiseness', color='darkred')\nbars4 = ax.bar(x + 2 * width, readability, width, label='Readability', color='teal')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Language Models', fontsize=12)\nax.set_ylabel('Ratings', fontsize=12)\nax.set_title('Ratings of Language Models on a Scale from 1-4', fontsize=14, fontweight='bold')\nax.set_xticks(x)\nax.set_xticklabels(labels, rotation=45, ha='right')\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\nadd_value_labels(bars4)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(models, accuracies, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 3), ha='center', va='bottom')\n\n# Set x-axis limits to ensure all labels fit\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nvalues1 = [78.8, 67.4, 44.2]\nvalues2 = [11.7, 18.1, 21.9]\nvalues3 = [9.5, 14.5, 33.9]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars\nbars1 = ax.bar(index, values1, bar_width, label='Refined-Alpaca-1k-longest wins', color='#FF6F61')\nbars2 = ax.bar(index + bar_width, values2, bar_width, label='Alpaca-1k-longest wins', color='#6A5ACD')\nbars3 = ax.bar(index + 2 * bar_width, values3, bar_width, label='Alpaca-1k-longest losses', color='#8DB6CD')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\nax.set_title('Comparison of Values', fontsize=14)\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories, fontsize=10)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nemotions = ['Ang', 'Cn', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nnegative = [100, 200, 300, 400, 500, 600, 700, 800]\npositive = [150, 250, 350, 450, 550, 650, 750, 850]\nnone = [200, 300, 400, 500, 600, 700, 800, 900]\nmixed = [250, 350, 450, 550, 650, 750, 850, 950]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the bar width and positions\nbar_width = 0.2\nindex = np.arange(len(emotions))\n\n# Plot each bar with different colors and labels\nbars = [\n    ax.bar(index - 1.5 * bar_width, negative, bar_width, label='Negative', color='red'),\n    ax.bar(index - 0.5 * bar_width, positive, bar_width, label='Positive', color='green'),\n    ax.bar(index + 0.5 * bar_width, none, bar_width, label='None', color='gray'),\n    ax.bar(index + 1.5 * bar_width, mixed, bar_width, label='Mixed', color='orange')\n]\n\n# Add labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency')\nax.set_title('Emotion Frequency Distribution')\nax.set_xticks(index)\nax.set_xticklabels(emotions)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['GPT-4V', 'RoboCodeX']\nsuccess = [0.95, 0.85]\noccupancy_error = [0.02, 0.03]\ngrounding_error = [0.01, 0.02]\ngripper_collision = [0.01, 0.01]\ntrajectory_optimization_error = [0.01, 0.01]\ngrasping_failed = [0.01, 0.01]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors for each category\ncolors = ['#006400', '#8B4513', '#FFA500', '#FFD700', '#FF4500', '#800080']\n\n# Plot bars for each category\nbar_width = 0.8\nindex = np.arange(len(categories))\nbars = []\n\n# Plot success bar\nbars.append(ax.bar(index, success, bar_width, label='Success', color=colors[0], edgecolor='black'))\n\n# Plot occupancy error bar\nbars.append(ax.bar(index + bar_width, occupancy_error, bar_width, label='Occupancy Error', color=colors[1], edgecolor='black'))\n\n# Plot grounding error bar\nbars.append(ax.bar(index + 2 * bar_width, grounding_error, bar_width, label='Grounding Error', color=colors[2], edgecolor='black'))\n\n# Plot gripper collision bar\nbars.append(ax.bar(index + 3 * bar_width, gripper_collision, bar_width, label='Gripper Collision', color=colors[3], edgecolor='black'))\n\n# Plot trajectory optimization error bar\nbars.append(ax.bar(index + 4 * bar_width, trajectory_optimization_error, bar_width, label='Trajectory Optimization Error', color=colors[4], edgecolor='black'))\n\n# Plot grasping failed bar\nbars.append(ax.bar(index + 5 * bar_width, grasping_failed, bar_width, label='Grasping Failed', color=colors[5], edgecolor='black'))\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage of Total Trials')\nax.set_title('Performance Metrics Comparison')\nax.set_xticks(index + 2.5 * bar_width)\nax.set_xticklabels(categories)\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 1.0)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Transmission Delay (ms) for different datasets\ndatasets = ['VOC 2012', 'COCO 2017']\ntransmission_delays = [\n    [3.2, 2.8, 1.9],  # JPEG\n    [3.1, 2.9, 1.8],  # DEEPJSCC w/ ofdm\n    [3.0, 2.8, 1.7]   # Ours\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define colors for each dataset\ncolors = ['#FF6F61', '#88B04B', '#FFBC00']\n\n# Plot each dataset with a bar chart\nfor i, delays in enumerate(transmission_delays):\n    ax.bar(np.arange(len(delays)) + i * 0.25, delays, width=0.25, color=colors[i], edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Datasets')\nax.set_ylabel('Transmission Delay (ms)')\nax.set_title('Comparison of Transmission Delays for Different Datasets')\n\n# Set x-ticks and labels\nax.set_xticks(np.arange(len(datasets)) + 0.25)\nax.set_xticklabels(datasets)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show legend\nax.legend(['JPEG', 'DEEPJSCC w/ ofdm', 'Ours'], loc='upper right')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\nvalues = [1.2, 1.3, 1.4, 1.5, 1.6, 1.7]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('PDEs')\nax.set_ylabel('log L2')\nax.set_title('Comparison of PDEs')\n\n# Add grid lines for better readability\nax.yaxis.grid(True)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['PICC', 'SROCC']\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors for each model\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot data for each category and model\nfor i, category in enumerate(categories):\n    values = [0.975, 0.975, 0.975, 0.975]  # Example values, replace with actual data\n    ax.bar(models, values, color=colors[i], label=category, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Metric Values')\nax.set_title('Metrics Comparison')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Categories')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\nzero_shot_values = [6.11, 28.33, 60.56]\none_shot_values = [31.11, 56.11, 99.44]\nds_agent_values = [44.44, 85.0, 60.56]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define colors for each category\ncolors = ['#FF6F61', '#6B5B95', '#88B04B']\n\n# Plot bars for each category\nbar_width = 0.25\nindex = np.arange(len(categories))\n\n# Plot zero-shot values\nbars_zero_shot = ax.bar(index - bar_width, zero_shot_values, bar_width, label='Zero-shot', color=colors[0], edgecolor='black')\n\n# Plot one-shot values\nbars_one_shot = ax.bar(index, one_shot_values, bar_width, label='One-shot', color=colors[1], edgecolor='black')\n\n# Plot DS-Agent values\nbars_ds_agent = ax.bar(index + bar_width, ds_agent_values, bar_width, label='DS-Agent', color=colors[2], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('One pass rate (%)')\nax.set_title('Comparison of One Pass Rate Across Different Models')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars_zero_shot)\nadd_value_labels(bars_one_shot)\nadd_value_labels(bars_ds_agent)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LMM-based vs TPLM-based', 'LMM-based vs Template', 'LMM-based vs Markdown', 'TPLM-based vs Template', 'TPLM-based vs Markdown', 'Markdown vs Template']\nwin_percentages = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_percentages = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_percentages = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for each category\nbars1 = ax.bar(index - bar_width, win_percentages, bar_width, label='Win', color='skyblue')\nbars2 = ax.bar(index, tie_percentages, bar_width, label='Tie', color='lightgreen')\nbars3 = ax.bar(index + bar_width, loss_percentages, bar_width, label='Loss', color='salmon')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Category', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Comparison of Win, Tie, and Loss Percentages', fontsize=14)\nax.set_xticks(index)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Set the bar width and positions\nbar_width = 0.35\nindex = np.arange(len(categories))\n\n# Plot the bars\nbars = ax.bar(index, values, bar_width, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xticks(index)\nax.set_xticklabels(categories)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nsteps = np.array([0, 1, 2, 3, 4])\navg_following_rate = np.array([100.0, 60.0, 29.8, 27.1, 26.7])\nfollowing_related_format_error_rate = np.array([100.0, 83.3, 50.7, 63.4, 60.8])\nfollowing_related_error_rate = np.array([100.0, 48.1, 50.7, 38.5, 30.7])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different colors and styles\nbars_avg = ax.bar(steps - 0.2, avg_following_rate, width=0.2, color='darkgray', label='Avg. Following Rate')\nbars_format = ax.bar(steps, following_related_format_error_rate, width=0.2, color='skyblue', label='Following-related Format Error Rate')\nbars_error = ax.bar(steps + 0.2, following_related_error_rate, width=0.2, color='lightgreen', label='Following-related Error Rate')\n\n# Set labels and title\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xticks(steps)\nax.set_xticklabels(['0', '1', '2', '3', '4'])\nax.legend()\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Annotate bars with values\nfor bar in bars_avg:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom')\n\nfor bar in bars_format:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom')\n\nfor bar in bars_error:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: hypothetical data for demonstration purposes\ncategories = ['Coreutils', 'Scp', 'Tar', 'Exim', 'Mingw', 'Nginx', 'Memcached', 'Bzip2', 'Gcc', 'Hmmer', 'Libaio', 'Libaio', 'Mc', 'Omnet', 'Perl', 'Php', 'Sql', 'Xalan', 'MySql', 'Avg']\nreg_opt = [50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 2, 1, 0]\nbio_opt = [20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5]\nloop_opt = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different colors and line styles\nax.plot(categories, reg_opt, label='RegOpt', color='green', linestyle='-', linewidth=2)\nax.plot(categories, bio_opt, label='BIOPt', color='yellow', linestyle='--', linewidth=2)\nax.plot(categories, loop_opt, label='LoopOpt', color='blue', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage (%)')\nax.set_title('Comparison of Optimization Techniques')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to the plot\nax.legend(loc='upper right')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Llama2', 'Mistral']\nvalues = [np.array([5.52, 5.53, 5.83, 5.54, 5.84]), np.array([6.57, 6.75, 6.81, 7.08, 6.9])]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot bars for each category\nfor i, (category, values) in enumerate(zip(categories, values)):\n    ax.bar(range(len(values)), values, color=colors[i], label=category, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('MT-Bench Score')\nax.set_title('Comparison of MT-Bench Scores Across Categories')\n\n# Set x-ticks and labels\nax.set_xticks(range(len(values)))\nax.set_xticklabels(['Random', 'Uniform', 'G2S', 'S2G', 'ClusterClip'])\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Category')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([100, 1000])\ny1 = np.array([49.98, 49.63])\ny2 = np.array([51.05, 50.74])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Random Sampling', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='ClusterClip', color='orange', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\nax.set_title('Comparison of MMLU Scores for Different Sampling Techniques')\n\n# Add a legend\nax.legend()\n\n# Set grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set x-axis limits\nax.set_xlim(0, 1100)\n\n# Set y-axis limits\nax.set_ylim(45, 53)\n\n# Annotate the points\nfor i, txt in enumerate(y1):\n    ax.annotate(f'{txt:.2f}', (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nfor i, txt in enumerate(y2):\n    ax.annotate(f'{txt:.2f}', (x[i], y2[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['ResNet18', 'AlexNet', 'ResNet50']\nperturbations = [0, 50, 48, 75, 68, 87.5, 78]\nspeedups = [\n    [1.0, 1.8, 2.6, 3.3, 4.6, 4.5, 7.4],\n    [1.0, 1.9, 2.9, 3.4, 5.2, 6.1, 8.7],\n    [1.0, 1.6, 2.7, 2.8, 3.9, 4.3, 4.3]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#66B3FF', '#99FF99']\n\n# Plot bars for each category\nfor i, category in enumerate(categories):\n    x = np.arange(len(perturbations))\n    width = 0.2\n    ax.bar(x + i * width, speedups[i], width, label=category, color=colors[i])\n\n# Set labels and title\nax.set_xlabel('Perturbation (%)')\nax.set_ylabel('Speedup')\nax.set_title('Speedup of Different Models under Various Perturbations')\nax.set_xticks(x + width)\nax.set_xticklabels(perturbations)\nax.legend()\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\ncorrect_values = [85, 75, 65, 55, 45, 35]\ncounterfeit_passing_values = [20, 15, 10, 5, 3, 2]\ncounterfeit_failing_values = [5, 10, 15, 20, 25, 30]\nconfused_values = [10, 15, 20, 25, 30, 35]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title and labels\nax.set_title('LeetCode, DS-6.7b')\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy')\n\n# Define colors for each bar\ncolors = ['#90EE90', '#ADD8E6', '#FF6347', '#87CEEB']\n\n# Plot the bars with different colors and add labels\nbar_width = 0.2\nindex = np.arange(len(categories))\n\n# Plot each dataset as a separate bar group\nbars_correct = ax.bar(index, correct_values, bar_width, label='Correct', color=colors[0])\nbars_counterfeit_passing = ax.bar(index + bar_width, counterfeit_passing_values, bar_width, label='Counterfeit (Test-Passing)', color=colors[1])\nbars_counterfeit_failing = ax.bar(index + 2 * bar_width, counterfeit_failing_values, bar_width, label='Counterfeit (Test-Failing)', color=colors[2])\nbars_confused = ax.bar(index + 3 * bar_width, confused_values, bar_width, label='Confused (Test-Failing)', color=colors[3])\n\n# Add labels on top of each bar\nfor i, v in enumerate(correct_values):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom', fontsize=10)\nfor i, v in enumerate(counterfeit_passing_values):\n    ax.text(i + bar_width, v + 1, str(v), ha='center', va='bottom', fontsize=10)\nfor i, v in enumerate(counterfeit_failing_values):\n    ax.text(i + 2 * bar_width, v + 1, str(v), ha='center', va='bottom', fontsize=10)\nfor i, v in enumerate(confused_values):\n    ax.text(i + 3 * bar_width, v + 1, str(v), ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend()\n\n# Set x-axis ticks and labels\nax.set_xticks(index + 1.5 * bar_width)\nax.set_xticklabels(categories)\n\n# Set y-axis limits\nax.set_ylim(0, 100)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nrecost_wins = [53, 80, 116, 99, 179]\ntie_wins = [6, 33, 49, 50, 23]\nalpacawins_wins = [21, 67, 53, 103, 98]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for each category\nbars1 = ax.bar(index - bar_width, recost_wins, bar_width, label='Recost (1% wins)', color='#FF4500')\nbars2 = ax.bar(index, tie_wins, bar_width, label='Tie', color='#FFFF00')\nbars3 = ax.bar(index + bar_width, alpacawins_wins, bar_width, label='Alpaca wins', color='#ADD8E6')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Model')\nax.set_ylabel('Wins')\nax.set_title('Comparison of Model Wins')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'Alti+', 'Max', 'STARE']\nnon_aggregate_values = [35.15, 26.86, 19.08, 22.09, 20.67, 17.06, 38.38, 58.99, 66.19, 70.8]\naggregate_values = [42.5, 26.38, 23.9, 26.06, 62.94, 48.38, 66.19, 58.99, 66.19, 70.8]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot area\nax.set_facecolor('#f0f0f0')\n\n# Plot the data with different colors and styles\nbars = ax.bar(categories, non_aggregate_values, color='#66b3ff', label='Non-Aggregation', edgecolor='black')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\nbars = ax.bar(categories, aggregate_values, bottom=non_aggregate_values, color='#ff9999', label='Aggregation', edgecolor='black')\nfor bar in bars:\n    yval = bar.get_height() + non_aggregate_values[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('FPR@90TPR', fontsize=12)\nax.set_title('FPR@90TPR on Guerreo et al. 2022', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set grid lines\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Set x-axis limits and ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Set y-axis limits\nax.set_ylim(0, 80)\n\n# Add a horizontal line at the median value\nmedian_value = np.median(non_aggregate_values + aggregate_values)\nax.axhline(y=median_value, color='gray', linestyle='--', linewidth=1, label=f'Median: {round(median_value, 2)}')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [140, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1, 0.5, 0.3, 0.2, 0.1]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Relative Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=8)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['5', '10', '20']\ntruthful_recall = [66.3, 61.9, 53.8]\nmisleading_recall = [10.1, 13.6, 13.7]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the data\nbars = ax.bar(categories, truthful_recall, color=colors[0], label='Truthful Recall')\nax.bar(categories, misleading_recall, bottom=truthful_recall, color=colors[1], label='Misleading Recall')\n\n# Add labels and title\nax.set_xlabel('Time (in minutes)')\nax.set_ylabel('Score')\nax.set_title('Comparison of Truthful and Misleading Recall Scores Over Time')\nax.set_xticks(categories)\nax.set_xticklabels(['5 min', '10 min', '20 min'])\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for better readability\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmodels = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SCIQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComQC', 'ComQC2.0', 'CyC', 'Winogrande', 'Com2Sense', 'CODAH', 'ARC-challenge', 'SocialIQA', 'SWAG']\nda_acc_blue = [-3.4, -2.1, -2.9, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2.0, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4]\nda_acc_orange = [-1.3, -1.2, -1.1, -1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles\nax.plot(models, da_acc_blue, marker='o', linestyle='-', color='b', label=r'$\\Delta$Acc $< -1$', linewidth=2)\nax.plot(models, da_acc_orange, marker='s', linestyle='--', color='orange', label=r'$\\Delta$Acc $\\leq -1$', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('\u0394Acc (with respect to Vicuna)')\nax.set_title('Model = Vicuna')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = [\n    \"LSTM-2/7b/v0.1\", \"Zephyr-7b/v0.1\", \"Qwen-7b/v0.1\", \"Qwen-7b/v0.2\", \"Qwen-7b/v0.3\", \"Qwen-7b/v0.4\"\n]\nperformance_scores = [\n    [48.1, 57.2, 59.3, 64.9, 72.3, 79.1],\n    [56.0, 62.2, 64.4, 66.4, 67.6, 90.2],\n    [56.0, 62.2, 64.4, 66.4, 67.6, 90.2],\n    [56.0, 62.2, 64.4, 66.4, 67.6, 90.2],\n    [56.0, 62.2, 64.4, 66.4, 67.6, 90.2],\n    [56.0, 62.2, 64.4, 66.4, 67.6, 90.2]\n]\ngpt4_scores = [\n    [74.4, 75.8, 75.8, 76.8, 76.8, 77.7],\n    [74.4, 75.8, 75.8, 76.8, 76.8, 77.7],\n    [74.4, 75.8, 75.8, 76.8, 76.8, 77.7],\n    [74.4, 75.8, 75.8, 76.8, 76.8, 77.7],\n    [74.4, 75.8, 75.8, 76.8, 76.8, 77.7],\n    [74.4, 75.8, 75.8, 76.8, 76.8, 77.7]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the bar width and positions\nbar_width = 0.35\nindex = np.arange(len(categories))\n\n# Plot bars for performance scores\nbars1 = ax.bar(index - bar_width / 2, performance_scores[0], bar_width, label='Performance Score', color='skyblue')\nbars2 = ax.bar(index + bar_width / 2, gpt4_scores[0], bar_width, label='GPT4 Score', color='orange')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Scores (%)')\nax.set_title('Comparison of Performance and GPT4 Scores')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Categories and their values for two different types of products\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFPG', 'AFPK', 'AFPO', 'AFPR', 'AFSC', 'AFSL', 'AFTH', 'AFVT', 'AFWS', 'DAH', 'IC', 'SS']\ngpt3_values = [25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ngpt4_values = [10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25, 20, 15]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different colors and styles\nbars = ax.bar(categories, gpt3_values, color='royalblue', label='GPT-3.5-Turbo')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(categories, gpt4_values, bottom=gpt3_values, color='orange', label='GPT-4')\nfor bar in bars:\n    yval = bar.get_height() + gpt3_values[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Non-Normalized NLAs')\nax.set_title('Comparison of GPT-3.5-Turbo and GPT-4 Performance')\nax.legend()\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Scores for different models and constraint words\nconstraint_words = [3, 5, 7, 10]\nscores_llama_default = [-4.2, -3.8, -3.5, -3.0]\nscores_llama_hag = [-4.5, -4.0, -3.7, -3.2]\nscores_vicuna_default = [-4.0, -3.6, -3.3, -2.8]\nscores_vicuna_hag = [-4.3, -3.9, -3.6, -3.1]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with different colors and line styles\nax.plot(constraint_words, scores_llama_default, label='LLAMA-Default', color='pink', linestyle='-', marker='o')\nax.plot(constraint_words, scores_llama_hag, label='LLAMA-HAG', color='red', linestyle='--', marker='s')\nax.plot(constraint_words, scores_vicuna_default, label='Vicuna-Default', color='lightblue', linestyle='-.', marker='^')\nax.plot(constraint_words, scores_vicuna_hag, label='Vicuna-HAG', color='darkblue', linestyle=':', marker='D')\n\n# Set labels and title\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\nax.set_title('Comparison of Models on Different Constraint Word Counts')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the data\nax.legend()\n\n# Set the y-axis limits to ensure all data points are visible\nax.set_ylim(-5, 0)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nvalues = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data as a bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage (%)')\nax.set_title('Human Study')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10)\n\n# Set the x-axis limits to ensure all categories are visible\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['HH', 'Reddit', 'IMDB', 'AVG']\nwin_values = [22, 25, 30, 26]\ntie_values = [50, 40, 60, 50]\nlose_values = [28, 35, 10, 24]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for each category\nbars1 = ax.bar(index - bar_width, win_values, bar_width, label='Win', color='darkred')\nbars2 = ax.bar(index, tie_values, bar_width, label='Tie', color='orange')\nbars3 = ax.bar(index + bar_width, lose_values, bar_width, label='Lose', color='lightcoral')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('COPR v.s. Golden (Human Eval)', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(categories, fontsize=10)\nax.legend(fontsize=10)\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Accuracy', 'Unfairness']\nmovielens_scores = [32, 10]\ntenrec_scores = [18, 10]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Define colors for better visual appeal\ncolors = ['#4daf4a', '#377eb8']\n\n# Plot bars for Movielens dataset\nax.bar(categories, movielens_scores, color=colors[0], label='Movielens')\n\n# Plot bars for Tenrec dataset\nax.bar(categories, tenrec_scores, bottom=movielens_scores, color=colors[1], label='Tenrec')\n\n# Set labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Scores')\nax.set_title('Comparison of Metrics Across Datasets')\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\nmethods = ['ImageNet-1k', 'PAC-FNO', 'PAC-FNO']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot bars with different colors and add labels\nfor i, resolution in enumerate(resolutions):\n    ax.bar(resolution, accuracies[i], color=colors[i % len(colors)], label=methods[i])\n\n# Set labels and title\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Accuracy (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Add a legend\nax.legend(title='Method')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Set y-axis limits\nax.set_ylim(0, 100)\n\n# Add annotations for each bar\nfor i, resolution in enumerate(resolutions):\n    ax.annotate(f'{accuracies[i]}%', \n                xy=(resolution, accuracies[i]), \n                xytext=(resolution, accuracies[i] + 1), \n                textcoords=\"offset points\", \n                ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Level 1', 'Level 2', 'Level 4']\nvalues = [50.0, 50.0, 50.0]\nsub_values = [\n    [30.0, 22.0, 16.8],\n    [28.0, 20.6, 16.8],\n    [22.9, 16.8, 16.8]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Set the bar width and positions\nbar_width = 0.2\nindex = np.arange(len(categories))\n\n# Plot bars for each category\nbars = []\nfor i, sub_val in enumerate(sub_values):\n    bars.append(ax.bar(index + i * bar_width, sub_val, bar_width, label=f'ETA {i+1}', color=plt.cm.tab20(i)))\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Values Across Categories')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories)\n\n# Add legend\nax.legend()\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nx = np.arange(len(categories))\ny1 = [39.4, 32.84, 26.82]\ny2 = [35.18, 33.58, 30.84]\ny3 = [30, 28.0, 24.27]\ny4 = [22.4, 22, 22]\ny5 = [20.84, 20, 16]\ny6 = [19.66, 19, 14]\ny7 = [18.6, 12, 10]\ny8 = [17, 9, 7]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot each dataset with different colors and styles\nbars1 = ax.bar(x - 0.3, y1, width=0.1, color='tab:orange', label='Dataset 1')\nbars2 = ax.bar(x - 0.2, y2, width=0.1, color='tab:blue', label='Dataset 2')\nbars3 = ax.bar(x - 0.1, y3, width=0.1, color='tab:green', label='Dataset 3')\nbars4 = ax.bar(x + 0.0, y4, width=0.1, color='tab:red', label='Dataset 4')\nbars5 = ax.bar(x + 0.1, y5, width=0.1, color='tab:purple', label='Dataset 5')\nbars6 = ax.bar(x + 0.2, y6, width=0.1, color='tab:brown', label='Dataset 6')\nbars7 = ax.bar(x + 0.3, y7, width=0.1, color='tab:pink', label='Dataset 7')\nbars8 = ax.bar(x + 0.4, y8, width=0.1, color='tab:cyan', label='Dataset 8')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Reward Values', fontsize=12)\nax.set_title('Comparison of Reward Values Across Categories', fontsize=14)\nax.set_xticks(x)\nax.set_xticklabels(categories, rotation=45, ha='right')\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Cleaning / Laundry', 'Crafting/ Knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/ Renovation', 'Household Management', 'Scooter Mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 50, round(yval), ha='center', va='bottom', fontsize=10)\n\n# Set title and labels\nax.set_title('Number of Videos by Profession', fontsize=16, fontweight='bold')\nax.set_xlabel('Profession', fontsize=12)\nax.set_ylabel('Number of Videos', fontsize=12)\n\n# Customize the x-axis tick labels\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Greeting', 'Request', 'Criticism', 'Apology', 'Persuasion', 'Thanking', 'Leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Define colors for the bars\ncolors = ['#FF6F61', '#88B04B', '#FFD347', '#DAF7A6', '#FF9F40', '#74C7EC', '#C44E52']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with error bars\nbars = ax.bar(categories, synthetic_data, color=colors, label='Synthetic data')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\n# Add error bars for human-authored data\nerror_bars = ax.errorbar(categories, human_authored_data, yerr=0, fmt='o', color='black', capsize=5, label='Human-authored data')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Synthetic and Human-Authored Data')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'tiny', 'small', 'substantial', 'tall', 'short', 'medium', 'long', 'high', 'low']\nhuman_distribution = [0.25, 0.22, 0.18, 0.16, 0.14, 0.12, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01]\nmodel_distribution = [0.28, 0.24, 0.20, 0.18, 0.16, 0.14, 0.13, 0.12, 0.11, 0.10, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the background color of the plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the title and labels with improved styling\nax.set_title('Context: The human body can tolerate only a', fontsize=16, fontweight='bold')\nax.set_xlabel('Word', fontsize=12)\nax.set_ylabel('Probability', fontsize=12)\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(categories, human_distribution, color='#ff9999', edgecolor='black', label='Human Distribution')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\nbars = ax.bar(categories, model_distribution, bottom=human_distribution, color='#66b3ff', edgecolor='black', label='Model Distribution')\nfor bar in bars:\n    yval = bar.get_height() + human_distribution[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=12)\n\n# Adjust the layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Convertible', 'Coupe', 'Sedan', 'Truck', 'SUV']\nvalues = [0.15, 0.35, 0.25, 0.4, 0.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Set the bar width and positions\nbar_width = 0.5\nindex = np.arange(len(categories))\n\n# Plot bars with different colors and edge colors\nbars = ax.bar(index, values, bar_width, color=['yellow', 'green', 'purple', 'blue', 'orange'], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xticks(index)\nax.set_xticklabels(categories)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(emotions, frequencies, color='darkred')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Emotion', fontsize=12)\nax.set_ylabel('Frequency (%)', fontsize=12)\nax.set_title('Emotion Frequency Distribution', fontsize=14, fontweight='bold')\n\n# Customize the x-axis tick labels\nax.set_xticklabels(emotions, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideo_counts = [450, 300, 500, 600, 700, 800]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the bar chart with customized colors and edge colors\nbars = ax.bar(professions, video_counts, color=['#FF6347', '#FFA500', '#FFD700', '#90EE90', '#ADD8E6', '#87CEEB'], edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, int(yval), ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('Number of Videos by Profession', fontsize=14, fontweight='bold')\nax.set_xlabel('Profession', fontsize=12)\nax.set_ylabel('Number of Videos', fontsize=12)\n\n# Customize the x-axis tick labels\nax.set_xticklabels(professions, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nus_values = [37, 12, 18, 42, 28, 39, 36]\nchina_values = [10, 15, 10, 25, 15, 20, 25]\neu_values = [15, 10, 15, 30, 20, 25, 30]\nbrazil_values = [5, 5, 5, 10, 10, 15, 20]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#FF0000', '#0000FF', '#FFFF00', '#008000', '#800080', '#FFA500', '#00FFFF']\n\n# Plot the bars with different colors and add labels\nbars = ax.bar(categories, us_values, color=colors[0], label='US')\nax.bar(categories, china_values, bottom=us_values, color=colors[1], label='China')\nax.bar(categories, eu_values, bottom=[sum(x) for x in zip(us_values, china_values)], color=colors[2], label='EU')\nax.bar(categories, brazil_values, bottom=[sum(x) for x in zip(us_values, china_values, eu_values)], color=colors[3], label='Brazil')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Economic Indicators by Category')\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [55, 45, 35, 25, 15, 5]\ngood = [40, 30, 20, 10, 5, 0]\nmoderate = [30, 20, 10, 5, 0, 0]\npoor = [20, 10, 5, 0, 0, 0]\nvery_poor = [10, 5, 0, 0, 0, 0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#FFA500', '#808080', '#ADD8E6', '#00BFFF']\n\n# Plot the bars with different colors and add labels\nbars = ax.bar(categories, excellent, color=colors[0], label='Excellent')\nax.bar(categories, good, bottom=excellent, color=colors[1], label='Good')\nax.bar(categories, moderate, bottom=[sum(x) for x in zip(excellent, good)], color=colors[2], label='Moderate')\nax.bar(categories, poor, bottom=[sum(x) for x in zip(excellent, good, moderate)], color=colors[3], label='Poor')\nax.bar(categories, very_poor, bottom=[sum(x) for x in zip(excellent, good, moderate, poor)], color=colors[4], label='Very Poor')\n\n# Add title and labels\nax.set_title('Quality of Life by City', fontsize=16, fontweight='bold')\nax.set_xlabel('City', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Quality', loc='upper right', fontsize=10)\n\n# Set y-axis limits\nax.set_ylim(0, 70)\n\n# Add annotations for better data visualization\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 75, 70, 65, 60, 55, 50]\nnegative_differences = [20, 15, 10, 5, 0, -5, -10]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the x-axis limits and ticks\nx = np.arange(len(categories))\nbar_width = 0.35\n\n# Plot the positive differences\nbars_pos = ax.bar(x - bar_width/2, positive_differences, bar_width, label='Positive Differences', color='darkred')\n\n# Plot the negative differences\nbars_neg = ax.bar(x + bar_width/2, negative_differences, bar_width, label='Negative Differences', color='darkgreen')\n\n# Add labels and title\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xticks(x)\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nax.legend()\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for better readability\nfor bar in bars_pos:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nfor bar in bars_neg:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval - 1, round(yval, 1), ha='center', va='top', fontsize=10)\n\n# Set the y-axis limits\nax.set_ylim(-20, 90)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart with customized colors and edge colors\nbars = ax.bar(emotions, frequencies, color='skyblue', edgecolor='black')\n\n# Add labels and title with enhanced font sizes\nax.set_xlabel('Emotion', fontsize=12)\nax.set_ylabel('Frequency (%)', fontsize=12)\nax.set_title('Emotion Frequency Distribution', fontsize=14)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'CaseR', 'GRU4Rec']\nvalues = [19.7, 4.8, -8.5, -15.9, 19.7]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits and ticks\nax.set_xlim(-20, 20)\nax.set_xticks(np.arange(-20, 21, 5))\n\n# Set the y-axis limits and ticks\nax.set_ylim(-20, 20)\nax.set_yticks(np.arange(-20, 21, 5))\n\n# Set labels for axes\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\n\n# Set title of the plot\nax.set_title('Sample Plot Title')\n\n# Plot the data with error bars\nbars = ax.bar(categories, values, color='skyblue', edgecolor='black', alpha=0.7)\n\n# Add error bars to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom')\n\n# Add grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['Patents Filed', 'Research Investment', 'Smartphone Usage', 'Internet Penetration']\nvalues = [2700, 2400, 2600, 3100]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#FF6F61', '#88B04B', '#7DCEA0', '#5DADE2']\n\n# Plot the data with bars\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 100, round(yval, 1), ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Comparison of Key Metrics', fontsize=16, fontweight='bold')\nax.set_xlabel('Metrics', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Greeting', 'Request', 'Criticism', 'Apology', 'Persuasion', 'Thanking', 'Leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the data with bars\nbars = ax.bar(categories, synthetic_data, color=colors, label='Synthetic data')\nax.bar(categories, human_authored_data, bottom=synthetic_data, color=[c for c in colors if c != '#1f77b4'], label='Human-authored data')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.legend()\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\ntime_0 = [0.4, 0.5, 0.3, 0.2, 0.6]\ntime_20 = [0.3, 0.4, 0.2, 0.1, 0.5]\ntime_40 = [0.2, 0.3, 0.1, 0.05, 0.4]\ntime_60 = [0.1, 0.2, 0.05, 0.02, 0.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each category\ncolors = ['#0000FF', '#008000', '#FF0000', '#FFFF00', '#800080']\n\n# Plot bars for each category\nbars = []\nfor i, category in enumerate(categories):\n    bar = ax.bar(i, time_0[i], color=colors[i], label=category)\n    bars.append(bar)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Scores by Time Over')\nax.set_title('Scores by Category Over Time')\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nregions = ['West', 'East', 'South', 'North']\nco2_levels = [40.44, 54.46, 92.15, 65.49]\npm_levels = [11.59, 25.36, 32.84, 22.89]\nso2_levels = [17.38, 32.19, 48.23, 37.12]\nno2_levels = [39.63, 36.03, 96.03, 66.49]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define colors for each region\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot bars for CO2 levels\nbars_co2 = ax.bar(regions, co2_levels, color=colors[0], label='CO2 (ppm)', edgecolor='black')\n\n# Plot bars for PM levels\nbars_pm = ax.bar(regions, pm_levels, bottom=co2_levels, color=colors[1], label='PM (\u00b5g/m\u00b3)', edgecolor='black')\n\n# Plot bars for SO2 levels\nbars_so2 = ax.bar(regions, so2_levels, bottom=[sum(x) for x in zip(co2_levels, pm_levels)], color=colors[2], label='SO2 (\u00b5g/m\u00b3)', edgecolor='black')\n\n# Plot bars for NO2 levels\nbars_no2 = ax.bar(regions, no2_levels, bottom=[sum(x) for x in zip(co2_levels, pm_levels, so2_levels)], color=colors[3], label='NO2 (\u00b5g/m\u00b3)', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Regions')\nax.set_ylabel('Air Quality Metrics by Region')\nax.set_title('Air Quality Metrics by Region')\nax.set_ylim(0, 100)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Add annotations for better readability\nfor bar in bars_co2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom')\n\nfor bar in bars_pm:\n    yval = bar.get_height() + sum([x for x in co2_levels])\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval - sum([x for x in co2_levels]), 2), ha='center', va='bottom')\n\nfor bar in bars_so2:\n    yval = bar.get_height() + sum([x for x in co2_levels]) + sum([x for x in pm_levels])\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval - sum([x for x in co2_levels]) - sum([x for x in pm_levels]), 2), ha='center', va='bottom')\n\nfor bar in bars_no2:\n    yval = bar.get_height() + sum([x for x in co2_levels]) + sum([x for x in pm_levels]) + sum([x for x in so2_levels])\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval - sum([x for x in co2_levels]) - sum([x for x in pm_levels]) - sum([x for x in so2_levels]), 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\nllama_default_scores = [-2.2, -1.8, -1.4, -0.6]\nllama_hag_scores = [-2.3, -1.7, -1.1, -0.7]\nvicuna_default_scores = [-3.3, -2.2, -1.9, -0.8]\nvicuna_hag_scores = [-3.2, -1.9, -1.9, -0.8]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#87CEEB', '#FFD700', '#ADD8E6']\n\n# Plot bars for each category\nbar_width = 0.2\nindex = np.arange(len(categories))\nbars1 = ax.bar(index, llama_default_scores, bar_width, label='LLAMA-Default', color=colors[0], edgecolor='black')\nbars2 = ax.bar(index + bar_width, llama_hag_scores, bar_width, label='LLAMA-HAG', color=colors[1], edgecolor='black')\nbars3 = ax.bar(index + 2 * bar_width, vicuna_default_scores, bar_width, label='Vicuna-Default', color=colors[2], edgecolor='black')\nbars4 = ax.bar(index + 3 * bar_width, vicuna_hag_scores, bar_width, label='Vicuna-HAG', color=colors[3], edgecolor='black')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Constraint Words', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Scores by Group and Constraint Word Count', fontsize=14, fontweight='bold')\nax.set_xticks(index + 1.5 * bar_width)\nax.set_xticklabels(categories, fontsize=10)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\ndef add_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nadd_labels(bars1)\nadd_labels(bars2)\nadd_labels(bars3)\nadd_labels(bars4)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['USA', 'China', 'Germany', 'Brazil']\nvalues_2018 = [-0.5, -0.3, -0.4, -0.7]\nvalues_2019 = [-0.4, -0.2, -0.3, -0.6]\nvalues_2020 = [-0.3, -0.1, -0.2, -0.5]\nvalues_2021 = [-0.2, 0.0, -0.1, -0.4]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#90EE90', '#ADD8E6', '#FFD700']\n\n# Plot bars with different styles and colors\nbar_width = 0.2\nindex = np.arange(len(categories))\nbars = []\n\nfor i, (v18, v19, v20, v21) in enumerate(zip(values_2018, values_2019, values_2020, values_2021)):\n    bar = ax.bar(index + i * bar_width, [v18, v19, v20, v21], bar_width, label=f'Year {2018 + i}', color=colors[i], edgecolor='black')\n    bars.append(bar)\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('GDP Growth Rate (%)')\nax.set_title('Negative GDP Growth Rates by Country and Year')\nax.set_xticks(index + bar_width * 1.5)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    for rect in bar:\n        height = rect.get_height()\n        ax.annotate(f'{height:.1f}',\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\npercentages = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(models, percentages, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Percentage (%)')\nax.set_title('Human Study')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10)\n\n# Set the x-axis limits to ensure all labels fit\nax.set_xticks(range(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 85]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot the bar chart with customized parameters\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, round(yval, 1), ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Stacked Bar Chart of Transportation Data', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Customize the x-axis tick labels\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a grid for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_data = [\n    [85, 60, 45, 30, 20, 10],\n    [70, 55, 40, 25, 15, 5],\n    [60, 45, 30, 15, 5, 0],\n    [50, 35, 20, 10, 0, 0],\n    [40, 25, 10, 0, 0, 0],\n    [30, 15, 5, 0, 0, 0],\n    [20, 10, 0, 0, 0, 0]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FF6666', '#FFFF99']\n\n# Plot the data with a stacked bar chart\nbottom = np.zeros(len(categories))\nfor i, data in enumerate(sales_data):\n    ax.bar(categories, data, bottom=bottom, color=colors[i], label=f'Product {chr(65 + i)} Sales')\n    bottom += data\n\n# Set labels and title\nax.set_xlabel('Product Categories')\nax.set_ylabel('Sales Units')\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(title='Legend')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [84.3, 9.12, 37.9]\nobserved_fgt = [9.44, -9.12, -3.67]\nfeature_embedding_distance = [0.83, 0.6, 0.11]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color palette\ncolors = ['#6a5acd', '#add8e6', '#ff6347']\n\n# Plot the data with error bars\nbars = ax.bar(categories, probing_fgt, color=colors[0], label='Probing FGT')\nax.errorbar(categories, probing_fgt, yerr=observed_fgt, fmt='o', color='black', capsize=5)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Feature Embedding Distance (%)')\nax.set_title('Comparison of Feature Embedding Distances')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['1', '2', '3', '4', '5', '6']\nscores_1 = [10, 8, 10, 10, 10, 10]\nscores_2 = [8, 5, 8, 8, 6, 8]\nscores_3 = [12, 15, 12, 12, 12, 15]\nscores_4 = [10, 10, 9, 10, 8, 7]\nscores_5 = [11, 11, 10, 10, 10, 10]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0', '#ffb3e6']\n\n# Plot bars for each category\nbars = []\nfor i, (score1, score2, score3, score4, score5) in enumerate(zip(scores_1, scores_2, scores_3, scores_4, scores_5)):\n    bar = ax.bar(categories[i], score1, color=colors[i], label=f'Score {i+1}')\n    bars.append(bar)\n\n# Add labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Add a legend\nax.legend(title='Score')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for better readability\nfor bar in bars:\n    for index, value in enumerate(bar):\n        height = value.get_height()\n        ax.annotate(f'{height}',\n                    xy=(value.get_x() + value.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n# Set y-axis limits\nax.set_ylim(0, 50)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet', 'perl']\nreg_opt = [95, 85, 75, 65, 55, 45, 35]\nbio_opt = [80, 70, 60, 50, 40, 30, 20]\nloop_opt = [70, 60, 50, 40, 30, 20, 10]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles and colors\nax.bar(categories, reg_opt, color='seagreen', label='RegOpt', edgecolor='black')\nax.bar(categories, bio_opt, bottom=reg_opt, color='gold', label='BIOPt', edgecolor='black')\nax.bar(categories, loop_opt, bottom=[sum(x) for x in zip(reg_opt, bio_opt)], color='royalblue', label='LoopOpt', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage (%)')\nax.set_title('Comparison of Optimization Techniques')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nlanguages = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance_improvement = [3.5, 2.3, 4.4, 1.3, 0.7]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bar chart\nbars = ax.bar(languages, performance_improvement, color=colors)\n\n# Add labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Model Performance Improvement [%]')\nax.set_title('Model Performance Improvement by Language')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis tick labels\nax.set_xticklabels(languages, rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\nfiscal_quarters = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, 4.6]\nnasdaq_index = [-0.6, -0.8, -1.0, -1.2, -1.2]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different colors and styles\nbars_dow = ax.bar(fiscal_quarters, dow_jones_index, color='green', label='Dow Jones Index')\nbars_nasdaq = ax.bar(fiscal_quarters, nasdaq_index, bottom=dow_jones_index, color='orange', label='Nasdaq Index')\n\n# Add labels and title\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\nax.set_title('Comparison of Dow Jones and Nasdaq Index Changes Over Fiscal Quarters')\nax.set_xticks(fiscal_quarters)\nax.set_xticklabels(fiscal_quarters)\nax.legend()\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars_dow:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom')\n\nfor bar in bars_nasdaq:\n    yval = bar.get_height() + dow_jones_index[bars_nasdaq.index(bar)]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\nvalues = [\n    [39.4, 35.18, 34.06, 30.84],\n    [35.18, 32.84, 20.84, 16],\n    [32.84, 20.84, 14.84, 14],\n    [30.84, 14.84, 12, 14]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, [np.mean(val) for val in values], color='skyblue', edgecolor='black')\n\n# Add error bars to represent the standard deviation\nfor i, bar in enumerate(bars):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{np.std(values[i]):.2f}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Series Labels')\nax.set_ylabel('Reward Values')\nax.set_title('Comparison of Reward Values Across Series')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nax.legend(['Mean Value'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['Misleading:2:0', 'Misleading:3:0', 'Misleading:4:0', 'Misleading:5:0']\ntruthful_recall = [46.3, 57.9, 53.8, 43.7]\nmisleading_recall = [30.1, 34, 20, 19.4]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#FF6F61', '#6A0DAD']\n\n# Plot the data\nbars = ax.bar(categories, truthful_recall, color=colors[0], label='Truthful Recall')\nax.bar(categories, misleading_recall, bottom=truthful_recall, color=colors[1], label='Misleading Recall')\n\n# Add labels and title\nax.set_xlabel('Misleading:Recall')\nax.set_ylabel('Percentage')\nax.set_title('Truthful:Misleading = 2:0')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for better readability\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year = [250, 300, 400, 150]\nprevious_year = [200, 280, 350, 100]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for the current year\nbars1 = ax.bar(index - bar_width/2, current_year, bar_width, label='Current Year', color='skyblue', edgecolor='black')\n\n# Plot the bars for the previous year\nbars2 = ax.bar(index + bar_width/2, previous_year, bar_width, label='Previous Year', color='orange', edgecolor='black')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Industry Sectors')\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\nax.set_title('Environmental Impact by Sector')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, round(yval, 1), ha='center', va='bottom')\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 14, 16, 18, 20]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(cities, temperatures, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Cities')\nax.set_ylabel('Average Temperature (\u00b0C)')\nax.set_title('Average City Temperatures')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}\u00b0C', ha='center', va='bottom')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [150, 140, 160, 170]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different styles\nax.bar(regions, emissions_2020, color='darkred', label='2020 Emissions', edgecolor='black')\nax.bar(regions, emissions_2021, bottom=emissions_2020, color='royalblue', label='2021 Emissions', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Regions', fontsize=12)\nax.set_ylabel('Annual Pollution Emissions', fontsize=12)\nax.set_title('Annual Pollution Emission Reductions', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set y-axis limits\nax.set_ylim(0, 200)\n\n# Annotate each bar with its value\nfor i, v in enumerate(emissions_2020):\n    ax.text(i, v + 5, str(v), ha='center', va='bottom', fontsize=10, color='white')\nfor i, v in enumerate(emissions_2021):\n    ax.text(i, v + emissions_2020[i] + 5, str(v), ha='center', va='bottom', fontsize=10, color='white')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5']\nresponses = [\n    [26.0, 10.0, 17.0, 10.0, 10.0],\n    [32.0, 10.0, 29.0, 15.0, 15.0],\n    [37.0, 22.0, 35.0, 32.0, 26.0],\n    [33.0, 12.0, 19.0, 15.0, 14.0],\n    [40.0, 11.0, 29.0, 13.0, 21.0]\n]\n\n# Define colors for each category\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with bars\nbars = ax.bar(categories, [sum(row) for row in responses], color=colors)\n\n# Add labels and title\nax.set_xlabel('Questions')\nax.set_ylabel('Percentage')\nax.set_title('Responses to Questions')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}%', ha='center', va='bottom')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of models for different numbers of super-families in training dataset\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([0.95, 0.92, 0.88, 0.85, 0.82, 0.78, 0.75, 0.72, 0.69, 0.66])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with a solid line and markers\nplt.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Add a title and labels\nplt.title('Model Accuracy vs. Number of Super-Families in Training Dataset', fontsize=14)\nplt.xlabel('Number of Super-Families in Training Dataset', fontsize=12)\nplt.ylabel('Model Accuracy', fontsize=12)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a horizontal line at y=0.5 to indicate a threshold\nplt.axhline(y=0.5, color='r', linestyle='--', linewidth=1)\n\n# Add annotations to highlight key points\nfor i, txt in enumerate(y):\n    plt.annotate(f'{txt:.2f}', (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Scores for different models and constraint words\nmodels = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nconstraint_words = [3, 5, 7, 10]\nscores = [\n    [0.8, 0.6, 0.4, 0.2],  # LLAMA-Default scores\n    [0.9, 0.7, 0.5, 0.3],  # LLAMA-HAG scores\n    [0.6, 0.4, 0.2, 0.1],  # Vicuna-Default scores\n    [0.7, 0.5, 0.3, 0.2]   # Vicuna-HAG scores\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with error bars\nbar_width = 0.2\nindex = np.arange(len(constraint_words))\nopacity = 0.8\n\nbars = []\nfor i, model_scores in enumerate(scores):\n    bars.append(ax.bar(index + i * bar_width, model_scores, bar_width,\n                        alpha=opacity, color=plt.cm.tab20(i),\n                        label=models[i], edgecolor='black'))\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Number of Constraint Words')\nax.set_ylabel('Score')\nax.set_title('Comparison of Models on Different Constraint Word Counts')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(constraint_words)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\nca_recall = [46.3, 56.9, 53.8, 19.4]\nca_b_recall = [34, 34, 40, 27]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for CaA Recall\nbars_ca_recall = ax.bar(index - bar_width/2, ca_recall, bar_width, label='CaA Recall', color='blue')\n\n# Plot the bars for CaB Recall\nbars_ca_b_recall = ax.bar(index + bar_width/2, ca_b_recall, bar_width, label='CaB Recall', color='green')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Misleading Recall')\nax.set_title('Truthful: Misleading Recall = 2:0')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars_ca_recall)\nadd_value_labels(bars_ca_b_recall)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Convertible', 'Coupe', 'SUV', 'Sedan']\nvalues = [25, 28, 22, 18]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars with custom colors and edge colors\nbars = ax.bar(index, values, bar_width, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xticks(index)\nax.set_xticklabels(categories)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\n# Add a grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\ndisapprovals = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunbothered = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different colors and styles\nbars_disapproval = ax.bar(emotions, disapprovals, color='red', label='Disapproval')\nbars_joy = ax.bar(emotions, joy, bottom=disapprovals, color='orange', label='Joy')\nbars_relief = ax.bar(emotions, relief, bottom=[d + j for d, j in zip(disapprovals, joy)], color='yellow', label='Relief')\nbars_gratitude = ax.bar(emotions, gratitude, bottom=[d + j + r for d, j, r in zip(disapprovals, joy, relief)], color='green', label='Gratitude')\nbars_annoyance = ax.bar(emotions, annoyance, bottom=[d + j + r + g for d, j, r, g in zip(disapprovals, joy, relief, gratitude)], color='cyan', label='Annoyance')\nbars_nervousness = ax.bar(emotions, nervousness, bottom=[d + j + r + g + a for d, j, r, g, a in zip(disapprovals, joy, relief, gratitude, annoyance)], color='magenta', label='Nervousness')\nbars_pride = ax.bar(emotions, pride, bottom=[d + j + r + g + a + n for d, j, r, g, a, n in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness)], color='brown', label='Pride')\nbars_sadness = ax.bar(emotions, sadness, bottom=[d + j + r + g + a + n + p for d, j, r, g, a, n, p in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness, pride)], color='gray', label='Sadness')\nbars_unbothered = ax.bar(emotions, unbothered, bottom=[d + j + r + g + a + n + p + s for d, j, r, g, a, n, p, s in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], color='pink', label='Unbothered')\nbars_amusement = ax.bar(emotions, amusement, bottom=[d + j + r + g + a + n + p + s + u for d, j, r, g, a, n, p, s, u in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unbothered)], color='purple', label='Amusement')\n\n# Add labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency Metric 1 (%)')\nax.set_title('Emotion Frequency Distribution')\nax.set_xticks(range(len(emotions)))\nax.set_xticklabels(emotions, rotation=45, ha='right')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores_time_0 = [0.4, 0.3, 0.5, 0.6, 0.7]\nscores_time_20 = [0.2, 0.3, 0.4, 0.5, 0.6]\nscores_time_40 = [0.1, 0.2, 0.3, 0.4, 0.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the chart\nax.set_title('Scores at Different Times', fontsize=16, fontweight='bold')\n\n# Set the x-axis label\nax.set_xlabel('Categories', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Score', fontsize=12)\n\n# Set the tick parameters for better visibility\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Define colors for each category\ncolors = ['#6a9bd2', '#e377c2', '#7f7f7f', '#bcbd22', '#1f77b4']\n\n# Plot the data with bars\nbars = ax.bar(categories, scores_time_0, color=colors, edgecolor='black', label='Score at Time 0')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Japan', 'Australia', 'Canada', 'Germany']\nvalues = [1600, 1700, 1500, 1900]\ncolors = ['#FF6347', '#FFD700', '#ADD8E6', '#90EE90']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart with customized colors and edge colors\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Total Energy Consumption (10^2 PJ)')\nax.set_title('Energy Consumption by Country')\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 50, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis limits to ensure all categories are visible\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Set the y-axis limits to provide some padding\nax.set_ylim(0, max(values) * 1.1)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color=colors, label='Synthetic data')\nfor i, v in enumerate(synthetic_data):\n    ax.text(i, v + 0.5, str(v), ha='center', va='bottom')\n\nax.bar(categories, human_authored_data, bottom=synthetic_data, color=[c for c in colors if c != '#1f77b4'], label='Human-authored data')\nfor i, v in enumerate(human_authored_data):\n    ax.text(i, synthetic_data[i] + v + 0.5, str(v), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.legend()\n\n# Set x-ticks rotation for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Beauty', 'Yelp', 'More']\nvalues = [5.1, 6, 19.7]\n\n# Define colors for each category\ncolors = ['#FF6347', '#4682B4', '#90EE90']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=12)\n\n# Set labels and title\nax.set_xlabel('Categories', fontsize=14)\nax.set_ylabel('Percentage', fontsize=14)\nax.set_title('Comparison of Categories', fontsize=16, fontweight='bold')\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\nvicuna_hag_scores = [-3.2, -3.3, -2.3, -2.2]\nvicuna_default_scores = [-3.3, -2.2, -2.3, -2.2]\nllama_hag_scores = [-3.2, -3.3, -2.3, -2.2]\nllama_default_scores = [-3.3, -2.2, -2.3, -2.2]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each category\ncolors = ['#FF6F61', '#88B04B', '#2A9D8F', '#E7C04C']\n\n# Plot the bars for each category\nbars1 = ax.bar(categories, vicuna_hag_scores, color=colors[0], label='Vicuna-HAG')\nbars2 = ax.bar(categories, vicuna_default_scores, bottom=vicuna_hag_scores, color=colors[1], label='Vicuna-Default')\nbars3 = ax.bar(categories, llama_hag_scores, bottom=[sum(x) for x in zip(vicuna_hag_scores, vicuna_default_scores)], color=colors[2], label='LLAMA-HAG')\nbars4 = ax.bar(categories, llama_default_scores, bottom=[sum(x) for x in zip(vicuna_hag_scores, vicuna_default_scores, llama_hag_scores)], color=colors[3], label='LLAMA-Default')\n\n# Add labels and title\nax.set_xlabel('Constraint Words')\nax.set_ylabel('Score by Group')\nax.set_title('Scores by Group and Constraint Word Count')\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\nadd_value_labels(bars4)\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of models over different numbers of super-families in training dataset\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3])\ny2 = np.array([0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y1, marker='o', linestyle='-', color='b', label='Model 1')\nax.plot(x, y2, marker='s', linestyle='--', color='r', label='Model 2')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Number of Super-Families in Training Dataset', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\nax.set_title('Comparison of Model Accuracy Across Different Super-Family Sizes', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0.2, 1.0, 0.1))\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nmanual_mapping = [50, 30, 40, 20, 70]\nllm_revision_wcot = [80, 60, 70, 40, 90]\nllm_revision_wcoty = [60, 40, 50, 30, 80]\nverifner = [30, 10, 20, 10, 40]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different colors and styles\nbars1 = ax.bar(categories, manual_mapping, color='pink', label='Manual Mapping')\nbars2 = ax.bar(categories, llm_revision_wcot, bottom=manual_mapping, color='orange', label='LLM-revision w/CoT')\nbars3 = ax.bar(categories, llm_revision_wcoty, bottom=[x + y for x, y in zip(manual_mapping, llm_revision_wcot)], color='lightgreen', label='LLM-revision w/CoTy')\nbars4 = ax.bar(categories, verifner, bottom=[x + y + z for x, y, z in zip(manual_mapping, llm_revision_wcot, llm_revision_wcoty)], color='lightblue', label='VeriFNER')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Error correction rate (%)')\nax.set_title('GENIA')\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        height = bar.get_height()\n        ax.annotate(f'{height}',\n                    xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\nadd_value_labels(bars4)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscore_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscore_b = [15.0, 10.0, 5.0, 10.0, 5.0, 10.0, 15.0]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with improved aesthetics\nbars = ax.bar(models, score_a, color='skyblue', edgecolor='black', label='Score A')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom')\n\nax.bar(models, score_b, bottom=score_a, color='lightcoral', edgecolor='black', label='Score B')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Model', fontsize=12, fontweight='bold')\nax.set_ylabel('Score (%)', fontsize=12, fontweight='bold')\nax.set_title('Human Study', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend with improved location and font size\nax.legend(loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET']\nmacro_f1_scores = [82, 85, 80, 88]\nparty_colors = ['blue', 'orange', 'red']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nbars = ax.bar(pheme, macro_f1_scores, color=party_colors)\n\n# Add labels and title\nax.set_xlabel('Pheme')\nax.set_ylabel('Macro F1-score')\nax.set_title('Macro F1-scores by Pheme')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(pheme)))\nax.set_xticklabels(pheme, rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\nroles = ['human', 'gpt4', 'gpt4-cot']\ncounts = [np.array([100, 200, 300, 400, 500, 600, 700, 800]),\n          np.array([150, 250, 350, 450, 550, 650, 750, 850]),\n          np.array([200, 300, 400, 500, 600, 700, 800, 900])]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each role\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot each role with a different color and style\nfor i, role in enumerate(roles):\n    ax.bar(range(len(counts[i])), counts[i], color=colors[i], label=role, alpha=0.7, edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Count')\nax.set_ylabel('Role')\nax.set_title('Resonance Preference Plot for rich context')\nax.set_xticks(range(len(counts[0])))\nax.set_xticklabels(['O1', 'T1', 'P1'])\nax.legend()\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_values = [20.4, 23.8, 14.3, 16.7, 7.1]\nbrainwave_values = [29.6, 28.1, 14.3, 38.1, 7.7]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define colors for the bars\ncolors = ['#FF5733', '#FFC300', '#D3D3D3', '#33FF57', '#3333FF']\n\n# Plot the first dataset\nbars1 = ax.bar(categories, effort_values, color=colors, label='Effort')\n\n# Plot the second dataset\nbars2 = ax.bar(categories, brainwave_values, bottom=effort_values, color=[c for c in colors if c != '#FF5733'], label='Brainwave')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Eye Movement vs Brainwave')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Add annotations for each bar\nfor bar in bars1 + bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0.5, 1.2, 10)\ny1 = np.sin(x) * 100\ny2 = np.cos(x) * 100\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Ours', color='red', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Saliency-based Sampling', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_title('Comparison of Rate of Gain Change')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nlabels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nEN = [3.5, 2.3, 4.4, 1.3, -0.7]\nDE = [2.3, 0.3, 2.0, 3.3, -2.7]\nFR = [4.4, 2.0, 3.4, -3.3, -2.7]\nIT = [1.3, 1.0, 3.4, -3.3, -2.7]\nES = [-0.7, 0.3, 1.3, -2.7, -2.7]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the width of each bar\nbar_width = 0.15\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(labels))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\nr5 = [x + bar_width for x in r4]\n\n# Create the bar chart\nax.bar(r1, EN, color='royalblue', width=bar_width, edgecolor='grey', label='EN')\nax.bar(r2, DE, color='crimson', width=bar_width, edgecolor='grey', label='DE')\nax.bar(r3, FR, color='orange', width=bar_width, edgecolor='grey', label='FR')\nax.bar(r4, IT, color='gold', width=bar_width, edgecolor='grey', label='IT')\nax.bar(r5, ES, color='green', width=bar_width, edgecolor='grey', label='ES')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Model with Language', fontweight='bold')\nax.set_ylabel('Model Performance Improvement by Language', fontweight='bold')\nax.set_title('Model Performance Improvement by Language', fontsize=15, fontweight='bold')\nax.set_xticks([r + bar_width * 2.5 for r in range(len(labels))])\nax.set_xticklabels(labels)\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Random', 'Ours', 'SOTA']\nvalues_random = [66.3, 61.9, 53.8]\nvalues_ours = [49.3, 45.7, 41.6]\nvalues_sota = [36.3, 31.5, 0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the x-axis limits and ticks\nax.set_xlim(-0.5, 2.5)\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the y-axis limits and ticks\nax.set_ylim(-80, 80)\nax.set_yticks(np.arange(-80, 81, 20))\n\n# Set the title and labels\nax.set_title('Truthful: Misleading = 2:0', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Plot the bars with different colors and add labels\nbar_width = 0.2\nopacity = 0.8\n\nbars_random = ax.bar(np.arange(len(categories)) - bar_width, values_random, bar_width,\n                     alpha=opacity, color='b', label='Random')\n\nbars_ours = ax.bar(np.arange(len(categories)), values_ours, bar_width,\n                   alpha=opacity, color='r', label='Ours')\n\nbars_sota = ax.bar(np.arange(len(categories)) + bar_width, values_sota, bar_width,\n                   alpha=opacity, color='g', label='SOTA')\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        height = bar.get_height()\n        ax.annotate(f'{height:.1f}',\n                    xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nadd_value_labels(bars_random)\nadd_value_labels(bars_ours)\nadd_value_labels(bars_sota)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['1', '2', '3', '4', '5', '6']\nvalues1 = [55, 45, 35, 25, 15, 5]\nvalues2 = [50, 40, 30, 20, 10, 0]\nvalues3 = [52, 42, 32, 22, 12, 2]\nvalues4 = [58, 48, 38, 28, 18, 8]\nvalues5 = [53, 43, 33, 23, 13, 3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FF6666']\n\n# Plot the bars with different colors and add labels\nbars1 = ax.bar(categories, values1, color=colors[0], label='Score Type 1')\nbars2 = ax.bar(categories, values2, bottom=values1, color=colors[1], label='Score Type 2')\nbars3 = ax.bar(categories, values3, bottom=[v1 + v2 for v1, v2 in zip(values1, values2)], color=colors[2], label='Score Type 3')\nbars4 = ax.bar(categories, values4, bottom=[v1 + v2 + v3 for v1, v2, v3 in zip(values1, values2, values3)], color=colors[3], label='Score Type 4')\nbars5 = ax.bar(categories, values5, bottom=[v1 + v2 + v3 + v4 for v1, v2, v3, v4 in zip(values1, values2, values3, values4)], color=colors[4], label='Score Type 5')\n\n# Add labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking 1')\nax.set_xticks(categories)\nax.set_xticklabels(categories, rotation=45)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\nadd_value_labels(bars4)\nadd_value_labels(bars5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_scores = [54.9, 71.5, 79.2, 60.3, 54.5, 52.9, 42.4, 7.1, 2.0]\nbeam_scores = [83.3, 86.4, 80.0, 76.8, 92.6, 89.2, 83.3, 80.0, 83.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot area\nax.set_facecolor('#f0f0f0')\n\n# Plot the data with different colors and styles\nbar_width = 0.35\nindex = np.arange(len(models))\n\n# Plot contrastive search scores\nbars1 = ax.bar(index - bar_width/2, contrastive_scores, bar_width, label='Contrastive Search', color='#4caf50', edgecolor='black')\n\n# Plot beam search scores\nbars2 = ax.bar(index + bar_width/2, beam_scores, bar_width, label='Beam Search', color='#ff5733', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Performance Comparison by Model', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Annotate bars with their values\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Traffic Flow', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ndata1 = [150.0, 180.0, 90.0, 80.0]\ndata2 = [2.5, 2.0, 1.5, 2.0]\ndata3 = [60.0, 55.0, 70.0, 72.0]\ndata4 = [80.0, 75.0, 90.0, 88.0]\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), constrained_layout=True)\n\n# Plot data for Dataset 1\naxes[0, 0].bar(categories, data1, color='orange')\naxes[0, 0].set_title('Dataset 1')\naxes[0, 0].set_ylabel('Values')\n\n# Plot data for Dataset 2\naxes[0, 1].bar(categories, data2, color='blue')\naxes[0, 1].set_title('Dataset 2')\naxes[0, 1].set_ylabel('Values')\n\n# Plot data for Dataset 3\naxes[1, 0].bar(categories, data3, color='green')\naxes[1, 0].set_title('Dataset 3')\naxes[1, 0].set_ylabel('Values')\n\n# Plot data for Dataset 4\naxes[1, 1].bar(categories, data4, color='purple')\naxes[1, 1].set_title('Dataset 4')\naxes[1, 1].set_ylabel('Values')\n\n# Add a main title for the entire figure\nfig.suptitle('Comparison of Datasets', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: color dominance ratings for different colors\ncolors = ['Neutral', 'Yellow High', 'Yellow Low', 'Green High', 'Green Low', 'Blue High', 'Blue Low', 'Red High', 'Red Low', 'Orange High', 'Orange Low']\nratings = [\n    [4, 3, 2, 1, 5],\n    [3, 2, 1, 4, 5],\n    [2, 1, 4, 5, 3],\n    [1, 4, 5, 3, 2],\n    [5, 4, 3, 2, 1],\n    [4, 3, 2, 1, 5],\n    [3, 2, 1, 4, 5],\n    [2, 1, 4, 5, 3],\n    [1, 4, 5, 3, 2],\n    [5, 4, 3, 2, 1],\n    [4, 3, 2, 1, 5]\n]\n\n# Convert data to a format suitable for plotting\nx = np.arange(len(colors))\nwidth = 0.8 / len(ratings[0])  # Adjust width for multiple bars per category\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\nfor i, rating in enumerate(ratings):\n    ax.bar(x + i * width, rating, width, label=f'Rating {i+1}', alpha=0.7)\n\nax.set_xlabel('Color')\nax.set_ylabel('SAM Rating')\nax.set_title('Color Dominance')\nax.set_xticks(x + width * (len(ratings[0]) / 2))\nax.set_xticklabels(colors, rotation=45)\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([20, 30, 40, 50, 60, 70, 80, 90])\ny1 = np.array([25, 35, 45, 55, 65, 75, 85, 95])\ny2 = np.array([20, 30, 40, 50, 60, 70, 80, 90])\ny3 = np.array([15, 25, 35, 45, 55, 65, 75, 85])\ny4 = np.array([10, 20, 30, 40, 50, 60, 70, 80])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot data with different styles and colors\nax.plot(x, y1, label='Gaming Duration', color='darkgreen', marker='o', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Exercise Duration', color='darkblue', marker='s', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Reading Duration', color='darkred', marker='^', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='Music Playtime', color='darkpurple', marker='D', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Duration (minutes)')\nax.set_ylabel('Activity')\nax.set_title('Daily Activity Durations')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: two groups with three measurements each\ngroup1 = [18, 20, 19]\ngroup2 = [17, 19, 21]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with error bars\nax.errorbar(range(len(group1)), group1, yerr=1, fmt='o', color='b', label='Llama-70b (T2TT)', capsize=5)\nax.errorbar(range(len(group2)), group2, yerr=1, fmt='s', color='r', label='Llama-70b (S2TT)', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Sample')\nax.set_ylabel('Bleu Score')\nax.set_title('Comparison of Bleu Scores for Llama-70b Models')\n\n# Add a legend\nax.legend()\n\n# Set grid\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: two sets of measurements with different parameters\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([2.5, 3.5, 4.5, 5.5, 6.5])\ny2 = np.array([2.0, 3.0, 4.0, 5.0, 6.0])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the first dataset with a solid line and markers\nax.plot(x, y1, label='Dataset 1', marker='o', linestyle='-', color='b')\n\n# Plot the second dataset with a dashed line and markers\nax.plot(x, y2, label='Dataset 2', marker='s', linestyle='--', color='r')\n\n# Set labels for axes\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Set a title for the plot\nax.set_title('Sample Line Plot with Two Datasets')\n\n# Add a legend to the plot\nax.legend()\n\n# Show grid lines for better readability\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Execution accuracy of different models\nmodels = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\naccuracy_scores = [\n    [870, 880],  # SQL-Only\n    [860, 870],  # PoT\n    [840, 850],  # IC-LP\n    [830, 840],  # DAIL\n    [820, 830]   # IC-LP+PoT\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data using a bar chart\nbar_width = 0.35\nindex = np.arange(len(models))\nopacity = 0.8\n\n# Plot each model's accuracy scores\nfor i, scores in enumerate(accuracy_scores):\n    ax.bar(index + i * bar_width, scores, bar_width, alpha=opacity, label=models[i])\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Execution Accuracy')\nax.set_title('Comparison of Execution Accuracy Across Models')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(models)\nax.legend()\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\nregion_accuracy = [0.88, 0.87, 0.83]\nslice_mean_error = [9.00, 9.33, 9.00]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with error bars\nbars = ax.bar(categories, region_accuracy, yerr=slice_mean_error, capsize=5, color=['blue', 'orange', 'green'], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Region Classification Accuracy')\nax.set_ylabel('Slice Mean Error (ms)')\nax.set_title('Region Classification Accuracy')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Z-scores for different conditions\nconditions = ['w/o att', 'w/o DP', '1xQ', '20xQ', '200xQ']\nz_scores = [\n    [3.4, 2.9, 4.1, 3.7],\n    [2.5, 2.8, 3.2, 2.6],\n    [1.8, 1.9, 2.1, 2.0],\n    [4.5, 4.3, 4.7, 4.6],\n    [5.2, 5.1, 5.3, 5.4]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot each condition as a separate box plot\nfor i, scores in enumerate(z_scores):\n    ax.boxplot(scores, positions=[i], widths=0.6, patch_artist=True,\n               boxprops=dict(facecolor=colors[i % len(colors)], alpha=0.7),\n               medianprops=dict(color='white'),\n               whiskerprops=dict(color=colors[i % len(colors)]),\n               capprops=dict(color=colors[i % len(colors)]),\n               flierprops=dict(marker='o', markerfacecolor=colors[i % len(colors)], markersize=8))\n\n# Set labels and title\nax.set_xlabel('Conditions')\nax.set_ylabel('Z-Score')\nax.set_title('Z-Scores by Conditions')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add a horizontal line at the threshold value\nthreshold = 5\nax.axhline(y=threshold, color='red', linestyle='--', linewidth=2, label='Threshold')\n\n# Add legend\nax.legend(title='Legend', loc='upper right')\n\n# Set x-ticks and labels\nax.set_xticks(range(len(conditions)))\nax.set_xticklabels(conditions, rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [\n    [1.2, 1.3, 1.4, 1.5, 1.6, 1.7],\n    [1.8, 1.9, 2.0, 2.1, 2.2, 2.3],\n    [2.4, 2.5, 2.6, 2.7, 2.8, 2.9],\n    [3.0, 3.1, 3.2, 3.3, 3.4, 3.5],\n    [3.6, 3.7, 3.8, 3.9, 4.0, 4.1],\n    [4.2, 4.3, 4.4, 4.5, 4.6, 4.7]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data with error bars\nbar_width = 0.35\nindex = np.arange(len(categories))\nopacity = 0.8\n\nbars = []\nfor i, category in enumerate(categories):\n    bar = ax.bar(index + i * bar_width, values[i], bar_width,\n                 alpha=opacity, color=plt.cm.viridis(i / len(categories)),\n                 label=category)\n    bars.append(bar)\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Categories')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Run numbers and corresponding values\nruns = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvalues = [\n    [50, 60, 70, 80, 90],\n    [40, 50, 60, 70, 80],\n    [30, 40, 50, 60, 70],\n    [20, 30, 40, 50, 60],\n    [10, 20, 30, 40, 50],\n    [60, 70, 80, 90, 100],\n    [50, 60, 70, 80, 90],\n    [40, 50, 60, 70, 80],\n    [30, 40, 50, 60, 70],\n    [20, 30, 40, 50, 60]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot each run's data as a box plot\nfor i, run_values in enumerate(values):\n    ax.boxplot(run_values, positions=[i], widths=0.6, patch_artist=True, boxprops=dict(facecolor='lightblue', edgecolor='black'), medianprops=dict(color='red'))\n\n# Set labels and title\nax.set_xlabel('Run')\nax.set_ylabel('Value')\nax.set_title('Box Plot of Values by Run')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(runs)))\nax.set_xticklabels(runs)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncategories = ['AR', 'LSTMAlpha', 'LSTMBeta', 'AE', 'EncDecAD', 'SRCNN', 'AnomalyTransformer', 'TimesNet', 'Donut', 'TFAD']\nvalues = [\n    [0.8, 0.9, 0.7, 0.6, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.7, 0.8, 0.9, 1.0, 1.1],\n    [0.8, 0.9, 1.0, 1.1, 1.2],\n    [0.9, 1.0, 1.1, 1.2, 1.3],\n    [1.0, 1.1, 1.2, 1.3, 1.4]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different colors and styles\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#90EE90', '#FF4500', '#ADD8E6', '#FFA500', '#87CEEB', '#FF69B4', '#2F4F4F']\nfor i, category in enumerate(categories):\n    ax.barh(category, values[i], color=colors[i], alpha=0.7, label=category)\n\n# Set labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Category')\nax.set_title('Comparison of Categories')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: EME sentences\ndata = {\n    'Bert Base': [0.85, 0.92, 0.78, 0.88, 0.95],\n    'MacBERT': [0.83, 0.89, 0.76, 0.87, 0.94],\n    'English HLM': [0.82, 0.88, 0.75, 0.86, 0.93]\n}\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot each dataset with different colors and markers\ncolors = ['tab:blue', 'tab:orange', 'tab:green']\nmarkers = ['o', 's', '^']\n\nfor i, (label, values) in enumerate(data.items()):\n    ax.scatter(range(len(values)), values, color=colors[i], marker=markers[i], label=label)\n\n# Set labels and title\nax.set_xlabel('Sentence Index')\nax.set_ylabel('EME Score')\nax.set_title('EME Scores for Different Models')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(title='Model')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncategories = ['Category 1', 'Category 2', 'Category 3']\nour_model = [2.5, 2.4, 2.7]\nntm_plus_cl = [2.6, 2.5, 2.8]\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0), sharex=True, sharey=True)\n\n# Plot 1: Ratings\naxes[0, 0].boxplot([our_model, ntm_plus_cl], patch_artist=True)\naxes[0, 0].set_title('Ratings')\naxes[0, 0].set_xticklabels(categories)\naxes[0, 0].set_ylabel('Score')\n\n# Plot 2: Intrusion\naxes[0, 1].boxplot([our_model, ntm_plus_cl], patch_artist=True)\naxes[0, 1].set_title('Intrusion')\naxes[0, 1].set_xticklabels(categories)\naxes[0, 1].set_ylabel('Score')\n\n# Plot 3: Ratings\naxes[1, 0].boxplot([our_model, ntm_plus_cl], patch_artist=True)\naxes[1, 0].set_title('Ratings')\naxes[1, 0].set_xticklabels(categories)\naxes[1, 0].set_ylabel('Score')\n\n# Plot 4: Intrusion\naxes[1, 1].boxplot([our_model, ntm_plus_cl], patch_artist=True)\naxes[1, 1].set_title('Intrusion')\naxes[1, 1].set_xticklabels(categories)\naxes[1, 1].set_ylabel('Score')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.array([['target', 'control'], ['target', 'control'], ['target', 'control']])\ny_correct = np.array([[6.2, 5.8], [5.9, 5.7], [5.5, 5.3]])\ny_reaction = np.array([[1.2, 1.1], [1.1, 1.0], [1.0, 0.9]])\ny_time = np.array([[1.4, 1.3], [1.3, 1.2], [1.2, 1.1]])\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0), sharex=True, sharey=True)\n\n# Plot 1: Correct word reaction time\naxes[0, 0].boxplot(y_correct, vert=False)\naxes[0, 0].set_title('Correct word reaction time')\naxes[0, 0].set_xlabel('Reaction Time (s)')\naxes[0, 0].set_yticks([1, 2, 3])\naxes[0, 0].set_yticklabels(['Target', 'Control', 'Group'])\n\n# Plot 2: Lexical decision\naxes[0, 1].boxplot(y_reaction, vert=False)\naxes[0, 1].set_title('Lexical decision')\naxes[0, 1].set_xlabel('Reaction Time (s)')\naxes[0, 1].set_yticks([1, 2, 3])\naxes[0, 1].set_yticklabels(['Target', 'Control', 'Group'])\n\n# Plot 3: Reaction time\naxes[1, 0].boxplot(y_time, vert=False)\naxes[1, 0].set_title('Reaction time')\naxes[1, 0].set_xlabel('Time per tap (ms)')\naxes[1, 0].set_yticks([1, 2, 3])\naxes[1, 0].set_yticklabels(['Target', 'Control', 'Group'])\n\n# Plot 4: Trail making\naxes[1, 1].boxplot(y_time, vert=False)\naxes[1, 1].set_title('Trail making')\naxes[1, 1].set_xlabel('Time per tap (ms)')\naxes[1, 1].set_yticks([1, 2, 3])\naxes[1, 1].set_yticklabels(['Target', 'Control', 'Group'])\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Method A', 'Method B', 'Method C']\nvalues = [30, 45, 25]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the bar chart with customized colors and edge colors\nbars = ax.bar(categories, values, color=['#1f77b4', '#ff7f0e', '#2ca02c'], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart Example')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Search depth vs Reward\nsearch_depth = [50, 100, 150, 200, 350]\nrewards = [\n    [-0.04, -0.02, 0.00, 0.02, 0.04],\n    [-0.03, -0.01, 0.00, 0.01, 0.03],\n    [-0.02, -0.01, 0.00, 0.01, 0.02],\n    [-0.01, 0.00, 0.01, 0.02, 0.03],\n    [0.00, 0.01, 0.02, 0.03, 0.04]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with error bars\nfor i, reward in enumerate(rewards):\n    ax.errorbar(search_depth, reward, yerr=0.01, fmt='o', capsize=5, label=f'Agent {i+1}')\n\n# Set labels and title\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\nax.set_title('Impact of Search Depth on Reward')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 38.1, 29.5]\nstd_devs = [10.2, 4.5, 2.1, 1.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plotting the data with error bars\nbars = ax.bar(categories, durations, yerr=std_devs, capsize=5, color=['skyblue', 'lightgreen', 'lavender', 'lightsalmon'], edgecolor='black')\n\n# Adding labels and title\nax.set_xlabel('Activity Type')\nax.set_ylabel('Duration (minutes)')\nax.set_title('Daily Activity Durations')\n\n# Adding grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Adding annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment']\nvalues1 = [2.3, 2.5, 2.1, 1.9, 2.4]\nvalues2 = [2.6, 2.2, 2.3, 2.0, 2.1]\nvalues3 = [2.0, 1.8, 2.5, 1.7, 2.2]\nvalues4 = [1.9, 2.1, 2.4, 1.8, 2.3]\nvalues5 = [2.2, 2.0, 2.1, 1.9, 2.4]\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), sharex=True, sharey=True)\n\n# Plot data on each subplot\nfor ax, values, title in zip(axes.flatten(), [values1, values2, values3, values4, values5], \n                           ['Mean Value', 'Median Value', 'IQR Mean', 'IQR Median']):\n    ax.bar(categories, values, color=plt.cm.viridis(np.linspace(0, 1, len(values))))\n    ax.set_title(title)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Angles and thrust frequencies\nangles = np.linspace(-40, 40, 8)\nthrusts_socp_proposed = np.array([\n    [5.2, 5.4, 5.6, 5.8, 6.0, 6.2, 6.4, 6.6],\n    [3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6],\n    [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6],\n    [-0.2, -0.4, -0.6, -0.8, -1.0, -1.2, -1.4, -1.6]\n])\n\nthrusts_socp_no_learning = np.array([\n    [5.1, 5.3, 5.5, 5.7, 5.9, 6.1, 6.3, 6.5],\n    [3.1, 3.3, 3.5, 3.7, 3.9, 4.1, 4.3, 4.5],\n    [1.1, 1.3, 1.5, 1.7, 1.9, 2.1, 2.3, 2.5],\n    [-0.1, -0.3, -0.5, -0.7, -0.9, -1.1, -1.3, -1.5]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(angles, thrusts_socp_proposed[0], label='SOCP Learning (Proposed)', color='skyblue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(angles, thrusts_socp_proposed[1], color='skyblue', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(angles, thrusts_socp_proposed[2], color='skyblue', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(angles, thrusts_socp_proposed[3], color='skyblue', linestyle=':', linewidth=2, marker='D', markersize=5)\n\nax.plot(angles, thrusts_socp_no_learning[0], label='SOCP No Learning', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(angles, thrusts_socp_no_learning[1], color='royalblue', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(angles, thrusts_socp_no_learning[2], color='royalblue', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(angles, thrusts_socp_no_learning[3], color='royalblue', linestyle=':', linewidth=2, marker='D', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Thrust Frequency [rad/s]', fontsize=12)\nax.set_ylabel('Angular Frequency [\u00b0]', fontsize=12)\nax.set_title('Comparison of Thrust and Angular Frequency', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance gap in different models\nmodels = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\nperformance_cvrp = [25, 30, 15, 5]\nperformance_vrptw = [35, 40, 25, 10]\nperformance_all = [45, 50, 35, 15]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with error bars\nbar_width = 0.2\nindex = np.arange(len(models))\nbars1 = ax.bar(index - bar_width, performance_cvrp, bar_width, label='ST_CVRP', color='skyblue')\nbars2 = ax.bar(index, performance_vrptw, bar_width, label='ST_VRPTW', color='violet')\nbars3 = ax.bar(index + bar_width, performance_all, bar_width, label='ST_All', color='orange')\n\n# Add error bars (optional)\nerror_cvrp = [2, 3, 1, 0.5]\nerror_vrptw = [3, 4, 2, 1]\nerror_all = [4, 5, 3, 1.5]\nax.errorbar(index - bar_width, performance_cvrp, yerr=error_cvrp, fmt='o', color='black', capsize=5)\nax.errorbar(index, performance_vrptw, yerr=error_vrptw, fmt='o', color='black', capsize=5)\nax.errorbar(index + bar_width, performance_all, yerr=error_all, fmt='o', color='black', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Performance Gap (%)')\nax.set_title('Comparison of Performance Gaps in Different Models')\nax.set_xticks(index)\nax.set_xticklabels(models)\nax.legend()\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\nhuman_scores = [0.4, 0.6, 0.8, 0.9, 0.5, 0.7]\nmean_scores = [0.3, 0.4, 0.5, 0.6, 0.45, 0.55]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 3.0))\n\n# Plot the data with error bars\nbars = ax.bar(categories, human_scores, yerr=mean_scores, capsize=5, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Human Normalized Score')\nax.set_title('Comparison of Categories with Error Bars')\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Angular Frequency vs Thrust Angle\ndata = {\n    '2.0': [15, 20, 25, 30, 35],\n    '2.5': [18, 22, 27, 32, 37],\n    '3.0': [20, 24, 29, 34, 39],\n    '3.5': [22, 26, 31, 36, 41],\n    '4.0': [24, 28, 33, 38, 43],\n    '4.5': [26, 30, 35, 40, 45],\n    '5.0': [28, 32, 37, 42, 47]\n}\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each dataset with different colors and markers\ncolors = ['blue', 'orange', 'red']\nmarkers = ['o', 's', '^']\n\nfor i, (key, values) in enumerate(data.items()):\n    ax.scatter([i] * len(values), values, color=colors[i % len(colors)], marker=markers[i % len(markers)], label=key)\n\n# Set labels and title\nax.set_xlabel('Angular Frequency [rad/s]')\nax.set_ylabel('Thrust Angle [\u00b0]')\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Dataset')\n\n# Set x-ticks to be centered between bars\nax.set_xticks(range(len(data)))\nax.set_xticklabels(list(data.keys()), rotation=45)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: CEE (dB) vs SE (bps)\ndata = {\n    'Perfect': [9.5, 10.2, 9.8, 10.5, 9.3],\n    'GMM (25%-75%)': [8.4, 8.9, 9.1, 8.7, 9.0],\n    'GML (25%-75%)': [7.8, 8.2, 8.0, 7.9, 8.1],\n    'AO (25%-75%)': [6.5, 6.8, 6.7, 6.6, 6.9]\n}\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each dataset with different colors and markers\ncolors = ['red', 'blue', 'green', 'purple']\nmarkers = ['o', 's', '^', 'D']\n\nfor i, (method, values) in enumerate(data.items()):\n    ax.plot(values, marker=markers[i], linestyle='-', color=colors[i], label=method)\n\n# Set labels and title\nax.set_xlabel('CEE (dB)')\nax.set_ylabel('SE (bps)')\nax.set_title('Comparison of Methods')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(title='Method')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\ndata = {\n    'D-avg': [120, 130, 140, 150, 160],\n    'P-avg': [110, 120, 130, 140, 150],\n    'SAA': [100, 110, 120, 130, 140],\n    'CSA': [90, 100, 110, 120, 130],\n    'RSA': [80, 90, 100, 110, 120]\n}\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(25.0, 8.0))\n\n# Plot each dataset on a separate subplot\nfor ax, (title, values) in zip(axes, data.items()):\n    ax.set_title(title)\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    ax.plot(values, marker='o', linestyle='-', color='b')\n    ax.grid(True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\nhospital1 = [89, 87, 85]\nhospital2 = [91, 89, 87]\nhospital3 = [93, 91, 89]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data with error bars\nbar_width = 0.2\nindex = np.arange(len(categories))\nopacity = 0.8\n\nbars1 = ax.bar(index, hospital1, bar_width, alpha=opacity, color='b', label='Hospital 1')\nbars2 = ax.bar(index + bar_width, hospital2, bar_width, alpha=opacity, color='g', label='Hospital 2')\nbars3 = ax.bar(index + 2 * bar_width, hospital3, bar_width, alpha=opacity, color='r', label='Hospital 3')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Modality')\nax.set_ylabel('AUC')\nax.set_title('AUC by Modality and Hospital')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different conditions\ndata1 = [22.3, 22.8, 23.1, 22.9, 22.7]\ndata2 = [19.5, 19.8, 19.6, 19.7, 19.4]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the first dataset with a blue color and a dashed line style\nax.plot(data1, label='Condition 1', color='blue', linestyle='--')\n\n# Plot the second dataset with a red color and a solid line style\nax.plot(data2, label='Condition 2', color='red', linestyle='-')\n\n# Set labels for the x and y axes\nax.set_xlabel('Sample Index')\nax.set_ylabel('Measurement Value')\n\n# Add a title to the plot\nax.set_title('Comparison of Two Conditions')\n\n# Add a legend to the plot\nax.legend()\n\n# Add grid lines for better readability\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-80, 80, 400)\ny = np.linspace(-80, 80, 400)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(np.sqrt(X**2 + Y**2)) * np.exp(-0.05 * (X**2 + Y**2))\nZ2 = np.cos(np.sqrt(X**2 + Y**2)) * np.exp(-0.05 * (X**2 + Y**2))\n\n# Plot the data using contourf\nc1 = ax.contourf(X, Y, Z1, cmap='coolwarm', alpha=0.7)\nc2 = ax.contourf(X, Y, Z2, cmap='Blues', alpha=0.7)\n\n# Add a colorbar to the plot\nfig.colorbar(c1, ax=ax, label='Ground Truth')\nfig.colorbar(c2, ax=ax, label='Generated')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the grid of points\nx1 = np.linspace(0, 1, 100)\nx2 = np.linspace(0, 1, 100)\nX1, X2 = np.meshgrid(x1, x2)\n\n# Define the function to plot\nZ = np.sin(np.pi * X1) * np.cos(np.pi * X2)\n\n# Plot the contourf with a color map\ncontour = ax.contourf(X1, X2, Z, levels=20, cmap='viridis')\n\n# Add a color bar to the plot\ncbar = fig.colorbar(contour, ax=ax)\ncbar.set_label('Intensity')\n\n# Set labels and title\nax.set_xlabel('x1')\nax.set_ylabel('x2')\nax.set_title('Contour Plot of a Function')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Systolic Blood Pressure (SBP) and Diastolic Blood Pressure (DBP) for two individuals over time\ntime = np.linspace(100, 160, 50)\nfemale_sbp = 120 + 10 * np.sin(0.1 * time)\nmale_sbp = 130 + 10 * np.sin(0.1 * time + np.pi / 4)\nfemale_dbp = 80 + 5 * np.sin(0.1 * time)\nmale_dbp = 90 + 5 * np.sin(0.1 * time + np.pi / 4)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with enhanced styles\nax.plot(time, female_sbp, label='Female', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(time, male_sbp, label='Male', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set axis labels with more descriptive text\nax.set_xlabel('Time (minutes)', fontsize=12)\nax.set_ylabel('Blood Pressure (mmHg)', fontsize=12)\n\n# Set title with a descriptive caption\nax.set_title('Systolic and Diastolic Blood Pressure Over Time', fontsize=14, fontweight='bold')\n\n# Add a legend to explain the data\nax.legend(loc='upper right', fontsize=10)\n\n# Customize the tick parameters for better appearance\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(-4, 4, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='sin(x)', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='cos(x)', color='green', linestyle='--', linewidth=2)\nax.plot(x, y3, label='tan(x)', color='red', linestyle='-.', linewidth=2)\n\n# Set the title and labels with improved formatting\nax.set_title('Trigonometric Functions', fontsize=14, fontweight='bold')\nax.set_xlabel('X-axis', fontsize=12)\nax.set_ylabel('Y-axis', fontsize=12)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set axis limits\nax.set_xlim(-4, 4)\nax.set_ylim(-2, 2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the contourf with a colormap\ncontour_filled = ax.contourf(X, Y, Z, levels=20, cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contour_filled, ax=ax)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Contour Plot of a Function')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data\nx = np.linspace(8, 15, 100)\ny = np.linspace(8, 15, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the contourf with a colormap\ncontour = ax.contourf(X, Y, Z, levels=20, cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contour, ax=ax, orientation='vertical', fraction=0.15, pad=0.04)\ncbar.set_label('Iteration', rotation=270, labelpad=15)\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Frequency')\nax.set_title('Contour Plot of Iteration Over Time and Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, color='red', linestyle='-', linewidth=2, marker='o', markersize=5, label='Sine Wave')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X-axis', fontsize=12)\nax.set_ylabel('Y-axis', fontsize=12)\nax.set_title('Sine Wave Example', fontsize=14)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(-1.0, 1.0, 100)\ny = np.exp(-(x**2)) * np.cos(2 * np.pi * x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, color='navy', linewidth=2, linestyle='-', marker='o', markersize=5, label='Spearman Coefficient Distribution')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Spearman Coefficient', fontsize=12)\nax.set_ylabel('Density', fontsize=12)\nax.set_title('KDE Plot of Spearman Coefficient Distribution', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(7, 15, 100)\ny1 = np.exp(-(x - 10)**2 / (2 * 2**2))\ny2 = np.exp(-(x - 12)**2 / (2 * 3**2))\ny3 = np.exp(-(x - 14)**2 / (2 * 4**2))\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Random Bundle', color='royalblue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Increase Price', color='pink', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Strategic (Ours)', color='lightgreen', linestyle='-.', linewidth=2)\n\n# Add a vertical line at x=10 to indicate a significant point\nax.axvline(x=10, color='red', linestyle=':', linewidth=1)\n\n# Set labels and title\nax.set_xlabel('p')\nax.set_ylabel('Shape Density')\nax.set_title('Probability Density Functions')\n\n# Add a legend\nax.legend()\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Density vs Value\ndensity = np.linspace(0, 1, 100)\nvalue_gucci = 10 * np.sin(density * np.pi) + 5\nvalue_chanel = 8 * np.cos(density * np.pi) + 7\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(density, value_gucci, label='Gucci', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(density, value_chanel, label='Chanel', color='seagreen', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Density', fontsize=12, fontweight='bold')\nax.set_ylabel('Value', fontsize=12, fontweight='bold')\nax.set_title('Density vs Value Comparison', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Set axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 15)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Deep Ens.', 'Dropout', 'Laplace', 'SNP', 'HET-XL', 'Baseline', 'Shallow Ens.', 'DUQ', 'Corr. Pred.']\nlog_probabilities = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.552, -0.590, -0.819]\ndistributions = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with error bars\nbars = ax.bar(categories, log_probabilities, yerr=distributions, capsize=5, color=['green', 'orange'], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Log Probability')\nax.set_title('Comparison of Log Probabilities')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add annotations for better readability\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.3f}', ha='center', va='bottom', fontsize=8)\n\n# Set x-axis limits for better visibility\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([1, 2, 4, 8])\ny1 = np.array([5.5, 6.2, 6.8, 7.0])\ny2 = np.array([5.3, 6.0, 6.5, 6.7])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Baseline', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='SoftMoE (unchanged)', color='green', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human Normalized Score')\nax.set_title('Expert dimension')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Hospital 1', 'Hospital 2', 'Hospital 3']\nbaseline_1 = [0.748, 0.762, 0.709]\nbaseline_2 = [0.759, 0.748, 0.687]\nfedmm = [0.78, 0.78, 0.713]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the x-axis limits and ticks\nax.set_xlim(0, len(categories))\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the y-axis limits and ticks\nax.set_ylim(0.5, 0.95)\nax.set_yticks(np.arange(0.5, 1.0, 0.1))\n\n# Plot the data with error bars\nbar_width = 0.2\nopacity = 0.8\n\nrects1 = ax.bar(np.arange(len(categories)) - bar_width, baseline_1, bar_width,\n                alpha=opacity, color='b', label='Baseline 1')\n\nrects2 = ax.bar(np.arange(len(categories)), baseline_2, bar_width,\n                alpha=opacity, color='r', label='Baseline 2')\n\nrects3 = ax.bar(np.arange(len(categories)) + bar_width, fedmm, bar_width,\n                alpha=opacity, color='g', label='FedMM')\n\n# Add labels and title\nax.set_xlabel('Hospital')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by hospital and method')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate(f'{height:.2f}',\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nadd_value_labels(rects1)\nadd_value_labels(rects2)\nadd_value_labels(rects3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['GPT-4 Buyer (valuation 40)', 'Claude-2.1 Buyer (valuation 40)', 'Claude-2 Buyer (valuation 40)', 'GPT-3.5 Buyer (valuation 40)']\ngpt4_values = [-15, -10, -5, 0]\nclaude21_values = [-12, -8, -4, 0]\nclaude2_values = [-18, -14, -10, 0]\ngpt35_values = [-13, -9, -5, 0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot data with different colors and styles\nbars1 = ax.bar(categories, gpt4_values, color='orange', label='GPT-4', edgecolor='black')\nbars2 = ax.bar(categories, claude21_values, bottom=gpt4_values, color='teal', label='Claude-2.1', edgecolor='black')\nbars3 = ax.bar(categories, claude2_values, bottom=[sum(x) for x in zip(gpt4_values, claude21_values)], color='red', label='Claude-2', edgecolor='black')\nbars4 = ax.bar(categories, gpt35_values, bottom=[sum(x) for x in zip(gpt4_values, claude21_values, claude2_values)], color='blue', label='GPT-3.5', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Buyer Type')\nax.set_ylabel('Valuation (valuation 40)')\nax.set_title('Comparison of Buyer Valuations')\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(-25, 5)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate bars with values\nfor bar in bars1 + bars2 + bars3 + bars4:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '[m]', '["}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Posterior accuracy of different models over time\ntime = np.arange(1, 7)\nmodel1 = [0.25, 0.23, 0.21, 0.19, 0.17, 0.15]\nmodel2 = [0.18, 0.16, 0.14, 0.12, 0.10, 0.08]\nmodel3 = [0.15, 0.13, 0.11, 0.09, 0.07, 0.05]\nmodel4 = [0.12, 0.10, 0.08, 0.06, 0.04, 0.02]\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each model's data with different styles\nax.plot(time, model1, label='Model 1', color='royalblue', marker='o', linestyle='-', linewidth=2)\nax.plot(time, model2, label='Model 2', color='orange', marker='s', linestyle='--', linewidth=2)\nax.plot(time, model3, label='Model 3', color='green', marker='^', linestyle='-.', linewidth=2)\nax.plot(time, model4, label='Model 4', color='darkred', marker='D', linestyle=':', linewidth=2)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Time', fontsize=12, fontweight='bold')\nax.set_ylabel('Posterior Accuracy', fontsize=12, fontweight='bold')\nax.set_title('Comparison of Posterior Accuracy Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(time)\nax.set_yticks(np.arange(0, 0.3, 0.1))\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues_aug = [85, 75, 90, 65]\nvalues_te = [70, 80, 60, 95]\nvalues_qual = [60, 70, 80, 50]\nvalues_diff = [50, 60, 70, 40]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Set the bar width and positions\nbar_width = 0.2\nindex = np.arange(len(categories))\n\n# Plot bars for each category\nbars_aug = ax.bar(index - bar_width, values_aug, bar_width, label='Aug', color='orange')\nbars_te = ax.bar(index, values_te, bar_width, label='TEstimation', color='yellow')\nbars_qual = ax.bar(index + bar_width, values_qual, bar_width, label='Qualification', color='blue')\nbars_diff = ax.bar(index + 2*bar_width, values_diff, bar_width, label='DiffStick', color='darkblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Performance')\nax.set_title('Comparison of Performance Metrics')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Hypothesis and Metric values\nhypotheses = [\n    \"128/0.5/0.0001\", \"128/0.1/0.0001\", \"256/0.1/0.0001\", \"256/0.3/0.0001\", \n    \"256/0.5/0.0001\", \"64/0.1/0.0001\", \"64/0.3/0.0001\", \"64/0.5/0.0001\"\n]\nmetrics = [\n    [0.7, 0.5, 0.3, 0.9, 0.8, 0.6, 0.4, 0.2],\n    [0.6, 0.4, 0.2, 0.8, 0.7, 0.5, 0.3, 0.1],\n    [0.5, 0.3, 0.1, 0.7, 0.6, 0.4, 0.2, 0.0],\n    [0.4, 0.2, 0.0, 0.6, 0.5, 0.3, 0.1, 0.0],\n    [0.3, 0.1, 0.0, 0.5, 0.4, 0.2, 0.0, 0.0],\n    [0.2, 0.0, 0.0, 0.4, 0.3, 0.1, 0.0, 0.0],\n    [0.1, 0.0, 0.0, 0.3, 0.2, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.2, 0.1, 0.0, 0.0, 0.0]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot each hypothesis with different colors and patterns\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple', 'tab:brown', 'tab:pink', 'tab:gray']\npatterns = ['/', '\\\\', '|', '-', '+', 'x', 'o', '*']\n\nfor i, (hypothesis, metric) in enumerate(zip(hypotheses, metrics)):\n    ax.bar(i, max(metric), color=colors[i % len(colors)], hatch=patterns[i % len(patterns)], label=hypothesis)\n\n# Set labels and title\nax.set_xlabel('Hypothesis')\nax.set_ylabel('Metric')\nax.set_title('FashionMNIST (NEURAL)')\nax.set_xticks(range(len(hypotheses)))\nax.set_xticklabels(hypotheses, rotation=45, ha='right')\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [28, 15, 10, 22, 30]\nvalues2 = [25, 12, 8, 18, 28]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create the x positions for the bars\nx = np.arange(len(categories))\n\n# Plot the bars for the first dataset\nbars1 = ax.bar(x - bar_width/2, values1, bar_width, label='Higher Education Enrollment Rate', color='skyblue')\n\n# Plot the bars for the second dataset\nbars2 = ax.bar(x + bar_width/2, values2, bar_width, label='Student-Teacher Ratio', color='orange')\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Values')\nax.set_title('Comparison of Higher Education Enrollment Rate and Student-Teacher Ratio')\nax.set_xticks(x)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 10400, 3200]\nland_area = [21, 34, 25, 25, 38]\nrenewable_energy_usage = [18, 28, 25, 25, 34]\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the color palette\ncolors = ['#6a5acd', '#77b5fe', '#87ceeb', '#add8e6', '#b0c4de']\n\n# Plot the emissions data\nbars = ax1.bar(categories, emissions, color=colors, edgecolor='black', label='Carbon Dioxide Emissions')\n\n# Add labels and title for the first y-axis\nax1.set_xlabel('Region')\nax1.set_ylabel('Annual Carbon Dioxide Emissions (Millions of Metric Tons)', color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\nax1.set_title('Annual Carbon Dioxide Emissions')\n\n# Create a second y-axis for land area\nax2 = ax1.twinx()\nax2.plot(categories, land_area, color='tab:green', marker='o', linestyle='--', linewidth=2, markersize=8, label='Forest Coverage Rate (%)')\n\n# Add labels and title for the second y-axis\nax2.set_ylabel('Forest Coverage Rate (%)', color='tab:green')\nax2.tick_params(axis='y', labelcolor='tab:green')\n\n# Add a legend for the first y-axis\nax1.legend(loc='upper left')\n\n# Add a legend for the second y-axis\nax2.legend(loc='upper right')\n\n# Add annotations for emissions values\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.annotate(f'{yval} MMT',\n                xy=(bar.get_x() + bar.get_width() / 2, yval),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom', fontsize=10)\n\n# Add annotations for land area values\nfor i, v in enumerate(land_area):\n    ax2.annotate(f'{v}%',\n                xy=(i, v),\n                xytext=(0, -10),  # 10 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='top', fontsize=10, color='tab:green')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\nvalues = [\n    [50, 60, 70, 80],  # Purple bar\n    [40, 50, 60, 70],  # Blue bar\n    [30, 40, 50, 60],  # Green bar\n    [20, 30, 40, 50]   # Orange bar\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Set the width of each bar\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars\nbars = []\nfor i, value in enumerate(values):\n    bars.append(ax.bar(index + i * bar_width, value, bar_width, label=f'City {i+1}', alpha=0.7))\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Comparison of Categories Across Cities', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width * (len(values) - 1) / 2)\nax.set_xticklabels(categories, fontsize=10)\n\n# Add a legend\nax.legend(title='City')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add annotations on top of each bar\nfor bar in bars:\n    for rect in bar:\n        height = rect.get_height()\n        ax.annotate(f'{height}',\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\njudge_names = ['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human']\nprotocols = ['Expert', 'Blind', 'Consultancy', 'Debate', 'Interactive Consultancy', 'Interactive Debate']\nscores = [\n    [85, 75, 90, 80, 88, 92],\n    [70, 65, 75, 60, 68, 72],\n    [95, 85, 98, 88, 96, 100],\n    [60, 55, 65, 50, 58, 62]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the title and labels with enhanced styling\nax.set_title('Judge Accuracy (%)', fontsize=16, fontweight='bold', color='#333333')\nax.set_xlabel('Judge', fontsize=12, fontweight='bold', color='#333333')\nax.set_ylabel('Accuracy (%)', fontsize=12, fontweight='bold', color='#333333')\n\n# Define colors for each protocol\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot the data with bars\nfor i, protocol in enumerate(protocols):\n    ax.bar(judge_names, scores[i], width=0.8, bottom=np.sum(scores[:i], axis=0), color=colors[i], edgecolor='black', label=protocol)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\nax.xaxis.grid(False)\n\n# Add a legend with a custom location\nax.legend(loc='upper left', bbox_to_anchor=(1, 1), fontsize=10, frameon=True, shadow=True)\n\n# Set the x-tick labels with rotation for better visibility\nax.set_xticks(range(len(judge_names)))\nax.set_xticklabels(judge_names, rotation=45, ha='right')\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Add annotations to display the exact values on top of each bar\nfor i, protocol in enumerate(protocols):\n    for j, score in enumerate(scores[i]):\n        ax.annotate(f'{score}', (j, np.sum(scores[:i+1], axis=0)[j] + score / 2), \n                    textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\nspring_temperatures = [12, 14, 13, 16]\nautumn_temperatures = [10, 12, 11, 15]\nspring_rainfall = [800, 900, 700, 1100]\nautumn_rainfall = [600, 700, 500, 900]\nwind_speeds = [3, 4, 3, 5]\nair_quality_index = [50, 60, 40, 70]\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0), sharex=True, sharey=True)\n\n# Plot 1: Annual Average Temperature\naxes[0, 0].bar(cities, spring_temperatures, color='orange', label='Spring')\naxes[0, 0].bar(cities, autumn_temperatures, bottom=spring_temperatures, color='lightcoral', label='Autumn')\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].legend()\n\n# Plot 2: Annual Rainfall\naxes[0, 1].bar(cities, spring_rainfall, color='green', label='Spring')\naxes[0, 1].bar(cities, autumn_rainfall, bottom=spring_rainfall, color='lightgreen', label='Autumn')\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].legend()\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, wind_speeds, color='skyblue', label='Wind Speed')\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_xlabel('City')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].legend()\n\n# Plot 4: Air Quality Index\naxes[1, 1].bar(cities, air_quality_index, color='purple', label='Air Quality Index')\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_xlabel('City')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [0, -2500, -3000, -4000, -5000]\nrenewable_energy_usage = [20, 15, 10, 5, 0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits and ticks\nax.set_xlim(-6000, 0)\nax.set_xticks(np.arange(-6000, 1, 1000))\nax.set_xlabel('Energy Consumption (Petajoules)')\n\n# Set the y-axis limits and ticks\nax.set_ylim(0, 25)\nax.set_yticks(np.arange(0, 26, 5))\nax.set_ylabel('Renewable Energy Usage (%)')\n\n# Set the title of the plot\nax.set_title('Total Energy Consumption by Country vs. Renewable Energy Usage by Country')\n\n# Plot the data with bars\nbars = ax.bar(categories, energy_consumption, color='purple', label='Energy Consumption')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 100, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(categories, renewable_energy_usage, bottom=energy_consumption, color='cyan', label='Renewable Energy Usage')\nfor bar in bars:\n    yval = bar.get_height() + bar.get_base()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, round(yval, 2), ha='center', va='bottom')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Refrigerator', 'Washing Machine', 'Dishwasher']\nvalues = [\n    [0.15, 0.25, 0.30],\n    [-0.10, -0.05, -0.05],\n    [0.05, 0.05, 0.20]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#FF6347', '#90EE90', '#ADD8E6']\n\n# Plot bars with error bars\nfor i, (category, values) in enumerate(zip(categories, values)):\n    ax.bar(i, np.mean(values), yerr=np.std(values), color=colors[i], capsize=5, label=category)\n\n# Set labels and title\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\nax.set_title('Energy Efficiency Ratings by Appliance Model')\n\n# Set x-ticks and labels\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend(title='Model Type')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Wind', 'Solar', 'Hydro', 'Nuclear']\nefficiency_scores = [\n    [85, 90, 95, 88],  # Installation Efficiency\n    [75, 80, 85, 78],  # Maintenance Costs\n    [65, 70, 75, 68],  # Operational Efficiency\n    [55, 60, 65, 58]   # Environmental Impact\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot bars for each category\nbar_width = 0.2\nindex = np.arange(len(categories))\nfor i, scores in enumerate(efficiency_scores):\n    ax.bar(index + i * bar_width, scores, bar_width, label=categories[i], color=colors[i])\n\n# Set labels and title\nax.set_xlabel('Energy Assessment Entity')\nax.set_ylabel('Efficiency Score')\nax.set_title('Energy Assessment Scores by Category')\nax.set_xticks(index + bar_width * len(efficiency_scores) / 2)\nax.set_xticklabels(categories)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(title='Category')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 90, 75, 80, 70, 65, 75, 85, 70, 60]\nhigher_education_enrollment = [95, 90, 85, 80, 75, 70, 75, 85, 70, 60]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different colors and styles\nbars = ax.bar(regions, high_school_graduation, color='lightgreen', label='High School Graduation')\nax.bar(regions, higher_education_enrollment, bottom=high_school_graduation, color='gold', label='Higher Education Enrollment')\n\n# Add labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage (%)')\nax.set_title('Educational Metrics by Region')\nax.set_xticklabels(regions, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), va='bottom', ha='center', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nproducts = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 57.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34.0, 53.7, 20.0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create the index for the x-axis positions\nindex = np.arange(len(products))\n\n# Plot the truthful recall data\nbars1 = ax.bar(index - bar_width/2, truthful_recall, bar_width, label='Truthful Recall', color='#1f77b4')\n\n# Plot the misleading recall data\nbars2 = ax.bar(index + bar_width/2, misleading_recall, bar_width, label='Misleading Recall', color='#ff7f0e')\n\n# Add labels and title\nax.set_xlabel('Products', fontsize=12)\nax.set_ylabel('Recall Rate (%)', fontsize=12)\nax.set_title('Comparison of Recall Rates Across Products', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(products, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Annotate the bars with their values\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [15, 18, 20, 12, 17, 10, 8]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars with a color and edge color\nbars = ax.bar(index, values, bar_width, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Complaint Rates')\nax.set_ylabel('Satiation Scores')\nax.set_title('Customer Satisfaction by Complaint Rate')\nax.set_xticks(index)\nax.set_xticklabels(categories, rotation=45)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 85, 88, 90, 88]\ndisagree_rates = [15, 18, 20, 12, 10, 8, 10]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create the index for the x-axis positions\nindex = np.arange(len(categories))\n\n# Plot the agree rates\nbars1 = ax.bar(index - bar_width/2, agree_rates, bar_width, label='Agree Rates', color='skyblue')\n\n# Plot the disagree rates\nbars2 = ax.bar(index + bar_width/2, disagree_rates, bar_width, label='Disagree Rates', color='salmon')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Customer Satisfaction by Category', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Impact of various environmental factors on plant growth\ncategories = ['Watering Frequency', 'Plant Density', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nvalues = [\n    [0.05, 0.03, 0.04, 0.02, 0.06, 0.07, 0.08, 0.09, 0.10],\n    [0.04, 0.02, 0.03, 0.01, 0.05, 0.06, 0.07, 0.08, 0.09],\n    [0.03, 0.01, 0.02, 0.005, 0.04, 0.05, 0.06, 0.07, 0.08],\n    [0.02, 0.005, 0.01, 0.002, 0.03, 0.04, 0.05, 0.06, 0.07],\n    [0.01, 0.002, 0.005, 0.001, 0.02, 0.03, 0.04, 0.05, 0.06],\n    [0.005, 0.001, 0.002, 0.0005, 0.01, 0.02, 0.03, 0.04, 0.05],\n    [0.002, 0.0005, 0.001, 0.0002, 0.005, 0.006, 0.007, 0.008, 0.009],\n    [0.001, 0.0002, 0.0005, 0.0001, 0.002, 0.003, 0.004, 0.005, 0.006],\n    [0.0005, 0.0001, 0.0002, 0.00005, 0.001, 0.002, 0.003, 0.004, 0.005]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot each category with different colors and patterns\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0', '#ffb3e6', '#c2c2f0', '#a6d854', '#ffd966']\npatterns = ['/', '\\\\', '|', '-', '+', 'x', 'o', '*', 's']\n\nfor i, (category, value) in enumerate(zip(categories, values)):\n    ax.bar(category, value, color=colors[i % len(colors)], hatch=patterns[i % len(patterns)], edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Environmental Factors')\nax.set_ylabel('Impact on Plant Growth (\u0394 to control)')\nax.set_title('Impact of Environmental Factors on Plant Growth')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nnew_york_values = [220, 175, 200]\nlos_angeles_values = [210, 160, 190]\nchicago_values = [230, 180, 210]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors and positions for bars\ncolors = ['#6a5acd', '#add8e6', '#ff6347']\nx_positions = np.arange(len(categories))\n\n# Plot bars for New York\nax.bar(x_positions - 0.2, new_york_values, width=0.4, color=colors[0], label='New York')\n\n# Plot bars for Los Angeles\nax.bar(x_positions, los_angeles_values, width=0.4, color=colors[1], label='Los Angeles')\n\n# Plot bars for Chicago\nax.bar(x_positions + 0.2, chicago_values, width=0.4, color=colors[2], label='Chicago')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Metric Values')\nax.set_title('Comparison of Metric Values Across Cities')\nax.set_xticks(x_positions)\nax.set_xticklabels(categories)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Hypothesis and Metric values\nhypotheses = [\n    \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"H7\", \"H8\", \"H9\", \"H10\", \"H11\", \"H12\"\n]\nmetrics = [\n    [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12],\n    [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13],\n    [0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14],\n    [0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15],\n    [0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16],\n    [0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17],\n    [0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18],\n    [0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19],\n    [0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2],\n    [0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21],\n    [0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22],\n    [0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot each hypothesis with a different color and style\nfor i, metric in enumerate(metrics):\n    ax.plot(metric, label=hypotheses[i], linestyle='-', linewidth=2, marker='o', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Metric')\nax.set_ylabel('Hypothesis')\nax.set_title('FashionMNIST (Neural)')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the data\nax.legend(title='Hypothesis', loc='upper left')\n\n# Set x-axis limits to ensure all data points are visible\nax.set_xlim(0, len(metrics[0]))\n\n# Set y-axis limits to ensure all data points are visible\nax.set_ylim(0, len(hypotheses))\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [-4.5, -3.2, -2.8, -1.9]\nwater_quality_scores = [0.4, 0.6, 0.7, 0.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the x-axis limits and ticks\nax.set_xlim(-0.5, len(categories) - 0.5)\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the y-axis limits and ticks\nax.set_ylim(-4, 1)\nax.set_yticks(np.arange(-4, 1.1, 0.5))\n\n# Set the title and labels\nax.set_title('Environmental Impact Scores Across Cities', fontsize=14, fontweight='bold')\nax.set_xlabel('Cities', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\n\n# Define colors for the bars\ncolors = ['#FF6347', '#FFD700', '#90EE90', '#ADD8E6']\n\n# Plot the bars for air quality scores\nbars = ax.bar(categories, air_quality_scores, color=colors, edgecolor='black', label='Air Quality')\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Plot the bars for water quality scores\nax.bar(categories, water_quality_scores, bottom=air_quality_scores, color=[c.replace('#', '#80') for c in colors], edgecolor='black', label='Water Quality')\n\n# Add data labels on top of each bar\nfor i, (bar, wq) in enumerate(zip(bars, water_quality_scores)):\n    yval = bar.get_height() + wq\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(wq, 1), ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add grid lines\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\nvalues1 = [84.97, 102.67, 78.22, 85.17, 67.17]\nvalues2 = [80.67, 78.22, 67.17, 60.0, 618.52]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0']\n\n# Plot the first set of data\nbars1 = ax.bar(categories, values1, color=colors, label='Speak duration of roles')\n\n# Plot the second set of data\nbars2 = ax.bar(categories, values2, bottom=values1, color=[c.replace('ff', 'a0') for c in colors], label='Speak tokens of roles')\n\n# Add labels and title\nax.set_xlabel('Character')\nax.set_ylabel('Tokens (s)')\nax.set_title('Comparison of Tokens for Different Characters')\nax.legend()\n\n# Add value labels on top of each bar\nfor bar in bars1 + bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom')\n\n# Set the x-axis limits to ensure all categories are visible\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([5, 10, 20, 30, 40, 50])\ny = np.array([63.77, 64.17, 64.31, 64.98, 65.82, 65.78])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nplt.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Size of Data for Training and Validation (%)', fontsize=12)\nplt.ylabel('True+ info (%)', fontsize=12)\nplt.title('Impact of Data Size on True+ Info', fontsize=14, fontweight='bold')\n\n# Customize the tick parameters\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'constant']\nvalues_all = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_arg_causal = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_0 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_1 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_2 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_3 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_4 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_5 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_test_6 = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\nvalues_constant = [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with error bars\nax.errorbar(categories, values_all, yerr=0.01, fmt='o-', label='All', color='red')\nax.errorbar(categories, values_arg_causal, yerr=0.01, fmt='s-', label='arg.causal', color='blue')\nax.errorbar(categories, values_test_0, yerr=0.01, fmt='^--', label='test.0', color='green')\nax.errorbar(categories, values_test_1, yerr=0.01, fmt='*-.', label='test.1', color='orange')\nax.errorbar(categories, values_test_2, yerr=0.01, fmt='p:', label='test.2', color='purple')\nax.errorbar(categories, values_test_3, yerr=0.01, fmt='h--', label='test.3', color='cyan')\nax.errorbar(categories, values_test_4, yerr=0.01, fmt='H-.', label='test.4', color='magenta')\nax.errorbar(categories, values_test_5, yerr=0.01, fmt='D:', label='test.5', color='lime')\nax.errorbar(categories, values_test_6, yerr=0.01, fmt='<--', label='test.6', color='navy')\nax.errorbar(categories, values_constant, yerr=0.01, fmt='>-.', label='Constant', color='gray')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Out-of-domain accuracy')\nax.set_title('Out-of-domain accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [\n    [0.7, 0.6, 0.5, 0.4, 0.3],\n    [0.8, 0.7, 0.6, 0.5, 0.4],\n    [0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.6, 0.5, 0.4, 0.3, 0.2],\n    [0.5, 0.4, 0.3, 0.2, 0.1]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, [np.mean(val) for val in values], color='skyblue', edgecolor='black')\n\n# Add error bars to represent the standard deviation\nfor i, bar in enumerate(bars):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.2f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Objective Value')\nax.set_title('Mini Crosswords Performance')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nax.legend(['Performance'], loc='upper right')\n\n# Add a watermark\nax.text(0.5, -0.1, 'ToT (0.675)', transform=ax.transAxes, fontsize=12, color='gray', alpha=0.5, ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'BART', 'DeBERTa', 'Albert', 'Llama2']\nground_truth_labels = [65, 60, 62, 68, 64, 70, 66, 63, 61]\nweak_labels = [55, 50, 52, 58, 54, 60, 56, 53, 51]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data with error bars\nbar_width = 0.35\nindex = np.arange(len(categories))\nbars1 = ax.bar(index - bar_width/2, ground_truth_labels, bar_width, label='Ground-truth labels', color='r')\nbars2 = ax.bar(index + bar_width/2, weak_labels, bar_width, label='Weak labels', color='b')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Model')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Accuracy for Different Models')\nax.set_xticks(index)\nax.set_xticklabels(categories, rotation=45)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Disourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\nvalues = [\n    [1.2, 1.3, 1.4, 1.5],  # Purple bars\n    [1.1, 1.2, 1.3, 1.4],  # Blue bars\n    [1.0, 1.1, 1.2, 1.3],  # Green bars\n    [0.9, 1.0, 1.1, 1.2],  # Orange bars\n    [0.8, 0.9, 1.0, 1.1],  # Red bars\n    [0.7, 0.8, 0.9, 1.0],  # Purple bars\n    [0.6, 0.7, 0.8, 0.9]   # Blue bars\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 1.6)\n\n# Set the title of the chart\nax.set_title('Your Chart Title Here')\n\n# Set the labels for the categories\nax.set_xlabel('Categories')\nax.set_ylabel('A')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Define colors for each category\ncolors = ['#800080', '#0000FF', '#008000', '#FFA500', '#FF0000', '#800080', '#0000FF']\n\n# Plot the data with bars\nfor i, category_values in enumerate(values):\n    ax.bar(i, category_values[0], color=colors[i], label=f'Category {i+1}')\n    ax.bar(i, category_values[1], bottom=category_values[0], color=colors[i])\n    ax.bar(i, category_values[2], bottom=sum(category_values[:2]), color=colors[i])\n    ax.bar(i, category_values[3], bottom=sum(category_values[:3]), color=colors[i])\n\n# Add a legend\nax.legend(title='Legend')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Shouting fraction for different categories\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nshouting_fractions = [0.12, 0.14, 0.13, 0.11, 0.10, 0.15]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with error bars\nax.errorbar(categories, shouting_fractions, yerr=0.02, fmt='o-', capsize=5, color='b', ecolor='gray', elinewidth=1, capthick=1)\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Shouting Fraction (Fraction of Videos)')\nax.set_title('Shouting Fraction by Category')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([15.49, 17.15, 16.03, 15.45, 14.24, 16.46, 15.49, 17.15, 16.03, 15.45, 14.24])\ny2 = np.array([19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38, 19.38])\ny3 = np.array([23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92, 23.92])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Variable, Symmetric Error', color='blue', marker='o', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Variable, Symmetric Error', color='red', marker='s', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Variable, Symmetric Error', color='green', marker='^', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Variable, Symmetric Error')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Incivility scores for different categories\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_scores = [0.17, 0.21, 0.23, 0.25, 0.27]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(categories, incivility_scores, yerr=0.02, fmt='o-', color='red', ecolor='gray', capsize=5, label='Mean')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Incivility (Fraction of Videos)')\nax.set_title('Incivility Scores by Category')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: M_B values and corresponding CC+Pantheon+ values\nM_B = np.array([-19.6, -19.5, -19.4, -19.3, -19.2, -19.1])\nCC_Pantheon_plus = np.array([-19.353, -19.394, -19.404, -19.314, -19.220, -19.380])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with error bars\nax.errorbar(M_B, CC_Pantheon_plus, yerr=0.028, fmt='o', color='b', ecolor='gray', capsize=5, label='CC+Pantheon+')\n\n# Set labels and title\nax.set_xlabel('M_B')\nax.set_ylabel('CC+Pantheon+')\nax.set_title('Sample Data with Error Bars')\n\n# Add grid lines for better readability\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of speakers over different topics\ntopics = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics']\nunique_speaker_counts = [12, 14, 10, 8, 6, 4]\nunique_shouter_counts = [15, 13, 9, 7, 5, 3]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(topics, unique_speaker_counts, marker='o', linestyle='-', color='b', label='Unique speaker count mean')\nax.plot(topics, unique_shouter_counts, marker='s', linestyle='--', color='r', label='Unique shouter count mean')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Topics', fontsize=12, fontweight='bold')\nax.set_ylabel('Number of speakers', fontsize=12, fontweight='bold')\nax.set_title('Dataset unique shouter count mean', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set y-axis limits to ensure all data points are visible\nax.set_ylim(0, 16)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Female face presence fraction (y-axis) vs. some categorical variable (x-axis)\ncategories = ['Kashmir', 'COVID/Lockdown', 'Sports', 'China']\nfemale_face_presence = [0.12, 0.15, 0.18, 0.22]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(categories, female_face_presence, yerr=0.03, fmt='o-', capsize=5, color='b', ecolor='gray', elinewidth=1, capthick=1)\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Female Face Presence Fraction')\nax.set_title('Comparison of Female Face Presence in Different Categories')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Customize the legend\nax.legend(['Dataset Mean', 'Mean'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Error bars with varying heights and positions\nx = np.arange(1, 6)\ny = np.array([1.2, 2.5, 3.8, 4.1, 5.3])\nyerr = np.array([[0.2, 0.3, 0.4, 0.5, 0.6], [0.1, 0.2, 0.3, 0.4, 0.5]])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=yerr, fmt='o', capsize=5, ecolor='gray', elinewidth=2, markeredgewidth=2)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Errorbar upper and lower limits')\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: two sets of points with varying errors\nx = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5])\ny1 = np.array([100, 120, 130, 140, 150, 160, 170, 180])\ny2 = np.array([105, 115, 125, 135, 145, 155, 165, 175])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the first dataset with a specific style\nax.plot(x, y1, marker='o', linestyle='-', color='purple', label='Variable, Symmetric Error', linewidth=2, markersize=8)\n\n# Plot the second dataset with a different style\nax.plot(x, y2, marker='s', linestyle='--', color='green', label='Variable, Symmetric Error', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X-axis Label', fontsize=12)\nax.set_ylabel('Y-axis Label', fontsize=12)\nax.set_title('Comparison of Two Variable Sets', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a more descriptive title\nax.legend(title='Legend', loc='upper left', fontsize=10)\n\n# Set limits for x and y axes\nax.set_xlim(0, 4)\nax.set_ylim(90, 190)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: x and y coordinates for multiple lines\nx = np.array([0, 2, 4, 6, 8, 10])\ny1 = np.array([2.957, 3.587, 3.704, 3.777, 3.889, 4.044])\ny2 = np.array([2.598, 2.598, 2.777, 2.889, 2.889, 2.889])\ny3 = np.array([2.561, 2.561, 2.561, 2.561, 2.561, 2.561])\ny4 = np.array([2.237, 2.237, 2.237, 2.237, 2.237, 2.237])\ny5 = np.array([2.061, 2.061, 2.061, 2.061, 2.061, 2.061])\ny6 = np.array([1.829, 1.829, 1.829, 1.829, 1.829, 1.829])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot each line with different styles\nax.plot(x, y1, label='Line 1', color='green', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Line 2', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='Line 3', color='red', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(x, y4, label='Line 4', color='purple', linestyle=':', linewidth=2, marker='D', markersize=5)\nax.plot(x, y5, label='Line 5', color='orange', linestyle='-', linewidth=2, marker='p', markersize=5)\nax.plot(x, y6, label='Line 6', color='cyan', linestyle='--', linewidth=2, marker='h', markersize=5)\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Variable, Asymmetric Error')\n\n# Add a legend\nax.legend()\n\n# Set grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set axis limits\nax.set_xlim(0, 10)\nax.set_ylim(0, 35)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: A set of points with varying y-values and x-values\nx = np.array([0, 5, 10, 15, 20])\ny1 = np.array([-2.1, -2.6, -1.2, -1.0, -2.7])\ny2 = np.array([2.6, 2.9, 2.3, 2.0, 1.8])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Errorbar', color='purple', marker='o', linestyle='-', linewidth=2, markersize=8)\nax.plot(x, y2, label='Asymmetric Error', color='blue', marker='s', linestyle='--', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Variable, Asymmetric Error')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend()\n\n# Set limits for axes\nax.set_xlim(0, 25)\nax.set_ylim(-3, 3)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, color='blue', linestyle='-', linewidth=2, marker='o', markersize=5, label='Sine Wave')\n\n# Set labels with improved formatting\nax.set_xlabel('Angle (radians)', fontsize=12)\nax.set_ylabel('Amplitude', fontsize=12)\n\n# Add a title with a descriptive caption\nax.set_title('Sine Wave Example', fontsize=14, fontweight='bold')\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for the scatter plot\nx = np.random.rand(20)\ny = np.random.rand(20)\nsizes = np.random.randint(50, 300, size=20)\n\n# Create a scatter plot with varying sizes and colors\nscatter = ax.scatter(x, y, s=sizes, c='pink', alpha=0.7, edgecolors='gray')\n\n# Add a title and labels\nax.set_title('Scatter Plot with Varying Sizes and Colors', fontsize=14, fontweight='bold')\nax.set_xlabel('X Axis Label', fontsize=12)\nax.set_ylabel('Y Axis Label', fontsize=12)\n\n# Add a color bar to indicate the size scale\ncbar = plt.colorbar(scatter)\ncbar.set_label('Size Scale', fontsize=12)\n\n# Customize the grid\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Set axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the circle\ntheta = np.linspace(0, 2 * np.pi, 12, endpoint=False)\nr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the circle\nax.plot(r * np.cos(theta), r * np.sin(theta), 'o-', lw=2, markersize=10, color='yellow')\n\n# Set equal aspect ratio to ensure the circle is not distorted\nax.set_aspect('equal', adjustable='box')\n\n# Remove axes for a cleaner look\nax.axis('off')\n\n# Add a title\nax.set_title('Circle with Equal Radius Points', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, color='teal', linestyle='-', linewidth=2, marker='o', markersize=5, label='Sine Wave')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with improved font size and style\nax.set_xlabel('Angle (radians)', fontsize=14, fontweight='bold')\nax.set_ylabel('Sine Value', fontsize=14, fontweight='bold')\n\n# Set a title with a larger font size and style\nax.set_title('Sine Wave Example', fontsize=16, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', shadow=True, fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the triangle\nx = np.array([0, 2, 1])\ny = np.array([0, 0, 2])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the triangle\nax.plot(x, y, 'b-', marker='o', markersize=10)\n\n# Add labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Triangle with Coordinates')\n\n# Highlight vertices\nfor i, txt in enumerate(zip(x, y)):\n    ax.annotate(f'({txt[0]:.1f}, {txt[1]:.1f})', (txt[0], txt[1]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Draw grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set aspect ratio to be equal\nax.set_aspect('equal', adjustable='box')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.61, 0.74, 0.70, 0.70, 0.57],\n    [0.69, 0.77, 0.64, 0.62, 0.45],\n    [0.70, 0.67, 0.88, 0.69, 0.54],\n    [0.64, 0.72, 0.66, 0.62, 0.45],\n    [0.67, 0.70, 0.70, 0.67, 0.57]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a heatmap using the data\ncax = ax.matshow(data, cmap='YlOrRd', interpolation='nearest')\n\n# Add color bar to the side of the heatmap\ncbar = fig.colorbar(cax)\n\n# Set labels for the x and y axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\nax.set_yticklabels(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add a title to the heatmap\nplt.title('Heatmap of Performance Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [15.7, 28.1, 2.6, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 8.1, 9.2],\n    [50.8, 12.2, 0.6, 13.9, 16.3],\n    [49.2, 11.2, 0.9, 14.3, 13.4],\n    [50.3, 12.0, 0.9, 13.9, 16.3]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a heatmap using the data\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Wererewolf'])\nax.set_yticklabels(['Voter 1', 'Voter 2', 'Voter 3', 'Voter 4', 'Voter 5'])\nax.set_title('Heatmap of Votes')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5]\n])\n\n# Players and players\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a heatmap using the data\ncax = ax.matshow(data, cmap='YlOrRd')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(players)))\nax.set_yticks(np.arange(len(players)))\n\n# Set labels for the ticks\nax.set_xticklabels(players)\nax.set_yticklabels(players)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add title and labels\nplt.title('Heatmap of Player Performance')\nplt.xlabel('Players')\nplt.ylabel('Players')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [10, 20, 30, 40],\n    [20, 30, 40, 50],\n    [30, 40, 50, 60],\n    [40, 50, 60, 70]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='viridis', interpolation='nearest')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['A', 'B', 'C', 'D'])\nax.set_yticklabels(['X', 'Y', 'Z', 'W'])\nax.set_title('Heatmap Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [10, 10, 10],\n    [7, 7, 7],\n    [28, 28, 28]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a heatmap using the data\ncax = ax.matshow(data, cmap='YlOrBr')\n\n# Add color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set labels for the x and y axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\n\n# Set labels for the x and y axis ticks\nax.set_xticklabels(['D2', 'D1', 'D0'])\nax.set_yticklabels(['LOH0', 'LOH1', 'LOH2'])\n\n# Add grid lines to improve readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add annotations to each cell\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        text = ax.text(j, i, str(data[i, j]) + '%',\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Set title for the heatmap\nax.set_title('Heatmap of LOMLP')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\nvalues = [\n    [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05, 1.15],\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2],\n    [0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05, 1.15, 1.25],\n    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3],\n    [0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05, 1.15, 1.25, 1.35],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4],\n    [0.55, 0.65, 0.75, 0.85, 0.95, 1.05, 1.15, 1.25, 1.35, 1.45],\n    [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5],\n    [0.65, 0.75, 0.85, 0.95, 1.05, 1.15, 1.25, 1.35, 1.45, 1.55],\n    [0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the color map\ncmap = plt.cm.viridis\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, [np.mean(val) for val in values], color=cmap(np.linspace(0, 1, len(values))))\n\n# Add a title and labels\nax.set_title('Bar Chart with Color Map', fontsize=16)\nax.set_xlabel('Categories', fontsize=14)\nax.set_ylabel('Values', fontsize=14)\n\n# Add a legend\nax.legend(bars, categories, title='Legend', loc='upper right')\n\n# Add grid lines\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.2f}', ha='center', va='bottom', fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['1', '3', '5', '9', '12']\nvalues = [1, 3, 5, 9, 12]\nperplexities = [7.59, 7.59, 7.59, 7.59, 7.59]\nincreases = [4, 3, 2, 1, 0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('To layer')\nax.set_ylabel('Start removing from layer')\nax.set_title('Perplexity = 7.59')\n\n# Add a legend\nax.legend(['m bert\u2192sat'])\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval}', ha='center', va='bottom')\n\n# Add a color bar for the increase in perplexity\nsm = plt.cm.ScalarMappable(cmap='coolwarm', norm=plt.Normalize(vmin=min(increases), vmax=max(increases)))\nsm._A = []\ncbar = fig.colorbar(sm)\ncbar.set_label('Increase in perplexity')\n\n# Set the y-axis limits\nax.set_ylim(0, 13)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 665, 327],\n    [459, 274, 797, 660, 405],\n    [784, 637, 523, 435, 891],\n    [935, 945, 739, 650, 488],\n    [729, 651, 700, 760, 711],\n    [863, 700, 644, 650, 473],\n    [292, 949, 365, 142, 711]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Create a heatmap using the data array\ncax = ax.matshow(data, cmap='hot', interpolation='nearest')\n\n# Add color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set labels for the x and y axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\n\n# Set labels for the x and y axis ticks\nax.set_xticklabels(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])\nax.set_yticklabels(['Sales Rank 1', 'Sales Rank 2', 'Sales Rank 3', 'Sales Rank 4', 'Sales Rank 5', 'Sales Rank 6', 'Sales Rank 7', 'Sales Rank 8', 'Sales Rank 9'])\n\n# Set title for the heatmap\nax.set_title('Sales Performance Heatmap')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.2, 0.4, 0.6, 0.8, 0.9],\n    [0.1, 0.3, 0.5, 0.7, 0.8],\n    [0.2, 0.4, 0.6, 0.8, 0.9],\n    [0.1, 0.3, 0.5, 0.7, 0.8],\n    [0.2, 0.4, 0.6, 0.8, 0.9]\n])\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='viridis', interpolation='nearest')\n\n# Add color bar which maps values to colors\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xlabel('Option')\nax.set_ylabel('Context')\nax.set_title('Heatmap of Contextual Options')\n\n# Customize ticks and labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['0', '5', '10', '15', '20'])\nax.set_yticklabels(['context', 'option', 'cot', 'last', 'option'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.55, 0.72, 0.60, 0.54],\n    [0.42, 0.65, 0.44, 0.89],\n    [0.96, 0.38, 0.79, 0.09],\n    [0.57, 0.93, 0.07, 0.09],\n    [0.96, 0.36, 0.44, 0.77],\n    [0.46, 0.57, 0.62, 0.68],\n    [0.61, 0.62, 0.70, 0.06],\n    [0.67, 0.67, 0.21, 0.13],\n    [0.96, 0.36, 0.44, 0.77],\n    [0.46, 0.57, 0.62, 0.68],\n    [0.61, 0.62, 0.70, 0.06],\n    [0.67, 0.67, 0.21, 0.13]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='YlOrBr', fignum=1)\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data)))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['96', '192', '336', '720'])\nax.set_yticklabels(['96', '192', '336', '720'])\nax.set_title('Weather')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\ncategories = ['Wererewolf', 'Seer', 'Witch', 'Villager']\nsubcategories = ['Abstain', 'Wererewolf', 'Seer', 'Witch', 'Villager', 'Hunter']\ndata = [\n    [15.7, 28.1, 26.0, 10.5, 76.0, 50.8],\n    [12.0, 0.9, 6.2, 14.3, 2.1, 11.2],\n    [7.8, 0.6, 12.3, 9.2, 0.5, 50.8],\n    [16.3, 7.0, 15.5, 28.6, 0.9, 13.9]\n]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Set the color map\ncmap = plt.cm.Blues\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh(subcategories, data[i], left=np.arange(len(subcategories)), height=0.8, align='center', alpha=0.7, label=category, color=cmap(i / len(categories)))\n\n# Add grid lines for better readability\nax.xaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\nax.yaxis.grid(False)\n\n# Set labels and title\nax.set_xlabel('Percentage', fontsize=14, fontweight='bold')\nax.set_ylabel('Role', fontsize=14, fontweight='bold')\nax.set_title('Role Voting in the Werewolf Game', fontsize=16, fontweight='bold')\n\n# Add a legend\nax.legend(title='Character Role', loc='upper right', fontsize=12)\n\n# Set x-axis limits\nax.set_xlim(0, 100)\n\n# Add annotations for better data visualization\nfor i, category in enumerate(categories):\n    for j, value in enumerate(data[i]):\n        ax.text(value + 0.5, j, f'{value:.1f}%', ha='left', va='center', fontsize=10, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nresponses = [\n    [169, 547, 662, 271, 1248],\n    [115, 439, 753, 239, 1355],\n    [219, 585, 557, 259, 1269],\n    [67, 941, 708, 432, 732],\n    [177, 554, 661, 235, 1246]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.viridis\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, [r[0] for r in responses], color=cmap(0.2), label='Response 1')\nfor i, bar in enumerate(bars):\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 5, f'{responses[i][0]}', ha='center', va='bottom')\n\nbars = ax.bar(categories, [r[1] for r in responses], bottom=[r[0] for r in responses], color=cmap(0.4), label='Response 2')\nfor i, bar in enumerate(bars):\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + bar.get_y() + 5, f'{responses[i][1]}', ha='center', va='bottom')\n\nbars = ax.bar(categories, [r[2] for r in responses], bottom=[sum(r[:2]) for r in responses], color=cmap(0.6), label='Response 3')\nfor i, bar in enumerate(bars):\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + sum(r[:2]) + 5, f'{responses[i][2]}', ha='center', va='bottom')\n\nbars = ax.bar(categories, [r[3] for r in responses], bottom=[sum(r[:3]) for r in responses], color=cmap(0.8), label='Response 4')\nfor i, bar in enumerate(bars):\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + sum(r[:3]) + 5, f'{responses[i][3]}', ha='center', va='bottom')\n\nbars = ax.bar(categories, [r[4] for r in responses], bottom=[sum(r[:4]) for r in responses], color=cmap(1.0), label='Response 5')\nfor i, bar in enumerate(bars):\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + sum(r[:4]) + 5, f'{responses[i][4]}', ha='center', va='bottom')\n\n# Add title and labels\nax.set_title('Question Type: All three types of questions', fontsize=14, fontweight='bold')\nax.set_xlabel('Response Action Category', fontsize=12)\nax.set_ylabel('Value', fontsize=12)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set x-axis tick labels\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Set y-axis limits\nax.set_ylim(0, 1200)\n\n# Add grid lines\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'feart', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.50, 0.00, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.44, 0.00, 0.00, 0.00]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for the original and adjusted data\nbars_original = ax.bar(index - bar_width/2, original_values, bar_width, label='Original', color='skyblue')\nbars_adjusted = ax.bar(index + bar_width/2, adjusted_values, bar_width, label='Adjusted', color='lightgreen')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Emotion Categories', fontsize=12)\nax.set_ylabel('Intensity', fontsize=12)\nax.set_title('Comparison of Emotion Intensity', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars_original)\nadd_value_labels(bars_adjusted)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [15.7, 28.1, 2.6, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 14.3],\n    [49.2, 11.2, 0.6, 7.8, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 16.3]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a heatmap using the data\ncax = ax.matshow(data, cmap='Blues', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'])\nax.set_yticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Abstain'])\nax.set_title('Heatmap of Votes')\n\n# Annotate each cell with its value\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.text(j, i, f'{data[i, j]:.1f}', ha='center', va='center', color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [17, 24, 23],\n    [3, 8, 17],\n    [5, 10, 1],\n    [13, 20, 9],\n    [15, 24, 11]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Create a heatmap using the data\ncax = ax.matshow(data, cmap='YlGnBu', interpolation='nearest')\n\n# Add color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set labels for the x and y axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\n\n# Set labels for the x and y axis ticks\nax.set_xticklabels(['#17', '#24', '#23'])\nax.set_yticklabels(['#3', '#8', '#17'])\n\n# Add grid lines to improve readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add annotations to each cell\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.text(j, i, str(data[i][j]), ha='center', va='center', color='black')\n\n# Set title and labels\nax.set_title('Heatmap Example')\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(1, 7)\ny1 = [0.10, 0.08, 0.30, 0.60, 0.00, 0.07]\ny2 = [0.12, 0.22, 0.44, 0.30, 0.32, 0.10]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, marker='o', linestyle='-', color='b', label='Dataset 1')\nax.plot(x, y2, marker='s', linestyle='--', color='r', label='Dataset 2')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Comparison of Two Datasets')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add a legend to explain the datasets\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley']\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021]\nvalues = [\n    [0.8, 2.4, 2.5, 3.9, 0.0, 0.0, 0.0],\n    [2.4, 0.0, 4.0, 1.0, 0.0, 0.0, 0.0],\n    [1.1, 2.4, 0.8, 4.3, 0.0, 0.0, 0.0],\n    [0.6, 0.0, 0.3, 0.0, 0.0, 0.0, 0.0],\n    [0.7, 1.7, 0.6, 2.6, 0.0, 0.0, 0.0],\n    [1.3, 1.2, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.1, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the width of each bar\nbar_width = 0.15\n\n# Set the positions of the bars on the x-axis\nx_positions = np.arange(len(years))\n\n# Plot each category's data\nfor i, category in enumerate(categories):\n    ax.bar(x_positions + i * bar_width, values[i], bar_width, label=category, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Harvest [t/year]')\nax.set_title('Harvest by Category Over Years')\nax.set_xticks(x_positions + bar_width * (len(categories) - 1) / 2)\nax.set_xticklabels(years)\nax.legend()\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvest = [6, 5, 3, 2, 1, 0.6]\nweekly_sales = [85, 70, 60, 51, 41, 37]\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map for the bars\ncmap = plt.cm.get_cmap('viridis')\n\n# Plot the first dataset (weekly sales)\nbars = ax1.bar(categories, weekly_sales, color=cmap(np.linspace(0.2, 0.8, len(categories))), label='Weekly Sales')\n\n# Set the y-axis label for the first dataset\nax1.set_ylabel('Weekly Sold Copies', color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\n\n# Plot the second dataset (harvest)\nax2.plot(categories, harvest, marker='o', linestyle='-', color='tab:orange', linewidth=2, markersize=8, label='Harvest')\n\n# Set the y-axis label for the second dataset\nax2.set_ylabel('Harvest [t/year]', color='tab:orange')\nax2.tick_params(axis='y', labelcolor='tab:orange')\n\n# Add a title and legend\nplt.title('Harvest vs Weekly Sales of Various Crops')\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.9), ncol=2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(4, 3, figsize=(9.0, 6.0), constrained_layout=True)\n\n# Define a function to create a heatmap with a specific color map\ndef create_heatmap(ax, data, title):\n    ax.imshow(data, cmap='viridis', interpolation='nearest')\n    ax.set_title(title)\n    ax.axis('off')\n\n# Generate random data for each subplot\ndata_sets = [\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10)\n]\n\n# Add titles to each subplot\ntitles = [\n    'None', 'none', 'nearest', 'bilinear', 'bicubic', 'spline16',\n    'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadratic',\n    'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos'\n]\n\n# Plot each dataset in a separate subplot\nfor i, ax in enumerate(axes.flat):\n    create_heatmap(ax, data_sets[i], titles[i])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E']\nvalues = [3, 5, 2, 8, 4]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bar chart with customized colors and edge styles\nbars = ax.bar(categories, values, color=['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0'], edgecolor='black', linewidth=1.5)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart with Custom Edges')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes']\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\nsales_data = [\n    [1.5, 2.2, 1.8, 3.2, 0.5, 3.8, 0.3],\n    [2.8, 0.5, 3.6, 1.8, 0.6, 2.2, 0.6],\n    [1.0, 2.1, 0.9, 4.0, 1.5, 4.2, 0.4],\n    [0.7, 0.6, 0.4, 3.4, 2.3, 3.1, 0.6],\n    [0.9, 1.6, 2.0, 5.9, 1.6, 5.1, 0.5],\n    [1.2, 1.3, 0.5, 2.0, 0.7, 3.1, 0.8],\n    [0.3, 1.9, 0.6, 0.8, 1.8, 1.3, 5.9]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('YlOrRd')\n\n# Plot the data with a bar chart\nbars = []\nfor i, vendor in enumerate(vendors):\n    bar = ax.bar(categories, sales_data[i], bottom=np.sum(sales_data[:i], axis=0), label=vendor, color=cmap(i/len(vendors)))\n    bars.append(bar)\n\n# Add a legend\nax.legend(title='Vendors')\n\n# Add labels and title\nax.set_xlabel('Fruit')\nax.set_ylabel('Sales (in tons/year)')\nax.set_title('Sales of vendors (in tons/year)')\n\n# Add grid lines\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add annotations for better readability\nfor bar in bars:\n    for i, v in enumerate(bar):\n        height = v.get_height()\n        ax.text(v.get_x() + v.get_width()/2, height, f'{height:.1f}', ha='center', va='bottom', fontsize=8)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Low', 'Medium', 'High']\nvalues = [17, 36, 28, 23]\nheights = [79, 53, 34, 35]\nwidths = [4, 5, 0, 75]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the bars with varying heights and colors\nfor i, (category, value, height, width, color) in enumerate(zip(categories, values, heights, widths, colors)):\n    ax.barh(category, value, height=height, left=width, color=color, edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Degree of acceptance of a product')\nax.set_title('Degree of acceptance of a product')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['ada', 'mistral', 'distilroberta', 'mpnet', 'MiniLM', 'qa-distilbert']\nsubcategories = ['ada', 'mis', 'dis', 'mpn', 'Min', 'qad']\ndata = np.array([\n    [0.95, 0.85, 0.75, 0.65, 0.55, 0.45],\n    [0.90, 0.80, 0.70, 0.60, 0.50, 0.40],\n    [0.85, 0.75, 0.65, 0.55, 0.45, 0.35],\n    [0.80, 0.70, 0.60, 0.50, 0.40, 0.30],\n    [0.75, 0.65, 0.55, 0.45, 0.35, 0.25],\n    [0.70, 0.60, 0.50, 0.40, 0.30, 0.20]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data using a heatmap\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(subcategories)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(subcategories)\nax.set_yticklabels(categories)\nax.set_title('Bottleneck Distance vs Wasserstein Distance')\n\n# Annotate each cell with its value\nfor i in range(len(categories)):\n    for j in range(len(subcategories)):\n        text = ax.text(j, i, f'{data[i, j]:.2f}', ha=\"center\", va=\"center\", color=\"w\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9],\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8],\n    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6],\n    [0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],\n    [0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],\n    [0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],\n    [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n])\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='hot', fignum=1)\n\n# Add a color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xlabel('Timeshift')\nax.set_ylabel('Scales')\nax.set_title('ROC\\'s AUC')\n\n# Customize ticks\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels([str(i) for i in range(1, len(data[0]) + 1)])\nax.set_yticklabels([str(i) for i in range(1, len(data) + 1)])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Create a heatmap using the data\ncax = ax.matshow(data, cmap='viridis', interpolation='nearest')\n\n# Add color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set labels for the x and y axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation'])\nax.set_yticklabels(['0', '4', '8', '12', '16'])\n\n# Set title and labels for clarity\nax.set_title('Heatmap Representation')\nax.set_xlabel('Categories')\nax.set_ylabel('Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Live', 'CSIQ', 'TID2013', 'KADID']\nground_truth = [0, 1, 2, 3]\npredicted = [0, 1, 2, 3]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99']\n\n# Plot the heatmap\nheatmap = ax.imshow(np.random.rand(4, 4), cmap='YlOrRd', interpolation='nearest')\n\n# Add color bar\ncbar = plt.colorbar(heatmap)\ncbar.set_label('Score')\n\n# Set labels and title\nax.set_title('Heatmap of Scores')\nax.set_xlabel('Predicted Category')\nax.set_ylabel('Ground Truth Category')\n\n# Set ticks and labels\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(ground_truth)))\nax.set_xticklabels(categories)\nax.set_yticklabels(ground_truth)\n\n# Annotate cells with values\nfor i in range(len(ground_truth)):\n    for j in range(len(categories)):\n        text = ax.text(j, i, f'{np.random.randint(0, 100)}', ha=\"center\", va=\"center\", color=\"black\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmodels = ['Kokkos', 'Raja', 'Omp', 'Oacc', 'Sycl', 'Native Port']\nbandwidths = [\n    [876, 136, 435, 534, 322, 804],\n    [750, 1737, 742, 375, 750, 1825],\n    [764, 676, 782, 421, 925, 911],\n    [482, 120, 843, 1170, 925, 911]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each model\ncolors = ['#FF6F61', '#88B04B', '#FDB462', '#76C7E7']\n\n# Plot each model's bandwidth data\nfor i, model in enumerate(models):\n    ax.bar(range(len(bandwidths[i])), bandwidths[i], color=colors[i], label=model)\n\n# Set labels and title\nax.set_xlabel('Programming Model')\nax.set_ylabel('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_title('BabelStream triad Average Memory Bandwidth by Programming Model')\n\n# Set x-ticks and labels\nax.set_xticks(range(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(title='Model')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the heatmap\ndata = np.array([\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.71, 0.82],\n    [0.90, 1.00, 0.93, 0.92, 0.66, 0.67, 0.72, 0.82],\n    [0.89, 0.93, 1.00, 0.95, 0.66, 0.68, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 1.00, 0.68, 0.69, 0.72, 0.82],\n    [0.64, 0.66, 0.66, 0.68, 1.00, 0.85, 0.90, 0.86],\n    [0.65, 0.67, 0.68, 0.69, 0.85, 1.00, 0.90, 0.86],\n    [0.71, 0.72, 0.72, 0.72, 0.90, 0.90, 1.00, 0.80],\n    [0.82, 0.82, 0.82, 0.82, 0.86, 0.86, 0.80, 1.00]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap with a color map\ncax = ax.matshow(data, cmap='hot', fignum=1)\n\n# Add a color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set labels for the x and y axes\nax.set_xticks(np.arange(len(data)))\nax.set_yticks(np.arange(len(data)))\n\n# Set labels for each tick\nax.set_xticklabels(['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'zh'])\nax.set_yticklabels(['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'zh'])\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add a title to the heatmap\nplt.title('Correlation Coefficients')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['ROUGE', 'BertScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL']\nvalues = [\n    [0.19, 0.62],\n    [0.19, 0.53, 0.52],\n    [0.16, 0.39, 0.50],\n    [0.03, 0.24, 0.20],\n    [-0.03, 0.10, 0.06, 0.20],\n    [-0.07, 0.28, 0.26, 0.21],\n    [-0.05, 0.07, 0.26, 0.05]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh([i] * len(values[i]), values[i], height=0.4, left=np.arange(len(values[i])), color=colors[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Values')\nax.set_ylabel('Categories')\nax.set_title('Bar Chart with Multiple Values per Category')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Metrics')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4],\n    [11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5],\n    [10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6],\n    [9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7],\n    [8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8],\n    [7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9],\n    [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10],\n    [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11],\n    [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12],\n    [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13],\n    [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Create a heatmap using the data array\ncax = ax.matshow(data, cmap='viridis')\n\n# Add a color bar to the side of the heatmap\nfig.colorbar(cax)\n\n# Set labels for the x and y axes\nax.set_xlabel('Layers')\nax.set_ylabel('Endofoctext')\n\n# Set the title of the plot\nax.set_title('Heatmap of Endofoctext')\n\n# Set the tick labels for the x and y axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of pairs vs Test Winning Distance\nx = np.array([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\ny = np.array([\n    [50, 60, 70, 80, 90, 100],\n    [40, 50, 60, 70, 80, 90],\n    [30, 40, 50, 60, 70, 80],\n    [20, 30, 40, 50, 60, 70],\n    [10, 20, 30, 40, 50, 60],\n    [0, 10, 20, 30, 40, 50]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with a bar chart\nbar_width = 0.15\nindex = np.arange(len(x))\ncolors = ['tab:blue', 'tab:green', 'tab:orange', 'tab:purple', 'tab:brown', 'tab:pink']\n\nfor i in range(y.shape[1]):\n    ax.bar(index + i * bar_width, y[:, i], bar_width, label=f'Pair {i+1}', color=colors[i])\n\n# Set labels and title\nax.set_xlabel('Test Winning Distance')\nax.set_ylabel('Number of Pairs')\nax.set_title('Number of Pairs vs Test Winning Distance')\nax.set_xticks(index + bar_width * (y.shape[1] - 1) / 2)\nax.set_xticklabels(x)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the histograms\ncosine_similarity = np.random.normal(loc=0.5, scale=0.2, size=1000)\ninter_class = np.random.normal(loc=0.7, scale=0.1, size=1000)\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Plot the first histogram\naxes[0].hist(cosine_similarity, bins=20, color='lightblue', edgecolor='black', alpha=0.7)\naxes[0].set_title('Cosine Similarity')\naxes[0].set_xlabel('Cosine Similarity')\naxes[0].set_ylabel('Frequency')\n\n# Plot the second histogram\naxes[1].hist(inter_class, bins=20, color='lightgreen', edgecolor='black', alpha=0.7)\naxes[1].set_title('Inter Class')\naxes[1].set_xlabel('Inter Class')\naxes[1].set_ylabel('Frequency')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Euclidean Distance vs Density\neuclidean_distance = np.array([0.5, 1.0, 1.5, 2.0, 2.5])\ndensity = np.array([0.0, 0.4, 0.6, 0.8, 1.0])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 8.0))\n\n# Plot the data with different styles and colors\nplt.plot(euclidean_distance, density, marker='o', linestyle='-', color='b', label='Baseline')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Euclidean Distance', fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.title('Euclidean Distance vs Density', fontsize=14)\n\n# Add a legend with a specific location\nplt.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ndata = {\n    'MATHWELL': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'Llama-2': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'Lamma-2 MaC': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'LLEMMMA': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'LLEMMMA MaC': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'MAMMOTh': (np.random.rand(100) * 10, np.random.rand(100) * 10),\n    'MAMMOTh MaC': (np.random.rand(100) * 10, np.random.rand(100) * 10)\n}\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(7.0, 8.0), constrained_layout=True)\n\n# Plot each dataset in a separate subplot\nfor ax, (title, (x, y)) in zip(axes.flatten(), data.items()):\n    ax.scatter(x, y, alpha=0.5, s=50, edgecolor='k')\n    ax.set_title(title)\n    ax.set_xlabel('FKGL')\n    ax.set_ylabel('Density')\n\n# Remove unused subplots\nfor i in range(len(data), 9):\n    fig.delaxes(axes.flatten()[i])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['0.02', '0.04', '0.06', '0.08']\ncamels = [100, 200, 300, 400]\nkangaroos = [150, 250, 350, 450]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data with different colors and styles\nax.bar(categories, camels, color='skyblue', label='Camels')\nax.bar(categories, kangaroos, bottom=camels, color='orange', label='Kangaroos')\n\n# Set labels and title\nax.set_xlabel('Animal Weight (Tons)')\nax.set_ylabel('Frequency')\nax.set_title('Desert Animals in the Wild')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add a legend to explain the data\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['0', '2', '4', '6', '8']\nuniform_data = [10, 30, 50, 70, 90]\nnormal_data = [20, 40, 60, 80, 100]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the width of each bar\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars for uniform data\nbars1 = ax.bar(index - bar_width/2, uniform_data, bar_width, label='Uniform data', color='red')\n\n# Plot the bars for normal data\nbars2 = ax.bar(index + bar_width/2, normal_data, bar_width, label='Normal data', color='blue')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Frequency')\nax.set_title('Comparison of Uniform and Normal Distributions')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of the bars\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(-2, 6, 100)\ny = np.sin(x) * np.exp(-0.1 * x**2)\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styling\nplt.plot(x, y, color='blue', linewidth=2, linestyle='-', marker='o', markersize=5, label='Sine Wave')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set axis labels with improved font size and style\nplt.xlabel('Time (s)', fontsize=12, fontweight='bold')\nplt.ylabel('Amplitude', fontsize=12, fontweight='bold')\n\n# Set title with a larger font size and style\nplt.title('Sine Wave with Exponential Decay', fontsize=14, fontweight='bold')\n\n# Add a legend with a specific location\nplt.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['0.0', '0.5', '1.0', '1.5', '2.0', '2.5', '3.0']\nvalues_baguettes = [10, 20, 30, 40, 50, 60, 70]\nvalues_youtiao = [80, 70, 60, 50, 40, 30, 20]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with different colors and styles\nax.bar(categories, values_baguettes, color='blue', label='Baguette', alpha=0.7)\nax.bar(categories, values_youtiao, bottom=values_baguettes, color='orange', label='Youtiao', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Frequency')\nax.set_title('Baking Accuracy Analysis')\n\n# Add a legend\nax.legend()\n\n# Set grid lines\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of pairs vs Test winning distance\ntest_distances = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\nxsum_pairs = [30, 50, 70, 90, 110, 130]\ncnn_pairs = [20, 40, 60, 80, 100, 120]\nnarrativeqa_pairs = [10, 30, 50, 70, 90, 110]\nnaturalquestions_closed_pairs = [40, 60, 80, 100, 120, 140]\nnaturalquestions_open_pairs = [30, 50, 70, 90, 110, 130]\nquac_pairs = [20, 40, 60, 80, 100, 120]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Plot the data with different colors and line styles\nax.plot(test_distances, xsum_pairs, label='XSum', color='blue', linestyle='-', linewidth=2)\nax.plot(test_distances, cnn_pairs, label='CNN/DailyMail', color='yellow', linestyle='--', linewidth=2)\nax.plot(test_distances, narrativeqa_pairs, label='NarrativeQA', color='orange', linestyle='-.', linewidth=2)\nax.plot(test_distances, naturalquestions_closed_pairs, label='NaturalQuestions - Closed-book', color='pink', linestyle=':', linewidth=2)\nax.plot(test_distances, naturalquestions_open_pairs, label='NaturalQuestions - Open-book', color='cyan', linestyle='-', linewidth=2)\nax.plot(test_distances, quac_pairs, label='QuAC', color='teal', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Test Winning Distance')\nax.set_ylabel('Number of Pairs')\nax.set_title('Number of Pairs vs Test Winning Distance')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the data\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of nominations for different categories\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\nyears = [0, 50, 100, 150, 200, 250, 300]\nnominations = [\n    [10, 15, 20, 25, 30, 35, 40],  # Record of the Year\n    [5, 10, 15, 20, 25, 30, 35],   # Album of the Year\n    [8, 12, 16, 20, 24, 28, 32],   # Song of the Year\n    [7, 11, 15, 19, 23, 27, 31],   # Best New Artist\n    [6, 10, 14, 18, 22, 26, 30]    # Best Pop Solo Performance\n]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot each category with different colors and patterns\ncolors = ['#FF6F61', '#FFC65D', '#88B04B', '#8E44AD', '#2980B9']\npatterns = ['/', '\\\\', '|', '-', '+']\n\nfor i, category in enumerate(categories):\n    ax.bar(years, nominations[i], color=colors[i % len(colors)], hatch=patterns[i % len(patterns)], label=category)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Nominations')\nax.set_title('Grammy Nominations Across Categories (2019-2023)')\nax.legend(title='Categories')\n\n# Set x-axis limits and ticks\nax.set_xlim(0, 300)\nax.set_xticks(years)\n\n# Set y-axis limits and ticks\nax.set_ylim(0, 45)\nax.set_yticks(np.arange(0, 46, 5))\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the plot\nx = np.linspace(0, 0.3, 100)\ny1 = np.exp(-x**2)\ny2 = np.sin(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Non-defective', color='green', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Defective', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Time (s)', fontsize=12)\nax.set_ylabel('Amplitude', fontsize=12)\nax.set_title('MNIST - Defect Detection', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 0.4, 0.1))\nax.set_yticks(np.arange(0, 1.2, 0.2))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: TM-score vs Frequency of different proteins\ntm_scores = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nfrequency_sam = [25, 30, 35, 40, 45, 50, 55]\nfrequency_thioredoxin_like = [15, 20, 25, 30, 35, 40, 45]\nfrequency_tetracopeptide_like_helical_domain = [10, 15, 20, 25, 30, 35, 40]\nfrequency_cheY_like = [5, 10, 15, 20, 25, 30, 35]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different colors and styles\nax.plot(tm_scores, frequency_sam, label='SAM-dependent methyltransferase', color='royalblue', marker='o', linestyle='-', linewidth=2)\nax.plot(tm_scores, frequency_thioredoxin_like, label='Thioredoxin-like', color='darkturquoise', marker='s', linestyle='--', linewidth=2)\nax.plot(tm_scores, frequency_tetracopeptide_like_helical_domain, label='Tetracopeptide-like helical domain', color='forestgreen', marker='^', linestyle='-.', linewidth=2)\nax.plot(tm_scores, frequency_cheY_like, label='CheY-like', color='gold', marker='D', linestyle=':', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('TM-score')\nax.set_ylabel('Frequency')\nax.set_title('Protein Frequency by TM-score')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper left', fontsize='small')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata = {\n    'Swiss': [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],\n    'New Zealand': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n}\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot 1: Milk Chocolate\naxes[0, 0].bar(data['Swiss'], data['Swiss'], color='blue', label='Swiss')\naxes[0, 0].bar(data['New Zealand'], data['New Zealand'], color='orange', label='New Zealand')\naxes[0, 0].set_title('Milk Chocolate')\naxes[0, 0].set_xlabel('Sweetness')\naxes[0, 0].set_ylabel('Density')\naxes[0, 0].legend()\n\n# Plot 2: Dark Chocolate\naxes[0, 1].bar(data['Swiss'], data['Swiss'], color='blue', label='Swiss')\naxes[0, 1].bar(data['New Zealand'], data['New Zealand'], color='orange', label='New Zealand')\naxes[0, 1].set_title('Dark Chocolate')\naxes[0, 1].set_xlabel('Sweetness')\naxes[0, 1].set_ylabel('Density')\naxes[0, 1].legend()\n\n# Plot 3: White Chocolate\naxes[1, 0].bar(data['Swiss'], data['Swiss'], color='blue', label='Swiss')\naxes[1, 0].bar(data['New Zealand'], data['New Zealand'], color='orange', label='New Zealand')\naxes[1, 0].set_title('White Chocolate')\naxes[1, 0].set_xlabel('Sweetness')\naxes[1, 0].set_ylabel('Density')\naxes[1, 0].legend()\n\n# Plot 4: Ruby Chocolate\naxes[1, 1].bar(data['Swiss'], data['Swiss'], color='blue', label='Swiss')\naxes[1, 1].bar(data['New Zealand'], data['New Zealand'], color='orange', label='New Zealand')\naxes[1, 1].set_title('Ruby Chocolate')\naxes[1, 1].set_xlabel('Sweetness')\naxes[1, 1].set_ylabel('Density')\naxes[1, 1].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\ncategories = ['Class', 'Camel', 'Kangaroo']\nvalues = [1000, 200, 30]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color=['green', 'pink', 'brown'])\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Count')\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, round(yval, 2), ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0, 1050)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\ncenter_values = [80, 70, 60, 50, 40]\nrandom_values = [90, 85, 75, 65, 55]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data with different colors and styles\nbars_center = ax.bar(categories, center_values, color='yellow', label='Center')\nbars_random = ax.bar(categories, random_values, bottom=center_values, color='lightblue', label='Random')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Number of Examples')\nax.set_title('Comparison of Center vs Random')\nax.legend()\n\n# Add value labels on top of each bar\nfor bar in bars_center + bars_random:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval), ha='center', va='bottom')\n\n# Set x-axis limits and ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the histogram\ndata = [120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260, 1270, 1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370, 1380, 1390, 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480, 1490, 1500]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the histogram with specified parameters\nax.hist(data, bins=20, color='orange', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Number of Repetition')\nax.set_ylabel('Number of Clusters')\nax.set_title('Histogram of Number of Clusters by Number of Repetition')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ndistances = np.array([0, 1, 2, 3, 4])\ncorrectly_classified = np.array([400, 300, 200, 100, 50])\nmisclassified = np.array([30, 20, 10, 5, 2])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data with different colors and styles\nbars = ax.bar(distances, correctly_classified, color='blue', label='Correctly classified')\nax.bar(distances, misclassified, bottom=correctly_classified, color='orange', label='Misclassified')\n\n# Add labels and title\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Count')\nax.set_title('Classification Accuracy by Distance')\nax.legend()\n\n# Set x-ticks and labels\nax.set_xticks(distances)\nax.set_xticklabels(['0', '1', '2', '3', '4'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Confidence levels and corresponding accuracy in bin\nconfidence_levels = [0.0, 0.2, 0.4, 0.6, 0.8]\naccuracy_in_bin = [0.1, 0.3, 0.5, 0.7, 0.9]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(confidence_levels, accuracy_in_bin, color='darkorange', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Confidence in Bin')\nax.set_ylabel('Accuracy in Bin')\nax.set_title('Calibration Error: 0.31')\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\n# Set the y-axis limits to ensure the plot fits well\nax.set_ylim(0, 1.0)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the histogram\ndata = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the histogram with specified parameters\nax.hist(data, bins=10, color='skyblue', edgecolor='black', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Number of images overlap')\nax.set_ylabel('Number of queries')\nax.set_title('Histogram of Number of Queries by Number of Images Overlap')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the histogram\ndata = np.random.normal(loc=0.1, scale=0.05, size=1000)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the histogram with specified parameters\nn, bins, patches = ax.hist(data, bins=30, range=(-0.2, 0.4), density=True, alpha=0.6, color='g')\n\n# Add labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Frequency')\nax.set_title('Histogram of Normally Distributed Data')\n\n# Add grid lines for better readability\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: SNR (Signal-to-Noise Ratio) vs. Classification Accuracy\nsnr = np.array([5, 10, 15, 20])\naccuracy_jpegldpc = np.array([20, 40, 60, 80])\naccuracy_deepjssc_wofdm = np.array([30, 50, 70, 90])\naccuracy_deepjssc_owfdm = np.array([40, 60, 80, 100])\naccuracy_ours = np.array([50, 70, 90, 100])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each line with different styles and labels\nax.plot(snr, accuracy_jpegldpc, label='JPEG+LDPC', color='b', linestyle='-', marker='o')\nax.plot(snr, accuracy_deepjssc_wofdm, label='DEEPJSCC w/o ofdm', color='orange', linestyle='--', marker='s')\nax.plot(snr, accuracy_deepjssc_owfdm, label='DEEPJSCC w/ ofdm', color='g', linestyle='-.', marker='^')\nax.plot(snr, accuracy_ours, label='OURS', color='r', linestyle=':', marker='*')\n\n# Set labels and title\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\nax.set_title('Comparison of Different Models on Classification Accuracy')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance gain over time for different categories\ntime = np.linspace(0, 8, 100)\ncontent_gain = np.sin(time) * 5 + 2\norganization_gain = np.cos(time) * 4 + 3\nlanguage_gain = np.tan(time) * 3 + 1\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and labels\nax.plot(time, content_gain, label='Content', color='blue', linestyle='-', linewidth=2)\nax.plot(time, organization_gain, label='Organization', color='orange', linestyle='--', linewidth=2)\nax.plot(time, language_gain, label='Language', color='green', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Performance Metrics Over Time')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the lines\nax.legend()\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Deposition IO Norm vs. Accuracy\ndeposition_norm = np.linspace(0, 80, 10)\naccuracy_coco_10k = np.array([0.55, 0.60, 0.65, 0.70, 0.72, 0.74, 0.75, 0.76, 0.77, 0.78])\naccuracy_laion_10k = np.array([0.55, 0.60, 0.65, 0.70, 0.72, 0.74, 0.75, 0.76, 0.77, 0.78])\naccuracy_coco_5k = np.array([0.55, 0.60, 0.65, 0.70, 0.72, 0.74, 0.75, 0.76, 0.77, 0.78])\naccuracy_laion_5k = np.array([0.55, 0.60, 0.65, 0.70, 0.72, 0.74, 0.75, 0.76, 0.77, 0.78])\naccuracy_clip = np.array([0.55, 0.60, 0.65, 0.70, 0.72, 0.74, 0.75, 0.76, 0.77, 0.78])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 6.0))\n\n# Plot each dataset with different styles\nplt.plot(deposition_norm, accuracy_coco_10k, label='coco (10k)', color='red', linestyle='-', marker='o')\nplt.plot(deposition_norm, accuracy_laion_10k, label='laion (10k)', color='green', linestyle='--', marker='s')\nplt.plot(deposition_norm, accuracy_coco_5k, label='coco (5k)', color='blue', linestyle='-.', marker='^')\nplt.plot(deposition_norm, accuracy_laion_5k, label='laion (5k)', color='orange', linestyle=':', marker='*')\nplt.plot(deposition_norm, accuracy_clip, label='CLIP', color='black', linestyle='-', marker='x')\n\n# Set labels and title\nplt.xlabel('Deposition IO Norm')\nplt.ylabel('Accuracy')\nplt.title('Effect of Vocabulary on Zero Shot Accuracy')\n\n# Add a legend\nplt.legend()\n\n# Set grid for better readability\nplt.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Sample Ratio vs. Std of ACC\nsample_ratios = [0.25, 0.5, 0.75, 1.0]\nstd_of_acc_512 = [0.03, 0.04, 0.05, 0.06]\nstd_of_acc_1024 = [0.03, 0.04, 0.05, 0.06]\nstd_of_acc_2048 = [0.03, 0.04, 0.05, 0.06]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(sample_ratios, std_of_acc_512, label='MAXN=512', color='green', marker='^', linestyle='-', linewidth=2)\nax.plot(sample_ratios, std_of_acc_1024, label='MAXN=1024', color='red', marker='s', linestyle='--', linewidth=2)\nax.plot(sample_ratios, std_of_acc_2048, label='MAXN=2048', color='blue', marker='o', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\nax.set_title('Impact of Sample Ratio on Standard Deviation of ACC')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Training iterations, FID, IS, and other metrics\niterations = np.arange(0, 201, 25)\nfid_base = [0.45, 0.43, 0.42, 0.41, 0.40, 0.39, 0.38, 0.37, 0.36, 0.35]\nfid_ours = [0.48, 0.46, 0.45, 0.44, 0.43, 0.42, 0.41, 0.40, 0.39, 0.38]\nis_base = [0.35, 0.34, 0.33, 0.32, 0.31, 0.30, 0.29, 0.28, 0.27, 0.26]\nis_ours = [0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.32, 0.31, 0.30, 0.29]\nc_fid_base = [0.25, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16]\nc_fid_ours = [0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19]\nc_is_base = [0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11]\nc_is_ours = [0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14]\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 10.0))\n\n# Plot the data with different styles and labels\nplt.plot(iterations, fid_base, label='base', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(iterations, fid_ours, label='ours', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\n\nplt.plot(iterations, is_base, label='base', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=5)\nplt.plot(iterations, is_ours, label='ours', color='orange', linestyle=':', linewidth=2, marker='D', markersize=5)\n\nplt.plot(iterations, c_fid_base, label='base', color='blue', linestyle='-', linewidth=2, marker='p', markersize=5)\nplt.plot(iterations, c_fid_ours, label='ours', color='orange', linestyle='--', linewidth=2, marker='h', markersize=5)\n\nplt.plot(iterations, c_is_base, label='base', color='blue', linestyle='-.', linewidth=2, marker='H', markersize=5)\nplt.plot(iterations, c_is_ours, label='ours', color='orange', linestyle=':', linewidth=2, marker='|', markersize=5)\n\n# Set labels and title\nplt.xlabel('Training iterations')\nplt.ylabel('Metrics')\nplt.title('Comparison of Metrics Over Training Iterations')\n\n# Add a legend to the plot\nplt.legend(loc='upper right')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: two sets of values over time\nx = np.arange(1, 29)\ny1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0])\ny2 = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05, 1.15, 1.25, 1.35, 1.45, 1.55, 1.65, 1.75, 1.85, 1.95, 1.85, 1.75, 1.65, 1.55, 1.45, 1.35, 1.25, 1.15, 1.05, 0.95])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, color='red', linestyle='-', linewidth=2, marker='o', markersize=5, label='Auto-profiled')\nax.plot(x, y2, color='blue', linestyle='--', linewidth=2, marker='s', markersize=5, label='Manually-analyzed')\n\n# Set labels and title\nax.set_xlabel('Week')\nax.set_ylabel('Normalized Value')\nax.set_title('Comparison of Two Data Sets Over Time')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average accuracy of different models over tasks\ntasks = np.arange(1, 21)\nba_ce = np.array([95, 93, 91, 89, 87, 85, 83, 81, 79, 77, 75, 73, 71, 69, 67, 65, 63, 61, 59, 57])\nlwf = np.array([88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50])\newc = np.array([85, 83, 81, 79, 77, 75, 73, 71, 69, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47])\nseq = np.array([75, 73, 71, 69, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 39, 37])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot each dataset with different styles\nplt.plot(tasks, ba_ce, marker='s', linestyle='-', color='blue', label='BaCE')\nplt.plot(tasks, lwf, marker='o', linestyle='--', color='red', label='LWF')\nplt.plot(tasks, ewc, marker='^', linestyle='-.', color='purple', label='EWC')\nplt.plot(tasks, seq, marker='D', linestyle=':', color='pink', label='SEQ')\n\n# Set labels and title\nplt.xlabel('Task')\nplt.ylabel('Average Accuracy (%)')\nplt.title('Comparison of Model Performance Over Tasks')\n\n# Add grid for better readability\nplt.grid(True)\n\n# Add legend to explain the lines\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Uncertainty threshold vs. Accuracy for different models\nuncertainty = np.linspace(0, 1, 11)\naccuracy_oesense = np.array([0.99, 0.98, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.90, 0.89])\naccuracy_kws = np.array([0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86])\naccuracy_ecg5000 = np.array([0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nplt.plot(uncertainty, accuracy_oesense, label='Oesense', color='b', marker='o', linestyle='-', linewidth=2)\nplt.plot(uncertainty, accuracy_kws, label='KWS', color='r', marker='s', linestyle='--', linewidth=2)\nplt.plot(uncertainty, accuracy_ecg5000, label='ECG5000', color='g', marker='^', linestyle='-.', linewidth=2)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Uncertainty threshold', fontsize=12, fontweight='bold')\nplt.ylabel('Accuracy', fontsize=12, fontweight='bold')\nplt.title('Model Performance vs. Uncertainty Threshold', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Customize the tick parameters for better visibility\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points\nx = np.array([0, 20, 40, 60, 80, 100, 120])\ny = np.array([1e-5, 1e-3, 1e-2, 1e-1, 1e-2, 1e-3, 1e-5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with a blue line and circle markers\nax.plot(x, y, 'bo-', linewidth=2, markersize=8)\n\n# Set labels for the axes\nax.set_xlabel('Number of Parameters', fontsize=12)\nax.set_ylabel('Log KL Divergence', fontsize=12)\n\n# Set a title for the plot\nax.set_title('Log KL Divergence vs Number of Parameters', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Customize the tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 2000, 100)\ny1 = np.sin(x / 500) * 0.8 + 0.6\ny2 = np.cos(x / 500) * 0.8 + 0.6\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='7B', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='7B (Fine-tuned)', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Iterations')\nax.set_ylabel('Attack Success Rate')\nax.set_title('GPT-4 Evaluation vs Llama Guard Evaluation')\n\n# Add a legend\nax.legend()\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set axis limits\nax.set_xlim(0, 2000)\nax.set_ylim(0, 1.0)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different models over varying fractions of training data\nx = np.logspace(-2, 0, 10)  # Logarithmically spaced data for x-axis\ny_full = 60 + 20 * np.sin(x)  # Simulated accuracy for Full model\ny_spt = 50 + 15 * np.cos(x)   # Simulated accuracy for SPT model\ny_vpt = 40 + 10 * np.tan(x)   # Simulated accuracy for VPT model\n\n# Create a new figure with a specific size\nplt.figure(figsize=(5.0, 4.0))\n\n# Plot the data with labels and styles\nplt.plot(x, y_full, label='Full', color='green', linestyle='-', marker='o')\nplt.plot(x, y_spt, label='SPT', color='red', linestyle='--', marker='s')\nplt.plot(x, y_vpt, label='VPT', color='blue', linestyle='-.', marker='^')\n\n# Set labels and title with improved formatting\nplt.xlabel('Fraction of Training Data (log scale)', fontsize=10)\nplt.ylabel('Test Accuracy (%)', fontsize=10)\nplt.title('Comparison of Model Accuracies', fontsize=12)\n\n# Add a grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', shadow=True, fontsize=8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 50) * 1.5 + 1.5\ny2 = np.cos(x / 50) * 1.5 + 1.5\ny3 = np.tan(x / 50) * 1.5 + 1.5\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Sine Wave', color='green', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Cosine Wave', color='orange', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Tangent Wave', color='blue', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Amplitude')\nax.set_title('Comparison of Trigonometric Functions')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Ratio r and Performance values for different models\nratio_r = np.linspace(0.2, 1.0, 10)\nperformance_molhiv = np.array([\n    [0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72]\n])\n\nperformance_mnist75sp = np.array([\n    [0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72]\n])\n\nperformance_spmotif05 = np.array([\n    [0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78],\n    [0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76],\n    [0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74],\n    [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72]\n])\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(16.0, 8.0))\n\n# Plot the data for each subplot\nfor ax, performance_data, title in zip(axes.flatten(), [performance_molhiv, performance_mnist75sp, performance_spmotif05], ['MOLHIV', 'MNIST-75SP', 'SPMotif-0.5']):\n    ax.plot(ratio_r, performance_data[0], label='PNA + ours', color='purple', linestyle='-', linewidth=2)\n    ax.plot(ratio_r, performance_data[1], label='GIN + ours', color='orange', linestyle='--', linewidth=2)\n    ax.plot(ratio_r, performance_data[2], label='PNA + GSAT', color='darkviolet', linestyle='-.', linewidth=2)\n    ax.plot(ratio_r, performance_data[3], label='GIN + GSAT', color='gold', linestyle=':', linewidth=2)\n\n    # Set labels and title\n    ax.set_xlabel('Ratio r')\n    ax.set_ylabel('Performance')\n    ax.set_title(title)\n    ax.legend(loc='upper right')\n\n    # Add grid lines for better readability\n    ax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Imbalance ratio of unlabeled data vs. Top-1 Accuracy\nimbalance_ratios = np.array([120, 90, 60, 30, 1])\ntop_1_accuracies_ours = np.array([85.5, 87.5, 88.5, 89.5, 90.5])\ntop_1_accuracies_acr = np.array([84.5, 86.5, 87.5, 88.5, 89.5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(imbalance_ratios, top_1_accuracies_ours, marker='o', linestyle='-', color='blue', label='Ours')\nax.plot(imbalance_ratios, top_1_accuracies_acr, marker='s', linestyle='--', color='green', label='ACR')\n\n# Set labels and title with improved formatting\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)', fontsize=12)\nax.set_ylabel('Top-1 Acc (%)', fontsize=12)\nax.set_title('Impact of Imbalance Ratio on Top-1 Accuracy', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(imbalance_ratios)\nax.set_yticks(np.arange(75, 96, 5))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Perplexity vs. Ratio of 4-bit Utilization\nperplexity = np.array([2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94])\nratio_4bit_utilization = np.array([40, 50, 60, 70, 80, 90, 100])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(5.0, 4.0))\n\n# Plot the data with different styles and labels\nplt.plot(ratio_4bit_utilization, perplexity, label='APTQ', color='blue', linestyle='-', linewidth=2)\nplt.plot(ratio_4bit_utilization, perplexity + 0.2, label='LLMa-7B (FP16): 5.22', color='purple', linestyle='--', linewidth=2)\nplt.plot(ratio_4bit_utilization, perplexity + 0.4, label='OWQ-4bit: 5.56', color='orange', linestyle='-.', linewidth=2)\nplt.plot(ratio_4bit_utilization, perplexity + 0.6, label='GPTQ-4bit: 5.62', color='green', linestyle=':', linewidth=2)\nplt.plot(ratio_4bit_utilization, perplexity + 0.8, label='LLM-QAT-4bit: 7.4', color='red', linestyle='-', linewidth=2)\n\n# Set labels and title\nplt.xlabel('Ratio of 4-bit Utilization (%)')\nplt.ylabel('Perplexity (PPL)')\nplt.title('Perplexity vs. Ratio of 4-bit Utilization')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nplt.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of training objects vs Coverage Ratio\nx = np.array([2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7])\ny = np.array([67.32, 82.98, 89.53, 90.47, 92.41, 93.7, 96.75])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(5.0, 2.0))\n\n# Plot the data with enhanced styling\nplt.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Number of Training Objects', fontsize=10)\nplt.ylabel('Coverage Ratio (%)', fontsize=10)\nplt.title('Impact of Training Object Size on Coverage Ratio', fontsize=12)\n\n# Customize tick parameters\nplt.xticks(fontsize=8)\nplt.yticks(fontsize=8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 8, 100)\ny1 = 750 - 50 * x**2\ny2 = y1 + 20 * np.random.randn(100)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the main line with error bars\nax.plot(x, y1, label='Average', color='blue', linewidth=2)\nax.fill_between(x, y1 - 20, y1 + 20, color='lightblue', alpha=0.5, label='Standard Deviation')\n\n# Scatter plot for data points\nax.scatter(x, y2, color='blue', marker='o', s=30, edgecolor='black', label='Data Points')\n\n# Set labels and title\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\nax.set_title('Convergence of N-ELBO Over Iterations')\n\n# Add grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of experts and corresponding IQM values\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8])\niqm_baseline = np.array([3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6])\niqm_softmoe = np.array([3.1, 3.3, 3.5, 3.7, 3.9, 4.1, 4.3, 4.5])\niqm_top1moe = np.array([3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, iqm_baseline, label='Baseline', color='blue', linestyle='-', linewidth=2)\nax.plot(x, iqm_softmoe, label='SoftMoE', color='green', linestyle='--', linewidth=2)\nax.plot(x, iqm_top1moe, label='Top1-MoE', color='purple', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Number of Experts')\nax.set_ylabel('IQM Human Normalized Score')\nax.set_title('Comparison of Different Models')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Vocabulary size vs. TPR (True Positive Rate)\nvocab_sizes = np.array([256, 512, 1024, 2048, 4096, 8192, 16384])\ntpr_bpe = np.array([0.4, 0.6, 0.8, 0.9, 0.95, 0.98, 0.99])\ntpr_wordpunct = np.array([0.45, 0.7, 0.85, 0.92, 0.97, 0.995, 1.0])\ntpr_whitespace = np.array([0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 1.0])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nplt.plot(vocab_sizes, tpr_bpe, label='BPE', color='b', linestyle='-', marker='o')\nplt.plot(vocab_sizes, tpr_wordpunct, label='Wordpunct', color='orange', linestyle='--', marker='s')\nplt.plot(vocab_sizes, tpr_whitespace, label='Whitespaces', color='green', linestyle='-.', marker='^')\n\n# Set labels and title\nplt.xlabel('Vocabulary Size')\nplt.ylabel('TPR (True Positive Rate)')\nplt.title('Test set TPR | FPR = 10^-4')\n\n# Add grid for better readability\nplt.grid(True)\n\n# Add legend to explain the lines\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Word error rate (WER) vs. Compression rate\ncompression_rates = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\nwer_cnn = np.array([26.0, 28.6, 30.2, 32.7, 34.4, 36.8, 38.6, 40.2, 41.9, 43.5, 45.0, 46.5, 48.0, 49.5, 51.0, 52.5, 54.0, 55.5, 57.0, 58.5, 60.0, 61.5, 63.0, 64.5, 66.0, 67.5, 69.0, 70.5, 72.0])\nwer_cif = np.array([17.9, 19.8, 21.7, 23.6, 25.5, 27.4, 29.3, 31.2, 33.1, 35.0, 36.9, 38.8, 40.7, 42.6, 44.5, 46.4, 48.3, 50.2, 52.1, 54.0, 55.9, 57.8, 59.7, 61.6, 63.5, 65.4, 67.3, 69.2, 71.1])\nwer_star = np.array([15.8, 17.7, 19.6, 21.5, 23.4, 25.3, 27.2, 29.1, 31.0, 32.9, 34.8, 36.7, 38.6, 40.5, 42.4, 44.3, 46.2, 48.1, 50.0, 51.9, 53.8, 55.7, 57.6, 59.5, 61.4, 63.3, 65.2, 67.1, 69.0])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 6.0))\n\n# Plot the data with different styles and labels\nplt.plot(compression_rates, wer_cnn, label='CNN', color='orange', linestyle='-', marker='o')\nplt.plot(compression_rates, wer_cif, label='CIF', color='purple', linestyle='--', marker='s')\nplt.plot(compression_rates, wer_star, label='STAR', color='black', linestyle='-.', marker='^')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set axis labels with descriptive text\nplt.xlabel('Compression Rate (%)', fontsize=12)\nplt.ylabel('Word Error Rate (%)', fontsize=12)\n\n# Set title with a descriptive text\nplt.title('Word Error Rate vs. Compression Rate', fontsize=14, fontweight='bold')\n\n# Add a legend to the plot\nplt.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of exemplars in class 'Run' vs. Average accuracy\nx = np.array([25, 50, 75, 100, 125, 150, 175, 200])\ny1 = np.array([0.85, 0.88, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97])\ny2 = np.array([0.75, 0.78, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87])\ny3 = np.array([0.70, 0.73, 0.77, 0.78, 0.79, 0.80, 0.81, 0.82])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with different styles and markers\nplt.plot(x, y1, marker='o', linestyle='-', color='red', label='PILOTE')\nplt.plot(x, y2, marker='s', linestyle='--', color='blue', label='Re-trained model')\nplt.plot(x, y3, marker='^', linestyle='-.', color='green', label='Pre-trained model accuracy')\n\n# Set labels and title\nplt.xlabel('Number of exemplars in class ''Run''')\nplt.ylabel('Avg. accuracy of five rounds')\nplt.title('Comparison of Model Accuracy with Different Numbers of Exemplars')\n\n# Add a legend\nplt.legend()\n\n# Add grid for better readability\nplt.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 20, 100)\ny1 = np.sin(x) + 0.5 * np.random.normal(size=100)\ny2 = np.cos(x) + 0.5 * np.random.normal(size=100)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='xLLM', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Single-Pass LLM', color='red', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels and title\nax.set_xlabel('# of Steps')\nax.set_ylabel('Avg Fidelity')\nax.set_title('Fidelity Comparison')\n\n# Add a legend\nax.legend(loc='upper left')\n\n# Set grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of hits for different software versions\nversions = ['All', 'MLP', 'GCN', 'NCN', 'Neognn-Buddy', 'SEAL', 'Node2Vec']\nhits_ogbl_collab = [85, 75, 70, 65, 60, 55, 50]\nhits_ogbl_ppa = [75, 65, 60, 55, 50, 45, 40]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with enhanced styling\nax.plot(versions, hits_ogbl_collab, marker='o', linestyle='-', color='b', label='ogbl-collab')\nax.plot(versions, hits_ogbl_ppa, marker='s', linestyle='--', color='r', label='ogbl-ppa')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Software Version', fontsize=12)\nax.set_ylabel('Hits @50', fontsize=12)\nax.set_title('Comparison of Software Versions', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set y-axis limits\nax.set_ylim(40, 90)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: two different datasets with varying trends\nx = np.linspace(2, 12, 11)\ny1 = np.sin(x) + 0.5  # Simulating a dataset with a sine wave\ny2 = np.cos(x) + 0.5  # Simulating another dataset with a cosine wave\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nplt.plot(x, y1, label='outside-code-diff', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(x, y2, label='inside-code-diff', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nplt.xlabel('Layer')\nplt.ylabel('Value')\nplt.title('Android')\n\n# Add a legend\nplt.legend()\n\n# Enhance the grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Digit length vs. Accuracy for different sampling methods\ndigit_lengths = [6, 7, 8, 9]\naccuracies_direct_100 = [0.95, 0.92, 0.88, 0.85]\naccuracies_rfft_100 = [0.93, 0.90, 0.86, 0.83]\naccuracies_scratchpad_100 = [0.91, 0.88, 0.84, 0.81]\naccuracies_scratchpad_5000 = [0.89, 0.86, 0.82, 0.79]\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nplt.plot(digit_lengths, accuracies_direct_100, label='Direct (100 samples)', color='b', linestyle='-', marker='o')\nplt.plot(digit_lengths, accuracies_rfft_100, label='RFFT (100 samples)', color='g', linestyle='--', marker='s')\nplt.plot(digit_lengths, accuracies_scratchpad_100, label='Scratchpad (100 samples)', color='y', linestyle='-.', marker='^')\nplt.plot(digit_lengths, accuracies_scratchpad_5000, label='Scratchpad (5000 samples)', color='r', linestyle=':', marker='D')\n\n# Set labels and title\nplt.xlabel('Digit Length')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Different Sampling Methods on Digit Recognition')\n\n# Add a legend to the plot\nplt.legend(loc='upper left')\n\n# Add grid lines for better readability\nplt.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 80, 100)\ny1 = 0.25 * x + 225\ny2 = 0.3 * x + 225\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, color='orange', linestyle='-', linewidth=2, label='iaion')\nax.plot(x, y2, color='black', linestyle='--', linewidth=2, label='CLIP')\n\n# Set labels and title\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Set limits for axes\nax.set_xlim(0, 80)\nax.set_ylim(200, 375)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of users over time for different development sets\nx = np.array([20, 40, 60, 80, 100])\ny1 = np.array([0.55, 0.6, 0.65, 0.7, 0.75])\ny2 = np.array([0.5, 0.55, 0.6, 0.65, 0.7])\ny3 = np.array([0.45, 0.5, 0.55, 0.6, 0.65])\ny4 = np.array([0.4, 0.45, 0.5, 0.55, 0.6])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with different styles and markers\nplt.plot(x, y1, label='CNN', color='orange', marker='o', linestyle='-', linewidth=2)\nplt.plot(x, y2, label='CNN+HMM', color='red', marker='^', linestyle='--', linewidth=2)\nplt.plot(x, y3, label='RF', color='blue', marker='s', linestyle='-.', linewidth=2)\nplt.plot(x, y4, label='RF+HMM', color='purple', marker='D', linestyle=':', linewidth=2)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('No. of Users in Development Set', fontsize=12)\nplt.ylabel('F1', fontsize=12)\nplt.title('Performance Metrics Over Time', fontsize=14)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: WER and AMI for different numbers of microphones\nmicrophones = [2, 3, 4, 5, 6, 7, 8]\nwer_1hm = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\nwer_sd = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\nami_1hm = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\nami_sd = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with enhanced styling\nax.plot(microphones, wer_1hm, marker='o', linestyle='-', color='b', label='IHM (test)')\nax.plot(microphones, wer_sd, marker='^', linestyle='--', color='r', label='SD (test)')\nax.plot(microphones, ami_1hm, marker='o', linestyle='-', color='b', label='IHM (dev)', linestyle=':')\nax.plot(microphones, ami_sd, marker='^', linestyle='--', color='r', label='SD (dev)', linestyle='-.')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('WER and AMI Comparison for Different Numbers of Microphones')\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(2, 25)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Quantization error vs. some parameter\nx = np.logspace(-7, -4, 100)\ny1 = np.exp(x) + np.random.normal(0, 0.5, 100)\ny2 = np.exp(x) + np.random.normal(0, 0.3, 100)\ny3 = np.exp(x) + np.random.normal(0, 0.2, 100)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='M-LVQ-4x8-10', color='darkorange', linestyle='--', linewidth=2)\nax.plot(x, y2, label='M-LVQ-4x8-100', color='teal', linestyle='-.', linewidth=2)\nax.plot(x, y3, label='M-LVQ-4x8-256', color='purple', linestyle=':', linewidth=2)\n\n# Add a title and labels\nax.set_title('Quantization Error vs. Parameter', fontsize=14, fontweight='bold')\nax.set_xlabel('Parameter', fontsize=12)\nax.set_ylabel('Quantization Error', fontsize=12)\n\n# Set the x-axis to log scale\nax.set_xscale('log')\n\n# Add grid lines for better readability\nax.grid(True, which=\"both\", ls=\"--\", alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance vs Ratio for two different models\nratio = np.linspace(0.1, 1.0, 10)\nperformance_pna_ours = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98, 0.99, 0.995, 1.0])\nperformance_gin_ours = np.array([0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.92, 0.93, 0.94])\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Plot the data with enhanced styles\nax.plot(ratio, performance_pna_ours, label='PNA + ours', color='purple', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(ratio, performance_gin_ours, label='GIN + ours', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Ratio r', fontsize=12)\nax.set_ylabel('Performance', fontsize=12)\nax.set_title('SPMotif-0.5', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(0.1, 1.1, 0.1))\nax.set_xticklabels([f'{i:.1f}' for i in np.arange(0.1, 1.1, 0.1)], fontsize=10)\n\n# Customize the y-axis ticks\nax.set_yticks(np.arange(0.4, 1.1, 0.1))\nax.set_yticklabels([f'{i:.1f}' for i in np.arange(0.4, 1.1, 0.1)], fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Ensemble size vs. Accuracy\nensemble_sizes = np.array([6, 9, 12, 15, 18, 21, 24, 27, 30])\naccuracies = np.array([74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 5.0))\n\n# Plot the data with enhanced styling\nplt.plot(ensemble_sizes, accuracies, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Ensemble Size', fontsize=12, fontweight='bold')\nplt.ylabel('Accuracy', fontsize=12, fontweight='bold')\nplt.title('Impact of Ensemble Size on Model Accuracy', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks\nplt.xticks(ensemble_sizes, fontsize=10)\n\n# Customize the y-axis ticks\nplt.yticks(np.arange(74, 79, 0.5), fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: epochs vs. some metric (e.g., accuracy)\nepochs = np.arange(1, 101)\nmetric_values = {\n    'GPT-Neo': np.random.rand(100) * 0.8 + 0.2,\n    '5': np.random.rand(100) * 0.8 + 0.2,\n    '7': np.random.rand(100) * 0.8 + 0.2,\n    '10': np.random.rand(100) * 0.8 + 0.2,\n    '30': np.random.rand(100) * 0.8 + 0.2\n}\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 3.0))\n\n# Plot each dataset with different styles\nfor label, values in metric_values.items():\n    plt.plot(epochs, values, label=label, marker='o', linestyle='-', linewidth=2)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nplt.xlabel('Number of Epochs')\nplt.ylabel('Metric Value')\nplt.title('Comparison of Metric Values Over Epochs')\n\n# Add a legend\nplt.legend(loc='upper left', fontsize='small')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Traffic data with different pred lengths\nx = np.array([96, 192, 336, 720])\ny1 = np.array([0.14, 0.16, 0.18, 0.20])\ny2 = np.array([0.12, 0.14, 0.16, 0.18])\ny3 = np.array([0.10, 0.12, 0.14, 0.16])\ny4 = np.array([0.08, 0.10, 0.12, 0.14])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(15.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='pred_length=96', color='blue', linestyle='-', marker='o', markersize=8)\nax.plot(x, y2, label='pred_length=192', color='orange', linestyle='--', marker='s', markersize=8)\nax.plot(x, y3, label='pred_length=336', color='green', linestyle='-.', marker='^', markersize=8)\nax.plot(x, y4, label='pred_length=720', color='red', linestyle=':', marker='D', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Time (years)', fontsize=12)\nax.set_ylabel('Traffic (units)', fontsize=12)\nax.set_title('Traffic Data with Different Prediction Lengths', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([224, 128, 64, 32])\ny1 = np.array([75, 60, 45, 30])\ny2 = np.array([80, 70, 60, 50])\ny3 = np.array([85, 75, 65, 55])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='ImageNet-1k', color='orange', linestyle='-', marker='o')\nax.plot(x, y2, label='ImageNet-C/P (Fog)', color='darkorange', linestyle='--', marker='s')\nax.plot(x, y3, label='ImageNet-C/P (Fog)', color='navy', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Number of Parameters (n, m=1)')\nax.set_ylabel('Top-1 Acc. (%)')\nax.set_title('Serial (n=8, m=1) vs Parallel (n=2, m=4)')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the data\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: SNR vs. Classification Accuracy\nsnr = np.array([5.0, 7.0, 10.0, 12.5, 15.0, 20.0, 22.5, 25.0])\naccuracy_jpegldpc = np.array([95, 85, 75, 65, 55, 45, 35, 25])\naccuracy_deepjsscwoofdm = np.array([85, 75, 65, 55, 45, 35, 25, 15])\naccuracy_deepjsscowofdm = np.array([75, 65, 55, 45, 35, 25, 15, 5])\naccuracy_ours = np.array([65, 55, 45, 35, 25, 15, 5, 5])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nplt.plot(snr, accuracy_jpegldpc, label='JPEG+LDPC', color='b', linestyle='-', marker='o')\nplt.plot(snr, accuracy_deepjsscwoofdm, label='DEEPJSCC w/o OFDM', color='orange', linestyle='--', marker='s')\nplt.plot(snr, accuracy_deepjsscowofdm, label='DEEPJSCC w/ OFDM', color='green', linestyle='-.', marker='^')\nplt.plot(snr, accuracy_ours, label='OURS', color='red', linestyle=':', marker='x')\n\n# Add grid for better readability\nplt.grid(True)\n\n# Set labels and title\nplt.xlabel('SNR (dB)')\nplt.ylabel('Classification Accuracy (%)')\nplt.title('Comparison of Different Methods on Classification Accuracy')\n\n# Add a legend\nplt.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 50) + 1\ny2 = x**2 / 10000 + 1\ny3 = np.random.normal(3, 0.5, 100)\ny4 = np.exp(x / 100)\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Line 1 (Sinusoidal)', color='purple', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Line 2 (Quadratic)', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='Line 3 (Random Noise)', color='green', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(x, y4, label='Line 4 (Exponential Focus)', color='red', linestyle=':', linewidth=2, marker='D', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Performance Value')\nax.set_title('Comparison of Different Line Styles')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left', fontsize='small')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Gradient steps and their corresponding values\ngradient_steps = np.array([0, 50, 100, 150, 200])\nline1_values = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\nline2_values = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\nline3_values = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different styles\nax.plot(gradient_steps, line1_values, 'o-', color='orange', label='Line 1')\nax.plot(gradient_steps, line2_values, 's-', color='blue', label='Line 2')\nax.plot(gradient_steps, line3_values, '^--', color='green', label='Line 3')\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\nax.set_title('Gradient Steps vs Polynomial Value')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([60, 65, 70, 75, 80, 85, 90, 95, 100, 105])\ny2 = np.array([55, 60, 65, 70, 75, 80, 85, 90, 95, 100])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='ogbl-collab 2022', color='blue', linestyle='-', marker='o')\nax.plot(x, y2, label='ogbl-collab 2023', color='green', linestyle='--', marker='s')\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Performance (Score)')\nax.set_title('Performance Comparison of ogbl-collab Models')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: N values and corresponding precision values for different models\nN = np.array([10, 20, 30, 40, 50, 60])\nprecision_standard = np.array([1e-10, 1e-8, 1e-6, 1e-4, 1e-2, 1e-1])\nprecision_constrained = np.array([1e-12, 1e-10, 1e-8, 1e-6, 1e-4, 1e-2])\nprecision_experimental = np.array([1e-11, 1e-9, 1e-7, 1e-5, 1e-3, 1e-1])\nprecision_hypothetical = np.array([1e-13, 1e-11, 1e-9, 1e-7, 1e-5, 1e-3])\n\n# Create a new figure with a specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot each dataset with different styles\nax.plot(N, precision_standard, label='Standard', color='b', marker='o')\nax.plot(N, precision_constrained, label='Constrained', color='r', marker='s')\nax.plot(N, precision_experimental, label='Experimental', color='g', marker='^')\nax.plot(N, precision_hypothetical, label='Hypothetical', color='m', marker='p')\n\n# Set labels and title\nax.set_xlabel('N')\nax.set_ylabel('Precision')\nax.set_title('Comparison of Precision Across Different Models')\n\n# Add grid lines for better readability\nax.grid(True)\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(1, 4, 10)\ny1 = np.power(x, 2)\ny2 = np.power(x, 3)\ny3 = np.power(x, 4)\ny4 = np.power(x, 5)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='y = x^2', color='tab:blue', linestyle='-', marker='o')\nax.plot(x, y2, label='y = x^3', color='tab:orange', linestyle='--', marker='s')\nax.plot(x, y3, label='y = x^4', color='tab:green', linestyle='-.', marker='^')\nax.plot(x, y4, label='y = x^5', color='tab:red', linestyle=':', marker='*')\n\n# Set labels and title\nax.set_xlabel('X Axis Label', fontsize=12)\nax.set_ylabel('Y Axis Label', fontsize=12)\nax.set_title('Sample Graph with Multiple Lines', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x) * 0.5 + 0.5\ny2 = np.cos(x) * 0.5 + 0.5\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the first dataset with a blue color and a dashed line style\nax.plot(x, y1, color='b', linestyle='--', linewidth=2, label='Standard Activity')\n\n# Plot the second dataset with a red color and a solid line style\nax.plot(x, y2, color='r', linestyle='-', linewidth=2, label='Innovative Activity')\n\n# Set labels with more descriptive text\nax.set_xlabel('Time (Hours)', fontsize=12)\nax.set_ylabel('Activity Level', fontsize=12)\n\n# Add a title with a larger font size\nax.set_title('Daytime Activity Monitoring', fontsize=14, fontweight='bold')\n\n# Add a legend with a larger font size\nax.legend(fontsize=10)\n\n# Set grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nax.set_xlim(0, 25)\nax.set_ylim(-1.5, 1.5)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 26, 5))\nax.set_yticks(np.arange(-1.5, 1.6, 0.5))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 12, 100)\ny1 = np.sin(x) + 0.5 * np.cos(2 * x)\ny2 = np.sin(x) - 0.5 * np.cos(2 * x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Standard Performance', color='blue', linewidth=2, linestyle='-', marker='o')\nax.plot(x, y2, label='Innovative Performance', color='red', linewidth=2, linestyle='--', marker='s')\n\n# Set labels and title\nax.set_xlabel('Time (Months)', fontsize=12)\nax.set_ylabel('Performance Index', fontsize=12)\nax.set_title('Comparative Performance Analysis Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Customize the tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Monthly sales and average temperature over a year\nmonths = np.arange(1, 13)\nmonthly_sales = np.array([1200, 1150, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200])\naverage_temperature = np.array([10, 12, 14, 16, 18, 20, 22, 24, 22, 20, 18, 16])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(months, monthly_sales, label='Monthly Sales', color='navy', linestyle='-', linewidth=2, marker='o', markersize=8, markerfacecolor='skyblue')\nplt.plot(months, average_temperature, label='Average Temperature', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=8, markerfacecolor='salmon')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set axis labels with more descriptive text\nplt.xlabel('Month', fontsize=12)\nplt.ylabel('Sales and Temperature', fontsize=12)\n\n# Set title with a more detailed description\nplt.title('Sales and Temperature Correlation Over a Year', fontsize=14, fontweight='bold')\n\n# Add a legend with a more informative title\nplt.legend(title='Data Series', loc='upper left', fontsize=10)\n\n# Customize the tick marks for better clarity\nplt.xticks(months, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], rotation=45)\nplt.yticks(np.arange(800, 2300, 200))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\ntime = np.arange(10)\ngrowth_values = [1.2, 0.8, 0.5, 0.3, 0.2, 0.15, 0.1, 0.08, 0.06, 0.04]\ndecay_values = [1.2, 0.8, 0.6, 0.4, 0.3, 0.25, 0.2, 0.15, 0.1, 0.08]\noscillation_values = [1.0, 0.8, 0.6, 0.4, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data with different styles and markers\nax.plot(time, growth_values, label='Growth', color='green', linestyle='-', marker='o')\nax.plot(time, decay_values, label='Decay', color='red', linestyle='--', marker='x')\nax.plot(time, oscillation_values, label='Oscillation', color='blue', linestyle='-.', marker='s')\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_title('Exponential Growth Over Time')\n\n# Add a legend to the plot\nax.legend()\n\n# Set grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different models over different digit lengths\ndigit_lengths = np.arange(1, 11)\naccuracy_5shot_direct = [0.95, 0.88, 0.82, 0.78, 0.75, 0.73, 0.71, 0.69, 0.67, 0.65]\naccuracy_5shot_scratchpad = [0.93, 0.85, 0.79, 0.75, 0.72, 0.70, 0.68, 0.66, 0.64, 0.62]\naccuracy_5shot_rule_following = [0.92, 0.84, 0.78, 0.74, 0.71, 0.69, 0.67, 0.65, 0.63, 0.61]\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with different styles and labels\nplt.plot(digit_lengths, accuracy_5shot_direct, label='5-shot direct', color='blue', linestyle='-', marker='o')\nplt.plot(digit_lengths, accuracy_5shot_scratchpad, label='5-shot scratchpad', color='orange', linestyle='--', marker='s')\nplt.plot(digit_lengths, accuracy_5shot_rule_following, label='5-shot rule-following', color='green', linestyle='-.', marker='^')\n\n# Add title and labels\nplt.title('Model Accuracy vs. Digit Length')\nplt.xlabel('Digit Length')\nplt.ylabel('Accuracy')\n\n# Add grid for better readability\nplt.grid(True)\n\n# Add legend to explain the lines\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 20, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.cos(x) + np.random.normal(0, 0.1, 100)\ny3 = np.tan(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(5.0, 10.0), sharex=True)\n\n# Plot the first graph: Smoothed Data\naxes[0].plot(x, y1, color='purple', label='Smoothed Data')\naxes[0].set_title('Smoothed Representation')\naxes[0].set_ylabel('Value')\naxes[0].legend()\n\n# Plot the second graph: First Difference of Data\naxes[1].plot(x, np.diff(y1), color='orange', linestyle='--', label='Difference Data')\naxes[1].set_title('First Difference of Data')\naxes[1].set_ylabel('Delta Value')\naxes[1].legend()\n\n# Plot the third graph: Cumulative Sum Over Time\naxes[2].plot(x, np.cumsum(y1), color='green', linestyle='-.', label='Cumulative Sum')\naxes[2].set_title('Cumulative Sum Over Time')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Cumulative Value')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.exp(-x / 5)\ny4 = np.log(x + 1)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=4, ncols=1, figsize=(6.0, 12.0), sharex=True)\n\n# Plot the first subplot: Sin Wave\naxes[0].plot(x, y1, color='purple', label='Sin Wave')\naxes[0].set_title('Sin Wave')\naxes[0].set_ylabel('Amplitude')\naxes[0].legend()\n\n# Plot the second subplot: Cos Wave\naxes[1].plot(x, y2, color='green', label='Cos Wave')\naxes[1].set_title('Cosine Pattern')\naxes[1].set_ylabel('Amplitude')\naxes[1].legend()\n\n# Plot the third subplot: Exp Decay\naxes[2].plot(x, y3, color='blue', label='Exp Decay')\naxes[2].set_title('Exponential Decay')\naxes[2].set_ylabel('Value')\naxes[2].legend()\n\n# Plot the fourth subplot: Log Growth\naxes[3].plot(x, y4, color='red', label='Log Growth')\naxes[3].set_title('Logarithmic Growth')\naxes[3].set_xlabel('Time')\naxes[3].set_ylabel('Value')\naxes[3].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we have some data for a hypothetical scenario\nx = np.linspace(0, 1, 10)\ny1 = np.sin(x * np.pi / 2) * 85 + 75\ny2 = np.cos(x * np.pi / 2) * 85 + 75\ny3 = np.tan(x * np.pi / 2) * 85 + 75\ny4 = np.exp(-x) * 85 + 75\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9.0, 6.0), sharex=True, sharey=True)\n\n# Plot the data on each subplot\naxes[0, 0].plot(x, y1, 'b-', label='Positive bound', linewidth=2)\naxes[0, 0].set_title('a')\naxes[0, 0].set_xlabel('Time (s)')\naxes[0, 0].set_ylabel('Value')\naxes[0, 0].grid(True)\naxes[0, 0].legend()\n\naxes[0, 1].plot(x, y2, 'r-', label='Negative bound', linewidth=2)\naxes[0, 1].set_title('b')\naxes[0, 1].set_xlabel('Time (s)')\naxes[0, 1].set_ylabel('Value')\naxes[0, 1].grid(True)\naxes[0, 1].legend()\n\naxes[1, 0].plot(x, y3, 'g-', label='Contrastive loss weight', linewidth=2)\naxes[1, 0].set_title('d')\naxes[1, 0].set_xlabel('Time (s)')\naxes[1, 0].set_ylabel('Value')\naxes[1, 0].grid(True)\naxes[1, 0].legend()\n\naxes[1, 1].plot(x, y4, 'm-', label='Fuzzy coefficient', linewidth=2)\naxes[1, 1].set_title('c')\naxes[1, 1].set_xlabel('Time (s)')\naxes[1, 1].set_ylabel('Value')\naxes[1, 1].grid(True)\naxes[1, 1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.1, 1.0, 10)\ny1 = np.sin(x * np.pi / 2) * 85 + 75\ny2 = np.cos(x * np.pi / 2) * 85 + 75\ny3 = np.tan(x * np.pi / 2) * 85 + 75\ny4 = np.exp(-x) * 85 + 75\ny5 = np.log(x + 1) * 85 + 75\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='Positive Bound', color='red', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Negative Bound', color='green', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='Contrastive Loss Weight', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(x, y4, label='Fuzzy Coefficient', color='purple', linestyle=':', linewidth=2, marker='D', markersize=5)\nax.plot(x, y5, label='Additional Metric 2', color='orange', linestyle='-', linewidth=2, marker='P', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Time (s)', fontsize=12)\nax.set_ylabel('Value', fontsize=12)\nax.set_title('Comparison of Different Metrics', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize ticks\nax.set_xticks(np.arange(0.1, 1.1, 0.1))\nax.set_yticks(np.arange(70, 90, 5))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Driving Style vs Relaxation Level\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nrelaxation_levels = [\n    [1.2, 1.1, 1.0, 0.9],  # Dry\n    [1.3, 1.2, 1.1, 1.0]   # Rain\n]\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 3, figsize=(12.0, 4.0))\n\n# Plot each dataset on a separate subplot\nfor i, ax in enumerate(axes):\n    ax.plot(driving_styles, relaxation_levels[i], marker='o', linestyle='-', color='b')\n    ax.set_title(f'Driving vs {[\"Dry\", \"Rain\"][i]}')\n    ax.set_xlabel('Driving Style')\n    ax.set_ylabel('Relaxation Level')\n    ax.set_ylim(0, 1.5)\n    ax.grid(True)\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance gain over different n_aug levels for three categories\nn_aug = np.array([0.125, 0.25, 0.5, 1, 2, 4, 8])\ncontent_gain = np.array([7.5, 6.5, 5.5, 8, 7, 6, 5])\norganization_gain = np.array([6, 5, 4, 6, 5, 4, 3])\nlanguage_gain = np.array([5, 4, 3, 5, 4, 3, 2])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data with different styles and markers\nax.plot(n_aug, content_gain, label='Content', color='b', linestyle='-', marker='o', markersize=5)\nax.plot(n_aug, organization_gain, label='Organization', color='r', linestyle='--', marker='s', markersize=5)\nax.plot(n_aug, language_gain, label='Language', color='g', linestyle='-.', marker='^', markersize=5)\n\n# Set labels and title\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the data\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 80, 100)\ny1 = 0.6 + 0.1 * np.sin(x / 10)\ny2 = 0.55 + 0.05 * np.cos(x / 10)\ny3 = 0.62 + 0.07 * np.tan(x / 20)\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plotting the first subplot\naxes[0].plot(x, y1, color='red', label='COCO (10k)')\naxes[0].set_title('COCO 10K')\naxes[0].set_xlabel('Decomposition IO Norm')\naxes[0].set_ylabel('Accuracy')\naxes[0].set_ylim(0.55, 0.75)\naxes[0].legend()\n\n# Plotting the second subplot\naxes[1].plot(x, y2, color='blue', label='LAION (10k)')\naxes[1].set_title('LAION 10K')\naxes[1].set_xlabel('Decomposition IO Norm')\naxes[1].set_ylabel('Accuracy')\naxes[1].set_ylim(0.55, 0.75)\naxes[1].legend()\n\n# Plotting the third subplot\naxes[2].plot(x, y3, color='green', label='COCO (5k)')\naxes[2].plot(x, y2, color='orange', label='LAION (5k)')\naxes[2].set_title('COCO & LAION 5K')\naxes[2].set_xlabel('Decomposition IO Norm')\naxes[2].set_ylabel('Accuracy')\naxes[2].set_ylim(0.55, 0.75)\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Error rate vs. Learning rate\nerror_rate_lr = np.array([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3])\nlearning_rate_lr = np.array([0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0.01, 0.005, 0.0025, 0.00125])\n\n# Sample data: Accuracy vs. Dropout\naccuracy_dropout = np.array([0.86, 0.88, 0.9, 0.92, 0.94, 0.96, 0.98, 0.99, 0.995, 0.997, 0.999, 0.9995])\ndropout = np.array([0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 9.0))\n\n# Plot 1: Error Rate vs. Learning Rate\naxes[0, 0].plot(error_rate_lr, learning_rate_lr, label='Error Rate vs. Learning Rate', color='purple')\naxes[0, 0].set_title('Error Rate vs. Learning Rate')\naxes[0, 0].set_xlabel('Error Rate')\naxes[0, 0].set_ylabel('Learning Rate')\naxes[0, 0].legend()\naxes[0, 0].grid(True)\n\n# Plot 2: Accuracy vs. Dropout\naxes[0, 1].plot(dropout, accuracy_dropout, label='Accuracy vs. Dropout', color='orange')\naxes[0, 1].set_title('Accuracy vs. Dropout')\naxes[0, 1].set_xlabel('Dropout')\naxes[0, 1].set_ylabel('Accuracy')\naxes[0, 1].legend()\naxes[0, 1].grid(True)\n\n# Plot 3: Error Rate vs. Learning Rate (Alternative)\naxes[1, 0].plot(error_rate_lr, learning_rate_lr, label='Error Rate vs. Learning Rate', color='blue')\naxes[1, 0].set_title('Error Rate vs. Learning Rate (Alternative)')\naxes[1, 0].set_xlabel('Error Rate')\naxes[1, 0].set_ylabel('Learning Rate')\naxes[1, 0].legend()\naxes[1, 0].grid(True)\n\n# Plot 4: Accuracy vs. Dropout (Alternative)\naxes[1, 1].plot(dropout, accuracy_dropout, label='Accuracy vs. Dropout', color='red')\naxes[1, 1].set_title('Accuracy vs. Dropout (Alternative)')\naxes[1, 1].set_xlabel('Dropout')\naxes[1, 1].set_ylabel('Accuracy')\naxes[1, 1].legend()\naxes[1, 1].grid(True)\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Training iterations vs Metric values for two models\niterations = np.arange(0, 201, 25)\nbase_model_values = [0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3]\nour_model_values = [0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4]\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 4.0))\n\n# Plot the data with enhanced styling\nplt.plot(iterations, base_model_values, label='Base Model', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(iterations, our_model_values, label='Our Model', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Training Iterations', fontsize=12, fontweight='bold')\nplt.ylabel('Metric Value', fontsize=12, fontweight='bold')\nplt.title('Metric Comparison Between Base Model and Our Model', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Customize the tick parameters for better visibility\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 200, 100)\ny1 = 0.6 - 0.01 * x\ny2 = 0.7 - 0.01 * x\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Base Model', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Our Model', color='green', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\nax.set_title('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Set grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for better visualization\nax.set_xlim(0, 200)\nax.set_ylim(0, 0.8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: N vs. f(N)\nN = np.array([10**1, 2*10**1, 3*10**1, 4*10**1, 6*10**1])\nf_N_standard = np.array([10**-1, 10**-4, 10**-7, 10**-10, 10**-13])\nf_N_constrained = np.array([10**-1, 10**-4, 10**-7, 10**-10, 10**-13])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(9.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(N, f_N_standard, label='Standard', color='b', linestyle='-', linewidth=2, marker='o', markersize=8)\nplt.plot(N, f_N_constrained, label='Constrained', color='r', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Set labels and title with improved formatting\nplt.xlabel('N', fontsize=12, fontweight='bold')\nplt.ylabel('f(N)', fontsize=12, fontweight='bold')\nplt.title('Comparison of Standard and Constrained Approaches', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Set axis limits to ensure all data points are visible\nplt.xlim(10**1, 6*10**1)\nplt.ylim(10**-14, 10**-10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance and Efficiency over Weeks\nweeks = np.arange(0, 30, 1)\nperformance = np.sin(weeks / 5) * 0.5 + 0.5\nefficiency = np.cos(weeks / 5) * 0.5 + 0.5\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(weeks, performance, label='Performance', color='navy', linestyle='-', linewidth=2, marker='o', markersize=5, markerfacecolor='white')\nax.plot(weeks, efficiency, label='Efficiency', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=5, markerfacecolor='white')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Weeks', fontsize=12, fontweight='bold')\nax.set_ylabel('Performance and Efficiency', fontsize=12, fontweight='bold')\nax.set_title('Performance and Efficiency Over Weeks', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 31, 5))\nax.set_yticks(np.arange(-1.5, 1.6, 0.5))\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define data for plotting\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x) * np.exp(-x / 10)\ny2 = np.cos(x) * np.exp(-x / 10)\n\n# Plot the data with different styles\nax.plot(x, y1, label='Performance', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markerfacecolor='white')\nax.plot(x, y2, label='Efficiency', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=5, markerfacecolor='white')\n\n# Set labels and title\nax.set_xlabel('Weeks')\nax.set_ylabel('Values')\nax.set_title('Performance and Efficiency Analysis')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the plot\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance and Efficiency over Weeks\nweeks = np.arange(0, 31, 5)\nperformance = np.array([0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.0, 0.8, 0.6, 0.4, 0.2])\nefficiency = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nplt.plot(weeks, performance, label='Performance', color='blue', linestyle='-', marker='o', markersize=5, linewidth=2)\nplt.plot(weeks, efficiency, label='Efficiency', color='red', linestyle='--', marker='s', markersize=5, linewidth=2)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title\nplt.xlabel('Weeks')\nplt.ylabel('Performance and Efficiency')\nplt.title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Add a legend\nplt.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: A simple quadratic function with added noise for demonstration\nx = np.linspace(0, 25, 100)\ny1 = x**2 / 100 + np.random.normal(0, 0.1, 100)\ny2 = (x - 10)**2 / 100 + np.random.normal(0, 0.1, 100)\ny3 = (x - 15)**2 / 100 + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Data Series 1', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Data Series 2 with Gradient', color='green', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.plot(x, y3, label='Data Series 3', color='magenta', linestyle='-.', linewidth=2, marker='^', markersize=4)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Weeks', fontsize=12, fontweight='bold')\nax.set_ylabel('Normalized Value', fontsize=12, fontweight='bold')\nax.set_title('Dynamic Data Presentation Across Weeks', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=10, frameon=True, shadow=True)\n\n# Set axis limits if needed\nax.set_xlim(0, 25)\nax.set_ylim(0, 10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average accuracy over different tasks for multiple models\ntasks = np.arange(1, 11)\nba_ce = [95, 88, 75, 65, 55, 45, 35, 25, 15, 5]\nlwf = [90, 85, 70, 60, 50, 40, 30, 20, 10, 0]\newc = [85, 80, 75, 65, 55, 45, 35, 25, 15, 5]\nseq = [80, 75, 70, 60, 50, 40, 30, 20, 10, 0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot each model's data with different styles\nax.plot(tasks, ba_ce, marker='s', linestyle='-', color='blue', label='BaCE')\nax.plot(tasks, lwf, marker='^', linestyle='--', color='cyan', label='LWF')\nax.plot(tasks, ewc, marker='o', linestyle='-.', color='green', label='EWC')\nax.plot(tasks, seq, marker='D', linestyle=':', color='magenta', label='SEQ')\n\n# Set labels and title\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Comparison of Models on Different Tasks')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize='medium')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.arange(1, 11)\ny1 = np.array([95, 85, 75, 65, 55, 45, 35, 25, 15, 5])\ny2 = np.array([80, 70, 60, 50, 40, 30, 20, 10, 0, -10])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='BaCE', color='blue', marker='o', linestyle='-', linewidth=2, markersize=5)\nax.plot(x, y2, label='EWC', color='cyan', marker='s', linestyle='--', linewidth=2, markersize=5)\n\n# Set labels and title\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Performance Comparison: BaCE vs EWC')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the data\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics over iterations for different models\niterations = np.arange(0, 2001, 50)\nmodel1_series1 = np.random.rand(len(iterations)) * 1.2\nmodel1_series2 = np.random.rand(len(iterations)) * 1.2\nmodel2_series1 = np.random.rand(len(iterations)) * 1.2\nmodel2_series2 = np.random.rand(len(iterations)) * 1.2\nmodel3_series1 = np.random.rand(len(iterations)) * 1.2\nmodel3_series2 = np.random.rand(len(iterations)) * 1.2\nmodel4_series1 = np.random.rand(len(iterations)) * 1.2\nmodel4_series2 = np.random.rand(len(iterations)) * 1.2\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9.0, 7.0), sharex=True, sharey=True)\n\n# Plot the data on each subplot\naxes[0, 0].plot(iterations, model1_series1, label='model1 Series 1', color='blue')\naxes[0, 0].plot(iterations, model1_series2, label='model1 Series 2', color='magenta')\naxes[0, 0].set_title('model1 Performance')\naxes[0, 0].set_xlabel('Iterations')\naxes[0, 0].set_ylabel('Success Rate')\naxes[0, 0].legend()\n\naxes[0, 1].plot(iterations, model2_series1, label='model2 Series 1', color='blue')\naxes[0, 1].plot(iterations, model2_series2, label='model2 Series 2', color='magenta')\naxes[0, 1].set_title('model2 Performance')\naxes[0, 1].set_xlabel('Iterations')\naxes[0, 1].set_ylabel('Success Rate')\naxes[0, 1].legend()\n\naxes[1, 0].plot(iterations, model3_series1, label='model3 Series 1', color='blue')\naxes[1, 0].plot(iterations, model3_series2, label='model3 Series 2', color='magenta')\naxes[1, 0].set_title('model3 Performance')\naxes[1, 0].set_xlabel('Iterations')\naxes[1, 0].set_ylabel('Success Rate')\naxes[1, 0].legend()\n\naxes[1, 1].plot(iterations, model4_series1, label='model4 Series 1', color='blue')\naxes[1, 1].plot(iterations, model4_series2, label='model4 Series 2', color='magenta')\naxes[1, 1].set_title('model4 Performance')\naxes[1, 1].set_xlabel('Iterations')\naxes[1, 1].set_ylabel('Success Rate')\naxes[1, 1].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of microphones vs. WER and AMI WER\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2.5, 3.2, 3.8, 4.5, 5.1, 5.8, 6.5])  # WER values\ny2 = np.array([22, 24, 26, 28, 30, 32, 34])  # AMI WER values\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 5.0))\n\n# Plot the data with different styles\nplt.plot(x, y1, marker='o', linestyle='-', color='b', label='WER (%)')\nplt.plot(x, y2, marker='^', linestyle='--', color='r', label='AMI WER (%)')\n\n# Add grid for better readability\nplt.grid(True)\n\n# Set labels and title\nplt.xlabel('Number of microphones')\nplt.ylabel('WAV Error Rate (%)')\nplt.title('WER and AMI WER Comparison')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of microphones vs. WER and AMI WER\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2.5, 3.2, 3.8, 4.5, 5.1, 5.8, 6.4])  # WER for LibriCSS (test)\ny2 = np.array([2.3, 3.0, 3.6, 4.3, 4.9, 5.5, 6.1])  # WER for AMI (dev)\ny3 = np.array([2.8, 3.5, 4.1, 4.8, 5.4, 6.0, 6.6])  # AMI WER for LibriCSS (test)\ny4 = np.array([2.6, 3.3, 3.9, 4.6, 5.2, 5.8, 6.4])  # AMI WER for AMI (dev)\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 7.0))\n\n# Plot the data with different styles\nplt.plot(x, y1, label='LibriCSS (test)', color='blue', linestyle='-', marker='o', markersize=5)\nplt.plot(x, y2, label='AMI (dev)', color='orange', linestyle='--', marker='s', markersize=5)\nplt.plot(x, y3, label='LibriCSS (test) AMI', color='green', linestyle='-.', marker='^', markersize=5)\nplt.plot(x, y4, label='AMI (dev) AMI', color='purple', linestyle=':', marker='D', markersize=5)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Number of Microphones', fontsize=12)\nplt.ylabel('WER (%)', fontsize=12)\nplt.title('Comparison of WER and AMI WER', fontsize=14, fontweight='bold')\n\n# Add a legend with a more descriptive title\nplt.legend(title='Legend', loc='upper right', fontsize=10)\n\n# Customize the tick parameters\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of Microphones vs. WER (Word Error Rate)\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\ny2 = np.array([0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2])\ny3 = np.array([0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Highlight 3', color='orange', linestyle='-', marker='o', linewidth=2, markersize=8)\nax.plot(x, y2, label='Highlight 5', color='blue', linestyle='--', marker='s', linewidth=2, markersize=8)\nax.plot(x, y3, label='Highlight 7', color='red', linestyle='-.', marker='^', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('WER vs. Number of Microphones for Different Highlights')\n\n# Add a grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the lines\nax.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Positive and negative bounds with contrastive loss weight\nx = np.linspace(0.1, 1.0, 10)\ny1 = np.sin(x * np.pi / 2) + 75  # Positive bound\ny2 = np.cos(x * np.pi / 2) + 75  # Negative bound\ny3 = np.tan(x * np.pi / 2) + 75  # Contrastive loss weight\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Positive bound', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Negative bound', color='green', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='Contrastive loss weight', color='red', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Comparison of Different Boundaries and Weights')\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(0.1, 1.1, 0.1))\nax.set_xticklabels([f'{i:.1f}' for i in np.arange(0.1, 1.1, 0.1)])\n\n# Customize the y-axis ticks\nax.set_yticks(np.arange(70, 86, 2))\nax.set_yticklabels([f'{i}' for i in np.arange(70, 86, 2)])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of microphones vs. some metric (e.g., performance)\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='LibriCSS WER', color='gold', linestyle='-', linewidth=2, marker='o', markersize=8)\nax.plot(x, y2, label='Threshold', color='red', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Number of Microphones', fontsize=12)\nax.set_ylabel('WER (%)', fontsize=12)\nax.set_title('Performance Metrics for Different Microphone Counts', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0.2, 1.0, 0.1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Ratio r and Performance values for PNA and GIN\nratio_r = np.linspace(0.1, 1.0, 10)\nperformance_pna = np.sin(ratio_r * np.pi / 2) + 0.5\nperformance_gin = np.cos(ratio_r * np.pi / 2) + 0.5\n\n# Create a new figure with a larger size\nplt.figure(figsize=(6.0, 12.0))\n\n# Plot the data with enhanced styles\nplt.plot(ratio_r, performance_pna, label='PNA', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(ratio_r, performance_gin, label='GIN', color='green', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with improved font sizes and styles\nplt.xlabel('Ratio r', fontsize=12, fontweight='bold')\nplt.ylabel('Performance', fontsize=12, fontweight='bold')\n\n# Set title with a larger font size and style\nplt.title('SPMotif-0.9', fontsize=14, fontweight='bold')\n\n# Add a legend with a larger font size\nplt.legend(fontsize=10)\n\n# Customize the x-axis ticks\nplt.xticks(fontsize=10)\n\n# Customize the y-axis ticks\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance trends over different ratios\nratios = np.linspace(0.1, 1.0, 10)\nperformance_pna = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\nperformance_gin = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 5.0))\n\n# Plot the data with enhanced styling\nplt.plot(ratios, performance_pna, color='purple', linestyle='-', marker='o', markersize=8, label='PNA + ours')\nplt.plot(ratios, performance_gin, color='orange', linestyle='--', marker='s', markersize=8, label='GIN + ours')\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Ratio r', fontsize=12, fontweight='bold')\nplt.ylabel('Performance', fontsize=12, fontweight='bold')\nplt.title('Dynamic Performance Trends', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Set axis limits\nplt.xlim(0.0, 1.0)\nplt.ylim(-1.0, 1.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Ratio r vs Performance\nratio_r = np.linspace(0.1, 1.0, 10)\nperformance_pna_ours = np.array([0.95, 0.97, 0.98, 0.99, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06])\nperformance_gin_ours = np.array([0.85, 0.87, 0.88, 0.89, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styling\nplt.plot(ratio_r, performance_pna_ours, label='PNA + ours', color='navy', linestyle='-', marker='o', markersize=5, linewidth=2)\nplt.plot(ratio_r, performance_gin_ours, label='GIN + ours', color='orange', linestyle='--', marker='s', markersize=5, linewidth=2)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Ratio r', fontsize=12, fontweight='bold')\nplt.ylabel('Performance', fontsize=12, fontweight='bold')\nplt.title('Modern Linear Performance Evaluation', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize tick parameters for better visibility\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics over different ratios\nratios = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\nperformance_pna = np.array([0.5, 0.7, 0.9, 0.3, 0.1])\nperformance_gin = np.array([0.6, 0.8, 0.5, 0.2, 0.0])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styling\nplt.plot(ratios, performance_pna, marker='o', linestyle='-', color='b', label='PNA + ours')\nplt.plot(ratios, performance_gin, marker='s', linestyle='--', color='r', label='GIN + ours')\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Ratio r', fontsize=12, fontweight='bold')\nplt.ylabel('Performance', fontsize=12, fontweight='bold')\nplt.title('Dynamic Model Performance', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Set limits for x and y axes\nplt.xlim(0.0, 1.0)\nplt.ylim(0.0, 1.0)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Ensemble size vs. Accuracy for two models\nensemble_sizes = np.array([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\naccuracy_model_1 = np.array([80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 99, 99.5, 100])\naccuracy_model_2 = np.array([75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 98])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styling\nplt.plot(ensemble_sizes, accuracy_model_1, label='Model 1 Mean Accuracy', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(ensemble_sizes, accuracy_model_2, label='Model 2 Mean Accuracy', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Ensemble Size', fontsize=12, fontweight='bold')\nplt.ylabel('Accuracy (%)', fontsize=12, fontweight='bold')\nplt.title('Comparison of Model Accuracies', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nplt.legend(loc='upper left', fontsize=10)\n\n# Set axis limits\nplt.xlim(min(ensemble_sizes), max(ensemble_sizes))\nplt.ylim(min(np.concatenate((accuracy_model_1, accuracy_model_2))), max(np.concatenate((accuracy_model_1, accuracy_model_2))))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics for different models over iterations\niterations = np.arange(1, 10)\nperformance_A = [75, 78, 80, 82, 84, 86, 88, 90, 92]\nperformance_B = [73, 75, 77, 79, 81, 83, 85, 87, 89]\nperformance_C = [72, 74, 76, 78, 80, 82, 84, 86, 88]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Plot the data with enhanced styles\nax.plot(iterations, performance_A, label='Config A - Model X', color='red', marker='o', linestyle='-', linewidth=2, markersize=8)\nax.plot(iterations, performance_B, label='Config B - Model X', color='green', marker='s', linestyle='--', linewidth=2, markersize=8)\nax.plot(iterations, performance_C, label='Config C - Model X', color='blue', marker='^', linestyle='-.', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Iteration', fontsize=12, fontweight='bold')\nax.set_ylabel('Performance Score', fontsize=12, fontweight='bold')\nax.set_title('Performance of Model X', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10, frameon=True, shadow=True)\n\n# Set x and y limits for better focus\nax.set_xlim(0, 10)\nax.set_ylim(70, 95)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics for different configurations over iterations\niterations = np.arange(2, 11)\nperformance_lla = np.array([75, 76, 77, 78, 79, 80, 81, 82, 83, 84])\nperformance_falcon = np.array([65, 66, 67, 68, 69, 70, 71, 72, 73, 74])\nperformance_qwen = np.array([70, 71, 72, 73, 74, 75, 76, 77, 78, 79])\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(8.0, 12.0), sharex=True)\n\n# Plot the first subplot\naxes[0].plot(iterations, performance_lla, marker='o', linestyle='-', color='pink', label='Config A - Llama')\naxes[0].plot(iterations, performance_falcon, marker='s', linestyle='--', color='green', label='Config B - Falcon')\naxes[0].plot(iterations, performance_qwen, marker='^', linestyle='-.', color='blue', label='Config C - Qwen')\naxes[0].set_title('Performance of Llama')\naxes[0].set_ylabel('Score')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(iterations, performance_lla, marker='o', linestyle='-', color='pink', label='Config A - Llama')\naxes[1].plot(iterations, performance_falcon, marker='s', linestyle='--', color='green', label='Config B - Falcon')\naxes[1].plot(iterations, performance_qwen, marker='^', linestyle='-.', color='blue', label='Config C - Qwen')\naxes[1].set_title('Performance of Falcon')\naxes[1].set_ylabel('Score')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(iterations, performance_lla, marker='o', linestyle='-', color='pink', label='Config A - Llama')\naxes[2].plot(iterations, performance_falcon, marker='s', linestyle='--', color='green', label='Config B - Falcon')\naxes[2].plot(iterations, performance_qwen, marker='^', linestyle='-.', color='blue', label='Config C - Qwen')\naxes[2].set_title('Performance of Qwen')\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\naxes[2].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Brand Sales Growth over quarters\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nsales_a = [1.2, 1.5, 1.8, 2.1]\nsales_b = [1.3, 1.6, 1.9, 2.2]\nsales_c = [1.4, 1.7, 2.0, 2.3]\nsales_d = [1.5, 1.8, 2.1, 2.4]\nsales_e = [1.6, 1.9, 2.2, 2.5]\nsales_f = [1.7, 2.0, 2.3, 2.6]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot each brand's sales growth\nax.plot(quarters, sales_a, marker='o', linestyle='-', color='red', label='Brand A Sales Growth')\nax.plot(quarters, sales_b, marker='^', linestyle='--', color='blue', label='Brand B Sales Growth')\nax.plot(quarters, sales_c, marker='s', linestyle='-.', color='green', label='Brand C Sales Growth')\nax.plot(quarters, sales_d, marker='D', linestyle=':', color='purple', label='Brand D Sales Growth')\nax.plot(quarters, sales_e, marker='p', linestyle='-', color='orange', label='Brand E Sales Growth')\nax.plot(quarters, sales_f, marker='h', linestyle='--', color='brown', label='Brand F Sales Growth')\n\n# Set labels and title\nax.set_xlabel('Quarter')\nax.set_ylabel('Sales Growth')\nax.set_title('Brand Sales Growth Over Quarters')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Time in seconds and corresponding metric values for two different runs\ntime = np.array([100, 200, 300, 400, 500, 600, 700])\nmetric_value_1 = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\nmetric_value_2 = np.array([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(18.0, 4.0))\n\n# Plot the data with enhanced styling\nax.plot(time, metric_value_1, label='ECL Run 1', color='blue', linestyle='-', linewidth=2, marker='o', markersize=8)\nax.plot(time, metric_value_2, label='ECL Run 2', color='orange', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Time (s)', fontsize=14, fontweight='bold')\nax.set_ylabel('Metric Value', fontsize=14, fontweight='bold')\nax.set_title('Traffic Performance', fontsize=16, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=12, frameon=True, shadow=True)\n\n# Set x and y axis limits\nax.set_xlim(0, 800)\nax.set_ylim(0, 1.5)\n\n# Add annotations to highlight key points\nfor i, txt in enumerate(metric_value_1):\n    ax.annotate(f'{txt:.2f}', (time[i], metric_value_1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Driving styles and their relaxation levels under different weather conditions\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain']\nrelaxation_levels = [\n    [1.2, 1.4, 1.3, 1.5],  # Weather: Dry\n    [1.0, 1.2, 1.1, 1.3]   # Weather: Rain\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced styling\nfor i, style in enumerate(driving_styles):\n    ax.plot(weather_conditions, relaxation_levels[i], marker='o', linestyle='-', color=plt.cm.viridis(i / len(driving_styles)), label=style)\n\n# Set labels and title with improved formatting\nax.set_xlabel('Weather', fontsize=12)\nax.set_ylabel('Relaxation Level', fontsize=12)\nax.set_title('Relaxation Levels by Driving Style and Weather Condition', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(title='Driving Style', loc='upper right', fontsize=10)\n\n# Enhance tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([20, 25, 30, 35, 40])\ny2 = np.array([15, 20, 25, 30, 35])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Run 1', color='purple', linestyle='-', linewidth=2, marker='o', markersize=8)\nax.plot(x, y2, label='Run 2', color='green', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Phase', fontsize=12)\nax.set_ylabel('Cumulative Value', fontsize=12)\nax.set_title('Category A Growth', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left', fontsize=10)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0, 51, 10))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: N vs. f(N)\nN = np.array([4, 6, 10, 30])\nf_N_standard = np.array([1.08, 1.04, 1.02, 1.01])\nf_N_constrained = np.array([1.06, 1.04, 1.02, 1.01])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(9.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(N, f_N_standard, marker='o', linestyle='-', color='b', label='Standard')\nplt.plot(N, f_N_constrained, marker='x', linestyle='--', color='r', label='Constrained')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set axis labels with more descriptive text\nplt.xlabel('N (Number of Iterations)', fontsize=12)\nplt.ylabel('f(N) (Function Value)', fontsize=12)\n\n# Set title with a more detailed description\nplt.title('Comparison of Standard and Constrained Optimization', fontsize=14, fontweight='bold')\n\n# Add a legend with a more informative title\nplt.legend(title='Optimization Type', loc='upper right', fontsize=10)\n\n# Customize tick parameters for better readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nregions = ['South', 'North', 'East', 'West']\npercentages = [25, 40, 15, 10]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(regions, percentages, color=['skyblue', 'lightgreen', 'lavender', 'lightcoral'])\n\n# Add labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage')\nax.set_title('Population Distribution by Region')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')\n\n# Set the x-axis limits to ensure all labels fit\nax.set_xlim(-0.5, len(regions) - 0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive']\nvalues = [1.5, 0.75, 0.6, 0.4, 0.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Sensitivity Attribute')\nax.set_ylabel('I\u221e(Y, Z)')\nax.set_title('Sensitivity Analysis of Attributes')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis limits to ensure all categories are visible\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nvalues = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Robust Error (%)')\nax.set_title('Robust Error by Model')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.linspace(0, 180, 100)\ny1 = np.sin(x * np.pi / 90) + 0.5\ny2 = np.cos(x * np.pi / 90) + 0.5\ny3 = np.tan(x * np.pi / 90) + 0.5\ny4 = np.sin(x * np.pi / 90) + 0.5\ny5 = np.cos(x * np.pi / 90) + 0.5\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='VGG16 Cartesian', color='red', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Resnet101 Cartesian', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='VGG16 Retinotopic', color='orange', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(x, y4, label='Resnet101 Retinotopic', color='green', linestyle=':', linewidth=2, marker='D', markersize=5)\nax.plot(x, y5, label='Resnet101 Polar', color='purple', linestyle='-', linewidth=2, marker='P', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Rotation angle (\u00b0)')\nax.set_ylabel('Invariance')\nax.set_title('Cortical and Retinotopic Invariance')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', fontsize='small')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [1.1, 1.2, 1.3, 1.4, 1.5],\n    [1.6, 1.7, 1.8, 1.9, 2.0],\n    [2.1, 2.2, 2.3, 2.4, 2.5]\n])\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['A', 'B', 'C', 'D', 'E'])\nax.set_yticklabels(['X', 'Y', 'Z', 'W', 'V'])\nax.set_title('Heatmap Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the plot\nx = np.linspace(0, 50, 100)\ny = -8 + 2 * np.sin(x / 10)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='blue', linewidth=2, linestyle='-', marker='o', markersize=5, label='Token Rarity')\n\n# Add a shaded region to the plot\nax.fill_between(x, y, where=(y < -9), color='gray', alpha=0.3)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('GPT2 Tokenizer rank', fontsize=12)\nax.set_ylabel('Loss', fontsize=12)\nax.set_title('Token rarity', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Customize grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Correlation')\nax.set_title('Correlation of Categories')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\nx = np.array([1355, 1908, 2670, 3540])\ny = np.array([0.45, 0.40, 0.55, 0.50])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=0.05, fmt='o', color='orange', ecolor='black', capsize=5, label='Data Points')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('O.M.L.A. K.P.A.')\nax.set_title('O.M.L.A. K.P.A. Over Years')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\nstudy_levels = [0, 1, 2, 3, 4, 5]\nknowledge_increase = [20, 40, 60, 80, 90, 100]\ncolors = ['skyblue', 'salmon', 'yellow']\nlabels = ['Education', 'Law', 'Technology']\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the first dataset\nax1.plot(study_levels, knowledge_increase, color=colors[0], marker='o', linestyle='-', linewidth=2, markersize=8, label='Cumulative Knowledge Increase')\nax1.set_xlabel('Study Level')\nax1.set_ylabel('Cumulative Knowledge Increase (%)', color=colors[0])\nax1.tick_params(axis='y', labelcolor=colors[0])\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\n\n# Data for the second dataset\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance']\npublications = [250, 200, 220, 150, 180, 170, 210]\n\n# Plot the second dataset\nax2.bar(domains, publications, color=colors[1:], width=0.5, alpha=0.7, label='Number of Publications by Domain')\nax2.set_ylabel('Number of Publications', color=colors[1])\nax2.tick_params(axis='y', labelcolor=colors[1])\n\n# Add a title and legend\nplt.title('Knowledge Increase by Subject Area and Number of Publications by Domain', fontsize=14, fontweight='bold')\nfig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), ncol=2)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the plot\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\nhardware = [10, 20, 30, 40, 50, 60, 70, 80]\nsoftware = [15, 25, 35, 45, 55, 65, 75, 85]\nai = [20, 30, 40, 50, 60, 70, 80, 90]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the data with different styles\nax.plot(years, hardware, label='Hardware', color='blue', linestyle='-', linewidth=2)\nax.plot(years, software, label='Software', color='orange', linestyle='--', linewidth=2)\nax.plot(years, ai, label='AI', color='green', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Progress (%)')\nax.set_title('Technological Advancements')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the data\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.4, 2.6, 2.9, 2.5]\nfraud_rates = [120, 115, 110, 105, 100, 95]\n\n# Create a new figure with a larger size\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\n\n# Plotting the first dataset (orange bars)\nbars = ax1.bar(countries, crime_rates, color='orange', alpha=0.7, label='Crime Rate')\n\n# Set labels and title for the first y-axis\nax1.set_xlabel('Country')\nax1.set_ylabel('Average Crime Rate per 100,000 Inhabitants', color='orange')\nax1.set_title('Average Legal Crime Rates by Country', fontsize=16, fontweight='bold')\nax1.tick_params(axis='y', labelcolor='orange')\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\n\n# Plotting the second dataset (blue line)\nline, = ax2.plot(countries, fraud_rates, color='blue', marker='o', linestyle='-', linewidth=2, markersize=8, label='Fraud Rate')\n\n# Set labels for the second y-axis\nax2.set_ylabel('Fraud Rate per 100,000 Inhabitants', color='blue')\nax2.tick_params(axis='y', labelcolor='blue')\n\n# Add a legend\nfig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)\n\n# Add grid lines\nax1.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\nax2.grid(False)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Public School', 'Private School']\nvalues = [80, 60]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=['skyblue', 'orange'], edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, int(yval), ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('School Type')\nax.set_ylabel('Number of Students')\nax.set_title('Student Performance in Schools')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nx1 = np.array([100, 200, 300, 400, 500])\ny1 = np.array([10, 20, 30, 40, 50])\nz1 = np.array([0.001, 0.002, 0.003, 0.004, 0.005])\n\n# Data for the second plot\nx2 = np.array([100, 200, 300, 400, 500])\ny2 = np.array([15, 25, 35, 45, 55])\nz2 = np.array([0.002, 0.003, 0.004, 0.005, 0.006])\n\n# Create a new figure with a specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the first dataset\nscatter1 = ax1.scatter(x1, y1, c=z1, cmap='viridis', s=100, alpha=0.7)\nax1.set_title('Average Annual Temperature')\nax1.set_xlabel('Elevation (m)')\nax1.set_ylabel('Temperature (\u00b0C)')\nax1.grid(True)\n\n# Add a color bar for the first plot\ncbar1 = fig.colorbar(scatter1, ax=ax1, orientation='vertical')\ncbar1.set_label('Density')\n\n# Plot the second dataset\nscatter2 = ax2.scatter(x2, y2, c=z2, cmap='plasma', s=100, alpha=0.7)\nax2.set_title('Geographical Elevation Distribution')\nax2.set_xlabel('Elevation (m)')\nax2.set_ylabel('Frequency')\nax2.grid(True)\n\n# Add a color bar for the second plot\ncbar2 = fig.colorbar(scatter2, ax=ax2, orientation='vertical')\ncbar2.set_label('Intensity')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart\ncategories = ['Stocks', 'Bonds', 'Real Estate']\nvalues = [200, 175, 150]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Investment Type')\nax.set_ylabel('Number of Accounts (%)')\nax.set_title('Investment Growth Over Time')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, round(yval, 1), ha='center', va='bottom')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 400)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add a grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart\ncategories = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\nvalues = [85, 75, 90, 80]\n\n# Create a new figure with a larger size\nfig, ax1 = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data with a blue color and a bar width of 0.5\nbars = ax1.bar(categories, values, color='b', alpha=0.7, width=0.5, edgecolor='black')\n\n# Set labels and title for the first chart\nax1.set_xlabel('Algorithm')\nax1.set_ylabel('Success Rate (%)', color='b')\nax1.set_title('AI Task Success Rates', fontsize=14, fontweight='bold')\n\n# Add a legend for the first chart\nax1.legend(['Success Rate'], loc='upper left')\n\n# Create a second y-axis for the second chart\nax2 = ax1.twinx()\n\n# Data for the second chart\nconditions = ['Dry Conditions', 'Wet Conditions']\nmodel_a = [95, 85]\nmodel_b = [90, 80]\nmodel_c = [85, 75]\nmodel_d = [80, 70]\n\n# Plot the data with different colors and line styles\nax2.plot(conditions, model_a, marker='o', linestyle='-', color='g', label='Model A', linewidth=2)\nax2.plot(conditions, model_b, marker='s', linestyle='--', color='r', label='Model B', linewidth=2)\nax2.plot(conditions, model_c, marker='^', linestyle='-.', color='m', label='Model C', linewidth=2)\nax2.plot(conditions, model_d, marker='D', linestyle=':', color='c', label='Model D', linewidth=2)\n\n# Set labels and title for the second chart\nax2.set_ylabel('Adaptability Score (%)', color='r')\nax2.set_title('AI Model Adaptability', fontsize=14, fontweight='bold')\n\n# Add a legend for the second chart\nax2.legend(loc='upper right')\n\n# Add grid lines for better readability\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart: Traffic Volume by Time of Day\ntime_of_day = ['Morning', 'Evening']\ntraffic_volume_morning = [120, 150, 130, 140, 160]\ntraffic_volume_evening = [110, 140, 120, 130, 150]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data with different colors and styles\nax.bar(time_of_day, traffic_volume_morning, color='orange', label='Morning Traffic', alpha=0.7)\nax.bar(time_of_day, traffic_volume_evening, bottom=traffic_volume_morning, color='green', label='Evening Traffic', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Time of Day')\nax.set_ylabel('Number of Vehicles')\nax.set_title('Traffic Volume by Time of Day')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nsizes = [10, 30, 25, 15]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Distribution of Arts Education Programs')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nsales = [\n    [25000, 18000, 12000, 6000, 3000],\n    [22000, 15000, 9000, 4000, 2000],\n    [20000, 13000, 7000, 3000, 1000],\n    [18000, 11000, 5000, 2000, 500],\n    [16000, 9000, 3000, 1000, 200]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('viridis')\n\n# Plot the data\nfor i, region in enumerate(regions):\n    ax.barh(products, sales[i], left=np.sum(sales[:i], axis=0), height=0.8, label=region, color=cmap(i/len(regions)))\n\n# Add labels and title\nax.set_xlabel('Sales')\nax.set_ylabel('Products')\nax.set_title('Sales by Product and Region')\n\n# Add a legend\nax.legend(title='Regions')\n\n# Add grid lines\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the histogram\ndata = np.random.normal(loc=0.5, scale=0.2, size=1000)\ndata[data < -0.6] = -0.6\ndata[data > 1.0] = 1.0\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the histogram with a green color for gains and red for losses\nn, bins, patches = ax1.hist(data, bins=30, range=(-0.6, 1.0), color='green', alpha=0.7, label='Gains')\nfor i in range(len(patches)):\n    if i % 2 == 0:\n        patches[i].set_facecolor('red')\n\n# Set labels and title\nax1.set_xlabel('Returns')\nax1.set_ylabel('Frequency', color='green')\nax1.set_title('Histogram of Stock Returns')\n\n# Add a legend\nax1.legend(loc='upper right')\n\n# Create a second y-axis for the scatter plot\nax2 = ax1.twinx()\n\n# Sample data for the scatter plot\nx = np.linspace(-1.0, 1.0, 100)\ny1 = np.sin(x * 2) + 0.5\ny2 = np.cos(x * 2) - 0.5\n\n# Plot the scatter plot with different colors for each dataset\nax2.scatter(x, y1, color='yellow', label='Tech Stocks', s=50, marker='o')\nax2.scatter(x, y2, color='cyan', label='Energy Stocks', s=50, marker='^')\n\n# Set labels for the second y-axis\nax2.set_ylabel('Investment Clusters', color='blue')\n\n# Add a legend for the second y-axis\nax2.legend(loc='upper left')\n\n# Adjust layout to prevent overlap\nfig.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a larger size for better visibility\nfig = plt.figure(figsize=(8.0, 10.0))\n\n# Add a 3D subplot\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with enhanced color and lighting\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none', linewidth=0.5, antialiased=True)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\ncbar.set_label('Energy Consumption (GWh)')\n\n# Set labels with more descriptive text\nax.set_xlabel('Relative Year')\nax.set_ylabel('Relative Month')\nax.set_zlabel('Reneable Energy Ratio (%)')\n\n# Set a title for the plot\nax.set_title('Energy Consumption and Renewable Energy Ratio Over Time')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Literature', 'Renaissance Texts']\nsizes = [15.0, 35.0, 20.0, 30.0]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\nwedges, texts, autotexts = ax1.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a title\nax1.set_title('Historical Document Types in Library', fontsize=14, fontweight='bold')\n\n# Data for the scatter plot\nyears = [400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]\ndocument_counts = [150, 200, 250, 300, 350, 400, 450, 500, 550]\n\n# Create a scatter plot\nax2 = fig.add_subplot(122, sharey=ax1)\nax2.scatter(years, document_counts, color='purple', s=100, alpha=0.7)\n\n# Set labels and title for the scatter plot\nax2.set_xlabel('Year', fontsize=12)\nax2.set_ylabel('Number of Documents', fontsize=12)\nax2.set_title('Document Count Over Historical Periods', fontsize=14, fontweight='bold')\n\n# Add grid lines\nax2.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the chart\nx = np.array([1000, 1200, 1400, 1600, 1800, 2000])\ny1 = np.array([8.5, 8.7, 8.9, 9.1, 9.3, 9.5])\ny2 = np.array([8.0, 8.2, 8.4, 8.6, 8.8, 9.0])\ny3 = np.array([7.5, 7.7, 7.9, 8.1, 8.3, 8.5])\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the first dataset with a line plot\ncolor = 'tab:purple'\nax1.set_xlabel('Average Price ($)')\nax1.set_ylabel('Popularity Index', color=color)\nax1.plot(x, y1, color=color, marker='o', linestyle='-', linewidth=2, markersize=8)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\n\n# Plot the second dataset with a bar chart\ncolor = 'tab:orange'\nax2.set_ylabel('Customer Satisfaction', color=color)\nax2.bar(x, y2, color=color, alpha=0.7, width=0.5, align='center')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a third y-axis for the third dataset\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('outward', 60))  # Adjust the position of the right spine\ncolor = 'tab:blue'\nax3.set_ylabel('Prada', color=color)\nax3.plot(x, y3, color=color, marker='s', linestyle='--', linewidth=2, markersize=8)\nax3.tick_params(axis='y', labelcolor=color)\n\n# Set the title and adjust layout\nplt.title('Luxury Brand Popularity vs Price and Customer Satisfaction')\nfig.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\naccuracy = [75.32, 77.11, 77.03, 76.86, 74.52]\nrobustness = [60.5, 59.3, 59.1, 58.35, 55.5]\naccuracy_diff = [0.02, -0.08, -0.25, -0.23, 0.0]\nrobustness_diff = [-2.85, -2.4, -2.85, -2.85, 0.0]\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot accuracy data\ncolor = 'tab:blue'\nax1.set_xlabel('Year')\nax1.set_ylabel('Accuracy (%)', color=color)\nax1.plot(accuracy, color=color, marker='o', linestyle='-', linewidth=2, markersize=8)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for robustness data\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Robustness (%)', color=color)\nax2.plot(robustness, color=color, marker='s', linestyle='--', linewidth=2, markersize=8)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add annotations for each data point\nfor i, txt in enumerate(accuracy):\n    ax1.annotate(f'{txt:.2f}', (i, txt), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\nfor i, txt in enumerate(robustness):\n    ax2.annotate(f'{txt:.2f}', (i, txt), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\n\n# Set title and labels\nplt.title('Accuracy and Robustness Comparison Over Years', fontsize=14, fontweight='bold')\nax1.set_xticks(range(len(accuracy)))\nax1.set_xticklabels(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engrycks2019'], rotation=45, ha='right')\n\n# Add a legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: General Variance and Average Regret for different contexts and algorithms\ngeneral_variance = [0.8, 0.6, 0.5, 0.4, 0.3]\naverage_regret = [\n    [0.25, 0.22, 0.21, 0.20, 0.18],\n    [0.28, 0.25, 0.24, 0.23, 0.21],\n    [0.30, 0.27, 0.26, 0.25, 0.23],\n    [0.32, 0.29, 0.28, 0.27, 0.25],\n    [0.34, 0.31, 0.30, 0.29, 0.27]\n]\n\n# Define the number of trials\ntrials = np.arange(1, 6)\n\n# Create a new figure with a larger size\nplt.figure(figsize=(7.0, 9.0))\n\n# Plot each algorithm's average regret over trials\nfor i, regret in enumerate(average_regret):\n    plt.plot(trials, regret, marker='o', linestyle='-', label=f'Algorithm {i+1}')\n\n# Set labels and title\nplt.xlabel('Number of Trials')\nplt.ylabel('Average Regret')\nplt.title('Comparison of Algorithms Across Trials')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to identify each line\nplt.legend(title='Algorithms')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 200, 400])\ny = np.array([50, 100, 150])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y, marker='o', linestyle='-', color='b', label='Data Line')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel('Elo Rating')\nax.set_ylabel('Correct Rating - Incorrect Rating')\nax.set_title('Debaters')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [30.5, 29.8, 10.6, 11.3, 13.2, 4.6]\nlabels = ['Green', 'Blue', 'Purple', 'Yellow', 'Orange', 'Gray']\ncolors = ['#4CAF50', '#2196F3', '#9C27B0', '#FFEB3B', '#FF9800', '#795548']\nexplode = (0.1, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Pie Chart of Various Percentages')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nsizes = [90, 225, 1, 60, 1/2, 100]\nlabels = ['90 g sugar', '225 g flour', '1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk']\ncolors = ['#FF6347', '#FFD700', '#90EE90', '#87CEEB', '#FFB6C1', '#ADD8E6']\nexplode = (0.1, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Matplotlib bakery: A donut')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Transport', 'Utilities', 'Food', 'Others', 'Entertainment']\nsizes = [37.5, 16.7, 41.7, 10.0, 10.0]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99','#C2C2F0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', startangle=140, textprops=dict(color=\"w\"))\n\n# Add a title to the chart\nax.set_title('Expenses - Company vs. Project', fontsize=16, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for LoRA\nlabels = ['Unused', 'Model', 'Optimiser', 'Gradient']\nsizes = [31.4, 15.7, 19.9, 33.0]\ncolors = ['#FFC300', '#FF6347', '#4682B4', '#90EE90']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Data for QLoRA\nlabels2 = ['Unused', 'Model', 'Optimiser', 'Gradient']\nsizes2 = [54.8, 10.5, 6.3, 28.4]\ncolors2 = ['#FFC300', '#FF6347', '#4682B4', '#90EE90']\nexplode2 = (0.1, 0, 0, 0)\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first pie chart\nwedges, texts, autotexts = axs[0].pie(sizes, explode=explode, labels=labels, colors=colors,\n                                    autopct='%1.1f%%', shadow=True, startangle=140)\nfor text in texts:\n    text.set_color('white')\nfor autotext in autotexts:\n    autotext.set_color('white')\n\n# Plot the second pie chart\nwedges2, texts2, autotexts2 = axs[1].pie(sizes2, explode=explode2, labels=labels2, colors=colors2,\n                                     autopct='%1.1f%%', shadow=True, startangle=140)\nfor text in texts2:\n    text.set_color('white')\nfor autotext in autotexts2:\n    autotext.set_color('white')\n\n# Add a title to each subplot\naxs[0].set_title('LoRA', fontsize=14, fontweight='bold')\naxs[1].set_title('QLoRA', fontsize=14, fontweight='bold')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie charts\ndata1 = [25.1, 26.4, 12.6, 15.9]\ndata2 = [46.2, 23.9, 4.6, 5.3]\n\n# Labels for the slices\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Colors for the slices\ncolors1 = ['#FFA500', '#87CEEB', '#90EE90', '#FFFF00']\ncolors2 = ['#FFA500', '#87CEEB', '#90EE90', '#FFFF00']\n\n# Explode the first slice of the first pie chart\nexplode1 = (0.1, 0, 0, 0)\n\n# Explode the second slice of the second pie chart\nexplode2 = (0, 0.1, 0, 0)\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plot the first pie chart\naxes[0].pie(data1, explode=explode1, labels=labels1, colors=colors1, autopct='%1.1f%%', startangle=140)\naxes[0].set_title('Full Finetuning')\n\n# Plot the second pie chart\naxes[1].pie(data2, explode=explode2, labels=labels2, colors=colors2, autopct='%1.1f%%', startangle=140)\naxes[1].set_title('QLoRA')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Fruits', 'Proteins', 'Grains', 'Vegetables', 'Dairy']\nsizes = [25.0, 35.0, 10.0, 20.0, 10.0]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Nutritional Distribution')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 35.7, 37.5]\ncolors = ['#FFA500', '#00BFFF', '#00FF00']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Market Share by Sector - External vs. Internal')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Logs 10%', 'Frogs 15%', 'Hogs 30%', 'Dogs 45%']\nsizes = [10, 15, 30, 45]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Pie Chart of Animal Populations')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [11.0, 29.0, 20.0, 40.0]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Distribution of Preferences')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\nlabels = ['France', 'UK', 'Germany', 'Italy']\nsizes = [18, 42, 12, 28]\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#90EE90']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add title\nax.set_title('Countries in Europe', fontsize=14, fontweight='bold')\n\n# Add legend\nplt.legend(wedges, labels, title=\"Country\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [26.2, 13.3, 14.3, 19.0, 21.4]\nlabels = ['Slice 1', 'Slice 2', 'Slice 3', 'Slice 4', 'Slice 5']\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Slice of a pie chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [35.4, 12.4, 17.2, 24.7, 10.3]\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', startangle=140, textprops=dict(color=\"w\"))\n\n# Add a title to the chart\nax.set_title('Distribution of Preferences', fontsize=16, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 35, 10, 20]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Customize the text properties\nfor text in texts:\n    text.set_color('white')\n\nfor autotext in autotexts:\n    autotext.set_color('white')\n    autotext.set_fontsize(12)\n    autotext.set_weight('bold')\n\n# Add a title\nax.set_title('Social Media Usage', fontsize=16, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP', 'ACL']\nsizes = [7.4, 12.2, 25.4, 20.3, 34.7]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('NLP Conference Influence', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Conferences\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Coal', 'Hydro', 'Solar', 'Wind']\nsizes = [25.0, 15.0, 37.5, 30.0]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Energy Consumption - National vs. Project')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(10)\ny1 = np.array([-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, -0.00, 0.44, 0.88])\ny2 = np.array([-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, -0.00, 0.44, 0.88])\ny3 = np.array([-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, -0.00, 0.44, 0.88])\ny4 = np.array([-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, -0.00, 0.44, 0.88])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='English', color='red', marker='o', linestyle='-', linewidth=2, markersize=5)\nax.plot(x, y2, label='French', color='blue', marker='s', linestyle='--', linewidth=2, markersize=5)\nax.plot(x, y3, label='German', color='green', marker='^', linestyle='-.', linewidth=2, markersize=5)\nax.plot(x, y4, label='Japanese', color='purple', marker='D', linestyle=':', linewidth=2, markersize=5)\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_title('Comparison of Values Over Time')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend to explain the data\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\ny1 = np.array([-4.00, -3.22, -2.44, -2.00, -1.50, -1.00, -0.50, 0.00, 0.50])\ny2 = np.array([-3.00, -2.50, -2.00, -1.50, -1.00, -0.50, 0.00, 0.50, 1.00])\ny3 = np.array([-2.00, -1.50, -1.00, -0.50, 0.00, 0.50, 1.00, 1.50, 2.00])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, color='red', marker='o', linestyle='-', label='English')\nax.plot(x, y2, color='red', marker='s', linestyle='--', label='French')\nax.plot(x, y3, color='red', marker='^', linestyle='-.', label='German')\n\n# Set labels and title\nax.set_xlabel('Time (hours)')\nax.set_ylabel('Temperature (\u00b0C)')\nax.set_title('Temperature Trends Over Time')\n\n# Add a legend\nax.legend()\n\n# Set grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define data for plotting\nx1 = np.linspace(0, 0.6, 100)\nx2 = np.linspace(0.1, 0.5, 100)\ny1 = np.sin(x1) * np.cos(x2)\ny2 = np.sin(x1) * np.sin(x2)\ny3 = np.cos(x1) * np.cos(x2)\ny4 = np.cos(x1) * np.sin(x2)\n\n# Plot the data with different styles and labels\nax.plot(x1, y1, label='True Field', color='red', linestyle='-', linewidth=2)\nax.plot(x1, y2, label='SINDy Learned Field', color='blue', linestyle='--', linewidth=2)\nax.plot(x1, y3, label='Train Sample', color='purple', linestyle='-.', linewidth=2)\nax.plot(x1, y4, label='Test Sample', color='orange', linestyle=':', linewidth=2)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set axis limits\nax.set_xlim(0, 0.6)\nax.set_ylim(-1, 1)\n\n# Add axis labels with improved font size\nax.set_xlabel('X1', fontsize=12)\nax.set_ylabel('X2', fontsize=12)\n\n# Add a title with improved font size and style\nax.set_title('Vector Field Visualization', fontsize=14, fontweight='bold')\n\n# Add a legend with improved location and font size\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Define the data for the plot\nx = np.linspace(-1, 1, 200)\ny = np.linspace(-1, 1, 200)\nX, Y = np.meshgrid(x, y)\nU = -Y\nV = X\n\n# Plot the vector field\nax.quiver(X, Y, U, V, color='b', scale=20)\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Set limits for the axes\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Add grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data for the plot\nx = np.linspace(-2.0, 2.0, 100)\ny = np.linspace(-2.0, 2.0, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the data using quiver\nQ = ax.quiver(X, Y, Z, Z, color='b', units='xy', scale=20)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(Q, ax=ax)\ncbar.set_label('Magnitude')\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Magnetic Field B in Tesla units')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['VQA', 'MME', 'MM', 'LLaVA-W', 'POPE']\nvalues = [79.9, 62.0, 58.5, 66.9, 75.8]\ncolors = ['#FF5733', '#33FF57', '#3357FF', '#F333FF', '#FFFF33']\n\n# Number of categories\nN = len(categories)\n\n# Convert category labels into position indices\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], color='b', linewidth=2, linestyle='solid')\nax.fill(angles, values + values[:1], color='b', alpha=0.25)\n\n# Set the category names as radial ticks\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Customize the grid lines\nax.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Add a title\nax.set_title('Radar Chart Example', size=14, weight='bold', color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['fr', 'hi', 'ru', 'th', 'tr', 'ur', 'vi', 'zh']\nvalues = [20, 40, 60, 80, 100, 120, 140, 160]\ncolors = ['#FF6347', '#90EE90', '#ADD8E6', '#FFD700', '#FF6347', '#90EE90', '#ADD8E6', '#FFD700']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Plot the data on the radar chart\nax.plot(np.linspace(0, 2 * np.pi, len(categories), endpoint=False), values + values[:1], color='black', linewidth=1)\nax.fill(np.linspace(0, 2 * np.pi, len(categories), endpoint=False), values + values[:1], colors, alpha=0.2)\n\n# Set the category labels\nax.set_xticks(np.linspace(0, 2 * np.pi, len(categories), endpoint=False))\nax.set_xticklabels(categories)\n\n# Customize the grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Add a title\nax.set_title('Radar Chart Example', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Understanding', 'Memory', 'Paraphrasing', 'Reasoning', 'Questioning']\nvalues = [8, 10, 6, 4, 2]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 4.0), subplot_kw=dict(polar=True))\n\n# Calculate the number of categories and create an array of angles\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', color='b', label='Data')\nax.fill(angles, values + values[:1], facecolor='b', alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Customize the plot\nax.set_title('Radar Chart Example', size=14, color='b', y=1.1)\nax.grid(True)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(0, 2 * np.pi, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='sin(x)', color='blue', linestyle='-', linewidth=2)\nax.plot(x, y2, label='cos(x)', color='orange', linestyle='--', linewidth=2)\nax.plot(x, y3, label='tan(x)', color='green', linestyle='-.', linewidth=2)\n\n# Set the title and labels with improved formatting\nax.set_title('Trigonometric Functions', fontsize=16, fontweight='bold')\nax.set_xlabel('Angle (radians)', fontsize=14)\nax.set_ylabel('Function Value', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=12)\n\n# Set axis limits for better focus\nax.set_xlim(0, 2 * np.pi)\nax.set_ylim(-2, 2)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['video game', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event']\nvalues = [0.8, 0.6, 0.4, 0.2, 0.6, 0.8, 0.4]\nN = len(categories)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Convert the categories into angles\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Llama-2-70B')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set the title\nax.set_title('Radar Chart Example', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'Humans', 'STEM']\nN = len(categories)\nvalues = [\n    [1, 2, 3, 4, 5, 6, 7],  # GPT-J-6B\n    [2, 3, 4, 5, 6, 7, 8],  # TinyLLaMA-1.1B\n    [3, 4, 5, 6, 7, 8, 9],  # OpenLLaMA-3B\n    [4, 5, 6, 7, 8, 9, 10], # OpenMoE-8B/32E\n    [5, 6, 7, 8, 9, 10, 11]  # Humans\n]\n\n# Convert data into a format suitable for plotting\nvalues += values[:1]  # Repeat the first value to close the loop\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot each dataset\nfor i, value in enumerate(values):\n    ax.plot(angles, value, linewidth=2, linestyle='solid', label=f'Dataset {i+1}')\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set the title of the chart\nax.set_title('Roleplay', size=16, weight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Nutrition', 'Purity', 'Allergen', 'Pollution', 'Recall', 'Storage', 'Material', 'Labeling']\nN = len(categories)\nvalues = [0.8, 0.6, 0.7, 0.5, 0.9, 0.4, 0.3, 0.2]\nvalues += values[:1]  # Repeat the first value to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(np.arange(N + 1), values, color='red', linewidth=2, linestyle='-', marker='o', markersize=8)\n\n# Fill the area under the curve\nax.fill(np.arange(N + 1), values, color='red', alpha=0.2)\n\n# Set the category labels\nax.set_xticks(np.arange(N))\nax.set_xticklabels(categories, fontsize=10)\n\n# Customize the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a title\nax.set_title('MUJI vs Nestle in Food Safety', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Apple', 'Samsung', 'Huawei']\nvalues = [85.8, 86.4, 80.9]\n\n# Number of categories\nN = len(categories)\n\n# Convert category labels into position indexes\nindex = np.arange(N)\nwidth = 1.0\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nbars = ax.bar(index, values, width=width, bottom=0.0, color=['orange', 'blue', 'green'], alpha=0.7)\n\n# Set the category names as tick labels\nax.set_xticks(index)\nax.set_xticklabels(categories, fontsize=12)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Add title and labels\nax.set_title('Radar Chart Example', fontsize=14, fontweight='bold')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Injection', 'Extrusion', 'Compression', 'Blow Molding']\nvalues1 = [1, 2, 3, 4]\nvalues2 = [2, 3, 4, 5]\nvalues3 = [3, 4, 5, 6]\nvalues4 = [4, 5, 6, 7]\n\n# Number of categories\nN = len(categories)\n\n# Convert data into a format suitable for plotting\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\nvalues4 += values4[:1]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot each dataset\nax.plot(angles, values1, linewidth=1, linestyle='solid', label='Injection Molding', color='red')\nax.fill(angles, values1, alpha=0.25, color='red')\n\nax.plot(angles, values2, linewidth=1, linestyle='solid', label='Extrusion', color='green')\nax.fill(angles, values2, alpha=0.25, color='green')\n\nax.plot(angles, values3, linewidth=1, linestyle='solid', label='Compression', color='blue')\nax.fill(angles, values3, alpha=0.25, color='blue')\n\nax.plot(angles, values4, linewidth=1, linestyle='solid', label='Blow Molding', color='purple')\nax.fill(angles, values4, alpha=0.25, color='purple')\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set title\nax.set_title('Radar Chart Example', size=16, weight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Food Quality', 'Shows', 'Staff', 'Family Rides', 'Cleanliness', 'Thrill Rides', 'Wait Times', 'Parking', 'Ticket Price', 'Souvenirs']\nvalues_disney = [0.2, 0.4, 0.6, 0.8, 1.0, 0.2, 0.4, 0.6, 0.8, 1.0]\nvalues_universal_studios = [0.4, 0.6, 0.8, 1.0, 0.2, 0.4, 0.6, 0.8, 1.0, 0.2]\n\n# Number of categories\nN = len(categories)\n\n# Convert category labels into position indices\nindex = np.arange(N)\nwidth = 2 * np.pi / N\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot data for Disney\nbars_disney = ax.bar(index, values_disney, width=width, bottom=0.0, color='orange', alpha=0.7, label='Disney')\n\n# Plot data for Universal Studios\nbars_universal_studios = ax.bar(index + width, values_universal_studios, width=width, bottom=0.0, color='purple', alpha=0.7, label='Universal Studios')\n\n# Set the category names as tick labels\nax.set_xticks(index + width / 2)\nax.set_xticklabels(categories, fontsize=10)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set the title of the chart\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios', fontsize=14, fontweight='bold')\n\n# Add grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Chanel', 'Dior', 'Gucci']\nvalues = [5, 3, 9]\n\n# Number of variables\nN = len(categories)\n\n# Convert the categories into radians\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Closing the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Radar Chart')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a title\nax.set_title('Radar Chart Example', size=14, color='darkblue')\n\n# Customize the grid lines\nax.grid(True, color='lightgray', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['TinyLaMA', 'StableLM', 'Phi-2']\nvalues = [85.7, 76.1, 86.4]\ncolors = ['#FF5733', '#33FF57', '#3357FF']\n\n# Number of categories\nN = len(categories)\n\n# Convert category labels into position indices\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], color='b', linewidth=2, linestyle='solid')\nax.fill(angles, values + values[:1], color='b', alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Customize the plot\nax.set_title('POPE', size=16, color='darkblue', y=1.1)\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Versatility', 'Longevity', 'Sillage', 'Projection', 'Value', 'Packaging']\nChanel = [5, 7, 9, 3, 1, 5]\nDior = [3, 5, 7, 1, 7, 3]\nGucci = [1, 3, 5, 7, 9, 1]\n\n# Number of variables and their positions\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Closing the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(18.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plotting the data\nax.plot(angles, Chanel + Chanel[:1], 'b-', linewidth=2, label='Chanel')\nax.fill(angles, Chanel + Chanel[:1], 'b', alpha=0.2)\n\nax.plot(angles, Dior + Dior[:1], 'd-', linewidth=2, label='Dior')\nax.fill(angles, Dior + Dior[:1], 'd', alpha=0.2)\n\nax.plot(angles, Gucci + Gucci[:1], 'g-', linewidth=2, label='Gucci')\nax.fill(angles, Gucci + Gucci[:1], 'g', alpha=0.2)\n\n# Setting the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Adding a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set title\nax.set_title('Perfume Brand Comparison', size=16, weight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Loading PC1', 'Loading PC2']\nvalues = [0.6, 0.4]\n\n# Number of variables\nN = len(categories)\n\n# Convert category labels into position indices\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Loadings')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set the title\nax.set_title('Radar Chart of Loadings', size=14, color='darkblue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Privacy', 'Query Error']\nvalues1 = [3, 2]\nvalues2 = [4, 1]\nvalues3 = [5, 3]\n\n# Number of variables and their positions\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Closing the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot each dataset\nax.plot(angles, values1 + values1[:1], label='Fidelity(D_train)', color='green', linewidth=2, linestyle='-', marker='o')\nax.fill(angles, values1 + values1[:1], alpha=0.25, color='green')\n\nax.plot(angles, values2 + values2[:1], label='Fidelity(D_test)', color='purple', linewidth=2, linestyle='--', marker='s')\nax.fill(angles, values2 + values2[:1], alpha=0.25, color='purple')\n\nax.plot(angles, values3 + values3[:1], label='TVAE', color='blue', linewidth=2, linestyle='-.', marker='^')\nax.fill(angles, values3 + values3[:1], alpha=0.25, color='blue')\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set title\nax.set_title('Radar Chart Comparison', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Baseline', 'Retro(Syn2)', 'Oxidations', 'Reductions', 'Deprotects', 'Acylation and related processes', 'Heteroatom alkylation and arylation', 'Functional group addition, FGA']\nvalues = [35, 45, 60, 75, 90, 80, 70, 60]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Calculate the number of categories and create an array of angles\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the plot\n\n# Plot the data\nax.plot(angles, values + values[:1], color='b', linewidth=2, linestyle='solid')\nax.fill(angles, values + values[:1], color='b', alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Customize the grid lines\nax.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Add a title\nax.set_title('Radar Chart Example', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Model C', 'Model B', 'Model D', 'Model E', 'Model F']\nN = len(categories)\nvalues = [\n    [0.07, 0.03, 0.07, 0.03, 0.07],\n    [0.07, 0.03, 0.07, 0.03, 0.07],\n    [0.07, 0.03, 0.07, 0.03, 0.07],\n    [0.07, 0.03, 0.07, 0.03, 0.07],\n    [0.07, 0.03, 0.07, 0.03, 0.07]\n]\n\n# Convert data to polar coordinates\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Closing the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nfor i, value in enumerate(values):\n    values[i] += values[i][:1]  # Closing the loop\n    ax.plot(angles, values[i], linewidth=1, linestyle='solid', label=f'Model {chr(65 + i)}')\n    ax.fill(angles, values[i], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set the title\nax.set_title('Radar Chart Example', size=14, color='darkblue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['rose', 'candlestick', 'line_num', 'pie', 'bubble', 'radar', 'area', 'funnel', 'box', 'treemap']\nvalues = [3, 4, 2, 1, 5, 3, 2, 4, 1, 3]\nN = len(categories)\n\n# Convert category labels into position on radar chart\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # repeat the first value to close the shape\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Data')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Draw one axe per variable + add labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a grid\nax.grid(True)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Set title\nax.set_title('3D-bar', size=16, color='b')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the radar chart\ncategories = ['Anomaly Detection', 'Short-horizon Forecasting', 'Long-horizon Forecasting']\nvalues = [\n    [0.2, 0.3, 0.4],\n    [0.1, 0.2, 0.3],\n    [0.3, 0.4, 0.5]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Define colors for each category\ncolors = ['#FF6347', '#4682B4', '#FFD700']\n\n# Plot each category with its values\nfor i, (category, value) in enumerate(zip(categories, values)):\n    ax.plot([i, i + 1], [0, value[0]], color=colors[i], linewidth=2)\n    ax.plot([i + 1, i + 2], [value[0], value[1]], color=colors[i], linewidth=2)\n    ax.plot([i + 2, i + 3], [value[1], value[2]], color=colors[i], linewidth=2)\n    ax.plot([i + 3, i], [value[2], 0], color=colors[i], linewidth=2)\n\n# Set the title of the chart\nax.set_title('Imputation', size=14, y=1.05)\n\n# Customize the grid lines\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add labels for each category\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['VQA', 'GQA', 'POPE', 'MM-Vet', 'TextVQA']\nvalues = [72.9, 67.2, 55.4, 56.9, 62.8]\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#FFA500', '#87CEEB']\n\n# Number of categories\nN = len(categories)\n\n# Convert category labels into position indices\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], color='b', linewidth=2, linestyle='solid')\nax.fill(angles, values + values[:1], color='b', alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Customize the grid lines\nax.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Add a title\nax.set_title('Radar Chart Example', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Model-Basedness vs. Various Metrics\nx = np.array([0, 1, 2])\ny1 = np.array([1.5, 1.8, 2.2])\ny2 = np.array([0.9, 1.3, 1.7])\ny3 = np.array([1.2, 1.6, 2.0])\ny4 = np.array([0.8, 1.2, 1.6])\ny5 = np.array([1.1, 1.5, 1.9])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot each dataset with different styles\nax.plot(x, y1, marker='o', linestyle='-', color='b', label='Model-Basedness')\nax.plot(x, y2, marker='s', linestyle='--', color='g', label='Meta-Cognition')\nax.plot(x, y3, marker='^', linestyle='-.', color='r', label='Exploration')\nax.plot(x, y4, marker='D', linestyle=':', color='c', label='Risk Taking')\nax.plot(x, y5, marker='P', linestyle='-', color='m', label='Bayesian Reasoning')\n\n# Set labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Model-Basedness')\nax.set_title('Comparison of Different Metrics Across Various Models')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add a legend to explain the lines\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Pre-training GPU hours and corresponding accuracy\ngpu_hours = np.array([0, 100, 200, 300, 400])\naccuracy = np.array([77, 79, 81, 83, 85])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(gpu_hours, accuracy, marker='o', linestyle='-', color='b', linewidth=2, markersize=8, label='Model Accuracy')\n\n# Set labels with improved font size and style\nax.set_xlabel('Pre-training GPU Hours', fontsize=12, fontweight='bold')\nax.set_ylabel('Accuracy [%]', fontsize=12, fontweight='bold')\n\n# Add a title with a larger font size and style\nax.set_title('ImageNet-1K Linear Probing', fontsize=14, fontweight='bold')\n\n# Customize the grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a slightly larger font size\nax.legend(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Inference Time (seconds) and Average Score\ninference_time = np.array([10, 20, 30, 40, 50, 60])\naverage_score = np.array([0.75, 0.80, 0.70, 0.65, 0.60, 0.55])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nscatter = ax.scatter(inference_time, average_score, c=average_score, cmap='viridis', s=100, edgecolor='k')\n\n# Add a color bar to indicate the scale of the scores\ncbar = plt.colorbar(scatter)\ncbar.set_label('Average Score')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Inference Time (seconds)', fontsize=12, fontweight='bold')\nax.set_ylabel('Average Score', fontsize=12, fontweight='bold')\nax.set_title('Bubble Size: Number of Anomalies Detected', fontsize=14, fontweight='bold')\n\n# Customize grid lines\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Enhance tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of parameters vs Perception Test VQA accuracy\nparameters = [203, 424, 1, 4, 46]\nvqa_accuracy = [50, 55, 40, 45, 42]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data points with enhanced aesthetics\nscatter = ax.scatter(parameters, vqa_accuracy, c=parameters, cmap='viridis', s=100, alpha=0.7)\n\n# Add labels and title\nax.set_xlabel('Number of parameters')\nax.set_ylabel('Perception Test VQA accuracy')\nax.set_title('Number of parameters vs Perception Test VQA accuracy')\n\n# Add a color bar to indicate the scale\ncbar = plt.colorbar(scatter)\ncbar.set_label('Number of parameters')\n\n# Customize grid lines\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Test Case Index and Average Relative Error\ntest_case_index = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\nsingle_lstm_error = np.array([0.08, 0.07, 0.06, 0.05, 0.04])\nensemble_lstm_error = np.array([0.07, 0.06, 0.05, 0.04, 0.03])\ncae_reconstruction_error = np.array([0.06, 0.05, 0.04, 0.03, 0.02])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different markers and line styles\nax.plot(test_case_index, single_lstm_error, marker='^', linestyle='-', color='b', label='Single LSTMs')\nax.plot(test_case_index, ensemble_lstm_error, marker='^', linestyle='--', color='g', label='Ensemble LSTMs')\nax.plot(test_case_index, cae_reconstruction_error, marker='o', linestyle='-.', color='r', label='CAE Reconstruction')\n\n# Set labels and title\nax.set_xlabel('Test Case Index')\nax.set_ylabel('Average Relative Error, u')\nax.set_title('Average Relative Error, u')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend to explain the lines\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\nmajority_accuracies = [0.85, 0.92, 0.78, 0.65, 0.55, 0.45, 0.35, 0.25]\nminority_accuracies = [0.90, 0.88, 0.76, 0.63, 0.53, 0.43, 0.33, 0.23]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data with different markers and colors\nax.plot(classes, majority_accuracies, marker='o', linestyle='-', color='blue', label='Majority')\nax.plot(classes, minority_accuracies, marker='s', linestyle='--', color='red', label='Minority')\n\n# Set labels and title\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Add a legend\nax.legend()\n\n# Set grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set x-axis limits and ticks\nax.set_xlim(-1, len(classes))\nax.set_xticks(range(len(classes)))\nax.set_xticklabels(classes, rotation=45, ha='right')\n\n# Set y-axis limits and ticks\nax.set_ylim(0, 1.1)\nax.set_yticks(np.arange(0, 1.2, 0.2))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Token cost vs. Accuracy and TFLOPs\ntoken_costs = [5, 10, 20, 30, 40, 50]\naccuracy_values = [68, 66, 64, 62, 60, 58]\ntflops_values = [68, 66, 64, 62, 60, 58]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(token_costs, accuracy_values, marker='o', linestyle='-', color='b', label='Accuracy')\nax.plot(token_costs, tflops_values, marker='s', linestyle='--', color='r', label='TFLOPs')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Token cost ($)', fontsize=12, fontweight='bold')\nax.set_ylabel('Values', fontsize=12, fontweight='bold')\nax.set_title('Logic Grid Puzzle (Accuracy versus token cost)', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Carbon Reduction vs Efficiency\nefficiency = np.array([15, 20, 25, 30, 35, 40, 45, 50])\ncarbon_reduction = np.array([5, 10, 15, 20, 25, 30, 35, 40])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced styling\nax.plot(efficiency, carbon_reduction, marker='o', linestyle='-', color='b', linewidth=2, markersize=8, label='Carbon Reduction')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Efficiency (%)', fontsize=12)\nax.set_ylabel('Carbon Reduction (%)', fontsize=12)\nax.set_title('Impact of Efficiency on Carbon Reduction', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(10, 60, 5))\nax.set_yticks(np.arange(0, 50, 5))\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Coordinates of points and their sizes\nx = np.array([-25, -15, -5, 5, 15, 25])\ny = np.array([10, 20, 30, 40, 50, 60])\nsizes = np.array([50, 100, 150, 200, 250, 300])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(9.0, 6.0))\n\n# Plot the data with varying sizes and colors\nscatter = plt.scatter(x, y, s=sizes, c=np.arange(len(x)), cmap='viridis', alpha=0.7)\n\n# Add a color bar to indicate the size of each point\ncbar = plt.colorbar(scatter)\ncbar.set_label('Size')\n\n# Set labels and title\nplt.xlabel('X Coordinate')\nplt.ylabel('Y Coordinate')\nplt.title('Scatter Plot with Varying Sizes')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\ny1 = np.array([90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])\ny2 = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, 'bo-', label='Day 1', markersize=8)\nax.plot(x, y2, 'ro-', label='Day 2', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Time (hours)')\nax.set_ylabel('Temperature (\u00b0C)')\nax.set_title('Temperature Variation Over Time')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Set limits for axes\nax.set_xlim(1, 17)\nax.set_ylim(70, 170)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([2, 4, 6, 8, 10, 12, 14, 16])\ny = np.array([95, 90, 85, 80, 75, 70, 65, 60])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with a scatter plot\nscatter = ax.scatter(x, y, c=y, cmap='viridis', s=100, edgecolor='k')\n\n# Add a color bar to the plot\ncbar = plt.colorbar(scatter)\ncbar.set_label('Y-axis')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Scatter Plot with Color Mapping')\n\n# Set grid lines\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Installed capacity (GW) and Energy output (TWh)\ncapacity = np.array([175, 200, 225, 250, 275, 300])\noutput_solar = np.array([140, 160, 180, 200, 220, 240])\noutput_wind = np.array([150, 170, 190, 210, 230, 250])\noutput_hydro = np.array([160, 180, 200, 220, 240, 260])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data with different styles\nax.plot(capacity, output_solar, label='Solar Energy', color='blue', marker='o', linestyle='-', linewidth=2)\nax.plot(capacity, output_wind, label='Wind Energy', color='red', marker='s', linestyle='--', linewidth=2)\nax.plot(capacity, output_hydro, label='Hydropower', color='gray', marker='^', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Installed Capacity (GW)', fontsize=12)\nax.set_ylabel('Energy Output (TWh)', fontsize=12)\nax.set_title('Energy Production Trends', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set y-axis limits\nax.set_ylim(140, 260)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the scatter plot\nx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90])\ny = np.array([20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with a scatter plot\nscatter = ax.scatter(x, y, c=y, cmap='viridis', s=100, alpha=0.7)\n\n# Add a color bar to the plot\ncbar = plt.colorbar(scatter)\ncbar.set_label('Intensity')\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Scatter Plot with Colorbar')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx1 = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\n\nx2 = [2, 3, 4, 5, 6, 7, 8]\ny2 = [0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the first dataset with a blue line and markers\nax.plot(x1, y1, label='LibriCSS WER', color='blue', marker='o', linestyle='-', linewidth=2, markersize=8)\n\n# Plot the second dataset with a red line and markers\nax.plot(x2, y2, label='AMI WER', color='red', marker='s', linestyle='--', linewidth=2, markersize=8)\n\n# Set labels for axes\nax.set_xlabel('Number of Microphones', fontsize=12)\nax.set_ylabel('WER (%)', fontsize=12)\n\n# Set title of the plot\nax.set_title('LibriCSS vs Additional Data 1 vs AMI vs Additional Data 2', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance comparison of different models\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'claude-2', 'claude-1', 'text-bison@002', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nexploration_values = [0.85, 0.9, 0.88, 0.92, 0.87, 0.91, 0.89, 0.93, 0.94, 0.86]\nrisk_taking_values = [0.15, 0.1, 0.12, 0.08, 0.13, 0.09, 0.11, 0.07, 0.06, 0.14]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(exploration_values, label='Exploration', marker='o', linestyle='-', color='green', linewidth=2, markersize=8)\nax.plot(risk_taking_values, label='Risk Taking', marker='s', linestyle='--', color='red', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Models', fontsize=12, fontweight='bold')\nax.set_ylabel('Value', fontsize=12, fontweight='bold')\nax.set_title('Performance Comparison', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks and tick labels\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\nax.set_yticks(np.arange(0.0, 1.1, 0.1))\nax.set_yticklabels([f'{i:.1f}' for i in np.arange(0.0, 1.1, 0.1)], fontsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nmodels = ['Model-Basedness', 'Meta-Cognition', 'Exploration', 'Risk-Taking']\ngpt4_scores = [1.75, 1.65, 1.25, 1.15]\nmptb_scores = [1.65, 1.55, 1.35, 1.25]\nlma270b_scores = [1.55, 1.45, 1.25, 1.15]\ndavinci40b_scores = [1.45, 1.35, 1.15, 1.05]\nclade2_scores = [1.35, 1.25, 1.05, 0.95]\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), constrained_layout=True)\n\n# Plotting the first subplot: Model-Basedness vs Meta-Cognition\naxes[0, 0].plot(models, gpt4_scores, label='GPT-4', marker='o', linestyle='-', color='blue')\naxes[0, 0].plot(models, mptb_scores, label='MPT-B', marker='s', linestyle='--', color='green')\naxes[0, 0].plot(models, lma270b_scores, label='LMA2-70B', marker='^', linestyle='-.', color='red')\naxes[0, 0].plot(models, davinci40b_scores, label='Davinci-40B', marker='p', linestyle=':', color='purple')\naxes[0, 0].plot(models, clade2_scores, label='Claude-2', marker='h', linestyle='-', color='orange')\n\n# Set labels and title for the first subplot\naxes[0, 0].set_xlabel('Models')\naxes[0, 0].set_ylabel('Score')\naxes[0, 0].set_title('Model-Basedness vs Meta-Cognition')\naxes[0, 0].legend()\n\n# Plotting the second subplot: Exploration vs Risk-Taking\naxes[0, 1].plot(models, gpt4_scores, label='GPT-4', marker='o', linestyle='-', color='green')\naxes[0, 1].plot(models, mptb_scores, label='MPT-B', marker='s', linestyle='--', color='red')\naxes[0, 1].plot(models, lma270b_scores, label='LMA2-70B', marker='^', linestyle='-.', color='purple')\naxes[0, 1].plot(models, davinci40b_scores, label='Davinci-40B', marker='p', linestyle=':', color='orange')\naxes[0, 1].plot(models, clade2_scores, label='Claude-2', marker='h', linestyle='-', color='blue')\n\n# Set labels and title for the second subplot\naxes[0, 1].set_xlabel('Models')\naxes[0, 1].set_ylabel('Score')\naxes[0, 1].set_title('Exploration vs Risk-Taking')\naxes[0, 1].legend()\n\n# Plotting the third subplot: Model-Basedness vs Risk-Taking\naxes[1, 0].plot(models, gpt4_scores, label='GPT-4', marker='o', linestyle='-', color='red')\naxes[1, 0].plot(models, mptb_scores, label='MPT-B', marker='s', linestyle='--', color='green')\naxes[1, 0].plot(models, lma270b_scores, label='LMA2-70B', marker='^', linestyle='-.', color='purple')\naxes[1, 0].plot(models, davinci40b_scores, label='Davinci-40B', marker='p', linestyle=':', color='orange')\naxes[1, 0].plot(models, clade2_scores, label='Claude-2', marker='h', linestyle='-', color='blue')\n\n# Set labels and title for the third subplot\naxes[1, 0].set_xlabel('Models')\naxes[1, 0].set_ylabel('Score')\naxes[1, 0].set_title('Model-Basedness vs Risk-Taking')\naxes[1, 0].legend()\n\n# Plotting the fourth subplot: Exploration vs Meta-Cognition\naxes[1, 1].plot(models, gpt4_scores, label='GPT-4', marker='o', linestyle='-', color='green')\naxes[1, 1].plot(models, mptb_scores, label='MPT-B', marker='s', linestyle='--', color='red')\naxes[1, 1].plot(models, lma270b_scores, label='LMA2-70B', marker='^', linestyle='-.', color='purple')\naxes[1, 1].plot(models, davinci40b_scores, label='Davinci-40B', marker='p', linestyle=':', color='orange')\naxes[1, 1].plot(models, clade2_scores, label='Claude-2', marker='h', linestyle='-', color='blue')\n\n# Set labels and title for the fourth subplot\naxes[1, 1].set_xlabel('Models')\naxes[1, 1].set_ylabel('Score')\naxes[1, 1].set_title('Exploration vs Meta-Cognition')\naxes[1, 1].legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for three scatter plots\nx1 = np.array([70, 80, 90])\ny1 = np.array([30, 25, 40])\n\nx2 = np.array([70, 80, 90])\ny2 = np.array([20, 15, 30])\n\nx3 = np.array([70, 80, 90])\ny3 = np.array([10, 5, 20])\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Plot the first scatter plot\naxes[0].scatter(x1, y1, color='purple', label='Scatter Plot - deepskyblue')\naxes[0].set_title('Scatter Plot - deepskyblue')\naxes[0].set_xlabel('X Values')\naxes[0].set_ylabel('Y Values')\naxes[0].set_xlim(60, 100)\naxes[0].set_ylim(20, 50)\naxes[0].legend()\n\n# Plot the second scatter plot\naxes[1].scatter(x2, y2, color='orange', label='Scatter Plot - magenta')\naxes[1].set_title('Scatter Plot - magenta')\naxes[1].set_xlabel('X Values')\naxes[1].set_ylabel('Y Values')\naxes[1].set_xlim(60, 100)\naxes[1].set_ylim(10, 40)\naxes[1].legend()\n\n# Plot the third scatter plot\naxes[2].scatter(x3, y3, color='green', label='Scatter Plot - limegreen')\naxes[2].set_title('Scatter Plot - limegreen')\naxes[2].set_xlabel('X Values')\naxes[2].set_ylabel('Y Values')\naxes[2].set_xlim(60, 100)\naxes[2].set_ylim(5, 30)\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average Precision and ViT Pose for different models\nx = np.array([70, 72, 74, 76, 78, 80, 82, 84, 86, 88])\ny1 = np.array([30, 35, 40, 45, 50, 48, 46, 44, 42, 40])  # ViT Pose (sc)\ny2 = np.array([32, 37, 42, 47, 52, 50, 48, 46, 44, 42])  # ViT Pose (ft)\ny3 = np.array([27, 32, 37, 42, 47, 45, 43, 41, 39, 37])  # VLPose\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='ViT Pose (sc)', color='purple', marker='o', linestyle='-', linewidth=2, markersize=8)\nax.plot(x, y2, label='ViT Pose (ft)', color='orange', marker='s', linestyle='--', linewidth=2, markersize=8)\nax.plot(x, y3, label='VLPose', color='green', marker='^', linestyle='-.', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Average Precision on MSCOCO (%)', fontsize=12)\nax.set_ylabel('Average Precision on HumanArt (%)', fontsize=12)\nax.set_title('ViT Pose (sc) Performance', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(70, 90, 2))\nax.set_yticks(np.arange(25, 55, 5))\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Diversity vs. Accuracy\ndiversity = np.array([1.2, 1.4, 1.6, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0])\naccuracy = np.array([75, 65, 55, 85, 70, 60, 50, 40, 30, 20, 10, 5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nscatter = ax.scatter(diversity, accuracy, c=accuracy, cmap='viridis', s=100, alpha=0.7)\n\n# Add a color bar to indicate the scale of the data\ncbar = plt.colorbar(scatter)\ncbar.set_label('Accuracy (%)')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Diversity', fontsize=12, fontweight='bold')\nax.set_ylabel('Accuracy (%)', fontsize=12, fontweight='bold')\nax.set_title('Diversity vs. Accuracy', fontsize=14, fontweight='bold')\n\n# Customize grid lines\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data points\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\n\n# Plot the data points with different colors and markers\nax.scatter(x, y, c=['red', 'green', 'blue', 'yellow', 'cyan', 'magenta', 'orange', 'purple', 'pink', 'brown'], marker='o', s=100)\n\n# Set labels for the axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set a title for the plot\nax.set_title('Scatter Plot Example')\n\n# Add grid lines for better readability\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: WRMSE vs BPP for different models\nwrmse = np.array([800, 700, 600, 500, 400, 300, 200])\nbpp = np.array([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(bpp, wrmse, 'bo-', label='SIREN', linewidth=2, markersize=8)\nax.plot(bpp, wrmse * 0.9, 'co--', label='WIRE', linewidth=2, markersize=8)\nax.plot(bpp, wrmse * 0.8, 'ro-.', label='FFN', linewidth=2, markersize=8)\nax.plot(bpp, wrmse * 0.7, 'go:', label='SZ3', linewidth=2, markersize=8)\nax.plot(bpp, wrmse * 0.6, 'mo-', label='NNComp', linewidth=2, markersize=8)\nax.plot(bpp, wrmse * 0.5, 'yo--', label='Ours', linewidth=2, markersize=8)\n\n# Set labels and title\nax.set_xlabel('Bit per pixel (BPP)', fontsize=12)\nax.set_ylabel('WRMSE', fontsize=12)\nax.set_title('Scatter Plot of WRMSE vs BPP', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define data points for three different conditions\nx1 = np.random.rand(50)\ny1 = np.random.rand(50)\nx2 = np.random.rand(30)\ny2 = np.random.rand(30)\nx3 = np.random.rand(70)\ny3 = np.random.rand(70)\n\n# Plot the data points with different colors and markers\nax.scatter(x1, y1, color='orange', label='Daytime Sunny')\nax.scatter(x2, y2, color='blue', label='Night Rainy')\nax.scatter(x3, y3, color='green', label='PGST')\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Scatter Plot of Different Conditions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of parameters vs NMAE on QM9\nx = np.array([0.5, 1.0, 2.0, 3.0, 4.0, 5.0])  # Number of parameters (M)\ny = np.array([1.2, 1.8, 2.5, 3.0, 3.5, 4.0])  # NMAE on QM9\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 3.0))\n\n# Plot the data with enhanced styling\nplt.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\n\n# Add labels and title with improved font sizes\nplt.xlabel('Number of Parameters (M)', fontsize=12)\nplt.ylabel('NMAE on QM9', fontsize=12)\nplt.title('Number of Parameters vs NMAE on QM9', fontsize=14)\n\n# Customize the grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nplt.xlim(0, 6)\nplt.ylim(0, 5)\n\n# Add a legend with a custom location\nplt.legend(['Data Points'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: two sets of points with different characteristics\nx1 = np.random.normal(0, 0.5, 100)\ny1 = np.random.normal(0, 0.5, 100)\n\nx2 = np.random.normal(0.5, 0.3, 100)\ny2 = np.random.normal(0.5, 0.3, 100)\n\nx3 = np.random.normal(1, 0.2, 100)\ny3 = np.random.normal(1, 0.2, 100)\n\n# Create a new figure with a specified size\nplt.figure(figsize=(8.0, 8.0))\n\n# Plot the data with different styles and colors\nplt.scatter(x1, y1, color='blue', label='ar', marker='o', s=50, alpha=0.7)\nplt.scatter(x2, y2, color='pink', label='de', marker='s', s=50, alpha=0.7)\nplt.scatter(x3, y3, color='green', label='fr', marker='^', s=50, alpha=0.7)\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.6)\n\n# Set axis limits\nplt.xlim(-1, 2)\nplt.ylim(-1, 2)\n\n# Add labels and title\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.title('Scatter Plot of Two Datasets')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: KCA Similarity vs. MSE and PJM\nkca_similarity = np.array([0.6, 0.7, 0.8, 0.9, 1.0])\nmse = np.array([0.52, 0.54, 0.56, 0.58, 0.60])\npjm = np.array([0.53, 0.55, 0.57, 0.59, 0.61])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Plot the data with different markers and colors\nax.scatter(kca_similarity, mse, color='green', marker='o', label='MSE')\nax.scatter(kca_similarity, pjm, color='blue', marker='s', label='PJM')\n\n# Set labels and title\nax.set_xlabel('KCA Similarity', fontsize=12)\nax.set_ylabel('Measurements', fontsize=12)\nax.set_title('Comparison of MSE and PJM', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Physics Forums', 'gmatclub.com', 'MathHelpBoards.com', 'MathOverflow.net', 'StackExchange.com', 'MathHelpForum.com']\nsizes = [18.42, 6.26, 6.15, 10.91, 30.6, 14.21]\ncolors = ['#87CEEB', '#FFD700', '#FF6347', '#FFA500', '#ADD8E6', '#90EE90']\nexplode = (0.1, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart with customized parameters\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', startangle=140, textprops=dict(color=\"w\"))\n\n# Add a title to the chart\nax.set_title('Pie Chart of Website Popularity', fontsize=16, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Java', 'Python', 'JavaScript', 'C++', 'Other']\nsizes = [10, 20, 27, 23, 8]\ncolors = ['#9467bd', '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', startangle=140, textprops=dict(color=\"w\"))\n\n# Add a title to the chart\nax.set_title('Programming Language Usage Distribution', fontsize=16, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Adidas', 'Nike', 'Reebok', 'Puma']\nsizes = [13.42, 30.6, 10.91, 14.21]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart with customized features\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Market Share of Various Brands', fontsize=16, fontweight='bold')\n\n# Customize text properties\nfor text in texts:\n    text.set_fontsize(12)\nfor autotext in autotexts:\n    autotext.set_fontsize(12)\n    autotext.set_color('white')\n\n# Add a legend\nplt.legend(wedges, labels, title=\"Brands\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [50, 15, 20, 5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Plot the bar chart with customized colors and edge colors\nbars = ax.bar(categories, values, color=['#FF9A9E', '#FFC75F', '#88D8B0', '#AED6F1'], edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved styling\nax.set_title('Bar Chart Example', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values (%)', fontsize=12)\n\n# Customize the x-axis tick labels\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nsizes = [15, 18, 10, 12, 25, 20]\nlabels = ['European', 'Australian', 'South American', 'African', 'Asian', 'North American']\ncolors = ['#FFD700', '#ADD8E6', '#90EE90', '#FF6347', '#FFB6C1', '#87CEEB']\nexplode = (0.1, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Global Population Distribution by Region')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Logarithmic values of PCL (Pain Catastrophizing Level)\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([2.5, 3.5, 4.5, 5.5, 6.5])  # Logarithmic values for Llama2\ny2 = np.array([2.0, 3.0, 4.0, 5.0, 6.0])  # Logarithmic values for Llama2 (In-Chat)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with error bars\nax.errorbar(x, y1, yerr=0.2, fmt='o-', color='b', label='Llama2')\nax.errorbar(x, y2, yerr=0.2, fmt='s-', color='r', label='Llama2 (In-Chat)')\n\n# Set labels and title\nax.set_xlabel('Number of Examples')\nax.set_ylabel('LogPCL')\nax.set_title('Comparison of LogPCL for Different Models')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Efficiency scores for two conditions (Without Memory and With Memory)\nefficiency_scores = np.array([\n    [0.5, 0.7],\n    [0.3, 0.4],\n    [0.8, 0.9],\n    [0.2, 0.3],\n    [0.6, 0.7]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different colors and markers\nax.plot(efficiency_scores[:, 0], label='Without Memory', color='blue', marker='o')\nax.plot(efficiency_scores[:, 1], label='With Memory', color='orange', marker='s')\n\n# Set labels and title\nax.set_xlabel('Time Steps')\nax.set_ylabel('Efficiency Score')\nax.set_title('Comparison of Scores with and without Memory')\n\n# Add grid lines for better readability\nax.grid(True)\n\n# Add a legend to differentiate between the two conditions\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Efficiency, Comfort, Safety scores for two conditions (Without Memory and With Memory)\nefficiency = [0.3, 0.4, 0.5]\ncomfort = [0.2, 0.3, 0.4]\nsafety = [0.1, 0.2, 0.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF']\n\n# Plot the bars with different colors and add labels\nax.bar(range(len(efficiency)), efficiency, color=colors[0], label='Without Memory')\nax.bar(range(len(comfort)), comfort, bottom=efficiency, color=colors[1], label='With Memory')\n\n# Add labels for the x-axis\nax.set_xticks(range(len(efficiency)))\nax.set_xticklabels(['Efficiency', 'Comfort', 'Safety'])\n\n# Set labels for the y-axis\nax.set_ylabel('Score')\n\n# Add a title\nax.set_title('Comparison of Scores with and without Memory')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Length distribution of two different types of plants\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([0.3, 0.4, 0.5, 0.6, 0.7])  # Length distribution for GPT-4V(Version)\ny2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6])  # Length distribution for Gemini\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y1, marker='o', linestyle='-', color='green', label='GPT-4V(Version)', linewidth=2, markersize=8)\nax.plot(x, y2, marker='s', linestyle='--', color='orange', label='Gemini', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Plant Age (Days)', fontsize=12, fontweight='bold')\nax.set_ylabel('Length Distribution', fontsize=12, fontweight='bold')\nax.set_title('Comparison of Plant Length Distribution', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10, frameon=True, shadow=True)\n\n# Set x and y axis limits\nax.set_xlim(0, 6)\nax.set_ylim(0, 0.8)\n\n# Enhance tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different models\nmodels = ['jTrans', 'PalmTree', 'CLAP']\naccuracies = [0.75, 0.85, 0.92]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data with error bars\nax.errorbar(models, accuracies, yerr=0.1, fmt='o-', capsize=5, color='b', ecolor='gray', elinewidth=2, markeredgewidth=2)\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: A hypothetical dataset representing some kind of performance metrics over time\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(-x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles and add markers\nax.plot(x, y1, label='Teacher-Style', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5, markerfacecolor='yellow')\nax.plot(x, y2, label='Standardize', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5, markerfacecolor='yellow')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Time', fontsize=12)\nax.set_ylabel('Performance', fontsize=12)\nax.set_title('Comparison of Teaching Styles', fontsize=14)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', shadow=True, fontsize=10)\n\n# Customize the tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Category A', 'Category B', 'Category C']\nvalues1 = [55, 70, 85]\nvalues2 = [60, 75, 90]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different colors and styles\nbars1 = ax.bar(categories, values1, color='pink', label='Dataset 1')\nbars2 = ax.bar(categories, values2, bottom=values1, color='lightblue', label='Dataset 2')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Two Datasets')\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Annotate each bar with its value\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, int(yval), ha='center', va='bottom')\n\nfor bar in bars2:\n    yval = bar.get_height() + values1[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, int(yval), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of features vs. % Decrease in Test MSE vs. FLAM-GL and EBM-RS\nx = np.array([2, 4, 6, 8, 10])\ny1 = np.array([163, 201, 176, 159, 97])\ny2 = np.array([97, 201, 176, 159, 97])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Group l0', color='blue', marker='o', linestyle='-', linewidth=2)\nax.plot(x, y2, label='AGIS', color='orange', marker='s', linestyle='--', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Number of Features')\nax.set_ylabel('% Decrease in Test MSE vs. FLAM-GL and EBM-RS')\nax.set_title('Comparison of % Decrease in Test MSE')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Set x and y limits\nax.set_xlim(1, 11)\nax.set_ylim(0, 700)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: correlation coefficients and p-values for different conditions\nconditions = ['Raw', '125Hz', '50Hz', '25Hz', '10Hz']\ncorrelation_coefficients = [0.18, 0.19, 0.19, 0.18, 0.16]\np_values = [3.33, 3.33, 10.67, 16.95, 29.10]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data using a scatter plot\nscatter = ax.scatter(correlation_coefficients, p_values, c=correlation_coefficients, cmap='viridis', s=100, alpha=0.7)\n\n# Add labels and title\nax.set_xlabel('Pearson R')\nax.set_ylabel('EER (%)')\nax.set_title('Correlation between Decimated Sampling Rate and EER')\n\n# Add a color bar to indicate the correlation coefficient\ncbar = plt.colorbar(scatter)\ncbar.set_label('Correlation Coefficient')\n\n# Annotate each point with its condition\nfor i, txt in enumerate(conditions):\n    ax.annotate(txt, (correlation_coefficients[i], p_values[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set limits for x and y axes\nax.set_xlim(0, 0.2)\nax.set_ylim(0, 30)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata_boys_class1 = np.array([50, 60, 70, 80, 90, 100])\ndata_girls_class1 = np.array([40, 50, 60, 70, 80, 90])\n\ndata_boys_class2 = np.array([60, 70, 80, 90, 100, 110])\ndata_girls_class2 = np.array([50, 60, 70, 80, 90, 100])\n\ndata_boys_class3 = np.array([70, 80, 90, 100, 110, 120])\ndata_girls_class3 = np.array([60, 70, 80, 90, 100, 110])\n\ndata_boys_class4 = np.array([80, 90, 100, 110, 120, 130])\ndata_girls_class4 = np.array([70, 80, 90, 100, 110, 120])\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 8.0), constrained_layout=True)\n\n# Plot 1: Distribution of Grades: Class 1\naxes[0, 0].bar(data_boys_class1, data_girls_class1, color='skyblue', edgecolor='black')\naxes[0, 0].set_title('Distribution of Grades: Class 1')\naxes[0, 0].set_xlabel('Boys')\naxes[0, 0].set_ylabel('Girls')\n\n# Plot 2: Distribution of Grades: Class 2\naxes[0, 1].bar(data_boys_class2, data_girls_class2, color='lightgreen', edgecolor='black')\naxes[0, 1].set_title('Distribution of Grades: Class 2')\naxes[0, 1].set_xlabel('Boys')\naxes[0, 1].set_ylabel('Girls')\n\n# Plot 3: Distribution of Grades: Class 3\naxes[1, 0].bar(data_boys_class3, data_girls_class3, color='lightcoral', edgecolor='black')\naxes[1, 0].set_title('Distribution of Grades: Class 3')\naxes[1, 0].set_xlabel('Boys')\naxes[1, 0].set_ylabel('Girls')\n\n# Plot 4: Distribution of Grades: Class 4\naxes[1, 1].bar(data_boys_class4, data_girls_class4, color='lightskyblue', edgecolor='black')\naxes[1, 1].set_title('Distribution of Grades: Class 4')\naxes[1, 1].set_xlabel('Boys')\naxes[1, 1].set_ylabel('Girls')\n\n# Set a common title for the entire figure\nfig.suptitle('Distribution of Grades by Class and Gender', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
