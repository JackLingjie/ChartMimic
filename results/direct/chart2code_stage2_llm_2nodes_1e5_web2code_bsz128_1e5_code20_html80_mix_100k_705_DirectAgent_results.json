{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points\nx = np.linspace(0, 10, 10)\ny_targets = [1.2, 1.1, 1.3, 1.4, 1.2, 1.1, 1.3, 1.4, 1.2, 1.1]\ny_predictions = [1.1, 1.2, 1.3, 1.4, 1.2, 1.1, 1.3, 1.4, 1.2, 1.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data\nax.plot(x, y_targets, 'o-', label='Targets', color='orange')\nax.plot(x, y_predictions, 'o-', label='Predictions', color='blue')\n\n# Set the title and labels\nax.set_title('Targets vs Predictions')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 1.5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\nheights = [1.0, 2.0, 2.5, 3.0]\ncounts = [4, 3, 3, 2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(heights, counts, color='red')\n\n# Set the title and labels\nax.set_title('Bar Chart of Counts by Height')\nax.set_xlabel('Height')\nax.set_ylabel('Count')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the range for x and y\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the z values (constant in this case)\nZ = np.zeros_like(X) + 14\n\n# Plot the surface\nax.contourf(X, Y, Z, cmap='viridis')\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Contour Plot of a Constant Function')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = [-4, -2, 0, 2, 4]\ny = [10, 15, 20, 25, 30]\n\n# Plot the data points\nax.plot(x, y, 'ro')  # Red circles for data points\n\n# Draw a line connecting the data points\nax.plot(x, y, 'b-')  # Blue line for the fit line\n\n# Set labels and title\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_title('Volume vs Temperature and Pressure')\n\n# Set the limits for the x-axis\nax.set_xlim(-5, 5)\n\n# Set the limits for the y-axis\nax.set_ylim(-10, 40)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nyears = ['2010', '2012', '2014', '2016', '2018']\nprivate_schools = [0.75, 0.75, 0.75, 0.75, 0.75]\npublic_schools = [0.3, 0.3, 0.3, 0.3, 0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bars for private schools\nax.bar(years, private_schools, color='orange', label='Private Schools')\n\n# Plot the bars for public schools\nax.bar(years, public_schools, color='blue', label='Public Schools')\n\n# Set the title and labels\nax.set_title('Student to Teacher Ratio')\nax.set_xlabel('Year')\nax.set_ylabel('Student to Teacher Ratio')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax1 = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the first subplot\nyears = ['2010', '2012', '2014', '2016', '2018']\ninvestment = [5, 3, 7, 4, 2]\nsector = ['Al', 'CS']\n\n# Plot the data\nbars = ax1.bar(years, investment, color='blue')\nax1.set_xlabel('Year')\nax1.set_ylabel('Investment (Billion USD)', color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\n\n# Create a second y-axis for the second subplot\nax2 = ax1.twinx()\nax2.set_ylabel('Sector', color='red')\nax2.tick_params(axis='y', labelcolor='red')\n\n# Add text annotations for the sectors\nfor i, v in enumerate(sector):\n    ax2.text(i, max(investment) + 0.5, v, color='red', ha='center')\n\n# Set the title of the first subplot\nax1.set_title('Investment (Billion USD) vs Year')\n\n# Create a figure and axis for the second subplot\nfig, ax3 = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the second subplot\ntime_since_introduction = [0, 2, 4, 6, 8, 10]\ntechnology_level = [0.5, 0.3, 0.7, 0.4, 0.8, 0.9]\nadoption_rate = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\n\n# Plot the data\nax3.plot(time_since_introduction, technology_level, label='Technology Level', color='blue')\nax3.plot(time_since_introduction, adoption_rate, label='Adoption Rate', color='red')\nax3.set_xlabel('Time Since Introduction (Years)')\nax3.set_ylabel('Technology Level / Adoption Rate')\nax3.legend()\n\n# Set the title of the second subplot\nax3.set_title('Technology Level and Adoption Rate Over Time')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots side by side\nfig, axes = plt.subplots(1, 2, figsize=(10, 7))\n\n# Define the range for x and y values\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function f(x, y) = x^2 + y^2\nZ = X**2 + Y**2\n\n# Plot the first subplot\naxes[0].contourf(X, Y, Z, cmap='viridis')\naxes[0].set_title('f(x)')\naxes[0].set_xlabel('x')\naxes[0].set_ylabel('y')\n\n# Define the function solution(x, y) = x^2 + y^2\nsolution_Z = X**2 + Y**2\n\n# Plot the second subplot\naxes[1].contourf(X, Y, solution_Z, cmap='viridis')\naxes[1].set_title('solution')\naxes[1].set_xlabel('x')\naxes[1].set_ylabel('y')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(1, 6, 100)\ny = np.linspace(1, 1.8, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the surface\nsurf = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surf, ax=ax)\ncbar.set_label('Accuracy (%)')\n\n# Set labels and title\nax.set_xlabel('t')\nax.set_ylabel('tau')\nax.set_title('CIFAR10 Spiking ResNet18 T = 6')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure with a specified size\nfig = plt.figure(figsize=(15.0, 10.0))\n\n# Define the data for the plots\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the first subplot\nax1 = fig.add_subplot(2, 2, 1, projection='3d')\nax1.plot_surface(x, y, z, cmap='viridis')\nax1.set_xlabel('m')\nax1.set_ylabel('n')\nax1.set_zlabel('FREEDOM')\nax1.set_title('Origin')\n\n# Plot the second subplot\nax2 = fig.add_subplot(2, 2, 2, projection='3d')\nax2.plot_surface(x, y, z, cmap='viridis')\nax2.set_xlabel('m')\nax2.set_ylabel('n')\nax2.set_zlabel('FREEDOM')\nax2.set_title('MG (ours)')\n\n# Plot the third subplot\nax3 = fig.add_subplot(2, 2, 3, projection='3d')\nax3.plot_surface(x, y, z, cmap='viridis')\nax3.set_xlabel('m')\nax3.set_ylabel('n')\nax3.set_zlabel('FREEDOM')\nax3.set_title('Origin')\n\n# Plot the fourth subplot\nax4 = fig.add_subplot(2, 2, 4, projection='3d')\nax4.plot_surface(x, y, z, cmap='viridis')\nax4.set_xlabel('m')\nax4.set_ylabel('n')\nax4.set_zlabel('FREEDOM')\nax4.set_title('MG (ours)')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Define the data points\nx = np.linspace(0, 1, 10)\ny = np.linspace(0, 1, 10)\n\n# Plot the data points\nax.plot(x, y, 'o')\n\n# Set the title and labels\nax.set_title('Targets')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the limits for the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the grid for the plot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function Z\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the surface\nsurface = ax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Add a colorbar\ncbar = fig.colorbar(surface)\ncbar.set_label('Value')\n\n# Set labels and title\nax.set_xlabel('Bus')\nax.set_ylabel('Time')\nax.set_title('Contour Plot of Z')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for the bar chart\nx = [1, 2, 3, 4]\ny = [6, 7, 8, 9]\n\n# Create a bar chart with specified colors and edge colors\nbars = ax.bar(x, y, color=['orange', 'green', 'brown', 'red'], edgecolor='black')\n\n# Set the title of the chart\nax.set_title('Bar Chart')\n\n# Set the x-axis label\nax.set_xlabel('X Axis')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis')\n\n# Set the x-axis limits\nax.set_xlim(0, 5)\n\n# Set the y-axis limits\nax.set_ylim(0, 13)\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(bars[0], ax=ax)\ncbar.set_label('Colorbar Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([-20, -30, -40, -50, -60])\n\n# Plot the data points\nax.plot(x, y, 'ro')\n\n# Set the labels for the axes\nax.set_xlabel('Age')\nax.set_ylabel('Income')\n\n# Set the title of the plot\nax.set_title('Scatter Plot of Age vs Income')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 60)\n\n# Set the limits for the y-axis\nax.set_ylim(-70, 0)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\ntime = np.array([10, 20, 30, 40, 50])\ntemperature = np.array([15, 25, 35, 40, 50])\ndepth = np.array([-20, -30, -40, -50, -60])\n\n# Plot the data points\nax.plot(time, depth, 'r-')\nax.plot(time, depth + 10, 'b-')\nax.plot(time, depth + 20, 'g-')\n\n# Set the labels for the axes\nax.set_xlabel('Time (s)')\nax.set_ylabel('Depth (m)')\n\n# Set the title of the plot\nax.set_title('Depth vs Time')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 60)\n\n# Set the limits for the y-axis\nax.set_ylim(-70, 0)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data for the blue histogram\nblue_data = [0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\n\n# Define the data for the red histogram\nred_data = [0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\n\n# Create histograms with different colors\nax.hist(blue_data, bins=10, color='blue', alpha=0.5, label='Out')\nax.hist(red_data, bins=10, color='red', alpha=0.5, label='In')\n\n# Set the title and labels\nax.set_title('Histograms of Out and In')\nax.set_xlabel('Density')\nax.set_ylabel('LR Test')\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.2)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='--')\n\n# Add a horizontal line at y=0.06\nax.axhline(y=0.06, color='blue', linestyle='--')\n\n# Add a horizontal line at y=0.08\nax.axhline(y=0.08, color='red', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data points\nx = [150, 200, 250, 300, 350, 400]\ny_low = [-2, -2, -2, -2, -2, -2]\ny_middle = [-3, -3, -3, -3, -3, -3]\ny_high = [-4, -4, -4, -4, -4, -4]\n\n# Plot the data points\nax.plot(x, y_low, 'bo', label='Low')\nax.plot(x, y_middle, 'o', color='orange', label='Middle')\nax.plot(x, y_high, 'go', label='High')\n\n# Set the title and labels\nax.set_title('Severity')\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data points\nx = np.linspace(-3, -2.5, 10)\ny1 = np.logspace(0.5, 0.5, 10)\ny2 = np.logspace(0.5, 0.5, 10)\ny3 = np.logspace(0.5, 0.5, 10)\ny4 = np.logspace(0.5, 0.5, 10)\n\n# Plot the data points\nax.plot(x, y1, 'b', label='8x')\nax.plot(x, y2, 'o', label='4x')\nax.plot(x, y3, 'g', label='2x')\nax.plot(x, y4, 'r', label='1x')\n\n# Set the title and labels\nax.set_title('Log (Depth L1)')\nax.set_xlabel('Log (ATE RMSE)')\nax.set_ylabel('Log (Depth L1)')\n\n# Set the limits for the x-axis\nax.set_xlim(-3, -2.5)\n\n# Set the limits for the y-axis\nax.set_ylim(-3, 0.5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny1 = [5, 4, 3, 2, 1]\ny2 = [4, 3, 2, 1, 0.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='Benign')\nax.plot(x, y2, 'g-', label='BadNets')\n\n# Set the title and labels\nax.set_title('T-test p-value = 0.0000')\nax.set_xlabel('Avg Top-5 Persistence of 1D')\nax.set_ylabel('Density')\n\n# Set the y-axis limits\nax.set_ylim(0, 5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\n\"\"\"\nimport matplotlib.pyplot as plt\n\n# Define the data for plotting\ndata = [\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.6, 0.6, 0.6, 0.6, 0.6],\n    [0.5, 0.5, 0.5, 0.5, 0.5],\n    [0.4, 0.4, 0.4, 0.4, 0.4],\n    [0.3, 0.3, 0.3, 0.3, 0.3]\n]\n\n# Define the labels for the x-axis\nx_labels = ['snakes', 'navigate', 'question_selection', 'object_counting']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor i in range(len(data)):\n    ax.plot(x_labels, data[i], label=f'Label {i+1}')\n\n# Set the title of the plot\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n\"\"\"\n\n# The provided code snippet is a template for creating a bar chart using matplotlib in Python. It includes the necessary imports, data definition, and basic setup for the plot. The code is designed to be easily customizable and can be used as a starting point for creating various types of plots in Python.\n\n# The code snippet is written in a way that is easy to understand and modify. It uses clear variable names and follows best practices for Python programming. The code is also well-commented, making it easy for others to understand the purpose of each part of the code.\n\n# The code snippet is designed to be used in a Jupyter Notebook or any other Python environment that supports matplotlib. It is a great example of how to create a simple and effective plot using Python.\n\n# The code snippet is a good starting point for anyone looking to create a bar chart in Python using matplotlib. It provides a solid foundation for further customization and exploration of the library's capabilities.\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\n\"\"\"\n=====================================\nSummarization of xsum: temperature=0.3, device=cuda\n=====================================\n\nThis is a summary of the data for a specific device and temperature setting. The data is presented in a bar chart format, with the x-axis representing the norm size and the y-axis representing the count. The chart includes two different selectors, \"H-wand - centers-cos\" and \"random\", each represented by a different color.\n\nThe chart shows a clear pattern of data distribution, with the \"H-wand - centers-cos\" selector having a higher count at lower norm sizes and a gradual decrease as the norm size increases. The \"random\" selector, on the other hand, has a more uniform distribution of counts across all norm sizes.\n\nThe chart also includes a legend that distinguishes between the two selectors. The legend is located at the top left corner of the chart, and it provides a visual representation of the colors used for each selector.\n\nThe chart is designed to provide a quick overview of the data distribution for the specified device and temperature setting, allowing users to quickly identify trends and patterns in the data.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data for the chart\nnorm_sizes = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ncounts_h_wand = [50, 40, 30, 20, 10, 5, 3, 1]\ncounts_random = [70, 60, 50, 40, 30, 20, 10, 5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(norm_sizes, counts_h_wand, color='blue', label='H-wand - centers-cos')\nax.bar(norm_sizes, counts_random, color='pink', label='random')\n\n# Set the title and labels\nax.set_title('Summarization of xsum: temperature=0.3, device=cuda')\nax.set_xlabel('norm size')\nax.set_ylabel('count')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\n\"\"\"\nSolved by OpenAI's AI language model.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define data\nlabels = ['Incomparable', 'Different', 'Same']\nsizes = [73.3, 23.7, 3.0]\ncolors = ['green', 'blue', 'yellow']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data for the plot\ndata = [\n    [49, 48, 46, 47],\n    [49, 48, 46, 47],\n    [49, 48, 46, 47],\n    [49, 48, 46, 47],\n    [49, 48, 46, 47]\n]\n\n# Plot the data\nfor i in range(len(data)):\n    ax.plot(range(1, len(data[i]) + 1), data[i], 'o')\n\n# Set the title and labels\nax.set_title('Time Cost (Seconds)')\nax.set_xlabel('Algorithms')\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the y-axis limits\nax.set_ylim(45, 52)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nmethods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\nscores = [63.64, 80.08, 84.27, 90.11]\n\n# Data for the second chart\nf1_methods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\nf1_scores = [75.00, 87.20, 88.00, 93.89]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the first chart\naxes[0].bar(methods, scores, color='lightblue')\naxes[0].set_title('Average Recall Scores by Method')\naxes[0].set_xlabel('Method')\naxes[0].set_ylabel('Scores')\n\n# Plot the second chart\naxes[1].bar(f1_methods, f1_scores, color='lightblue')\naxes[1].set_title('Average F1 Scores by Method')\naxes[1].set_xlabel('Method')\naxes[1].set_ylabel('Scores')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [4, 8, 12, 16, 20, 24, 28, 32]\ny1 = [84, 86, 88, 90, 92, 94, 96, 96]\ny2 = [84, 86, 88, 90, 92, 94, 96, 96]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Plot the data\nax.plot(x, y1, label='Trained w Few-Shot Ex', color='blue')\nax.plot(x, y2, label='Def Deduce+Ex Gen', color='red')\n\n# Set the title and labels\nax.set_title('Micro F1')\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\n\n# Add a legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(82, 96)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [60, 62, 65, 70, 75]\ny_cars = [60, 62, 65, 70, 75]\ny_trucks = [60, 62, 65, 70, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data\nax.plot(x, y_cars, 'r-', label='Cars')\nax.plot(x, y_trucks, 'b-', label='Trucks')\n\n# Set the title and labels\nax.set_title('Vehicle Efficiency vs. Vehicle Parameter Size')\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\n\n# Set the y-axis limits\nax.set_ylim(50, 85)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: Encoding/Decoding Schelling Points by Model\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsimple_trend = [0, 6, 16, 20, 12, 10]\nsimple = [0, 6, 12, 20, 12, 10]\ncomplex_ = [0, 4, 8, 18, 26, 20]\ncode = [0, 4, 4, 10, 12, 4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nax.bar(models, simple_trend, color='purple', label='Simple Trend')\nax.bar(models, simple, color='red', label='Simple')\nax.bar(models, complex_, color='orange', label='Complex')\nax.bar(models, code, color='pink', label='Code')\n\n# Set title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data points\nx = [0.0, 0.25, 0.5, 0.75, 1.0]\ny_subgroups = [0.0, 0.3, 0.4, 0.8, 1.0]\ny_calibration_curve = [0.0, 0.2, 0.3, 0.7, 1.0]\n\n# Plot the data points\nax.plot(x, y_subgroups, 'o', label='Subgroups')\nax.plot(x, y_calibration_curve, 'ro-', label='Calibration curve')\n\n# Set the title and labels\nax.set_title('Fraction of Positives vs. Reduced Probability')\nax.set_xlabel('Reduced probability')\nax.set_ylabel('Fraction of positives')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Define the data for the bar chart\nx = np.array([-6, -4, -2, 0, 2, 4])\ny = np.array([1, 1, 1, 1, 1, 1])\n\n# Plot the bar chart\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Model')\nax.set_xlabel('ACC')\nax.set_ylabel('Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nx1 = [1600, 1625, 1650, 1675, 1700, 1725]\ny1 = [0.005, 0.005, 0.005, 0.005, 0.005, 0.005]\n\n# Data for the second plot\nx2 = [205, 210, 215]\ny2 = [0.125, 0.125, 0.125]\n\n# Data for the third plot\nx3 = [48, 49, 50, 51, 52]\ny3 = [0.6, 0.6, 0.6, 0.6, 0.6]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot 1\naxes[0, 0].bar(x1, y1, color='blue')\naxes[0, 0].set_title('Total')\naxes[0, 0].set_xlabel('Daily reward (Ether)')\naxes[0, 0].set_ylabel('Probability')\n\n# Plot 2\naxes[0, 1].bar(x2, y2, color='red')\naxes[0, 1].set_title('Proposer')\naxes[0, 1].set_xlabel('Daily reward (Ether)')\naxes[0, 1].set_ylabel('Probability')\n\n# Plot 3\naxes[1, 0].bar(x3, y3, color='green')\naxes[1, 0].set_title('Attestor')\naxes[1, 0].set_xlabel('Daily reward (Ether)')\naxes[1, 0].set_ylabel('Probability')\n\n# Plot 4\naxes[1, 1].bar(x3, y3, color='yellow')\naxes[1, 1].set_title('Sync committee member')\naxes[1, 1].set_xlabel('Daily reward (Ether)')\naxes[1, 1].set_ylabel('Probability')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 50, 100, 150]\ny1 = [1.30, 1.27, 1.28, 1.29]\ny2 = [1.30, 1.27, 1.28, 1.29]\ny3 = [1.30, 1.27, 1.28, 1.29]\ny4 = [1.30, 1.27, 1.28, 1.29]\ny5 = [1.30, 1.27, 1.28, 1.29]\ny6 = [1.30, 1.27, 1.28, 1.29]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='LlaSMol Lite')\nax.plot(x, y2, 'b-', label='LlaSMol FFN')\nax.plot(x, y3, 'r-', label='LlaSMol Lite')\nax.plot(x, y4, 'b-', label='LlaSMol FFN')\nax.plot(x, y5, 'r-', label='LlaSMol Lite')\nax.plot(x, y6, 'b-', label='LlaSMol FFN')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\n\n# Set the y-axis limits\nax.set_ylim(1.15, 1.30)\n\n# Set the x-axis ticks\nax.set_xticks([0, 50, 100, 150])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plots\nx = [40, 60, 80, 100, 120, 140, 160]\ny1 = [0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03]\ny2 = [0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06]\ny3 = [0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09]\n\n# Plot the data\nax.plot(x, y1, 'r-', label='D0')\nax.plot(x, y2, 'o-', label='D1')\nax.plot(x, y3, 'b-', label='D2')\n\n# Set the title and labels\nax.set_title('Distribution of Data')\nax.set_xlabel('Execution Duration (clock)')\nax.set_ylabel('Distribution')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.1)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data points\nx = [15, 20, 30, 40, 50, 60]\ny_petriRL = [18, 14, 13, 12, 12, 18]\ny_GAM = [14, 13, 12, 12, 12, 14]\ny_GIN = [13, 13, 12, 12, 12, 13]\ny_DGERD = [12, 12, 12, 12, 12, 12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot data\nax.plot(x, y_petriRL, label='PetriRL', color='green')\nax.plot(x, y_GAM, label='GAM', color='orange')\nax.plot(x, y_GIN, label='GIN', color='blue')\nax.plot(x, y_DGERD, label='DGERD', color='purple')\n\n# Set labels and title\nax.set_xlabel('Instance size (step)')\nax.set_ylabel('Makespan (step)')\nax.set_title('Comparison of Methods')\n\n# Set y-axis limits\nax.set_ylim(0, 6000)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the y-axis limits\nax.set_ylim(-1, 4)\n\n# Define the data for the plot\ndata = [\n    [3.2, 2.8, 2.5, 2.3, 2.1],\n    [3.1, 2.9, 2.6, 2.4, 2.2]\n]\n\n# Define the labels for the bars\nlabels = ['SEAC', 'CTCO']\n\n# Define the colors for the bars\ncolors = ['green', 'orange']\n\n# Plot the data\nfor i, (x, y) in enumerate(zip(labels, data)):\n    ax.bar(x, y, color=colors[i], align='center', alpha=0.7)\n\n# Set the x-axis tick labels\nax.set_xticks(labels)\n\n# Set the y-axis tick labels\nax.set_yticks([0, 1, 2, 3, 4])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\nprices = [95, 85, 75, 65]\nmedians = [90, 80, 70, 60]\n\n# Plot the data\nax.plot(brands, prices, marker='o', linestyle='-', color='black')\nax.plot(brands, medians, marker='o', linestyle='-', color='red')\n\n# Set the title and labels\nax.set_title('Brand Prices and Medians')\nax.set_xlabel('Brands')\nax.set_ylabel('Prices')\n\n# Set the y-axis limits\nax.set_ylim(40, 120)\n\n# Add stars at specific positions\nstars = [(0, 95), (1, 85), (2, 75), (3, 65)]\nfor i, (x, y) in enumerate(stars):\n    ax.text(x, y, '*', ha='center', va='center', color='red')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the bar chart\nbar_data = [1900, 1925, 1950, 1975]\nbar_labels = ['Early 20th Century', 'Mid 20th Century', 'Turn of the Century', 'Year']\n\n# Plot the bar chart\nax.bar(bar_labels, bar_data, color='blue')\n\n# Set the title and labels\nax.set_title('Era')\nax.set_xlabel('Density')\nax.set_ylabel('Year')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/notebooks/autogalaxy/examples/plotting/plotting.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar charts\ndata_2013 = [\n    [20, 10, 40, 30, 60, 90],\n    [10, 40, 30, 60, 90],\n    [30, 60, 90],\n    [70, 100, 180, 250, 300, 400],\n    [50, 100, 150, 200, 250, 300, 400],\n    [90, 150, 200, 250, 300, 400],\n    [100, 150, 200, 250, 300, 400],\n    [100, 150, 200, 250, 300, 400],\n    [100, 150, 200, 250, 300, 400],\n    [100, 150, 200, 250, 300, 400]\n]\n\ndata_2022 = [\n    [90, 50, 100, 150, 200, 250, 300, 400, 500],\n    [90, 50, 100, 150, 200, 250, 300, 400, 500],\n    [90, 50, 100, 150, 200, 250, 300, 400, 500],\n    [90, 50, 100, 150, 200, 250, 300, 400, 500],\n    [90, 50, 100, 150, 200, 250, 300, 400, 500],\n    [90, 50, 100, 150, 200, 250, 300, 400, 500],\n    [90, 50, 100, 150, 200, 250, 300, 400, 500],\n    [90, 50, 100, 150, 200, 250, 300, 400, 500],\n    [90, 50, 100, 150, 200, 250, 300, 400, 500],\n    [90, 50, 100, 150, 200, 250, 300, 400, 500]\n]\n\n# Define the labels for the bars\nlabels = ['Nano', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'Al']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bar charts\nfor i in range(len(data_2013)):\n    ax.bar(labels[i], data_2013[i], color='blue')\n    ax.bar(labels[i], data_2022[i], color='red')\n\n# Set the title and labels\nax.set_title('Patent Filings in 2013 and 2022')\nax.set_xlabel('Technology')\nax.set_ylabel('Number of Patents')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data points\nx = np.linspace(0, 1, 100)\ny_data_points = np.random.normal(0.5, 0.1, 100)\ny_bin_edges = np.random.normal(0.5, 0.1, 100)\ny_calibration_curve = np.random.normal(0.5, 0.1, 100)\n\n# Plot the data points\nax.plot(x, y_data_points, 'ro', label='Data points')\nax.plot(x, y_bin_edges, 'go', label='Bin edges')\nax.plot(x, y_calibration_curve, 'bo', label='Calibration curve')\n\n# Set the title and labels\nax.set_title('Fraction of positives vs Predicted probability')\nax.set_xlabel('Predicted probability')\nax.set_ylabel('Fraction of positives')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add a color bar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('Color bar label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define data points\nx = [1, 2, 3, 4]\ny1 = [350, 300, 250, 200]\ny2 = [300, 250, 200, 150]\ny3 = [250, 200, 150, 100]\ny4 = [200, 150, 100, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Tesla', color='green')\nax.plot(x, y2, label='Benz', color='orange')\nax.plot(x, y3, label='BYD', color='blue')\nax.plot(x, y4, label='Porsche', color='purple')\n\n# Set the title and labels\nax.set_title('Earnings ($1000s)')\nax.set_xlabel('Quarter')\nax.set_ylabel('Earnings ($1000s)')\n\n# Set the tick labels\nax.set_xticks(x)\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4'])\n\n# Set the y-axis limits\nax.set_ylim(0, 400)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data\ncategories = ['Linear probing', 'BitFit', 'Prompt Tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\nvalues = [\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.25, 0.75, 0.75, 0.75, 0.75, 0.75]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nfor i, category in enumerate(categories):\n    ax.bar(category, values[i], color='blue')\n\n# Set labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Performance Metrics')\n\n# Set y-axis limits\nax.set_ylim(0, 80)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Seq-ident')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the line width of the grid lines\nax.grid(linewidth=0.5)\n\n# Set the line style of the grid lines\nax.grid(linestyle='--')\n\n# Set the line color of the grid lines\nax.grid(color='gray')\n\n# Set the font size of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the font size of the title\nax.title.set_fontsize(12)\n\n# Set the font size of the x-axis label\nax.xaxis.label.set_fontsize(12)\n\n# Set the font size of the y-axis label\nax.yaxis.label.set_fontsize(12)\n\n# Set the font size of the x-axis tick labels\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], fontsize=10)\n\n# Set the font size of the y-axis tick labels\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'], fontsize=10)\n\n# Set the font size of the legend\nax.legend(fontsize=10)\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations\nax.text(0.5, 0.5, 'Text Annotation', fontsize=10, ha='center', va='center')\n\n# Set the font size of the text annotations"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Relative Cluster Size')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Define the data points\nx = [25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45]\ny_teenagers = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\ny_children = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\ny_adults = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\n\n# Plot the data points\nax.plot(x, y_teenagers, 'r.', label='teenagers')\nax.plot(x, y_children, 'g.', label='children')\nax.plot(x, y_adults, 'b.', label='adults')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 99.9, 96.0, 92.3, 90.9, 90.9, 91.3, 92.5, 93.3, 93.3, 96.0, 98.7, 98.7, 98.7, 98.7, 98.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data points\nax.plot(x, y, 'bo-')\n\n# Set the title and labels\nax.set_title('Plot of HC_first vs HC_first')\nax.set_xlabel('HC_first (before aging)')\nax.set_ylabel('HC_first (after aging)')\n\n# Set the y-axis limits\nax.set_ylim(0, 128)\n\n# Set the x-axis limits\nax.set_xlim(0, 128)\n\n# Set the tick marks for the y-axis\nax.set_yticks(range(0, 130, 10))\n\n# Set the tick marks for the x-axis\nax.set_xticks(range(0, 130, 10))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for the plot\nx = np.linspace(0.2, 1.0, 9)\ny = np.linspace(0.1, 0.6, 6)\nx, y = np.meshgrid(x, y)\n\n# Create a colormap\ncmap = plt.cm.Blues\n\n# Plot the heatmap\nheatmap = ax.pcolormesh(x, y, np.random.rand(6, 9), cmap=cmap, shading='auto')\n\n# Add a colorbar\ncbar = fig.colorbar(heatmap, ax=ax)\n\n# Set the title and labels\nax.set_title('Heatmap')\nax.set_xlabel('TMScore')\nax.set_ylabel('Sequence ID')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [4211, 2411, 2141, 1124]\ny1 = [0.9628, 0.9604, 0.9624, 0.9592]\ny2 = [0.9624, 0.9604, 0.9624, 0.9561]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='Sum (SRCC + PLCC)')\nax.bar(x, y2, color=['blue', 'green', 'blue', 'green'])\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Set the y-axis limits\nax.set_ylim(-1926, -1916)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\n\"\"\"\nGenerated by http://arraydrawing.com\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = [\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176],\n    [176, "}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points\nx = np.linspace(-10, 10, 400)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue', label='SINDy')\n\n# Set the title and labels\nax.set_title('Compact Spiral with Elliptical Hollow Center')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the limits for the x and y axes\nax.set_xlim(-10, 10)\nax.set_ylim(-7.5, 7.5)\n\n# Set the tick marks\nax.set_xticks(np.arange(-10, 11, 2))\nax.set_yticks(np.arange(-7.5, 7.6, 2.5))\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10**-1, 10**0, 10**1]\ny1 = [10**11, 10**11, 10**11]\ny2 = [10**10, 10**10, 10**10]\ny3 = [10**9, 10**9, 10**9]\ny4 = [10**8, 10**8, 10**8]\ny5 = [10**7, 10**7, 10**7]\ny6 = [10**6, 10**6, 10**6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, label='explicit, random')\nax.plot(x, y2, label='explicit, block size 10')\nax.plot(x, y3, label='explicit, block size 100')\nax.plot(x, y4, label='implicit, random')\nax.plot(x, y5, label='implicit, block size 10')\nax.plot(x, y6, label='implicit, block size 100')\n\n# Set the title and labels\nax.set_title('DAXPY memory bandwidth')\nax.set_xlabel('Flops/byte')\nax.set_ylabel('Flows/s')\n\n# Set the y-axis limits\nax.set_ylim(10**10, 10**12)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['satisfy constraints', 'no severe errors', 'lengthy', 'contain rich info', 'no moderate errors', 'grammatically correct', 'no minor errors', 'clear', 'non-repetitive', 'support stances', '19 other features']\nvalues = [0.76, 0.18, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add labels and title\nplt.xlabel('f(x)')\nplt.ylabel('f(x)')\nplt.title('Bar Chart of f(x) Values')\n\n# Set the y-axis limits\nplt.ylim(0.45, 0.75)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\ncigar_r_data = [24, 45, 8]\nlabels = ['CigaR', 'ChatRepair']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.pie(cigar_r_data, labels=labels, startangle=90, colors=['pink', 'orange', 'green'], wedgeprops=dict(width=0.3))\n\n# Set the title of the plot\nax.set_title('CigaR vs ChatRepair')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\n\"\"\"\n=====================================\nQwen-VL-Max\n=====================================\n\nThis example demonstrates how to create a polar plot with multiple levels and colors.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\ndata = {\n    'Gemin Pro-CoT': [25, 15, 10, 5, 3],\n    'GPT4V-CoT': [28, 18, 13, 8, 6],\n    'Gemini Pro': [22, 12, 7, 2, 1]\n}\nlevels = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\ncolors = ['red', 'blue', 'green', 'purple', 'orange']\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(6.0, 6.0))\n\n# Plot each level with its corresponding color\nfor i, (level, values) in enumerate(data.items()):\n    ax.bar(np.arange(len(values)) * (2 * np.pi / len(values)), values, width=2 * np.pi / len(values), bottom=0, color=colors[i], label=level)\n\n# Set the title of the plot\nax.set_title('Qwen-VL-Max')\n\n# Set the labels for the levels\nax.set_xticks(np.arange(len(levels)) * (2 * np.pi / len(levels)))\nax.set_xticklabels(levels)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data\nx = np.logspace(1, 2, 10)\ny1 = 10 ** (-np.arange(1, 9))\ny2 = 10 ** (-np.arange(1, 9))\ny3 = 10 ** (-np.arange(1, 9))\ny4 = 10 ** (-np.arange(1, 9))\ny5 = 10 ** (-np.arange(1, 9))\ny6 = 10 ** (-np.arange(1, 9))\ny7 = 10 ** (-np.arange(1, 9))\ny8 = 10 ** (-np.arange(1, 9))\ny9 = 10 ** (-np.arange(1, 9))\ny10 = 10 ** (-np.arange(1, 9))\ny11 = 10 ** (-np.arange(1, 9))\ny12 = 10 ** (-np.arange(1, 9))\ny13 = 10 ** (-np.arange(1, 9))\ny14 = 10 ** (-np.arange(1, 9))\ny15 = 10 ** (-np.arange(1, 9))\ny16 = 10 ** (-np.arange(1, 9))\ny17 = 10 ** (-np.arange(1, 9))\ny18 = 10 ** (-np.arange(1, 9))\ny19 = 10 ** (-np.arange(1, 9))\ny20 = 10 ** (-np.arange(1, 9))\ny21 = 10 ** (-np.arange(1, 9))\ny22 = 10 ** (-np.arange(1, 9))\ny23 = 10 ** (-np.arange(1, 9))\ny24 = 10 ** (-np.arange(1, 9))\ny25 = 10 ** (-np.arange(1, 9))\ny26 = 10 ** (-np.arange(1, 9))\ny27 = 10 ** (-np.arange(1, 9))\ny28 = 10 ** (-np.arange(1, 9))\ny29 = 10 ** (-np.arange(1, 9))\ny30 = 10 ** (-np.arange(1, 9))\ny31 = 10 ** (-np.arange(1, 9))\ny32 = 10 ** (-np.arange(1, 9))\ny33 = 10 ** (-np.arange(1, 9))\ny34 = 10 ** (-np.arange(1, 9))\ny35 = 10 ** (-np.arange(1, 9))\ny36 = 10 ** (-np.arange(1, 9))\ny37 = 10 ** (-np.arange(1, 9))\ny38 = 10 ** (-np.arange(1, 9))\ny39 = 10 ** (-np.arange(1, 9))\ny40 = 10 ** (-np.arange(1, 9))\ny41 = 10 ** (-np.arange(1, 9))\ny42 = 10 ** (-np.arange(1, 9))\ny43 = 10 ** (-np.arange(1, 9))\ny44 = 10 ** (-np.arange(1, 9))\ny45 = 10 ** (-np.arange(1, 9))\ny46 = 10 ** (-np.arange(1, 9))\ny47 = 10 ** (-np.arange(1, 9))\ny48 = 10 ** (-np.arange(1, 9))\ny49 = 10 ** (-np.arange(1, 9))\ny50 = 10 ** (-np.arange(1, 9))\ny51 = 10 ** (-np.arange(1, 9))\ny52 = 10 ** (-np.arange(1, 9))\ny53 = 10 ** (-np.arange(1, 9))\ny54 = 10 ** (-np.arange(1, 9))\ny55 = 10 ** (-np.arange(1, 9))\ny56 = 10 ** (-np.arange(1, 9))\ny57 = 10 ** (-np.arange(1, 9))\ny58 = 10 ** (-np.arange(1, 9))\ny59 = 10 ** (-np.arange(1, 9))\ny60 = 10 ** (-np.arange(1, 9))\ny61 = 10 ** (-np.arange(1, 9))\ny62 = 10 ** (-np.arange(1, 9))\ny63 = 10 ** (-np.arange(1, 9))\ny64 = 10 ** (-np.arange(1, 9))\ny65 = 10 ** (-np.arange(1, 9))\ny66 = 10 ** (-np.arange(1, 9))\ny67 = 10 ** (-np.arange(1, 9))\ny68 = 10 ** (-np.arange(1, 9))\ny69 = 10 ** (-np.arange(1, 9))\ny70 = 10 ** (-np.arange(1, 9))\ny71 = 10 ** (-np.arange(1, 9))\ny72 = 10 ** (-np.arange(1, 9))\ny73 = 10 ** (-np.arange(1, 9))\ny74 = 10 ** (-np.arange(1, 9))\ny75 = 10 ** (-np.arange(1, 9))\ny76 = 10 ** (-np.arange(1, 9))\ny77 = 10 ** (-np.arange(1, 9))\ny78 = 10 ** (-np.arange(1, 9))\ny79 = 10 ** (-np.arange(1, 9))\ny80 = 10 ** (-np.arange(1, 9))\ny81 = 10 ** (-np.arange(1, 9))\ny82 = 10 ** (-np.arange(1, 9))\ny83 = 10 ** (-np.arange(1, 9))\ny84 = 10 ** (-np.arange(1, 9))\ny85 = 10 ** (-np.arange(1, 9))\ny86 = 10 ** (-np.arange(1, 9))\ny87 = 10 ** (-np.arange(1, 9))\ny88 = 10 ** (-np.arange(1, 9))\ny89 = 10 ** (-np.arange(1, 9))\ny90 = 10 ** (-np.arange(1, 9))\ny91 = 10 ** (-np.arange(1, 9))\ny92 = 10 ** (-np.arange(1, 9))\ny93 = 10 ** (-np.arange(1, 9))\ny94 = 10 ** (-np.arange(1, 9))\ny95 = 10 ** (-np.arange(1, 9))\ny96 = 10 ** (-np.arange(1, 9))\ny97 = 10 ** (-np.arange(1, 9))\ny98 = 10 ** (-np.arange(1, 9))\ny99 = 10 ** (-np.arange(1, 9))\ny100 = 10 ** (-np.arange(1, 9))\n\n# Plot the data\nax.plot(x, y1, 'p', color='purple')\nax.plot(x, y2, 'p', color='pink')\nax.plot(x, y3, 'p', color='red')\nax.plot(x, y4, 'p', color='orange')\nax.plot(x, y5, 'p', color='yellow')\nax.plot(x, y6, 'p', color='green')\nax.plot(x, y7, 'p', color='cyan')\nax.plot(x, y8, 'p', color='magenta')\nax.plot(x, y9, 'p', color='brown')\nax.plot(x, y10, 'p', color='gray')\nax.plot(x, y11, 'p', color='black')\n\n# Set labels and title\nax.set_xlabel('number of matvecs m')\nax.set_ylabel('approximation error ||A - \\u03B1\\u03BB\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1\\u03B1"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'En.QA', 'Retrive.PassKey']\nsizes = [150, 100, 75, 50, 25]\ncolors = ['lightgreen', 'lightskyblue', 'lavender', 'gold', 'orange']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0, 20, 40, 60, 80, 100, 120, 140]\ny1 = [3, 3, 3, 3, 3, 3, 3, 3]\ny2 = [2, 2, 2, 2, 2, 2, 2, 2]\ny3 = [1, 1, 1, 1, 1, 1, 1, 1]\ny4 = [0, 0, 0, 0, 0, 0, 0, 0]\ny5 = [-1, -1, -1, -1, -1, -1, -1, -1]\ny6 = [-2, -2, -2, -2, -2, -2, -2, -2]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Plot the data with specified colors and labels\nax.plot(x, y1, color='green', label='Green')\nax.plot(x, y2, color='orange', label='Orange')\nax.plot(x, y3, color='blue', label='Blue')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Add a legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(-4, 4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = [0, 1, 2, 3, 4, 5, 6]\ny = [3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title of the chart\nplt.title('Urgency in Thermal Conductivity Measurements')\n\n# Set the labels for the x and y axes\nplt.xlabel('Sample Number')\nplt.ylabel('Thermal Conductivity (W/m.K)')\n\n# Set the tick marks on the y-axis\nplt.yticks([1.5, 2, 2.5, 3, 3.5, 4, 4.5])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5]\ny1 = [28, 20, 26, 20, 10]\ny2 = [35, 30, 20, 25, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the data\nax.plot(x, y1, label='Player A', color='black')\nax.plot(x, y2, label='Player B', color='green')\n\n# Set the title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Set the x-axis limits\nax.set_xlim(0, 6)\n\n# Set the y-axis limits\nax.set_ylim(0, 40)\n\n# Set the tick marks\nax.set_yticks(range(0, 41, 10))\nax.set_xticks(range(1, 6))\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for Variable 1\nvariable_1 = np.linspace(-6, 6, 100)\nvariable_2 = np.linspace(-4, 4, 100)\n\n# Create a meshgrid for the variables\nX, Y = np.meshgrid(variable_1, variable_2)\n\n# Define the function for Z\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the contour plot\ncontour = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contour, ax=ax, orientation='vertical')\ncbar.set_label('Time')\n\n# Set the title of the plot\nax.set_title('Contour Plot of Variable 2 over Variable 1')\n\n# Set the labels for the axes\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart using matplotlib to represent data related to different player types and their average amount sent values.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nplayer_types = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nfemale_player_values = [5.7, 6.0, 5.2, 5.7]\nmale_player_values = [6.2, 6.2, 5.2, 6.0]\nllm_player_values = [7.8, 7.5, 7.6, 7.4]\nperson_player_values = [7.0, 7.0, 6.9, 6.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the x-axis positions\nx = range(len(player_types))\n\n# Plot the bars for each player type\nax.bar(x, female_player_values, color='pink', label='Female Player')\nax.bar(x, male_player_values, bottom=female_player_values, color='blue', label='Male Player')\nax.bar(x, llm_player_values, bottom=[sum(values) for values in zip(female_player_values, male_player_values)], color='green', label='LLM Player')\nax.bar(x, person_player_values, bottom=[sum(values) for values in zip(female_player_values, male_player_values, llm_player_values)], color='cyan', label='Person Player')\n\n# Set the x-axis labels\nax.set_xticks(x)\nax.set_xticklabels(player_types)\n\n# Set the y-axis label\nax.set_ylabel('Average Amount Sent ($)')\n\n# Set the title of the plot\nax.set_title('Player Types vs Average Amount Sent')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\n\"\"\"\n===========================\nEndurance Race Performance Analysis\n===========================\n\nThis script generates a bar chart to analyze the performance of two athletes during a race, considering different conditions such as running, interrupted due to weather, rest, and running again.\n\nThe chart includes two categories: Athlete Jim and Athlete Bill. Each category has four bars representing different time intervals since the start of the race. The bars are colored differently to represent the conditions under which the athletes were running.\n\nThe chart also includes a legend that explains the colors used in the chart. The legend is placed at the bottom of the chart.\n\nThe chart is designed to be visually appealing and informative, providing a clear representation of the performance data for each athlete under different conditions.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data for the chart\ncategories = ['Athlete Jim', 'Athlete Bill']\ntime_intervals = [0, 25, 50, 75]\nrunning_times = [130, 140, 160, 170]\ninterrupted_times = [120, 125, 130, 135]\nrest_times = [100, 110, 120, 130]\nrunning_again_times = [150, 160, 170, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the bars for each category\nax.bar([i + 0.2 for i in range(len(categories))], running_times, width=0.2, color='green', label='Running')\nax.bar([i + 0.4 for i in range(len(categories))], interrupted_times, width=0.2, color='red', label='Interrupted')\nax.bar([i + 0.6 for i in range(len(categories))], rest_times, width=0.2, color='orange', label='Rest')\nax.bar([i + 0.8 for i in range(len(categories))], running_again_times, width=0.2, color='green', label='Running2')\n\n# Set the x-axis labels\nax.set_xticks([i + 0.5 for i in range(len(categories))])\nax.set_xticklabels(categories)\n\n# Set the y-axis label\nax.set_ylabel('Seconds Since Start')\n\n# Set the title of the chart\nax.set_title('Endurance Race Performance Analysis')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(7, 5))\n\n# Define data for each subplot\ndata1 = [4, 5, 6, 7, 8]\ndata2 = [3, 4, 5, 6, 7]\ndata3 = [2, 3, 4, 5, 6]\n\n# Plot data on each subplot\naxes[0].bar(range(len(data1)), data1, color='green')\naxes[1].bar(range(len(data2)), data2, color='red')\naxes[2].bar(range(len(data3)), data3, color='orange')\n\n# Set titles for each subplot\naxes[0].set_title('Control Group')\naxes[1].set_title('Treatment Group 1')\naxes[2].set_title('Treatment Group 2')\n\n# Set labels for the x-axis\nfor ax in axes:\n    ax.set_xlabel('Number of Observations')\n    ax.set_ylabel('Value Range')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data points for the bar chart\nx = [-150, -120, -100, -75, -50, -30]\ny = [350, 200, 100, 75, 50, 25]\n\n# Create a bar chart with the specified data\nplt.bar(x, y, color='green')\n\n# Set the title of the chart\nplt.title('Waterfall Chart')\n\n# Set the x-axis label\nplt.xlabel('X-axis Label')\n\n# Set the y-axis label\nplt.ylabel('Y-axis Label')\n\n# Set the tick labels for the x-axis\nplt.xticks([-150, -120, -100, -75, -50, -30], ['350', '200', '100', '75', '50', '25'])\n\n# Set the tick labels for the y-axis\nplt.yticks([1000, 900, 800, 700, 600, 500, 400, 300, 200, 100])\n\n# Set the figure size\nfig = plt.gcf()\nfig.set_size_inches(8.0, 5.0)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the distance from the center\nR = np.sqrt(X**2 + Y**2)\n\n# Define the function value\nZ = np.sin(np.pi * R) / (np.pi * R)\n\n# Create a color map\ncmap = plt.get_cmap('coolwarm')\n\n# Plot the image\nplt.imshow(Z, extent=[-1, 1, -1, 1], origin='lower', cmap=cmap, aspect='auto')\n\n# Add a color bar\ncbar = plt.colorbar()\ncbar.set_label('Color Bar Label')\n\n# Set the title\nplt.title('tripcolor of Delaunay triangulation, flat shading')\n\n# Set the x and y axis labels\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\n\n# Set the figure size\nplt.figure(figsize=(8.0, 6.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\n\"\"\"\nGenerated by runml.py\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with a specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define the data for the first subplot\ndata1 = np.random.rand(5, 5)\ndata1[2, 2] = 0\n\n# Define the data for the second subplot\ndata2 = np.random.rand(5, 5)\n\n# Define the data for the third subplot\ndata3 = np.random.rand(5, 5)\ndata3[2, 2] = 0\n\n# Define the data for the fourth subplot\ndata4 = np.random.rand(5, 5)\n\n# Create subplots\nax1 = fig.add_subplot(2, 2, 1)\nax2 = fig.add_subplot(2, 2, 2)\nax3 = fig.add_subplot(2, 2, 3)\nax4 = fig.add_subplot(2, 2, 4)\n\n# Plot the data on each subplot\ncax1 = ax1.matshow(data1, cmap='hot', interpolation='nearest')\ncax2 = ax2.matshow(data2, cmap='hot', interpolation='nearest')\ncax3 = ax3.imshow(data3, cmap='hot', interpolation='nearest')\ncax4 = ax4.imshow(data4, cmap='hot', interpolation='nearest')\n\n# Set the colorbar for the first subplot\nfig.colorbar(cax1, ax=ax1)\n\n# Set the colorbar for the second subplot\nfig.colorbar(cax2, ax=ax2)\n\n# Set the colorbar for the third subplot\nfig.colorbar(cax3, ax=ax3)\n\n# Set the colorbar for the fourth subplot\nfig.colorbar(cax4, ax=ax4)\n\n# Set the title of the figure\nfig.suptitle('NonUniformImage class')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [\n    [500, 500, 500, 500, 500, 500, 500, 500, 500],\n    [400, 400, 400, 400, 400, 400, 400, 400, 400],\n    [300, 300, 300, 300, 300, 300, 300, 300, 300],\n    [200, 200, 200, 200, 200, 200, 200, 200, 200],\n    [100, 100, 100, 100, 100, 100, 100, 100, 100]\n]\n\n# Data for the second graph\nx2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny2 = [\n    [500, 500, 500, 500, 500, 500, 500, 500, 500],\n    [400, 400, 400, 400, 400, 400, 400, 400, 400],\n    [300, 300, 300, 300, 300, 300, 300, 300, 300],\n    [200, 200, 200, 200, 200, 200, 200, 200, 200],\n    [100, 100, 100, 100, 100, 100, 100, 100, 100]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first graph\nfor i in range(len(y1)):\n    axes[0].bar(x1, y1[i], color='blue')\n\n# Plot the second graph\nfor i in range(len(y2)):\n    axes[1].bar(x2, y2[i], color='red')\n\n# Set titles and labels\naxes[0].set_title('Flickr30k')\naxes[1].set_title('MS-COCO')\naxes[0].set_xlabel('Number of bits')\naxes[1].set_xlabel('Number of bits')\naxes[0].set_ylabel('Recall sum')\naxes[1].set_ylabel('Recall sum')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x(m)')\n\n# Set the y-axis label\nax.set_ylabel('y(m)')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 25)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 30)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 5, 10, 15, 20, 25])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the circle's radius\nradius = 1\n\n# Generate points on the circle\ntheta = np.linspace(0, 2 * np.pi, 100)\nx = radius * np.cos(theta)\ny = radius * np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, 'b.')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of values for alpha and beta\nalpha = np.linspace(0, 2, 100)\nbeta = np.linspace(0, 2, 100)\nalpha_grid, beta_grid = np.meshgrid(alpha, beta)\n\n# Define a function to calculate delta_t\ndef delta_t(alpha, beta):\n    return np.sin(alpha) * np.cos(beta)\n\n# Calculate delta_t for each point in the grid\ndelta_t_grid = delta_t(alpha_grid, beta_grid)\n\n# Create a color map for the plot\ncmap = plt.cm.viridis\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 7))\n\n# Plot the delta_t grid with a color map\ncax = ax.pcolormesh(alpha_grid, beta_grid, delta_t_grid, cmap=cmap, shading='auto')\n\n# Add a color bar to the plot\ncbar = fig.colorbar(cax)\ncbar.set_label('\u0394t')\n\n# Set labels for the axes\nax.set_xlabel('\u03b1')\nax.set_ylabel('\u03b2')\n\n# Set the title of the plot\nax.set_title('Heatmap of \u0394t')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/xiahengliu/picture2code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 2, figsize=(8.0, 4.0))\n\n# Plot the first subplot\naxes[0].plot([0, 20, 40, 60, 80, 100], [-2.5, -1.5, -0.5, 0.5, 1.5, 2.5], 'b-', label='Left')\naxes[0].plot([0, 20, 40, 60, 80, 100], [-2.5, -1.5, -0.5, 0.5, 1.5, 2.5], 'g-', label='Center Left')\naxes[0].plot([0, 20, 40, 60, 80, 100], [-2.5, -1.5, -0.5, 0.5, 1.5, 2.5], 'r-', label='Right')\naxes[0].plot([0, 20, 40, 60, 80, 100], [-2.5, -1.5, -0.5, 0.5, 1.5, 2.5], 'm-', label='Center Right')\naxes[0].set_xlabel('Users (U)')\naxes[0].set_ylabel('Utility (f)')\naxes[0].set_title('Utility distribution per topic')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].scatter([0, 20, 40, 60, 80, 100], [0, 0, 0, 0, 0, 0], color='blue', label='L')\naxes[1].scatter([0, 20, 40, 60, 80, 100], [0, 0, 0, 0, 0, 0], color='cyan', label='CL')\naxes[1].scatter([0, 20, 40, 60, 80, 100], [0, 0, 0, 0, 0, 0], color='green', label='C')\naxes[1].scatter([0, 20, 40, 60, 80, 100], [0, 0, 0, 0, 0, 0], color='red', label='CR')\naxes[1].scatter([0, 20, 40, 60, 80, 100], [0, 0, 0, 0, 0, 0], color='magenta', label='R')\naxes[1].set_xlabel('Items (C)')\naxes[1].set_ylabel('Users (U)')\naxes[1].set_title('User preference matrix (M)')\naxes[1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(10, 4))\n\n# Define the data for each subplot\ndata_sets = [\n    (np.array([0, 2]), np.array([-1, -1])),\n    (np.array([0, 2]), np.array([-1, -1])),\n    (np.array([0, 2]), np.array([-1, -1]))\n]\n\n# Plot the data\nfor ax, (x, y) in zip(axes, data_sets):\n    ax.plot(x, y, 'b-')\n    ax.fill_between(x, y, color='blue', alpha=0.5)\n    ax.set_xlim(-2, 4)\n    ax.set_ylim(-2, 4)\n    ax.set_xlabel('Reactive-2 payoff')\n    ax.set_ylabel('Memory-2 payoff')\n\n# Set titles for each subplot\ntitles = ['num. of points = 5', 'num. of points = 3', 'num. of points = 3']\nfor ax, title in zip(axes, titles):\n    ax.text(0.5, 3.5, title, ha='center', va='center', fontsize=12)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: The image shows two side-by-side plots, each containing three subplots. Each subplot represents a different model (Vicuna and Alpaca) with three different categories (story and rule). The plots are displayed with a vertical bar chart layout, where the x-axis represents the category and the y-axis represents the value. The color of the bars is blue for the first model and brown for the second model. The values range from -10 to 10, with the y-axis ticks labeled at intervals of 5. The title of the first plot is \"Model = Vicuna\" and the title of the second plot is \"Model = Alpaca\". The plots are displayed in a grid layout with a single row and two columns.\n\nThe first subplot in the first plot has a title \"story\" and the second subplot has a title \"rule\". The first subplot in the second plot also has a title \"story\" and the second subplot has a title \"rule\". The third subplot in both plots has a title \"rule\".\n\nThe first subplot in the first plot has a bar chart with the following values:\n- story: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n- rule: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n\nThe first subplot in the second plot has a bar chart with the following values:\n- story: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n- rule: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n\nThe second subplot in the first plot has a bar chart with the following values:\n- story: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n- rule: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n\nThe second subplot in the second plot has a bar chart with the following values:\n- story: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n- rule: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n\nThe third subplot in the first plot has a bar chart with the following values:\n- story: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n- rule: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n\nThe third subplot in the second plot has a bar chart with the following values:\n- story: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n- rule: -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nmodels = ['Vicuna', 'Alpaca']\ncategories = ['story', 'rule']\nvalues_vicuna = [[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10], [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]]\nvalues_alpaca = [[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10], [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot for Model = Vicuna\nfor i, model in enumerate(models):\n    ax = axes[i]\n    ax.bar(categories, values_vicuna[i], color='blue')\n    ax.set_title(f'Model = {model}')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Value')\n    ax.set_ylim(-10, 10)\n    ax.set_yticks(np.arange(-10, 11, 5))\n    ax.grid(True)\n\n# Plot for Model = Alpaca\nfor i, model in enumerate(models):\n    ax = axes[i + 1]\n    ax.bar(categories, values_alpaca[i], color='brown')\n    ax.set_title(f'Model = {model}')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Value')\n    ax.set_ylim(-10, 10)\n    ax.set_yticks(np.arange(-10, 11, 5))\n    ax.grid(True)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('#FFD7A0')\n\n# Define the x-axis limits\nax.set_xlim(-40, 1)\n\n# Define the y-axis limits\nax.set_ylim(-5, 6)\n\n# Draw horizontal lines at specified y-values\nfor y in range(0, 7, 5):\n    ax.axhline(y=y, color='black', linestyle='--', linewidth=0.5)\n\n# Draw vertical lines at specified x-values\nfor x in range(-40, 2, 10):\n    ax.axvline(x=x, color='black', linestyle='--', linewidth=0.5)\n\n# Set the x-axis label\nax.set_xlabel('\u0394 Robust Accuracy (%)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Set the y-axis limits\nax.set_ylim(1, 7)\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Set the title of the plot\nax.set_title('Line 3 (Random Noise) vs Line 4 (Exponential Focus)')\n\n# Define the data points for Line 3\nx_line3 = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_line3 = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]\n\n# Define the data points for Line 4\nx_line4 = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_line4 = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]\n\n# Plot the data points for Line 3\nax.plot(x_line3, y_line3, 'g^', label='Line 3 (Random Noise)')\n\n# Plot the data points for Line 4\nax.plot(x_line4, y_line4, 'r^', label='Line 4 (Exponential Focus)')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8]\ny1 = [200, 100, 50, 200, 100, 50, 200, 100, 50]\ny2 = [100, 50, 20, 100, 50, 20, 100, 50, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(x, y1, color='green', label='Known')\nax.bar(x, y2, bottom=y1, color='blue', label='Unknown')\n\n# Set the title and labels\nax.set_title('Number of Examples vs Maximum Predicted Probability')\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0, 1500)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = ['Bfloat16', 'INT8', 'INT8', 'INT4', 'INT2']\ny = [9.3, 9.3, 9.3, 9.3, 9.3]\ncolor = ['red', 'blue', 'green', 'yellow', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data points\nfor i in range(len(x)):\n    ax.plot([i, i], [y[i], y[i]], color=color[i], marker='o')\n\n# Set the title and labels\nax.set_title('Bias Score by Data Type and Model')\nax.set_xlabel('Data Type')\nax.set_ylabel('Bias Score')\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(x)))\nax.set_xticklabels(x)\n\n# Set the y-axis limits\nax.set_ylim(2, 9.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.ai\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = [0.0, 0.2, 0.4]\ny1 = [500, 300, 100]\ny2 = [1000, 800, 600]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nax.bar(x, y1, color='blue', label='Known')\nax.bar(x, y2, bottom=y1, color='cyan', label='Unknown')\n\n# Set the title and labels\nax.set_title('Bar Chart with Two Y-Axes')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2**6, 2**7, 2**8, 2**9, 2**10, 2**11]\ny1 = [100000, 150000, 200000, 250000, 300000, 350000]\ny2 = [100000, 150000, 200000, 250000, 300000, 350000]\ny3 = [100000, 150000, 200000, 250000, 300000, 350000]\ny4 = [100000, 150000, 200000, 250000, 300000, 350000]\ny5 = [100000, 150000, 200000, 250000, 300000, 350000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Cos | n0 = 200')\nax.plot(x, y2, 'g-', label='Cos | n0 = 400')\nax.plot(x, y3, 'b-', label='ReLU | n0 = 200')\nax.plot(x, y4, 'b-', label='ReLU | n0 = 400')\n\n# Set the title and labels\nax.set_title('Empirical Lipschitz Constant')\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ntime_steps = [0, 2000, 4000, 6000, 8000, 10000]\nwi_values = [5000, 5500, 6000, 6500, 7000, 7000]\nisq_values = [4500, 5000, 5500, 6000, 6500, 6500]\nwql_values = [4500, 5000, 5500, 6000, 6500, 6500]\ngreedy_values = [3500, 4000, 4500, 5000, 5500, 5500]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the lines\nax.plot(time_steps, wi_values, 'r', label='WI')\nax.plot(time_steps, isq_values, 'g', label='ISQ')\nax.plot(time_steps, wql_values, 'm', label='WIQL')\nax.plot(time_steps, greedy_values, 'b', label='Greedy')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Set the y-axis limits\nax.set_ylim(3500, 7100)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ntime_steps = [0, 25, 50, 75, 100, 125, 150, 175, 200]\nwi_values = [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15]\nisq_values = [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Plot the data\nax.plot(time_steps, wi_values, label='WI', color='blue')\nax.plot(time_steps, isq_values, label='ISQ', color='orange')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.55)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Set the x-axis label\nax.set_xlabel('X-axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis Label')\n\n# Set the x-axis limits\nax.set_xlim(-4, 4)\n\n# Set the y-axis limits\nax.set_ylim(-4, 4)\n\n# Set the x-axis ticks\nax.set_xticks([-4, -2, 0, 2, 4])\n\n# Set the y-axis ticks\nax.set_yticks([-4, -2, 0, 2, 4])\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the grid lines\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data points for each scatter plot\ndata_points = [\n    [(-1, 1), (-1, 0.5), (0, 1), (0, 0.5)],\n    [(-2, 1), (-2, 0.5), (-1, 1), (-1, 0.5)],\n    [(-3, 1), (-3, 0.5), (-2, 1), (-2, 0.5)],\n    [(-4, 1), (-4, 0.5), (-3, 1), (-3, 0.5)],\n    [(-5, 1), (-5, 0.5), (-4, 1), (-4, 0.5)],\n    [(-6, 1), (-6, 0.5), (-5, 1), (-5, 0.5)],\n    [(-7, 1), (-7, 0.5), (-6, 1), (-6, 0.5)],\n    [(-8, 1), (-8, 0.5), (-7, 1), (-7, 0.5)],\n    [(-1, 1), (-1, 0.5), (0, 1), (0, 0.5)],\n    [(-2, 1), (-2, 0.5), (-1, 1), (-1, 0.5)],\n    [(-3, 1), (-3, 0.5), (-2, 1), (-2, 0.5)],\n    [(-4, 1), (-4, 0.5), (-3, 1), (-3, 0.5)],\n    [(-5, 1), (-5, 0.5), (-4, 1), (-4, 0.5)],\n    [(-6, 1), (-6, 0.5), (-5, 1), (-5, 0.5)],\n    [(-7, 1), (-7, 0.5), (-6, 1), (-6, 0.5)],\n    [(-8, 1), (-8, 0.5), (-7, 1), (-7, 0.5)],\n    [(-1, 1), (-1, 0.5), (0, 1), (0, 0.5)],\n    [(-2, 1), (-2, 0.5), (-1, 1), (-1, 0.5)],\n    [(-3, 1), (-3, 0.5), (-2, 1), (-2, 0.5)],\n    [(-4, 1), (-4, 0.5), (-3, 1), (-3, 0.5)],\n    [(-5, 1), (-5, 0.5), (-4, 1), (-4, 0.5)],\n    [(-6, 1), (-6, 0.5), (-5, 1), (-5, 0.5)],\n    [(-7, 1), (-7, 0.5), (-6, 1), (-6, 0.5)],\n    [(-8, 1), (-8, 0.5), (-7, 1), (-7, 0.5)],\n    [(-1, 1), (-1, 0.5), (0, 1), (0, 0.5)],\n    [(-2, 1), (-2, 0.5), (-1, 1), (-1, 0.5)],\n    [(-3, 1), (-3, 0.5), (-2, 1), (-2, 0.5)],\n    [(-4, 1), (-4, 0.5), (-3, 1), (-3, 0.5)],\n    [(-5, 1), (-5, 0.5), (-4, 1), (-4, 0.5)],\n    [(-6, 1), (-6, 0.5), (-5, 1), (-5, 0.5)],\n    [(-7, 1), (-7, 0.5), (-6, 1), (-6, 0.5)],\n    [(-8, 1), (-8, 0.5), (-7, 1), (-7, 0.5)],\n]\n\n# Plot the data points\nfor points in data_points:\n    x, y = zip(*points)\n    ax.scatter(x, y, color='red')\n\n# Set the title and labels\nax.set_title('Scatter Plot with Red Dots')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the limits of the axes\nax.set_xlim(-8, 8)\nax.set_ylim(-8, 8)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data points for each line\nx = [10, 50, 100, 500]\ny1 = [20, 20, 20, 20]\ny2 = [10, 10, 10, 10]\ny3 = [10, 10, 10, 10]\ny4 = [10, 10, 10, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Plot the lines with specified colors and markers\nax.plot(x, y1, 'r-o', label='ActivityNet mIoU')\nax.plot(x, y2, 'o-y', label='Breakfast MoF')\nax.plot(x, y3, 'c-o', label='ActivityNet CIDER')\nax.plot(x, y4, 'k-o', label='QVHighlights mAP')\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the x-axis label\nax.set_xlabel('X-axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis Label')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 600)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 35)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 100, 500, 600])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 10, 20, 30, 35])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Define the data\ntime_steps = [0, 1, 2, 3]\nr_values = [45, 40, 35, 30]\ng_values = [10, 15, 20, 25]\nb_values = [0, 5, 10, 15]\n\n# Plot the data\nax.plot(time_steps, r_values, 'r', label='PR-based')\nax.plot(time_steps, g_values, 'b', label='DRS')\nax.plot(time_steps, b_values, 'g', label='GT')\n\n# Set the title and labels\nax.set_title('Time Series Plot')\nax.set_xlabel('Time Step')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\n\"\"\"\nGenerated by class diagram\n\"\"\"\nimport matplotlib.pyplot as plt\n\n# Define the data points for the plot\nx = [0, 20, 40, 60, 80]\ny_clip = [0.53, 0.7, 0.75, 0.75, 0.75]\ny_laion_5k = [0.55, 0.7, 0.75, 0.75, 0.75]\ny_coco_5k = [0.55, 0.7, 0.75, 0.75, 0.75]\ny_laion_10k = [0.55, 0.7, 0.75, 0.75, 0.75]\ny_coco_10k = [0.55, 0.7, 0.75, 0.75, 0.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different colors and labels\nax.plot(x, y_clip, color='black', label='clip')\nax.plot(x, y_laion_5k, color='yellow', label='laion (5k)')\nax.plot(x, y_coco_5k, color='blue', label='coco (5k)')\nax.plot(x, y_laion_10k, color='green', label='laion (10k)')\nax.plot(x, y_coco_10k, color='red', label='coco (10k)')\n\n# Set the title and labels\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\nax.set_xlabel('Deposition IO Norm')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(0.53, 0.76)\n\n# Add a horizontal line at y=0.75\nax.axhline(y=0.75, color='black', linestyle='--')\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: Cumulative Performance Gain by Augmentation Level\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data points for each category\ncontent = [1, 2, 3, 4, 5, 6, 7, 8, 9]\norganization = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlanguage = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different colors\nax.plot(content, 'b-', label='Content')\nax.plot(organization, 'y-', label='Organization')\nax.plot(language, 'g-', label='Language')\n\n# Set the title of the plot\nax.set_title('Cumulative Performance Gain by Augmentation Level')\n\n# Set the x-axis label\nax.set_xlabel('n')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [3000, 3000, 3000, 3000, 3000, 3000, 4000]\namericas = [1000, 1000, 1000, 1000, 1000, 1000, 1000]\nasia = [1000, 1000, 1000, 1000, 1000, 1000, 1000]\neurope = [1000, 1000, 1000, 1000, 1000, 1000, 1000]\noceania = [1000, 1000, 1000, 1000, 1000, 1000, 1000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, africa, color='green', label='africa')\nax.plot(years, americas, color='yellow', label='americas')\nax.plot(years, asia, color='red', label='asia')\nax.plot(years, europe, color='orange', label='europe')\nax.plot(years, oceania, color='blue', label='oceania')\n\n# Set the title and labels\nax.set_title('World population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Set the y-axis limits\nax.set_ylim(0, 6000)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = [\n    [6.2, 5.8, 5.4, 5.1, 4.8],\n    [5.9, 5.5, 5.1, 4.8, 4.5],\n    [5.6, 5.2, 4.8, 4.5, 4.2],\n    [5.3, 4.9, 4.5, 4.2, 3.9]\n]\n\n# Define the labels for the x-axis\nlabels = ['Notre-Dame de Paris', 'Demi-Gods and Semi-Devils', 'The Count of Monte Cristo', 'Game of Thrones', 'Attack on Titan']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Scores')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(labels)))\nax.set_xticklabels(labels)\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Plot the bar chart\nfor i, row in enumerate(data):\n    ax.bar(range(len(row)), row, bottom=sum(data[:i]), color=plt.cm.tab20(i))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code-maker\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\nvalues = [50, 40, 30, 20, 10, 50, 50, 50, 50, 40]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Bar Chart')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/victorlei/image2code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nregion_1_sales = [60, 40, 20]\nregion_2_sales = [80, 60, 40, 20]\nregion_3_sales = [80, 60, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Plot bars for Region 1 Sales\nax.bar(['Product A', 'Product B', 'Product C'], region_1_sales, color='green')\n\n# Plot bars for Region 2 Sales\nax.bar(['Product A', 'Product B', 'Product C', 'Product D'], region_2_sales, color='blue')\n\n# Plot bars for Region 3 Sales\nax.bar(['Product A', 'Product B', 'Product C', 'Product D'], region_3_sales, color='red')\n\n# Set the title of the plot\nax.set_title('Average Monthly Sales by Product Across Regions')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nlengths = ['0-9', '10-19', '20-29', '30-39', '40-49']\nspearmans = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a bar chart\nplt.bar(lengths, spearmans, color='blue')\n\n# Set the title and labels\nplt.title('Spearman Correlation by Length')\nplt.xlabel('Length')\nplt.ylabel('Spearman')\n\n# Set the y-axis limits\nplt.ylim(-1, 0.75)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\nvalues_beauty = [2.2, 11.2, 2.4, 19.9, 14.3]\nvalues_movielens = [3.0, 5.1, 4.1, 2.9, 3.1]\nvalues_yelp = [4.8, 5.1, 4.4, 4.8, 19.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot bars for Beauty\nax.bar(categories, values_beauty, color='blue', label='Beauty')\n\n# Plot bars for MovieLens-1M\nax.bar(categories, values_movielens, color='red', label='MovieLens-1M')\n\n# Plot bars for Yelp\nax.bar(categories, values_yelp, color='green', label='Yelp')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values (%)')\nax.set_title('Comparison of Categories')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\nlanguages = ['EN', 'FR', 'ES', 'DE', 'IT']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('ENDEFRRITES sampled')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Improve [%]')\n\n# Set the y-axis limits\nax.set_ylim(-4, 4)\n\n# Set the y-axis ticks\nax.set_yticks(range(-4, 5, 1))\n\n# Set the x-axis ticks\nax.set_xticks(range(len(models)))\n\n# Set the x-axis tick labels\nax.set_xticklabels(models)\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-4', '-3', '-2', '-1', '0', '1', '2', '3', '4'])\n\n# Draw horizontal lines at y=0 and y=-1.8\nax.axhline(y=0, color='black', linewidth=0.5)\nax.axhline(y=-1.8, color='black', linewidth=0.5)\n\n# Draw vertical lines between bars\nfor i in range(len(models)):\n    ax.axvline(x=i + 0.5, color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i - 1], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor i in range(1, len(improvement)):\n    ax.axhline(y=improvement[i], color='black', linewidth=0.5)\n\n# Draw horizontal lines between bars\nfor"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nf1_scores = [82, 82, 80, 80, 85, 85]\nllm_mis = [83, 83, 80, 80, 85, 85]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the bar chart\nbars = ax.bar(pheme, f1_scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('Pheme')\nax.set_ylabel('Macro F1-score')\nax.set_title('F1 Scores by Pheme')\n\n# Add value labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0.75, 0.9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = [\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1]\n]\n\n# Define the labels for the x-axis\nlabels = ['1', '2', '3', '4', '5', '6']\n\n# Define the colors for each bar\ncolors = ['blue', 'cyan', 'yellow', 'orange', 'red']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart\nfor i, row in enumerate(data):\n    ax.bar(labels, row, color=colors[i % len(colors)], label=f'Bar {i + 1}')\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(labels)))\nax.set_xticklabels(labels)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 51, 10))\nax.set_yticklabels(range(0, 51, 10))\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = {\n    'human': [100, 200, 300, 400, 500, 600, 700, 800],\n    'gpt4': [100, 200, 300, 400, 500, 600, 700, 800],\n    'gpt4-cot': [100, 200, 300, 400, 500, 600, 700, 800]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.barh(['s1', 's2'], [800, 800], color='blue')\nax.barh(['s1', 's2'], [600, 600], color='yellow')\nax.barh(['s1', 's2'], [500, 500], color='red')\n\n# Set the title of the plot\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Count')\nax.set_ylabel('Role')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 800)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winograde', 'Average']\naccuracies = [\n    [53.0, 51.3, 56.4, 56.2],\n    [46.6, 45.8, 48.0, 46.7],\n    [45.3, 44.5, 48.5, 45.1],\n    [73.1, 70.4, 73.2, 72.9],\n    [53.1, 53.7, 53.1]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars for each task\nfor i, task_accuracies in enumerate(accuracies):\n    ax.bar(tasks[i], task_accuracies, color=plt.cm.tab20(i), label=f'Task {i+1}')\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Task Accuracy Comparison')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance')\n\n# Set the x-axis label\nax.set_xlabel('X Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Label')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([40, 50, 60, 70])\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('red')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('red')\n\n# Set the color of the left y-axis spine\nax.spines['left'].set_color('red')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['GSM8K', 'MNLI', 'race@High'], color='red')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'], color='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart representing the performance of different DLMA models against various tie types and loss scenarios.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nmodels = ['DLMA-7B VS. LLAMa-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMa-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\ntie_values = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 27.7]\nloss_values = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create the bar chart\nbars = ax.bar(models, tie_values, bar_width, label='Tie', color='blue')\nax.bar([m + bar_width for m in range(len(models))], loss_values, bar_width, label='Loss', color='red')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Percentage')\nax.set_title('DLMA Performance')\nax.set_xticks([m + bar_width / 2 for m in range(len(models))])\nax.set_xticklabels(models, rotation=45)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ntime = [0, 10, 20, 30, 40]\ntrot = [0.95, 0.85, 0.75, 0.65, 0.55]\npace = [0.9, 0.8, 0.7, 0.6, 0.5]\nbound = [0.85, 0.75, 0.65, 0.55, 0.45]\npronk = [0.8, 0.7, 0.6, 0.5, 0.4]\ntransition = [0.4, 0.4, 0.4, 0.4, 0.4]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6, 3))\nax.bar(time, trot, color='green', label='trot')\nax.bar(time, pace, bottom=trot, color='red', label='pace')\nax.bar(time, bound, bottom=[t + p for t, p in zip(trot, pace)], color='purple', label='bound')\nax.bar(time, pronk, bottom=[t + p + b for t, p, b in zip(trot, pace, bound)], color='brown', label='pronk')\nax.bar(time, transition, bottom=[t + p + b + pr for t, p, b, pr in zip(trot, pace, bound, pronk)], color='gray', label='transition')\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart based on the provided data and specifications.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nap1k_wins = [68, 82, 68, 72, 68]\ntie_wins = [24, 15, 22, 19, 23]\nag1k_wins = [8, 3, 10, 9, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nr1 = range(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create bars\nax.bar(r1, ap1k_wins, color='blue', width=bar_width, edgecolor='grey', label='AP-1kL wins')\nax.bar(r2, tie_wins, color='purple', width=bar_width, edgecolor='grey', label='Tie')\nax.bar(r3, ag1k_wins, color='gray', width=bar_width, edgecolor='grey', label='AG-1k wins')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories', fontweight='bold')\nax.set_ylabel('Wins', fontweight='bold')\nax.set_title('Bar Chart of Wins by Category')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart based on the provided data and specifications.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the chart\ndata = {\n    'Benefits': [14.8, 29.6, 29.6, 18.5, 8.4],\n    'Reliability': [9.4, 24.1, 24.1, 40.7, 27.8],\n    'Security': [8.3, 14.8, 14.8, 40.7, 33.3],\n    'Privacy': [24.1, 29.6, 29.6, 16.7, 9.3]\n}\n\n# Define the categories and their corresponding colors\ncategories = ['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree']\ncolors = ['red', 'orange', 'grey', 'blue', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bars for each category\nfor i, category in enumerate(categories):\n    ax.bar(range(len(data)), data[category], color=colors[i], label=category)\n\n# Set the x-axis labels\nax.set_xticks(range(len(data['Benefits'])))\nax.set_xticklabels(['Benefits', 'Reliability', 'Security', 'Privacy'])\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Set the title of the chart\nax.set_title('Eye Movement')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny1 = [-8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0]\ny2 = [-8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, label='Ours', color='blue')\nax.plot(x, y2, label='Saliency-based Sampling', color='purple')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change (%)')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Set the x-axis limits\nax.set_xlim(0.5, 1.5)\n\n# Set the y-axis limits\nax.set_ylim(-30, 0)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: Ratings of Language Models on a Scale from 1-4\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 3.1, 3.0, 3.0, 3.0, 3.0]\ncompleteness = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\nconciseness = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\nreadability = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\nbar_width = 0.2\nindex = range(len(models))\n\nbars_acc = ax.bar([i - bar_width for i in index], accuracy, bar_width, label='Accuracy')\nbars_comp = ax.bar(index, completeness, bar_width, label='Completeness')\nbars_conc = ax.bar([i + bar_width for i in index], conciseness, bar_width, label='Conciseness')\nbars_read = ax.bar([i + 2 * bar_width for i in index], readability, bar_width, label='Readability')\n\nax.set_xlabel('Language Models')\nax.set_ylabel('Ratings')\nax.set_title('Ratings of Language Models on a Scale from 1-4')\nax.set_xticks(index)\nax.set_xticklabels(models)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nbars = plt.bar(models, accuracies, color='green')\n\n# Add labels and title\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\nplt.title('Model Accuracy Comparison')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\n\"\"\"\nImport the necessary libraries\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\"\"\"\nDefine the data for the bar chart\n\"\"\"\ndata = {\n    'Alpaca-52k+': [78.8, 67.4, 11.7, 9.5],\n    'Alpaga-1k+': [67.4, 44.2, 21.9, 14.5],\n    'Lima-1k+': [44.2, 33.9, 21.9, 19.2],\n    'Lima-1k*': [59.8, 33.9, 21.0, 19.2]\n}\n\n\"\"\"\nCreate a figure and axis object\n\"\"\"\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n\"\"\"\nSet the width of the bars\n\"\"\"\nbar_width = 0.2\n\n\"\"\"\nSet the positions of the bars on the x-axis\n\"\"\"\nindex = np.arange(len(data['Alpaca-52k+']))\n\n\"\"\"\nPlot the bars for each dataset\n\"\"\"\nbars = []\nfor i, (key, values) in enumerate(data.items()):\n    bars.append(ax.bar(index + i * bar_width, values, bar_width, label=key))\n\n\"\"\"\nAdd some text for labels, title, and custom x-axis tick labels, etc.\n\"\"\"\nax.set_xlabel('GPT4-as-a-judge')\nax.set_ylabel('Values')\nax.set_title('Bar Chart with Multiple Datasets')\nax.set_xticks(index + bar_width * len(data) / 2)\nax.set_xticklabels(['Alpaca-52k+', 'Alpaga-1k+', 'Lima-1k+', 'Lima-1k*'])\nax.legend()\n\n\"\"\"\nDisplay the plot\n\"\"\"\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Ang', 'Cn', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nnegative = [100, 50, 50, 50, 100, 3500, 50, 25]\npositive = [0, 0, 0, 0, 0, 0, 0, 0]\nnone = [0, 0, 0, 0, 0, 0, 0, 0]\nmixed = [0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6, 4))\nbars = ax.bar(emotions, negative, color='red', label='negative')\nax.bar(emotions, positive, bottom=negative, color='green', label='positive')\nax.bar(emotions, none, bottom=[sum(x) for x in zip(negative, positive)], color='gray', label='none')\nax.bar(emotions, mixed, bottom=[sum(x) for x in zip(negative, positive, none)], color='orange', label='mixed')\n\n# Add labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency')\nax.set_title('Emotion Frequency Distribution')\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 4000)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\n\"\"\"\n=====================================\nBar chart with multiple stacked bars\n=====================================\n\nThis example demonstrates a bar chart with multiple stacked bars.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['GPT-4V', 'RoboCodeX']\nvalues = [0.9, 0.8]\nbar_width = 0.5\nindex = np.arange(len(categories))\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the bars\nbars = ax.bar(index, values, bar_width, label='Total Trials')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage of Total Trials')\nax.set_title('Stacked Bar Chart Example')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndatasets = ['VOC 2012', 'COCO 2017']\ntransmission_delay = [3.5, 2.5]\n\n# Create a bar chart with the specified data\nplt.bar(datasets, transmission_delay, color='blue')\n\n# Set the title of the chart\nplt.title('Transmission Delay (ms)')\n\n# Set the x-axis label\nplt.xlabel('Datasets')\n\n# Set the y-axis label\nplt.ylabel('Transmission Delay (ms)')\n\n# Set the y-axis limits\nplt.ylim(0, 4)\n\n# Set the y-axis ticks\nplt.yticks([0, 1, 2, 3, 4])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('log L2')\n\n# Set the x-axis label\nax.set_xlabel('PDEs')\n\n# Set the y-axis label\nax.set_ylabel('log L2')\n\n# Define the data for the bars\ndata = [\n    [1.0, 1.0, 1.0, 1.0, 1.0],\n    [1.0, 1.0, 1.0, 1.0, 1.0],\n    [1.0, 1.0, 1.0, 1.0, 1.0],\n    [1.0, 1.0, 1.0, 1.0, 1.0],\n    [1.0, 1.0, 1.0, 1.0, 1.0]\n]\n\n# Define the labels for the bars\nlabels = ['RBF-INT', 'RBF-POL', 'RBF-COM']\n\n# Define the colors for the bars\ncolors = ['blue', 'red', 'orange']\n\n# Define the positions of the bars\nx = range(len(data[0]))\n\n# Plot the bars\nfor i in range(len(data)):\n    ax.bar(x, data[i], color=colors[i % len(colors)], label=labels[i])\n\n# Set the x-tick labels\nax.set_xticks(x)\nax.set_xticklabels(['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers'])\n\n# Set the y-limits\nax.set_ylim(1.0, 1.4)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\n\"\"\"\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_data = [0.975, 0.975, 0.975, 0.975]\nsroi_data = [0.965, 0.965, 0.965, 0.965]\nciq_data = [0.97, 0.97, 0.97, 0.97]\ntid2013_data = [0.98, 0.98, 0.98, 0.98]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot the data\nax.bar(models, live_data, color='blue', label='LIVE')\nax.bar(models, sroi_data, color='red', label='SROCC')\nax.bar(models, ciq_data, color='cyan', label='CIQ')\nax.bar(models, tid2013_data, color='yellow', label='TID2013')\n\n# Set the title and labels\nax.set_title('Models')\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n\"\"\""}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Mixtral-8x7b-Instr', 'GPT-3.5', 'GPT-4']\nzero_shot_values = [28.33, 56.11, 60.56]\none_shot_values = [31.11, 85.0, 99.44]\nds_agent_values = [6.11, 44.44, 42.78]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6, 4))\nbar_width = 0.2\nindex = range(len(categories))\n\nbars_zero_shot = ax.bar([i - bar_width for i in index], zero_shot_values, bar_width, label='Zero-shot')\nbars_one_shot = ax.bar(index, one_shot_values, bar_width, label='One-shot')\nbars_ds_agent = ax.bar([i + bar_width for i in index], ds_agent_values, bar_width, label='DS-Agent')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('One pass rate (%)')\nax.set_title('Performance Comparison')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/autogalaxy/plot/matplotlib.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_values = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_values = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_values = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Set the y-axis tick labels\nax.set_yticks([0, 1, 2, 3, 4, 5])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '20%', '40%', '60%', '80%', '100%'])\n\n# Set the title of the plot\nax.set_title('Comparison of LLM-based vs. TPLM-based')\n\n# Set the x-axis label\nax.set_xlabel('Percentage')\n\n# Set the y-axis label\nax.set_ylabel('Category')\n\n# Plot the data\nbars = ax.barh(categories, win_values, color='blue', label='Win')\nbars2 = ax.barh(categories, tie_values, left=win_values, color='green', label='Tie')\nbars3 = ax.barh(categories, loss_values, left=[sum(x) for x in zip(win_values, tie_values)], color='red', label='Loss')\n\n# Add labels on top of each bar\nfor bar in bars:\n    width = bar.get_width()\n    ax.annotate(f'{width}%',\n                xy=(width, bar.get_y() + bar.get_height() / 2),\n                xytext=(3, 0),\n                textcoords=\"offset points\",\n                ha='left',\n                va='center')\n\nfor bar in bars2:\n    width = bar.get_width()\n    ax.annotate(f'{width}%',\n                xy=(width, bar.get_y() + bar.get_height() / 2),\n                xytext=(3, 0),\n                textcoords=\"offset points\",\n                ha='left',\n                va='center')\n\nfor bar in bars3:\n    width = bar.get_width()\n    ax.annotate(f'{width}%',\n                xy=(width, bar.get_y() + bar.get_height() / 2),\n                xytext=(3, 0),\n                textcoords=\"offset points\",\n                ha='left',\n                va='center')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nprobabilities = [0.72, 0.74, 0.56]\n\n# Create a bar chart\nplt.figure(figsize=(6, 2))\nbars = plt.bar(categories, probabilities, color='blue')\n\n# Add labels and title\nplt.xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.ylabel('Probability of Improvement')\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart based on the provided data and labels.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 29.8, 100.0, 60.8]\nfollowing_related_format_error_rate = [100.0, 83.3, 50.7, 63.4, 91.7]\nfollowing_related_error_rate = [100.0, 48.1, 60.7, 100.0, 60.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for each step\nbars = ax.bar(steps, avg_following_rate, color='gray', label='Avg. Following Rate')\nfor i, v in enumerate(avg_following_rate):\n    ax.text(i, v + 0.1, f'{v:.1f}', ha='center', va='bottom')\n\nbars = ax.bar(steps, following_related_format_error_rate, bottom=avg_following_rate, color='blue', label='Following-related Format Error Rate')\nfor i, v in enumerate(following_related_format_error_rate):\n    ax.text(i, avg_following_rate[i] + v + 0.1, f'{v:.1f}', ha='center', va='bottom')\n\nbars = ax.bar(steps, following_related_error_rate, bottom=[sum(x) for x in zip(avg_following_rate, following_related_format_error_rate)], color='green', label='Following-related Error Rate')\nfor i, v in enumerate(following_related_error_rate):\n    ax.text(i, sum(x) for x in zip(avg_following_rate, following_related_format_error_rate)) + v + 0.1, f'{v:.1f}', ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ncategories = ['coreutils', 'scp', 'tar', 'exim', 'menc.c', 'niginx', 'memc', 'bzip2', 'astar', 'gobmk', 'h264.', 'liba', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', '"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Llama2', 'Mistral']\nscores = [6.57, 7.08]\ncolors = ['blue', 'blue']\n\n# Create a bar chart\nplt.bar(categories, scores, color=colors)\n\n# Set the title and labels\nplt.title('MT-Bench Score')\nplt.xlabel('Categories')\nplt.ylabel('Score')\n\n# Set the y-axis limits\nplt.ylim(5, 7.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclusters = [100, 1000]\nrandom_sampling = [49.98, 49.63]\nuniform = [51.05, 50.74]\ncluster_clip = [51.05, 50.74]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot bars for each cluster size\nax.bar(clusters, random_sampling, color='blue', label='Random Sampling')\nax.bar(clusters, uniform, color='blue', bottom=random_sampling, label='Uniform')\nax.bar(clusters, cluster_clip, color='orange', bottom=[x + y for x, y in zip(random_sampling, uniform)], label='ClusterClip')\n\n# Set labels and title\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\nax.set_title('Comparison of MMLU for Different Sampling Methods and Cluster Sizes')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\n\"\"\"\nSolved by OpenAI's DALL-E\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['ResNet18', 'AlexNet', 'ResNet50']\nperturbation_values = [7.4, 6.1, 4.3]\nspeedup_values = [\n    [1.0, 1.8, 2.6, 3.3, 4.6, 4.5, 7.4],\n    [1.0, 1.9, 2.9, 3.4, 5.2, 6.1, 8.7],\n    [1.0, 1.6, 2.7, 2.8, 3.9, 4.3]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot bars for perturbation values\nfor i, (label, perturbation) in enumerate(zip(labels, perturbation_values)):\n    ax.bar(label, perturbation, color='pink')\n\n# Plot bars for speedup values\nfor i, speeds in enumerate(speedup_values):\n    ax.bar(labels[i], speeds, bottom=perturbation_values[i], color=plt.cm.tab20(i % 20))\n\n# Set labels and title\nax.set_xlabel('Perturbation')\nax.set_ylabel('Speedup')\nax.set_title('Perturbation vs Speedup')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\nvalues = [40, 40, 40, 60, 60, 60]\ncolors = ['green', 'blue', 'red', 'purple', 'green', 'blue']\n\n# Create a bar chart with the specified data and colors\nplt.bar(categories, values, color=colors)\n\n# Set the title of the chart\nplt.title('LeetCode, DS-6.7b')\n\n# Set the y-axis label\nplt.ylabel('Accuracy')\n\n# Set the x-axis label\nplt.xlabel('Categories')\n\n# Set the y-axis limits\nplt.ylim(0, 80)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\n\"\"\"\nIn this code snippet, we are creating a bar chart using matplotlib to represent data related to various games and their respective win counts for different types of games. The data is structured as a list of lists, where each inner list represents a game and its associated win counts for three different categories: Recost (1%), Tie, and Alpacas.\n\nThe code begins by importing the necessary libraries, including numpy for numerical operations and matplotlib.pyplot for plotting. It then defines the data and labels for the chart. The data is stored in a list called 'data', which contains sublists for each game, with each sublist containing the win counts for Recost, Tie, and Alpacas. The labels for the x-axis are stored in a list called 'labels'.\n\nThe code then proceeds to create the bar chart. It uses the `bar` function from matplotlib to plot the bars for each game. The width of the bars is set to 0.2, and the color of the bars is specified using the 'color' parameter. The `bottom` parameter is used to stack the bars vertically, ensuring that each bar starts at the end of the previous one.\n\nThe code also includes a loop that iterates over the range of the number of games. For each iteration, it calculates the position of the next set of bars by adding the width of the current set of bars to the current position. This ensures that the bars for each game are placed side by side.\n\nFinally, the code sets the title of the chart, labels the x-axis, and displays the chart using the `show` function.\n\nThis code snippet effectively visualizes the data in a bar chart format, making it easier to compare the win counts for different games across different categories.\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data and labels\ndata = [\n    [53, 6, 21],\n    [80, 33, 67],\n    [116, 49, 53],\n    [99, 50, 103],\n    [179, 98, 23]\n]\nlabels = ['Recost (1%) wins', 'Tie', 'Alpacas wins']\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Create an array of positions for the bars\nr = np.arange(len(data))\n\n# Plot the bars\nplt.bar(r, [d[0] for d in data], color='red', width=bar_width, edgecolor='grey', label=labels[0])\nplt.bar(r + bar_width, [d[1] for d in data], color='yellow', width=bar_width, edgecolor='grey', label=labels[1])\nplt.bar(r + 2 * bar_width, [d[2] for d in data], color='blue', width=bar_width, edgecolor='grey', label=labels[2])\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nplt.xlabel('Games', fontweight='bold')\nplt.xticks(r + bar_width, ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA'])\nplt.ylabel('Win Counts')\nplt.title('Game Win Counts by Category')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'Alti+', 'Max', 'STARE']\nfpr_non_aggregate = [35.15, 26.86, 19.08, 22.09, 20.67, 17.06, 58.99, 66.19, 48.38, 62.94, 42.5, 23.9, 26.38, 17.06]\nfpr_aggregate = [36.63, 20.67, 22.09, 20.67, 20.67, 17.06, 58.99, 66.19, 48.38, 62.94, 42.5, 23.9, 26.38, 17.06]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(categories, fpr_non_aggregate, color='green', label='Non-Aggregate')\nax.bar(categories, fpr_aggregate, bottom=fpr_non_aggregate, color='orange', label='Aggregate')\n\n# Set the title and labels\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\nax.set_xlabel('Categories')\nax.set_ylabel('FPR@90TPR')\n\n# Add a horizontal line at y=30\nax.axhline(y=30, color='gray', linestyle='--')\n\n# Add a vertical line at x=7\nax.axvline(x=7, color='red', linestyle='-')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 5.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nplt.xlabel('Semantic Category')\nplt.ylabel('Difference (%)')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20]\ny1 = [66.3, 61.9, 53.8]\ny2 = [10.1, 13.6, 13.7]\ny3 = [49.3, 45.7, 41.6]\ny4 = [36.3, 31.5, 0]\ny5 = [48.0, 42.6, 36.5]\ny6 = [40.5, 36.5, 0]\ny7 = [43.8, 40.2, 30.6]\ny8 = [49.5, 42.8, 22.5]\ny9 = [64.7, 59.6, 22.5]\ny10 = [43.4, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14, 4))\n\n# Plot the data\nax.bar(x, y1, color='blue', label='Truthful Recall')\nax.bar(x, y2, bottom=y1, color='red', label='Misleading Recall')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='blue')\nax.bar(x, y4, bottom=[sum(y) for y in zip(y1, y2, y3)], color='red')\nax.bar(x, y5, bottom=[sum(y) for y in zip(y1, y2, y3, y4)], color='blue')\nax.bar(x, y6, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5)], color='red')\nax.bar(x, y7, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6)], color='blue')\nax.bar(x, y8, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7)], color='red')\nax.bar(x, y9, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7, y8)], color='blue')\nax.bar(x, y10, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9)], color='red')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Bar Chart with Multiple Bars')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart using matplotlib to represent data related to a specific model. The chart includes various models and their associated Delta Acc values, which are categorized into three different ranges: \u0394Acc < -1, \u0394Acc <= -1, and \u0394Acc > 1. The chart is designed to visually compare the performance of these models based on their Delta Acc values.\n\nThe script uses the matplotlib library to create the bar chart. It sets up the figure and axis with a specified size, and then plots the bars for each model. The bars are colored differently based on their Delta Acc value range. The script also includes labels for the x-axis and y-axis, as well as a title for the chart.\n\nThe data for the models and their corresponding Delta Acc values is stored in a dictionary called 'data'. Each key-value pair in the dictionary represents a model and its Delta Acc values. The script iterates over this dictionary to plot the bars for each model.\n\nThe script also includes a list of models that are not included in the data dictionary but are mentioned in the text. These models are not plotted in the chart but are referenced in the text.\n\nThe script uses the 'plt.show()' function to display the chart when executed.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the models and their Delta Acc values\ndata = {\n    'PROST': [-3.2, -4.6],\n    'ARC-easy': [-3.2, -4.6],\n    'COMVE (Task A)': [-3.2, -4.6],\n    'OpenBookQA': [-3.2, -4.6],\n    'SCIQ': [-3.2, -4.6],\n    'NumSense': [-3.2, -4.6],\n    'CoQA': [-3.2, -4.6],\n    'ComQA2.0': [-3.2, -4.6],\n    'ComQC': [-3.2, -4.6],\n    'ComQT': [-3.2, -4.6],\n    'ComPC': [-3.2, -4.6],\n    'Com2Sense': [-3.2, -4.6],\n    'Comodogenti': [-3.2, -4.6],\n    'Winogrande': [-3.2, -4.6],\n    'SocialIQA': [-3.2, -4.6],\n    'ARC-challenge': [-3.2, -4.6],\n    'SWAG': [-3.2, -4.6]\n}\n\n# Define the models that are not included in the data dictionary\nnot_included_models = [\n    'HellaSWAG-wikiHow',\n    'HellaSWAG-eli5',\n    'Winograd-reverse',\n    'PIQA',\n    'Quarel',\n    'SCAT',\n    'alphaNLI',\n    'SWAG'\n]\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars for each model\nfor model, acc_values in data.items():\n    ax.bar(model, acc_values[0], color='blue', label=f'{model} (\u0394Acc < -1)' if acc_values[0] < -1 else f'{model} (\u0394Acc <= -1)' if acc_values[0] == -1 else f'{model} (\u0394Acc > 1)')\n    ax.bar(model, acc_values[1], bottom=acc_values[0], color='green', label=f'{model} (\u0394Acc < -1)' if acc_values[1] < -1 else f'{model} (\u0394Acc <= -1)' if acc_values[1] == -1 else f'{model} (\u0394Acc > 1)')\n\n# Set the labels and title\nax.set_xlabel('Model')\nax.set_ylabel('\u0394Acc')\nax.set_title('Model = Vicuna')\n\n# Set the limits for the y-axis\nax.set_ylim(-8, 6)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\ndata = {\n    'MedMCQA': [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    'MedQA (USMLE)': [56.0, 62.2, 64.4, 64.4, 67.6, 86.5, 90.2],\n    'PubMed QA': [74.4, 75.8, 76.8, 76.8, 79.0, 81.8, 82.0, 88.0, 93.2, 95.2, 98.0, 77.7],\n    'MMLU Anatomy': [55.6, 75.6, 78.5, 71.1, 63.6, 84.4, 89.6, 66.7, 80.4, 88.7, 86.1, 88.0],\n    'MMLU Clinical knowledge': [70.2, 69.4, 77.7, 77.7, 77.7, 88.7, 88.7, 80.4, 82.0, 88.7, 86.1, 88.0],\n    'MMLU College biology': [70.2, 69.4, 77.7, 77.7, 77.7, 88.7, 88.7, 80.4, 82.0, 88.7, 86.1, 88.0],\n    'MMLU Medical genetics': [72.0, 71.0, 70.0, 70.0, 70.0, 82.0, 82.0, 75.0, 75.0, 82.0, 80.9, 88.0],\n    'MMLU Professional medicine': [72.0, 71.0, 70.0, 70.0, 70.0, 82.0, 82.0, 75.0, 75.0, 82.0, 80.9, 88.0]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the width of each bar\nbar_width = 0.15\n\n# Set the positions of the bars on the x-axis\nindex = range(len(data['MedMCQA']))\n\n# Plot the bars for each dataset\nfor i, (key, values) in enumerate(data.items()):\n    ax.bar([p + i * bar_width for p in index], values, bar_width, label=key)\n\n# Set the labels and title\nax.set_xlabel('Dataset')\nax.set_ylabel('Score (%)')\nax.set_title('Scores by Dataset')\nax.set_xticks([p + 3 * bar_width / 2 for p in index])\nax.set_xticklabels(['MedMCQA', 'MedQA (USMLE)', 'PubMed QA', 'MMLU Anatomy', 'MMLU Clinical knowledge', 'MMLU College biology', 'MMLU Medical genetics', 'MMLU Professional medicine'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the chart\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFOE', 'AFEX', 'AFG', 'AFH', 'AFI', 'AFJ', 'AFK', 'AFL', 'AFP', 'AFP', 'AFR', 'AFS', 'AFSC', 'AFSL', 'AFSR', 'AFSS', 'AFST', 'AFTH', 'AFVC', 'AFVT', 'AFWA', 'AFWS', 'DAH', 'IC', 'SS']\nvalues = [45, 42, 41, 39, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]\n\n# Create a bar chart with the specified data\nplt.figure(figsize=(8.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Set the y-axis limits\nplt.ylim(0, 50)\n\n# Add a title to the chart\nplt.title('Non-Validated NLA Categories')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [3, 5, 7, 10]\ny1 = [-4.5, -4.5, -4.5, -4.5]\ny2 = [-4.5, -4.5, -4.5, -4.5]\ny3 = [-4.5, -4.5, -4.5, -4.5]\ny4 = [-4.5, -4.5, -4.5, -4.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'p-', label='LLAMA-Default')\nax.plot(x, y2, 'r-', label='LLAMA-HAG')\nax.plot(x, y3, 'c-', label='Vicuna-Default')\nax.plot(x, y4, 'b-', label='Vicuna-HAG')\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Set the y-axis limits\nax.set_ylim(-5, 0)\n\n# Set the x-axis ticks\nax.set_xticks([3, 5, 7, 10])\n\n# Set the y-axis ticks\nax.set_yticks([-5, -4, -3, -2, -1, 0])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nvalues = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Human Study')\nplt.xlabel('Categories')\nplt.ylabel('Percentage (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\n\"\"\"\n=====================================\nCOPR v.s. Golden (Human Eval)\n=====================================\n\nThis example demonstrates how to create a bar chart with multiple bars for each category.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['HH', 'Reddit', 'IMDB', 'AVG']\ncopr_vs_golden = [22, 40, 35, 26]\ngpt4_eval = [30, 60, 20, 37]\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\n\n# Create the bar chart\nplt.bar(r1, copr_vs_golden, color='red', width=bar_width, edgecolor='grey', label='COPR v.s. Golden')\nplt.bar(r2, gpt4_eval, color='orange', width=bar_width, edgecolor='grey', label='COPR v.s. Golden (GPT-4 Eval)')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nplt.xlabel('Categories', fontweight='bold')\nplt.ylabel('Percentage', fontweight='bold')\nplt.title('COPR v.s. Golden (Human Eval)')\nplt.xticks([r + bar_width / 2 for r in range(len(categories))], categories)\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Accuracy', 'Unfairness']\nmovielens_values = [[35, 35, 35], [10, 10]]\ntenrec_values = [[18, 18, 18], [12, 12]]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot for Movielens\naxes[0].bar(categories, movielens_values[0], color='blue')\naxes[0].bar(categories, movielens_values[1], bottom=movielens_values[0], color='orange')\naxes[0].set_title('Movielens')\naxes[0].set_ylabel('Values')\n\n# Plot for Tenrec\naxes[1].bar(categories, tenrec_values[0], color='blue')\naxes[1].bar(categories, tenrec_values[1], bottom=tenrec_values[0], color='orange')\naxes[1].set_title('Tenrec')\naxes[1].set_ylabel('Values')\n\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart representing the accuracy of different models at various resolutions.\nThe chart includes three models: ImageNet-1k, PAC-FNO, and PAC-FNO, each represented by a different color.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\nmodel_labels = ['ImageNet-1k', 'PAC-FNO', 'PAC-FNO']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the chart\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Set the x-axis label\nax.set_xlabel('Resolutions')\n\n# Set the y-axis label\nax.set_ylabel('Top-1 Acc (%)')\n\n# Set the tick labels for the x-axis\nax.set_xticks(resolutions)\nax.set_xticklabels(resolutions)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 90, 10))\nax.set_yticklabels(range(0, 90, 10))\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right spines to white\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\n\n# Set the color of the bottom and left spines to blue\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the color of the bars\nbar_colors = ['blue', 'blue', 'blue', 'blue']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nbars = ax.bar(resolutions, accuracies, width=bar_width, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n#"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Level 1', 'Level 2', 'Level 4']\nvalues = [50.0, 50.0, 50.0]\nsub_values = [\n    [30.0, 22.0],\n    [28.0, 20.6],\n    [22.9, 16.8]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the main bars\nbars = ax.bar(categories, values, color='yellow')\n\n# Add sub-values on top of each bar\nfor bar, sub_val in zip(bars, sub_values):\n    height = bar.get_height()\n    for val in sub_val:\n        ax.text(bar.get_x() + bar.get_width() / 2, height, f'{val}k', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('# Avg Uploaded Samples')\nax.set_title('Comparison of Categories')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nvalues = [\n    [39.4, 32.84, 19.66, 26.82, 22, 0],\n    [35.18, 33.58, 26.82, 22, 0],\n    [30, 28, 20.84, 22, 0],\n    [24.27, 24.06, 22, 0],\n    [34.06, 34.06, 34.06, 34.06, 34.06, 34.06],\n    [35, 30.84, 28, 24.27, 22, 0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot bars for each category\nfor i, category in enumerate(categories):\n    ax.bar(range(len(values[i])), values[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Rewards')\nax.set_title('Rewards by Categories')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Number of Videos by Profession')\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = range(len(categories))\n\n# Plot the synthetic data bars\nbars_synthetic = ax.bar(index, synthetic_data, bar_width, label='Synthetic data')\n\n# Plot the human-authored data bars\nbars_human = ax.bar([i + bar_width for i in index], human_authored_data, bar_width, label='Human-authored data')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Bar Chart of Categories')\nax.set_xticks([i + bar_width / 2 for i in index])\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: The human body can tolerate only a\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'tiny', 'medium', 'large', 'smaller', 'tall', 'short', 'taller', 'tiniest', 'tallest', 'taller still', 'taller than that', 'taller than that too', 'taller than that too much', 'taller than that too much again', 'taller than that too much again and again', 'taller than that too much again and again and again', 'taller than that too much again and again and again and again', 'taller than that too much again and again and again and again and again', 'taller than that too much again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again and again', 'taller than that too much again and again and again and again and"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Coupe', 'Truck', 'SUV', 'Sedan']\nvalues = [0.75, 0.5, 0.3, 0.1]\n\n# Create a bar chart\nplt.figure(figsize=(6, 2))\nbars = plt.bar(categories, values, color=['green', 'blue', 'blue', 'purple'])\n\n# Add labels and title\nplt.xlabel('Category')\nplt.ylabel('Probability of Improvement')\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.bar(emotions, frequencies, color='red')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each bar chart\ncategories = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvalues = [4000, 6000, 5000, 6000, 7000, 8000]\n\n# Create a bar chart with the specified data\nplt.bar(categories, values, color=['red', 'orange', 'yellow', 'green', 'cyan', 'blue'])\n\n# Set the title of the chart\nplt.title('Number of Videos by Profession')\n\n# Set the x-axis label\nplt.xlabel('Profession')\n\n# Set the y-axis label\nplt.ylabel('Number of Videos')\n\n# Set the tick labels for the y-axis\nplt.yticks(range(0, 9001, 1000))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\n\"\"\"\n=====================================\nBar chart with multiple bars per X-axis\n=====================================\n\nDemonstrating how to create bar charts with multiple bars per X-axis\ngrouped together.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nvalues = [42, 35, 30, 45, 40, 35, 30]\ncolors = ['red', 'red', 'red', 'red', 'red', 'red', 'red']\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\nbars = ax.bar(categories, values, color=colors)\n\nax.set_ylabel('Values')\nax.set_title('Multiple Bars per X-axis')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data\ncities = ['New York -', 'Los Angeles -', 'Chicago -', 'Houston -', 'Phoenix -', 'Philadelphia -']\nexcellent = [50, 40, 30, 20, 10, 0]\ngood = [40, 30, 20, 10, 0, 0]\nmoderate = [30, 20, 10, 0, 0, 0]\npoor = [20, 10, 0, 0, 0, 0]\nvery_poor = [10, 0, 0, 0, 0, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.8\nindex = range(len(cities))\n\nax.bar(index, excellent, bar_width, label='Excellent', color='red')\nax.bar([i + bar_width for i in index], good, bar_width, label='Good', color='pink')\nax.bar([i + 2 * bar_width for i in index], moderate, bar_width, label='Moderate', color='lightgrey')\nax.bar([i + 3 * bar_width for i in index], poor, bar_width, label='Poor', color='blue')\nax.bar([i + 4 * bar_width for i in index], very_poor, bar_width, label='Very Poor', color='darkblue')\n\n# Set labels and title\nax.set_xlabel('Cities')\nax.set_ylabel('Scores')\nax.set_title('City Scores')\nax.set_xticks([i + 2 * bar_width for i in index])\nax.set_xticklabels(cities)\nax.legend()\n\n# Set y-axis limits\nax.set_ylim(0, 70)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [0, 0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the x-axis limits\nax.set_xlim(-80, 0)\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 90, 10))\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(-80, 1, 20))\n\n# Set the title of the chart\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Set the labels for the axes\nax.set_xlabel('Difference (%)')\nax.set_ylabel('Semantic Category')\n\n# Plot the positive differences\nax.barh(categories, positive_differences, color='green', label='Positive Differences')\n\n# Plot the negative differences\nax.barh(categories, negative_differences, color='red', label='Negative Differences')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [7, 7, 6, 6, 6, 6, 5, 5, 4, 4, 3, 3, 2, 1]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.bar(emotions, frequencies, color='blue')\n\n# Add labels and title\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\nplt.title('Emotion Frequency Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each bar chart\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\nvalues = [4.8, 4.8, 4.8, 19.7, 19.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 20)\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 21, 5))\n\n# Set the y-axis label\nax.set_ylabel('Yelp')\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Plot the bars\nbars = ax.bar(categories, values, color='red')\n\n# Add text annotations to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}%',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Patents Filed', 'Research Investment', 'Smartphone Usage', 'Internet Penetration']\nvalues = [2700, 2400, 2600, 2900]\n\n# Create a bar chart with the specified data\nplt.bar(categories, values, color='blue')\n\n# Set the title of the chart\nplt.title('Bar Chart Example')\n\n# Set the x-axis label\nplt.xlabel('Categories')\n\n# Set the y-axis label\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\n\"\"\"\n=====================================\nVisualizing Sentiment Analysis Data\n=====================================\n\nThis example demonstrates how to create a bar chart to visualize sentiment analysis data for different categories of text.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\n\n# Create the bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars1 = ax.bar(r1, synthetic_data, bar_width, label='Synthetic data')\nbars2 = ax.bar(r2, human_authored_data, bar_width, label='Human-authored data')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Sentiment Categories')\nax.set_ylabel('Percentage')\nax.set_title('Sentiment Analysis Data Visualization')\nax.set_xticks([r + bar_width / 2 for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value labels on top of the bars\nfor rect in bars1 + bars2:\n    height = rect.get_height()\n    ax.annotate(f'{height}%',\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\ntime_0 = [0.4, 0.5, 0.3, 0.4, 0.6]\ntime_20 = [0.3, 0.4, 0.2, 0.3, 0.5]\ntime_40 = [0.2, 0.3, 0.1, 0.2, 0.4]\ntime_60 = [0.1, 0.2, 0.1, 0.1, 0.3]\n\n# Create a bar chart with multiple bars for each category\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nbar_width = 0.15\nindex = range(len(categories))\n\nax.bar([i - bar_width for i in index], time_0, bar_width, label='Time 0')\nax.bar(index, time_20, bar_width, label='Time 20')\nax.bar([i + bar_width for i in index], time_40, bar_width, label='Time 40')\nax.bar([i + 2 * bar_width for i in index], time_60, bar_width, label='Time 60')\n\n# Set the title and labels\nax.set_title('Scores by Category Over Time')\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\n\n# Set the x-axis tick labels\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nregions = ['West', 'East', 'South', 'North']\nmetrics = [\n    [40.44, 54.46],\n    [25.36, 32.19, 56.03],\n    [39.63, 48.23, 92.15],\n    [32.84, 65.49]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis labels\nax.set_xticks(range(len(regions)))\nax.set_xticklabels(regions)\n\n# Set the y-axis label\nax.set_ylabel('Air Quality Metrics')\n\n# Set the title of the plot\nax.set_title('Air Quality Metrics by Region')\n\n# Plot the bars\nfor i, region_metrics in enumerate(metrics):\n    ax.bar(i, max(region_metrics), color='blue')\n    ax.bar(i, min(region_metrics), color='red')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores_3_constraint_words = [-2.2, -2.3, -3.3, -3.2]\nscores_5_constraint_words = [-1.9, -1.7, -1.9, -1.9]\nscores_7_constraint_words = [-1.8, -1.6, -1.1, -1.1]\nscores_10_constraint_words = [-1.4, -1.4, -1.1, -0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nr1 = range(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\n\n# Create bars with different colors\nax.bar(r1, scores_3_constraint_words, color='red', width=bar_width, edgecolor='grey', label='3 Constraint Words')\nax.bar(r2, scores_5_constraint_words, color='blue', width=bar_width, edgecolor='grey', label='5 Constraint Words')\nax.bar(r3, scores_7_constraint_words, color='orange', width=bar_width, edgecolor='grey', label='7 Constraint Words')\nax.bar(r4, scores_10_constraint_words, color='cyan', width=bar_width, edgecolor='grey', label='10 Constraint Words')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Scores by group and constraint word count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\nax.set_xticks([r + bar_width * 2 for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each country\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_2018 = [-0.5, -0.3, -0.4, -0.7]\ngdp_growth_2019 = [-0.4, -0.2, -0.3, -0.6]\ngdp_growth_2020 = [-0.3, -0.1, -0.2, -0.5]\ngdp_growth_2021 = [-0.2, 0.0, 0.0, 0.0]\n\n# Create a bar chart with multiple bars for each country\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.2\nindex = range(len(countries))\n\nbars1 = ax.bar([i - bar_width for i in index], gdp_growth_2018, bar_width, label='GDP growth 2018')\nbars2 = ax.bar(index, gdp_growth_2019, bar_width, label='GDP growth 2019')\nbars3 = ax.bar([i + bar_width for i in index], gdp_growth_2020, bar_width, label='GDP growth 2020')\nbars4 = ax.bar([i + 2 * bar_width for i in index], gdp_growth_2021, bar_width, label='GDP growth 2021')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Country')\nax.set_ylabel('GDP Growth Rate (%)')\nax.set_title('Negative GDP Growth Rates by Country and Year')\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(countries)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\npercentages = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nbars = plt.bar(models, percentages, color='blue')\n\n# Add labels and title\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\nplt.title('Human Study')\n\n# Set the y-axis limits\nplt.ylim(0, 85)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: Stacked Bar Chart of Transportation Data\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 85]\ncolors = ['blue', 'cyan', 'lightblue', 'lightgreen']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bars with stacked values\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Stacked Bar Chart of Transportation Data')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: Enhanced Stacked Bar Chart with Textures and Annotated Values\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_units = [80, 60, 40, 20, 0, 0, 0]\nproduct_a_sales = [50, 30, 10, 0, 0, 0, 0]\nproduct_c_sales = [40, 20, 0, 0, 0, 0, 0]\nproduct_e_sales = [30, 10, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the background color of the plot area\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Set the x-axis label\nax.set_xlabel('Product Categories')\n\n# Set the y-axis label\nax.set_ylabel('Sales Units')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 90, 10))\nax.set_yticklabels(range(0, 90, 10))\n\n# Set the grid lines\nax.grid(True, linestyle='--', linewidth=0.5)\n\n# Plot the bars\nbar_width = 0.8\nindex = range(len(categories))\nbar1 = ax.bar(index, sales_units, bar_width, label='Sales Units')\nbar2 = ax.bar(index, product_a_sales, bar_width, bottom=sales_units, label='Product A Sales')\nbar3 = ax.bar(index, product_c_sales, bar_width, bottom=[sum(x) for x in zip(sales_units, product_a_sales)], label='Product C Sales')\nbar4 = ax.bar(index, product_e_sales, bar_width, bottom=[sum(x) for x in zip(sales_units, product_a_sales, product_c_sales)], label='Product E Sales')\n\n# Add annotations to the bars\nfor i, v in enumerate(sales_units):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [84.3, 9.12, 37.9]\nobserved_fgt = [83, 9.12, 37.9]\nfeature_embedding_distance = [0.83, 0.6, 0.11]\n\n# Create a bar chart with three bars for each category\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.bar(categories, probing_fgt, color='green')\nax.bar(categories, observed_fgt, bottom=probing_fgt, color='darkgreen')\nax.bar(categories, feature_embedding_distance, bottom=[p + o for p, o in zip(probing_fgt, observed_fgt)], color='yellow')\n\n# Set the title and labels\nax.set_title('Feature Embedding Distance')\nax.set_xlabel('Categories')\nax.set_ylabel('Feature Embedding Distance (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = [\n    [10, 8, 12, 10, 6, 8],\n    [11, 5, 10, 10, 12, 15],\n    [10, 8, 12, 10, 6, 8],\n    [11, 5, 10, 10, 12, 15]\n]\n\n# Define the labels for the x-axis\nlabels = ['1', '2', '3', '4', '5', '6']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the labels for the y-axis\nax.set_ylabel('Scores')\n\n# Set the labels for the x-axis\nax.set_xlabel('Human Annotator')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(labels)))\nax.set_xticklabels(labels)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 51, 10))\nax.set_yticklabels(range(0, 51, 10))\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Human Annotator', color='black')\nax.set_ylabel('Scores', color='black')\n\n# Set the color of the title\nax.set"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\n\"\"\"\n=====================================\nStacked bar chart with different patterns\n=====================================\n\nThis example demonstrates how to create a stacked bar chart with different patterns for each bar.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['coreutils', 'gizip', 'scp', 'libq', 'mcf', 'omnet.', 'perl']\nvalues = [\n    [100, 60, 50],\n    [80, 70, 60],\n    [60, 50, 40],\n    [40, 30, 20],\n    [20, 10, 5],\n    [10, 5, 2],\n    [5, 2, 1]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the width of the bars\nbar_width = 0.8\n\n# Set the positions of the bars\nindex = np.arange(len(categories))\n\n# Plot the bars\nfor i, value in enumerate(values):\n    ax.bar(index, value, bar_width, bottom=[sum(values[j][i] for j in range(k)) for k in range(i + 1)], label=f'Bar {i + 1}', hatch='|')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Stacked Bar Chart with Different Patterns')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(models, improvement, color='blue')\n\n# Add labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Improvement [%]')\nax.set_title('Model Performance Improvement by Language')\n\n# Set the y-axis limits\nax.set_ylim(-1, 5)\n\n# Add language labels\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code-maker\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nfiscal_quarter = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 2.2, 1.0, 0.4, -0.8]\nnasdaq_index = [1.5, 2.2, 3.9, 4.6, -1.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for Dow Jones Index\nax.bar(fiscal_quarter, dow_jones_index, color='green', label='Dow Jones Index')\n\n# Plot bars for Nasdaq Index\nax.bar(fiscal_quarter, nasdaq_index, bottom=dow_jones_index, color='orange', label='Nasdaq Index')\n\n# Set title and labels\nax.set_title('Index Change (%)')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\n\n# Set y-axis limits\nax.set_ylim(-5, 5)\n\n# Add a horizontal line at y=0\nax.axhline(0, color='black', linewidth=0.5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\nvalues = [39.4, 34.06, 30.84, 34.06]\ncolors = ['red', 'blue', 'green', 'cyan']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add category labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, bar.get_label(), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Categories')\nax.set_xlabel('Series Labels')\nax.set_ylabel('Reward Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntruthful_recall = [46.3, 57.9, 53.8, 43.7]\nmisleading_recall = [30.1, 34, 20, 19.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the x-axis labels\nx_labels = ['Misleading:2:0', 'Misleading:2:0', 'Misleading:2:0', 'Misleading:2:0']\n\n# Plot the bars for truthful recall\nax.bar(x_labels, truthful_recall, color='black')\n\n# Plot the bars for misleading recall\nax.bar(x_labels, misleading_recall, color='pink', bottom=truthful_recall)\n\n# Set the title of the plot\nax.set_title('Truthful:Misleading = 2:0')\n\n# Set the y-axis label\nax.set_ylabel('Misleading Recall')\n\n# Set the x-axis label\nax.set_xlabel('Misleading:2:0')\n\n# Set the y-axis limits\nax.set_ylim(-40, 60)\n\n# Set the y-axis ticks\nax.set_yticks(range(-40, 61, 10))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year = [200, 400, 800, 100]\nprevious_year = [300, 500, 900, 110]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('coolwarm')\n\n# Plot the bars for the current year\nbars_current = ax.bar(categories, current_year, color=cmap(0.2), label='Current Year')\n\n# Plot the bars for the previous year\nbars_previous = ax.bar(categories, previous_year, bottom=current_year, color=cmap(0.8), label='Previous Year')\n\n# Add labels and title\nax.set_xlabel('Industry Sectors')\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\nax.set_title('Environmental Impact by Sector')\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(-1600, 0)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart representing average city temperatures.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 13, 17, 25, 19]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nbars = plt.bar(cities, temperatures, color='skyblue')\n\n# Add labels and title\nplt.xlabel('City')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.title('Average City Temperatures')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: Annual Pollution Emission Reductions\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [150, 140, 160, 170]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(regions, emissions_2020, color='red', label='2020 Emissions')\nax.bar(regions, emissions_2021, color='blue', label='2021 Emissions')\n\n# Set the title and labels\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xlabel('Regions')\nax.set_ylabel('Emissions')\n\n# Set the y-axis limits\nax.set_ylim(-200, 0)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Question 1', 'Question 2', 'Question 3 Responses', 'Question 4', 'Question 5']\nquestion_1 = [26, 13, 10, 17, 10]\nquestion_2 = [32, 10, 22, 15, 10]\nquestion_3_responses = [35, 29, 37, 32, 21]\nquestion_4 = [40, 14, 33, 15, 13]\nquestion_5 = [40, 14, 33, 15, 13]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(0, 5)\n\n# Set the y-axis limits\nax.set_ylim(0, 90)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 100, 10))\nax.set_yticklabels([f'{i}%' for i in range(0, 100, 10)])\n\n# Set the title of the plot\nax.set_title('Survey Results')\n\n# Set the x-axis label\nax.set_xlabel('Questions')\n\n# Set the y-axis label\nax.set_ylabel('Percentage (%)')\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the positions of the bars\nindex = range(len(categories))\n\n# Plot the bars for each question\nbars_question_1 = ax.bar(index, question_1, bar_width, label='Strongly disagree', color='blue')\nbars_question_2 = ax.bar([i + bar_width for i in index], question_2, bar_width, label='Disagree', color='green')\nbars_question_3_responses = ax.bar([i + 2 * bar_width for i in index], question_3_responses, bar_width, label='Neither agree nor disagree', color='orange')\nbars_question_4 = ax.bar([i + 3 * bar_width for i in index], question_4, bar_width, label='Agree', color='pink')\nbars_question_5 = ax.bar([i + 4 * bar_width for i in index], question_5, bar_width, label='Strongly agree', color='purple')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xticks([i + 2 * bar_width for i in index])\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Add a horizontal line at y=8\nplt.axhline(y=8, color='red', linestyle='--')\n\n# Set the title and labels\nplt.title('Bar Chart with Horizontal Line')\nplt.xlabel('Top-10 super families in training dataset')\nplt.ylabel('Accuracy')\n\n# Set the y-axis limits\nplt.ylim(0, 10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores = [1.5, 1.2, 0.8, 0.6]\n\n# Create a bar chart\nplt.bar(categories, scores, color='blue')\n\n# Set the title and labels\nplt.title('Taboo')\nplt.xlabel('Num of Constraint Words')\nplt.ylabel('Score')\n\n# Set the y-axis limits\nplt.ylim(-2, 2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bars\ncategories = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntruthful_recall = [45.3, 56.9, 53.8, 27]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Set the color of the bars\nbar_colors = ['blue', 'green', 'blue', 'green']\n\n# Plot the bars\nbars = ax.bar(categories, truthful_recall, color=bar_colors)\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Truthful: Misleading Recall = 2:0')\nax.set_xlabel('Categories')\nax.set_ylabel('Misleading Recall')\n\n# Set the y-axis limits\nax.set_ylim(0, 60)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan', 'Sedan New']\nvalues = [29, 29, 25, 25, 20, 20]\n\n# Create a bar chart\nplt.bar(categories, values, color='blue')\n\n# Set the title of the chart\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Set the x-axis label\nplt.xlabel('Category')\n\n# Set the y-axis label\nplt.ylabel('Probability of Improvement')\n\n# Set the y-axis limits\nplt.ylim(0, 30)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\ndisapproval = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunbothered = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.bar(emotions, disapproval, color='red', label='Disapproval')\nax.bar(emotions, joy, color='red', bottom=disapproval, label='Joy')\nax.bar(emotions, relief, color='red', bottom=[d + j for d, j in zip(disapproval, joy)], label='Relief')\nax.bar(emotions, gratitude, color='red', bottom=[d + j + r for d, j, r in zip(disapproval, joy, relief)], label='Gratitude')\nax.bar(emotions, annoyance, color='red', bottom=[d + j + r + g for d, j, r, g in zip(disapproval, joy, relief, gratitude)], label='Annoyance')\nax.bar(emotions, nervousness, color='red', bottom=[d + j + r + g + a for d, j, r, g, a in zip(disapproval, joy, relief, gratitude, annoyance)], label='Nervousness')\nax.bar(emotions, pride, color='red', bottom=[d + j + r + g + a + n for d, j, r, g, a, n in zip(disapproval, joy, relief, gratitude, annoyance, nervousness)], label='Pride')\nax.bar(emotions, sadness, color='red', bottom=[d + j + r + g + a + n + p for d, j, r, g, a, n, p in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride)], label='Sadness')\nax.bar(emotions, unbothered, color='red', bottom=[d + j + r + g + a + n + p + s for d, j, r, g, a, n, p, s in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], label='Unbothered')\nax.bar(emotions, amusement, color='red', bottom=[d + j + r + g + a + n + p + s + u for d, j, r, g, a, n, p, s, u in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unbothered)], label='Amusement')\n\n# Set the title and labels\nax.set_title('Emotion Frequency Distribution')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency Metric 1 (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('1st Experiment')\n\n# Define the data for the bars\ndata = [\n    [0.0, 0.2, 0.4],\n    [0.0, 0.2, 0.4],\n    [0.0, 0.2, 0.4],\n    [0.0, 0.2, 0.4]\n]\n\n# Define the labels for the bars\nlabels = ['The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\n\n# Define the colors for the bars\ncolors = ['cyan', 'orange', 'red']\n\n# Plot the bars\nfor i, label in enumerate(labels):\n    ax.bar(label, data[i], color=colors[i])\n\n# Set the x-axis limits\nax.set_xlim(0, 3)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.8)\n\n# Set the x-axis tick labels\nax.set_xticks(range(3))\nax.set_xticklabels(['1st Experiment', '2nd Experiment', '3rd Experiment'])\n\n# Set the y-axis tick labels\nax.set_yticks([0.0, 0.2, 0.4, 0.6, 0.8])\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis label\nax.set_xlabel('Experiment')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each country\ncountries = ['Japan', 'Australia', 'Canada', 'Germany']\ndata = [\n    [1500, 1000, 500, 200],\n    [1500, 1000, 500, 200],\n    [1500, 1000, 500, 200],\n    [1500, 1000, 500, 200]\n]\n\n# Create a bar chart with grouped bars\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nbar_width = 0.2\nindex = range(len(countries))\n\n# Plot the bars for each country\nfor i, country_data in enumerate(data):\n    ax.bar([p + bar_width * i for p in index], country_data, bar_width, label=f'Country {i+1}')\n\n# Set the title and labels\nax.set_title('Energy Consumption and Production')\nax.set_xlabel('Country')\nax.set_ylabel('Values')\n\n# Set the x-axis tick labels\nax.set_xticks([p + bar_width * (len(data) - 1) / 2 for p in index])\nax.set_xticklabels(countries)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar charts\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 31, 10))\n\n# Set the title of the plot\nax.set_title('Original')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Plot the bars for synthetic data\nbars_synthetic = ax.bar(categories, synthetic_data, color='blue', alpha=0.5, label='Synthetic Data')\n\n# Plot the bars for human-authored data\nbars_human_authored = ax.bar(categories, human_authored_data, color='green', alpha=0.5, label='Human-Authored Data')\n\n# Add labels to the bars\nfor bar in bars_synthetic + bars_human_authored:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width() / 2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['Beauty', 'MovieLens-1M', 'Yelp', 'More']\nvalues_beauty = [5, 5, 6, 8, 10]\nvalues_movielens = [5.1, 3.0, 2.9, 3.1, 5.1]\nvalues_yelp}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\nscores = [-3.2, -3.3, -3.2, -3.3]\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('Scores by group and constraint word count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Set the y-axis limits\nax.set_ylim(-4, 0)\n\n# Add a legend\nax.legend(constraint_words, loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the first bar chart\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the second bar chart\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the third bar chart\nx3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny3 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the fourth bar chart\nx4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny4 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the fifth bar chart\nx5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny5 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the sixth bar chart\nx6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny6 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the seventh bar chart\nx7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny7 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the eighth bar chart\nx8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny8 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the ninth bar chart\nx9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny9 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the tenth bar chart\nx10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny10 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the eleventh bar chart\nx11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny11 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the twelfth bar chart\nx12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny12 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the thirteenth bar chart\nx13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny13 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the fourteenth bar chart\nx14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny14 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the fifteenth bar chart\nx15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny15 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the sixteenth bar chart\nx16 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny16 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the seventeenth bar chart\nx17 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny17 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the eighteenth bar chart\nx18 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny18 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the nineteenth bar chart\nx19 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny19 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the twentieth bar chart\nx20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny20 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the twenty-first bar chart\nx21 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny21 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the twenty-second bar chart\nx22 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny22 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the twenty-third bar chart\nx23 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny23 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the twenty-fourth bar chart\nx24 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny24 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the twenty-fifth bar chart\nx25 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny25 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the twenty-sixth bar chart\nx26 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny26 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the twenty-seventh bar chart\nx27 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny27 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the twenty-eighth bar chart\nx28 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny28 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the twenty-ninth bar chart\nx29 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny29 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the thirtieth bar chart\nx30 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny30 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the thirtieth-first bar chart\nx31 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny31 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the thirtieth-second bar chart\nx32 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny32 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the thirtieth-third bar chart\nx33 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny33 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the thirtieth-fourth bar chart\nx34 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny34 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the thirtieth-fifth bar chart\nx35 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny35 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the thirtieth-sixth bar chart\nx36 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny36 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the thirtieth-seventh bar chart\nx37 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny37 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Define the data for the thirtieth-eighth bar chart\nx38 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny38 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Define the data for the thirtieth-ninth bar chart\nx39 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny39 ="}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('GENIA')\n\n# Define the data for the bars\ndata = [\n    [40, 20, 20, 10],\n    [40, 20, 20, 10],\n    [40, 20, 20, 10],\n    [40, 20, 20, 10]\n]\n\n# Define the labels for the x-axis\nlabels = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\n\n# Define the colors for the bars\ncolors = ['pink', 'orange', 'green', 'pink', 'orange', 'green']\n\n# Plot the bars\nfor i, row in enumerate(data):\n    ax.bar(labels, row, color=colors[i*3:i*3+3])\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the y-axis label\nax.set_ylabel('Error correction rate (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscore_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscore_b = [15, 15, 15, 15, 15, 15, 15]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nbars = ax.bar(models, score_a, color='red')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Score A (%)')\nax.set_title('Human Study')\n\n# Set the y-axis limits\nax.set_ylim(0, 85)\n\n# Add value labels on top of the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\npheme_data = {\n    'GCN': [0.75, 0.80, 0.75],\n    'RvNN': [0.80, 0.85, 0.80],\n    'Hyphen': [0.75, 0.80, 0.75],\n    'GET': [0.85, 0.90, 0.85]\n}\n\nllm_mis_data = {\n    'GCN': [0.80, 0.85, 0.80],\n    'RvNN': [0.85, 0.90, 0.85],\n    'Hyphen': [0.80, 0.85, 0.80],\n    'GET': [0.85, 0.90, 0.85]\n}\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the data for Pheme\nfor pheme, scores in pheme_data.items():\n    axes[0].bar(pheme, scores, color='blue')\n\n# Plot the data for LLM-mis\nfor llm_mis, scores in llm_mis_data.items():\n    axes[1].bar(llm_mis, scores, color='blue')\n\n# Set titles and labels\naxes[0].set_title('Pheme')\naxes[1].set_title('LLM-mis')\naxes[0].set_xlabel('Pheme')\naxes[1].set_xlabel('LLM-mis')\naxes[0].set_ylabel('Macro F1-score')\naxes[1].set_ylabel('Macro F1-score')\n\n# Set y-axis limits\naxes[0].set_ylim(0.70, 0.90)\naxes[1].set_ylim(0.70, 0.90)\n\n# Add a legend\nlegend_labels = ['Democratic', 'Mixed', 'Republican']\naxes[0].legend(legend_labels, loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = {\n    'human': [400, 500, 600, 700, 800],\n    'gpt4': [400, 500, 600, 700, 800],\n    'gpt4-cot': [400, 500, 600, 700, 800]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Set the x-axis label\nax.set_xlabel('Role')\n\n# Set the y-axis label\nax.set_ylabel('Count')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(data)))\nax.set_xticklabels(data.keys())\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 901, 100))\nax.set_yticklabels(range(0, 901, 100))\n\n# Set the color map for the bars\ncmap = plt.cm.get_cmap('viridis', len(data['human']))\n\n# Plot the bars\nfor i, (role, counts) in enumerate(data.items()):\n    ax.bar(i, counts[0], color=cmap(i), label=role)\n    ax.bar(i, counts[1], bottom=counts[0], color=cmap(i))\n    ax.bar(i, counts[2], bottom=counts[0] + counts[1], color=cmap(i))\n    ax.bar(i, counts[3], bottom=counts[0] + counts[1] + counts[2], color=cmap(i))\n    ax.bar(i, counts[4], bottom=counts[0] + counts[1] + counts[2] + counts[3], color=cmap(i))\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data\ncategories = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_data = [20.4, 23.8, 14.3, 16.7, 0]\nbrainwave_data = [7.1, 38.1, 14.3, 16.7, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot effort data\nax.bar(categories, effort_data, color='red', label='Effort')\n\n# Plot brainwave data\nax.bar(categories, brainwave_data, color='green', label='Brainwave')\n\n# Set title and labels\nax.set_title('Survey Results')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny1 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny2 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny3 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny4 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny5 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny6 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny7 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny8 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny9 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny10 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny11 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny12 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny13 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny14 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny15 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny16 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny17 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny18 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny19 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny20 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny21 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny22 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny23 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny24 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny25 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny26 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny27 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny28 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny29 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny30 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny31 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny32 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny33 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny34 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny35 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny36 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny37 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny38 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny39 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny40 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny41 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny42 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny43 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny44 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny45 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny46 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny47 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny48 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny49 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny50 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny51 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny52 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny53 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny54 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny55 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny56 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny57 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny58 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny59 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny60 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny61 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny62 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny63 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny64 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny65 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny66 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny67 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny68 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny69 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny70 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny71 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny72 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny73 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny74 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny75 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny76 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny77 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny78 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny79 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny80 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny81 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny82 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny83 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny84 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny85 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny86 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny87 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny88 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny89 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny90 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny91 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny92 = [-10, -10, -10, -10, -10, -1"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: The image depicts a bar chart with two sets of data. The first set represents the performance improvement of a model by language, while the second set represents the model with language. The first set has five bars, each representing a different language and its corresponding performance improvement value. The second set has six bars, each representing a different model and its corresponding model with language value. The colors of the bars in the first set are blue, red, orange, yellow, and green, respectively. The colors of the bars in the second set are also blue, red, orange, yellow, and green, respectively. The x-axis labels for the first set are 'EN', 'DE', 'FR', 'IT', and 'ES', while the x-axis labels for the second set are 'Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', and 'Bactrian-X ES'. The y-axis labels for both sets are 'Model Performance Improvement by Language' and 'Model with Language', respectively. The title of the image is 'Model Performance Improvement by Language'.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data for the first set\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\nperformance_improvement = [3.5, 2.3, 4.4, 1.3, -0.7]\n\n# Data for the second set\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nmodel_with_language = [-1.0, 0.3, 3.4, -3.3, -2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the first set of data\nax.bar(languages, performance_improvement, color=['blue', 'red', 'orange', 'yellow', 'green'])\n\n# Plot the second set of data\nax.bar(models, model_with_language, color=['blue', 'red', 'orange', 'yellow', 'green'], bottom=performance_improvement)\n\n# Set the title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Language')\nax.set_ylabel('Model with Language')\n\n# Set the y-axis limits\nax.set_ylim(-5, 5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['Random', 'Ours', 'SOTA']\nvalues_random = [66.3, 61.9, 53.8]\nvalues_ours = [49.3, 45.7, 41.6]\nvalues_sota = [36.3, 31.5, 40.2]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot for Truthful:Misleading = 2:0\naxes[0, 0].bar(categories, values_random, color='blue')\naxes[0, 0].bar(categories, values_ours, bottom=values_random, color='red')\naxes[0, 0].bar(categories, values_sota, bottom=[v + o for v, o in zip(values_random, values_ours)], color='blue')\naxes[0, 0].set_title('Truthful:Misleading = 2:0')\n\n# Plot for Truthful:Misleading = 2:1\naxes[0, 1].bar(categories, values_random, color='blue')\naxes[0, 1].bar(categories, values_ours, bottom=values_random, color='red')\naxes[0, 1].bar(categories, values_sota, bottom=[v + o for v, o in zip(values_random, values_ours)], color='blue')\naxes[0, 1].set_title('Truthful:Misleading = 2:1')\n\n# Plot for Truthful:Misleading = 2:2\naxes[1, 0].bar(categories, values_random, color='blue')\naxes[1, 0].bar(categories, values_ours, bottom=values_random, color='red')\naxes[1, 0].bar(categories, values_sota, bottom=[v + o for v, o in zip(values_random, values_ours)], color='blue')\naxes[1, 0].set_title('Truthful:Misleading = 2:2')\n\n# Plot for Truthful:Misleading = 1:2\naxes[1, 1].bar(categories, values_random, color='blue')\naxes[1, 1].bar(categories, values_ours, bottom=values_random, color='red')\naxes[1, 1].bar(categories, values_sota, bottom=[v + o for v, o in zip(values_random, values_ours)], color='blue')\naxes[1, 1].set_title('Truthful:Misleading = 1:2')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first subplot\ndata1 = [\n    [50, 40, 30, 20, 10],\n    [50, 40, 30, 20, 10],\n    [50, 40, 30, 20, 10],\n    [50, 40, 30, 20, 10],\n    [50, 40, 30, 20, 10]\n]\n\n# Data for the second subplot\ndata2 = [\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20]\n]\n\n# Data for the third subplot\ndata3 = [\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20]\n]\n\n# Data for the fourth subplot\ndata4 = [\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20],\n    [60, 50, 40, 30, 20]\n]\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot data for each subplot\nfor ax, data in zip(axes.flatten(), [data1, data2, data3, data4]):\n    ax.bar(range(1, 6), data[0], color='red')\n    ax.bar(range(1, 6), data[1], color='blue')\n    ax.bar(range(1, 6), data[2], color='green')\n    ax.bar(range(1, 6), data[3], color='orange')\n    ax.bar(range(1, 6), data[4], color='purple')\n\n# Set titles and labels\naxes[0, 0].set_title('Human Labeling and Agreement Bias Checking 1')\naxes[0, 0].set_xlabel('Human Annotator')\naxes[0, 0].set_ylabel('Scores')\n\naxes[0, 1].set_title('Human Labeling and Agreement Bias Checking 2')\naxes[0, 1].set_xlabel('Human Annotator')\naxes[0, 1].set_ylabel('Scores')\n\naxes[1, 0].set_title('Human Labeling and Agreement Bias Checking 3')\naxes[1, 0].set_xlabel('Human Annotator')\naxes[1, 0].set_ylabel('Scores')\n\naxes[1, 1].set_title('Human Labeling and Agreement Bias Checking 4')\naxes[1, 1].set_xlabel('Human Annotator')\naxes[1, 1].set_ylabel('Scores')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_search_scores = [54.9, 71.5, 79.2, 60.3, 54.5, 42.4, 7.1, 89.2, 2.0]\nbeam_search_scores = [38.3, 79.2, 60.3, 56.8, 92.6, 83.3, 80.2, 86.4, 83.3]\n\n# Create a bar chart with two sets of bars\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.35\nindex = range(len(models))\n\nbars1 = ax.bar(index, contrastive_search_scores, bar_width, label='Contrastive Search', color='cyan')\nbars2 = ax.bar([i + bar_width for i in index], beam_search_scores, bar_width, label='Beam Search', color='orange')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Performance Comparison by Model')\nax.set_xticks([i + bar_width / 2 for i in index])\nax.set_xticklabels(models)\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code-maker\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ndata1 = [150.0, 180.0, 75.0, 90.0, 80.0]\ndata2 = [2.5, 2.0, 1.5, 2.0, 2.0]\ndata3 = [60.0, 55.0, 70.0, 72.0, 70.0]\ndata4 = [80.0, 85.0, 88.0, 80.0, 80.0]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot for Dataset 1\naxes[0, 0].bar(categories, data1, color='orange')\naxes[0, 0].set_title('Dataset 1')\n\n# Plot for Dataset 2\naxes[0, 1].bar(categories, data2, color='blue')\naxes[0, 1].set_title('Dataset 2')\n\n# Plot for Dataset 3\naxes[1, 0].bar(categories, data3, color='green')\naxes[1, 0].set_title('Dataset 3')\n\n# Plot for Dataset 4\naxes[1, 1].bar(categories, data4, color='yellow')\naxes[1, 1].set_title('Dataset 4')\n\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the chart\ncolors = ['neutral', 'yellow high', 'yellow low', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'red high']\nsam_ratings = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]\nvalues = [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nbars = ax.barh(colors, sam_ratings, height=0.5, color='lightgrey')\n\n# Add value labels to each bar\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, f'{width}', va='center', ha='left')\n\n# Set the title and labels\nax.set_title('Dominance')\nax.set_xlabel('SAM Rating')\nax.set_ylabel('Color')\n\n# Set the x-axis limits\nax.set_xlim(1, 9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Define the data for each activity\nactivities = ['Gaming Duration', 'Exercise Duration', 'Reading Duration', 'Music Playtime']\ndurations = [20, 30, 40, 50, 60, 70, 80, 90]\ngaming_duration = [10, 15, 20, 25, 30, 35, 40, 45]\nexercise_duration = [12, 18, 24, 30, 36, 42, 48, 54]\nreading_duration = [14, 20, 26, 32, 38, 44, 50, 56]\nmusic_playtime = [16, 22, 28, 34, 40, 46, 52, 58]\n\n# Plot the data\nax.plot(durations, gaming_duration, label='Gaming Duration')\nax.plot(durations, exercise_duration, label='Exercise Duration')\nax.plot(durations, reading_duration, label='Reading Duration')\nax.plot(durations, music_playtime, label='Music Playtime')\n\n# Set the title and labels\nax.set_title('Daily Activity Durations')\nax.set_xlabel('Duration (minutes)')\nax.set_ylabel('Activity')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ncategories = ['Llama-70b (T2TT)', 'Llama-70b (S2TT)']\nbleu_values = [18, 18]\nbleu_errors = [[2, 2], [2, 2]]\nbloeu_values = [20, 20]\nbloeu_errors = [[2, 2], [2, 2]]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Plot BLEU values with error bars\nax.errorbar(categories, bleu_values, yerr=bleu_errors, fmt='o', capsize=5, label='BLEU')\n\n# Plot BLOEU values with error bars\nax.errorbar(categories, bloeu_values, yerr=bloeu_errors, fmt='o', capsize=5, label='BLOEU')\n\n# Set the title and labels\nax.set_title('Comparison of BLEU and BLOEU Scores')\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\n\n# Add a vertical line at the specified position\nax.axvline(x=1, color='r', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx_labels = ['AlphaBeta', 'z+', 'Gamma(\u03b3 = 0.05)', 'Gamma(\u03b3 = 0.1)', 'Gamma(\u03b3 = 0.25)']\ny_values = [50, 45, 40, 35, 30]\n\n# Plot the bars\nbars = ax.bar(x_labels, y_values, color='white', edgecolor='black')\n\n# Add orange lines\nfor bar in bars:\n    height = bar.get_height()\n    ax.plot([bar.get_x(), bar.get_x() + bar.get_width()], [height, height], color='orange')\n\n# Set the title and labels\nax.set_title('(t) \u0394AF')\nax.set_xlabel('Parameter')\nax.set_ylabel('(t) \u0394AF')\n\n# Set the y-axis limits\nax.set_ylim(25, 60)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\nvalues = [\n    [875, 875],\n    [875, 875],\n    [850, 850],\n    [850, 850],\n    [825, 825]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(category, values[i], color='blue')\n\n# Set the title and labels\nax.set_title('Execution Accuracy')\nax.set_xlabel('Category')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(750, 900)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/notebooks/autogalaxy/examples/plotting/plot/galaxy/plots.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first subplot\ndata1 = [0.88, 0.87, 0.83]\nlabels1 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\n\n# Plot the data\nax.bar(labels1, data1, color=['blue', 'brown', 'green'])\n\n# Set the title and labels\nax.set_title('Region Classification Accuracy')\nax.set_xlabel('Region')\nax.set_ylabel('Classification Accuracy')\n\n# Define the data for the second subplot\ndata2 = [9.00, 9.33, 10.00, 11.00, 12.00, 13.00, 14.00, 15.00, 16.00, 17.00, 18.00, 19.00, 20.00]\nlabels2 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\n\n# Create a second subplot\nax2 = ax.twinx()\nax2.bar(labels2, data2, color='grey', alpha=0.5)\n\n# Set the y-axis limits for the second subplot\nax2.set_ylim(0, 25)\n\n# Set the title and labels for the second subplot\nax2.set_title('Slice Mean Error (ms)')\nax2.set_ylabel('Slice Mean Error')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 5))\n\n# Define the data\ncategories = ['w/o att', 'w/o DP', '1xQ', '20xQ', '200xQ']\nz_scores = [5, 10, 15, 20, 25]\nthreshold = 15\n\n# Plot the data\nfor i, category in enumerate(categories):\n    if category == 'w/o att':\n        ax.plot([i], [z_scores[i]], 'bo')\n    elif category == 'w/o DP':\n        ax.plot([i], [z_scores[i]], 'ro')\n    elif category == '1xQ':\n        ax.plot([i], [z_scores[i]], 'go')\n    elif category == '20xQ':\n        ax.plot([i], [z_scores[i]], 'mo')\n    elif category == '200xQ':\n        ax.plot([i], [z_scores[i]], 'co')\n\n# Draw a horizontal line at the threshold\nax.axhline(y=threshold, color='r', linestyle='--')\n\n# Set the title and labels\nax.set_title('Z-Score')\nax.set_xlabel('Categories')\nax.set_ylabel('Z-Score')\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the y-axis limits\nax.set_ylim(-10, 30)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5],\n    [1.2, 1.3, 1.4, 1.5]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nbars = ax.bar(categories, values[0], color='blue')\nfor i in range(1, len(values)):\n    bars = ax.bar(categories, values[i], bottom=[sum(x) for x in zip(*values[:i])], color=plt.cm.tab20(i))\n\n# Set the title and labels\nax.set_title('Mean')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plots\ndata = [\n    [50, 70, 90],\n    [60, 80, 100],\n    [70, 90, 110],\n    [80, 100, 120],\n    [90, 110, 130],\n    [100, 120, 140],\n    [110, 130, 150],\n    [120, 140, 160]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Plot each bar chart\nfor i, row in enumerate(data):\n    ax.bar(range(1, 4), row, color='blue', edgecolor='black')\n\n# Set the title and labels\nax.set_title('Bar Charts')\nax.set_xlabel('Run')\nax.set_ylabel('Value')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3])\nax.set_xticklabels(['Run 1', 'Run 2', 'Run 3'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/autogalaxy/plotting/plotter.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['AR', 'LSTMAlpha', 'LSTMBeta', 'AE', 'EncDecAD', 'SRCNN', 'AnomalyTransformer', 'TimesNet', 'Donut', 'TFAD']\nvalues = [\n    [0.8, 0.6, 0.4, 0.2],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.8, 0.6, 0.4, 0.2],\n    [0.8, 0.6, 0.4, 0.2]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nfor i, category in enumerate(categories):\n    ax.barh([i], values[i], color='blue')\n\n# Set labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Category')\nax.set_title('Bar Chart Example')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Bert Base', 'MacBERT', 'English HLM']\nsubcategories = ['EME sentences', 'Neutral sentences', 'ME sentences']\ndata = [\n    [0.8, 0.9, 0.7],\n    [0.6, 0.5, 0.4],\n    [0.2, 0.3, 0.1]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(10, 4))\n\n# Plot the data\nfor ax, category in zip(axes[:-1], categories):\n    for subcat, values in zip(subcategories, data):\n        ax.scatter([i for i in range(len(values))], values, label=subcat)\n    ax.set_title(category)\n    ax.set_xlabel('Subcategory')\n    ax.set_ylabel('Value')\n    ax.legend()\n\n# Plot the last subplot with English HLM\nlast_ax = axes[-1]\nfor subcat, values in zip(subcategories, data):\n    last_ax.scatter([i for i in range(len(values))], values, label=subcat)\nlast_ax.set_title('English HLM')\nlast_ax.set_xlabel('Subcategory')\nlast_ax.set_ylabel('Value')\nlast_ax.legend()\n\nplt.tight_layout()\nplt.show()\n\"\"\""}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/victorlei/image2code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Set titles for each subplot\ntitles = ['Ratings', 'Intrusion']\nfor ax, title in zip(axes.flatten(), titles):\n    ax.set_title(title)\n\n# Define the data for the plots\ndata = [\n    [2.4, 2.6],\n    [2.4, 2.6],\n    [2.4, 2.6],\n    [2.4, 2.6]\n]\n\n# Plot the data on the subplots\nfor i, ax in enumerate(axes.flatten()):\n    ax.bar(['Our Model', 'NTM+CL'], data[i], color=['red', 'green'])\n\n# Adjust the layout of the subplots\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/autogalaxy/plotting/autogalaxy_plotter.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 3, figsize=(10.0, 5.0), sharex=True, sharey=True)\n\n# Define the data for each subplot\ndata_sets = [\n    (['target', 'control'], [6, 6], [1.4, 1.4], [0.7, 0.7], [1.8, 1.8], [0.9, 0.9], [1.6, 1.6], [0.5, 0.5]),\n    (['target', 'control'], [6, 6], [1.4, 1.4], [0.7, 0.7], [1.8, 1.8], [0.9, 0.9], [1.6, 1.6], [0.5, 0.5]),\n    (['target', 'control'], [6, 6], [1.4, 1.4], [0.7, 0.7], [1.8, 1.8], [0.9, 0.9], [1.6, 1.6], [0.5, 0.5]),\n    (['target', 'control'], [6, 6], [1.4, 1.4], [0.7, 0.7], [1.8, 1.8], [0.9, 0.9], [1.6, 1.6], [0.5, 0.5]),\n    (['target', 'control'], [6, 6], [1.4, 1.4], [0.7, 0.7], [1.8, 1.8], [0.9, 0.9], [1.6, 1.6], [0.5, 0.5]),\n    (['target', 'control'], [6, 6], [1.4, 1.4], [0.7, 0.7], [1.8, 1.8], [0.9, 0.9], [1.6, 1.6], [0.5, 0.5])\n]\n\n# Plot the data on each subplot\nfor ax, (groups, correct_reaction_times, correct_response_ratios, reaction_times, lex_spans, lex_decisions, correct_word_reaction_times, time_per_taps) in zip(axes.flatten(), data_sets):\n    ax.boxplot([correct_reaction_times, correct_response_ratios, reaction_times, lex_spans, lex_decisions, correct_word_reaction_times, time_per_taps], labels=groups)\n    ax.set_title('Boxplot')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each bar chart\ndata = {\n    'BG': [80, 60],\n    'IBP': [80, 60],\n    'SSP': [80, 60],\n    'NBP': [80, 60]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 4)\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 1, 2, 3, 4])\nax.set_yticklabels(['', '', '', '', ''])\n\n# Set the title of the plot\nax.set_title('Methods')\n\n# Plot the bar charts\nfor i, (method, values) in enumerate(data.items()):\n    ax.barh(i, values[0], color='brown')\n    ax.barh(i, values[1], left=values[0], color='darkred')\n\n# Set the x-axis label\nax.set_xlabel('Prediction Accuracy vD1')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [50, 100, 150, 200, 350]\ny = [0.04, 0.04, 0.02, 0.02, 0.06]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('Bar Chart')\nplt.xlabel('Search depth')\nplt.ylabel('Reward')\n\n# Set the y-axis limits\nplt.ylim(-0.06, 0.06)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each activity\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 38.1, 29.5]\ncolors = ['pink', 'orange', 'green', 'blue']\n\n# Create a bar chart\nplt.figure(figsize=(9, 5))\nbars = plt.bar(activities, durations, color=colors)\n\n# Add text annotations to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title of the plot\nplt.title('Daily Activity Durations')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.ai\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\ndata = {\n    'Mean Value': [\n        [2.8, 2.6, 2.4, 2.2, 2.0],\n        [2.8, 2.6, 2.4, 2.2, 2.0],\n        [2.8, 2.6, 2.4, 2.2, 2.0]\n    ],\n    'Median Value': [\n        [2.4, 2.2, 2.0, 1.8, 1.6],\n        [2.4, 2.2, 2.0, 1.8, 1.6],\n        [2.4, 2.2, 2.0, 1.8, 1.6]\n    ],\n    'IQR Mean': [\n        [2.4, 2.2, 2.0, 1.8, 1.6],\n        [2.4, 2.2, 2.0, 1.8, 1.6],\n        [2.4, 2.2, 2.0, 1.8, 1.6]\n    ],\n    'IQR Median': [\n        [2.4, 2.2, 2.0, 1.8, 1.6],\n        [2.4, 2.2, 2.0, 1.8, 1.6],\n        [2.4, 2.2, 2.0, 1.8, 1.6]\n    ]\n}\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), sharex=True, sharey=True)\n\n# Plot each dataset on a separate subplot\nfor ax, (title, values) in zip(axes.flatten(), data.items()):\n    ax.set_title(title)\n    ax.boxplot(values, vert=False)\n    ax.set_yticks(range(1, len(values) + 1))\n    ax.set_yticklabels(['Low Intensity', 'No Intervention', 'High Intensity', 'Recovery', 'Nutrition'])\n    ax.set_xlabel('Value')\n    ax.grid(True)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = [\n    [7.6, 5.6, 3.6, 1.6],\n    [7.6, 5.6, 3.6, 1.6],\n    [7.6, 5.6, 3.6, 1.6],\n    [7.6, 5.6, 3.6, 1.6],\n    [7.6, 5.6, 3.6, 1.6]\n]\n\n# Define the labels for the x-axis\nx_labels = [-40, -20, 0, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with bars\nfor row in data:\n    ax.bar(x_labels, row, color='blue')\n\n# Set the title and labels\nax.set_title('Angular Frequency [rad/s]')\nax.set_xlabel('Thrust Angle [\u00b0]')\nax.set_ylabel('Angular Frequency [rad/s]')\n\n# Set the x-ticks\nax.set_xticks(x_labels)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ncategories = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\nvalues = [45, 55, 35, 15]\n\n# Create a bar chart\nplt.bar(categories, values, color='red')\n\n# Set the title and labels\nplt.title('Performance Gap (%)')\nplt.xlabel('Categories')\nplt.ylabel('Performance Gap (%)')\n\n# Set the y-axis limits\nplt.ylim(0, 70)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\n\"\"\"\n=====================================\nComparing Human Normalized Scores\n=====================================\n\nThis example demonstrates how to create a bar chart with multiple subplots to compare human normalized scores across different conditions.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nconditions = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\nhuman_normalized_scores = [0.4, 0.6, 0.8, 0.2, 0.4, 0.6]\nmean_scores = [0.5, 0.7, 0.9, 0.3, 0.5, 0.7]\nmedian_scores = [0.4, 0.6, 0.8, 0.2, 0.4, 0.6]\ninterquartile_mean_scores = [0.5, 0.7, 0.9, 0.3, 0.5, 0.7]\noptimal_gap_scores = [0.4, 0.6, 0.8, 0.2, 0.4, 0.6]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 4, figsize=(12, 3))\n\n# Plotting the data\nfor ax, condition in zip(axes, conditions):\n    ax.bar(['Mean', 'Median', 'Interquartile Mean', 'Optimality Gap'], \n           [mean_scores[conditions.index(condition)], median_scores[conditions.index(condition)], \n            interquartile_mean_scores[conditions.index(condition)], optimal_gap_scores[conditions.index(condition)]], \n           color=['red', 'orange', 'green', 'blue'])\n    ax.set_title(condition)\n    ax.set_xlabel('Scores')\n    ax.set_ylabel('Values')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]\ny1 = [20, 20, 20, 20, 20, 20, 20]\ny2 = [30, 30, 30, 30, 30, 30, 30]\ny3 = [40, 40, 40, 40, 40, 40, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='SOCP Learning (Proposed)')\nax.plot(x, y2, 'y-', label='SOCP No Learning')\nax.plot(x, y3, 'r-', label='FMPC')\n\n# Set the title and labels\nax.set_title('Thrust Angle vs Angular Frequency')\nax.set_xlabel('Angular Frequency [rad/s]')\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Set the limits for the x-axis\nax.set_xlim(1.5, 5.5)\n\n# Set the limits for the y-axis\nax.set_ylim(-60, 60)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [1, 2, 3, 4]\ny1 = [9, 10, 9, 10]\ny2 = [8, 9, 8, 9]\ny3 = [7, 8, 7, 8]\ny4 = [6, 7, 6, 7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='GMML (25%-75%)')\nax.plot(x, y2, 'b-', label='GML (25%-75%)')\nax.plot(x, y3, 'g-', label='AO (25%-75%)')\nax.plot(x, y4, 'c-', label='Perfect')\n\n# Set the title and labels\nax.set_title('Method')\nax.set_xlabel('CEE (dB)')\nax.set_ylabel('SE (bps/Hz)')\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(25, 8))\n\n# Set titles for each subplot\ntitles = ['Linear travel times', 'Exponential travel times', 'Sigmoidal travel times']\nfor ax, title in zip(axes, titles):\n    ax.set_title(title)\n\n# Define data for each subplot\ndata_linear = [\n    [100, 150, 120, 130, 140],\n    [50, 70, 60, 55, 65],\n    [20, 30, 25, 22, 28],\n    [10, 15, 12, 13, 14]\n]\n\ndata_exponential = [\n    [180, 190, 170, 160, 150],\n    [80, 90, 85, 82, 88],\n    [30, 40, 35, 32, 38],\n    [10, 15, 12, 13, 14]\n]\n\ndata_sigmoidal = [\n    [160, 170, 150, 140, 130],\n    [70, 80, 75, 72, 78],\n    [40, 50, 45, 42, 48],\n    [10, 15, 12, 13, 14]\n]\n\n# Plot data on each subplot\nfor ax, data in zip(axes, [data_linear, data_exponential, data_sigmoidal]):\n    for row in data:\n        ax.plot(row, 'bo')\n\n# Set x-axis labels\nx_labels = ['D-avg', 'P-avg', 'P-OFF', 'P-ON', 'P-ONN']\nfor ax in axes:\n    ax.set_xticks(range(len(x_labels)))\n    ax.set_xticklabels(x_labels)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\ndata = {\n    'Only WSI Modality': [89, 87, 85, 83, 81],\n    'Only CNV Modality': [89, 87, 85, 83, 81],\n    'WSI+CNV Modality': [89, 87, 85, 83, 81]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('AUC')\n\n# Set the x-axis label\nax.set_xlabel('Modality')\n\n# Set the y-axis label\nax.set_ylabel('AUC')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(data)))\nax.set_xticklabels(data.keys())\n\n# Set the y-axis limits\nax.set_ylim(70, 100)\n\n# Plot the data\nfor i, (modality, values) in enumerate(data.items()):\n    ax.bar(i, values[0], color='blue', label=modality if i == 0 else None)\n    ax.bar(i, values[1], bottom=values[0], color='green', label=None)\n    ax.bar(i, values[2], bottom=values[0] + values[1], color='pink', label=None)\n    ax.bar(i, values[3], bottom=values[0] + values[1] + values[2], color='blue', label=None)\n    ax.bar(i, values[4], bottom=values[0] + values[1] + values[2] + values[3], color='green', label=None)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ndata = {\n    'Vanilla DIP': [22.8, 22.6, 22.4],\n    'SGLD DIP': [23.2, 23.0, 22.8],\n    'Ours': [23.2, 23.0, 22.8]\n}\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plotting the first subplot\nfor i, (key, values) in enumerate(data.items()):\n    axes[0].bar(key, values, color='blue')\naxes[0].set_title('0.25 HIAR')\naxes[0].set_xlabel('DIPs')\naxes[0].set_ylabel('PSNR (dB)')\naxes[0].set_ylim(22.2, 23.4)\n\n# Plotting the second subplot\nfor i, (key, values) in enumerate(data.items()):\n    axes[1].bar(key, values, color='red')\naxes[1].set_title('0.1 HIAR')\naxes[1].set_xlabel('DIPs')\naxes[1].set_ylabel('PSNR (dB)')\naxes[1].set_ylim(19.0, 20.2)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-80, 80, 400)\ny = np.linspace(-80, 80, 400)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X / 20) * np.cos(Y / 20)\n\n# Plot the data\ncax = ax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Add a colorbar to the plot\nfig.colorbar(cax)\n\n# Set the title of the plot\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the grid of x1 and x2 values\nx1 = np.linspace(0, 1, 100)\nx2 = np.linspace(0, 1, 100)\nX1, X2 = np.meshgrid(x1, x2)\n\n# Define the function value\nZ = np.sin(X1 * X2) + 0.5\n\n# Plot the contour plot\ncontour = ax.contourf(X1, X2, Z, cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contour)\ncbar.set_label('\u03bb(x, z)')\n\n# Set the title and labels\nax.set_title('Contour Plot of \u03bb(x, z)')\nax.set_xlabel('x1')\nax.set_ylabel('x2')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title and labels\nax.set_title('DBP (mmHg) vs. SBP (mmHg)')\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\n\n# Define the data points\nsbp = [100, 110, 120, 130, 140, 150, 160]\ndbp_female = [90, 90, 90, 90, 90, 90, 90]\ndbp_male = [80, 80, 80, 80, 80, 80, 80]\n\n# Plot the data\nax.plot(sbp, dbp_female, 'b-', label='Female')\nax.plot(sbp, dbp_male, 'r-', label='Male')\n\n# Set the y-axis limits\nax.set_ylim(50, 100)\n\n# Set the grid\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points\nx = np.linspace(-4, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nplt.plot(x, y, 'b-')\n\n# Set the title and labels\nplt.title('Sine Wave')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Set the limits for the x-axis\nplt.xlim(-4, 10)\n\n# Set the grid\nplt.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the radii of the circles\nradii = [10, 8, 6, 4, 2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Draw concentric circles\nfor radius in radii:\n    circle = plt.Circle((5, 5), radius, color='lightcoral', fill=False)\n    ax.add_artist(circle)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the x-axis limits\nax.set_xlim(8, 15)\n\n# Set the y-axis limits\nax.set_ylim(-1, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the x and y coordinates for the triangle\nx = np.array([0, 1, 2, 0])\ny = np.array([0, 0, 1, 0])\n\n# Plot the triangle\nax.fill(x, y, 'pink')\n\n# Set the aspect ratio to 'equal' to maintain the shape of the triangle\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/xahlee/image2latex\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Set the title of the plot\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Define the x-axis values\nx_values = [-1.0, -0.5, 0.0, 0.5, 1.0]\n\n# Define the y-axis values\ny_values = [0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Plot the data\nax.plot(x_values, y_values, 'o-')\n\n# Set the limits for the x-axis\nax.set_xlim(-1.0, 1.0)\n\n# Set the limits for the y-axis\nax.set_ylim(0.0, 1.0)\n\n# Set the tick labels for the x-axis\nax.set_xticks([-1.0, -0.5, 0.0, 0.5, 1.0])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the label for the x-axis\nax.set_xlabel('Spearman Coefficient')\n\n# Set the label for the y-axis\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(7, 16)\ny1 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny2 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny3 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny4 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny5 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny6 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny7 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny8 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny9 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny10 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny11 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny12 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny13 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny14 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ny15 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Random Bundle')\nax.plot(x, y2, label='Increase Price')\nax.plot(x, y3, label='Strategic (Ours)')\nax.plot(x, y4, label='Reserved price p_i')\n\n# Set the title and labels\nax.set_title('Price Distribution')\nax.set_xlabel('p')\nax.set_ylabel('Shape Density')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for plotting\nx = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\ny1 = [14, 12, 10, 8, 6, 6]\ny2 = [14, 12, 10, 8, 6, 6]\ny3 = [14, 12, 10, 8, 6, 6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Gucci', color='blue')\nax.plot(x, y2, label='Chanel', color='green')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 14)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/notebooks/autogalaxy/plotting/fit_imaging.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points\nx = np.array([-0.5, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.819])\ny = np.array([-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.819])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data points\nax.plot(x, y, 'o')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Set the limits of the x-axis\nax.set_xlim(-0.82, -0.44)\n\n# Set the limits of the y-axis\nax.set_ylim(-0.75, -0.5)\n\n# Set the tick labels\nax.set_xticks([-0.82, -0.75, -0.68, -0.61, -0.54, -0.47, -0.4, -0.33, -0.26, -0.19, -0.12, -0.05, 0.02, 0.09, 0.16, 0.23, 0.3, 0.37, 0.44, 0.51, 0.58, 0.65, 0.72, 0.79, 0.86])\nax.set_yticks([-0.75, -0.7, -0.65, -0.6, -0.55, -0.5, -0.45, -0.4, -0.35, -0.3, -0.25, -0.2, -0.15, -0.1, -0.05, 0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75])\n\n# Set the tick label rotation\nax.set_xticklabels(['-0.82', '-0.75', '-0.68', '-0.61', '-0.54', '-0.47', '-0.4', '-0.33', '-0.26', '-0.19', '-0.12', '-0.05', '0.02', '0.09', '0.16', '0.23', '0.3', '0.37', '0.44', '0.51', '0.58', '0.65', '0.72', '0.79', '0.86'], rotation=45)\nax.set_yticklabels(['-0.75', '-0.7', '-0.65', '-0.6', '-0.55', '-0.5', '-0.45', '-0.4', '-0.35', '-0.3', '-0.25', '-0.2', '-0.15', '-0.1', '-0.05', '0.0', '0.05', '0.1', '0.15', '0.2', '0.25', '0.3', '0.35', '0.4', '0.45', '0.5', '0.55', '0.6', '0.65', '0.7', '0.75'])\n\n# Set the grid lines\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [1, 2, 4, 8]\ny1 = [5, 6, 7, 6]\ny2 = [5, 6, 7, 6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Baseline')\nax.plot(x, y2, 'g-', label='SoftMoE (unchanged)')\nax.plot(x, y2, 'm-', label='SoftMoE (\u2202 NumExperts)')\n\n# Set the title and labels\nax.set_title('Expert dimension')\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human Normalized Score')\n\n# Set the y-axis limits\nax.set_ylim(5, 7)\n\n# Add a horizontal line at y=6\nax.axhline(y=6, color='b', linestyle='--')\n\n# Add a vertical line at x=4\nax.axvline(x=4, color='b', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: \n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bars\ndata = [\n    [0.748, 0.715, 0.759],\n    [0.762, 0.762, 0.78],\n    [0.748, 0.748, 0.78],\n    [0.709, 0.687, 0.713]\n]\n\n# Define the labels for the bars\nlabels = ['Hospital 1', 'Hospital 2', 'Hospital 3']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the colors for the bars\ncolors = ['blue', 'blue', 'blue', 'blue']\nfor i in range(len(data)):\n    colors[i] = 'green' if i == 1 else colors[i]\n    colors[i] = 'red' if i == 2 else colors[i]\n\n# Plot the bars\nbars = ax.bar(labels, [sum(row) / len(row) for row in data], color=colors)\n\n# Add horizontal lines for each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.plot([bar.get_x(), bar.get_x() + bar.get_width()], [height, height], 'k-')\n\n# Set the title of the plot\nax.set_title('Accuracy by hospital and method')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Hospital')\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(labels)))\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(labels)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(labelsize=10)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(labelsize=10)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(width=0.5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(width=0.5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(length=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(length=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='major', size=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='major', size=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='minor', size=2)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='minor', size=2)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', right=False)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', top=False)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', left=True)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', bottom=True)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', length=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', length=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', length=2)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', length=2)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', width=0.5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', width=0.5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', width=0.5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', width=0.5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', color='black')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', direction='in')\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='major', pad=5)\n\n# Set the tick parameters for the y-axis\nax.yaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the x-axis\nax.xaxis.set_tick_params(which='both', which='minor', pad=5)\n\n# Set the tick parameters for the"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/victorlei/image2code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\ndata = {\n    'GPT-4 Buyer (valuation 40)': [\n        [0, 0, 0, 0],\n        [-10, -10, -10, -10],\n        [-20, -20, -20, -20]\n    ],\n    'Claude-2 Buyer (valuation 40)': [\n        [0, 0, 0, 0],\n        [-10, -10, -10, -10],\n        [-20, -20, -20, -20]\n    ],\n    'GPT-3 Buyer (valuation 40)': [\n        [0, 0, 0, 0],\n        [-10, -10, -10, -10],\n        [-20, -20, -20, -20]\n    ]\n}\n\n# Define the colors for each bar\ncolors = ['orange', 'cyan', 'red', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nfor i, (label, values) in enumerate(data.items()):\n    for j, value in enumerate(values):\n        ax.barh(f'Plot {i+1}', value, left=j*2, height=0.5, color=colors[j % len(colors)], label=label if j == 0 else None)\n\n# Set the y-axis limits\nax.set_ylim(-25, 5)\n\n# Set the x-axis limits\nax.set_xlim(0, 8)\n\n# Set the y-axis ticks\nax.set_yticks([-20, -10, 0])\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6])\n\n# Set the x-axis labels\nax.set_xticklabels(['GPT-4 Buyer (valuation 40)', 'Claude-2 Buyer (valuation 40)', 'GPT-3 Buyer (valuation 40)'])\n\n# Set the title\nax.set_title('Sellers (valuation 60)')\n\n# Set the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['[m]', '[\u0394R]', '[\u0394R^-1]', '[none]']\nvalues = [0.96, 0.86, 0.78, 0.78, 0.96, 0.86, 0.78, 0.78, 0.95, 0.83, 0.80, 0.80, 0.90, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80,"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\nvalues = [1.9, 1.7, 1.5, 1.3, 1.1]\n\n# Create a bar chart\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Bar Chart Example')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Set the y-axis limits\nplt.ylim(0, 2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data\ncategories = ['a', 'b', 'c']\nperformance = [85, 85, 85]\nt_estimation = [75, 75, 75]\nblue_qualification = [65, 65, 65]\ndiff_stitch = [55, 55, 55]\n\n# Set the bar width\nbar_width = 0.2\n\n# Set the positions of the bars\nr1 = range(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\n\n# Create the bars\nax.bar(r1, performance, color='orange', width=bar_width, edgecolor='grey', label='Performance')\nax.bar(r2, t_estimation, color='yellow', width=bar_width, edgecolor='grey', label='T-Estimation')\nax.bar(r3, blue_qualification, color='blue', width=bar_width, edgecolor='grey', label='Blue Qualification')\nax.bar(r4, diff_stitch, color='black', width=bar_width, edgecolor='grey', label='DiffStitch')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar chart with multiple bars of varying heights')\nax.set_xticks([r + bar_width * 1.5 for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = [\n    [1, 0.5, 0.3],\n    [1, 0.1, 0.3],\n    [1, 0.1, 0.3],\n    [1, 0.1, 0.3],\n    [1, 0.1, 0.3],\n    [1, 0.1, 0.3],\n    [1, 0.1, 0.3],\n    [1, 0.1, 0.3],\n    [1, 0.1, 0.3],\n    [1, 0.1, 0.3]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Hyperparameters')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Plot the bars\nfor i, row in enumerate(data):\n    ax.bar(range(len(row)), row, color='blue' if i % 2 == 0 else 'pink')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first bar chart\ncategories1 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [29, 28, 27, 26, 25]\n\n# Define the data for the second bar chart\ncategories2 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues2 = [34, 33, 32, 31, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the first bar chart\nax.set_title('Higher Education Enrollment Rate')\n\n# Create the first bar chart\nbars1 = ax.bar(categories1, values1, color='purple')\n\n# Set the title of the second bar chart\nax.set_title('Student-Teacher Ratio')\n\n# Create the second bar chart\nbars2 = ax.bar(categories2, values2, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Rate')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncategories = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 10400, 3200]\n\n# Data for the second chart\nforest_coverage = [52, 34, 25, 38, 21, 25, 3200]\n\n# Data for the third chart\nland_area = [52, 34, 25, 38, 21, 25, 3200]\n\n# Data for the fourth chart\nenergy_consumption = [45, 34, 28, 18, 25, 34, 3200]\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(6.0, 9.0))\n\n# First subplot: Annual Carbon Dioxide Emissions\naxes[0, 0].bar(categories, emissions, color='blue')\naxes[0, 0].set_title('Annual Carbon Dioxide Emissions')\naxes[0, 0].set_ylabel('Millions of Metric Tons')\n\n# Second subplot: Forest Coverage Rate\naxes[0, 1].bar(categories, forest_coverage, color='green')\naxes[0, 1].set_title('Forest Coverage Rate')\naxes[0, 1].set_ylabel('% of Land Area')\n\n# Third subplot: Renewable Energy Usage\naxes[1, 0].bar(categories, energy_consumption, color='red')\naxes[1, 0].set_title('Renewable Energy Usage')\naxes[1, 0].set_ylabel('% of Total Energy Consumption')\n\n# Fourth subplot: Europe\neurope_data = [1200, 1800, 5000, 10400, 3200]\neurope_labels = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\neurope_colors = ['blue', 'yellow', 'green', 'purple', 'orange']\neurope_positions = range(len(europe_data))\naxes[1, 1].bar(europe_positions, europe_data, color=europe_colors)\naxes[1, 1].set_title('Europe')\naxes[1, 1].set_xlabel('Countries')\naxes[1, 1].set_ylabel('Millions of Metric Tons')\naxes[1, 1].set_xticks(europe_positions)\naxes[1, 1].set_xticklabels(europe_labels)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Set the title of the plot\nax.set_title('b')\n\n# Define the data for the bar chart\ndata = [\n    [50, 60, 70, 80, 90],\n    [40, 50, 60, 70, 80],\n    [30, 40, 50, 60, 70]\n]\n\n# Define the labels for the bars\nlabels = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\n\n# Define the colors for the bars\ncolors = ['purple', 'blue', 'red', 'yellow']\n\n# Create the bar chart\nfor i, row in enumerate(data):\n    ax.bar(labels, row, color=colors[i], label=f'Bar {i+1}')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(-1, len(labels))\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(labels)))\nax.set_xticklabels(labels)\n\n# Set the y-axis tick labels\nax.set_yticks(range(0, 101, 10))\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Define the data for the bars\ndata = [\n    [85, 75, 90, 80, 95],\n    [70, 60, 75, 65, 80],\n    [65, 55, 70, 50, 65],\n    [50, 40, 55, 45, 50]\n]\n\n# Define the labels for the bars\nlabels = ['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human']\n\n# Define the colors for the bars\ncolors = ['blue', 'blue', 'blue', 'blue']\n\n# Define the width of the bars\nbar_width = 0.2\n\n# Define the positions of the bars\nindex = range(len(labels))\n\n# Plot the bars\nfor i, d in enumerate(data):\n    ax.bar([p + i * bar_width for p in index], d, bar_width, color=colors[i])\n\n# Set the x-axis labels\nax.set_xticks([p + bar_width for p in index])\nax.set_xticklabels(labels)\n\n# Set the y-axis label\nax.set_ylabel('Judge Accuracy (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define data for the first subplot\nlabels = ['New York', 'London', 'Beijing', 'Tokyo']\nspring_temperatures = [12, 14, 13, 16]\nautumn_temperatures = [11, 13, 12, 15]\n\n# Plot the data\nax.bar(labels, spring_temperatures, color='red', label='Spring')\nax.bar(labels, autumn_temperatures, bottom=spring_temperatures, color='blue', label='Autumn')\n\n# Set labels and title\nax.set_xlabel('City')\nax.set_ylabel('Annual Average Temperature (\u00b0C)')\nax.set_title('Annual Average Temperature')\nax.legend()\n\n# Define data for the second subplot\nspring_rainfall = [1200, 1400, 1300, 1600]\nautumn_rainfall = [1100, 1300, 1200, 1500]\n\n# Plot the data\nax.bar(labels, spring_rainfall, color='green', label='Spring')\nax.bar(labels, autumn_rainfall, bottom=spring_rainfall, color='blue', label='Autumn')\n\n# Set labels and title\nax.set_xlabel('City')\nax.set_ylabel('Rainfall (mm)')\nax.set_title('Annual Rainfall')\nax.legend()\n\n# Define data for the third subplot\nwind_speed = [5, 4, 3, 6]\n\n# Plot the data\nax.bar(labels, wind_speed, color='orange', label='Wind Speed (m/s)')\n\n# Set labels and title\nax.set_xlabel('City')\nax.set_ylabel('Wind Speed (m/s)')\nax.set_title('Wind Speed')\nax.legend()\n\n# Define data for the fourth subplot\nair_quality_index = [50, 40, 30, 60]\n\n# Plot the data\nax.bar(labels, air_quality_index, color='purple', label='Air Quality Index')\n\n# Set labels and title\nax.set_xlabel('City')\nax.set_ylabel('Air Quality Index')\nax.set_title('Air Quality Index')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar charts\ndata = {\n    'Germany': [20, 15, 10, 5],\n    'China': [20, 15, 10, 5],\n    'USA': [20, 15, 10, 5],\n    'India': [20, 15, 10, 5],\n    'Brazil': [20, 15, 10, 5]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-6000, 0)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Set the tick labels for the x-axis\nax.set_xticks([-6000, -5000, -4000, -3000, -2000, -1000, 0])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 5, 10, 15, 20, 25, 30])\n\n# Set the title of the plot\nax.set_title('Total Energy Consumption by Country')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Energy Consumption (Petajoules)')\nax.set_ylabel('Renewable Energy Usage by Country (%)')\n\n# Plot the bar charts\nfor country, values in data.items():\n    ax.bar(country, values, color='blue', alpha=0.7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: Energy Efficiency Ratings by Appliance Model\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for each appliance\nrefrigerator = [0.15, 0.25, 0.30]\nwashing_machine = [-0.10, 0.05, 0.05]\ndishwasher = [0.05, 0.15, 0.20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(refrigerator, label='Refrigerator', color='red')\nax.plot(washing_machine, label='Washing Machine', color='green')\nax.plot(dishwasher, label='Dishwasher', color='blue')\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Set the y-axis limits\nax.set_ylim(-0.1, 0.3)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define data points\nx = ['Wind', 'Solar', 'Hydro', 'Nuclear']\ny1 = [90, 80, 70, 60]\ny2 = [80, 70, 60, 50]\ny3 = [70, 60, 50, 40]\ny4 = [60, 50, 40, 30]\n\n# Plot data\nax.plot(x, y1, label='Installation Efficiency')\nax.plot(x, y2, label='Maintenance Costs')\nax.plot(x, y3, label='Environmental Impact')\nax.plot(x, y4, label='Safety Standards')\n\n# Set title and labels\nax.set_title('Energy Assessment Entity')\nax.set_xlabel('Energy Assessment Entity')\nax.set_ylabel('Efficiency and Cost Scores')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bars\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 75, 65, 55, 45, 35, 25, 15, 5, 5]\nhigher_education_enrollment = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]\n\n# Create a bar chart with two sets of bars\nfig, ax = plt.subplots(figsize=(10, 6))\nbar_width = 0.35\nindex = range(len(regions))\n\nbars1 = ax.bar(index, high_school_graduation, bar_width, label='High School Graduation')\nbars2 = ax.bar([i + bar_width for i in index], higher_education_enrollment, bar_width, label='Higher Education Enrollment')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Region')\nax.set_ylabel('Percentage (%)')\nax.set_title('Educational Metrics by Region')\nax.set_xticks([i + bar_width / 2 for i in index])\nax.set_xticklabels(regions)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart representing the comparison of recall rates across different products.\nThe chart includes two categories: \"Truthful Recall\" and \"Misleading Recall\". Each product has its own bar with a specific height.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nproducts = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 57.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34.0, 43.7, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the chart\nax.set_title('Comparison of Recall Rates Across Products')\n\n# Set the labels for the x-axis\nax.set_xlabel('Products')\nax.set_ylabel('Recall Rate (%)')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(products)))\nax.set_xticklabels(products)\n\n# Set the y-axis limits\nax.set_ylim(0, 60)\n\n# Plot the bars for Truthful Recall\nbars_truthful = ax.bar(range(len(products)), truthful_recall, color='blue', label='Truthful Recall')\n\n# Plot the bars for Misleading Recall\nbars_misleading = ax.bar(range(len(products)), misleading_recall, bottom=truthful_recall, color='orange', label='Misleading Recall')\n\n# Add text annotations to each bar\nfor bar in bars_truthful + bars_misleading:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Add a legend to the chart\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\n\"\"\"\nGenerated by http://arraydrawing.com\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsupport = [15, 75]\ndelivery = [18, 82]\nproduct_quality = [20, 78]\nreturns = [12, 85]\npricing = [17, 80]\nwebsite_usability = [10, 88]\ncheckout_process = [8, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis labels\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the y-axis label\nax.set_ylabel('Complaint Rates')\n\n# Set the title of the plot\nax.set_title('Customer Satisfaction Scores')\n\n# Plot the bars for each category\nax.bar(categories, support, color='blue', label='Support')\nax.bar(categories, delivery, color='green', label='Delivery')\nax.bar(categories, product_quality, color='blue', label='Product Quality')\nax.bar(categories, returns, color='purple', label='Returns')\nax.bar(categories, pricing, color='orange', label='Pricing')\nax.bar(categories, website_usability, color='blue', label='Website Usability')\nax.bar(categories, checkout_process, color='cyan', label='Checkout Process')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 78, 85, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 10, 8, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(0, len(categories))\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 101, 10))\nax.set_yticklabels([f'{i}%' for i in range(0, 101, 10)])\n\n# Set the title of the plot\nax.set_title('Agree and Disagree Rates')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Plot the agree rates\nax.bar(range(len(categories)), agree_rates, color='blue', label='Agree Rates')\n\n# Plot the disagree rates\nax.bar(range(len(categories)), disagree_rates, color='red', label='Disagree Rates')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Watering Frequency', 'Planting Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nvalues = [\n    [0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15],\n    [0.15, 0.15, 0.15, 0.15, 0.15]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nbars = ax.bar(categories, [sum(val) for val in values], color='green')\n\n# Add black lines at the bottom of each bar\nfor bar in bars:\n    ax.plot([bar.get_x(), bar.get_x() + bar.get_width()], [bar.get_height(), bar.get_height()], 'k-')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.25)\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Set the title and labels\nax.set_title('Impact on Plant Growth (\u0394 to control)')\nax.set_xlabel('Environmental Factors')\nax.set_ylabel('Impact on Plant Growth (\u0394 to control)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncities = ['New York', 'Los Angeles', 'Chicago']\nmetrics = [\n    ['Traffic Volume', 'Public Transit', 'Accident Rate'],\n    ['Traffic Volume', 'Public Transit', 'Accident Rate'],\n    ['Traffic Volume', 'Public Transit', 'Accident Rate']\n]\nvalues = [\n    [[250, 250, 250], [175, 175, 175], [150, 150, 150]],\n    [[250, 250, 250], [175, 175, 175], [150, 150, 150]],\n    [[250, 250, 250], [175, 175, 175], [150, 150, 150]]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 1, figsize=(10, 4))\n\n# Plot each city's data\nfor i, city in enumerate(cities):\n    ax = axes[i]\n    ax.bar(metrics[i], values[i][0], color='green')\n    ax.bar(metrics[i], values[i][1], color='blue')\n    ax.bar(metrics[i], values[i][2], color='red')\n    ax.set_title(city)\n    ax.set_ylabel('Metric Values')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = [\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the tick label format for the x-axis\nax.xaxis.set_major_formatter('{x:.1f}')\n\n# Set the tick label format for the y-axis\nax.yaxis.set_major_formatter('{x:.1f}')\n\n# Set the tick label rotation for the x-axis\nax.tick_params(axis='x', rotation=45)\n\n# Set the tick label rotation for the y-axis\nax.tick_params(axis='y', rotation=45)\n\n# Set the tick label font size for the x-axis\nax.tick_params(axis='x', labelsize=10)\n\n# Set the tick label font size for the y-axis\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label color for the y-axis\nax.tick_params(axis='y', colors='black')\n\n# Set the tick label style for the x-axis\nax.tick_params(axis='x', style='solid')\n\n# Set the tick label style for the y-axis\nax.tick_params(axis='y', style='solid')\n\n# Set the tick label width for the x-axis\nax.tick_params(axis='x', width=1)\n\n# Set the tick label width for the y-axis\nax.tick_params(axis='y', width=1)\n\n# Set the tick label length for the x-axis\nax.tick_params(axis='x', length=5)\n\n# Set the tick label length for the y-axis\nax.tick_params(axis='y', length=5)\n\n# Set the tick label direction for the x-axis\nax.tick_params(axis='x', direction='in')\n\n# Set the tick label direction for the y-axis\nax.tick_params(axis='y', direction='in')\n\n# Set the tick label color for the x-axis\nax.tick_params(axis='x', colors='black"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [-4.0, -3.0, -2.0, -1.0]\nwater_quality_scores = [0.0, 0.0, 0.0, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the y-axis limits\nax.set_ylim(-30, 30)\n\n# Set the tick labels for the y-axis\nax.set_yticks([-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30])\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3])\n\n# Set the tick label positions\nax.set_xticklabels(categories)\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the labels for the axes\nax.set_xlabel('Cities')\nax.set_ylabel('Scores')\n\n# Set the color of the air quality scores\nair_quality_color = 'red'\n\n# Set the color of the water quality scores\nwater_quality_color = 'green'\n\n# Plot the bars for air quality scores\nax.bar(categories, air_quality_scores, color=air_quality_color, label='Air Quality Score')\n\n# Plot the bars for water quality scores\nax.bar(categories, water_quality_scores, color=water_quality_color, label='Water Quality Score')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nwerewolf_data = [84.97, 67.17, 78.22, 85.17]\nseer_data = [102.67, 100.67, 78.22, 85.17]\nwitch_data = [102.67, 67.17, 78.22, 85.17]\nvillager_data = [102.67, 67.17, 78.22, 85.17]\n\n# Create a figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot for werewolf data\nax1.bar(['Wererwolf', 'Seer', 'Witch', 'Villager'], werewolf_data, color='green')\nax1.set_title('a')\nax1.set_ylabel('Tokens (s)')\nax1.set_ylim(0, 120)\n\n# Plot for seer data\nax2.bar(['Wererwolf', 'Seer', 'Witch', 'Villager'], seer_data, color='blue')\nax2.set_title('b')\nax2.set_ylabel('Tokens (s)')\nax2.set_ylim(0, 120)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('Size of Data for Training and Validation')\nplt.xlabel('Size of Data (samples)')\nplt.ylabel('True+ info (%)')\n\n# Set the tick marks on the x-axis\nplt.xticks([5, 10, 20, 30, 40, 50], ['(40 samples)', '(81 samples)', '(163 samples)', '(245 samples)', '(326 samples)', '(408 samples)'])\n\n# Set the y-axis limits\nplt.ylim(56, 66)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/autogalaxy/images/plotting/plotting.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\ndata = {\n    'all': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'arg.causal': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.0': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.1': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.2': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.3': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.4': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.5': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.6': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.plot(values, label=label)\n\n# Set the title and labels\nax.set_title('Out-of-domain accuracy')\nax.set_xlabel('Epochs')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [0.7, 0.7, 0.6, 0.6, 0.8]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add a vertical line at the specified position\nplt.axvline(x=4, color='red', linestyle='--')\n\n# Set the title of the chart\nplt.title('Mini Crosswords Performance')\n\n# Set the x-axis label\nplt.xlabel('Categories')\n\n# Set the y-axis label\nplt.ylabel('Objective Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data\ncategories = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'Llama2']\nground_truth_labels = [65, 60, 60, 60, 60, 60, 60, 60, 60]\nweak_labels = [55, 50, 50, 50, 50, 50, 50, 50, 50]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 3))\nbars = ax.bar(categories, ground_truth_labels, color='red', label='Ground-truth labels')\nax.bar(categories, weak_labels, color='blue', label='Weak labels', bottom=ground_truth_labels)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Accuracy Labels')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the chart\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Discourse and Pragmatics', 'Syntax: Tagging, Chinking and Parsing']\nvalues = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.bar(categories, values, color='purple')\n\n# Add black lines at the bottom of each bar\nfor bar in bars:\n    plt.plot([bar.get_x(), bar.get_x() + bar.get_width()], [bar.get_height(), bar.get_height()], 'k-')\n\n# Set the title of the chart\nplt.title('Your Chart Title Here')\n\n# Set the x-axis label\nplt.xlabel('A')\n\n# Set the y-axis label\nplt.ylabel('B')\n\n# Set the y-axis limits\nplt.ylim(-3.5, 1.5)\n\n# Set the y-axis ticks\nplt.yticks([-3.5, -3.25, -3, -2.75, -2.5, -2.25, -2, -1.75, -1.5])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\ny1 = [0.12, 0.14, 0.16, 0.14, 0.12, 0.14]\ny2 = [0.12, 0.14, 0.16, 0.14, 0.12, 0.14]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='Dataset mean')\nax.plot(x, y2, label='Mean')\n\n# Set the title and labels\nax.set_title('Shouting Fraction (Fraction of videos)')\nax.set_xlabel('Category')\nax.set_ylabel('Shouting Fraction')\n\n# Set the y-axis limits\nax.set_ylim(0.02, 0.18)\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.12\nax.axhline(y=0.12, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.14\nax.axhline(y=0.14, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.16\nax.axhline(y=0.16, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.18\nax.axhline(y=0.18, color='gray', linestyle='--')\n\n# Add a horizontal line at y=0.10\nax.axhline(y=0.10,"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [0, 5, 10, 15, 20]\ny1 = [15.49, 17.15, 16.03, 15.45, 16.46]\n\n# Data for the second plot\nx2 = [0, 5, 10, 15, 20]\ny2 = [19.38, 19.38, 19.38, 19.38, 19.38]\n\n# Data for the third plot\nx3 = [0, 5, 10, 15, 20]\ny3 = [23.92, 23.92, 23.92, 23.92, 23.92]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 9.0))\n\n# Plot the first subplot\naxs[0].plot(x1, y1, 'o-', color='red')\naxs[0].set_title('Variable, Symmetric Error')\naxs[0].set_xlabel('X-axis')\naxs[0].set_ylabel('Y-axis')\n\n# Plot the second subplot\naxs[1].plot(x2, y2, 'o-', color='blue')\naxs[1].plot(x3, y3, 'o-', color='green')\naxs[1].set_title('Variable, Symmetric Error')\naxs[1].set_xlabel('X-axis')\naxs[1].set_ylabel('Y-axis')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_values = [0.16, 0.18, 0.2, 0.24, 0.28]\nmean_values = [0.17, 0.18, 0.2, 0.24, 0.28]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(categories, incivility_values, label='Dataset mean', color='blue')\nax.plot(categories, mean_values, label='Mean', color='red')\n\n# Set the title and labels\nax.set_title('Incivility (Fraction of Videos)')\nax.set_xlabel('Category')\nax.set_ylabel('Incivility (Fraction of Videos)')\n\n# Set the y-axis limits\nax.set_ylim(0.15, 0.3)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nlabels = ['This work*', 'Shah et al.', 'Shah et al.', 'Banerjee et al.', 'Favale et al.', 'Favale et al.', 'Gomez-Valent', 'Gomez-Valent', 'Benisty et al.', 'Benisty et al.', 'Benisty et al.', 'Benisty et al.']\nvalues = [-19.353, -19.394, -19.404, -19.314, -19.404, -19.344, -19.362, -19.374, -19.38, -19.394, -19.404, -19.414]\nerrors = [0.073, 0.018, 0.017, 0.050, 0.099, 0.099, 0.050, 0.066, 0.078, 0.078, 0.066, 0.066]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with error bars\nax.errorbar(labels, values, yerr=errors, fmt='o', capsize=5)\n\n# Set the title and labels\nax.set_title('Error Bars Example')\nax.set_xlabel('Labels')\nax.set_ylabel('M B')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the x-axis label\nax.set_xlabel('Number of speakers')\n\n# Set the y-axis label\nax.set_ylabel('Dataset unique shouter count mean')\n\n# Define the data points for each category\ncategories = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', \"Farmer's Protest\", 'Issue Politics']\nblue_points = [12, 14, 12, 12, 14, 14]\nred_points = [6, 6, 6, 6, 6, 4]\n\n# Plot the blue points\nax.plot(categories, blue_points, 'bo', label='Unique speaker count mean')\n\n# Plot the red points\nax.plot(categories, red_points, 'ro', label='Unique shouter count mean')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(4, 16)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = ['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT']\ny1 = [0.15, 0.25, 0.15, 0.15, 0.15]\ny2 = [0.15, 0.25, 0.15, 0.15, 0.15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Dataset mean')\nax.plot(x, y2, label='Mean')\n\n# Set the title and labels\nax.set_title('Female Face Presence (Fraction of videos)')\nax.set_xlabel('Country')\nax.set_ylabel('Fraction of videos')\n\n# Set the y-axis limits\nax.set_ylim(0.05, 0.25)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data points for each category\ndata = {\n    'standard': [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n    'upper limits': [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n    'lower limits': [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n    'upper and lower limits': [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n    'random': [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.plot(values, label=label)\n\n# Set the title and labels\nax.set_title('Errorbar upper and lower limits')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the x-ticks\nax.set_xticks(range(1, 6))\nax.set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Set the y-limits\nax.set_ylim(0, 30)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\n\"\"\"\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ny1 = [170, 160, 150, 140, 130, 120, 110, 100]\ny2 = [170, 160, 150, 140, 130, 120, 110, 100]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(x, y1, 'ro-', label='Variable, Symmetric Error')\nax.plot(x, y2, 'go-', label='Variable, Symmetric Error')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Variable, Symmetric Error')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n\"\"\""}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 2, 4, 6, 8, 10]\ny1 = [3587, 2598, 3704, 3777, 2889, 1829]\ny2 = [4375, 2598, 3704, 3777, 2889, 1829]\ny3 = [4375, 2598, 3704, 3777, 2889, 1829]\ny4 = [4375, 2598, 3704, 3777, 2889, 1829]\ny5 = [4375, 2598, 3704, 3777, 2889, 1829]\ny6 = [4375, 2598, 3704, 3777, 2889, 1829]\ny7 = [4375, 2598, 3704, 3777, 2889, 1829]\ny8 = [4375, 2598, 3704, 3777, 2889, 1829]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'g-')\nax.plot(x, y2, 'g-')\nax.plot(x, y3, 'g-')\nax.plot(x, y4, 'g-')\nax.plot(x, y5, 'g-')\nax.plot(x, y6, 'g-')\nax.plot(x, y7, 'g-')\nax.plot(x, y8, 'g-')\n\n# Set the title and labels\nax.set_title('variable, asymmetric error')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 5, 10, 15, 20]\ny1 = [-2.1, -2.6, -2.9, -1.2, -1.1]\ny2 = [2.6, 2.6, 2.6, 2.3, 2.9]\ny3 = [1.9, 1.9, 1.9, 1.3, 1.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'p-', label='errorbar')\nax.plot(x, y2, 'p-')\nax.plot(x, y3, 'p-')\n\n# Set the title and labels\nax.set_title('variable, asymmetric error')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the y-axis limits\nax.set_ylim(14, 19)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the points\npoints = np.array([\n    [0, 0],  # Purple point\n    [1, 0],  # Blue point\n    [1, 1],  # Orange point\n    [0, 1],  # Yellow point\n    [0, 0]   # Purple point (repeated)\n])\n\n# Plot the points\nax.plot(points[:, 0], points[:, 1], 'ro-')\n\n# Set the aspect ratio to equal\nax.set_aspect('equal')\n\n# Remove axes for a cleaner look\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates for the points\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\ny = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n\n# Plot the points\nax.plot(x, y, 'o')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified dimensions\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates of the circle's center and radius\ncenter_x, center_y = 5, 5\nradius = 5\n\n# Generate points on the circle\ntheta = np.linspace(0, 2 * np.pi, 100)\nx = center_x + radius * np.cos(theta)\ny = center_y + radius * np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, 'k-')\n\n# Define the positions of the yellow dots\ndot_positions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Plot the yellow dots\nfor pos in dot_positions:\n    ax.plot(center_x + radius * np.cos(pos * np.pi / 11), center_y + radius * np.sin(pos * np.pi / 11), 'yo')\n\n# Set the aspect ratio to be equal so circles look like circles\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified dimensions\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates for the vertices of the quadrilateral\nx = [0, 2, 3, 1]\ny = [0, 0, 0, 0]\n\n# Plot the quadrilateral\nax.plot(x, y, 'k-')\n\n# Define the coordinates for the circles\ncircle_centers = [(0, 0), (2, 0), (3, 0), (1, 0)]\ncircle_radii = [1, 1, 1, 1]\n\n# Draw circles\nfor center, radius in zip(circle_centers, circle_radii):\n    circle = plt.Circle(center, radius, color='pink', fill=True)\n    ax.add_artist(circle)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified dimensions\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates for the triangle vertices\nx = [0, 2, 1]\ny = [0, 0, 1]\n\n# Plot the triangle\nax.plot(x, y, 'k-')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse']\nvalues = [0.61, 0.74, 0.7, 0.7, 0.57]\ncolors = ['lightcoral', 'lightsalmon', 'lightpink', 'lavenderblush', 'thistle']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nvotess = ['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Abstain']\ndata = [\n    [15.7, 28.1, 2.6, 2.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 9.2],\n    [50.8, 12.2, 0.9, 6.2, 13.9],\n    [49.2, 11.2, 0.6, 7.8, 16.3],\n    [50.3, 12.0, 0.9, 7.0, 13.4]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('Blues')\n\n# Plot the data\nfor i, voter in enumerate(voters):\n    for j, votee in enumerate(votess):\n        ax.add_patch(plt.Circle((j + 0.5, i + 0.5), 0.4, color=cmap(data[i][j] / 100)))\n\n# Set the limits of the plot\nax.set_xlim(0, len(votess))\nax.set_ylim(0, len(voters))\n\n# Set the tick labels\nax.set_xticks(np.arange(len(votess)) + 0.5)\nax.set_yticks(np.arange(len(voters)) + 0.5)\nax.set_xticklabels(votess)\nax.set_yticklabels(voters)\n\n# Set the title and labels\nax.set_title('Voter Preferences')\nax.set_xlabel('Votee')\nax.set_ylabel('Voter')\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', fraction=0.046, pad=0.04)\ncbar.set_label('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the heatmap\ndata = [\n    [1, 0.8, 0.7, 0.6, 0.5],\n    [0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.8, 0.7, 0.6, 0.5, 0.4],\n    [0.7, 0.6, 0.5, 0.4, 0.3],\n    [0.6, 0.5, 0.4, 0.3, 0.2]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a heatmap using the data\ncax = ax.matshow(data, cmap='hot')\n\n# Add a colorbar to the plot\nfig.colorbar(cax)\n\n# Set the labels for the players\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\nax.set_xticks(np.arange(len(players)))\nax.set_yticks(np.arange(len(players)))\nax.set_xticklabels(players)\nax.set_yticklabels(players)\n\n# Set the title of the plot\nax.set_title('Heatmap of Player Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart visualization based on the provided data.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ndata = {\n    'LIVE': [10, 20, 30, 40],\n    'CSIQ': [10, 20, 30, 40]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Set the width of each bar\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(data['LIVE']))\nr2 = [x + bar_width for x in r1]\n\n# Create bars for LIVE\nbars1 = ax.bar(r1, data['LIVE'], color='blue', width=bar_width, edgecolor='grey', label='LIVE')\n\n# Create bars for CSIQ\nbars2 = ax.bar(r2, data['CSIQ'], color='green', width=bar_width, edgecolor='grey', label='CSIQ')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Predicted category')\nax.set_ylabel('Labeling Function Similarity')\nax.set_title('Bar Chart of Labeling Function Similarity')\nax.set_xticks([r + bar_width / 2 for r in range(len(data['LIVE']))])\nax.set_xticklabels(['0', '10', '20', '30'])\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['LOH0', 'LOH1', 'LOH2', 'LOMLP']\nvalues = [10, 7, 28, 22]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, values, color='orange')\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI']\nsubcategories = ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\nvalues = [\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.6, 0.7, 0.8, 0.9, 1.0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('coolwarm')\n\n# Create a bar chart\nfor i, category in enumerate(categories):\n    for j, subcategory in enumerate(subcategories):\n        ax.barh(subcategory, values[i][j], left=np.sum(values[i][:j]), height=0.5, color=cmap(j / len(subcategories)))\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Values')\nax.set_ylabel('Subcategories')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 1.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['1', '3', '5', '9', '12']\nvalues = [1, 3, 5, 9, 12]\ncolors = ['purple', 'purple', 'purple', 'purple', 'purple']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Set the title and labels\nax.set_title('Perplexity')\nax.set_xlabel('To layer')\nax.set_ylabel('Start removing layer')\n\n# Add a text box with the equation\nequation_text = r'$mbert\\rightarrow sat$ Perplexity=$7.59$'\nax.text(0.05, 0.95, equation_text, transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the y-axis limits\nax.set_ylim(-1, 12)\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(-1, 13, 2))\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-1', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'])\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 4.5)\n\n# Set the x-axis ticks\nax.set_xticks(range(len(categories)))\n\n# Set the x-axis tick labels\nax.set_xticklabels(categories)\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('red')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the heatmap\ndata = [\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 588, 327],\n    [459, 274, 797, 665, 605],\n    [784, 637, 523, 435, 405],\n    [935, 945, 739, 856, 243],\n    [729, 651, 888, 717, 891],\n    [863, 700, 644, 650, 760],\n    [292, 949, 365, 142, 473]\n]\n\n# Define the labels for the rows and columns\nrow_labels = ['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3']\ncol_labels = ['Sales Rank 1', 'Sales Rank 2', 'Sales Rank 3', 'Sales Rank 4', 'Sales Rank 5']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Create a heatmap using the data\nheatmap = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Set the tick labels for the rows and columns\nax.set_xticks(np.arange(len(col_labels)))\nax.set_yticks(np.arange(len(row_labels)))\nax.set_xticklabels(col_labels)\nax.set_yticklabels(row_labels)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Add a colorbar to the heatmap\ncbar = ax.figure.colorbar(heatmap, ax=ax)\ncbar.ax.set_ylabel('Sales', rotation=-90, va=\"bottom\")\n\n# Set the title of the heatmap\nax.set_title('Sales Performance Heatmap')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart with a color gradient and a vertical color bar on the right side.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ndata = {\n    'context': [0.2, 0.4, 0.6, 0.8],\n    'option': [0.3, 0.5, 0.7, 0.9],\n    'cot': [0.1, 0.3, 0.5, 0.7],\n    'last': [0.2, 0.4, 0.6, 0.8]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the x-axis limits\nax.set_xlim(0, 30)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 31, 5))\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the title of the plot\nax.set_title('Bar Chart with Color Gradient')\n\n# Set the x-axis label\nax.set_xlabel('Values')\n\n# Set the y-axis label\nax.set_ylabel('Colors')\n\n# Plot the bars with a color gradient\nfor i, (key, values) in enumerate(data.items()):\n    ax.bar(range(0, 31, 5), values, width=4, bottom=i * 0.2, color=plt.cm.viridis(np.linspace(0, 1, len(values))))\n\n# Add a vertical color bar on the right side\ncbar = fig.colorbar(ax.images[0], ax=ax, orientation='vertical')\ncbar.set_label('Colors')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart with multiple subplots, each representing a different weather-related topic. The chart includes temperature data and correlation coefficients for various weather conditions.\n\nThe script uses the matplotlib library to create the bar chart. It sets up a figure with a specified size and creates a grid of subplots using the `subplots` function. Each subplot contains a bar chart with specific data points and labels.\n\nThe script also includes a vertical color bar on the right side of the figure, which represents the correlation coefficient values. The color bar is created using the `colorbar` function and is positioned at the right edge of the figure.\n\nThe script uses a loop to iterate over the data for each weather condition and create the corresponding bar charts. The data is stored in a list of dictionaries, where each dictionary represents a weather condition and its associated data.\n\nThe script also includes a title for the entire figure, which is set using the `suptitle` function. The title is centered and has a font size of 14.\n\nThe script uses a custom colormap to represent the correlation coefficient values. The colormap is defined using the `LinearSegmentedColormap` class from the `matplotlib.colors` module.\n\nThe script also includes a legend for the bar charts, which is added to the first subplot using the `legend` function.\n\nThe script uses the `tight_layout` function to adjust the spacing between the subplots and the figure edges.\n\nOverall, this script provides a comprehensive example of how to create a bar chart with multiple subplots and a color bar in Python using the matplotlib library.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Define the data for each weather condition\ndata = [\n    {\n        'title': 'Autoformer',\n        'x': [96, 192, 336, 720],\n        'y': [0.55, 0.72, 0.6, 0.54],\n        'correlation': 0.98,\n        'colors': ['orange', 'orange', 'orange', 'orange']\n    },\n    {\n        'title': 'Informer',\n        'x': [96, 192, 336, 720],\n        'y': [0.02, 0.83, 0.78, 0.87],\n        'correlation': 0.98,\n        'colors': ['orange', 'orange', 'orange', 'orange']\n    },\n    {\n        'title': 'Reformer',\n        'x': [96, 192, 336, 720],\n        'y': [0.46, 0.62, 0.68, 0.62],\n        'correlation': 0.98,\n        'colors': ['orange', 'orange', 'orange', 'orange']\n    },\n    {\n        'title': 'Transformer',\n        'x': [96, 192, 336, 720],\n        'y': [0.32, 0.36, 0.57, 0.44],\n        'correlation': 0.98,\n        'colors': ['orange', 'orange', 'orange', 'orange']\n    }\n]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(7.0, 6.0))\n\n# Set the title for the entire figure\nfig.suptitle('Weather', fontsize=14)\n\n# Define a custom colormap for the correlation coefficient values\ncmap = LinearSegmentedColormap.from_list('custom_cmap', ['red', 'yellow', 'green'])\n\n# Iterate over the data and create the bar charts\nfor i, ax in enumerate(axes.flat):\n    if i < len(data):\n        d = data[i]\n        ax.bar(d['x'], d['y'], color=d['colors'])\n        ax.set_title(d['title'])\n        ax.set_xlabel('Temperature')\n        ax.set_ylabel('Correlation Coefficient')\n        ax.legend(['Data'])\n        ax.set_ylim(-1, 1)\n        ax.set_yticks([-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1])\n        ax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '1.00'])\n        ax.set_xticks([96, 192, 336, 720])\n        ax.set_xticklabels(['96', '192', '336', '720'])\n        ax.spines['top'].set_visible(False)\n        ax.spines['right'].set_visible(False)\n        ax.spines['bottom'].set_visible(False)\n        ax.spines['left'].set_visible(False)\n        ax.tick_params(axis='both', which='both', length=0)\n        ax.text(0.5, 1.05, f'Correlation: {d[\"correlation\"]:.2f}', transform=ax.transAxes, ha='center', va='center')\n\n# Add a vertical color bar on the right side of the figure\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=-1, vmax=1))\nsm._A = []\ncbar = fig.colorbar(sm, ax=axes.ravel().tolist(), orientation='vertical', fraction=0.046, pad=0.04)\ncbar.set_label('Correlation Coefficient')\n\n# Adjust the spacing between the subplots and the figure edges\nplt.tight_layout()\n\n# Display the figure\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\n\"\"\"\nGenerated by http://graphviz.org/\n\"\"\"\nimport pygraphviz as pgv\nA = pgv.AGraph(directed=True)\nA.node_attr['style'] = 'filled'\nA.node_attr['shape'] = 'circle'\nA.add_node('Villager', color='blue', fillcolor='blue', label='15.7')\nA.add_node('Hunter', color='blue', fillcolor='blue', label='28.1')\nA.add_node('Witch', color='blue', fillcolor='blue', label='26.0')\nA.add_node('Seer', color='blue', fillcolor='blue', label='14.5')\nA.add_node('Abstain', color='blue', fillcolor='blue', label='10.5')\nA.add_edge('Villager', 'Hunter')\nA.add_edge('Villager', 'Witch')\nA.add_edge('Villager', 'Seer')\nA.add_edge('Villager', 'Abstain')\nA.add_edge('Hunter', 'Witch')\nA.add_edge('Hunter', 'Seer')\nA.add_edge('Hunter', 'Abstain')\nA.add_edge('Witch', 'Seer')\nA.add_edge('Witch', 'Abstain')\nA.add_edge('Seer', 'Abstain')\nA.layout(prog='dot')\nA.draw('output.png', format='png', prog='dot')\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nresponses = [169, 115, 219, 67, 177]\nquestion_types = [\n    [547, 662, 271, 145],\n    [439, 753, 239, 1355],\n    [585, 557, 259, 1269],\n    [941, 708, 432, 732],\n    [554, 661, 235, 1246]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('coolwarm')\n\n# Plot the bars with varying colors\nfor i, question_type in enumerate(question_types):\n    ax.bar(categories, question_type, bottom=[sum(question_types[j][:i+1]) for j in range(i+1)], color=cmap(i/(len(question_types)-1)))\n\n# Set the title and labels\nax.set_title('Question Type: All three types of questions')\nax.set_xlabel('Response Action Category')\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 1200)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar charts\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'feet', 'neutral', 'surprise', 'happy']\noriginal_values = [0.1, 0.0, 0.3, 0.0, 0.0, 0.5, 0.0, 0.1]\nadjusted_values = [0.12, 0.0, 0.44, 0.0, 0.0, 0.44, 0.0, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create the bar chart for the original values\noriginal_bars = ax.bar(categories, original_values, bar_width, label='Original')\n\n# Create the bar chart for the adjusted values\nadjusted_bars = ax.bar([c + bar_width for c in categories], adjusted_values, bar_width, label='Adjusted')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Original and Adjusted Values')\nax.set_xticks([c + bar_width / 2 for c in categories])\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nvotess = ['Voter 1', 'Voter 2', 'Voter 3', 'Voter 4', 'Voter 5', 'Voter 6', 'Voter 7', 'Voter 8', 'Voter 9', 'Voter 10', 'Voter 11', 'Voter 12', 'Voter 13', 'Voter 14', 'Voter 15', 'Voter 16', 'Voter 17', 'Voter 18', 'Voter 19', 'Voter 20', 'Voter 21', 'Voter 22', 'Voter 23', 'Voter 24', 'Voter 25', 'Voter 26', 'Voter 27', 'Voter 28', 'Voter 29', 'Voter 30']\npercentages = [\n    [15.7, 28.1, 2.6, 2.6, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 0.5, 28.6, 9.2],\n    [50.8, 12.3, 0.9, 0.9, 14.3, 13.9],\n    [49.2, 11.2, 0.6, 0.6, 16.3, 13.4],\n    [50.3, 12.0, 0.9, 0.9, 16.3, 13.4]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the limits for the x-axis\nax.set_xlim(0, len(voters))\n\n# Set the limits for the y-axis\nax.set_ylim(0, len(votess))\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(voters)))\nax.set_xticklabels(voters)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(len(votess)))\nax.set_yticklabels(votess)\n\n# Set the title of the plot\nax.set_title('Voter Preferences')\n\n# Set the color map\ncmap = plt.cm.Blues\n\n# Plot the circles\nfor i, voter in enumerate(voters):\n    for j, vote in enumerate(votess):\n        ax.add_artist(plt.Circle((i + 0.5, j + 0.5), 0.4, color=cmap(percentages[i][j] / 100)))\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm)\ncbar.set_label('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\n\"\"\"\n=====================================\nHeatmap of a 2D array with color bars\n=====================================\n\nThis example demonstrates how to create a heatmap using a 2D array and add color bars to both the x and y axes.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a 2D array with random values\ndata = np.random.rand(10, 10)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add a color bar to the right of the heatmap\nfig.colorbar(cax)\n\n# Set the title of the plot\nax.set_title('Heatmap of a 2D array')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first row\ndata1 = [0.1, 0.08, 0.3, 0.6, 0, 0.5, 0.07, 0.1]\ncolors1 = ['lightgray', 'lightgray', 'lightgray', 'lightgray', 'lightgray', 'black', 'black', 'lightgray']\n\n# Data for the second row\ndata2 = [0.12, 0.22, 0.44, 0.3, 0.32, 0.44, 0.1, 0]\ncolors2 = ['lightgray', 'lightgray', 'black', 'lightgray', 'lightgray', 'black', 'lightgray', 'lightgray']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the first row\nax.bar(range(len(data1)), data1, color=colors1, width=0.8, align='center')\n\n# Plot the second row\nax.bar(range(len(data2)), data2, color=colors2, width=0.8, align='center', bottom=data1)\n\n# Set the x-axis limits and labels\nax.set_xlim(-1, len(data1))\nax.set_xticks(range(len(data1)))\nax.set_xticklabels(['0.10', '0.08', '0.30', '0.60', '0.00', '0.50', '0.07', '0.10'])\n\n# Set the y-axis limits\nax.set_ylim(0, 0.65)\n\n# Remove the y-axis ticks and labels\nax.set_yticks([])\nax.set_yticklabels([])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley']\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021]\nvalues = [\n    [0.8, 2.4, 2.5, 3.9, 0.0],\n    [2.4, 0.0, 4.0, 1.0, 0.0],\n    [1.1, 2.4, 0.8, 4.3, 0.0],\n    [0.6, 0.0, 0.3, 0.0, 0.0],\n    [0.7, 1.7, 0.6, 0.0, 0.0],\n    [1.3, 1.2, 0.0, 0.0, 0.0],\n    [0.1, 2.0, 0.0, 0.0, 0.0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the width of each bar\nbar_width = 0.2\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(years))\n\n# Plot the bars for each category\nfor i, category in enumerate(categories):\n    ax.bar(index + i * bar_width, values[i], bar_width, label=category)\n\n# Set the x-axis labels\nax.set_xlabel('Year')\nax.set_ylabel('Harvest [t/year]')\nax.set_title('Harvest by Year and Category')\n\n# Set the x-axis tick labels\nax.set_xticks(index + bar_width * (len(categories) - 1) / 2)\nax.set_xticklabels(years)\n\n# Add a legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code-maker\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvest = [6, 5, 3, 2, 1, 0.6]\nweekly_sales = [80, 70, 60, 50, 40, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, harvest, color='green')\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Harvest [t/y]')\nax.set_title('Harvest vs Category')\n\n# Add value labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code-maker\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Define the data for the plot\ndata = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]\n]\n\n# Plot the data\nim = ax.imshow(data, cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Intensity', rotation=-90, va=\"bottom\")\n\n# Set the labels for the x-axis\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['one', 'two', 'three', 'four', 'five'])\nax.set_yticklabels(['one', 'two', 'three', 'four', 'five'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar charts\ndata1 = [3, 2, 5, 4, 6, 7, 8, 9]\ndata2 = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the title of the chart\nax.set_title('default: no edges')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Plot the first bar chart\nax.bar(range(len(data1)), data1, color='blue', alpha=0.5)\n\n# Plot the second bar chart\nax.bar(range(len(data2)), data2, color='red', alpha=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\n\"\"\"\n=====================\nSales of vendors (in tons/year)\n=====================\n\nThis example demonstrates how to create a bar chart with multiple bars for each category.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes']\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\nsales = [\n    [1.5, 2.2, 1.8, 3.2, 0.5],\n    [2.8, 0.5, 3.6, 1.8, 0.7],\n    [1.0, 2.1, 0.9, 4.0, 1.5],\n    [0.7, 0.6, 0.4, 3.4, 2.3],\n    [0.9, 1.6, 0.7, 5.9, 2.0],\n    [1.2, 1.3, 0.5, 3.1, 0.7],\n    [0.3, 1.9, 0.6, 1.8, 0.8]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.15\n\n# Set the positions of the bars\nindex = np.arange(len(vendors))\n\n# Plot the bars\nfor i, category in enumerate(categories):\n    ax.bar(index + i * bar_width, sales[i], bar_width, label=category)\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Vendors')\nax.set_ylabel('Sales (in tons/year)')\nax.set_title('Sales of vendors (in tons/year)')\nax.set_xticks(index + bar_width * len(categories) / 2)\nax.set_xticklabels(vendors)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart representing the degree of acceptance of a product across different categories.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Low', 'Medium', 'High']\nvalues = [17, 36, 28, 23]\nheights = [79, 53, 34, 35]\nmedium_values = [4, 5, 0, 0]\nhigh_values = [42, 38, 0, 55]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the bars for each category\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Degree of acceptance of a product')\nax.set_ylabel('Values')\nax.set_title('Degree of acceptance of a product')\n\n# Add text annotations for each bar\nfor bar, height, medium, high in zip(bars, heights, medium_values, high_values):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, f'{yval}\\n{medium}\\n{high}', ha='center', va='bottom')\n\n# Set the limits for the y-axis\nax.set_ylim(0, 80)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Define the data for the bar chart\ncategories = ['mistral', 'distilroberta', 'mpnet', 'MiniLM', 'qa-distilbert']\nvalues = [0.9, 0.8, 0.7, 0.6, 0.5]\n\n# Create a bar chart\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart Example')\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the heatmap\ndata = np.random.rand(10, 12)\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='hot', fignum=1)\n\n# Set the colorbar\nfig.colorbar(cax)\n\n# Set the title of the plot\nax.set_title('ROC\\'s AUC')\n\n# Set the labels for the x-axis\nax.set_xlabel('Timeshift')\n\n# Set the labels for the y-axis\nax.set_ylabel('Scales')\n\n# Set the tick labels for the x-axis\nax.set_xticks(np.arange(len(['0', '2', '4', '6', '8', '10', '12'])))\nax.set_xticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Set the tick labels for the y-axis\nax.set_yticks(np.arange(len(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])))\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation', 'Last']\ncounts = [0, 4, 8, 12, 16, 20, 24, 28]\nvalues = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Create a bar chart\nax.bar(categories, values, color='green')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\ndata = [\n    [44, 12, 0, 0],\n    [35, 8, 24, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, "}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_xlabel('Programming Model')\nax.set_ylabel('Memory Bandwidth (GB/s)')\nax.set_yticks([400, 600, 800, 1000, 1200, 1400, 1600])\nax.set_yticklabels(['400', '600', '800', '1000', '1200', '1400', '1600'])\nax.set_xticks([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5])\nax.set_xticklabels(['Kokkos', 'Raja', 'OMP', 'OACC', 'SYCL', 'Native Port', 'Perlmutter', 'Corona', 'Frontier'])\n\nax.bar([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5], [876, 136, 435, 534, 322, 804, 750, 1737, 742], color='lightblue', label='Summit')\nax.bar([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5], [750, 1737, 742, 375, 750, 1825, 764, 676, 782], color='salmon', label='Perlmutter')\nax.bar([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5], [764, 120, 843, 421, 925, 911, 482, 1170, 120], color='lightgreen', label='Corona')\nax.bar([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5], [482, 120, 843, 1170, 925, 911, 482, 1170, 120], color='lightgrey', label='Frontier')\n\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the heatmap\ndata = [\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.71, 0.82],\n    [0.90, 0.90, 0.93, 0.92, 0.66, 0.69, 0.72, 0.82],\n    [0.89, 0.93, 0.95, 0.95, 0.66, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.68, 0.69, 0.72, 0.82],\n    [0.64, 0.65, 0.66, 0.66, 0.71, 0.75, 0.77, 0.85],\n    [0.66, 0.69, 0.69, 0.69, 0.72, 0.75, 0.77, 0.85],\n    [0.68, 0.69, 0.69, 0.69, 0.74, 0.76, 0.79, 0.86],\n    [0.71, 0.72, 0.72, 0.72, 0.75, 0.77, 0.79, 0.86],\n    [0.82, 0.82, 0.82, 0.82, 0.85, 0.86, 0.88, 0.90],\n    [0.88, 0.88, 0.88, 0.88, 0.89, 0.89, 0.89, 0.90],\n    [0.90, 0.90, 0.90, 0.90, 0.92, 0.92, 0.92, 0.93],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],\n    [0."}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\n\"\"\"\n=====================================\nBar chart with varying bar heights\n=====================================\n\nThis example demonstrates a bar chart with varying bar heights.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['ROUGE', 'BertScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttN', 'PPL']\nvalues = [\n    [0.19, 0.62],\n    [0.19, 0.62, 0.53, 0.52],\n    [0.16, 0.39, 0.50, 0.52],\n    [0.03, 0.24, 0.34, 0.20],\n    [0.03, 0.24, 0.34, 0.20],\n    [0.03, 0.10, 0.06, 0.20, 0.10, 0.06],\n    [0.07, 0.28, 0.26, 0.20, 0.21, 0.05]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the width of each bar\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars\nbars = []\nfor i, val in enumerate(values):\n    bars.append(ax.bar(index + i * bar_width, val, bar_width, label=f'Category {i+1}'))\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart with Varying Bar Heights')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart with two subplots, each containing a grid of bars representing data points. The bars are colored in shades of blue and purple. The x-axis represents the number of layers, ranging from 0 to 15, and the y-axis represents the number of layers. The title of the first subplot is \"pythia-1b\" and the title of the second subplot is \"pythia-1b\". The text \"No / The\" is displayed at the top of the first subplot, and the text \"No / The\" is displayed at the top of the second subplot.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data for the first subplot\ndata1 = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n]\n\n# Data for the second subplot\ndata2 = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot the first subplot\nfor i in range(len(data1)):\n    axs[0].bar(range(len(data1[i])), data1[i], color='blue')\n\n# Plot the second subplot\nfor i in range(len(data2)):\n    axs[1].bar(range(len(data2[i])), data2[i], color='purple')\n\n# Set titles for the subplots\naxs[0].set_title('pythia-1b')\naxs[1].set_title('pythia-1b')\n\n# Set labels for the x-axis\naxs[0].set_xlabel('Layers')\naxs[1].set_xlabel('Layers')\n\n# Set labels for the y-axis\naxs[0].set_ylabel('Layers')\naxs[1].set_ylabel('Layers')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = [\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10],\n    ["}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/victorlei/image2code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the title of the plot\nax.set_title('Cosine Similarity')\n\n# Set the x-axis label\nax.set_xlabel('Cosine Similarity')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim(-0.6, 0.8)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-0.6', '-0.4', '-0.2', '0', '0.2', '0.4', '0.6', '0.8'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True, linestyle='--', linewidth=0.5)\n\n# Set the bar colors\nbar_colors = ['blue', 'green']\n\n# Set the bar positions\nbar_positions = [0.1, 0.9]\n\n# Set the bar widths\nbar_widths = [0.8, 0.8]\n\n# Set the bar heights\nbar_heights = [70, 70]\n\n# Set the bar labels\nbar_labels = ['Inter Class', 'Intra Class']\n\n# Set the bar edge colors\nbar_edge_colors = ['black', 'black']\n\n# Set the bar hatch patterns\nbar_hatch_patterns = ['/', '\\\\']\n\n# Set the bar text positions\nbar_text_positions = [0.45, 0.45]\n\n# Set the bar text alignments\nbar_text_alignments = ['center', 'center']\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center', 'center']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set the bar text font sizes\nbar_text_font_sizes = [10, 10]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal', 'normal']\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal', 'normal']\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif', 'sans-serif']\n\n# Set the bar text font properties\nbar_text_font_properties = ['normal', 'normal']\n\n# Set the bar text font names\nbar_text_font_names = ['Arial', 'Arial']\n\n# Set"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/victorlei/image2code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(4, 2, figsize=(10.0, 8.0))\n\n# Set titles for each subplot\ntitles = ['Baseline', 'MIRL w/ MUL', 'MIRL + OCLR w/ MUL', 'd', 'MIRL + OCLR w/ DOTLA', 'd']\nfor ax, title in zip(axes.flat, titles):\n    ax.set_title(title)\n\n# Set labels for the x-axis\nx_labels = ['0.5', '1.0', '1.5', '2.0', '2.5']\nfor ax in axes[:, 0]:\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_xticklabels(x_labels)\n\n# Set labels for the y-axis\ny_labels = ['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4', '1.6', '1.8', '2.0', '2.2', '2.4', '2.6']\nfor ax in axes[:, 1]:\n    ax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    ax.set_yticklabels(y_labels)\n\n# Set the color map for the plots\ncmap = 'viridis'\n\n# Plot data for each subplot\ndata = [\n    [1.2, 1.3, 1.4, 1.5, 1.6],\n    [1.2, 1.3, 1.4, 1.5, 1.6],\n    [1.2, 1.3, 1.4, 1.5, 1.6],\n    [1.2, 1.3, 1.4, 1.5, 1.6],\n    [1.2, 1.3, 1.4, 1.5, 1.6],\n    [1.2, 1.3, 1.4, 1.5, 1.6]\n]\n\nfor ax, d in zip(axes.flat, data):\n    ax.imshow([[d] * 5], cmap=cmap, aspect='auto')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(6, 2, figsize=(7, 8), sharex=True, sharey=True)\n\n# Define the data for each subplot\ndata_sets = [\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])),\n    (np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]), np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]))\n]\n\n# Plot the data on each subplot\nfor i, (x, y) in enumerate(data_sets):\n    ax = axes[i // 2, i % 2]\n    ax.plot(x, y, 'o')\n    ax.set_title(f'Data Set {i + 1}')\n    ax.set_xlabel('X-axis')\n    ax.set_ylabel('Y-axis')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart representing the frequency of different species of desert animals based on their weight.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = [\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]\n]\n\n# Define the labels for the x-axis\nlabels = ['0.02', '0.04', '0.06', '0.08', '0.10', '0.12', '0.14', '0.16', '0.18', '0.20']\n\n# Define the colors for the bars\ncolors = ['blue', 'orange']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data with specified colors\nfor i in range(len(data)):\n    ax.bar(labels, data[i], color=colors[i % len(colors)])\n\n# Set the title of the plot\nax.set_title('Desert Animals in the Wild')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Animal Weight (Tons)')\nax.set_ylabel('Frequency')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = {\n    '0': [10, 20, 30, 40, 50, 60, 70, 80],\n    '2': [10, 20, 30, 40, 50, 60, 70, 80],\n    '4': [10, 20, 30, 40, 50, 60, 70, 80],\n    '6': [10, 20, 30, 40, 50, 60, 70, 80],\n    '8': [10, 20, 30, 40, 50, 60, 70, 80]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the title of the plot\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Plot the bar chart\nfor key, values in data.items():\n    ax.bar(key, values, color='blue', alpha=0.5, label='Normal data' if key == '0' else 'Uniform data')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the histogram\ndata}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndistances = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\nbaguette_counts = [100, 75, 50, 25, 0, 0, 0]\nyoutiao_counts = [125, 100, 75, 50, 25, 0, 0]\n\n# Create a bar chart with two sets of bars\nplt.bar(distances, baguette_counts, color='blue', label='Baguette')\nplt.bar(distances, youtiao_counts, color='orange', bottom=baguette_counts, label='Youtiao')\n\n# Set the title and labels\nplt.title('Baking Accuracy Analysis')\nplt.xlabel('Distance to Threshold')\nplt.ylabel('Frequency')\n\n# Set the x-axis tick labels\nplt.xticks(distances)\n\n# Add a legend\nplt.legend()\n\n# Set the figure size\nplt.figure(figsize=(5.0, 4.0))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['XSum', 'CNN/DailyMail', 'NarrativeQA', 'NaturalQuestions - Closed-book', 'NaturalQuestions - Open-book', 'QuAC']\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny = [100, 110, 120, 130, 140]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16, 7))\n\n# Plot bars\nfor i, label in enumerate(labels):\n    ax.bar(x, y, color='blue', alpha=0.5)\n    ax.text(x[i], y[i] + 5, label, ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Test Winning Distance')\nax.set_ylabel('Number of Pairs')\nax.set_title('Bar Chart Example')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\nyears = [0, 50, 100, 150, 200, 250]\ndata = [\n    [17, 16, 14, 13, 12, 11],\n    [19, 18, 16, 15, 14, 13],\n    [17, 16, 14, 13, 12, 11],\n    [19, 18, 16, 15, 14, 13],\n    [17, 16, 14, 13, 12, 11]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Set the x-axis label\nax.set_xlabel('Number of Nominations')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Set the tick labels for the y-axis\nax.set_yticks(years)\nax.set_yticklabels([str(year) for year in years])\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(1, 6))\nax.set_xticklabels(categories)\n\n# Set the limits for the x-axis\nax.set_xlim(0, 5)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 250)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='major', length=0)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='major', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='minor', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='minor', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', length=0)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', length=0)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', bottom=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', left=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', top=False)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', right=False)\n\n# Set the color of the x-axis tick mark labels\nax.tick_params(axis='x', which='both', labelbottom=True)\n\n# Set the color of the y-axis tick mark labels\nax.tick_params(axis='y', which='both', labelleft=True)\n\n# Set the color of the x-axis tick mark labels\nax"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\ndata1 = [\n    [400, 350, 300, 250, 200, 150, 100, 50],\n    [300, 250, 200, 150, 100, 50, 0, 0],\n    [200, 150, 100, 50, 0, 0, 0, 0]\n]\n\ndata2 = [\n    [400, 350, 300, 250, 200, 150, 100, 50],\n    [300, 250, 200, 150, 100, 50, 0, 0],\n    [200, 150, 100, 50, 0, 0, 0, 0]\n]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(10.0, 7.0))\n\n# Plot the first graph\nfor i in range(len(data1)):\n    axes[0].bar([0.05 * i] * len(data1[i]), data1[i], width=0.05, color='blue' if i == 0 else 'orange')\n\n# Plot the second graph\nfor i in range(len(data2)):\n    axes[1].bar([0.05 * i] * len(data2[i]), data2[i], width=0.05, color='green' if i == 0 else 'red')\n\n# Set labels and title\naxes[0].set_title('MNIST - Defect Detection')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\naxes[0].set_xlim(0, 0.3)\naxes[0].set_ylim(0, 400)\n\naxes[1].set_title('FashionMNIST - Defect Detection')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\naxes[1].set_xlim(0, 0.3)\naxes[1].set_ylim(0, 400)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [50, 50, 50, 50, 50, 50, 50]\ny2 = [50, 50, 50, 50, 50, 50, 50]\ny3 = [50, 50, 50, 50, 50, 50, 50]\ny4 = [50, 50, 50, 50, 50, 50, 50]\ny5 = [50, 50, 50, 50, 50, 50, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='SAM-dependent methyltransferase')\nax.plot(x, y2, label='Thioredoxin-like')\nax.plot(x, y3, label='Tetratricopeptide-like helical domain')\nax.plot(x, y4, label='CheY-like')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('TM-score')\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim(0.4, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0, 70)\n\n# Set the tick labels\nax.set_xticks([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nax.set_yticks(range(0, 71, 10))\n\n# Set the tick label rotation\nax.set_xticklabels(['0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'], rotation=0)\nax.set_yticklabels(range(0, 71, 10), rotation=0)\n\n# Set the grid\nax.grid(True)\n\n# Set the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code-maker\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ndata = [\n    [1, 2, 3, 4, 5],\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [1.1, 1.2, 1.3, 1.4, 1.5],\n    [1.6, 1.7, 1.8, 1.9, 2.0],\n    [2.1, 2.2, 2.3, 2.4, 2.5],\n    [2.6, 2.7, 2.8, 2.9, 3.0],\n    [3.1, 3.2, 3.3, 3.4, 3.5]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i in range(len(data)):\n    ax.plot(data[i], label=f'Data {i+1}')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Class', 'Camel', 'Kangaroo']\nvalues = [1000, 100, 10]\n\n# Create a bar chart\nplt.bar(categories, values, color=['green', 'green', 'pink'])\n\n# Set the title and labels\nplt.title('CIFAR100 \\'Desert\\' Concept')\nplt.xlabel('Concept Weight')\nplt.ylabel('Count')\n\n# Set the y-axis limits\nplt.ylim(0, 1000)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ndistance_diff = [-5.0, -2.5, 0.0, 2.5, 5.0, 7.5, 10.0]\ncenter_samples = [100, 80, 60, 40, 20, 10, 5]\nrandom_samples = [90, 70, 50, 30, 10, 5, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5, 3))\nbar_width = 0.35\nindex = range(len(distance_diff))\n\nbars_center = ax.bar([i - bar_width / 2 for i in index], center_samples, bar_width, label='Center')\nbars_random = ax.bar([i + bar_width / 2 for i in index], random_samples, bar_width, label='Random')\n\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Samples')\nax.set_title('Comparison of Samples by Distance Difference')\nax.set_xticks(index)\nax.set_xticklabels(distance_diff)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nrepetition = [0.0, 2.5, 5.0, 7.5, 10.0]\nclusters = [1400, 1000, 600, 200, 50]\n\n# Create bar chart\nplt.figure(figsize=(4.0, 3.0))\nbars = plt.bar(repetition, clusters, color='orange')\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')\n\n# Set title and labels\nplt.title('Number of Clusters vs Number of Repetition')\nplt.xlabel('Number of Repetition')\nplt.ylabel('Number of Clusters')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ndistances = [0, 1, 2, 3, 4]\ncorrectly_classified = [400, 300, 200, 100, 0]\nmisclassified = [350, 250, 150, 50, 0]\n\n# Create a bar chart\nplt.bar(distances, correctly_classified, color='blue', label='Correctly classified')\nplt.bar(distances, misclassified, bottom=correctly_classified, color='orange', label='Misclassified')\n\n# Set labels and title\nplt.xlabel('Distance to threshold')\nplt.ylabel('Count')\nplt.title('Classification Results by Distance')\n\n# Add legend\nplt.legend()\n\n# Set x-axis limits\nplt.xlim(0, 5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nconfidences = [0.0, 0.2, 0.4, 0.6, 0.8]\naccuracies = [0.2, 0.2, 0.4, 0.6, 0.8]\n\n# Create a bar chart\nplt.bar(confidences, accuracies, color='brown')\n\n# Set the title and labels\nplt.title('Calibration Error: 0.31')\nplt.xlabel('Confidence in bin')\nplt.ylabel('Accuracy in bin')\n\n# Set the y-axis limits\nplt.ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nqueries = [0.2, 0.4, 0.6, 0.8]\noverlap = [1000, 2000, 3000, 4000]\n\n# Create a bar chart\nplt.bar(queries, overlap, color='blue')\n\n# Set the title and labels\nplt.title('Number of Queries Overlap')\nplt.xlabel('% images overlap')\nplt.ylabel('Number of queries')\n\n# Set the y-axis limits\nplt.ylim(0, 5000)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define the data for the histogram\ndata = np.random.normal(loc=0.08, scale=0.05, size=1000)\n\n# Plot the histogram\nax.hist(data, bins=30, color='blue', edgecolor='black')\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 0.25)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 500)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [5, 10, 15, 20]\ny1 = [40, 60, 80, 100]\ny2 = [20, 40, 60, 80]\ny3 = [20, 40, 60, 80]\ny4 = [20, 40, 60, 80]\ny5 = [20, 40, 60, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the lines with specified colors and markers\nax.plot(x, y1, 'b-', label='JPEG+LDPC')\nax.plot(x, y2, 'r-', label='DEEPJSCC w/o ofdm')\nax.plot(x, y3, 'g-', label='DEEPJSCC w/ ofdm')\nax.plot(x, y4, 'm-', label='OURS')\n\n# Set the title and labels\nax.set_title('Classification Accuracy (%)')\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the tick marks\nax.set_xticks([5, 10, 15, 20])\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for each category\ncontent = [5, 6, 6, 5, 4, 3, 2, 1]\norganization = [6, 6, 5, 4, 3, 2, 1, 0]\nlanguage = [6, 6, 5, 4, 3, 2, 1, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(content, label='Content', color='blue')\nax.plot(organization, label='Organization', color='orange')\nax.plot(language, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Performance Gain (%)')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 20, 40, 60, 80]\ny1 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny2 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny3 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny4 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny5 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny6 = [0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r', label='coco (10k)')\nax.plot(x, y2, 'g', label='laion (10k)')\nax.plot(x, y3, 'b', label='coco (5k)')\nax.plot(x, y4, 'm', label='laion (5k)')\nax.plot(x, y5, 'y', label='CLIP')\n\n# Set the title and labels\nax.set_title('Effect of Vocabulary on Zero Shot Accuracy')\nax.set_xlabel('Deposition IO Norm')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Add a horizontal line at y=0.75\nax.axhline(y=0.75, color='black', linestyle='--')\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0.25, 0.5, 0.75, 1.0]\ny1 = [0.03, 0.02, 0.01, 0.01]\ny2 = [0.03, 0.02, 0.01, 0.01]\ny3 = [0.03, 0.02, 0.01, 0.01]\ny4 = [0.03, 0.02, 0.01, 0.01]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'g^', label='MAXN=512')\nax.plot(x, y2, 'r^', label='MAXN=1024')\nax.plot(x, y3, 'bo', label='MAXN=2048')\n\n# Set the title and labels\nax.set_title('Plot of Data Points')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each subplot\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_base_ours_fid = [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1]\ny_base_ours_is = [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1]\ny_base_ours_cw_fid = [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1]\ny_base_ours_cas = [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create subplots\nfig, axs = plt.subplots(3, 3, figsize=(8.0, 10.0))\n\n# Plot FID for base and ours\naxs[0, 0].plot(x, y_base_ours_fid, 'b-', label='base')\naxs[0, 0].plot(x, y_base_ours_fid, 'o-')\naxs[0, 0].set_title('FID (t)')\naxs[0, 0].set_xlabel('Training iterations')\naxs[0, 0].set_ylabel('FID (t)')\naxs[0, 0].legend()\n\n# Plot IS for base and ours\naxs[0, 1].plot(x, y_base_ours_is, 'b-', label='base')\naxs[0, 1].plot(x, y_base_ours_is, 'o-')\naxs[0, 1].set_title('IS (t)')\naxs[0, 1].set_xlabel('Training iterations')\naxs[0, 1].set_ylabel('IS (t)')\naxs[0, 1].legend()\n\n# Plot CW-FID for base and ours\naxs[0, 2].plot(x, y_base_ours_cw_fid, 'b-', label='base')\naxs[0, 2].plot(x, y_base_ours_cw_fid, 'o-')\naxs[0, 2].set_title('CW-FID (t)')\naxs[0, 2].set_xlabel('Training iterations')\naxs[0, 2].set_ylabel('CW-FID (t)')\naxs[0, 2].legend()\n\n# Plot FID for base and ours\naxs[1, 0].plot(x, y_base_ours_fid, 'b-', label='base')\naxs[1, 0].plot(x, y_base_ours_fid, 'o-')\naxs[1, 0].set_title('FID (t)')\naxs[1, 0].set_xlabel('Training iterations')\naxs[1, 0].set_ylabel('FID (t)')\naxs[1, 0].legend()\n\n# Plot IS for base and ours\naxs[1, 1].plot(x, y_base_ours_is, 'b-', label='base')\naxs[1, 1].plot(x, y_base_ours_is, 'o-')\naxs[1, 1].set_title('IS (t)')\naxs[1, 1].set_xlabel('Training iterations')\naxs[1, 1].set_ylabel('IS (t)')\naxs[1, 1].legend()\n\n# Plot CW-FID for base and ours\naxs[1, 2].plot(x, y_base_ours_cw_fid, 'b-', label='base')\naxs[1, 2].plot(x, y_base_ours_cw_fid, 'o-')\naxs[1, 2].set_title('CW-FID (t)')\naxs[1, 2].set_xlabel('Training iterations')\naxs[1, 2].set_ylabel('CW-FID (t)')\naxs[1, 2].legend()\n\n# Plot FID for base and ours\naxs[2, 0].plot(x, y_base_ours_fid, 'b-', label='base')\naxs[2, 0].plot(x, y_base_ours_fid, 'o-')\naxs[2, 0].set_title('FID (t)')\naxs[2, 0].set_xlabel('Training iterations')\naxs[2, 0].set_ylabel('FID (t)')\naxs[2, 0].legend()\n\n# Plot IS for base and ours\naxs[2, 1].plot(x, y_base_ours_is, 'b-', label='base')\naxs[2, 1].plot(x, y_base_ours_is, 'o-')\naxs[2, 1].set_title('IS (t)')\naxs[2, 1].set_xlabel('Training iterations')\naxs[2, 1].set_ylabel('IS (t)')\naxs[2, 1].legend()\n\n# Plot CAS for base and ours\naxs[2, 2].plot(x, y_base_ours_cas, 'b-', label='base')\naxs[2, 2].plot(x, y_base_ours_cas, 'o-')\naxs[2, 2].set_title('CAS (t)')\naxs[2, 2].set_xlabel('Training iterations')\naxs[2, 2].set_ylabel('CAS (t)')\naxs[2, 2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nweeks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\nauto_profiled = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nmanually_analyzed = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nrealize_trend = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nrelease_new_product = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Plot the data\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(weeks, auto_profiled, 'r--', label='Auto-profiled')\nplt.plot(weeks, manually_analyzed, 'b--', label='Manually-analyzed')\nplt.plot(weeks, realize_trend, 'r--')\nplt.plot(weeks, release_new_product, 'b--')\n\n# Add labels and title\nplt.xlabel('Week')\nplt.ylabel('Normalized Value')\nplt.title('Trend Analysis')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30]\ny5 = [55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='blue')\nax.plot(x, y2, label='LWF', color='#FF4500')\nax.plot(x, y3, label='EWC', color='#FF69B4')\nax.plot(x, y4, label='SEQ', color='#FF69B4')\n\n# Set the title and labels\nax.set_title('Average Accuracy')\nax.set_xlabel('Task')\nax.set_ylabel('Percentage')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\ny2 = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\ny3 = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'bo-', label='Oesense')\nax.plot(x, y2, 'ro-', label='KWS')\nax.plot(x, y3, 'go-', label='ECG5000')\n\n# Set the title and labels\nax.set_title('Plot of Accuracy vs Uncertainty Threshold')\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\n\n# Add markers at specific points\nmarkers = [(0.0, 0.99), (0.2, 0.96), (0.4, 0.93), (0.6, 0.9), (0.8, 0.87), (1.0, 0.84)]\nfor x_val, y_val in markers:\n    ax.plot(x_val, y_val, 'k^', markersize=10)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 20, 40, 60, 80, 100, 120]\ny = [10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5]\n\n# Create a plot\nplt.figure(figsize=(6, 4))\nplt.plot(x, y, 'bo-', label='Log KL Divergence')\n\n# Set labels and title\nplt.xlabel('Number of Parameters')\nplt.ylabel('Log KL Divergence')\nplt.title('Plot of Log KL Divergence vs Number of Parameters')\n\n# Set the y-axis limits\nplt.ylim(10**-5, 10**-3)\n\n# Set the y-axis ticks\nplt.yticks([10**-5, 10**-4, 10**-3])\n\n# Display the legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/xuyisheng/SmartImage2Code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the plot\nax.set_title('GPT-4 Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Attack Success Rate')\n\n# Set the x-axis limits\nax.set_xlim(0, 1500)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks([0, 500, 1000, 1500])\n\n# Set the y-axis ticks\nax.set_yticks([0, 2, 4, 6, 8, 10])\n\n# Draw horizontal lines\nfor i in range(0, 11, 2):\n    ax.axhline(y=i, color='gray', linestyle='--', linewidth=0.5)\n\n# Draw vertical lines\nfor i in range(0, 1501, 500):\n    ax.axvline(x=i, color='gray', linestyle='--', linewidth=0.5)\n\n# Draw blue line\nax.plot([0, 500, 1000, 1500], [0.3, 0.7, 0.5, 0.8], 'b-', linewidth=2)\n\n# Draw pink line\nax.plot([0, 500, 1000, 1500], [0.4, 0.6, 0.4, 0.7], 'r-', linewidth=2)\n\n# Draw blue shaded area\nax.fill_between([0, 500, 1000, 1500], [0.3, 0.7, 0.5, 0.8], [0.4, 0.6, 0.4, 0.7], color='blue', alpha=0.3)\n\n# Draw pink shaded area\nax.fill_between([0, 500, 1000, 1500], [0.3, 0.7, 0.5, 0.8], [0.4, 0.6, 0.4, 0.7], color='pink', alpha=0.3)\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second subplot\nax2.set_title('Llama Guard Evaluation')\n\n# Set the x-axis label\nax2.set_xlabel('Iterations')\n\n# Set the y-axis label\nax2.set_ylabel('Attack Success Rate')\n\n# Set the x-axis limits\nax2.set_xlim(0, 1500)\n\n# Set the y-axis limits\nax2.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax2.set_xticks([0, 500, 1000, 1500])\n\n# Set the y-axis ticks\nax2.set_yticks([0, 2, 4, 6, 8, 10])\n\n# Draw horizontal lines\nfor i in range(0, 11, 2):\n    ax2.axhline(y=i, color='gray', linestyle='--', linewidth=0.5)\n\n# Draw vertical lines\nfor i in range(0, 1501, 500):\n    ax2.axvline(x=i, color='gray', linestyle='--', linewidth=0.5)\n\n# Draw blue line\nax2.plot([0, 500, 1000, 1500], [0.3, 0.7, 0.5, 0.8], 'b-', linewidth=2)\n\n# Draw pink line\nax2.plot([0, 500, 1000, 1500], [0.4, 0.6, 0.4, 0.7], 'r-', linewidth=2)\n\n# Draw blue shaded area\nax2.fill_between([0, 500, 1000, 1500], [0.3, 0.7, 0.5, 0.8], [0.4, 0.6, 0.4, 0.7], color='blue', alpha=0.3)\n\n# Draw pink shaded area\nax2.fill_between([0, 500, 1000, 1500], [0.3, 0.7, 0.5, 0.8], [0.4, 0.6, 0.4, 0.7], color='pink', alpha=0.3)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points\nx = np.logspace(-2, 0, 10)\ny_full = np.linspace(40, 80, 10)\ny_spt = np.linspace(40, 80, 10)\ny_vpt = np.linspace(40, 80, 10)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(5, 4))\n\n# Plot the lines\nax.plot(x, y_full, 'g-', label='Full')\nax.plot(x, y_spt, 'r-', label='SPT')\nax.plot(x, y_vpt, 'b-', label='VPT')\n\n# Set the title and labels\nax.set_title('Test Accuracy vs Fraction of Training Data (log scale)')\nax.set_xlabel('Fraction of training data (log scale)')\nax.set_ylabel('Test accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Set the grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 50, 100, 150, 200]\ny1 = [1.5, 1.8, 1.2, 1.7, 1.9]\ny2 = [1.3, 1.6, 1.1, 1.6, 1.8]\ny3 = [1.2, 1.5, 1.0, 1.5, 1.7]\ny4 = [1.1, 1.4, 0.9, 1.4, 1.6]\ny5 = [1.0, 1.3, 0.8, 1.3, 1.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data with different colors and styles\nax.plot(x, y1, 'g-', label='Gradient 1')\nax.plot(x, y2, 'b-', label='Gradient 2')\nax.plot(x, y3, 'r-', label='Gradient 3')\nax.plot(x, y4, 'c-', label='Gradient 4')\nax.plot(x, y5, 'm-', label='Gradient 5')\n\n# Set the title and labels\nax.set_title('Gradient Steps vs. Value')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\n\"\"\"\nGenerated by runml.py\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MOLHIV')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.74, 0.88)\n\n# Draw horizontal lines at specified y-values\nfor y in [0.78, 0.76]:\n    ax.axhline(y=y, color='gray', linestyle='--')\n\n# Draw vertical lines at specified x-values\nfor x in [0.2, 0.4, 0.6, 0.8, 1.0]:\n    ax.axvline(x=x, color='gray', linestyle='--')\n\n# Plot data points\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.78, 0.76, 0.76, 0.76], 'b-', label='PNA + ours')\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.78, 0.76, 0.76, 0.76], 'y-', label='GIN + ours')\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.78, 0.76, 0.76, 0.76], 'y--', label='PNA + GSAT')\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.78, 0.76, 0.76, 0.76], 'y-.', label='GIN + GSAT')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [120, 90, 60, 30, 1]\ny_ours = [75.0, 80.0, 82.5, 85.0, 87.5]\ny_acr = [75.0, 80.0, 82.5, 85.0, 87.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y_ours, 'bo', label='Ours')\nax.plot(x, y_acr, 'go', label='ACR')\n\n# Set the title and labels\nax.set_title('Top-1 Acc (%) vs Imbalance Ratio of Unlabeled Data')\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)')\nax.set_ylabel('Top-1 Acc (%)')\n\n# Set the x-axis limits\nax.set_xlim(0, 120)\n\n# Set the y-axis limits\nax.set_ylim(75, 95)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [40, 50, 60, 70, 80, 90, 100]\ny_APTQ = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\ny_LLaMa_7B = [3.11, 3.11, 3.11, 3.11, 3.11, 3.11, 3.11]\ny_OWQ_4bit = [3.32, 3.32, 3.32, 3.32, 3.32, 3.32, 3.32]\ny_GPTQ_4bit = [3.53, 3.53, 3.53, 3.53, 3.53, 3.53, 3.53]\ny_LLM_QAT_4bit = [3.63, 3.63, 3.63, 3.63, 3.63, 3.63, 3.63]\ny_LLM_QAT_4bit_2 = [3.74, 3.74, 3.74, 3.74, 3.74, 3.74, 3.74]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y_APTQ, label='APTQ', color='blue')\nax.plot(x, y_LLaMa_7B, label='LLaMa-7B (FP16): 5.22', color='purple')\nax.plot(x, y_OWQ_4bit, label='OWQ-4bit: 5.56', color='orange')\nax.plot(x, y_GPTQ_4bit, label='GPTQ-4bit: 5.62', color='green')\nax.plot(x, y_LLM_QAT_4bit, label='LLM-QAT-4bit: 7.4', color='red')\nax.plot(x, y_LLM_QAT_4bit_2, label='LLM-QAT-4bit: 7.4', color='pink')\n\n# Set the title and labels\nax.set_title('Perplexity vs Ratio of 4-bit Utilization')\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [82.98, 89.53, 90.47, 92.41, 93.7, 96.75, 96.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 2.0))\n\n# Plot the data points\nax.plot(x, y, 'bo-', lw=2)\n\n# Set the title and labels\nax.set_title('Coverage Ratio')\nax.set_xlabel('Number of Training Objects')\nax.set_ylabel('Coverage Ratio (%)')\n\n# Set the x-axis limits\nax.set_xlim(2**1, 2**7)\n\n# Set the y-axis limits\nax.set_ylim(70, 100)\n\n# Set the tick marks\nax.set_xticks([2**i for i in range(1, 8)])\nax.set_yticks(range(70, 101, 10))\n\n# Set the tick labels\nax.set_xticklabels(['2', '4', '8', '16', '32', '64', '128'])\nax.set_yticklabels(range(70, 101, 10))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for the plot\nx = [0, 2, 4, 6, 8]\ny1 = [750, 700, 650, 600, 600]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Plot the data points\nax.plot(x, y1, 'bo-', label='Average')\n\n# Set the title and labels\nax.set_title('N-ELBO')\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\n\n# Set the y-axis limits\nax.set_ylim(600, 750)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny1 = [3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2]\ny2 = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\ny3 = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\ny4 = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\ny5 = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\ny6 = [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'm', label='Baseline')\nax.plot(x, y2, 'g', label='SoftMoE')\nax.plot(x, y3, 'm', label='Top1-MoE')\n\n# Set the title and labels\nax.set_title('IQM Human Normalized Score')\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [256, 512, 1024, 2048, 4096, 8192, 16384]\ny_bpe = [0.4, 0.6, 0.8, 0.8, 0.6, 0.4, 0.4]\ny_wordpunct = [0.4, 0.6, 0.8, 0.8, 0.6, 0.4, 0.4]\ny_whitespaces = [0.4, 0.6, 0.8, 0.8, 0.6, 0.4, 0.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y_bpe, 'b-', label='BPE')\nax.plot(x, y_wordpunct, 'o-', label='Wordpunct')\nax.plot(x, y_whitespaces, 'g-', label='Whitespaces')\n\n# Set the title and labels\nax.set_title('Test set TPR | FPR = 10^-4')\nax.set_xlabel('Vocabulary size')\nax.set_ylabel('TPR')\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for CNN, CIF, and STAR\ncnn_data = [35.0, 36.8, 34.4, 32.6, 30.2, 28.6, 26.0]\ncif_data = [36.8, 36.8, 34.4, 32.6, 30.2, 28.6, 26.0]\nstar_data = [35.0, 36.8, 34.4, 32.6, 30.2, 28.6, 26.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with specified colors and markers\nax.plot(cnn_data, label='CNN', color='#FF9999', marker='o')\nax.plot(cif_data, label='CIF', color='#FF5733', marker='o')\nax.plot(star_data, label='STAR', color='#000000', marker='o')\n\n# Set the title and labels\nax.set_title('Word Error Rate vs Compression Rate')\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\n\n# Set the y-axis limits\nax.set_ylim(15, 55)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny_pilot = [93, 93, 93, 93, 93, 93, 93, 93]\ny_retrained_model = [85, 85, 85, 85, 85, 85, 85, 85]\ny_pretrained_model = [75, 75, 75, 75, 75, 75, 75, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Plot the data\nax.plot(x, y_pilot, 'r', label='PILOTE')\nax.plot(x, y_retrained_model, 'b', label='Re-trained model')\nax.plot(x, y_pretrained_model, 'g', label='Pre-trained model accuracy')\n\n# Set the title and labels\nax.set_title('Average accuracy of five rounds')\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('avg. accuracy of five rounds')\n\n# Add a horizontal line at y=75\nax.axhline(y=75, color='g', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nsteps = [0, 5, 10, 15, 20]\nxllm = [0.1, 0.125, 0.15, 0.175, 0.2]\nsingle_pass_llm = [0.1, 0.125, 0.15, 0.175, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data\nax.plot(steps, xllm, label='xLLM', color='blue')\nax.plot(steps, single_pass_llm, label='Single-Pass LLM', color='red')\n\n# Set the title and labels\nax.set_title('Average Fidelity')\nax.set_xlabel('# of Steps')\nax.set_ylabel('Average Fidelity')\n\n# Add a legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.275)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = ['All', 'MLP', 'GCN', 'NCN', 'NEO', 'SEAL', 'Node2Vec']\ny1 = [80, 70, 60, 50, 40, 30, 20]\ny2 = [80, 70, 60, 50, 40, 30, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(x, y1, label='ogbl-collab')\nax.plot(x, y2, label='ogbl-ppa')\n\n# Set the title and labels\nax.set_title('Hits @ 50')\nax.set_xlabel('Dataset')\nax.set_ylabel('Hits')\n\n# Set the y-axis limits\nax.set_ylim(40, 80)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12]\ny1 = [0.055, 0.055, 0.055, 0.055, 0.055, 0.055]\ny2 = [0.045, 0.045, 0.045, 0.045, 0.045, 0.045]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='outside-code-diff', color='blue')\nax.plot(x, y2, label='inside-code-diff', color='orange')\n\n# Set the title and labels\nax.set_title('Android')\nax.set_xlabel('Layer')\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim(0.03, 0.06)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [6, 7, 8, 9]\ny1 = [10, 10, 9, 9]\ny2 = [10, 10, 9, 9]\ny3 = [10, 10, 9, 9]\ny4 = [10, 10, 9, 9]\ny5 = [10, 10, 9, 9]\ny6 = [10, 10, 9, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Direct (100 samples)')\nax.plot(x, y2, 'g-', label='RFFT (100 samples)')\nax.plot(x, y3, 'y-', label='Scratchpad (100 samples)')\nax.plot(x, y4, 'r-', label='Scratchpad (5000 samples)')\n\n# Set the title and labels\nax.set_title('Digit Length vs Accuracy')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(0.3, 10)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 20, 40, 60, 80])\nax.set_xticklabels(['0', '20', '40', '60', '80'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([225, 250, 275, 300, 325, 350, 375])\nax.set_yticklabels(['225', '250', '275', '300', '325', '350', '375'])\n\n# Draw horizontal lines at specified y-values\nfor y in [375, 350, 325, 300, 275]:\n    ax.axhline(y=y, color='black', linestyle='--')\n\n# Plot the data points\nax.plot([0, 20, 40, 60, 80], [225, 250, 275, 300, 325], 'o-', label='iaion')\nax.plot([0, 20, 40, 60, 80], [225, 250, 275, 300, 325], 'k-')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny2 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny3 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny4 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny5 = [0.55, 0.6, 0.65, 0.7, 0.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Plot the data\nax.plot(x, y1, 'y^', label='CNN')\nax.plot(x, y2, 'r^', label='CNN+HMM')\nax.plot(x, y3, 'b^', label='RF')\nax.plot(x, y4, 'bo', label='RF+HMM')\n\n# Set the title and labels\nax.set_title('F1')\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\n\n# Set the y-axis limits\nax.set_ylim(0.45, 0.75)\n\n# Add a vertical line at x=20\nax.axvline(x=20, color='k', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\ny3 = [23.38, 22.77, 22.32, 21.47, 21.51, 20.95, 20.49]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='LibriCSS (test)')\nax.plot(x, y2, 'r-', label='AMI (dev)')\nax.plot(x, y3, 'g-', label='SDM')\n\n# Set the title and labels\nax.set_title('WER (%) vs AMI (%)')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\n\n# Set the y-axis limits\nax.set_ylim(2, 10)\n\n# Add markers at specific points\nmarkers = [(2, 6.74), (3, 4.54), (4, 3.96), (5, 3.71), (6, 3.49), (7, 3.34), (8, 3.14)]\nfor x_val, y_val in markers:\n    ax.plot(x_val, y_val, 'ro')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10**-7, 10**-6, 10**-5, 10**-4]\ny1 = [1, 1, 1, 1]\ny2 = [1, 1, 1, 1]\ny3 = [1, 1, 1, 1]\ny4 = [1, 1, 1, 1]\ny5 = [1, 1, 1, 1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='empirical relat. (B2=8.0)')\nax.plot(x, y2, 'b-')\nax.plot(x, y3, 'b-')\nax.plot(x, y4, 'b-')\nax.plot(x, y5, 'b-')\n\n# Set the title and labels\nax.set_title('Quantization error')\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis limits\nax.set_xlim(10**-7, 10**-4)\n\n# Add vertical lines at specific positions\nax.axvline(x=10**-7, color='gray', linestyle='--')\nax.axvline(x=10**-6, color='gray', linestyle='--')\nax.axvline(x=10**-5, color='gray', linestyle='--')\nax.axvline(x=10**-4, color='gray', linestyle='--')\n\n# Add text annotations\nax.text(10**-7, 6, 'M-LVQ-4x8-10', ha='right', va='center')\nax.text(10**-6, 6, 'M-LVQ-4x8-100', ha='right', va='center')\nax.text(10**-5, 6, 'M-LVQ-4x8-256', ha='right', va='center')\nax.text(10**-4, 6, 'M-LVQ-4x8', ha='right', va='center')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Define the data\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ny2 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\ny3 = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\ny4 = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\ny5 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\ny6 = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n# Plot the data\nax.plot(x, y1, label='PNA + ours', color='purple')\nax.plot(x, y2, label='Gin + ours', color='orange')\n\n# Set the title and labels\nax.set_title('SPMotif-0.5')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nensemble_sizes = [6, 9, 12, 18, 24, 30]\naccuracies = [74.5, 76.5, 77.5, 77.5, 77.5, 77.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Plot the data\nax.plot(ensemble_sizes, accuracies, marker='o', linestyle='-', color='blue')\n\n# Set the title and labels\nax.set_title('Accuracy vs Ensemble Size')\nax.set_xlabel('Ensemble Size')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 10, 30, 100]\ny1 = [0.8, 0.6, 0.6, 0.6]\ny2 = [0.8, 0.6, 0.6, 0.6]\ny3 = [0.8, 0.6, 0.6, 0.6]\ny4 = [0.8, 0.6, 0.6, 0.6]\ny5 = [0.8, 0.6, 0.6, 0.6]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot the lines\nax.plot(x, y1, label='GPT-Neo', color='red')\nax.plot(x, y2, label='5', color='yellow')\nax.plot(x, y3, label='3', color='green')\nax.plot(x, y4, label='7', color='black')\nax.plot(x, y5, label='30', color='blue')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('# Epochs')\nax.set_ylabel('Magnitude')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\nx = [96, 192, 336, 720]\ny1 = [0.14, 0.16, 0.18, 0.2]\ny2 = [0.14, 0.16, 0.18, 0.2]\ny3 = [0.14, 0.16, 0.18, 0.2]\ny4 = [0.14, 0.16, 0.18, 0.2]\ny5 = [0.14, 0.16, 0.18, 0.2]\ny6 = [0.14, 0.16, 0.18, 0.2]\ny7 = [0.14, 0.16, 0.18, 0.2]\ny8 = [0.14, 0.16, 0.18, 0.2]\ny9 = [0.14, 0.16, 0.18, 0.2]\ny10 = [0.14, 0.16, 0.18, 0.2]\ny11 = [0.14, 0.16, 0.18, 0.2]\ny12 = [0.14, 0.16, 0.18, 0.2]\ny13 = [0.14, 0.16, 0.18, 0.2]\ny14 = [0.14, 0.16, 0.18, 0.2]\ny15 = [0.14, 0.16, 0.18, 0.2]\ny16 = [0.14, 0.16, 0.18, 0.2]\ny17 = [0.14, 0.16, 0.18, 0.2]\ny18 = [0.14, 0.16, 0.18, 0.2]\ny19 = [0.14, 0.16, 0.18, 0.2]\ny20 = [0.14, 0.16, 0.18, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15.0, 4.0))\n\n# Plot data\nax.plot(x, y1, label='pred_length=96', color='#0000FF')\nax.plot(x, y2, label='pred_length=192', color='#FFA500')\nax.plot(x, y3, label='pred_length=336', color='#008000')\nax.plot(x, y4, label='pred_length=720', color='#FF0000')\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_title('Traffic')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/xiahengliu/picture2code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the plot\nax.set_title('Serial (n=8, m=1)\\nParallel (n=2, m=4)')\n\n# Define the x-axis values\nx_values = [224, 128, 64, 32]\n\n# Define the y-axis values for the first subplot\ny_values_1 = [70, 60, 50, 40]\ny_values_2 = [70, 60, 50, 40]\ny_values_3 = [70, 60, 50, 40]\ny_values_4 = [70, 60, 50, 40]\n\n# Plot the data for the first subplot\nax.plot(x_values, y_values_1, label='ImageNet-1k', color='orange')\nax.plot(x_values, y_values_2, label='ImageNet-C/P (Fog)', color='orange')\nax.plot(x_values, y_values_3, label='ImageNet-1k', color='blue')\nax.plot(x_values, y_values_4, label='ImageNet-C/P (Fog)', color='blue')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the x-axis limits\nax.set_xlim(224, 32)\n\n# Set the x-axis tick labels\nax.set_xticks([224, 128, 64, 32])\n\n# Set the y-axis tick labels\nax.set_yticks(range(0, 81, 10))\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = [5.0, 7.0, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0]\ny1 = [90, 80, 70, 60, 50, 40, 30, 20, 10]\ny2 = [80, 70, 60, 50, 40, 30, 20, 10, 0]\ny3 = [70, 60, 50, 40, 30, 20, 10, 0, 0]\ny4 = [60, 50, 40, 30, 20, 10, 0, 0, 0]\ny5 = [50, 40, 30, 20, 10, 0, 0, 0, 0]\ny6 = [40, 30, 20, 10, 0, 0, 0, 0, 0]\ny7 = [30, 20, 10, 0, 0, 0, 0, 0, 0]\ny8 = [20, 10, 0, 0, 0, 0, 0, 0, 0]\ny9 = [10, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='JPG+LDPC')\nax.plot(x, y2, 'or-', label='DEEPJSCC w/o OFDM')\nax.plot(x, y3, 'g^-', label='DEEPJSCC w/ OFDM')\nax.plot(x, y4, 'b--', label='OURS')\n\n# Set the title and labels\nax.set_title('Classification Accuracy (%)')\nax.set_xlabel('SNR')\nax.set_ylabel('Accuracy (%)')\n\n# Set the x-axis limits\nax.set_xlim(5.0, 25.0)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Define the data for the first plot\nx1 = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [1, 1, 1, 1, 1, 1, 1, 1, 1]\ny2 = [2, 2, 2, 2, 2, 2, 2, 2, 2]\ny3 = [3, 3, 3, 3, 3, 3, 3, 3, 3]\ny4 = [4, 4, 4, 4, 4, 4, 4, 4, 4]\n\n# Plot the data\nax.plot(x1, y1, 'm-', label='Line 1 (Sinusoidal)')\nax.plot(x1, y2, 'b-', label='Line 2 (Quadratic)')\nax.plot(x1, y3, 'g-', label='Line 3 (Random Noise)')\nax.plot(x1, y4, 'r-', label='Line 4 (Exponential Focus)')\n\n# Set the title and labels\nax.set_title('Performance Value vs. Gradient Steps')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Performance Value')\n\n# Set the legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points for Line 1\nx_line1 = [0, 50, 100, 150, 200]\ny_line1 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Define the data points for Line 2\nx_line2 = [0, 50, 100, 150, 200]\ny_line2 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Define the data points for Line 3\nx_line3 = [0, 50, 100, 150, 200]\ny_line3 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the lines\nax.plot(x_line1, y_line1, 'o-', label='Line 1', color='orange')\nax.plot(x_line2, y_line2, 'b-', label='Line 2', color='blue')\nax.plot(x_line3, y_line3, '^-', label='Line 3', color='green')\n\n# Set the title and labels\nax.set_title('Line Graphs')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\n\"\"\"\n===========================\nPlotting with different styles\n===========================\n\nThis example demonstrates how to use different line styles and markers\nin a plot.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = ['All', 'MLP', 'GCN', 'NCN', 'NeoGNN-BUDDY', 'Node2Vec']\ny1 = [75, 70, 65, 60, 55, 65]\ny2 = [78, 73, 68, 63, 58, 68]\ny3 = [77, 72, 67, 62, 57, 67]\ny4 = [79, 74, 69, 64, 59, 69]\n\n# Create a figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n# Plot the first graph\nax1.plot(x, y1, label='ogbl-collab 2022', color='blue')\nax1.plot(x, y2, label='ogbl-collab 2023', color='blue')\nax1.set_title('ogbl-collab Results')\nax1.set_xlabel('Categories')\nax1.set_ylabel('Hits')\nax1.legend()\n\n# Plot the second graph\nax2.plot(x, y3, label='ogbl-ppa 2022', color='orange')\nax2.plot(x, y4, label='ogbl-ppa 2023', color='orange')\nax2.set_title('ogbl-ppa Results')\nax2.set_xlabel('Categories')\nax2.set_ylabel('Hits')\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Precision')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(10, -14, -2))\n\n# Set the grid lines\nax.grid(True)\n\n# Plot the data\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'b-', label='Standard')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'r-', label='Constrained')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'g-', label='Experimental')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'm-', label='Hypothetical')\n\n# Set the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\n\"\"\"\nGenerated by runml.py\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(4, 2, figsize=(12.0, 8.0))\n\n# Define the data for the plots\nx_data = [10**i for i in range(5)]\ny_data = [\n    [10**i, 10**i, 10**i, 10**i, 10**i] for i in range(5)\n]\n\n# Plot the data on each subplot\nfor ax in axes.flat:\n    ax.plot(x_data, y_data[0], 'b-')\n    ax.plot(x_data, y_data[1], 'r-')\n    ax.plot(x_data, y_data[2], 'g-')\n    ax.plot(x_data, y_data[3], 'y-')\n\n# Set labels and titles\naxes[0, 0].set_title('Graph Variation 1')\naxes[0, 0].set_xlabel('N')\naxes[0, 0].set_ylabel('Peak Performance')\naxes[0, 0].set_yticks([10**i for i in range(11)])\naxes[0, 0].set_xticks([10**i for i in range(5)])\n\naxes[0, 1].set_title('Graph Variation 2')\naxes[0, 1].set_xlabel('N')\naxes[0, 1].set_ylabel('Peak Performance')\naxes[0, 1].set_yticks([10**i for i in range(11)])\naxes[0, 1].set_xticks([10**i for i in range(5)])\n\naxes[1, 0].set_title('Graph Variation 3')\naxes[1, 0].set_xlabel('N')\naxes[1, 0].set_ylabel('Peak Performance')\naxes[1, 0].set_yticks([10**i for i in range(11)])\naxes[1, 0].set_xticks([10**i for i in range(5)])\n\naxes[1, 1].set_title('Graph Variation 4')\naxes[1, 1].set_xlabel('N')\naxes[1, 1].set_ylabel('Peak Performance')\naxes[1, 1].set_yticks([10**i for i in range(11)])\naxes[1, 1].set_xticks([10**i for i in range(5)])\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax1 = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the title of the first plot\nax1.set_title('Daytime Activity Monitoring')\n\n# Set the y-axis label for the first plot\nax1.set_ylabel('Activity Level')\n\n# Set the x-axis label for the first plot\nax1.set_xlabel('Time (Hours)')\n\n# Plot the first line graph with blue color\nax1.plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'b-', label='Standard Activity')\n\n# Set the y-axis limits for the first plot\nax1.set_ylim(-1.5, 1.5)\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second plot\nax2.set_title('Nighttime Activity Monitoring')\n\n# Set the y-axis label for the second plot\nax2.set_ylabel('Activity Level')\n\n# Set the x-axis label for the second plot\nax2.set_xlabel('Time (Hours)')\n\n# Plot the second line graph with red color\nax2.plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'r-', label='Innovative Activity')\n\n# Set the y-axis limits for the second plot\nax2.set_ylim(-1.5, 1.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data points\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ny1 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\ny2 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Standard Performance')\nax.plot(x, y2, color='red', label='Innovative Performance')\n\n# Set the title and labels\nax.set_title('Comparative Performance Analysis Over Time')\nax.set_xlabel('Time (Months)')\nax.set_ylabel('Performance Index')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nmonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nmonthly_sales = [1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400]\naverage_temperature = [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(months, monthly_sales, 'b-', label='Monthly Sales')\nax.plot(months, average_temperature, 'r-', label='Average Temperature')\n\n# Set the title and labels\nax.set_title('Sales and Temperature Correlation Over a Year')\nax.set_xlabel('Month')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Set the y-axis limits\nax.set_ylim(800, 1600)\n\n# Set the x-axis limits\nax.set_xlim(1, 12)\n\n# Set the tick marks\nax.set_yticks(range(800, 1601, 200))\nax.set_xticks(range(1, 13))\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for each line graph\ntime = [0, 2, 4, 6, 8, 10]\ngrowth_values = [1.3, 0.8, 0.3, 0.3, 0.3, 0.9]\ndecay_values = [1.3, 0.8, 0.3, 0.3, 0.3, 0.9]\noscillation_values = [1.0, 1.2, 1.0, 1.0, 1.0, 1.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the lines with markers\nax.plot(time, growth_values, 'g-', label='Growth')\nax.plot(time, decay_values, 'r-', label='Decay')\nax.plot(time, oscillation_values, 'b-', label='Oscillation')\n\n# Set the title and labels\nax.set_title('Exponential Growth Over Time')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim(-1.2, 1.3)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ny2 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\ny3 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Plot the data\nax.plot(x, y1, label='5-shot direct', color='blue')\nax.plot(x, y2, label='5-shot scratchpad', color='orange')\nax.plot(x, y3, label='5-shot rule-following', color='green')\n\n# Set the title and labels\nax.set_title('5-shot Accuracy by Digit Length')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 1, figsize=(5.0, 10.0))\n\n# Define the data for each subplot\ndata1 = [0.28, 0.26, 0.24, 0.22, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0.0]\ndata2 = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]\ndata3 = [2.5, 2.0, 1.5, 1.0, 0.5, 0.0]\n\n# Plot the first subplot\naxes[0].plot(data1, 'b-', label='Smoothed Data')\naxes[0].set_title('Smoothed Representation')\naxes[0].set_xlabel('Time')\naxes[0].set_ylabel('Value')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(data2, 'y-', label='Difference Data')\naxes[1].set_title('First Difference of Data')\naxes[1].set_xlabel('Time')\naxes[1].set_ylabel('Delta Value')\n\n# Plot the third subplot\naxes[2].plot(data3, 'g-', label='Cumulative Sum')\naxes[2].set_title('Cumulative Sum Over Time')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Cumulative Sum Value')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(4, 1, figsize=(6, 12))\n\n# Define time values\ntime_values = np.arange(0, 11)\n\n# Sin Wave\nsin_wave = np.sin(time_values)\naxes[0].plot(time_values, sin_wave, 'm', label='Sin Wave')\naxes[0].set_title('Sin Wave')\naxes[0].set_ylabel('Amplitude')\n\n# Cos Wave\ncos_wave = np.cos(time_values)\naxes[1].plot(time_values, cos_wave, 'g', label='Cos Wave')\naxes[1].set_title('Cos Wave')\naxes[1].set_ylabel('Amplitude')\n\n# Exp Decay\nexp_decay = np.exp(-time_values / 5)\naxes[2].plot(time_values, exp_decay, 'b', label='Exp Decay')\naxes[2].set_title('Exponential Decay')\naxes[2].set_ylabel('Value')\n\n# Log Growth\nlog_growth = np.log(time_values + 1)\naxes[3].plot(time_values, log_growth, 'r', label='Log Growth')\naxes[3].set_title('Logarithmic Growth')\naxes[3].set_xlabel('Time')\naxes[3].set_ylabel('Value')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/victorlei/image2py\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(4, 2, figsize=(9, 6))\n\n# Set titles for each subplot\ntitles = [\n    \"a Positive bound\",\n    \"b Negative bound\",\n    \"d Contrastive loss weight\",\n    \"c Fuzzy coefficient\"\n]\n\n# Loop through each subplot and set its title\nfor ax, title in zip(axes.flat, titles):\n    ax.set_title(title)\n\n# Set the x-axis labels\nx_labels = ['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0']\nfor ax in axes[:, 0]:\n    ax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    ax.set_xticklabels(x_labels)\n\n# Set the y-axis limits\ny_limits = [(50, 90), (70, 85), (50, 90), (70, 90)]\nfor ax, limits in zip(axes.flat, y_limits):\n    ax.set_ylim(limits)\n\n# Set the y-axis ticks\ny_ticks = [50, 60, 70, 80, 90]\nfor ax in axes.flat:\n    ax.set_yticks(y_ticks)\n\n# Set the y-axis labels\ny_labels = ['50', '60', '70', '80', '90']\nfor ax, labels in zip(axes.flat, y_labels):\n    ax.set_yticklabels(labels)\n\n# Set the x-axis labels for the first row\nfor ax in axes[0, :]:\n    ax.set_xlabel('Time')\n\n# Set the x-axis labels for the second row\nfor ax in axes[1, :]:\n    ax.set_xlabel('Weight')\n\n# Set the x-axis labels for the third row\nfor ax in axes[2, :]:\n    ax.set_xlabel('Loss')\n\n# Set the x-axis labels for the fourth row\nfor ax in axes[3, :]:\n    ax.set_xlabel('Coefficient')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny1 = [82, 82, 82, 82, 82, 82, 82, 82, 82]\ny2 = [85, 85, 85, 85, 85, 85, 85, 85, 85]\ny3 = [80, 80, 80, 80, 80, 80, 80, 80, 80]\ny4 = [75, 75, 75, 75, 75, 75, 75, 75, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the data\nax.plot(x, y1, 'r', label='Positive Bound')\nax.plot(x, y2, 'g', label='Negative Bound')\nax.plot(x, y3, 'b', label='Contrastive Loss Weight')\nax.plot(x, y4, 'm', label='Additional Metric 2')\n\n# Set the title and labels\nax.set_title('Positive Bound')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\n\"\"\"\nThis script generates a matplotlib plot based on the provided image.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plots\ndriving_style = ['Passive', 'Rail', 'Replay', 'Sportive']\ndry_vs_rain = [1.3, 1.1, 1.0, 0.9]\nsnow_vs_fog = [1.2, 1.1, 1.0, 0.9]\nrain_vs_snow = [1.3, 1.1, 1.0, 0.9]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Plot for Dry vs Rain\naxs[0].plot(driving_style, dry_vs_rain, 'r-', label='Dry')\naxs[0].plot(driving_style, dry_vs_rain, 'ro')\naxs[0].set_title('Dry vs Rain')\naxs[0].set_xlabel('Driving Style')\naxs[0].set_ylabel('Relaxation Level')\naxs[0].legend()\n\n# Plot for Snow vs Fog\naxs[1].plot(driving_style, snow_vs_fog, 'g-', label='Snow')\naxs[1].plot(driving_style, snow_vs_fog, 'go')\naxs[1].set_title('Snow vs Fog')\naxs[1].set_xlabel('Driving Style')\naxs[1].set_ylabel('Relaxation Level')\naxs[1].legend()\n\n# Plot for Rain vs Snow\naxs[2].plot(driving_style, rain_vs_snow, 'b-', label='Rain')\naxs[2].plot(driving_style, rain_vs_snow, 'bo')\naxs[2].set_title('Rain vs Snow')\naxs[2].set_xlabel('Driving Style')\naxs[2].set_ylabel('Relaxation Level')\naxs[2].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 0.125, 0.25, 0.5, 1, 2, 4, 8]\ny_content = [8, 7, 6, 5, 4, 3, 2, 1]\ny_organization = [8, 7, 6, 5, 4, 3, 2, 1]\ny_language = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 3))\n\n# Plot the data\nax.plot(x, y_content, label='Content', color='blue')\nax.plot(x, y_organization, label='Organization', color='red')\nax.plot(x, y_language, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\n\n# Add markers at specific points\nmarkers = [(0, 8), (0.125, 7), (0.25, 6), (0.5, 5), (1, 4), (2, 3), (4, 2), (8, 1)]\nfor x_val, y_val in markers:\n    ax.plot(x_val, y_val, 'g^')  # Green triangle marker\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\n\"\"\"\nThis script generates a matplotlib plot based on the provided image.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points for the plots\nx = np.linspace(0, 80, 41)\ny_coco_10k = np.linspace(0.6, 0.75, 41)\ny_laion_10k = np.linspace(0.6, 0.75, 41)\ny_coco_5k = np.linspace(0.6, 0.75, 41)\ny_laion_5k = np.linspace(0.6, 0.75, 41)\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(9, 3))\n\n# Plot for COCO 10K\naxes[0].plot(x, y_coco_10k, 'r-', label='COCO (10k)')\naxes[0].set_title('COCO 10K')\naxes[0].set_xlabel('Deposition IO Norm')\naxes[0].set_ylabel('Accuracy')\naxes[0].legend()\n\n# Plot for LAION 10K\naxes[1].plot(x, y_laion_10k, 'b-', label='LAION (10k)')\naxes[1].set_title('LAION 10K')\naxes[1].set_xlabel('Deposition IO Norm')\naxes[1].set_ylabel('Accuracy')\naxes[1].legend()\n\n# Plot for COCO & LAION 5K\naxes[2].plot(x, y_coco_5k, 'g-', label='COCO (5k)')\naxes[2].plot(x, y_laion_5k, 'y-', label='LAION (5k)')\naxes[2].set_title('COCO & LAION 5K')\naxes[2].set_xlabel('Deposition IO Norm')\naxes[2].set_ylabel('Accuracy')\naxes[2].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/victorlei/image2code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(4, 2, figsize=(12.0, 9.0))\n\n# Set the title for the first subplot\naxes[0, 0].set_title('Error Rate vs. Learning Rate')\naxes[0, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1], 'b-')\naxes[0, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1], 'r-')\naxes[0, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1], 'g-')\naxes[0, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1], 'm-')\naxes[0, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1], 'c-')\n\n# Set the title for the second subplot\naxes[0, 1].set_title('Accuracy vs. Dropout')\naxes[0, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'g-')\naxes[0, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'y-')\naxes[0, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'm-')\naxes[0, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'c-')\n\n# Set the title for the third subplot\naxes[1, 0].set_title('Error Rate vs. Learning Rate')\naxes[1, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.16, 0.16, 0.16, 0.16, 0.16], 'b-')\naxes[1, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.16, 0.16, 0.16, 0.16, 0.16], 'r-')\naxes[1, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.16, 0.16, 0.16, 0.16, 0.16], 'g-')\naxes[1, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.16, 0.16, 0.16, 0.16, 0.16], 'm-')\naxes[1, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.16, 0.16, 0.16, 0.16, 0.16], 'c-')\n\n# Set the title for the fourth subplot\naxes[1, 1].set_title('Accuracy vs. Dropout')\naxes[1, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'g-')\naxes[1, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'y-')\naxes[1, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'm-')\naxes[1, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'c-')\n\n# Set the title for the fifth subplot\naxes[2, 0].set_title('Error Rate vs. Learning Rate')\naxes[2, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.14, 0.14, 0.14, 0.14, 0.14], 'b-')\naxes[2, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.14, 0.14, 0.14, 0.14, 0.14], 'r-')\naxes[2, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.14, 0.14, 0.14, 0.14, 0.14], 'g-')\naxes[2, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.14, 0.14, 0.14, 0.14, 0.14], 'm-')\naxes[2, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.14, 0.14, 0.14, 0.14, 0.14], 'c-')\n\n# Set the title for the sixth subplot\naxes[2, 1].set_title('Accuracy vs. Dropout')\naxes[2, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'g-')\naxes[2, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'y-')\naxes[2, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'm-')\naxes[2, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'c-')\n\n# Set the title for the seventh subplot\naxes[3, 0].set_title('Error Rate vs. Learning Rate')\naxes[3, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.12, 0.12, 0.12, 0.12, 0.12], 'b-')\naxes[3, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.12, 0.12, 0.12, 0.12, 0.12], 'r-')\naxes[3, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.12, 0.12, 0.12, 0.12, 0.12], 'g-')\naxes[3, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.12, 0.12, 0.12, 0.12, 0.12], 'm-')\naxes[3, 0].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.12, 0.12, 0.12, 0.12, 0.12], 'c-')\n\n# Set the title for the eighth subplot\naxes[3, 1].set_title('Accuracy vs. Dropout')\naxes[3, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'g-')\naxes[3, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'y-')\naxes[3, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'm-')\naxes[3, 1].plot([0.025, 0.05, 0.1, 0.15, 0.2], [0.86, 0.86, 0.86, 0.86, 0.86], 'c-')\n\n# Set the x-axis limits for all subplots\nfor ax in axes.flat:\n    ax.set_xlim(0.0, 0.3)\n\n# Set the y-axis limits for all subplots\nfor ax in axes.flat:\n    ax.set_ylim(0.08, 0.18)\n\n# Set the x-axis labels for all subplots\nfor ax in axes.flat:\n    ax.set_xlabel('Parameter Rate')\n\n# Set the y-axis labels for all subplots\nfor ax in axes.flat:\n    ax.set_ylabel('Metric')\n\n# Adjust the layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Metric 1')\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Define the data points for the plot\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_base_model = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\ny_our_model = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n# Plot the data points\nax.plot(x, y_base_model, 'b-', label='Base Model')\nax.plot(x, y_our_model, 'r-', label='Our Model')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_base_model = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\ny_our_model = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5, 3))\n\n# Plot the data\nax.plot(x, y_base_model, label='Base Model', color='blue')\nax.plot(x, y_our_model, label='Our Model', color='blue')\n\n# Set the title and labels\nax.set_title('Accuracy')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.8)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10**1, 2*10**1, 3*10**1, 4*10**1, 6*10**1]\ny_standard = [10**-1, 10**-4, 10**-7, 10**-10, 10**-13]\ny_constrained = [10**-1, 10**-4, 10**-7, 10**-10, 10**-13]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Plot the data\nax.plot(x, y_standard, label='Standard', color='blue')\nax.plot(x, y_constrained, label='Constrained', color='orange')\n\n# Set the title and labels\nax.set_title('Plot of Standard and Constrained')\nax.set_xlabel('N')\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim(10**-14, 10**-1)\n\n# Set the x-axis ticks\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 6*10**1])\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for performance and efficiency\nperformance = [1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5]\nefficiency = [1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(performance, label='Performance')\nax.plot(efficiency, label='Efficiency')\n\n# Set the title and labels\nax.set_title('Performance and Efficiency Over Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Performance/Efficiency')\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 31, 5))\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30'])\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points for the plot\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.3, 0.7, 0.8, 0.9, 0.8, 0.7]\ny2 = [0.4, 0.8, 0.9, 0.8, 0.7, 0.6]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data points with specific colors and markers\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data points for each line\nx = [0, 5, 10, 15, 20, 25, 30]\ny1 = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\ny2 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\ny3 = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the lines with markers\nax.plot(x, y1, 'b-o', label='Performance')\nax.plot(x, y2, 'r-o', label='Efficiency')\nax.plot(x, y3, 'g-o', label='Growth')\n\n# Set the title and labels\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Efficiency')\n\n# Set the y-axis limits\nax.set_ylim(0, 1.2)\n\n# Add grid lines\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each series\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.6, 0.4, 0.2, 0.0, 0.0, 0.0]\ny2 = [0.8, 0.6, 0.4, 0.2, 0.0, 0.0]\ny3 = [0.8, 0.6, 0.4, 0.2, 0.0, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with specific colors and styles\nax.plot(x, y1, color='blue', linestyle='--', label='Data Series 1')\nax.plot(x, y2, color='green', linestyle='--', label='Data Series 2 with Gradient')\nax.plot(x, y3, color='pink', linestyle='--', label='Data Series 3')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Weeks')\nax.set_ylabel('Normalized Value')\n\n# Set the limits for the y-axis\nax.set_ylim(0, 1)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [90, 80, 70, 60, 50, 40, 30, 20, 10, 0]\ny2 = [80, 70, 60, 50, 40, 30, 20, 10, 0, 0]\ny3 = [70, 60, 50, 40, 30, 20, 10, 0, 0, 0]\ny4 = [60, 50, 40, 30, 20, 10, 0, 0, 0, 0]\ny5 = [50, 40, 30, 20, 10, 0, 0, 0, 0, 0]\ny6 = [40, 30, 20, 10, 0, 0, 0, 0, 0, 0]\ny7 = [30, 20, 10, 0, 0, 0, 0, 0, 0, 0]\ny8 = [20, 10, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b^', label='BaCE')\nax.plot(x, y2, 'bv', label='LWF')\nax.plot(x, y3, 'g^', label='EWC')\nax.plot(x, y4, 'gv', label='SEQ')\n\n# Set the title and labels\nax.set_title('Average Accuracy (%)')\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\n\n# Set the x-axis limits\nax.set_xlim(1, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the tick marks\nax.set_xticks(range(1, 11))\nax.set_yticks(range(0, 101, 10))\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\n\"\"\"\nThis script generates a matplotlib plot based on the provided image.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points for the plots\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([80, 80, 80, 80, 80, 80, 80, 80, 80, 80])\ny2 = np.array([70, 70, 70, 70, 70, 70, 70, 70, 70, 70])\ny3 = np.array([60, 60, 60, 60, 60, 60, 60, 60, 60, 60])\ny4 = np.array([50, 50, 50, 50, 50, 50, 50, 50, 50, 50])\ny5 = np.array([40, 40, 40, 40, 40, 40, 40, 40, 40, 40])\ny6 = np.array([30, 30, 30, 30, 30, 30, 30, 30, 30, 30])\ny7 = np.array([20, 20, 20, 20, 20, 20, 20, 20, 20, 20])\ny8 = np.array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10])\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(8, 3))\n\n# Plot the first subplot\naxs[0].plot(x, y1, 'b-', label='BaCE')\naxs[0].plot(x, y2, 'c-', label='EWC')\naxs[0].set_title('Performance Comparison: BaCE vs EWC')\naxs[0].set_xlabel('Task')\naxs[0].set_ylabel('Average Accuracy (%)')\naxs[0].legend()\naxs[0].grid(True)\n\n# Plot the second subplot\naxs[1].plot(x, y3, 'r^', label='LWF')\naxs[1].plot(x, y4, 'm^', label='SEQ')\naxs[1].set_title('Performance Comparison: LWF vs SEQ')\naxs[1].set_xlabel('Task')\naxs[1].set_ylabel('Average Accuracy (%)')\naxs[1].legend()\naxs[1].grid(True)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\n\"\"\"\nGenerated by runmlp.py\n\"\"\"\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\nax.plot([0, 250, 500, 1000, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.2, 0.2], 'b-')\nax.plot([0, 250, 500, 1000, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.2, 0.2], 'r--')\n\nax.set_title('model1 Performance')\nax.set_xlabel('Iterations')\nax.set_ylabel('Success Rate')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [24, 22, 20, 18, 16, 14, 12]\ny2 = [26, 24, 22, 20, 18, 16, 14]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='IHM')\nax.plot(x, y2, 'r-', label='SDM')\n\n# Set the title and labels\nax.set_title('Wavelength vs. AMI WER (%)')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Wavelength (%)')\n\n# Add markers at specific points\nmarkers = [2, 4, 6, 8]\nfor marker in markers:\n    ax.plot(marker, 24, 'k^', markersize=10)\n    ax.plot(marker, 22, 'k^', markersize=10)\n\n# Set the y-axis limits\nax.set_ylim(20, 28)\n\n# Add a horizontal line at y=22\nax.axhline(y=22, color='blue', linestyle='--')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [22, 24, 26, 28, 26, 24, 22]\ny2 = [20, 22, 24, 26, 24, 22, 20]\ny3 = [22, 24, 26, 28, 26, 24, 22]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the lines with specified colors and markers\nax.plot(x, y1, color='blue', label='LibriCSS (test)')\nax.plot(x, y2, color='orange', marker='^', label='AMI (dev)')\nax.plot(x, y3, color='green', linestyle='--', label='SDM Trend')\n\n# Set the title and labels\nax.set_title('Trend Comparison')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%) / AMI WER (%)')\n\n# Set the y-axis limits\nax.set_ylim(20, 28)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\ny2 = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\ny3 = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\ny4 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\ny5 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ny6 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\ny7 = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny8 = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, 'o-', label='LibriCSS WER')\nax.plot(x, y2, 'bo-', label='AMI WER')\nax.plot(x, y3, 'ro-', label='Threshold')\n\n# Set the title and labels\nax.set_title('WER (%) vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add a horizontal line at y=0.7\nax.axhline(y=0.7, color='r', linestyle='-')\n\n# Add a vertical line at x=4\nax.axvline(x=4, color='b', linestyle='-')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(12, 4))\n\n# Data for plotting\nx = np.linspace(0.7, 1.0, 100)\ny1 = 80 * np.sin(2 * np.pi * (x - 0.5)) + 75\ny2 = 80 * np.sin(2 * np.pi * (x - 0.5)) + 75\ny3 = 80 * np.sin(2 * np.pi * (x - 0.5)) + 75\ny4 = 80 * np.sin(2 * np.pi * (x - 0.5)) + 75\n\n# Plotting\naxes[0].plot(x, y1, 'b-', lw=2)\naxes[1].plot(x, y2, 'b-', lw=2)\naxes[2].plot(x, y3, 'b-', lw=2)\naxes[3].plot(x, y4, 'b-', lw=2)\n\n# Fill between for shaded areas\nfor ax in axes:\n    ax.fill_between(x, 75, 85, where=(x >= 0.1) & (x <= 0.9), color='lightblue')\n    ax.fill_between(x, 75, 85, where=(x >= 0.2) & (x <= 0.8), color='lightblue')\n    ax.fill_between(x, 75, 85, where=(x >= 0.3) & (x <= 0.7), color='lightblue')\n    ax.fill_between(x, 75, 85, where=(x >= 0.4) & (x <= 0.6), color='lightblue')\n\n# Set titles\naxes[0].set_title('(a) Positive bound.')\naxes[1].set_title('(b) Negative bound.')\naxes[2].set_title('(c) Contrastive loss weight.')\naxes[3].set_title('(d) Fuzzy coefficient.')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny_libri = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\ny_threshold = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Plot the data\nax.plot(x, y_libri, 'y-', label='LibriCSS WER')\nax.plot(x, y_threshold, 'r-', label='Threshold')\n\n# Set the title and labels\nax.set_title('WER vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nratio_r = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nperformance_pna = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\nperformance_gin = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Plot the performance data\nax.plot(ratio_r, performance_pna, label='PNA', color='blue')\nax.plot(ratio_r, performance_gin, label='GIN', color='green')\n\n# Set the title of the plot\nax.set_title('SPMotif-0.9')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the y-axis limits\nax.set_ylim(0.4, 1.0)\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny_pna = [-20, -20, -20, -20, -20, -20, -20, -20, -20, -20]\ny_gin = [-20, -20, -20, -20, -20, -20, -20, -20, -20, -20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y_pna, 'p-', label='PNA + ours')\nax.plot(x, y_gin, 'o-', label='GIN + ours')\n\n# Set the title and labels\nax.set_title('Dynamic Performance Trends')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Set the y-axis limits\nax.set_ylim(-80, 0)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nratio_r = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nperformance_pna_ours = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1]\nperformance_gin_ours = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(ratio_r, performance_pna_ours, 'b-', label='PNA + ours')\nax.plot(ratio_r, performance_gin_ours, 'y-', label='GIN + ours')\n\n# Set the title and labels\nax.set_title('Modern Linear Performance Evaluation')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Set the y-axis limits\nax.set_ylim(0.1, 1.5)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.2, 0.4, 0.6, 0.8, 1.0]\ny_blue = [0.8, 0.6, 0.4, 0.2, 0.0]\ny_red = [0.8, 0.6, 0.4, 0.2, 0.0]\n\n# Plot the data points with markers\nax.plot(x, y_blue, 'bo-', label='PNA + ours')\nax.plot(x, y_red, 'ro-', label='GIN + ours')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\ny1 = [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80]\ny2 = [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Model 1 Mean Accuracy')\nax.plot(x, y2, color='red', label='Model 2 Mean Accuracy')\n\n# Set the title and labels\nax.set_title('Comparison of Model Accuracies')\nax.set_xlabel('Ensemble Size')\nax.set_ylabel('Accuracy')\n\n# Set the grid\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks(range(5, 30, 2))\nax.set_yticks(range(60, 90, 5))\n\n# Set the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [90, 90, 90, 90, 90, 90, 90, 90, 90, 90]\ny2 = [85, 85, 85, 85, 85, 85, 85, 85, 85, 85]\ny3 = [80, 80, 80, 80, 80, 80, 80, 80, 80, 80]\ny4 = [75, 75, 75, 75, 75, 75, 75, 75, 75, 75]\n\n# Data for the second graph\ny5 = [70, 70, 70, 70, 70, 70, 70, 70, 70, 70]\ny6 = [65, 65, 65, 65, 65, 65, 65, 65, 65, 65]\ny7 = [60, 60, 60, 60, 60, 60, 60, 60, 60, 60]\ny8 = [55, 55, 55, 55, 55, 55, 55, 55, 55, 55]\n\n# Data for the third graph\ny9 = [85, 85, 85, 85, 85, 85, 85, 85, 85, 85]\ny10 = [80, 80, 80, 80, 80, 80, 80, 80, 80, 80]\ny11 = [75, 75, 75, 75, 75, 75, 75, 75, 75, 75]\ny12 = [70, 70, 70, 70, 70, 70, 70, 70, 70, 70]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Plot the first graph\naxs[0].plot(x, y1, 'r-', label='Config A - Model X')\naxs[0].plot(x, y2, 'g-', label='Config B - Model X')\naxs[0].plot(x, y3, 'b-', label='Config C - Model X')\naxs[0].set_title('Performance of Model X')\naxs[0].set_xlabel('Iteration')\naxs[0].set_ylabel('Score')\naxs[0].legend()\n\n# Plot the second graph\naxs[1].plot(x, y5, 'r-', label='Config A - Model X')\naxs[1].plot(x, y6, 'g-', label='Config B - Model X')\naxs[1].plot(x, y7, 'b-', label='Config C - Model X')\naxs[1].set_title('Performance of Model Y')\naxs[1].set_xlabel('Iteration')\naxs[1].set_ylabel('Score')\naxs[1].legend()\n\n# Plot the third graph\naxs[2].plot(x, y9, 'r-', label='Config A - Model X')\naxs[2].plot(x, y10, 'g-', label='Config B - Model X')\naxs[2].plot(x, y11, 'b-', label='Config C - Model X')\naxs[2].set_title('Performance of Model Z')\naxs[2].set_xlabel('Iteration')\naxs[2].set_ylabel('Score')\naxs[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each configuration\nperformance_of_lamma = [\n    [93, 94, 95, 96, 97, 98, 99, 100],\n    [92, 93, 94, 95, 96, 97, 98, 99],\n    [91, 92, 93, 94, 95, 96, 97, 98],\n    [90, 91, 92, 93, 94, 95, 96, 97]\n]\n\nperformance_of_falcon = [\n    [72, 73, 74, 75, 76, 77, 78, 79],\n    [71, 72, 73, 74, 75, 76, 77, 78],\n    [70, 71, 72, 73, 74, 75, 76, 77],\n    [69, 70, 71, 72, 73, 74, 75, 76]\n]\n\nperformance_of_qwen = [\n    [85, 86, 87, 88, 89, 90, 91, 92],\n    [84, 85, 86, 87, 88, 89, 90, 91],\n    [83, 84, 85, 86, 87, 88, 89, 90],\n    [82, 83, 84, 85, 86, 87, 88, 89]\n]\n\n# Create a figure with three subplots\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Plot the data for each configuration in the first subplot\nfor i, data in enumerate(performance_of_lamma):\n    axs[0].plot(data, label=f'Config {chr(65 + i)} - Llama', marker='*')\n\naxs[0].set_title('Performance of Llama')\naxs[0].set_xlabel('Iteration')\naxs[0].set_ylabel('Score')\naxs[0].legend()\n\n# Plot the data for each configuration in the second subplot\nfor i, data in enumerate(performance_of_falcon):\n    axs[1].plot(data, label=f'Config {chr(65 + i)} - Falcon', marker='*')\n\naxs[1].set_title('Performance of Falcon')\naxs[1].set_xlabel('Iteration')\naxs[1].set_ylabel('Score')\naxs[1].legend()\n\n# Plot the data for each configuration in the third subplot\nfor i, data in enumerate(performance_of_qwen):\n    axs[2].plot(data, label=f'Config {chr(65 + i)} - Qwen', marker='*')\n\naxs[2].set_title('Performance of Qwen')\naxs[2].set_xlabel('Iteration')\naxs[2].set_ylabel('Score')\naxs[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure with a specified size\nfig = plt.figure(figsize=(10.0, 10.0))\n\n# Define the data for each brand\nbrands = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E', 'Brand F']\nsales_growth = [\n    [2.5, 2.5, 2.5, 2.5],\n    [2.4, 2.4, 2.4, 2.4],\n    [2.3, 2.3, 2.3, 2.3],\n    [2.2, 2.2, 2.2, 2.2],\n    [2.1, 2.1, 2.1, 2.1],\n    [2.0, 2.0, 2.0, 2.0]\n]\n\n# Define the colors for each brand\ncolors = ['red', 'blue', 'purple', 'green', 'orange', 'yellow']\n\n# Define the labels for the x-axis\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\n\n# Loop through each brand and create a subplot\nfor i, brand in enumerate(brands):\n    ax = fig.add_subplot(6, 1, i + 1)\n    ax.plot(quarters, sales_growth[i], color=colors[i])\n    ax.set_title(brand)\n    ax.set_xlabel('Quarter')\n    ax.set_ylabel('Sales Growth')\n\n# Adjust the layout of the subplots\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/notebooks/autogalaxy/plotting/plot.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18, 4))\n\n# Define the data points\nx = [100, 300, 500, 700]\ny1 = [0.5, 0.6, 0.8, 1.2]\ny2 = [0.5, 0.6, 0.8, 1.2]\n\n# Plot the data\nax.plot(x, y1, 'o-', label='ECL Run 1')\nax.plot(x, y2, 'o-', label='ECL Run 2')\n\n# Set the title and labels\nax.set_title('Traffic Performance')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Metric Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 800)\n\n# Set the y-axis limits\nax.set_ylim(0, 2)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain']\nrelaxation_levels = [\n    [14, 12, 10, 8, 6],\n    [14, 12, 10, 8, 6]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Plot the data\nfor i, condition in enumerate(weather_conditions):\n    ax.plot(driving_styles, relaxation_levels[i], label=condition, marker='o')\n\n# Set labels and title\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\nax.set_title('Relaxation Levels by Driving Style and Weather Condition')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.ai\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\nax.plot([1, 2, 3, 4, 5], [20, 20, 20, 20, 20], 'b-', label='Run 1')\nax.plot([1, 2, 3, 4, 5], [20, 20, 20, 20, 20], 'g-', label='Run 2')\n\nax.set_title('Category A Growth')\nax.set_xlabel('Phase')\nax.set_ylabel('Cumulative Value')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [4, 6, 10, 30]\ny_standard = [10, 12, 14, 16]\ny_constrained = [10, 12, 14, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Plot the data\nax.plot(x, y_standard, 'bo-', label='Standard')\nax.plot(x, y_constrained, 'ro-', label='Constrained')\n\n# Set the title and labels\nax.set_title('Plot of Data Points')\nax.set_xlabel('N')\nax.set_ylabel('Value')\n\n# Set the tick marks\nax.set_yticks([10, 12, 14, 16])\nax.set_xticks([4, 6, 10, 30])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.ai\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define data for the bar chart\nregions = ['South', 'West', 'North', 'East']\npercentages = [25, 10, 40, 15]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 5))\nbars = ax.bar(regions, percentages, color=['yellow', 'orange', 'cyan', 'magenta'])\n\n# Add labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage')\nax.set_title('Literacy Rate by Region')\n\n# Add percentage labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Define data for the pie chart\nlabels = ['Central', 'West', 'North', 'East', 'South']\nsizes = [5, 5, 35, 20, 25]\ncolors = ['lightblue', 'orange', 'lightgreen', 'pink', 'lightcoral']\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code-maker\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 2))\n\n# Define the data for the bar chart\ndata = [0.05, 0.25, 0.5, 0.75]\n\n# Define the labels for the bars\nlabels = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair']\n\n# Define the colors for the bars\ncolors = ['blue', 'blue', 'blue', 'blue']\n\n# Create the bar chart\nax.bar(labels, data, color=colors)\n\n# Set the title of the chart\nax.set_title('Chart Title')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(labels)))\nax.set_xticklabels(labels)\n\n# Set the tick labels for the y-axis\nax.set_yticks(np.arange(0, 1.1, 0.25))\nax.set_yticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the limits for the x-axis\nax.set_xlim(-0.5, len(labels) - 0.5)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 1.1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/autogalaxy/plotting/plotter.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nvalues = [44.15, 44.05, 41.55, 40.9, 40.65, 39.45, 36.7]\n\n# Create a bar chart\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\nbars = ax1.bar(categories, values, color='green', alpha=0.7)\n\n# Set the title and labels\nax1.set_title('Robust Error (%)')\nax1.set_xlabel('Model')\nax1.set_ylabel('Error (%)')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Create a second y-axis for the second plot\nax2 = ax1.twinx()\n\n# Data for the second plot\nsecond_data = [\n    [0.00, 6.20, 4.90, 4.25, 3.65, 3.25],\n    [0.00, 6.15, 5.25, 2.80, 5.25, 2.85],\n    [0.00, 6.25, 5.35, 6.30, 5.45, 2.95],\n    [0.00, 6.25, 5.75, 6.30, 5.45, 2.95],\n    [0.00, 6.25, 5.75, 6.30, 5.45, 2.95],\n    [0.00, 6.25, 5.75, 6.30, 5.45, 2.95],\n    [0.00, 6.25, 5.75, 6.30, 5.45, 2.95]\n]\n\n# Plot the second data set\ncolors = ['blue', 'cyan', 'magenta', 'yellow', 'black', 'gray']\nfor i, data in enumerate(second_data):\n    ax2.bar(categories, data, bottom=[sum(second_data[j][i] for j in range(i)) for i in range(len(data))], color=colors[i % len(colors)], alpha=0.7)\n\n# Set the labels for the second y-axis\nax2.set_ylabel('RFs (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\n\"\"\"\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['VGG16', 'Resnet 101']\naccuracies = [0.551, 0.538, 0.195, 0.043]\nangles = [0, 90, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot bars for accuracy\nax.bar(categories, accuracies, color=['blue', 'yellow', 'orange', 'red'])\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracies of Different Categories')\n\n# Plot lines for rotation angle\nfor i, angle in enumerate(angles):\n    ax.plot([i, i], [0, 10], 'k--')\n\n# Set x-axis limits\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Display the plot\nplt.show()\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['VGG16', 'Resnet 101']\naccuracies = [0.551, 0.538, 0.195, 0.043]\nangles = [0, 90, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot bars for accuracy\nax.bar(categories, accuracies, color=['blue', 'yellow', 'orange', 'red'])\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracies of Different Categories')\n\n# Plot lines for rotation angle\nfor i, angle in enumerate(angles):\n    ax.plot([i, i], [0, 10], 'k--')\n\n# Set x-axis limits\nax.set_xlim(-0.5, len(categories) - 0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code-maker\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for the bar chart\ndata = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a bar chart\nax.bar(range(len(data)), data, color='blue')\n\n# Set the title of the chart\nax.set_title('Bar Chart')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(-10, 10)\n\n# Set the x-axis tick labels\nax.set_xticks([0, 10, 20, 30, 40, 50])\n\n# Set the y-axis tick labels\nax.set_yticks([-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10])\n\n# Set the title of the plot\nax.set_title('Token rarity')\n\n# Set the x-axis label\nax.set_xlabel('GPT2Tokenizer rank')\n\n# Set the y-axis label\nax.set_ylabel('Loss')\n\n# Draw a shaded region\nax.fill_between([0, 50], [-8, -8], [-9, -9], color='gray', alpha=0.5)\n\n# Plot data points\nax.plot([0, 10, 20, 30, 40, 50], [-8, -8, -9, -9, -9, -9], 'bo')\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the x-axis limits\nax2.set_xlim(0, 50)\n\n# Set the y-axis limits\nax2.set_ylim(0, 10)\n\n# Set the x-axis tick labels\nax2.set_xticks([0, 10, 20, 30, 40, 50])\n\n# Set the y-axis tick labels\nax2.set_yticks([0, 2, 4, 6, 8, 10])\n\n# Set the title of the plot\nax2.set_title('Length = 20')\n\n# Set the x-axis label\nax2.set_xlabel('# of documents')\n\n# Set the y-axis label\nax2.set_ylabel('Loss')\n\n# Draw a boxplot\nboxplot_data = [\n    [8, 8, 8, 8, 8],\n    [8, 8, 8, 8, 8],\n    [8, 8, 8, 8, 8],\n    [8, 8, 8, 8, 8],\n    [8, 8, 8, 8, 8]\n]\nax2.boxplot(boxplot_data, positions=[0, 10, 20, 30, 40])\n\n# Set the x-axis tick labels for the second subplot\nax2.set_xticklabels(['0', '10k', '20k', '30k', '40k'])\n\n# Set the y-axis tick labels for the second subplot\nax2.set_yticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\ncolors = ['blue', 'blue', 'blue']\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(10, 4))\nbars = ax.bar(categories, values, color=colors)\n\n# Add text annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Correlation of Sentiment, Toxicity, and News')\nax.set_xlabel('Categories')\nax.set_ylabel('Correlation')\n\n# Set y-axis limits\nax.set_ylim(0, 0.4)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['c1355', 'c1908', 'c2670', 'c3540']\nvalues = [40, 50, 50, 40]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(6, 6))\n\n# Plot the bar chart\nbars = ax1.bar(categories, values, color='blue')\n\n# Set the title and labels\nax1.set_title('Number of Successful Advc Circuits')\nax1.set_xlabel('Category')\nax1.set_ylabel('# successful adv circuits')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Create a second y-axis for OMLA KPA\nax2 = ax1.twinx()\nomla_kpa_values = [0.45, 0.55, 0.5, 0.45]\nax2.plot(categories, omla_kpa_values, 'o-', color='orange')\nax2.set_ylabel('OMLA KPA')\n\n# Set the y-limits for both axes\nax1.set_ylim(0, 60)\nax2.set_ylim(0.35, 0.65)\n\n# Draw horizontal lines at specific y-values\nax1.axhline(0.5, color='red', linestyle='--')\nax1.axhline(0.6, color='red', linestyle='--')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/autogalaxy/plotting/plotter.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define the data for the bar chart\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humans', 'Finance']\npublications = [250, 180, 300, 120, 160, 190, 270]\n\n# Create a bar chart\nax.bar(domains, publications, color='blue')\n\n# Set the title of the chart\nax.set_title('Number of Publications by Domain')\n\n# Set the x-axis label\nax.set_xlabel('Domain')\n\n# Set the y-axis label\nax.set_ylabel('Publications')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first chart\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\nhardware = [0, 0, 0, 0, 0, 0, 0, 0]\nsoftware = [0, 0, 0, 0, 0, 0, 0, 0]\nai = [0, 0, 0, 0, 0, 0, 0, 0]\n\n# Define the data for the second chart\nsectors = ['Big Tech', 'Startups', 'Academia', 'Government']\ninnovation_gaps = [40, 40, 20, 20]\ninnovation_gaps_percentage = [60, 60, 40, 40]\n\n# Create the first chart\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\nax1.plot(years, hardware, 'b-', label='Hardware')\nax1.plot(years, software, 'o-', label='Software')\nax1.plot(years, ai, 'g-', label='AI')\nax1.set_xlabel('Year')\nax1.set_ylabel('Progress (%)', color='b')\nax1.tick_params(axis='y', labelcolor='b')\n\n# Create the second chart\nax2 = ax1.twinx()\nax2.bar(sectors, innovation_gaps, color='r', alpha=0.5)\nax2.set_ylabel('Innovation Gap (Gaps)', color='r')\nax2.tick_params(axis='y', labelcolor='r')\n\n# Set the title of the first chart\nax1.set_title('Technological Advancements')\n\n# Set the title of the second chart\nax2.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.5, 2.5, 2.5]\n\n# Create a bar chart\nplt.figure(figsize=(8, 10))\nbars = plt.bar(countries, crime_rates, color='orange')\n\n# Set the title and labels\nplt.title('Average Legal Crime Rates by Country')\nplt.xlabel('Country')\nplt.ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n\n# Data for the second graph\ncrimes = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\ncrime_rates_2 = [140, 130, 120, 110, 100]\n\n# Create a line chart\nplt.figure(figsize=(8, 10))\nplt.plot(crimes, crime_rates_2, marker='o', linestyle='-', color='blue')\n\n# Set the title and labels\nplt.title('Average Legal Crime Rates by Country')\nplt.xlabel('Crime')\nplt.ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Add value labels at the bottom of each data point\nfor i, v in enumerate(crime_rates_2):\n    plt.text(i, v, str(v), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\n\"\"\"\nGenerated by http://postimage.org/\nImage description: Student Performance in Schools Resource Allocation in Schools\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Student Performance in Schools')\n\n# Define the data for the bar chart\ndata = [80, 60, 40, 20]\nlabels = ['Public School', 'Private School', 'Technology', 'Facilities']\n\n# Create a bar chart\nbars = ax.bar(labels, data, color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('School Type')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nax2.set_title('Resource Allocation in Schools')\n\n# Define the data for the pie chart\nsizes = [30, 20, 15, 10, 5]\nlabels = ['Books', 'Staff', 'Extracurricular', 'Technology', 'Facilities']\ncolors = ['blue', 'orange', 'green', 'gray', 'red']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nax2.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the aspect ratio of the pie chart to be equal\nax2.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\n\"\"\"\nGenerated by http://graphviz.org\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first plot\nx1 = np.array([10, 20, 30, 40, 50])\ny1 = np.array([100, 150, 200, 250, 300])\n\n# Plot the first data set\nax.plot(x1, y1, 'bo-', label='Data Set 1')\n\n# Define the data for the second plot\nx2 = np.array([10, 20, 30, 40, 50])\ny2 = np.array([100, 150, 200, 250, 300])\n\n# Plot the second data set\nax.plot(x2, y2, 'ro-', label='Data Set 2')\n\n# Set the title of the plot\nax.set_title('Geographical Elevation Distribution')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Elevation (m)')\nax.set_ylabel('Density')\n\n# Set the limits for the x and y axes\nax.set_xlim(0, 275)\nax.set_ylim(0, 0.008)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.ai\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define data points\nyears = ['2019', '2020', '2021', '2022']\nstocks = [300, 250, 200, 150]\nbonds = [250, 200, 150, 100]\nreal_estate = [200, 150, 100, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.bar(years, stocks, color='green', label='Stocks')\nax.bar(years, bonds, color='blue', bottom=stocks, label='Bonds')\nax.bar(years, real_estate, color='yellow', bottom=[sum(x) for x in zip(stocks, bonds)], label='Real Estate')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Accounts (%)')\nax.set_title('Investment Growth Over Time')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Al Task Success Rates')\n\n# Define the data for the bars\nbars = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\nvalues = [80, 60, 80, 80]\n\n# Create bar chart\nax.bar(bars, values, color='lightblue')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis labels\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate (%)')\n\n# Add a horizontal line at y=50\nax.axhline(y=50, color='gray', linestyle='--')\n\n# Add a vertical line at x=2\nax.axvline(x=2, color='gray', linestyle='--')\n\n# Add a text annotation\nax.text(2, 90, 'Model A', fontsize=12, ha='center', va='center')\n\n# Add a second subplot\nax2 = fig.add_subplot(2, 2, 2)\nax2.set_title('Algorithm Efficiency Scores')\nax2.plot([1, 2, 3, 4], [90, 80, 70, 60], 'ro-')\nax2.set_xlabel('Algorithm')\nax2.set_ylabel('Efficiency (%)')\nax2.set_ylim(50, 100)\n\n# Add a third subplot\nax3 = fig.add_subplot(2, 2, 3)\nax3.set_title('Al Model Adaptability')\nax3.plot([1, 2, 3, 4], [95, 90, 85, 80], 'go-')\nax3.set_xlabel('Model')\nax3.set_ylabel('Adaptability Score (%)')\nax3.set_ylim(75, 100)\n\n# Add a fourth subplot\nax4 = fig.add_subplot(2, 2, 4)\nax4.set_title('Al Model Adaptability')\nax4.plot([1, 2, 3, 4], [95, 90, 85, 80], 'go-')\nax4.set_xlabel('Model')\nax4.set_ylabel('Adaptability Score (%)')\nax4.set_ylim(75, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure with a specified size\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 10.0))\n\n# Set the title of the first subplot\naxes[0].set_title('Traffic Volume by Time of Day')\n\n# Set the title of the second subplot\naxes[1].set_title('Speed Distribution by Location')\n\n# Set the title of the third subplot\naxes[2].set_title('Elevation Changes Along a Route')\n\n# Set the x-axis label for the first subplot\naxes[0].set_xlabel('Number of Vehicles')\n\n# Set the y-axis label for the first subplot\naxes[0].set_ylabel('Frequency')\n\n# Set the x-axis label for the second subplot\naxes[1].set_xlabel('Speed (km/h)')\n\n# Set the y-axis label for the second subplot\naxes[1].set_ylabel('Elevation (m)')\n\n# Set the x-axis label for the third subplot\naxes[2].set_xlabel('Distance (km)')\n\n# Set the y-axis label for the third subplot\naxes[2].set_ylabel('Elevation (m)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/autogalaxy/plotting/plotter.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nsizes = [10, 30, 25, 15]\ncolors = ['red', 'blue', 'green', 'orange']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10, 5), ncols=2)\n\nax[0].pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax[0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Define the data for the radar chart\ncategories = ['Expression', 'Creativity', 'Collaboration', 'Dedication', 'Technique']\nvalues = [0.6, 0.8, 0.4, 0.2, 0.2]\n\n# Create a radar chart\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # repeat the first value to close the loop\nvalues += values[:1]\n\nax[1].plot(angles, values, linewidth=1, linestyle='solid')\nax[1].fill(angles, values, 'b', alpha=0.1)\nax[1].set_xticks(angles[:-1])\nax[1].set_xticklabels(categories)\nax[1].set_yticks([0.2, 0.4, 0.6, 0.8])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define data\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nsales_probabilities = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\nsales = [\n    [25000, 20000, 15000, 10000, 5000, 0],\n    [20000, 15000, 10000, 5000, 0, 0],\n    [15000, 10000, 5000, 0, 0, 0],\n    [10000, 5000, 0, 0, 0, 0],\n    [5000, 0, 0, 0, 0, 0]\n]\n\n# Plot bars for each product\nfor i, product in enumerate(products):\n    ax.bar(regions, sales[i], label=product, bottom=[sum(sales[j][:i+1]) for j in range(len(products))])\n\n# Set labels and title\nax.set_xlabel('Regions')\nax.set_ylabel('Sales')\nax.set_title('Sales by Product and Region')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Histogram of Stock Returns')\n\n# Define the data for the histogram\ndata = [160, 140, 120, 100, 80, 60, 40, 20, 0]\n\n# Plot the histogram\nax.bar(range(len(data)), data, color='green')\n\n# Set the x-axis labels\nax.set_xticks(range(len(data)))\nax.set_xticklabels(['-0.6', '-0.4', '-0.2', '0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis label\nax.set_ylabel('Returns')\n\n# Set the y-axis limits\nax.set_ylim(0, 160)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n\n# First subplot: Energy Consumption vs Relative Year\nx1 = np.linspace(0, 5, 10)\ny1 = np.sin(x1) * 0.6 + 0.3\nax1.plot(x1, y1, 'bo-')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.set_title('Energy Consumption vs Relative Year')\n\n# Second subplot: Renewable Energy Ratio vs Relative and Relativ Month\nx2 = np.linspace(-4, 4, 10)\ny2 = np.linspace(-2, 2, 10)\nX, Y = np.meshgrid(x2, y2)\nZ = np.sin(X) * np.cos(Y)\nax2.contourf(X, Y, Z, cmap='Blues')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_title('Renewable Energy Ratio vs Relative and Relativ Month')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\n\"\"\"\nThis script generates a visualization that combines a pie chart and a scatter plot.\nThe pie chart represents the distribution of document types in a library, while the scatter plot shows the number of documents over different years.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15, 35, 30, 20]\ncolors = ['yellowgreen', 'red', 'lightcoral', 'lightskyblue']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax1 = plt.subplots(figsize=(10, 5))\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Scatter plot data\nyears = [400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]\ndocuments = [150, 170, 190, 210, 230, 250, 270, 290, 310]\n\n# Create a scatter plot\nax2 = fig.add_subplot(122)\nax2.scatter(years, documents, color='purple')\nax2.set_xlabel('Year')\nax2.set_ylabel('Number of Documents')\nax2.set_title('Document Count Over Historical Periods')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.ai\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Customer Satisfaction Distribution Across Brands')\n\n# Define the data for the bar chart\nbrands = ['Louis Vuitton', 'Chanel', 'Dior']\nsatisfaction = [9.25, 9.0, 8.75]\n\n# Create a bar chart with the specified data\nbars = ax.bar(brands, satisfaction, color='blue')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('Customer Satisfaction')\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\n\"\"\"\nGenerated by http://autograph.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\nax.set_title('Accuracy (%)')\nax.set_xlabel('Accuracy (%)')\nax.set_ylabel('NFR (%)')\n\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], color='green')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='red')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='blue')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='purple')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='orange')\n\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='green')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='red')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='blue')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='purple')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='orange')\n\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='green')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='red')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='blue')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='purple')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='orange')\n\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='green')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='red')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='blue')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='purple')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='orange')\n\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='green')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='red')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='blue')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='purple')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='orange')\n\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='green')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='red')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='blue')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='purple')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='orange')\n\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='green')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], left=[0, 0, 0, 0, 0, 0], height=0.2, color='red')\nax.barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32,"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvariances = [0.6, 0.6, 0.8, 0.8, 0.8, 0.8]\naverages = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\n\n# Plot the variance data\ncolor = 'tab:blue'\nax1.set_xlabel('Trials')\nax1.set_ylabel('General Variance', color=color)\nax1.plot(categories, variances, color=color, marker='o')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for average regret\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Average Regret', color=color)\nax2.plot(categories, averages, color=color, marker='o')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Set the title of the plot\nplt.title('Comparison of Algorithms')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\n\"\"\"\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data\nx = [0, 200, 400]\ny = [300, 250, 200]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Debater')\nax.set_xlabel('Elo Rating')\nax.set_ylabel('Correct Rating - Incorrect Rating')\n\n# Display the plot\nplt.show()\n\"\"\""}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [30.5, 10.6, 4.6, 11.3, 13.2, 29.8]\nlabels = ['30.5%', '10.6%', '4.6%', '11.3%', '13.2%', '29.8%']\ncolors = ['cyan', 'purple', 'gray', 'yellow', 'lightblue', 'blue']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['1 egg', '60 g butter', '90 g sugar', '1/2 package of yeast', '100 ml milk', '225 g flour']\nsizes = [1, 60, 90, 12, 100, 225]\ncolors = ['green', 'red', 'orange', 'purple', 'blue', 'cyan']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title\nax.set_title('Matplotlib bakery: A donut')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\n\"\"\"\n=====================================\nExpenses - Company vs. Project\n=====================================\n\nThis example demonstrates how to create a circular bar chart using Matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['Transport', 'Utilities', 'Food', 'Others', 'Entertainment']\nsizes = [37.5, 16.7, 41.7, 10.0, 10.0]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nexplode = (0, 0, 0, 0, 0)  # explode 1st slice\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw={'aspect': 'equal'})\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                 autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlabels_lo_ra = ['Model', 'Optimizer', 'Unused', 'Gradient']\nsizes_lo_ra = [15.7, 19.9, 31.4, 33.0]\ncolors_lo_ra = ['red', 'blue', 'orange', 'green']\n\n# Data for QLoRA\nlabels_q_lo_ra = ['Model', 'Optimizer', 'Unused', 'Gradient']\nsizes_q_lo_ra = [6.3, 10.5, 28.4, 54.8]\ncolors_q_lo_ra = ['orange', 'red', 'blue', 'green']\n\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot LoRA\nwedges_lo_ra, texts_lo_ra, autotexts_lo_ra = ax1.pie(sizes_lo_ra, labels=labels_lo_ra, colors=colors_lo_ra, autopct='%1.1f%%', startangle=140)\nax1.set_title('LoRA')\n\n# Plot QLoRA\nwedges_q_lo_ra, texts_q_lo_ra, autotexts_q_lo_ra = ax2.pie(sizes_q_lo_ra, labels=labels_q_lo_ra, colors=colors_q_lo_ra, autopct='%1.1f%%', startangle=140)\nax2.set_title('QLoRA')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart with two circular segments representing different data sets.\nThe chart includes two main sections, each with a different color scheme and data values.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the first chart\ndata1 = [25.1, 26.4, 12.6, 15.9]\ncolors1 = ['yellow', 'green', 'orange', 'grey']\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Define the data for the second chart\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['yellow', 'green', 'orange', 'grey']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(5.0, 8.0))\n\n# Plot the first chart\naxes[0].bar(labels1, data1, color=colors1)\naxes[0].set_title('Full Finetuning')\n\n# Plot the second chart\naxes[1].bar(labels2, data2, color=colors2)\naxes[1].set_title('QLoRA')\n\n# Set the color map for the bars\ncmap = plt.get_cmap('viridis')\n\n# Set the color of the bars\nfor ax in axes:\n    for i, bar in enumerate(ax.patches):\n        bar.set_facecolor(cmap(i / len(bar.get_height())))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\n\"\"\"\n===========================\nNutritional Distribution Chart\n===========================\n\nThis example demonstrates how to create a pie chart with a custom color palette and labels.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Fruits', 'Proteins', 'Grains', 'Vegetables', 'Dairy']\nsizes = [25, 35, 10, 20, 10]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\n\"\"\"\nGenerated by http://postill.github.io/matplotlib-venn/\n\"\"\"\n\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn3, venn3_circles\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.axis('off')\n\n# Define the data for the Venn diagram\nsets = {'A': 18.8, 'B': 21.4, 'C': 14.3, 'D': 28.6, 'E': 35.7, 'F': 37.5, 'G': 31.2}\ncolors = ['blue', 'orange', 'green']\nlabels = ['Education', 'Entertainment', 'Technology']\n\n# Create the Venn diagram\nvenn3(subsets=(sets['A'], sets['B'], sets['C'], sets['D'], sets['E'], sets['F'], sets['G']), set_labels=labels, set_colors=colors, alpha=0.8)\n\n# Add a title to the Venn diagram\nplt.title('Market Share by Sector - External vs. Internal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\n\"\"\"\nThis script generates a pie chart representing data related to various categories and their respective percentages.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\ncategories = ['Logs 10%', 'Frogs 15%', 'Hogs 30%', 'Dogs 45%']\nvalues = [10, 15, 30, 45]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99']\n\n# Create a pie chart with the specified data\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nplt.title('Pie Chart Representation')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\n\"\"\"\n=====================================\nPie chart with custom start angle\n=====================================\n\nDemonstrating how to create a pie chart with a custom start angle.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data to plot\nlabels = 'David', 'John', 'Marie', 'Peter'\nsizes = [29, 11, 20, 40]\ncolors = ['blue', 'orange', 'green', 'red']\nexplode = (0, 0, 0, 0)  # explode 1st slice\n\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\n\"\"\"\n=====================================\nCountries in Europe\n=====================================\n\nThis example demonstrates how to create a pie chart with a custom pattern.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['France', 'UK 42%', 'Germany 12%', 'Italy 28%']\nsizes = [18, 42, 12, 28]\ncolors = ['#f0e68c', '#90ee90', '#add8e6', '#ffa500']\npatterns = ['o', '.', '*', 'x']\n\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\nfor wedge, pattern in zip(wedges, patterns):\n    wedge.set_hatch(pattern)\n\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\n\"\"\"\n=====================\nSlice of a pie chart\n=====================\n\nThis example shows how to create a pie chart with matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data to plot\nlabels = 'Red', 'Orange', 'Yellow', 'Green', 'Blue'\nsizes = [26.2, 21.4, 19.0, 14.3, 13.3]\ncolors = ['red', 'orange', 'yellow', 'green', 'blue']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Plot\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\n\"\"\"\nThis script generates a pie chart representing market share data for various categories.\nThe data includes percentages of market share for different categories such as Psychological, Others, Market, Satisfactory, and Social.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [35.4, 10.3, 17.2, 24.7, 12.4]\ncolors = ['blue', 'green', 'lightblue', 'orange', 'pink']\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nplt.title('Market Share Distribution')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\n\"\"\"\n=====================================\nSocial Media Usage Pie Chart\n=====================================\n\nThis example demonstrates how to create a pie chart to represent social media usage.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 35]\ncolors = ['lightblue', 'lightblue', 'lightblue', 'darkred']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\n       autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['NAACL', 'EMNLP', 'COLING', 'EACL', 'EMACL']\nsizes = [25.4, 7.4, 12.2, 20.3, 34.7]\ncolors = ['lightblue', 'skyblue', 'purple', 'brown', 'orange']\nexplode = (0, 0, 0, 0, 0.1)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\n\"\"\"\nThis script generates a pie chart representing energy consumption data.\nThe chart includes four main categories: Coal, Hydro, Solar, and Wind.\nEach category has its own set of subcategories with varying percentages.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncoal_data = [25.0, 10.0, 8.3, 10.0]\nhydro_data = [15.0, 12.5, 10.0, 16.7, 20.0]\nsolar_data = [30.0, 25.0, 16.7, 10.0, 8.3]\nwind_data = [37.5, 15.0, 12.5, 30.0, 25.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie charts\nax.pie(coal_data, colors=['red', 'orange', 'yellow', 'green'], startangle=90)\nax.pie(hydro_data, colors=['blue', 'cyan', 'magenta', 'yellow', 'green'], startangle=90)\nax.pie(solar_data, colors=['red', 'orange', 'yellow', 'green', 'blue'], startangle=90)\nax.pie(wind_data, colors=['blue', 'cyan', 'magenta', 'yellow', 'green'], startangle=90)\n\n# Set the title of the chart\nax.set_title('Energy Consumption - National vs. Project')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nenglish = [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00, 0.55, 1.11]\nfrench = [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00, 0.55, 1.11]\ngerman = [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00, 0.55, 1.11]\nkorean = [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00, 0.55, 1.11]\njapanese = [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00, 0.55, 1.11]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot data\nax.plot(x, english, 'r-', label='English')\nax.plot(x, french, 'b-', label='French')\nax.plot(x, german, 'g-', label='German')\nax.plot(x, korean, 'c-', label='Korean')\nax.plot(x, japanese, 'm-', label='Japanese')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Plot of Data')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each language\nenglish = [-4.00, -3.22, -2.44, -2.00]\nfrench = [-3.22, -2.44, -2.00]\ngerman = [-2.44, -2.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(english, label='English', marker='o')\nax.plot(french, label='French', marker='o')\nax.plot(german, label='German', marker='o')\n\n# Set the title and labels\nax.set_title('Language Scores')\nax.set_xlabel('Time')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\n\"\"\"\nGenerated by https://quickchart.io/code-maker\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x and y limits\nax.set_xlim(0, 0.6)\nax.set_ylim(0, 0.6)\n\n# Draw horizontal lines\nfor i in range(1, 7):\n    ax.axhline(i / 10, color='gray', linestyle='--', linewidth=0.5)\n\n# Draw vertical lines\nfor i in range(1, 7):\n    ax.axvline(i / 10, color='gray', linestyle='--', linewidth=0.5)\n\n# Plot lines with specific colors and labels\nax.plot([0.0, 0.2, 0.4, 0.6], [0.3, 0.4, 0.5, 0.6], 'r-', label='True Field')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.3, 0.4, 0.5, 0.6], 'b-', label='Train Sample')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.3, 0.4, 0.5, 0.6], 'y-', label='Test Sample')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.3, 0.4, 0.5, 0.6], 'g-', label='SINDy Train')\nax.plot([0.0, 0.2, 0.4, 0.6], [0.3, 0.4, 0.5, 0.6], 'k-', label='SINDy Test')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('X1')\nax.set_ylabel('X2')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\n\"\"\"\nThis script generates a plot based on the provided image using matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis with specified dimensions\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Define the data points for the plot\nx = np.linspace(-1, 1, 20)\ny = np.linspace(-1, 1, 20)\nX, Y = np.meshgrid(x, y)\nU = np.ones_like(X)\nV = np.ones_like(Y)\n\n# Plot the vector field\nax.quiver(X, Y, U, V, color='blue')\n\n# Set the limits for the x and y axes\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data for the plot\nx = np.linspace(-2.0, 2.0, 100)\ny = np.linspace(-2.0, 2.0, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the data\nax.contourf(X, Y, Z, cmap='viridis')\n\n# Set the title of the plot\nax.set_title('Magnetic Field \\u03B2 in Tesla units')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\n\"\"\"\nSuggested steps to create the plot:\n\n1. Import the necessary libraries: numpy for numerical operations and matplotlib.pyplot for plotting.\n2. Define the data for the radar chart, including the labels and their corresponding values.\n3. Create a figure and axis using plt.subplots with a specified figsize.\n4. Set the title of the plot to \"Radar Chart\" and adjust the font size accordingly.\n5. Use the ax.plot method to draw the radar chart by connecting the points with lines.\n6. Use ax.fill to fill the area under the radar chart with a color.\n7. Use ax.text to add text annotations at specific positions within the radar chart.\n8. Use ax.set_yticks to set the y-axis ticks to the desired values.\n9. Use ax.set_yticklabels to set the y-axis tick labels to the corresponding values.\n10. Use ax.set_xticks to set the x-axis ticks to the desired positions.\n11. Use ax.set_xticklabels to set the x-axis tick labels to the corresponding labels.\n12. Use ax.grid to enable the grid.\n13. Use plt.show to display the plot.\n\nThe provided code snippet is a starting point for creating the radar chart. It includes the necessary imports, data definition, and some basic plot setup. The remaining steps involve drawing the radar chart, filling the area, adding text annotations, and setting the axis properties.\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for the radar chart\nlabels = ['VQA', 'MME', 'MM', 'LLaVA-W', 'POPE']\nvalues = [79.9, 66.9, 64.9, 75.8, 86.4]\ncolors = ['red', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Radar Chart', fontsize=16)\n\n# Draw the radar chart\nangles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\nvalues += values[:1]  # To close the loop\nax.plot(angles, values, 'o-', linewidth=2, markersize=8, color=colors[0])\n\n# Fill the area under the radar chart\nax.fill(angles, values, alpha=0.25, color=colors[0])\n\n# Add text annotations\nax.text(angles[0], values[0], 'TextVQA', ha='center', va='bottom', fontsize=10)\nax.text(angles[1], values[1], 'TextVQA', ha='center', va='bottom', fontsize=10)\nax.text(angles[2], values[2], 'TextVQA', ha='center', va='bottom', fontsize=10)\nax.text(angles[3], values[3], 'TextVQA', ha='center', va='bottom', fontsize=10)\nax.text(angles[4], values[4], 'TextVQA', ha='center', va='bottom', fontsize=10)\n\n# Set y-axis ticks and labels\nax.set_yticks([50, 60, 70, 80])\nax.set_yticklabels(['50', '60', '70', '80'])\n\n# Set x-axis ticks and labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels, rotation=45, ha='right')\n\n# Enable the grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nspeed_ratio = 4\nangles = np.linspace(0, 2 * np.pi, 10, endpoint=False)\nangles = np.concatenate((angles, [angles[0]]))\nspeeds = [20, 40, 60, 80]\ncolors = ['red', 'green', 'blue']\nlabels = ['fr', 'es', 'en', 'el', 'de', 'bg', 'sw', 'ar', 'ur', 'ru', 'th', 'hi', 'tr', 'vi', 'zh']\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(5.0, 5.0))\n\n# Plot the speed data\nfor i, speed in enumerate(speeds):\n    ax.plot([angles[i], angles[i + 1]], [0, speed], color=colors[i % len(colors)], linewidth=2)\n\n# Set the labels for the plot\nax.set_yticks(speeds)\nax.set_yticklabels(speeds)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\n\n# Set the title of the plot\nax.set_title(f'XNLI (speed-up ratio: {speed_ratio})')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\n\"\"\"\n===========================\nCreate a radar chart example\n===========================\n\nThis example creates a radar chart with a single data point.\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Number of variables we're plotting\nN = 5\ntheta = np.linspace(0.0, 2 * np.pi, N, endpoint=False).tolist()\ntheta += theta[:1]  # To close the loop\n\nfig, ax = plt.subplots(figsize=(4.0, 4.0), subplot_kw=dict(polar=True))\n\n# Data to plot\ndata = [0, 2, 4, 6, 8]\ndata += data[:1]  # To close the loop\n\nax.plot(theta, data, 'o-', linewidth=2)\nax.fill(theta, data, alpha=0.25)\n\nax.set_xticks(theta[:-1])\nax.set_xticklabels(['0', '2', '4', '6', '8'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\ndata = {\n    '\u03bcR': [0.496, 0.37, 0.284],\n    '\u03bcAUC': [0.43, 0.33, 0.24],\n    '\u03bcTrain': [0.46, 0.36, 0.29],\n    'NTP': [0.46, 0.36, 0.29],\n    'NFF': [0.46, 0.36, 0.29]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.plot(values, label=label)\n\n# Set the title and labels\nax.set_title('Plot of Various Data Points')\nax.set_xlabel('Index')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['video game', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event']\nvalues = [0.8, 0.8, 0.6, 0.6, 0.4, 0.4, 0.2]\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(6.0, 6.0))\n\n# Set the categories as tick labels\nax.set_xticks(np.linspace(0, 2 * np.pi, len(categories), endpoint=False))\nax.set_xticklabels(categories)\n\n# Plot the values\nax.plot(np.linspace(0, 2 * np.pi, len(values), endpoint=False), values, 'bo-')\n\n# Set the title\nax.set_title('Polar Plot Example', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\n\"\"\"\n=====================================\nRoleplay and Extraction Visualization\n=====================================\n\nThis example demonstrates how to create a visually appealing visualization of roleplay and extraction data using matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the visualization\nroleplay_data = {\n    'Reasoning': ['GPT-J-6B', 'OpenMoE-8B/32E'],\n    'Writing': ['TinyLLaMA-1.1B', 'OpenLLaMA-3B'],\n    'Math': ['OpenMoE-8B/32E', 'OpenLLaMA-3B'],\n    'Coding': ['OpenMoE-8B/32E', 'OpenLLaMA-3B'],\n    'Extraction': ['OpenMoE-8B/32E', 'OpenLLaMA-3B']\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Roleplay')\n\n# Draw a circle with a radius of 1 centered at (0, 0)\ncircle = plt.Circle((0, 0), 1, color='black', fill=False)\nax.add_artist(circle)\n\n# Draw concentric circles\nfor i in range(1, 5):\n    circle = plt.Circle((0, 0), i / 4, color='black', fill=False)\n    ax.add_artist(circle)\n\n# Draw lines from the center to the circumference\nfor i in range(1, 5):\n    angle = np.linspace(0, 2 * np.pi, 100)\n    x = i / 4 * np.cos(angle)\n    y = i / 4 * np.sin(angle)\n    ax.plot(x, y, color='black')\n\n# Draw the roleplay labels\nlabels = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction']\nangles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first label to close the circle\nax.plot(angles, [1] * len(angles), 'o-', linewidth=2, markersize=8)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels, rotation='vertical')\n\n# Draw the extraction labels\nextraction_labels = ['Extraction']\nextraction_angles = np.linspace(0, 2 * np.pi, len(extraction_labels), endpoint=False).tolist()\nextraction_angles += extraction_angles[:1]  # Repeat the first label to close the circle\nax.plot(extraction_angles, [1.5] * len(extraction_angles), 'o-', linewidth=2, markersize=8)\nax.set_yticks([1.5])\nax.set_yticklabels(extraction_labels)\n\n# Draw the roleplay data\nfor label, data in roleplay_data.items():\n    angle = np.linspace(0, 2 * np.pi, len(data), endpoint=False).tolist()\n    angle += angle[:1]  # Repeat the first label to close the circle\n    ax.plot(angle, [1.2] * len(angle), 'o-', linewidth=2, markersize=8)\n    ax.set_yticks([1.2])\n    ax.set_yticklabels(data)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\n\"\"\"\n===========================\nMUJI vs Nestle in Food Safety\n===========================\n\nThis example demonstrates how to create a radar chart using Matplotlib.\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Nutrition', 'Purity', 'Allergen', 'Pollution', 'Storage', 'Recall', 'Compliance']\nvalues_nestle = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\nvalues_muji = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Number of categories\nN = len(categories)\n\n# Convert category labels into position indexes\nindex = np.arange(N)\nwidth = 2 * np.pi / N\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\nbars_nestle = ax.bar(index, values_nestle, width=width, bottom=0.0, label='Nestle', color='r')\nbars_muji = ax.bar(index + width, values_muji, width=width, bottom=0.0, label='MUJI', color='g')\n\nax.set_xticks(index + width / 2)\nax.set_xticklabels(categories)\n\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Apple', 'Samsung', 'Huawei']\nsizes = [85.8, 86.4, 80.9]\ncolors = ['#FFA500', '#0000FF', '#008000']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the radar chart\ncategories = ['Injection', 'Blow Molding', 'Extrusion', 'Compression']\nvalues = [5, 4, 3, 2]\ncolors = ['red', 'green', 'blue', 'orange']\n\n# Create a radar chart\nax.pie(values, labels=categories, colors=colors, startangle=90, counterclock=False)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\n\"\"\"\n=====================================\nAmusement Park Comparison: Disney vs Universal Studios\n=====================================\n\nThis example demonstrates how to create a visually appealing comparison between two amusement parks using matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie charts\ndata = {\n    'Food Quality': [0.2, 0.4],\n    'Shows': [0.6, 0.8],\n    'Staff': [1.0, 0.2],\n    'Family Rides': [0.4, 0.6],\n    'Cleanliness': [0.8, 0.2],\n    'Thrill Rides': [0.6, 0.4],\n    'Wait Times': [0.4, 0.2],\n    'Ticket Price': [0.2, 0.4],\n    'Souvenirs': [0.4, 0.2],\n    'Parking': [0.2, 0.4]\n}\n\n# Define the labels for the pie charts\nlabels = ['Disney', 'Universal Studios']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the pie charts\nfor i, (key, values) in enumerate(data.items()):\n    ax.pie(values, labels=labels, startangle=90, radius=1 - i * 0.1, colors=['orange', 'purple'], autopct='%1.1f%%', wedgeprops=dict(width=0.3))\n\n# Set the title of the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\n\"\"\"\n=====================================\nVisualization of a radar chart with matplotlib\n=====================================\n\nThis example demonstrates how to create a radar chart using matplotlib.\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Number of variables\nN = 5\n\n# Data to plot\nlabels = ['Chanel', 'Dior', 'Gucci']\nvalues = [1, 3, 9]\n\n# Create a color map\ncmap = plt.get_cmap('viridis')\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw a circle at the center of the radar chart\nax.plot([0], [0], 'o', markersize=5, color='w')\n\n# Draw the radar chart\nfor i, (label, value) in enumerate(zip(labels, values)):\n    ax.plot([i * 2 * np.pi / N, (i + 1) * 2 * np.pi / N], [0, value], color=cmap(i / len(labels)))\n    ax.text((i + 0.5) * 2 * np.pi / N, value, label, ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['MM-Vet', 'TextVQA', 'GQA', 'VQAav2', 'LLaVA-W']\nvalues = [78.7, 85.8, 85.0, 86.4, 79.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw={'projection': 'polar'})\n\n# Convert categories to radians\ntheta = np.linspace(0.0, 2 * np.pi, len(categories), endpoint=False).tolist()\ntheta += theta[:1]  # To close the plot\n\n# Plot the radar chart\nax.plot(theta, values + values[:1], 'o-')\nax.fill(theta, values + values[:1], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(theta)\nax.set_xticklabels(categories)\n\n# Set the title\nax.set_title('POPE')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogenerate-matplotlib-code.com\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 6.0))\n\n# Define the data for the pie charts\ndata1 = [1, 3, 5, 7, 9]\ndata2 = [1, 3, 5, 7, 9]\ndata3 = [1, 3, 5, 7, 9]\n\n# Define the labels for the pie charts\nlabels = ['Versatility', 'Longevity', 'Value', 'Sillage', 'Projection']\n\n# Define the colors for the pie charts\ncolors = ['blue', 'green', 'red']\n\n# Create the pie charts\nwedges1, texts1, autotexts1 = ax.pie(data1, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nwedges2, texts2, autotexts2 = ax.pie(data2, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nwedges3, texts3, autotexts3 = ax.pie(data3, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the plot\nax.set_title('Perfume Brand Comparison')\n\n# Set the aspect ratio of the plot to be equal\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the angles for the sectors\nangles = [0, 135, 225, 315, 45, 135, 225, 315]\n\n# Define the radii for the sectors\nradii = [1, 1, 1, 1, 1, 1, 1, 1]\n\n# Define the colors for the sectors\ncolors = ['lightgrey', 'lightgrey', 'lightgrey', 'lightgrey', 'red', 'red', 'red', 'red']\n\n# Define the labels for the sectors\nlabels = ['Loadings PC1', 'Loadings PC2', 'Loadings PC1', 'Loadings PC2', 'Loadings PC1', 'Loadings PC2', 'Loadings PC1', 'Loadings PC2']\n\n# Define the values for the sectors\nvalues = [0.6, 0.8, 0.2, 0.4, 0.6, 0.8, 0.2, 0.4]\n\n# Plot the sectors\nax.pie(values, startangle=0, radius=radii, colors=colors, labels=labels, wedgeprops=dict(width=0.3), textprops={'fontsize': 10})\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('Sectors with Loadings PC1 and PC2')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 6.0))\n\n# Define the data for each subplot\ndata = [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5]\n]\n\n# Define the labels for each subplot\nlabels = [\n    ['Privacy', 'MLA', 'Query Error', 'MLA', 'Privacy'],\n    ['Privacy', 'MLA', 'Query Error', 'MLA', 'Privacy'],\n    ['Privacy', 'MLA', 'Query Error', 'MLA', 'Privacy']\n]\n\n# Define the colors for each subplot\ncolors = [\n    ['green', 'blue', 'red', 'green', 'blue'],\n    ['purple', 'blue', 'red', 'green', 'blue'],\n    ['cyan', 'blue', 'red', 'green', 'blue']\n]\n\n# Plot each subplot\nfor ax, d, l, c in zip(axes, data, labels, colors):\n    ax.pie(d, startangle=90, colors=c)\n    ax.set_title('Fidelity(D-test)')\n    ax.set_yticklabels(l, rotation=45)\n\n# Adjust the layout to prevent overlap\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\n\"\"\"\n=====================================\nHeterocycle Formation vs C-C Bond Formation\n=====================================\n\nThis example demonstrates how to create a radar chart with multiple categories and data points.\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Number of variables and observations\ncategories = ['Heterocycle formation', 'C-C bond formation']\nN = len(categories)\n\n# Data for plotting\nvalues = [\n    [30, 40, 50, 60, 70, 80],\n    [30, 40, 50, 60, 70, 80]\n]\n\n# Create a color map\ncmap = plt.get_cmap('tab20b')\n\n# Initialize the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw a circle at r=1 to illustrate the radius range\nax.plot([0, 1], [0, 1], 'k-', lw=0.5)\n\n# Draw one axe per variable + add labels\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\nfor i, (category, value) in enumerate(zip(categories, values)):\n    values[i] += values[i][:1]  # To close the loop\n    ax.plot(angles, values[i], linewidth=1, linestyle='solid', label=category)\n    ax.fill(angles, values[i], alpha=0.25)\n\n# Draw ylabels\nax.set_yticklabels(['30', '40', '50', '60', '70', '80'])\nax.set_yticks(np.arange(30, 90, 10))\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nmodels = ['Model C', 'Model B', 'Model D', 'Model E', 'Model F']\npredicted_scores = [0.07, 0.07, 0.07, 0.07, 0.07]\nhelpful_scores = [0.03, 0.03, 0.03, 0.03, 0.03]\nresult_scores = [0.05, 0.05, 0.05, 0.05, 0.05]\nrating_scores = [0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the circle\ncircle = plt.Circle((0.5, 0.5), 0.45, color='lightgrey')\nax.add_artist(circle)\n\n# Draw the inner circle\ninner_circle = plt.Circle((0.5, 0.5), 0.25, color='lightgrey')\nax.add_artist(inner_circle)\n\n# Draw the lines\nfor model, pred, help, res, rat in zip(models, predicted_scores, helpful_scores, result_scores, rating_scores):\n    ax.plot([0.5, 0.5], [0.5, 0.5 + pred], color='green')\n    ax.plot([0.5, 0.5], [0.5, 0.5 + help], color='orange')\n    ax.plot([0.5, 0.5], [0.5, 0.5 + res], color='blue')\n    ax.plot([0.5, 0.5], [0.5, 0.5 + rat], color='red')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Set the title\nax.set_title('Model Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\n\"\"\"\n=====================\n3D bar chart example\n=====================\n\nDemonstrates a 3D bar chart with a colorbar.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure(figsize=(8.0, 8.0), dpi=80)\nax = fig.add_subplot(111, projection='3d')\n\n# Data for plotting\nN = 20\ntheta = np.linspace(0, 2 * np.pi, N, endpoint=False).reshape(-1, 1)\nr = np.linspace(0, 1, N).reshape(1, -1)\nz = np.sin(r) * np.cos(theta)\n\n# Plot the surface\nsurf = ax.plot_surface(theta, r, z, cmap=plt.cm.Spectral, linewidth=0, antialiased=False)\n\n# Customize the z axis.\nax.set_zlim(-1.01, 1.01)\nax.zaxis.set_major_locator(plt.LinearLocator(10))\nax.zaxis.set_major_formatter(plt.FormatStrFormatter('%.02f'))\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\n\"\"\"\n=====================\nAnatomy of a Figure\n=====================\n\nThis figure shows the anatomy of a `~matplotlib.figure.Figure`.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(5.0, 5.0))\n\n# Add a subplot to the figure\nax = fig.add_subplot(111)\n\n# Set the title of the figure\nax.set_title('Imputation')\n\n# Define the data for the pie chart\ndata = [0.2, 0.3, 0.5]\n\n# Define the colors for the pie chart\ncolors = ['blue', 'green', 'red']\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(data, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the plot to be equal\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nangles = np.linspace(0, 2 * np.pi, 5, endpoint=False).tolist() + [0]\nvalues = [72.9, 66.3, 67.2, 42.9, 66.3, 67.2, 42.9, 72.9]\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(8.0, 7.0))\n\n# Plot the values\nax.plot(angles, values, 'o-')\n\n# Fill the area between the points\nax.fill(angles, values, alpha=0.25)\n\n# Set the tick labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(['VQA', 'GQA', 'POPE', 'MM-Vet', 'TextVQA'])\n\n# Set the title\nax.set_title('Polar Plot Example')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/xkcd/matplotlib-kde\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points\nx = np.array([0, 1, 2])\ny1 = np.array([0.5, 1.5, 2.5])\ny2 = np.array([0.5, 1.5, 2.5])\ny3 = np.array([0.5, 1.5, 2.5])\ny4 = np.array([0.5, 1.5, 2.5])\ny5 = np.array([0.5, 1.5, 2.5])\ny6 = np.array([0.5, 1.5, 2.5])\ny7 = np.array([0.5, 1.5, 2.5])\ny8 = np.array([0.5, 1.5, 2.5])\ny9 = np.array([0.5, 1.5, 2.5])\ny10 = np.array([0.5, 1.5, 2.5])\ny11 = np.array([0.5, 1.5, 2.5])\ny12 = np.array([0.5, 1.5, 2.5])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'bo')\nax.plot(x, y2, 'go')\nax.plot(x, y3, 'ro')\nax.plot(x, y4, 'co')\nax.plot(x, y5, 'mo')\nax.plot(x, y6, 'ko')\nax.plot(x, y7, 'yo')\nax.plot(x, y8, 'bo')\nax.plot(x, y9, 'go')\nax.plot(x, y10, 'ro')\nax.plot(x, y11, 'co')\nax.plot(x, y12, 'mo')\n\n# Set the title and labels\nax.set_title('Model-Basedness')\nax.set_xlabel('Value')\nax.set_ylabel('Model-Basedness')\n\n# Set the x-axis limits\nax.set_xlim(0, 2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 1000, 2000, 3000]\ny = [77, 79, 81, 83]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Pre-training GPU Hours')\nax.set_ylabel('Accuracy [%]')\n\n# Set the limits for the x and y axes\nax.set_xlim(0, 4000)\nax.set_ylim(75, 85)\n\n# Set the tick marks on the x-axis\nax.set_xticks([0, 1000, 2000, 3000])\n\n# Set the tick marks on the y-axis\nax.set_yticks([75, 77, 79, 81, 83, 85])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ninference_time = [10, 20, 30, 40, 50, 60]\naverage_score = [0.85, 0.80, 0.75, 0.70, 0.65, 0.60]\nbubble_size = [0.90, 0.90, 0.90, 0.90, 0.90, 0.90]\n\n# Create a scatter plot\nplt.scatter(inference_time, average_score, c=bubble_size, cmap='viridis')\n\n# Set the title and labels\nplt.title('Bubble Size: Number of Anomalies Detected')\nplt.xlabel('Inference Time (seconds)')\nplt.ylabel('Average Score')\n\n# Add a color bar to the plot\ncbar = plt.colorbar()\ncbar.set_label('Bubble Size')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [25, 30, 40, 45]\ny = [50, 50, 50, 50]\nlabels = ['MC-VIT-B', 'Bard + ShortVIT', 'Bard + ImageVIT', 'ShortVIT']\ncolors = ['red', 'blue', 'blue', 'blue']\n\n# Create a scatter plot\nplt.scatter(x, y, color=colors)\n\n# Add labels to each point\nfor i, label in enumerate(labels):\n    plt.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the title and labels\nplt.title('Number of parameters')\nplt.xlabel('EgoSchema VQA accuracy')\nplt.ylabel('Perception Test VQA accuracy')\n\n# Set the x-axis limits\nplt.xlim(20, 50)\n\n# Set the y-axis limits\nplt.ylim(30, 60)\n\n# Set the figure size\nplt.figure(figsize=(8.0, 6.0))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_single_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_green_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_blue_triangle = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_black_circle = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_green_square = [0.08, 0.07, 0.06, 0.05, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y_single_lstm, 'b^', label='Single LST')\nax.plot(x, y_green_lstm, 'g^', label='Green LST')\nax.plot(x, y_blue_triangle, 'b^', label='Blue Triangle')\nax.plot(x, y_black_circle, 'ko', label='Black Circle')\nax.plot(x, y_green_square, 'go', label='Green Square')\n\n# Set the title and labels\nax.set_title('Average Relative Error, u')\nax.set_xlabel('Test Case Index, u')\nax.set_ylabel('Average Relative Error, u')\n\n# Set the y-axis limits\nax.set_ylim(0.01, 0.08)\n\n# Set the x-axis limits\nax.set_xlim(1.0, 5.0)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart with specific styling and data points.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\nmajority_values = [1.2, 1.4, 1.1, 1.3, 1.5, 1.4, 1.3, 1.2]\nminority_values = [0.8, 0.9, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot the majority values\nax.bar(categories, majority_values, color='blue', label='Majority')\n\n# Plot the minority values\nax.bar(categories, minority_values, color='red', label='Minority')\n\n# Set the title of the plot\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Set the x-axis label\nax.set_xlabel('Classes')\n\n# Set the y-axis label\nax.set_ylabel('Accuracies')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\n\"\"\"\nGenerated by http://autogalaxy.readthedocs.io/en/latest/autogalaxy/plotting/plotter.html\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define data points\nx_values = [50, 30, 20, 10, 0]\ny_values = [68, 66, 66, 64, 62]\n\n# Plot the data points\nax.plot(x_values, y_values, 'ro')\n\n# Set labels and title\nax.set_xlabel('Token cost($)')\nax.set_ylabel('Accuracy(%)')\nax.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nefficiency = [15, 20, 25, 30, 35, 40, 45, 50]\ncarbon_reduction = [10, 10, 10, 10, 10, 10, 10, 10]\nenergy_source = ['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nfor i, source in enumerate(energy_source):\n    ax.plot(efficiency, [cr + i * 5 for cr in carbon_reduction], label=source)\n\n# Set the title and labels\nax.set_title('Energy Source')\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the limits for the x and y axes\nax.set_xlim(-30, 10)\nax.set_ylim(-10, 30)\n\n# Set the tick labels for the x and y axes\nax.set_xticks([-30, -20, -10, 0, 10])\nax.set_yticks([0, 10, 20, 30])\n\n# Set the tick labels for the x and y axes\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\nax.set_yticklabels(['0', '10', '20', '30'])\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Delta Robust Accuracy (%)')\nax.set_ylabel('Delta RNFR (%)')\n\n# Define the data points\nx}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 18)\n\n# Set the limits for the y-axis\nax.set_ylim(70, 120)\n\n# Set the grid lines\nax.grid(True)\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny_day1 = [105, 105, 105, 105, 105, 105, 105, 105]\ny_day2 = [100, 100, 100, 100, 100, 100, 100, 100]\n\n# Plot the data points\nax.plot(x, y_day1, 'bo', label='Day 1')\nax.plot(x, y_day2, 'ro', label='Day 2')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny1 = [110, 105, 100, 95, 90, 85, 80, 75]\ny2 = [105, 100, 95, 90, 85, 80, 75, 70]\ny3 = [100, 95, 90, 85, 80, 75, 70, 65]\ny4 = [95, 90, 85, 80, 75, 70, 65, 60]\ny5 = [90, 85, 80, 75, 70, 65, 60, 55]\ny6 = [85, 80, 75, 70, 65, 60, 55, 50]\n\n# Create a scatter plot for each y-axis\nplt.scatter(x, y1, color='blue')\nplt.scatter(x, y2, color='green')\nplt.scatter(x, y3, color='red')\nplt.scatter(x, y4, color='purple')\nplt.scatter(x, y5, color='yellow')\nplt.scatter(x, y6, color='cyan')\n\n# Set the title and labels\nplt.title('Scatter Plot with Multiple Y-Axes')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Set the limits for the x-axis\nplt.xlim(0, 18)\n\n# Set the limits for the y-axis\nplt.ylim(0, 115)\n\n# Set the grid\nplt.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [175, 200, 225, 250, 275, 300]\ny_solar_energy = [140, 160, 180, 200, 220, 240]\ny_wind_energy = [140, 160, 180, 200, 220, 240]\ny_hydro_power = [140, 160, 180, 200, 220, 240]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data\nax.plot(x, y_solar_energy, 'bo-', label='Solar Energy')\nax.plot(x, y_wind_energy, 'ro-', label='Wind Energy')\nax.plot(x, y_hydro_power, 'go-', label='Hydropower')\n\n# Set the title and labels\nax.set_title('Energy Production Trends')\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\n\n# Set the y-axis limits\nax.set_ylim(140, 240)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10, 20, 30, 40, 50, 60, 70, 80, 90]\ny = [20, 20, 20, 20, 20, 20, 20, 20, 20]\n\n# Create a scatter plot\nplt.scatter(x, y, color='green')\n\n# Set the title of the plot\nplt.title('Scatter plot with colorbar')\n\n# Set the x-axis label\nplt.xlabel('X-axis')\n\n# Set the y-axis label\nplt.ylabel('Y-axis')\n\n# Set the colorbar\ncbar = plt.colorbar()\ncbar.set_label('Colorbar Label')\n\n# Set the figure size\nplt.figure(figsize=(8.0, 6.0))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('LibriCSS vs Additional Data 1')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Define the data points for the plot\nx1 = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.8, 0.8, 0.8, 0.9, 0.9]\n\n# Plot the data points with specific markers and colors\nax.plot(x1, y1, 'bo-', label='LibriCSS WER')\nax.plot(x1, y1, 'bs-', label='Additional Data 1')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis limits\nax.set_xlim(1.5, 8.5)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 0.9)\n\n# Set the tick labels for the x-axis\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\n\"\"\"\nThis code generates a plot with two subplots side by side, each containing a scatter plot with specific data points and labels. The plots are titled \"Performance Comparison\" and \"Strategic Traits\". Each subplot has a grid, a legend, and specific x-axis values ranging from 0.2 to 1.0. The y-axis values range from 0.2 to 1.0 as well. The code uses matplotlib for plotting and sets the figure size to (12.0, 6.0).\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data for the first subplot\nx1 = [0.5, 0.7, 0.8, 0.9, 1.0]\ny1 = [0.3, 0.4, 0.5, 0.6, 0.7]\nlabels1 = ['Exploration', 'Risk Taking']\n\n# Data for the second subplot\nx2 = [0.5, 0.7, 0.8, 0.9, 1.0]\ny2 = [0.3, 0.4, 0.5, 0.6, 0.7]\nlabels2 = ['Exploration', 'Risk Taking']\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12.0, 6.0))\n\n# Plotting the first subplot\nax1.scatter(x1, y1, color='green')\nax1.scatter(x1, y1, color='red')\nax1.set_title('Performance Comparison')\nax1.set_xlabel('Value')\nax1.set_ylabel('Value')\nax1.grid(True)\nax1.legend(labels1)\n\n# Plotting the second subplot\nax2.scatter(x2, y2, color='green')\nax2.scatter(x2, y2, color='red')\nax2.set_title('Strategic Traits')\nax2.set_xlabel('Value')\nax2.set_ylabel('Value')\nax2.grid(True)\nax2.legend(labels2)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\n\"\"\"\nThis script generates a matplotlib plot based on the provided image.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plots\nmodels = ['Model-Basedness', 'Meta-Cognition', 'Exploration', 'Risk Taking']\ngpt4_data = [175, 160, 120, 100]\nmptb_data = [175, 160, 120, 100]\nlma270b_data = [175, 160, 120, 100]\ndavinci40b_data = [175, 160, 120, 100]\nclaudie1_data = [175, 160, 120, 100]\n\nexploration_data = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\nrisk_taking_data = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first subplot\naxes[0, 0].plot(models, gpt4_data, 'bo-', label='GPT4')\naxes[0, 0].set_title('Model-Basedness')\naxes[0, 0].set_xlabel('Models')\naxes[0, 0].set_ylabel('Score')\naxes[0, 0].legend()\n\n# Plot the second subplot\naxes[0, 1].plot(models, mptb_data, 'ro-', label='MPTB')\naxes[0, 1].set_title('Meta-Cognition')\naxes[0, 1].set_xlabel('Models')\naxes[0, 1].set_ylabel('Score')\naxes[0, 1].legend()\n\n# Plot the third subplot\naxes[1, 0].plot(models, exploration_data, 'go-', label='Exploration')\naxes[1, 0].set_title('Exploration')\naxes[1, 0].set_xlabel('Models')\naxes[1, 0].set_ylabel('Score')\naxes[1, 0].legend()\n\n# Plot the fourth subplot\naxes[1, 1].plot(models, risk_taking_data, 'mo-', label='Risk Taking')\naxes[1, 1].set_title('Risk Taking')\naxes[1, 1].set_xlabel('Models')\naxes[1, 1].set_ylabel('Score')\naxes[1, 1].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\n\"\"\"\nThis script generates a matplotlib plot based on the provided image.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points for each subplot\nx_values = [70, 80, 90]\ny_values = [30, 35, 40]\nscatter_plot_magenta = [\n    (70, 25), (75, 30), (80, 35), (85, 40), (90, 45)\n]\nscatter_plot_limegreen = [\n    (70, 17.5), (75, 20), (80, 22.5), (85, 25), (90, 27.5)\n]\nscatter_plot_x = [\n    (70, 15), (75, 17.5), (80, 20), (85, 22.5), (90, 25)\n]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot the first subplot\naxs[0].plot(x_values, y_values, 'b-')\naxs[0].scatter(*zip(*scatter_plot_magenta), color='magenta')\naxs[0].set_title('Scatter Plot - magenta')\naxs[0].set_xlabel('X Values')\naxs[0].set_ylabel('Y Values')\n\n# Plot the second subplot\naxs[1].plot(x_values, y_values, 'g-')\naxs[1].scatter(*zip(*scatter_plot_limegreen), color='limegreen')\naxs[1].set_title('Scatter Plot - limegreen')\naxs[1].set_xlabel('X Values')\naxs[1].set_ylabel('Y Values')\n\n# Plot the third subplot\naxs[2].plot(x_values, y_values, 'r-')\naxs[2].scatter(*zip(*scatter_plot_x), color='xkcd:azure')\naxs[2].set_title('Scatter Plot - x')\naxs[2].set_xlabel('X Values')\naxs[2].set_ylabel('Y Values')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\n\"\"\"\nGenerated by http://figcode.io\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Data for the first subplot\nx1 = [70, 72, 74, 76, 78, 80, 82, 84, 86]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10]\n\n# Data for the second subplot\nx2 = [70, 72, 74, 76, 78, 80, 82, 84, 86]\ny2 = [45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Data for the third subplot\nx3 = [70, 72, 74, 76, 78, 80, 82, 84, 86]\ny3 = [40, 35, 30, 25, 20, 15, 10, 5, 0]\n\n# Plotting the data\naxs[0].plot(x1, y1, 'p-', color='purple', label='ViTPose (sc)')\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].set_xlabel('Average Precision on MSCOCO (%)')\naxs[0].set_ylabel('Average Precision on HumanArt (%)')\naxs[0].legend()\n\naxs[1].plot(x2, y2, 'p-', color='purple', label='ViTPose (ft)')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].set_xlabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on HumanArt (%)')\naxs[1].legend()\n\naxs[2].plot(x3, y3, 'p-', color='purple', label='VLPose')\naxs[2].set_title('VLPose Performance')\naxs[2].set_xlabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on HumanArt (%)')\naxs[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define data points\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.5, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'ro')\n\n# Set labels and title\nax.set_xlabel('Diversity')\nax.set_ylabel('Token cost ($)')\nax.set_title('Token cost ($) vs Diversity')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```python\n\"\"\"\n==================================\nRandomly colored scatter plot\n==================================\n\nThis example demonstrates how to create a scatter plot with random colors.\n\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random data\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\narea = np.pi * (15 * np.random.rand(100))**2  # 0 to 15 point radiuses\n\n# Create a scatter plot\nplt.figure(figsize=(5.0, 5.0))\nscatter = plt.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Add a color bar which maps values to colors\ncbar = plt.colorbar(scatter)\ncbar.set_label('Color scale')\n\n# Set the title and labels\nplt.title('Randomly colored scatter plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny1 = [800, 800, 800, 800, 800, 800, 800, 800]\ny2 = [600, 600, 600, 600, 600, 600, 600, 600]\ny3 = [600, 600, 600, 600, 600, 600, 600, 600]\ny4 = [600, 600, 600, 600, 600, 600, 600, 600]\ny5 = [600, 600, 600, 600, 600, 600, 600, 600]\ny6 = [600, 600, 600, 600, 600, 600, 600, 600]\ny7 = [600, 600, 600, 600, 600, 600, 600, 600]\ny8 = [600, 600, 600, 600, 600, 600, 600, 600]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data points\nax.plot(x, y1, 'bo', label='SIREN')\nax.plot(x, y2, 'co', label='WIRE')\nax.plot(x, y3, 'ro', label='FFN')\nax.plot(x, y4, 'go', label='SZ3')\nax.plot(x, y5, 'mo', label='NNComp')\nax.plot(x, y6, 'ko', label='Ours')\n\n# Set the title and labels\nax.set_title('Scatter Plot of WRMSE vs BPP')\nax.set_xlabel('Bit per pixel (BPP)')\nax.set_ylabel('WRMSE')\n\n# Set the y-axis limits\nax.set_ylim(200, 800)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points for each category\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nx10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Plot the data points with different colors\nax.scatter(x1, y1, color='orange', label='Daytime Sunny')\nax.scatter(x2, y2, color='blue', label='Night Rainy')\nax.scatter(x3, y3, color='green', label='PGST')\n\n# Set the title and labels\nax.set_title('Scatter Plot of Data Points')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nnmae_values = [25, 15, 18, 12, 14, 11]\nnumber_of_parameters = [10, 20, 30, 40, 50, 60]\n\n# Create a bar chart\nplt.figure(figsize=(6, 3))\nbars = plt.bar(number_of_parameters, nmae_values, color='blue')\n\n# Add labels and title\nplt.xlabel('Number of parameters (M)')\nplt.ylabel('NMAE (%)')\nplt.title('Number of params. vs. NMAE on QM9')\n\n# Add text annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the y-axis limits\nplt.ylim(0, 35)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the x-axis label\nax.set_xlabel('PC1')\n\n# Set the y-axis label\nax.set_ylabel('PC2')\n\n# Define the colors for each category\ncolors = ['blue', 'pink', 'yellow', 'green']\n\n# Define the labels for each category\nlabels = ['ar', 'de', 'fr', 'he']\n\n# Define the data points\ndata_points = [\n    [(-0.3, -0.3), (-0.3, -0.2), (-0.2, -0.3), (-0.2, -0.2)],\n    [(-0.3, -0.1), (-0.3, 0.0), (-0.2, -0.1), (-0.2, 0.0)],\n    [(-0.3, 0.1), (-0.3, 0.2), (-0.2, 0.1), (-0.2, 0.2)],\n    [(-0.3, 0.3), (-0.3, 0.4), (-0.2, 0.3), (-0.2, 0.4)]\n]\n\n# Plot the data points with different colors and labels\nfor i, (x, y) in enumerate(data_points):\n    ax.scatter(x, y, color=colors[i], label=labels[i])\n\n# Set the limits for the x-axis\nax.set_xlim(-0.4, 0.4)\n\n# Set the limits for the y-axis\nax.set_ylim(-0.4, 0.4)\n\n# Set the tick marks on the x-axis\nax.set_xticks([-0.4, -0.2, 0.0, 0.2, 0.4])\n\n# Set the tick marks on the y-axis\nax.set_yticks([-0.4, -0.2, 0.0, 0.2, 0.4])\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(7.0, 10.0))\n\n# Data for DE plot\nde_x = [0.6, 0.7, 0.8, 0.9, 1.0]\nde_y = [0.11, 0.11, 0.11, 0.11, 0.11]\n\n# Data for PJM plot\npjm_x = [0.6, 0.7, 0.8, 0.9, 1.0]\npjm_y = [0.55, 0.55, 0.55, 0.55, 0.55]\n\n# Plotting DE data\naxes[0].scatter(de_x, de_y, color='green')\naxes[0].set_title('DE')\naxes[0].set_xlabel('CQA Similarity')\naxes[0].set_ylabel('MSE')\n\n# Plotting PJM data\naxes[1].scatter(pjm_x, pjm_y, color='green')\naxes[1].set_title('PJM')\naxes[1].set_xlabel('CQA Similarity')\naxes[1].set_ylabel('MSE')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['physicsforums.com', 'gmatclub.com', 'mathhelpboards.com', 'mathoverflow.net', 'proofwiki.org', 'stackexchange.com', 'mathhelpforum.com']\nvalues = [18.42, 6.26, 6.15, 10.91, 8.54, 30.6, 14.21]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('viridis')\n\n# Create a bar chart with custom colors\nbars = ax.bar(categories, values, color=cmap(np.linspace(0, 1, len(categories))))\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Bar Chart of Categories')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Java 10%', 'Python 20%', 'JavaScript 27%', 'C++ 23%', 'Other 8%']\nsizes = [10, 20, 27, 23, 8]\ncolors = ['#800080', '#800080', '#FFA500', '#FFA500', '#FFD700']\n\n# Create a pie chart with the specified data and colors\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Programming Languages Distribution')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['Adidas', 'Nike', 'Reebok', 'Puma']\nvalues = [13.42, 30.6, 10.91, 14.21]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Set the positions of the bars on the x-axis\nr = np.arange(len(categories))\n\n# Create the bar chart\nbars = ax.bar(r, values, color=['blue', 'cyan', 'orange', 'green'], width=bar_width, edgecolor='grey')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Product Categories and Their Percentage')\nax.set_xticks(r)\nax.set_xticklabels(categories)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['50%', '15%', '20%']\nvalues = [50, 15, 20]\n\n# Create a bar chart with the specified data\nplt.bar(categories, values, color=['orange', 'blue', 'cyan'])\n\n# Set the title of the chart\nplt.title('Bar Chart')\n\n# Set the x-axis label\nplt.xlabel('Categories')\n\n# Set the y-axis label\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['European', 'Australian', 'South American', 'Asian', 'North American']\nvalues = [15, 18, 10, 25, 20]\n\n# Create a bar chart\nplt.bar(categories, values, color=['yellow', 'purple', 'cyan', 'pink', 'green'])\n\n# Set the title and labels\nplt.title('Percentage Distribution')\nplt.xlabel('Categories')\nplt.ylabel('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\n\"\"\"\nThis script generates a bar chart with two sets of data, each represented by a different color. The data is plotted against a range of values on the x-axis and the y-axis represents the logarithm of the number of examples. The chart includes a legend that distinguishes between two datasets, labeled \"Llama2\" and \"Llama2 (In-Chat)\". The chart also includes a title and labels for both axes.\n\nThe script uses the matplotlib library to create the chart. It starts by importing the necessary modules and setting up the figure and axis objects. The data for the chart is then defined as two lists of values, one for each dataset. The bars for each dataset are plotted using the `bar` function, with the width parameter set to 0.5 to ensure that the bars do not overlap. The `color` parameter is used to specify the color of each dataset.\n\nThe script also includes several other features to enhance the appearance and readability of the chart. These include setting the limits of the x-axis and y-axis, adding grid lines, and setting the tick labels and label texts. The `xlabel`, `ylabel`, and `title` functions are used to add labels to the axes and a title to the chart.\n\nFinally, the script displays the chart using the `show` function. This allows the user to view the chart and analyze the data presented in the plot.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Set up the figure and axis objects\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data for the chart\nx = [1, 2, 3, 4, 5]\ny1 = [2, 3, 4, 5, 6]\ny2 = [3, 4, 5, 6, 7]\n\n# Plot the bars for each dataset\nax.bar(x, y1, width=0.5, color='blue', label='Llama2')\nax.bar([i + 0.5 for i in x], y2, width=0.5, color='orange', label='Llama2 (In-Chat)')\n\n# Set the limits of the x-axis and y-axis\nax.set_xlim(0, 6)\nax.set_ylim(0, 8)\n\n# Add grid lines\nax.grid(True)\n\n# Set the tick labels and label texts\nax.set_xticks([i + 0.25 for i in x])\nax.set_xticklabels(x)\nax.set_xlabel('Number of examples')\nax.set_ylabel('logP(CL)')\nax.set_title('Comparison of Llama2 and Llama2 (In-Chat)')\n\n# Add a legend\nax.legend()\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nefficiency = [0.8, 0.4, 0.2]\ncomfort = [0.6, 0.4, 0.2]\nsafety = [0.8, 0.4, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(efficiency, 'b-', label='Without Memory')\nax.plot(comfort, 'b-')\nax.plot(safety, 'b-')\n\nax.plot(efficiency, 'o', color='orange', markersize=10)\nax.plot(comfort, 'o', color='orange', markersize=10)\nax.plot(safety, 'o', color='orange', markersize=10)\n\n# Set the title and labels\nax.set_title('Comparison of Scores with and without Memory')\nax.set_xlabel('Score')\nax.set_ylabel('Category')\n\n# Set the y-axis limits\nax.set_ylim(0, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Efficiency', 'Comfort', 'Safety'])\n\n# Set the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nefficiency = [0.4, 0.5, 0.3]\ncomfort = [0.7, 0.8, 0.6]\nsafety = [0.9, 0.8, 0.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.bar(range(3), efficiency, color='pink', label='Without Memory')\nax.bar(range(3), comfort, bottom=efficiency, color='blue', label='With Memory')\nax.bar(range(3), safety, bottom=[sum(x) for x in zip(efficiency, comfort)], color='pink')\n\n# Set the title and labels\nax.set_title('Bar Chart with Multiple Stacked Bars')\nax.set_xlabel('Categories')\nax.set_ylabel('Score')\n\n# Set the x-axis tick labels\nax.set_xticks(range(3))\nax.set_xticklabels(['Efficiency', 'Comfort', 'Safety'])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\n\"\"\"\nGenerated by https://github.com/xuyxu/image2code\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('X Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Label')\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_color('red')\n\n# Set the color of the x-axis tick marks\nax.spines['top'].set_color('red')\n\n# Set the color of the y-axis tick marks\nax.spines['left'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines['bottom'].set_linewidth(2)\n\n# Set the color of the y-axis tick marks\nax.spines['right'].set_linewidth(2)\n\n# Set the color of the x-axis tick marks\nax.spines"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data for the bar chart\ncategories = ['jTrans', 'PalmTree', 'CLAP']\nvalues = [0.9, 0.8, 0.7]\n\n# Create a bar chart\nbars = ax.bar(categories, values, color='blue')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add text annotations for each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Bar Chart with Annotations')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plot\nx = ['A2', 'B1', 'B2', 'C1', 'C2']\ny = [0.3, 0.4, 0.5, 0.6, 0.7]\ny2 = [0.8, 0.9, 1.0, 1.1, 1.2]\n\n# Plot the data\nax.plot(x, y, label='Teacher-Style')\nax.plot(x, y2, label='Standardize')\n\n# Add stars at specific points\nstars = [(0, 0.3), (1, 0.4), (2, 0.5), (3, 0.6), (4, 0.7)]\nfor i, (x_val, y_val) in enumerate(stars):\n    ax.plot(x_val, y_val, 'y*', markersize=10)\n\n# Set the title and labels\nax.set_title('Comparison of Teacher-Style and Standardize')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 1.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Define the data for the plots\ndata1 = [75, 85]\ndata2 = [65, 75]\n\n# Create the first plot\nax.barh([1, 2], data1, color='pink', height=0.5)\nax.text(75, 1.25, 'Vanilla', va='center')\n\n# Create the second plot\nax.barh([1, 2], data2, color='blue', height=0.5)\nax.text(75, 1.25, 'CoT', va='center')\n\n# Set the y-axis limits and labels\nax.set_ylim(0.5, 2.5)\nax.set_yticks([])\nax.set_xlabel('Accuracy')\n\n# Set the title\nax.set_title('Comparison of Accuracy')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first graph\nx1 = [2, 4, 6, 8, 10]\ny1_group_l0 = [163, 201, 176, 159, 153]\ny1_agis = [97, 97, 95, 109, 97]\n\n# Define the data for the second graph\nx2 = [2, 4, 6, 8, 10]\ny2_group_l0 = [163, 201, 176, 159, 153]\ny2_agis = [97, 97, 95, 109, 97]\n\n# Create a figure and axis for the first graph\nfig, ax1 = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the first graph\nax1.bar(x1, y1_group_l0, color='blue', label='Group l0')\nax1.bar(x1, y1_agis, color='orange', bottom=y1_group_l0, label='AGIS')\n\n# Set the title and labels for the first graph\nax1.set_title('% Decrease in Test MSE vs. FLAM-GL')\nax1.set_xlabel('Number of Features')\nax1.set_ylabel('Percentage')\nax1.legend()\n\n# Create a second axis for the second graph\nax2 = ax1.twinx()\n\n# Plot the second graph\nax2.bar(x2, y2_group_l0, color='blue', alpha=0.5)\nax2.bar(x2, y2_agis, color='orange', bottom=y2_group_l0, alpha=0.5)\n\n# Set the title and labels for the second graph\nax2.set_title('% Decrease in Test MSE vs. EBM-RS')\nax2.set_xlabel('Number of Features')\nax2.set_ylabel('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nlabels = ['Raw', '125Hz', '50Hz', '25Hz', '10Hz']\nvalues = [0.88, 0.85, 0.79, 0.67, 0.57]\npearson_r_values = [0.18, 0.19, 0.18, 0.16, 0.16]\neer_values = [3.33, 3.33, 10.67, 16.95, 29.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(labels, values, color='blue')\n\n# Add text annotations for Pearson R and EER values\nfor bar, pr, eer in zip(bars, pearson_r_values, eer_values):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'Pearson R: {pr:.2f}\\nEER (%): {eer:.2f}', ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('KCC')\nax.set_xlabel('Decimated Sampling Rate')\nax.set_ylabel('KCC')\n\n# Set the y-axis limits\nax.set_ylim(0, 1.1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\n\"\"\"\nGenerated by runmlp.py\n\"\"\"\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.axis('off')\n\n# Create a grid of subplots\ngrid = ax.grid(False)\n\n# Add text to the image\ntext = \"Distribution of Grades: Class 1\\nDistribution of Grades: Class 2\\nDistribution of Grades: Class 3\\nDistribution of Grades: Class 4\"\nax.text(0.5, 0.5, text, ha='center', va='center', fontsize=12)\n\nplt.show()\n```"}
