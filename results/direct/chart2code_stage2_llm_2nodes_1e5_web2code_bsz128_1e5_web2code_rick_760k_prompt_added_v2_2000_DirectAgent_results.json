{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Data for plotting\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nz = np.cos(x)\n\n# Plotting\nax.plot(x, y, z, 'b-')\nax.scatter(x, y, z, c='r', marker='o')\n\n# Labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\nax.set_zlabel('Phase')\nax.set_title('Signal Waveform')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [0.5, 1.5, 2.5, 3.5]\ny = [0.5, 1.5, 2.5, 3.5]\nz = [0.5, 1.5, 2.5, 3.5]\ndx = dy = dz = 0.5\n\n# Plot the data points\nax.bar3d(x, y, z, dx, dy, dz, color='r')\n\n# Set the labels and title\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\nax.set_title('3D Bar Chart of Product Counts')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the sphere\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 10 * np.outer(np.cos(u), np.sin(v))\ny = 10 * np.outer(np.sin(u), np.sin(v))\nz = 10 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Plot the sphere\nax.plot_surface(x, y, z, color='magenta')\n\n# Set the limits of the axes\nax.set_xlim(-15, 15)\nax.set_ylim(-15, 15)\nax.set_zlim(-15, 15)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Data for plotting\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = x**2 + y**2\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, color='b', alpha=0.5)\n\n# Scatter plot of points\npoints = np.array([[-4, -2, 10], [-2, 0, 15], [0, 2, 20], [2, 4, 25]])\nax.scatter(points[:,0], points[:,1], points[:,2], c='r')\n\n# Labels and title\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\nax.set_title('3D Plot of Gas Volume vs Temperature and Pressure')\n\n# Show legend\nplt.legend(['Discrete Points', 'Fit Line'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = ['2010', '2012', '2014', '2016', '2018']\nprivate_schools = [0.3, 0.5, 0.7, 0.9, 0.8]\npublic_schools = [0.4, 0.6, 0.8, 0.9, 0.7]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nfor i in range(len(years)):\n    ax.bar([i], private_schools[i], zs=i, zdir='y', color='b', alpha=0.8)\n    ax.bar([i], public_schools[i], zs=i, zdir='y', color='r', alpha=0.8)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a scatter plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.scatter(x, y)\n\n# Set the title and labels\nax.set_title('Vaccination Incidence Rate')\nax.set_xlabel('Age')\nax.set_ylabel('Incidence Rate')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('Global AI Investment')\nax.set_xlabel('Year')\nax.set_ylabel('Investment (Billion USD)')\nyears = [2010, 2012, 2014, 2016, 2018]\ninvestment = [3, 5, 7, 9, 11]\nax.plot(years, investment, 'b-')\n\n# Create a figure and axis for the second subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('AI Adoption Rate')\nax.set_xlabel('Time Since Introduction (Years)')\nax.set_ylabel('Adoption Rate (%)')\ntime_since_introduction = np.linspace(0, 10, 100)\nadoption_rate = np.sin(time_since_introduction)\nax.plot(time_since_introduction, adoption_rate, 'r-')\n\n# Create a figure and axis for the third subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('AI Technology Level')\nax.set_xlabel('Technology Level')\nax.set_ylabel('Adoption Rate (%)')\ntechnology_level = np.linspace(0, 10, 100)\nadoption_rate = np.cos(technology_level)\nax.plot(technology_level, adoption_rate, 'g-')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure and a 3D subplot\nfig = plt.figure(figsize=(10.0, 7.0))\nax1 = fig.add_subplot(121, projection='3d')\nax2 = fig.add_subplot(122, projection='3d')\n\n# Define the grid of points\nx = np.linspace(-1.0, 1.0, 100)\ny = np.linspace(-1.0, 1.0, 100)\nx, y = np.meshgrid(x, y)\n\n# Define the function f(x,y)\nf = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the function f(x,y)\nax1.plot_surface(x, y, f, cmap='viridis')\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.set_zlabel('f(x,y)')\nax1.set_title('f(x)')\n\n# Define the solution g(x,y)\ng = np.cos(np.sqrt(x**2 + y**2))\n\n# Plot the solution g(x,y)\nax2.plot_surface(x, y, g, cmap='plasma')\nax2.set_xlabel('x')\nax2.set_ylabel('y')\nax2.set_zlabel('g(x,y)')\nax2.set_title('solution')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the data\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set the title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T = 6')\n\n# Set the labels for the axes\nax.set_xlabel('t')\nax.set_ylabel('tau')\nax.set_zlabel('accuracy (%)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\nfig = plt.figure(figsize=(15.0, 10.0))\nax1 = fig.add_subplot(2, 2, 1, projection='3d')\nax2 = fig.add_subplot(2, 2, 2, projection='3d')\nax3 = fig.add_subplot(2, 2, 3, projection='3d')\nax4 = fig.add_subplot(2, 2, 4, projection='3d')\n\n# Data for plotting\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\nz1 = np.sin(np.sqrt(x**2 + y**2))\nz2 = np.cos(np.sqrt(x**2 + y**2))\nz3 = np.tan(np.sqrt(x**2 + y**2))\nz4 = np.exp(-(x**2 + y**2))\n\n# Plotting\nax1.plot_surface(x, y, z1, cmap='viridis')\nax2.plot_surface(x, y, z2, cmap='plasma')\nax3.plot_surface(x, y, z3, cmap='inferno')\nax4.plot_surface(x, y, z4, cmap='magma')\n\n# Labels\nax1.set_xlabel('m')\nax1.set_ylabel('n')\nax1.set_zlabel('FREEDOM')\nax1.set_title('Origin')\n\nax2.set_xlabel('m')\nax2.set_ylabel('n')\nax2.set_zlabel('MG (ours)')\nax2.set_title('MG (ours)')\n\nax3.set_xlabel('m')\nax3.set_ylabel('n')\nax3.set_zlabel('BM3')\nax3.set_title('Origin')\n\nax4.set_xlabel('m')\nax4.set_ylabel('n')\nax4.set_zlabel('MG (ours)')\nax4.set_title('MG (ours)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_patch(rectangle)\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.2, color='red')\nax.add_artist(circle)\n\n# Draw a line\nline, = ax.plot([0.1, 0.9], [0.1, 0.9], 'g-')\n\n# Add a legend\nax.legend(['Rectangle', 'Circle', 'Line'])\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure and a 3D subplot\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the grid of points\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\n\n# Define the z values as a function of x and y\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm', linewidth=0, antialiased=False)\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels for the axes\nax.set_xlabel('Bus')\nax.set_ylabel('Time')\nax.set_zlabel('Price')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a colormap\ncmap = plt.get_cmap('hot')\n\n# Create a colorbar\ncbar = fig.colorbar(cmap, ax=ax)\n\n# Set the limits of the colorbar\ncbar.set_clim(0, 12)\n\n# Set the ticks of the colorbar\ncbar.set_ticks([2, 4, 6, 8, 10, 12])\n\n# Set the labels of the colorbar\ncbar.set_ticklabels(['2', '4', '6', '8', '10', '12'])\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([15, 25, 35, 45, 55])\nz = np.array([10, 20, 30, 40, 50])\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Set the labels for the axes\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\ntime = np.linspace(0, 100, 100)\ndepth = 20 * np.sin(time / 10)\ntemperature = 30 * np.cos(time / 10)\npressure = 50 * np.tan(time / 10)\n\n# Plot the data\nax.plot(time, depth, 'r-')\nax.plot(time, temperature, 'b-')\nax.plot(time, pressure, 'g-')\n\n# Set the labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Depth (m)')\nax.set_title('Submarine Depth and Temperature')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis label\nax.set_xlabel('LR Test')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the title of the plot\nax.set_title('Histogram of LR Test')\n\n# Create a histogram with 50 bins\nx = np.random.normal(loc=0, scale=1, size=1000)\nax.hist(x, bins=50, color='blue', alpha=0.75)\n\n# Create a scatter plot with 100 points\nx = np.random.normal(loc=0, scale=1, size=100)\ny = np.random.normal(loc=0, scale=1, size=100)\nax.scatter(x, y, color='red', alpha=0.5)\n\n# Create a line plot with 100 points\nx = np.linspace(-20, 20, 100)\ny = np.sin(x)\nax.plot(x, y, color='green', linestyle='--')\n\n# Create a bar chart with 10 bars\nx = np.arange(10)\ny = np.random.randint(0, 10, size=10)\nax.bar(x, y, color='orange')\n\n# Create a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, labels=x, colors=['blue', 'red', 'green'])\n\n# Create a heatmap with 10x10 grid\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a rectangle for the severity bar\nseverity_bar = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(severity_bar)\n\n# Create a rectangle for the correlation bar\ncorrelation_bar = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(correlation_bar)\n\n# Create a scatter plot for the data points\nx = np.random.randint(150, 400, 20)\ny = np.random.randint(-6, 0, 20)\nax.scatter(x, y, c='green')\n\n# Create a line plot for the trend line\ntrend_line = np.linspace(-6, 0, 100)\nax.plot(trend_line, trend_line, 'k-')\n\n# Set the labels and title\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\nax.set_title('Risk Assessment Model')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data\nx = np.linspace(-3, 0, 100)\ny = np.log(x**2 + 1)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Add a rectangle for the background\nrect = plt.Rectangle((0, 0), 1, 1, fc='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a text annotation\nax.text(0.5, 0.5, 'Correlation: -0.47', ha='center', va='center', transform=ax.transAxes)\n\n# Set the limits of the axes\nax.set_xlim(-3, 0)\nax.set_ylim(-3, 0)\n\n# Set the labels of the axes\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightpink')\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Avg. Top-5 Persistence of 1D')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 5)\n\n# Set the x-axis ticks\nax.set_xticks([0.0, 0.2, 0.4, 0.6, 0.8])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=45)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', labelcolor='purple')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the title of the graph\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Set the x-axis label\nax.set_xlabel('Tasks')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Define the tasks\ntasks = ['snarks', 'navigate', 'question_selection', 'object_counting']\n\n# Define the scores\nscores = [7.2, 7.8, 7.6, 7.4]\n\n# Define the colors for each task\ncolors = ['blue', 'green', 'red', 'purple']\n\n# Plot the scores\nfor i, score in enumerate(scores):\n    ax.plot([i, i], [score, score], color=colors[i])\n\n# Add the task names to the x-axis\nax.set_xticks(range(len(tasks)))\nax.set_xticklabels(tasks)\n\n# Add the colored rectangles for each task\nfor i, task in enumerate(tasks):\n    ax.add_patch(plt.Rectangle((i - 0.4, 0), 0.8, 1, color=colors[i]))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Create a rectangle for the temperature scale\ntemp_scale = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(temp_scale)\n\n# Create a rectangle for the device scale\ndev_scale = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(dev_scale)\n\n# Create a rectangle for the time scale\ntime_scale = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(time_scale)\n\n# Create a rectangle for the count scale\ncount_scale = plt.Rectangle((0, 0), 1, 1, color='purple')\nax.add_patch(count_scale)\n\n# Create a rectangle for the temperature data\ntemp_data = plt.Rectangle((0, 0), 1, 1, color='pink')\nax.add_patch(temp_data)\n\n# Create a rectangle for the device data\ndev_data = plt.Rectangle((0, 0), 1, 1, color='cyan')\nax.add_patch(dev_data)\n\n# Create a rectangle for the time data\ntime_data = plt.Rectangle((0, 0), 1, 1, color='orange')\nax.add_patch(time_data)\n\n# Create a rectangle for the count data\ncount_data = plt.Rectangle((0, 0), 1, 1, color='yellow')\nax.add_patch(count_data)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a pie chart\nax.pie([23.7, 73.3, 3.0, 1.0], labels=[\"Same\", \"Incomparable\", \"Different\", \"Uncomparable\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a scatter plot\nscatter = ax.scatter(np.random.rand(10), np.random.rand(10), color='red')\n\n# Create a bar chart\nbar = ax.bar(['A', 'B', 'C'], [10, 20, 30], color='green')\n\n# Create a pie chart\npie = ax.pie([10, 20, 30], colors=['blue', 'green', 'red'])\n\n# Create a histogram\nhist = ax.hist(np.random.randn(100), bins=10, color='purple')\n\n# Create a line plot\nline = ax.plot([1, 2, 3, 4, 5], [1, 4, 9, 16, 25], color='orange')\n\n# Add a title\nax.set_title('My Plot')\n\n# Add labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [2008, 2009, 2010, 2011, 2012]\ny = [63.64, 80.08, 84.27, 90.11, 95.00]\n\n# Data for the second graph\nx1 = [2008, 2009, 2010, 2011, 2012]\ny1 = [75.00, 87.20, 89.12, 93.89, 95.00]\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting the first graph\naxs[0].plot(x, y, 'b-')\naxs[0].set_title('Average Recall Scores by Method')\naxs[0].set_xlabel('Year')\naxs[0].set_ylabel('Scores')\naxs[0].scatter(x, y, c='r', marker='o')\n\n# Plotting the second graph\naxs[1].plot(x1, y1, 'r-')\naxs[1].set_title('Average F1 Scores by Method')\naxs[1].set_xlabel('Year')\naxs[1].set_ylabel('Scores')\naxs[1].scatter(x1, y1, c='r', marker='o')\n\n# Setting the color of the background\nfig.patch.set_facecolor('#ADD8E6')\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 32)\n\n# Set the y-axis limits\nax.set_ylim(80, 96)\n\n# Set the x-axis label\nax.set_xlabel('Few-Shot K')\n\n# Set the y-axis label\nax.set_ylabel('Micro F1')\n\n# Create a scatter plot of the data points\nx = np.array([4, 8, 12, 16, 20, 24, 28, 32])\ny = np.array([85, 87, 89, 91, 93, 95, 97, 99])\nax.scatter(x, y, color='blue')\n\n# Create a line plot of the data points\nax.plot(x, y, color='blue')\n\n# Create a shaded rectangle\nax.add_patch(plt.Rectangle((4, 80), 28, 16, color='lightblue', alpha=0.5))\n\n# Add a legend\nlegend_elements = [Line2D([0], [0], marker='o', color='w', label='Trained w Few-Shot Ex', markerfacecolor='blue', markersize=10),\n                  Line2D([0], [0], marker='o', color='w', label='Def Deduc+Ex Gen', markerfacecolor='red', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [10, 20, 30, 40, 50]\ny = [60, 62, 65, 70, 75]\ncar_names = ['Car A', 'Car B', 'Car C', 'Car D', 'Car E']\ncar_colors = ['red', 'blue', 'green', 'yellow', 'purple']\n\n# Plot\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\nax.plot(x, y, 'ro-')\nfor i, txt in enumerate(car_names):\n    ax.annotate(txt, (x[i], y[i]))\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\nax.set_title('Car Efficiency vs Vehicle Parameter Size')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=car_names[i], markerfacecolor=car_colors[i]) for i in range(len(car_names))]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Display\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [16, 12, 12, 20, 12, 10]\ntrends = ['Simple Trend', 'Simple', 'Complex', 'Code']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\nax.plot(models, success_rates, marker='o', linestyle='-', color='purple')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Add colored rectangles for each model\nfor i, model in enumerate(models):\n    ax.add_patch(plt.Rectangle((i, 0), 1, success_rates[i], color=trends[i % len(trends)]))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Set the x-axis label\nax.set_xlabel('Redicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Create a scatter plot\nax.scatter(np.random.rand(50), np.random.rand(50), color='orange')\n\n# Create a line plot\nax.plot(np.linspace(0, 1, 100), np.linspace(0, 1, 100), color='black')\n\n# Add a rectangle for subgroups\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.6, 0.2, color='pink'))\n\n# Add a text box for calibration curve\nax.text(0.1, 0.9, 'Calibration curve', fontsize=12, color='black')\n\n# Add a text box for subgroups\nax.text(0.3, 0.7, 'Subgroups', fontsize=12, color='black')\n\n# Add a text box for legend\nax.text(0.1, 0.6, 'Legend', fontsize=12, color='black')\n\n# Add a text box for legend\nax.text(0.1, 0.5, 'Legend', fontsize=12, color='black')\n\n# Add a text box for legend\nax.text(0.1, 0.4, 'Legend', fontsize=12, color='black')\n\n# Add a text box for legend\nax.text(0.1, 0.3, 'Legend', fontsize=12, color='black')\n\n# Add a text box for legend\nax.text(0.1, 0.2, 'Legend', fontsize=12, color='black')\n\n# Add a text box for legend\nax.text(0.1, 0.1, 'Legend', fontsize=12, color='black')\n\n# Add a text box for legend\nax.text(0.1, 0.0, 'Legend', fontsize=12, color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a circle for the logo\ncircle = plt.Circle((3, 2), 1, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle for the model name\nrect = plt.Rectangle((2, 1), 2, 1, color='green')\nax.add_artist(rect)\n\n# Create a rectangle for the model description\nrect = plt.Rectangle((2, 0), 2, 1, color='orange')\nax.add_artist(rect)\n\n# Create a rectangle for the model price\nrect = plt.Rectangle((2, -1), 2, 1, color='yellow')\nax.add_artist(rect)\n\n# Create a rectangle for the model rating\nrect = plt.Rectangle((2, -2), 2, 1, color='red')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -3), 2, 1, color='purple')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -4), 2, 1, color='cyan')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -5), 2, 1, color='magenta')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -6), 2, 1, color='brown')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -7), 2, 1, color='pink')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -8), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -9), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -10), 2, 1, color='lime')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -11), 2, 1, color='navy')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -12), 2, 1, color='olive')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -13), 2, 1, color='indigo')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -14), 2, 1, color='violet')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -15), 2, 1, color='maroon')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -16), 2, 1, color='teal')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -17), 2, 1, color='crimson')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -18), 2, 1, color='slategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -19), 2, 1, color='darkorange')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -20), 2, 1, color='darkgreen')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -21), 2, 1, color='darkblue')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -22), 2, 1, color='darkred')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -23), 2, 1, color='darkcyan')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -24), 2, 1, color='darkmagenta')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -25), 2, 1, color='darkviolet')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -26), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -27), 2, 1, color='darkcrimson')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -28), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -29), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -30), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -31), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -32), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -33), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -34), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -35), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -36), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -37), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -38), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -39), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -40), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -41), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -42), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -43), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -44), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -45), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -46), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -47), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -48), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -49), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -50), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -51), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -52), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -53), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -54), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -55), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -56), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -57), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -58), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -59), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -60), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -61), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -62), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -63), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -64), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -65), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -66), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -67), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -68), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -69), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -70), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -71), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -72), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -73), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -74), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -75), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -76), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -77), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -78), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -79), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -80), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -81), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -82), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -83), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -84), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -85), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -86), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -87), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -88), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -89), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -90), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -91), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -92), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -93), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -94), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -95), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -96), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -97), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -98), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -99), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -100), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model ratings\nrect = plt.Rectangle((2, -101), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model prices\nrect = plt.Rectangle((2, -102), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -103), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -104), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -105), 2, 1, color='darkslategray')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'b-')\nax.set_title('Total')\nax.set_xlabel('Daily reward (Ether)')\nax.set_ylabel('Probability')\n\n# Create a figure and axis for the second subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'g-')\nax.set_title('Proposer')\nax.set_xlabel('Daily reward (Ether)')\nax.set_ylabel('Probability')\n\n# Create a figure and axis for the third subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'r-')\nax.set_title('Sync committee member')\nax.set_xlabel('Daily reward (Ether)')\nax.set_ylabel('Probability')\n\n# Create a figure and axis for the fourth subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'y-')\nax.set_title('Attestor')\nax.set_xlabel('Daily reward (Ether)')\nax.set_ylabel('Probability')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntrainable_sizes = [0, 50, 100, 150]\nrmse_values = [1.30, 1.27, 1.28, 1.29]\nattn_values = [1.30, 1.21, 1.22, 1.23]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\nax.plot(trainable_sizes, rmse_values, 'r-', label='RMSE')\nax.plot(trainable_sizes, attn_values, 'b-', label='Attention')\n\n# Markers for each point\nfor i, txt in enumerate(rmse_values):\n    ax.annotate(txt, (trainable_sizes[i], rmse_values[i]))\nfor i, txt in enumerate(attn_values):\n    ax.annotate(txt, (trainable_sizes[i], attn_values[i]))\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\n\n# Title\nax.set_title('LlaSMol')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(40, 160)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.1)\n\n# Set the x-axis label\nax.set_xlabel('Execution Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Distribution')\n\n# Set the title of the plot\nax.set_title('Execution Time Distribution')\n\n# Create a scatter plot for each dataset\nax.scatter([40, 60, 80, 100, 120, 140, 160], [0.05, 0.07, 0.09, 0.11, 0.13, 0.15, 0.17], color='red', label='Dataset 1')\nax.scatter([40, 60, 80, 100, 120, 140, 160], [0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18], color='orange', label='Dataset 2')\nax.scatter([40, 60, 80, 100, 120, 140, 160], [0.07, 0.09, 0.11, 0.13, 0.15, 0.17, 0.19], color='blue', label='Dataset 3')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nyears = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x20', '60x20']\nmakespan = [18, 14, 13, 12, 9, 7, 5]\nimprovement = [0, 0, 0, 0, 0, 0, 5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the makespan data\nax.plot(years, makespan, color='red')\n\n# Plot the improvement data\nax.plot(years, improvement, color='blue')\n\n# Set the title of the plot\nax.set_title('Makespan and Improvement over Time')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Instance Size')\nax.set_ylabel('Makespan (step) / Improvement (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Algorithm Performance')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Create a scatter plot for SEAC\nax.scatter([1, 2, 3], [1, 2, 3], color='green', label='SEAC')\n\n# Create a scatter plot for CTCO\nax.scatter([1, 2, 3], [2, 3, 4], color='orange', label='CTCO')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Time to Market')\n\n# Set the x-axis label\nax.set_xlabel('Product')\n\n# Set the y-axis label\nax.set_ylabel('Time (Days)')\n\n# Define the products and their time to market\nproducts = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\ntime_to_market = [85, 95, 75, 65]\n\n# Plot the data\nax.plot(products, time_to_market, marker='o')\n\n# Add a legend\nax.legend(['Time to Market'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Era')\n\n# Set the x-axis label\nax.set_xlabel('Density')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Create a rectangle for the first era\nrect1 = plt.Rectangle((0.05, 0.9), 0.2, 0.1, color='blue')\nax.add_patch(rect1)\n\n# Create a rectangle for the second era\nrect2 = plt.Rectangle((0.35, 0.8), 0.2, 0.1, color='orange')\nax.add_patch(rect2)\n\n# Create a rectangle for the third era\nrect3 = plt.Rectangle((0.65, 0.7), 0.2, 0.1, color='green')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth era\nrect4 = plt.Rectangle((0.95, 0.6), 0.2, 0.1, color='red')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth era\nrect5 = plt.Rectangle((0.25, 0.5), 0.2, 0.1, color='purple')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth era\nrect6 = plt.Rectangle((0.55, 0.4), 0.2, 0.1, color='brown')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh era\nrect7 = plt.Rectangle((0.85, 0.3), 0.2, 0.1, color='cyan')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth era\nrect8 = plt.Rectangle((0.15, 0.2), 0.2, 0.1, color='magenta')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth era\nrect9 = plt.Rectangle((0.45, 0.1), 0.2, 0.1, color='yellow')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth era\nrect10 = plt.Rectangle((0.75, 0), 0.2, 0.1, color='black')\nax.add_patch(rect10)\n\n# Create a rectangle for the eleventh era\nrect11 = plt.Rectangle((0.05, 0.9), 0.2, 0.1, color='white')\nax.add_patch(rect11)\n\n# Create a rectangle for the twelfth era\nrect12 = plt.Rectangle((0.35, 0.8), 0.2, 0.1, color='gray')\nax.add_patch(rect12)\n\n# Create a rectangle for the thirteenth era\nrect13 = plt.Rectangle((0.65, 0.7), 0.2, 0.1, color='silver')\nax.add_patch(rect13)\n\n# Create a rectangle for the fourteenth era\nrect14 = plt.Rectangle((0.95, 0.6), 0.2, 0.1, color='gold')\nax.add_patch(rect14)\n\n# Create a rectangle for the fifteenth era\nrect15 = plt.Rectangle((0.25, 0.5), 0.2, 0.1, color='pink')\nax.add_patch(rect15)\n\n# Create a rectangle for the sixteenth era\nrect16 = plt.Rectangle((0.55, 0.4), 0.2, 0.1, color='lime')\nax.add_patch(rect16)\n\n# Create a rectangle for the seventeenth era\nrect17 = plt.Rectangle((0.85, 0.3), 0.2, 0.1, color='navy')\nax.add_patch(rect17)\n\n# Create a rectangle for the eighteenth era\nrect18 = plt.Rectangle((0.15, 0.2), 0.2, 0.1, color='maroon')\nax.add_patch(rect18)\n\n# Create a rectangle for the nineteenth era\nrect19 = plt.Rectangle((0.45, 0.1), 0.2, 0.1, color='olive')\nax.add_patch(rect19)\n\n# Create a rectangle for the twentieth era\nrect20 = plt.Rectangle((0.75, 0), 0.2, 0.1, color='teal')\nax.add_patch(rect20)\n\n# Create a rectangle for the twenty-first era\nrect21 = plt.Rectangle((0.05, 0.9), 0.2, 0.1, color='coral')\nax.add_patch(rect21)\n\n# Create a rectangle for the twenty-second era\nrect22 = plt.Rectangle((0.35, 0.8), 0.2, 0.1, color='azure')\nax.add_patch(rect22)\n\n# Create a rectangle for the twenty-third era\nrect23 = plt.Rectangle((0.65, 0.7), 0.2, 0.1, color='chartreuse')\nax.add_patch(rect23)\n\n# Create a rectangle for the twenty-fourth era\nrect24 = plt.Rectangle((0.95, 0.6), 0.2, 0.1, color='crimson')\nax.add_patch(rect24)\n\n# Create a rectangle for the twenty-fifth era\nrect25 = plt.Rectangle((0.25, 0.5), 0.2, 0.1, color='cyan')\nax.add_patch(rect25)\n\n# Create a rectangle for the twenty-sixth era\nrect26 = plt.Rectangle((0.55, 0.4), 0.2, 0.1, color='darkblue')\nax.add_patch(rect26)\n\n# Create a rectangle for the twenty-seventh era\nrect27 = plt.Rectangle((0.85, 0.3), 0.2, 0.1, color='darkgreen')\nax.add_patch(rect27)\n\n# Create a rectangle for the twenty-eighth era\nrect28 = plt.Rectangle((0.15, 0.2), 0.2, 0.1, color='darkgrey')\nax.add_patch(rect28)\n\n# Create a rectangle for the twenty-ninth era\nrect29 = plt.Rectangle((0.45, 0.1), 0.2, 0.1, color='darkkhaki')\nax.add_patch(rect29)\n\n# Create a rectangle for the thirtieth era\nrect30 = plt.Rectangle((0.75, 0), 0.2, 0.1, color='darkmagenta')\nax.add_patch(rect30)\n\n# Create a rectangle for the thirtieth-first era\nrect31 = plt.Rectangle((0.05, 0.9), 0.2, 0.1, color='darkorange')\nax.add_patch(rect31)\n\n# Create a rectangle for the thirtieth-second era\nrect32 = plt.Rectangle((0.35, 0.8), 0.2, 0.1, color='darkred')\nax.add_patch(rect32)\n\n# Create a rectangle for the thirtieth-third era\nrect33 = plt.Rectangle((0.65, 0.7), 0.2, 0.1, color='darksalmon')\nax.add_patch(rect33)\n\n# Create a rectangle for the thirtieth-fourth era\nrect34 = plt.Rectangle((0.95, 0.6), 0.2, 0.1, color='darkseagreen')\nax.add_patch(rect34)\n\n# Create a rectangle for the thirtieth-fifth era\nrect35 = plt.Rectangle((0.25, 0.5), 0.2, 0.1, color='darkslateblue')\nax.add_patch(rect35)\n\n# Create a rectangle for the thirtieth-sixth era\nrect36 = plt.Rectangle((0.55, 0.4), 0.2, 0.1, color='darkslategray')\nax.add_patch(rect36)\n\n# Create a rectangle for the thirtieth-seventh era\nrect37 = plt.Rectangle((0.85, 0.3), 0.2, 0.1, color='darkturquoise')\nax.add_patch(rect37)\n\n# Create a rectangle for the thirtieth-eighth era\nrect38 = plt.Rectangle((0.15, 0.2), 0.2, 0.1, color='darkviolet')\nax.add_patch(rect38)\n\n# Create a rectangle for the thirtieth-ninth era\nrect39 = plt.Rectangle((0.45, 0.1), 0.2, 0.1, color='deeppink')\nax.add_patch(rect39)\n\n# Create a rectangle for the thirtieth-tenth era\nrect40 = plt.Rectangle((0.75, 0), 0.2, 0.1, color='deepskyblue')\nax.add_patch(rect40)\n\n# Create a rectangle for the thirtieth-eleventh era\nrect41 = plt.Rectangle((0.05, 0.9), 0.2, 0.1, color='dimgray')\nax.add_patch(rect41)\n\n# Create a rectangle for the thirtieth-twelfth era\nrect42 = plt.Rectangle((0.35, 0.8), 0.2, 0.1, color='dodgerblue')\nax.add_patch(rect42)\n\n# Create a rectangle for the thirtieth-thirteenth era\nrect43 = plt.Rectangle((0.65, 0.7), 0.2, 0.1, color='firebrick')\nax.add_patch(rect43)\n\n# Create a rectangle for the thirtieth-fourteenth era\nrect44 = plt.Rectangle((0.95, 0.6), 0.2, 0.1, color='floralwhite')\nax.add_patch(rect44)\n\n# Create a rectangle for the thirtieth-fifteenth era\nrect45 = plt.Rectangle((0.25, 0.5), 0.2, 0.1, color='forestgreen')\nax.add_patch(rect45)\n\n# Create a rectangle for the thirtieth-sixteenth era\nrect46 = plt.Rectangle((0.55, 0.4), 0.2, 0.1, color='fuchsia')\nax.add_patch(rect46)\n\n# Create a rectangle for the thirtieth-seventeenth era\nrect47 = plt.Rectangle((0.85, 0.3), 0.2, 0.1, color='gainsboro')\nax.add_patch(rect47)\n\n# Create a rectangle for the thirtieth-eighteenth era\nrect48 = plt.Rectangle((0.15, 0.2), 0.2, 0.1, color='ghostwhite')\nax.add_patch(rect48)\n\n# Create a rectangle for the thirtieth-nineteenth era\nrect49 = plt.Rectangle((0.45, 0.1), 0.2, 0.1, color='gold')\nax.add_patch(rect49)\n\n# Create a rectangle for the thirtieth-twentieth era\nrect50 = plt.Rectangle((0.75, 0), 0.2, 0.1, color='goldenrod')\nax.add_patch(rect50)\n\n# Create a rectangle for the thirtieth-twenty-first era\nrect51 = plt.Rectangle((0.05, 0.9), 0.2, 0.1, color='gray')\nax.add_patch(rect51)\n\n# Create a rectangle for the thirtieth-twenty-second era\nrect52 = plt.Rectangle((0.35, 0.8), 0.2, 0.1, color='green')\nax.add_patch(rect52)\n\n# Create a rectangle for the thirtieth-twenty-third era\nrect53 = plt.Rectangle((0.65, 0.7), 0.2, 0.1, color='greenyellow')\nax.add_patch(rect53)\n\n# Create a rectangle for the thirtieth-twenty-fourth era\nrect54 = plt.Rectangle((0.95, 0.6), 0.2, 0.1, color='honeydew')\nax.add_patch(rect54)\n\n# Create a rectangle for the thirtieth-twenty-fifth era\nrect55 = plt.Rectangle((0.25, 0.5), 0.2, 0.1, color='hotpink')\nax.add_patch(rect55)\n\n# Create a rectangle for the thirtieth-twenty-sixth era\nrect56 = plt.Rectangle((0.55, 0.4), 0.2, 0.1, color='indianred')\nax.add_patch(rect56)\n\n# Create a rectangle for the thirtieth-twenty-seventh era\nrect57 = plt.Rectangle((0.85, 0.3), 0.2, 0.1, color='indigo')\nax.add_patch(rect57)\n\n# Create a rectangle for the thirtieth-twenty-eighth era\nrect58 = plt.Rectangle((0.15, 0.2), 0.2, 0.1, color='ivory')\nax.add_patch(rect58)\n\n# Create a rectangle for the thirtieth-twenty-ninth era\nrect59 = plt.Rectangle((0.45, 0.1), 0.2, 0.1, color='khaki')\nax.add_patch(rect59)\n\n# Create a rectangle for the thirtieth-thirtieth era\nrect60 = plt.Rectangle((0.75, 0), 0.2, 0.1, color='lavender')\nax.add_patch(rect60)\n\n# Create a rectangle for the thirtieth-thirtieth-first era\nrect61 = plt.Rectangle((0.05, 0.9), 0.2, 0.1, color='lavenderblush')\nax.add_patch(rect61)\n\n# Create a rectangle for the thirtieth-thirtieth-second era\nrect62 = plt.Rectangle((0.35, 0.8), 0.2, 0.1, color='lawngreen')\nax.add_patch(rect62)\n\n# Create a rectangle for the thirtieth-thirtieth-third era\nrect63 = plt.Rectangle((0.65, 0.7), 0.2, 0.1, color='lemonchiffon')\nax.add_patch(rect63)\n\n# Create a rectangle for the thirtieth-thirtieth-fourth era\nrect64 = plt.Rectangle((0.95, 0.6), 0.2, 0.1, color='lightblue')\nax.add_patch(rect64)\n\n# Create a rectangle for the thirtieth-thirtieth-fifth era\nrect65 = plt.Rectangle((0.25, 0.5), 0.2, 0.1, color='lightcoral')\nax.add_patch(rect65)\n\n# Create a rectangle for the thirtieth-thirtieth-sixth era\nrect66 = plt.Rectangle((0.55, 0.4), 0.2, 0.1, color='lightcyan')\nax.add_patch(rect66)\n\n# Create a rectangle for the thirtieth-thirtieth-seventh era\nrect67 = plt.Rectangle((0.85, 0.3), 0.2, 0.1, color='lightgoldenrodyellow')\nax.add_patch(rect67)\n\n# Create a rectangle for the thirtieth-thirtieth-eighth era\nrect68 = plt.Rectangle((0.15, 0.2), 0.2, 0.1, color='lightgray')\nax.add_patch(rect68)\n\n# Create a rectangle for the thirtieth-thirtieth-ninth era\nrect69 = plt.Rectangle((0.45, 0.1), 0.2, 0.1, color='lightgreen')\nax.add_patch(rect69)\n\n# Create a rectangle for the thirtieth-thirtieth-tenth era\nrect70 = plt.Rectangle((0.75, 0), 0.2, 0.1, color='lightpink')\nax.add_patch(rect70)\n\n# Create a rectangle for the thirtieth-thirtieth-eleventh era\nrect71 = plt.Rectangle((0.05, 0.9), 0.2, 0.1, color='lightsalmon')\nax.add_patch(rect71)\n\n# Create a rectangle for the thirtieth-thirtieth-twelfth era\nrect72 = plt.Rectangle((0.35, 0.8), 0.2, 0.1, color='lightseagreen')\nax.add_patch(rect72)\n\n# Create a rectangle for the thirtieth-thirtieth-thirteenth era\nrect73 = plt.Rectangle((0.65, 0.7), 0.2, 0.1, color='lightskyblue')\nax.add_patch(rect73)\n\n# Create a rectangle for the thirtieth-thirtieth-fourteenth era\nrect74 = plt.Rectangle((0.95, 0.6), 0.2, 0.1, color='lightslategray')\nax.add_patch(rect74)\n\n# Create a rectangle for the thirtieth-thirtieth-fifteenth era\nrect75 = plt.Rectangle((0.25, 0.5), 0.2, 0.1, color='lightsteelblue')\nax.add_patch(rect75)\n\n# Create a rectangle for the thirtieth-thirtieth-sixteenth era\nrect76 = plt.Rectangle((0.55, 0.4), 0.2, 0.1, color='lightyellow')\nax.add_patch(rect76)\n\n# Create a rectangle for the thirtieth-thirtieth-seventeenth era\nrect77 = plt.Rectangle((0.85,"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\ntech = ['Nano', 'Quantum', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\npatents = [20, 10, 40, 30, 60, 70, 90, 80, 50, 120]\nyears = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(years, patents, 'o-')\n\n# Set the title and labels\nax.set_title('Patent Filings in 2013')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Patents')\n\n# Set the color of the lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Technology Field', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the color of the background\nax.set_facecolor('pink')\n\n# Set the title of the graph\nax.set_title('Calibration Curve', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Predicted Probability', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis grid line style\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings = [250, 300, 350, 400]\ngrowth = [10, 20, 30, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the earnings\nax.plot(quarters, earnings, marker='o', linestyle='-', color='red')\n\n# Plot the growth\nax.plot(quarters, growth, marker='o', linestyle='-', color='blue')\n\n# Set the title and labels\nax.set_title('Earnings and Growth Over Time')\nax.set_xlabel('Quarter')\nax.set_ylabel('Earnings ($1000s)')\n\n# Add a legend\nax.legend(['Earnings', 'Growth'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [72, 74, 76, 78, 80, 82, 84, 86, 88, 90]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.plot(x, y, 'k-')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Training Progress')\n\n# Legend\nlegend_elements = [\n    plt.Line2D([0], [0], marker='o', color='w', label='Train sec / img', markerfacecolor='blue', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='Inference GFLOPs', markerfacecolor='orange', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='Param, log10', markerfacecolor='green', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='Train Memory', markerfacecolor='red', markersize=10)\n]\nax.legend(handles=legend_elements)\n\n# Bars\nbars = ['Linear probing', 'BitFit', 'Prompt Tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\nheights = [0.5, 0.7, 0.8, 0.9, 0.95, 0.98]\ncolors = ['blue', 'orange', 'green', 'red', 'blue', 'green']\nfor bar, height, color in zip(bars, heights, colors):\n    ax.bar(bar, height, color=color)\n\n# Accuracy\naccuracy = 82\nax.text(0.5, 85, f'Accuracy, iNaturalist 2021: {accuracy}', ha='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Team Performance')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Sequident')\n\n# Generate random data for the plot\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Plot the data\nax.plot(x, y, 'bo')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Fish Population Data')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Set the x-axis limits\nax.set_xlim(25, 45)\n\n# Set the y-axis limits\nax.set_ylim(-10, 35)\n\n# Add a rectangle for each species\nspecies_rectangles = [\n    (0.1, 0.9, 0.2, 0.1, 'red'),\n    (0.3, 0.7, 0.2, 0.1, 'green'),\n    (0.5, 0.5, 0.2, 0.1, 'blue')\n]\nfor rect in species_rectangles:\n    ax.add_patch(plt.Rectangle(rect[0], rect[1], rect[2], rect[3], color=rect[4]))\n\n# Add a scatter plot for each species\nspecies_scatter_plots = [\n    (0.1, 0.9, 0.2, 0.1, 'red'),\n    (0.3, 0.7, 0.2, 0.1, 'green'),\n    (0.5, 0.5, 0.2, 0.1, 'blue')\n]\nfor scatter in species_scatter_plots:\n    ax.scatter(scatter[0], scatter[1], s=scatter[2]*100, c=scatter[3])\n\n# Add a legend\nax.legend(['teens', 'children', 'adults'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Heart Rate Change Over Time')\nax.set_xlabel('Time (in hours)')\nax.set_ylabel('Heart Rate (in BPM)')\n\n# Add grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('TMS Score vs Sequence ID')\n\n# Set the x-axis label\nax.set_xlabel('TMS Score')\n\n# Set the y-axis label\nax.set_ylabel('Sequence ID')\n\n# Create a scatter plot with random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nax.scatter(x, y, c='blue', s=50)\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.1, 0.9), 0.2, 0.1, color='blue')\nax.add_patch(logo)\n\n# Create a rectangle for the TMS score\ntms_score = plt.Rectangle((0.1, 0.8), 0.2, 0.1, color='red')\nax.add_patch(tms_score)\n\n# Create a rectangle for the sequence ID\nsequence_id = plt.Rectangle((0.1, 0.7), 0.2, 0.1, color='green')\nax.add_patch(sequence_id)\n\n# Create a rectangle for the TMS score\ntms_score = plt.Rectangle((0.1, 0.6), 0.2, 0.1, color='yellow')\nax.add_patch(tms_score)\n\n# Create a rectangle for the sequence ID\nsequence_id = plt.Rectangle((0.1, 0.5), 0.2, 0.1, color='purple')\nax.add_patch(sequence_id)\n\n# Create a rectangle for the TMS score\ntms_score = plt.Rectangle((0.1, 0.4), 0.2, 0.1, color='orange')\nax.add_patch(tms_score)\n\n# Create a rectangle for the sequence ID\nsequence_id = plt.Rectangle((0.1, 0.3), 0.2, 0.1, color='pink')\nax.add_patch(sequence_id)\n\n# Create a rectangle for the TMS score\ntms_score = plt.Rectangle((0.1, 0.2), 0.2, 0.1, color='brown')\nax.add_patch(tms_score)\n\n# Create a rectangle for the sequence ID\nsequence_id = plt.Rectangle((0.1, 0.1), 0.2, 0.1, color='grey')\nax.add_patch(sequence_id)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [4211, 2411, 2141, 1124]\nvalues = [0.9628, 0.9604, 0.9624, 0.9592]\nsums = [0.9641, 0.9641, 0.9624, 0.9561]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(years, values, 'b-o', label='Values')\nax.plot(years, sums, 'r-o', label='Sum (SRCC + PLCC)')\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 3.0))\n\n# Set the title for each subplot\naxs[0, 0].set_title('IIID-1 SDMT')\naxs[0, 1].set_title('NIID-2 SDST')\naxs[1, 0].set_title('NIID-4 UBSDT')\naxs[1, 1].set_title('NIID-5 UBSDST')\n\n# Create a color map for the plots\ncmap = plt.get_cmap('Blues')\n\n# Create a color bar for the plots\ncbar = fig.colorbar(axs[0, 0].imshow(np.random.rand(10, 10), cmap=cmap), ax=axs[:, :])\n\n# Add a legend to the plot\nfig.legend(['Depth', 'Edge', 'Normals', 'Semseg'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Compact Spiral with Elliptical Hollow Center')\n\n# Draw the spiral\ntheta = np.linspace(0, 10*np.pi, 1000)\nr = 5 + 2.5 * np.sin(3*theta)\nax.plot(r * np.cos(theta), r * np.sin(theta), 'b-')\n\n# Draw the hollow center\nax.add_artist(plt.Circle((0, 0), 0.5, color='w'))\n\n# Add the legend\nlegend_elements = [Line2D([0], [0], marker='o', color='w', label='Center', markerfacecolor='k', markersize=10)]\nax.legend(handles=legend_elements)\n\n# Set the axis limits\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Set the axis labels\nax.set_xlabel('X')\nax.set_ylabel('Y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('DAXPY memory bandwidth')\n\n# Set the x-axis label\nax.set_xlabel('Flops/byte')\n\n# Set the y-axis label\nax.set_ylabel('Time (s)')\n\n# Set the x-axis limits\nax.set_xlim(10**-1, 10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**-1, 10**1)\n\n# Set the x-axis ticks\nax.set_xticks([10**-1, 10**0, 10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-1, 10**0, 10**1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^-1', '10^0', '10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-1', '10^0', '10^1'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0.45, 0.75)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis tick labels\nax.set_xticks([0.5, 0.6, 0.7])\n\n# Set the x-axis tick labels\nax.set_yticks([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['f(x) = 0.45', 'f(x) = 0.55', 'f(x) = 0.75'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['+0.01', '+0.02', '+0.03', '+0.04', '+0.05', '+0.06', '+0.07', '+0.08', '+0.09', '+0.1', '+0.11', '+0.12', '+0.13', '+0.14', '+0.15', '+0.16', '+0.17', '+0.18', '+0.19', '+0.2', '+0.21', '+0.22', '+0.23', '+0.24', '+0.25', '+0.26', '+0.27', '+0.28', '+0.29', '+0.3', '+0.31', '+0.32', '+0.33', '+0.34', '+0.35', '+0.36', '+0.37', '+0.38', '+0.39', '+0.4', '+0.41', '+0.42', '+0.43', '+0.44', '+0.45', '+0.46', '+0.47', '+0.48', '+0.49', '+0.5', '+0.51', '+0.52', '+0.53', '+0.54', '+0.55', '+0.56', '+0.57', '+0.58', '+0.59', '+0.6', '+0.61', '+0.62', '+0.63', '+0.64', '+0.65', '+0.66', '+0.67', '+0.68', '+0.69', '+0.7', '+0.71', '+0.72', '+0.73', '+0.74', '+0.75', '+0.76', '+0.77', '+0.78', '+0.79', '+0.8', '+0.81', '+0.82', '+0.83', '+0.84', '+0.85', '+0.86', '+0.87', '+0.88', '+0.89', '+0.9', '+0.91', '+0.92', '+0.93', '+0.94', '+0.95', '+0.96', '+0.97', '+0.98', '+0.99'])\n\n# Set the title of the plot\nax.set_title('Function f(x)')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('f(x)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a circle for the logo\ncircle = plt.Circle((0.5, 0.5), 0.4, color='orange')\nax.add_artist(circle)\n\n# Create a rectangle for the chatbot\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\nax.add_artist(rect)\n\n# Create a rectangle for the age\nage = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink')\nax.add_artist(age)\n\n# Create a rectangle for the gender\ngender = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lightblue')\nax.add_artist(gender)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('CigaR')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Qwen-VR-Max')\n\n# Create a color map for the levels\ncmap = plt.get_cmap('tab20')\n\n# Create a list of colors for each level\ncolors = [cmap(i) for i in range(10)]\n\n# Create a list of labels for each level\nlabels = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\n\n# Create a list of values for each level\nvalues = [10, 20, 30, 40, 50]\n\n# Create a bar chart for each level\nfor i, (label, value) in enumerate(zip(labels, values)):\n    ax.barh(label, value, color=colors[i])\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Level')\n\n# Set the x-axis limits\nax.set_xlim([0, 60])\n\n# Set the y-axis limits\nax.set_ylim([-1, 6])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Generate some data\nx = np.logspace(1, 2, 100)\ny1 = 10**np.random.normal(3, 0.5, 100)\ny2 = 10**np.random.normal(4, 0.5, 100)\n\n# Plot the data\nax.plot(x, y1, 'o-', color='purple')\nax.plot(x, y2, 'o-', color='pink')\n\n# Set the limits and labels\nax.set_xlim(10**1, 10**2)\nax.set_ylim(10**-8, 10**-6)\nax.set_xlabel('number of matvecs m')\nax.set_ylabel('approximation error ||A - A\u0302||F')\n\n# Add a legend\nax.legend(['s = 19', 's = 50'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lightgreen')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.9]], color='lightblue')\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.1], [0.4, 0.3], [0.6, 0.3], [0.5, 0.5], [0.4, 0.7], [0.6, 0.7]], color='lightcoral')\nax.add_artist(star)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Plot the data\nax.plot(x, y1, 'g-')  # Green line for sine wave\nax.plot(x, y2, 'r-')  # Red line for cosine wave\nax.plot(x, y3, 'b-')  # Blue line for tangent wave\nax.plot(x, y4, 'y-')  # Yellow line for exponential wave\nax.plot(x, y5, 'm-')  # Magenta line for logarithmic wave\n\n# Set the limits of the x-axis\nax.set_xlim([0, 100])\n\n# Set the limits of the y-axis\nax.set_ylim([-4, 140])\n\n# Set the title of the plot\nax.set_title('Sine, Cosine, Tangent, Exponential, and Logarithmic Waves')\n\n# Set the labels of the axes\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a color map for the plots\ncmap = plt.cm.viridis\n\n# Create a scatter plot for each sample\nfor i in range(10):\n    x = np.random.rand(10)\n    y = np.random.rand(10)\n    ax.scatter(x, y, c=cmap(i/10), label=f'Sample {i}')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores = [28, 35, 26, 20, 10]\nplayer_a_scores = [28, 20, 22, 20, 28]\nplayer_b_scores = [30, 35, 25, 20, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the scores\nax.bar(games, scores, color='green')\n\n# Plot the player A scores\nax.plot(games, player_a_scores, color='black')\n\n# Plot the player B scores\nax.plot(games, player_b_scores, color='green')\n\n# Set the title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-6, 6, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the title and labels\nax.set_title('Variable 1 vs Variable 2')\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Trustee Scenario')\n\n# Create a bar chart\nbar_width = 0.2\nindex = np.arange(len(['Female Player', 'Male Player', 'LLM Player', 'Person Player']))\nbar1 = ax.bar(index, [5.7, 6.2, 5.2, 3.4], bar_width, label='Trustee Scenario')\nbar2 = ax.bar(index + bar_width, [5.7, 6.2, 5.2, 3.4], bar_width, label='Trustee Scenario')\nbar3 = ax.bar(index + 2*bar_width, [5.7, 6.2, 5.2, 3.4], bar_width, label='Trustee Scenario')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Player Type')\nax.set_ylabel('Average Amount Sent ($)')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(['Female Player', 'Male Player', 'LLM Player', 'Person Player'])\nax.legend()\n\n# Set the color of the bars\nbar1.set_facecolor('blue')\nbar2.set_facecolor('green')\nbar3.set_facecolor('red')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Endurance Race Performance Analysis')\n\n# Create a rectangle for the athlete Jim\nrect1 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect1)\n\n# Create a rectangle for the athlete Bill\nrect2 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect2)\n\n# Create a rectangle for the race interrupted due to weather\nrect3 = plt.Rectangle((0, 0), 10, 10, color='red')\nax.add_patch(rect3)\n\n# Create a rectangle for the running event\nrect4 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect4)\n\n# Create a rectangle for the rest event\nrect5 = plt.Rectangle((0, 0), 10, 10, color='orange')\nax.add_patch(rect5)\n\n# Create a rectangle for the running2 event\nrect6 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect6)\n\n# Create a rectangle for the running2 event\nrect7 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect7)\n\n# Create a rectangle for the running2 event\nrect8 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect8)\n\n# Create a rectangle for the running2 event\nrect9 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect9)\n\n# Create a rectangle for the running2 event\nrect10 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect10)\n\n# Create a rectangle for the running2 event\nrect11 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect11)\n\n# Create a rectangle for the running2 event\nrect12 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect12)\n\n# Create a rectangle for the running2 event\nrect13 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect13)\n\n# Create a rectangle for the running2 event\nrect14 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect14)\n\n# Create a rectangle for the running2 event\nrect15 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect15)\n\n# Create a rectangle for the running2 event\nrect16 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect16)\n\n# Create a rectangle for the running2 event\nrect17 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect17)\n\n# Create a rectangle for the running2 event\nrect18 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect18)\n\n# Create a rectangle for the running2 event\nrect19 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect19)\n\n# Create a rectangle for the running2 event\nrect20 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect20)\n\n# Create a rectangle for the running2 event\nrect21 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect21)\n\n# Create a rectangle for the running2 event\nrect22 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect22)\n\n# Create a rectangle for the running2 event\nrect23 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect23)\n\n# Create a rectangle for the running2 event\nrect24 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect24)\n\n# Create a rectangle for the running2 event\nrect25 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect25)\n\n# Create a rectangle for the running2 event\nrect26 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect26)\n\n# Create a rectangle for the running2 event\nrect27 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect27)\n\n# Create a rectangle for the running2 event\nrect28 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect28)\n\n# Create a rectangle for the running2 event\nrect29 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect29)\n\n# Create a rectangle for the running2 event\nrect30 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect30)\n\n# Create a rectangle for the running2 event\nrect31 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect31)\n\n# Create a rectangle for the running2 event\nrect32 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect32)\n\n# Create a rectangle for the running2 event\nrect33 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect33)\n\n# Create a rectangle for the running2 event\nrect34 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect34)\n\n# Create a rectangle for the running2 event\nrect35 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect35)\n\n# Create a rectangle for the running2 event\nrect36 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect36)\n\n# Create a rectangle for the running2 event\nrect37 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect37)\n\n# Create a rectangle for the running2 event\nrect38 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect38)\n\n# Create a rectangle for the running2 event\nrect39 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect39)\n\n# Create a rectangle for the running2 event\nrect40 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect40)\n\n# Create a rectangle for the running2 event\nrect41 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect41)\n\n# Create a rectangle for the running2 event\nrect42 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect42)\n\n# Create a rectangle for the running2 event\nrect43 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect43)\n\n# Create a rectangle for the running2 event\nrect44 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect44)\n\n# Create a rectangle for the running2 event\nrect45 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect45)\n\n# Create a rectangle for the running2 event\nrect46 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect46)\n\n# Create a rectangle for the running2 event\nrect47 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect47)\n\n# Create a rectangle for the running2 event\nrect48 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect48)\n\n# Create a rectangle for the running2 event\nrect49 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect49)\n\n# Create a rectangle for the running2 event\nrect50 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect50)\n\n# Create a rectangle for the running2 event\nrect51 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect51)\n\n# Create a rectangle for the running2 event\nrect52 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect52)\n\n# Create a rectangle for the running2 event\nrect53 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect53)\n\n# Create a rectangle for the running2 event\nrect54 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect54)\n\n# Create a rectangle for the running2 event\nrect55 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect55)\n\n# Create a rectangle for the running2 event\nrect56 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect56)\n\n# Create a rectangle for the running2 event\nrect57 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect57)\n\n# Create a rectangle for the running2 event\nrect58 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect58)\n\n# Create a rectangle for the running2 event\nrect59 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect59)\n\n# Create a rectangle for the running2 event\nrect60 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect60)\n\n# Create a rectangle for the running2 event\nrect61 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect61)\n\n# Create a rectangle for the running2 event\nrect62 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect62)\n\n# Create a rectangle for the running2 event\nrect63 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect63)\n\n# Create a rectangle for the running2 event\nrect64 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect64)\n\n# Create a rectangle for the running2 event\nrect65 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect65)\n\n# Create a rectangle for the running2 event\nrect66 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect66)\n\n# Create a rectangle for the running2 event\nrect67 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect67)\n\n# Create a rectangle for the running2 event\nrect68 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect68)\n\n# Create a rectangle for the running2 event\nrect69 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect69)\n\n# Create a rectangle for the running2 event\nrect70 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect70)\n\n# Create a rectangle for the running2 event\nrect71 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect71)\n\n# Create a rectangle for the running2 event\nrect72 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect72)\n\n# Create a rectangle for the running2 event\nrect73 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect73)\n\n# Create a rectangle for the running2 event\nrect74 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect74)\n\n# Create a rectangle for the running2 event\nrect75 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect75)\n\n# Create a rectangle for the running2 event\nrect76 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect76)\n\n# Create a rectangle for the running2 event\nrect77 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect77)\n\n# Create a rectangle for the running2 event\nrect78 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect78)\n\n# Create a rectangle for the running2 event\nrect79 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect79)\n\n# Create a rectangle for the running2 event\nrect80 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect80)\n\n# Create a rectangle for the running2 event\nrect81 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect81)\n\n# Create a rectangle for the running2 event\nrect82 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect82)\n\n# Create a rectangle for the running2 event\nrect83 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect83)\n\n# Create a rectangle for the running2 event\nrect84 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect84)\n\n# Create a rectangle for the running2 event\nrect85 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect85)\n\n# Create a rectangle for the running2 event\nrect86 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect86)\n\n# Create a rectangle for the running2 event\nrect87 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect87)\n\n# Create a rectangle for the running2 event\nrect88 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect88)\n\n# Create a rectangle for the running2 event\nrect89 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect89)\n\n# Create a rectangle for the running2 event\nrect90 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect90)\n\n# Create a rectangle for the running2 event\nrect91 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect91)\n\n# Create a rectangle for the running2 event\nrect92 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect92)\n\n# Create a rectangle for the running2 event\nrect93 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect93)\n\n# Create a rectangle for the running2 event\nrect94 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect94)\n\n# Create a rectangle for the running2 event\nrect95 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect95)\n\n# Create a rectangle for the running2 event\nrect96 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect96)\n\n# Create a rectangle for the running2 event\nrect97 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect97)\n\n# Create a rectangle for the running2 event\nrect98 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect98)\n\n# Create a rectangle for the running2 event\nrect99 = plt.Rectangle((0, 0), 10, 10, color='green')\nax.add_patch(rect99)\n\n#"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the title of the plot\nax.set_title('Comparative Distribution of Three Different Groups')\n\n# Set the x and y labels\nax.set_xlabel('Number of Observations')\nax.set_ylabel('Value Range')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [-150, -50, -120, 0, -100, -75, -135, -50, -300]\ny = [350, 150, 900, 1000, 200, 75, 1200, 50, 700]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(x, y, 'k-')\nax.set_xlim(-150, 0)\nax.set_ylim(700, 1300)\nax.set_xlabel('Time (s)')\nax.set_ylabel('Waterfall Height (m)')\nax.grid(True)\n\n# Bar chart\nbar_width = 20\nbar_positions = range(len(x))\nbar_heights = [100, 50, 150, 200, 100, 50, 150, 200, 100]\nbar_colors = ['green', 'red', 'green', 'red', 'green', 'red', 'green', 'red', 'green']\nax.bar(bar_positions, bar_heights, width=bar_width, color=bar_colors)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-1, 1, 100)\ny = np.sin(2 * np.pi * x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0])\n\n# Set the colorbar ticks\ncbar.set_ticks([-1, -0.5, 0, 0.5, 1])\n\n# Set the colorbar tick labels\ncbar.set_ticklabels(['-1.0', '-0.5', '0.0', '0.5', '1.0'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Create a grid of images\nimages = [\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10)\n]\n\n# Display the images\nfor i, img in enumerate(images):\n    ax.imshow(img, cmap='hot', interpolation='nearest')\n    ax.text(0.5, 0.5, 'nearest', ha='center', va='center', color='white')\n\n# Set the x and y limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Set the x and y ticks\nax.set_xticks(np.arange(-4, 5, 1))\nax.set_yticks(np.arange(-4, 5, 1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n# Data for the second graph\nx2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(x1, y1, 'b-')\nax.plot(x2, y2, 'r-')\n\n# Set the title and labels\nax.set_title('Flickr30k')\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x (m)')\n\n# Set the y-axis label\nax.set_ylabel('y (m)')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Create a rectangle for the legend\nlegend_rect = plt.Rectangle((0, 0), 1, 1, fc='w', fill=False, edgecolor='none', linewidth=0)\n\n# Add the legend to the plot\nax.legend([legend_rect], ['Monte Carlo', '\u00b1 3-\u03c3 of Prediction', 'Mean-Taylor'], loc='upper left')\n\n# Create a line plot\nax.plot([0, 25], [0, 30], 'r-', lw=2)\n\n# Create a scatter plot\nax.scatter([0, 5, 10, 15, 20, 25], [0, 5, 10, 15, 20, 25], c='b', s=50)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\nax.add_artist(circle)\n\n# Create a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green', fill=False)\nax.add_artist(rectangle)\n\n# Create a triangle\ntriangle = plt.Polygon([[0.1, 0.1], [0.9, 0.1], [0.5, 0.9]], color='red', fill=False)\nax.add_artist(triangle)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the color map for the plot\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of values for the x and y axes\nx = np.linspace(0, 2, 100)\ny = np.linspace(0, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Compute the z values using a simple function\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap=cmap)\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set the title of the plot\nax.set_title('3D Surface Plot')\n\n# Set the labels for the x and y axes\nax.set_xlabel('\u03b1')\nax.set_ylabel('\u03b2')\nax.set_zlabel('\u0394t')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Create a scatter plot for the second subplot\nax2.scatter(np.random.rand(50), np.random.rand(50), color='red')\n\n# Set the title of the second subplot\nax2.set_title('User preference matrix (M)')\n\n# Create a scatter plot for the first subplot\nax.scatter(np.random.rand(50), np.random.rand(50), color='blue')\n\n# Set the title of the first subplot\nax.set_title('Utility distribution per topic')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(-2, 4)\n\n# Set the y-axis limits\nax.set_ylim(-2, 4)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(-2, 5, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(-2, 5, 1))\n\n# Set the x-axis labels\nax.set_xticklabels(['-2', '-1', '0', '1', '2', '3', '4'])\n\n# Set the y-axis labels\nax.set_yticklabels(['-2', '-1', '0', '1', '2', '3', '4'])\n\n# Set the title of the plot\nax.set_title('Reactive-2 Payoff')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'num. of points = 5', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Create a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Set the x and y labels\nax.set_xlabel('Permeability Reduction')\nax.set_ylabel('Porosity')\n\n# Set the limits of the x and y axes\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-40, 1)\nax.set_ylim(-5, 6)\n\n# Draw a rectangle representing the plot area\nrect = plt.Rectangle((-40, -5), 41, 11, facecolor='lightblue', edgecolor='black')\nax.add_patch(rect)\n\n# Draw a line representing the plot border\nline = plt.Line2D([-40, 1], [-5, 6], color='black')\nax.add_line(line)\n\n# Draw a scatter plot representing the data points\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Draw a rectangle representing the legend\nlegend_rect = plt.Rectangle((-39, 5), 1, 1, facecolor='orange', edgecolor='black')\nax.add_patch(legend_rect)\n\n# Draw a rectangle representing the title\ntitle_rect = plt.Rectangle((-39, 4), 1, 1, facecolor='yellow', edgecolor='black')\nax.add_patch(title_rect)\n\n# Draw a rectangle representing the subtitle\nsubtitle_rect = plt.Rectangle((-39, 3), 1, 1, facecolor='cyan', edgecolor='black')\nax.add_patch(subtitle_rect)\n\n# Draw a rectangle representing the axis labels\nxlabel_rect = plt.Rectangle((-39, 2), 1, 1, facecolor='magenta', edgecolor='black')\nax.add_patch(xlabel_rect)\n\n# Draw a rectangle representing the axis values\nylabel_rect = plt.Rectangle((-39, 1), 1, 1, facecolor='lime', edgecolor='black')\nax.add_patch(ylabel_rect)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Exponential Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Create a scatter plot with random data\nax.scatter(np.random.rand(10), np.random.rand(10), color='green')\n\n# Create a line plot with random data\nax.plot(np.random.rand(10), np.random.rand(10), color='red')\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 2000)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 500, 1000, 1500, 2000])\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '500', '1000', '1500', '2000'])\n\n# Set the title of the plot\nax.set_title('Predicted vs Actual')\n\n# Set the color of the line\nax.plot([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 500, 1000, 1500, 2000, 2000], color='gray')\n\n# Set the color of the bars\nax.bar([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 500, 1000, 1500, 2000, 2000], color='blue')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 500, color='green'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1000, color='green'))\nax.add_patch(plt.Rectangle((0.7, 0), 0.1, 1500, color='green'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='red'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='red'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='red'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='purple'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='purple'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='purple'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='orange'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='orange'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='pink'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='pink'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='pink'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='brown'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='brown'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='brown'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='cyan'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='cyan'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='cyan'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='magenta'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='magenta'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='magenta'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='yellow'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='yellow'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='yellow'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='black'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='black'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='black'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='white'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='white'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='white'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='grey'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='grey'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='grey'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='silver'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='silver'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='silver'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='gold'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='gold'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='gold'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='bronze'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='bronze'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='bronze'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='silver'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='silver'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='silver'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='gold'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='gold'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='gold'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='bronze'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='bronze'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='bronze'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='silver'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='silver'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='silver'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='gold'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='gold'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='gold'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='bronze'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='bronze'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='bronze'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='silver'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='silver'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='silver'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='gold'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='gold'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='gold'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='bronze'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='bronze'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='bronze'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='silver'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='silver'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='silver'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='gold'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='gold'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='gold'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='bronze'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='bronze'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='bronze'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='silver'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='silver'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='silver'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='gold'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='gold'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='gold'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='bronze'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='bronze'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='bronze'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='silver'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='silver'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='silver'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='gold'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='gold'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='gold'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='bronze'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='bronze'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='bronze'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='silver'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='silver'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='silver'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='gold'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='gold'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='gold'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='bronze'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='bronze'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='bronze'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='silver'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='silver'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='silver'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.1, 0), 0.1, 500, color='gold'))\nax.add_patch(plt.Rectangle((0.3, 0), 0.1, 1000, color='gold'))\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1500, color='gold'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.2, 0), 0.1, 500, color='bronze'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.1, 1000, color='bronze'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.1, 1500, color='bronze'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bias Score by Data Type and Model')\n\n# Set the x-axis label\nax.set_xlabel('Data Type')\n\n# Set the y-axis label\nax.set_ylabel('Bias Score')\n\n# Define the data points\nx = ['INT8', 'INT8', 'INT8', 'INT4', 'INT4', 'INT4']\ny = [9.2, 9.3, 9.5, 9.1, 9.2, 9.3]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Model 1', 'Model 2'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nx = [0.0, 0.2, 0.4, 0.6]\ny = [500, 700, 900, 1100]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Number of Examples by Maximum Predicted Probability')\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plots\nx = np.arange(2**6, 2**12)\ny1 = np.random.randint(10000, 40000, size=len(x))\ny2 = np.random.randint(10000, 40000, size=len(x))\ny3 = np.random.randint(10000, 40000, size=len(x))\ny4 = np.random.randint(10000, 40000, size=len(x))\ny5 = np.random.randint(10000, 40000, size=len(x))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Cos | n0 = 200')\nax.plot(x, y2, 'g-', label='Cos | n0 = 400')\nax.plot(x, y3, 'b-', label='ReLU | n0 = 200')\nax.plot(x, y4, 'b-', label='ReLU | n0 = 400')\nax.plot(x, y5, 'm-', label='ReLU | n0 = 400')\n\n# Add labels and title\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\nax.set_title('Empirical Lipschitz Constant vs Width of Layer')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500], 'b-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600], 'g-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700], 'r-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800], 'c-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900], 'm-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000], 'y-')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Rewarded')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Rewarded')\n\n# Add a legend\nax.legend(['WI', 'ISQ', 'WIQL', 'Greedy'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.50, 0.45, 0.40, 0.35, 0.30, 0.25, 0.20, 0.15], color='blue', label='WI')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.50, 0.45, 0.40, 0.35, 0.30, 0.25, 0.20, 0.15], color='orange', label='ISQ')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-4, 4)\n\n# Set the y-axis limits\nax.set_ylim(-4, 4)\n\n# Set the x-axis ticks\nax.set_xticks([-4, -2, 0, 2, 4])\n\n# Set the y-axis ticks\nax.set_yticks([-4, -2, 0, 2, 4])\n\n# Set the x-axis label\nax.set_xlabel('X Axis')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis')\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Create a scatter plot with orange color\nax.scatter([1, 2, 3], [1, 2, 3], c='orange', label='Daytime Sunny')\n\n# Create a scatter plot with blue color\nax.scatter([1, 2, 3], [1, 2, 3], c='blue', label='Night Rainy')\n\n# Create a scatter plot with green color\nax.scatter([1, 2, 3], [1, 2, 3], c='green', label='PGST')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the scatter plot\nax.scatter([1, 2, 3], [4, 5, 6], color='red')\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Price (in dollars)', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\nax.set_xticklabels(['0K', '5K', '10K', '15K', '20K', '25K', '30K', '35K', '40K', '45K', '50K'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend(['ActivityNet mIoU', 'Breakfast MoF', 'ActivityNet CIDER', 'QVHighlights mAP'], loc='upper left')\n\n# Set the colors of the plots\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], color='orange')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], color='green')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], color='blue')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], color='red')\n\n# Set the markers of the plots\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], marker='o', color='orange')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], marker='o', color='green')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], marker='o', color='blue')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], marker='o', color='red')\n\n# Set the labels of the plots\nax.text(0, 0, 'ActivityNet mIoU', fontsize=12, color='orange')\nax.text(0, 5, 'Breakfast MoF', fontsize=12, color='green')\nax.text(0, 10, 'ActivityNet CIDER', fontsize=12, color='blue')\nax.text(0, 15, 'QVHighlights mAP', fontsize=12, color='red')\n\n# Set the rectangle patches\nax.add_patch(plt.Rectangle((0, 0), 5, 10, color='pink'))\nax.add_patch(plt.Rectangle((5, 0), 5, 10, color='orange'))\nax.add_patch(plt.Rectangle((10, 0), 5, 10, color='yellow'))\nax.add_patch(plt.Rectangle((15, 0), 5, 10, color='green'))\nax.add_patch(plt.Rectangle((20, 0), 5, 10, color='blue'))\nax.add_patch(plt.Rectangle((25, 0), 5, 10, color='indigo'))\nax.add_patch(plt.Rectangle((30, 0), 5, 10, color='violet'))\n\n# Set the circle patches\nax.add_patch(plt.Circle((0, 0), 0.5, color='red'))\nax.add_patch(plt.Circle((5, 0), 0.5, color='orange'))\nax.add_patch(plt.Circle((10, 0), 0.5, color='yellow'))\nax.add_patch(plt.Circle((15, 0), 0.5, color='green'))\nax.add_patch(plt.Circle((20, 0), 0.5, color='blue'))\nax.add_patch(plt.Circle((25, 0), 0.5, color='indigo'))\nax.add_patch(plt.Circle((30, 0), 0.5, color='violet'))\n\n# Set the text patches\nax.text(0, 0, '0K', fontsize=12, color='black')\nax.text(5, 0, '5K', fontsize=12, color='black')\nax.text(10, 0, '10K', fontsize=12, color='black')\nax.text(15, 0, '15K', fontsize=12, color='black')\nax.text(20, 0, '20K', fontsize=12, color='black')\nax.text(25, 0, '25K', fontsize=12, color='black')\nax.text(30, 0, '30K', fontsize=12, color='black')\n\n# Set the line patches\nax.add_patch(plt.Line2D([0, 5], [0, 10], color='red'))\nax.add_patch(plt.Line2D([5, 10], [10, 20], color='orange'))\nax.add_patch(plt.Line2D([10, 15], [20, 30], color='yellow'))\nax.add_patch(plt.Line2D([15, 20], [30, 40], color='green'))\nax.add_patch(plt.Line2D([20, 25], [40, 50], color='blue'))\nax.add_patch(plt.Line2D([25, 30], [50, 60], color='indigo'))\nax.add_patch(plt.Line2D([30, 35], [60, 70], color='violet'))\n\n# Set the fill patches\nax.add_patch(plt.Polygon([[0, 0], [5, 10], [10, 0]], color='pink'))\nax.add_patch(plt.Polygon([[5, 0], [10, 10], [15, 0]], color='orange'))\nax.add_patch(plt.Polygon([[10, 0], [15, 10], [20, 0]], color='yellow'))\nax.add_patch(plt.Polygon([[15, 0], [20, 10], [25, 0]], color='green'))\nax.add_patch(plt.Polygon([[20, 0], [25, 10], [30, 0]], color='blue'))\nax.add_patch(plt.Polygon([[25, 0], [30, 10], [35, 0]], color='indigo'))\nax.add_patch(plt.Polygon([[30, 0], [35, 10], [40, 0]], color='violet'))\n\n# Set the rectangle patches\nax.add_patch(plt.Rectangle((0, 0), 5, 10, color='pink'))\nax.add_patch(plt.Rectangle((5, 0), 5, 10, color='orange'))\nax.add_patch(plt.Rectangle((10, 0), 5, 10, color='yellow'))\nax.add_patch(plt.Rectangle((15, 0), 5, 10, color='green'))\nax.add_patch(plt.Rectangle((20, 0), 5, 10, color='blue'))\nax.add_patch(plt.Rectangle((25, 0), 5, 10, color='indigo'))\nax.add_patch(plt.Rectangle((30, 0), 5, 10, color='violet'))\n\n# Set the circle patches\nax.add_patch(plt.Circle((0, 0), 0.5, color='red'))\nax.add_patch(plt.Circle((5, 0), 0.5, color='orange'))\nax.add_patch(plt.Circle((10, 0), 0.5, color='yellow'))\nax.add_patch(plt.Circle((15, 0), 0.5, color='green'))\nax.add_patch(plt.Circle((20, 0), 0.5, color='blue'))\nax.add_patch(plt.Circle((25, 0), 0.5, color='indigo'))\nax.add_patch(plt.Circle((30, 0), 0.5, color='violet'))\n\n# Set the text patches\nax.text(0, 0, '0K', fontsize=12, color='black')\nax.text(5, 0, '5K', fontsize=12, color='black')\nax.text(10, 0, '10K', fontsize=12, color='black')\nax.text(15, 0, '15K', fontsize=12, color='black')\nax.text(20, 0, '20K', fontsize=12, color='black')\nax.text(25, 0, '25K', fontsize=12, color='black')\nax.text(30, 0, '30K', fontsize=12, color='black')\n\n# Set the line patches\nax.add_patch(plt.Line2D([0, 5], [0, 10], color='red'))\nax.add_patch(plt.Line2D([5, 10], [10, 20], color='orange'))\nax.add_patch(plt.Line2D([10, 15], [20, 30], color='yellow'))\nax.add_patch(plt.Line2D([15, 20], [30, 40], color='green'))\nax.add_patch(plt.Line2D([20, 25], [40, 50], color='blue'))\nax.add_patch(plt.Line2D([25, 30], [50, 60], color='indigo'))\nax.add_patch(plt.Line2D([30, 35], [60, 70], color='violet'))\n\n# Set the fill patches\nax.add_patch(plt.Polygon([[0, 0], [5, 10], [10, 0]], color='pink'))\nax.add_patch(plt.Polygon([[5, 0], [10, 10], [15, 0]], color='orange'))\nax.add_patch(plt.Polygon([[10, 0], [15, 10], [20, 0]], color='yellow'))\nax.add_patch(plt.Polygon([[15, 0], [20, 10], [25, 0]], color='green'))\nax.add_patch(plt.Polygon([[20, 0], [25, 10], [30, 0]], color='blue'))\nax.add_patch(plt.Polygon([[25, 0], [30, 10], [35, 0]], color='indigo'))\nax.add_patch(plt.Polygon([[30, 0], [35, 10], [40, 0]], color='violet'))\n\n# Set the rectangle patches\nax.add_patch(plt.Rectangle((0, 0), 5, 10, color='pink'))\nax.add_patch(plt.Rectangle((5, 0), 5, 10, color='orange'))\nax.add_patch(plt.Rectangle((10, 0), 5, 10, color='yellow'))\nax.add_patch(plt.Rectangle((15, 0), 5, 10, color='green'))\nax.add_patch(plt.Rectangle((20, 0), 5, 10, color='blue'))\nax.add_patch(plt.Rectangle((25, 0), 5, 10, color='indigo'))\nax.add_patch(plt.Rectangle((30, 0), 5, 10, color='violet'))\n\n# Set the circle patches\nax.add_patch(plt.Circle((0, 0), 0.5, color='red'))\nax.add_patch(plt.Circle((5, 0), 0.5, color='orange'))\nax.add_patch(plt.Circle((10, 0), 0.5, color='yellow'))\nax.add_patch(plt.Circle((15, 0), 0.5, color='green'))\nax.add_patch(plt.Circle((20, 0), 0.5, color='blue'))\nax.add_patch(plt.Circle((25, 0), 0.5, color='indigo'))\nax.add_patch(plt.Circle((30, 0), 0.5, color='violet'))\n\n# Set the text patches\nax.text(0, 0, '0K', fontsize=12, color='black')\nax.text(5, 0, '5K', fontsize=12, color='black')\nax.text(10, 0, '10K', fontsize=12, color='black')\nax.text(15, 0, '15K', fontsize=12, color='black')\nax.text(20, 0, '20K', fontsize=12, color='black')\nax.text(25, 0, '25K', fontsize=12, color='black')\nax.text(30, 0, '30K', fontsize=12, color='black')\n\n# Set the line patches\nax.add_patch(plt.Line2D([0, 5], [0, 10], color='red'))\nax.add_patch(plt.Line2D([5, 10], [10, 20], color='orange'))\nax.add_patch(plt.Line2D([10, 15], [20, 30], color='yellow'))\nax.add_patch(plt.Line2D([15, 20], [30, 40], color='green'))\nax.add_patch(plt.Line2D([20, 25], [40, 50], color='blue'))\nax.add_patch(plt.Line2D([25, 30], [50, 60], color='indigo'))\nax.add_patch(plt.Line2D([30, 35], [60, 70], color='violet'))\n\n# Set the fill patches\nax.add_patch(plt.Polygon([[0, 0], [5, 10], [10, 0]], color='pink'))\nax.add_patch(plt.Polygon([[5, 0], [10, 10], [15, 0]], color='orange'))\nax.add_patch(plt.Polygon([[10, 0], [15, 10], [20, 0]], color='yellow'))\nax.add_patch(plt.Polygon([[15, 0], [20, 10], [25, 0]], color='green'))\nax.add_patch(plt.Polygon([[20, 0], [25, 10], [30, 0]], color='blue'))\nax.add_patch(plt.Polygon([[25, 0], [30, 10], [35, 0]], color='indigo'))\nax.add_patch(plt.Polygon([[30, 0], [35, 10], [40, 0]], color='violet'))\n\n# Set the rectangle patches\nax.add_patch(plt.Rectangle((0, 0), 5, 10, color='pink'))\nax.add_patch(plt.Rectangle((5, 0), 5, 10, color='orange'))\nax.add_patch"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time Step')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the y-ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-tick labels\nax.set_xticklabels(['0', '1', '2', '3'])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a bar chart with the data\nax.bar([0, 20, 40, 60, 80], [0.53, 0.55, 0.57, 0.59, 0.61], color='blue')\nax.bar([0, 20, 40, 60, 80], [0.60, 0.62, 0.64, 0.66, 0.68], color='green')\nax.bar([0, 20, 40, 60, 80], [0.65, 0.67, 0.69, 0.71, 0.73], color='brown')\nax.bar([0, 20, 40, 60, 80], [0.70, 0.72, 0.74, 0.76, 0.78], color='pink')\nax.bar([0, 20, 40, 60, 80], [0.75, 0.77, 0.79, 0.81, 0.83], color='orange')\n\n# Set the x-ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-ticks\nax.set_yticks([0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67, 0.69, 0.71, 0.73, 0.75, 0.77, 0.79, 0.81, 0.83])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nn = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ncontent_gain = [1, 2, 3, 4, 5, 6, 7, 8, 9]\norganization_gain = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nlanguage_gain = [3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.plot(n, content_gain, label='Content', color='blue')\nax.plot(n, organization_gain, label='Organization', color='orange')\nax.plot(n, language_gain, label='Language', color='green')\n\n# Fill between\nax.fill_between(n, content_gain, color='lightblue')\nax.fill_between(n, organization_gain, color='orange')\nax.fill_between(n, language_gain, color='lightgreen')\n\n# Title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [100, 200, 300, 400, 500, 600, 700]\namericas = [150, 250, 350, 450, 550, 650, 750]\nasia = [200, 300, 400, 500, 600, 700, 800]\neurope = [250, 350, 450, 550, 650, 750, 850]\noceania = [300, 400, 500, 600, 700, 800, 900]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(years, africa, label='Africa', color='#90EE90')\nax.plot(years, americas, label='Americas', color='#FFD700')\nax.plot(years, asia, label='Asia', color='#DC143C')\nax.plot(years, europe, label='Europe', color='#FFA500')\nax.plot(years, oceania, label='Oceania', color='#87CEFA')\n\n# Fill between\nax.fill_between(years, 0, africa, where=africa > 0, interpolate=True, color='#B22222')\nax.fill_between(years, 0, americas, where=americas > 0, interpolate=True, color='#CD853F')\nax.fill_between(years, 0, asia, where=asia > 0, interpolate=True, color='#FFA500')\nax.fill_between(years, 0, europe, where=europe > 0, interpolate=True, color='#87CEEB')\nax.fill_between(years, 0, oceania, where=oceania > 0, interpolate=True, color='#ADD8E6')\n\n# Legend and title\nax.legend()\nax.set_title('World population')\n\n# X-axis\nax.set_xlabel('Year')\nax.set_xticks(years)\nax.set_xticklabels(['1950', '1960', '1970', '1980', '1990', '2000', '2010'])\n\n# Y-axis\nax.set_ylabel('Number of people (millions)')\nax.set_yticks(range(0, 1000, 100))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim([0, 60])\n\n# Set the y-axis limits\nax.set_ylim([0, 7])\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Set the x-axis labels\nax.set_xticklabels(['0', '20', '40', '60'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7'])\n\n# Set the title of the plot\nax.set_title('Video Game Scores')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the text\nax.text(30, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(30, 6.3, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(30, 6.1, 'The Count of Monte Cristo', color='tan')\nax.text(30, 5.9, 'Game of Thrones', color='cyan')\nax.text(30, 5.7, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Demi-Gods and Semi-Devils', color='blue')\nax.text(20, 4.5, 'The Count of Monte Cristo', color='tan')\nax.text(25, 3.5, 'Game of Thrones', color='cyan')\nax.text(30, 2.5, 'Attack on Titan', color='blue')\n\n# Set the color of the bars\nax.bar([10, 20, 30, 40, 50], [6, 5, 4, 3, 2], color='blue')\nax.bar([15, 25, 35, 45, 55], [5, 4, 3, 2, 1], color='green')\nax.bar([20, 30, 40, 50, 60], [4, 3, 2, 1, 0], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((10, 6), 10, 0.5, color='tan'))\nax.add_patch(plt.Rectangle((15, 5), 10, 0.5, color='cyan'))\nax.add_patch(plt.Rectangle((20, 4), 10, 0.5, color='red'))\n\n# Set the color of the text\nax.text(10, 6.5, 'Notre-Dame de Paris', color='blue')\nax.text(15, 5.5, 'Dem"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Product Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Set the x-tick labels\nax.set_xticklabels(['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill'])\n\n# Set the y-ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60])\n\n# Set the y-tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%'])\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Create a bar chart\nax.bar(['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], [80, 60, 40, 20, 0], color='blue')\n\n# Set the title of the chart\nax.set_title('Average Monthly Sales by Product Across Regions')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlengths = [0, 9, 10, 19, 20, 29, 30, 39, 40, 49]\nspearmans = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(lengths, spearmans, 'o-')\n\n# Set the title and labels\nax.set_title('Spearman Correlation Coefficient by Length')\nax.set_xlabel('Length')\nax.set_ylabel('Spearman')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'CasER', 'GRU4Rec']\nvalues = [2.2, 2.4, 2.4, 19.9, 14.3]\ncolors = ['blue', 'green', 'red', 'purple', 'orange']\n\n# Data for the second bar chart\ncategories2 = ['MovieLens-1M', 'MovieLens-2M', 'MovieLens-3M', 'MovieLens-4M', 'MovieLens-5M']\nvalues2 = [3.0, 3.1, 3.2, 3.3, 3.4]\ncolors2 = ['blue', 'green', 'red', 'purple', 'orange']\n\n# Data for the third bar chart\ncategories3 = ['Yelp', 'Amazon', 'Google', 'Facebook', 'Twitter']\nvalues3 = [4.8, 4.9, 5.1, 5.2, 5.3]\ncolors3 = ['blue', 'green', 'red', 'purple', 'orange']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot the first bar chart\naxs[0].bar(categories, values, color=colors)\naxs[0].set_title('Beauty')\naxs[0].set_xlabel('Categories')\naxs[0].set_ylabel('Values')\n\n# Plot the second bar chart\naxs[1].bar(categories2, values2, color=colors2)\naxs[1].set_title('MovieLens-1M')\naxs[1].set_xlabel('Categories')\naxs[1].set_ylabel('Values')\n\n# Plot the third bar chart\naxs[2].bar(categories3, values3, color=colors3)\naxs[2].set_title('Yelp')\naxs[2].set_xlabel('Categories')\naxs[2].set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\nprices = [4.4, 2.3, 1.5, 0.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(models, improvement, color='blue')\nax.bar(models, prices, bottom=improvement, color='orange')\n\n# Add a title and labels\nax.set_title('ENDEFRRITES sampled')\nax.set_xlabel('Model')\nax.set_ylabel('Improvement [%]')\n\n# Add a legend\nax.legend(['Improvement', 'Price'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\ny1 = [0.82, 0.84, 0.83, 0.86, 0.85, 0.89]\ncolors1 = ['blue', 'grey', 'red', 'blue', 'grey', 'blue']\n\n# Data for the second graph\nx2 = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\ny2 = [0.85, 0.87, 0.86, 0.89, 0.88, 0.90]\ncolors2 = ['blue', 'grey', 'red', 'blue', 'grey', 'blue']\n\nfig, axs = plt.subplots(2, 1, figsize=(7, 5))\n\n# First graph\naxs[0].bar(x1, y1, color=colors1)\naxs[0].set_title('Pheme')\naxs[0].set_xlabel('Pheme')\naxs[0].set_ylabel('Macro F1-score')\n\n# Second graph\naxs[1].bar(x2, y2, color=colors2)\naxs[1].set_title('LMM-mis')\naxs[1].set_xlabel('LMM-mis')\naxs[1].set_ylabel('Macro F1-score')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the x-axis labels\nax.set_xticks([1, 2, 3, 4, 5, 6])\nax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the plot area\nax.set_facecolor('cyan')\n\n# Set the color of the legend\nax.legend(['Label 1', 'Label 2'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Human Labeling and Agreement Bias Checking', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Human Annotator', color='red')\n\n# Set the color of the y-axis label\nax.set_ylabel('Scores', color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right spines\nax.spines"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first subplot\nx1 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\nlabels1 = ['human', 'gpt4', 'gpt4-cot']\nsizes1 = [100, 200, 300]\n\n# Data for the second subplot\nx2 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny2 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\nlabels2 = ['human', 'gpt4', 'gpt4-cot']\nsizes2 = [100, 200, 300]\n\nfig, axs = plt.subplots(2, 1, figsize=(8.0, 6.0))\n\n# First subplot\naxs[0].barh(x1, y1, color='lightblue')\naxs[0].set_title('s1')\naxs[0].set_xlabel('Count')\naxs[0].set_ylabel('Role')\naxs[0].legend(labels1, loc='upper right')\n\n# Second subplot\naxs[1].barh(x2, y2, color='lightcoral')\naxs[1].set_title('s2')\naxs[1].set_xlabel('Count')\naxs[1].set_ylabel('Role')\naxs[1].legend(labels2, loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['LLaMA-2-7B', 'Evol-Instruct-70k', 'Evol-Instruct-AlpaGasus-1k', 'Evol-Instruct-1k-longest', 'LIMA-1k']\naccuracies = [53.0, 51.3, 56.4, 56.4, 53.9]\ntasks = ['ARC', 'MMLU', 'TruthfulQ&A', 'Winogrande', 'Average']\ntask_accuracies = [[53.0, 51.3, 56.4, 56.4, 53.9], [53.0, 51.3, 56.4, 56.4, 53.9], [53.0, 51.3, 56.4, 56.4, 53.9], [53.0, 51.3, 56.4, 56.4, 53.9], [53.0, 51.3, 56.4, 56.4, 53.9]]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.barh(products, accuracies, color='skyblue')\nfor i, v in enumerate(accuracies):\n    ax.text(v + 0.5, i, str(v), color='black', va='center')\n\nax.set_xlabel('Accuracy (%)')\nax.set_title('Product Accuracy Distribution')\n\n# Task Accuracies\nfor i, task in enumerate(tasks):\n    ax.barh(task, task_accuracies[i], color='pink')\n    for j, v in enumerate(task_accuracies[i]):\n        ax.text(v + 0.5, i + 0.1 * j, str(v), color='black', va='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(35, 75)\n\n# Set the y-axis limits\nax.set_ylim(40, 70)\n\n# Set the x-axis ticks\nax.set_xticks([35, 40, 45, 50, 55, 60, 65, 70, 75])\n\n# Set the y-axis ticks\nax.set_yticks([45, 50, 55, 60, 65, 70])\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Speed (mph)')\n\n# Set the title of the plot\nax.set_title('Car Performance')\n\n# Create a bar chart\nax.bar(['GSM8K', 'MNLI', 'race@High'], [50, 60, 55], color='blue')\n\n# Create a scatter plot\nax.scatter(['GSM8K', 'MNLI', 'race@High'], [52, 62, 57], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmatches = ['DLMA-7B VS. LLAMAa-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMAa-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\nwin_rates = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 30.9]\ntie_rates = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 38.7]\nloss_rates = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nfor i in range(len(matches)):\n    ax.barh(matches[i], win_rates[i], color='green')\n    ax.barh(matches[i], tie_rates[i], left=win_rates[i], color='blue')\n    ax.barh(matches[i], loss_rates[i], left=[win_rates[i] + tie_rates[i] for _ in range(len(matches))], color='red')\n\n# Set the title and labels\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)')\nax.set_xlabel('Win Rate (%)')\nax.set_ylabel('Match')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 40)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis tick labels\nax.set_xticks([0, 10, 20, 30, 40])\n\n# Set the y-axis tick labels\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Gait Distribution (%)')\n\n# Set the title\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Add a rectangle for each time point\nrectangles = [\n    [0, 0, 10, 0.5],\n    [10, 0, 10, 0.8],\n    [20, 0, 10, 0.6],\n    [30, 0, 10, 0.4]\n]\n\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='green'))\n\n# Add a line for each gait type\ngait_types = ['trot', 'pace', 'bound', 'pronk', 'transition']\ncolors = ['green', 'red', 'purple', 'brown', 'gray']\n\nfor i, gait_type in enumerate(gait_types):\n    ax.plot([0, 40], [i*2, i*2], color=colors[i], label=gait_type)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nsales = [68, 82, 68, 72, 68]\nwin_rates = [24, 15, 22, 19, 23]\npopularity = [8, 3, 10, 9, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars for sales and win rates\nax.barh(brands, sales, color='blue', label='Sales')\nax.barh(brands, win_rates, left=sales, color='purple', label='Win Rates')\n\n# Add labels and title\nax.set_xlabel('Number of Sales/Win Rates')\nax.set_title('Brand Performance')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [60, 40, 20, 0]\ny = [14.8, 29.6, 29.6, 18.5, 8.4, 9.0]\ncolors = ['red', 'orange', 'grey', 'blue', 'cyan', 'blue']\nlabels = ['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree']\n\n# Data for the second graph\nx2 = [60, 40, 20, 0]\ny2 = [19.0, 26.2, 35.7, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbrightness = [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25]\nrate_of_change = [-10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32]\nrotation_angle = [-150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150]\nscale = [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25]\nrate_of_gain = [-10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data\nax.plot(brightness, rate_of_change, 'b-', label='Rate of Change')\nax.plot(rotation_angle, scale, 'g-', label='Scale')\nax.plot(scale, rate_of_gain, 'r-', label='Rate of Gain')\n\n# Set the labels and title\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Change[%]')\nax.set_title('Stock Market Analysis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 2.8, 2.5, 3.1, 2.9, 2.7]\ncompleteness = [3.1, 2.6, 2.4, 3.0, 2.8, 2.6]\nconciseness = [3.0, 2.5, 2.3, 2.9, 2.7, 2.5]\nreadability = [3.3, 2.9, 2.7, 3.1, 2.9, 2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the data\nax.bar(models, accuracy, color='blue', label='Accuracy')\nax.bar(models, completeness, bottom=accuracy, color='orange', label='Completeness')\nax.bar(models, conciseness, bottom=[a + c for a, c in zip(accuracy, completeness)], color='red', label='Conciseness')\nax.bar(models, readability, bottom=[a + c + co for a, c, co in zip(accuracy, completeness, conciseness)], color='teal', label='Readability')\n\n# Set the title and labels\nax.set_title('Ratings of Language Models on a Scale from 1-4')\nax.set_xlabel('Language Models')\nax.set_ylabel('Rating')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.bar(models, accuracies, color='blue')\n\n# Set the title and labels\nax.set_title('Model Accuracy')\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nproducts = ['Alpaca-52k+', 'Alpaca-1k+', 'Lima-1k+', 'Lima-1k*']\nsales = [78.8, 67.4, 44.2, 59.8]\nprofit = [11.7, 18.1, 33.9, 21.0]\nlosses = [9.5, 14.5, 19.2, 19.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.barh(products, sales, color='blue', label='Sales')\nax.barh(products, profit, left=sales, color='cyan', label='Profit')\nax.barh(products, losses, left=[s+p for s,p in zip(sales, profit)], color='orange', label='Losses')\n\n# Set the labels and title\nax.set_xlabel('Amount')\nax.set_title('GPT4-as-a-judge')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Ang', 'Ct', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nsentiments = ['negative', 'positive', 'none', 'mixed']\nsentiment_values = [300, 250, 150, 100]\nsentiment_colors = ['red', 'green', 'gray', 'orange']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(emotions, sentiment_values, color=sentiment_colors)\n\n# Add labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Sentiment Values')\nax.set_title('Sentiment Analysis of Emotions')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['GPT-4V', 'RoboCodeX']\nsuccess_rates = [0.95, 0.85]\noccupancy_errors = [0.02, 0.03]\ntrajectory_optimization_errors = [0.01, 0.02]\ngripping_collision_errors = [0.01, 0.01]\ngrasping_failed = [0.01, 0.01]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars\nax.barh(brands, success_rates, color='green', label='Success')\nax.barh(brands, occupancy_errors, left=success_rates, color='orange', label='Occupancy Error')\nax.barh(brands, trajectory_optimization_errors, left=[i+j for i,j in zip(success_rates, occupancy_errors)], color='blue', label='Trajectory optimization Error')\nax.barh(brands, gripping_collision_errors, left=[i+j+k for i,j,k in zip(success_rates, occupancy_errors, trajectory_optimization_errors)], color='yellow', label='Gripper collision')\nax.barh(brands, grasping_failed, left=[i+j+k+l for i,j,k,l in zip(success_rates, occupancy_errors, trajectory_optimization_errors, gripping_collision_errors)], color='purple', label='Grasping failed')\n\n# Set labels and title\nax.set_xlabel('Percentage of total trials')\nax.set_title('Robotics System Performance')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Transmission Delay (ms)')\n\n# Set the x-axis label\nax.set_xlabel('Datasets')\n\n# Set the y-axis label\nax.set_ylabel('Transmission Delay (ms)')\n\n# Define the data for the plot\nx = ['VOC 2012', 'COCO 2017']\ny = [3.5, 2.5]\n\n# Plot the data\nax.bar(x, y, color='blue')\n\n# Add a legend\nax.legend(['JPEG', 'DEEPJSCC w/ ofdm', 'OURS'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Product Reviews')\n\n# Set the x-axis label\nax.set_xlabel('PDEs')\n\n# Set the y-axis label\nax.set_ylabel('log L2')\n\n# Define the data for the plot\nx = ['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\ny = [1.5, 1.3, 1.4, 1.2, 1.1, 1.6]\n\n# Define the colors for the bars\ncolors = ['blue', 'red', 'pink', 'orange', 'purple', 'brown']\n\n# Create the bar chart\nbars = ax.bar(x, y, color=colors)\n\n# Add labels to each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_values = [0.975, 0.985, 0.995, 0.965]\nsroi_values = [0.975, 0.985, 0.995, 0.965]\nt2d_values = [0.975, 0.985, 0.995, 0.965]\nlive_m_values = [0.975, 0.985, 0.995, 0.965]\nsrocc_values = [0.975, 0.985, 0.995, 0.965]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 3.0))\n\n# Plot the live values\naxs[0, 0].bar(models, live_values, color='blue')\naxs[0, 0].set_title('LIVE')\n\n# Plot the SROI values\naxs[0, 1].bar(models, sroi_values, color='orange')\naxs[0, 1].set_title('CSIQ')\n\n# Plot the TID2013 values\naxs[1, 0].bar(models, t2d_values, color='green')\naxs[1, 0].set_title('TID2013')\n\n# Plot the LIVE-M values\naxs[1, 1].bar(models, live_m_values, color='brown')\naxs[1, 1].set_title('LIVE-M')\n\n# Plot the SROCC values\naxs[0, 0].bar(models, srocc_values, color='cyan')\naxs[0, 0].set_title('SROCC')\n\n# Set the title of the whole figure\nfig.suptitle('Models')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\ny = [6.11, 28.33, 31.11]\nz = [85.0, 56.11, 60.56]\na = [99.44, 44.44, 42.78]\nb = [85.0, 56.11, 60.56]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(6.0, 4.0))\n\n# Plot the data\naxs[0, 0].bar(x, y, color='pink')\naxs[0, 1].bar(x, z, color='skyblue')\naxs[1, 0].bar(x, a, color='pink')\naxs[1, 1].bar(x, b, color='skyblue')\n\n# Set the title of each subplot\naxs[0, 0].set_title('Zero-shot')\naxs[0, 1].set_title('One-shot')\naxs[1, 0].set_title('DS-Agent')\n\n# Set the x-axis label of each subplot\naxs[0, 0].set_xlabel('Model')\naxs[0, 1].set_xlabel('Model')\naxs[1, 0].set_xlabel('Model')\naxs[1, 1].set_xlabel('Model')\n\n# Set the y-axis label of each subplot\naxs[0, 0].set_ylabel('One pass rate (%)')\naxs[0, 1].set_ylabel('One pass rate (%)')\naxs[1, 0].set_ylabel('One pass rate (%)')\naxs[1, 1].set_ylabel('One pass rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_rates = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_rates = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_rates = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.barh(labels, win_rates, color='skyblue', label='Win')\nax.barh(labels, tie_rates, left=win_rates, color='lightgreen', label='Tie')\nax.barh(labels, loss_rates, left=[x+y for x,y in zip(win_rates, tie_rates)], color='pink', label='Loss')\n\n# Set the labels and title\nax.set_xlabel('Percentage')\nax.set_title('Comparison of LMM-based vs. TPLM-based, LMM-based vs. Template, LMM-based vs. Markdown, TPLM-based vs. Template, TPLM-based vs. Markdown, and Markdown vs. Template')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nnames = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nprobabilities = [0.72, 0.74, 0.56]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(names, probabilities, color='blue')\n\n# Set title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Model')\nax.set_ylabel('Probability of Improvement')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 1, 2, 3, 4]\ny = [100, 60, 83.3, 100, 91.7]\nerr = [10, 10, 10, 10, 10]\nerr2 = [10, 10, 10, 10, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the title of the plot\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Add error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='r', capsize=5)\nax.errorbar(x, y, yerr=err2, fmt='o', ecolor='g', capsize=5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Performance')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Set the x-ticks\nax.set_xticks(range(len(products)))\nax.set_xticklabels(products)\n\n# Set the y-limits\nax.set_ylim(0, 100)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#F5F5DC')\n\n# Set the border color\nax.spines['bottom'].set_color('#8B4513')\nax.spines['top'].set_color('#8B4513')\nax.spines['right'].set_color('#8B4513')\nax.spines['left'].set_color('#8B4513')\n\n# Set the legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='RegOpt', markerfacecolor='green', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='BIOPt', markerfacecolor='yellow', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='LoopOpt', markerfacecolor='blue', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Set the bar colors\nbar_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink', 'gray', 'olive', 'cyan']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [70, 60, 50, 40, 30, 20, 10, 0, -10, -20]\n\n# Set the bar labels\nbar_labels = ['Coreutils', 'Gzip', 'Scp', 'Tar', 'Exim', 'Menc', 'Nginx', 'Bzip2', 'H264', 'Liba', 'Mc', 'Gcc', 'Gobmk', 'Hmmer', 'Loba', 'Mcf', 'Omnet', 'Perl', 'Sieng', 'Xalan', 'Php', 'MySql', 'Avg']\n\n# Set the bar labels\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\n\n# Set the bar colors\nfor i, v in enumerate(bar_heights):\n    ax.bar(bar_positions[i], v, bar_width, color=bar_colors[i % len(bar_colors)])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Random', 'Llama2', 'Mistral']\nscores = [5.52, 5.53, 5.83]\nmt_bench_scores = [6.57, 6.75, 6.84]\nmistrals = [7.08, 6.81, 6.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(brands, scores, color='purple')\nax.bar(brands, mt_bench_scores, bottom=scores, color='blue')\nax.bar(brands, mistrals, bottom=[sum(x) for x in zip(scores, mt_bench_scores)], color='brown')\n\n# Set the title and labels\nax.set_title('MT-Bench Score Comparison')\nax.set_xlabel('Brands')\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 1000]\ny = [49.98, 49.63]\nyerr = [1.2, 1.1]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\nax.errorbar(x, y, yerr=yerr, fmt='o', capsize=5)\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMSE Score')\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='saddlebrown'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='saddlebrown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='blue'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='blue'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='orange'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='orange'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='green'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='green'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='red'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='red'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='purple'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='purple'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='pink'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='pink'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='cyan'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='cyan'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='magenta'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='magenta'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='yellow'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='yellow'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='black'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='black'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='white'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='white'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='grey'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='grey'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='silver'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='gold'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='brown'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='olive'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='olive'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='navy'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='navy'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='maroon'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='maroon'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='lime'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='lime'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='aqua'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='aqua'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='fuchsia'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='fuchsia'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='silver'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='gold'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='brown'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='olive'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='olive'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='navy'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='navy'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='maroon'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='maroon'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='lime'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='lime'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='aqua'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='aqua'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='fuchsia'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='fuchsia'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='silver'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='gold'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='brown'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='olive'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='olive'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='navy'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='navy'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='maroon'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='maroon'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='lime'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='lime'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='aqua'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='aqua'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='fuchsia'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='fuchsia'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='silver'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='gold'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='brown'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='olive'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='olive'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='navy'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='navy'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='maroon'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='maroon'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='lime'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='lime'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='aqua'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='aqua'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='fuchsia'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='fuchsia'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='silver'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='gold'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='brown'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='olive'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='olive'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='navy'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='navy'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='maroon'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='maroon'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='lime'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='lime'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='aqua'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='aqua'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='fuchsia'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='fuchsia'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='silver'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='gold'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='brown'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='olive'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='olive'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='navy'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='navy'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='maroon'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='maroon'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='lime'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='lime'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='aqua'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='aqua'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='fuchsia'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='fuchsia'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='silver'))\nax.add_patch(plt.Rectangle((100, 0), 900, 50, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 100, 50, color='gold'))\nax.add_patch(plt.Rectangle((100"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncompanies = ['ResNet18', 'AlexNet', 'ResNet50']\nspeedups = [7.4, 6.1, 4.3]\nperturbations = [0, 50, 48, 75, 68, 87.5, 78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot the speedup data\nax.bar(companies, speedups, color='blue')\n\n# Plot the perturbation data\nfor i, p in enumerate(perturbations):\n    ax.text(i, max(speedups)+0.5, str(p), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Perturbation')\nax.set_xlabel('Companies')\nax.set_ylabel('Speedup')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('LeetCode, DS-6.7b')\n\n# Set the x-axis label\nax.set_xlabel('Time (ms)')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Define the data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [40, 45, 50, 55, 60, 65, 70, 75, 80, 85]\ny2 = [30, 35, 40, 45, 50, 55, 60, 65, 70, 75]\ny3 = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\ny4 = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\ny5 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n# Plot the data\nax.plot(x, y1, color='green', label='Correct')\nax.plot(x, y2, color='blue', label='Counterfeit (Test-Passing)')\nax.plot(x, y3, color='red', label='Counterfeit (Test-Failing)')\nax.plot(x, y4, color='purple', label='Counterfeit (Test-Failing), Confused')\nax.plot(x, y5, color='orange', label='SC')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nrecoast = [53, 80, 116, 99, 179]\ntie = [6, 33, 49, 50, 23]\nalpacawins = [21, 67, 103, 103, 98]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.barh(products, recoast, color='coral')\nax.barh(products, tie, left=recoast, color='yellow')\nax.barh(products, alpacawins, left=[i+j for i,j in zip(recoast,tie)], color='skyblue')\n\n# Set the labels and title\nax.set_xlabel('Wins')\nax.set_title('Product Wins by Category')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+']\nfpr_values = [35.15, 26.86, 19.08, 22.09, 20.67, 30.67, 58.99, 66.19]\nnon_agg_values = [48.38, 36.63, 23.9, 36.63, 26.38, 17.06]\nagg_values = [62.94, 42.5, 26.38, 42.5, 26.38, 17.06]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(brands, fpr_values, label='FPR@90TPR')\nax.plot(brands, non_agg_values, label='Non-Aggregation')\nax.plot(brands, agg_values, label='Aggregation')\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('FPR@90TPR')\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [5, 10, 15, 20]\ny1 = [66.3, 61.9, 53.8, 53.7]\ny2 = [10.1, 13.6, 13.7, 13.7]\ny3 = [49.3, 45.7, 41.6, 31.5]\ny4 = [36.3, 36.0, 36.0, 36.0]\ny5 = [48.0, 42.6, 36.5, 36.5]\ny6 = [43.8, 40.2, 30.6, 22.5]\ny7 = [49.5, 42.8, 40.6, 36.5]\ny8 = [40.5, 40.5, 40.5, 40.5]\ny9 = [43.4, 43.4, 43.4, 43.4]\ny10 = [64.7, 59.6, 56.8, 53.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='Truthful: Misleading = 2:0')\nax.plot(x, y2, label='Truthful: Misleading = 2:1')\nax.plot(x, y3, label='Truthful: Misleading = 2:2')\nax.plot(x, y4, label='Misleading: Misleading = 2:0')\nax.plot(x, y5, label='Misleading: Misleading = 2:1')\nax.plot(x, y6, label='Misleading: Misleading = 2:2')\nax.plot(x, y7, label='Misleading: Misleading = 1:2')\nax.plot(x, y8, label='Misleading: Misleading = 0:2')\nax.plot(x, y9, label='Misleading: Misleading = 0:1')\nax.plot(x, y10, label='Misleading: Misleading = 0:0')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 25)\n\n# Set the limits of the y-axis\nax.set_ylim(-80, 80)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SCIQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComTz', 'CyC', 'Winogventi', 'Com2Sense', 'CODAH', 'WSC', 'ARC-challenge', 'SocialIQA', 'HellaSWAG-wikiHow', 'Al2Sci-elem', 'Winogrande', 'PIQA', 'QuaRel', 'QuaC', 'SC', 'ST', 'alphaNLI', 'SWAG', 'HeLaSWAG-actnet']\ndaac_values = [3.4, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart\nax.bar(brands, daac_values, color='blue')\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('\u0394Acc (with Styles) - \u0394Acc')\n\n# Set the x-tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the y-tick labels\nax.set_yticks(range(-8, 7, 1))\nax.set_yticklabels(['-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7'])\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='blue')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the legend\nax.legend(['\u0394Acc < -1', '\u0394Acc <= -1', '\u0394Acc > 1'], loc='upper left', bbox_to_anchor=(1,1), fancybox=True, shadow=True, ncol=1, fontsize='small', title='Legend', title_fontsize='medium')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['LSTM-2/3b', 'MSE', 'Zephyr-7b', 'WY-4b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7b', 'QW-7"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFEG', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSL', 'AFSC', 'AFSF', 'AFTH', 'AFVT', 'AFWS', 'DAH', 'IC', 'SS']\nnla_values = [25, 30, 40, 35, 25, 30, 40, 35, 25, 30, 40, 35, 25, 30, 40, 35, 25, 30, 40]\ngpt3_values = [10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, nla_values, color='blue')\nax.bar(categories, gpt3_values, bottom=nla_values, color='orange')\n\n# Labels and Title\nax.set_xlabel('Categories')\nax.set_ylabel('NLA Values')\nax.set_title('NLA vs GPT-3 Values')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(3, 10)\n\n# Set the y-axis limits\nax.set_ylim(-5, 5)\n\n# Set the x-axis ticks\nax.set_xticks([3, 5, 7, 9])\n\n# Set the y-axis ticks\nax.set_yticks([-5, -3, -1, 1, 3, 5])\n\n# Set the x-axis labels\nax.set_xticklabels(['3', '5', '7', '9'])\n\n# Set the y-axis labels\nax.set_yticklabels(['-5', '-3', '-1', '1', '3', '5'])\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='green')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='orange')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=14)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=14)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linewidth=2)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linewidth=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', rotation=45)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', rotation=45)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', direction='inout')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', direction='inout')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', bottom=True)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', left=True)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', top=True)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', right=True)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='major')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='major')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='both')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='both')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', which='both')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', which='major')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', which='major')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', which='minor')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', which='minor')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', which='both')\n\n# Set the color of the y-axis grid lines\nax.grid(axis"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [85.93, 73.93, 70.56, 69.87, 68.76, 67.65, 66.54]\n\n# Create a bar chart\nplt.figure(figsize=(10, 6))\nplt.bar(brands, sales, color='skyblue')\nplt.title('Human Study')\nplt.xlabel('Brands')\nplt.ylabel('Sales (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'HH': [22, 50, 28],\n    'Reddit': [25, 40, 30],\n    'IMDB': [30, 60, 10],\n    'AVG': [26, 50, 24]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Plot the data\nfor key, value in data.items():\n    ax.bar(key, value[0], color='red')\n    ax.bar(key, value[1], bottom=value[0], color='orange')\n    ax.bar(key, value[2], bottom=[value[0] + value[1]] * len(value), color='pink')\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 101, 10))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 101, 10))\n\n# Set the x-axis labels\nax.set_xlabel('Time (in minutes)')\n\n# Set the y-axis labels\nax.set_ylabel('Percentage of users')\n\n# Set the title\nax.set_title('COPR v.s. Golden (Human Eval)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the title of the plot\nax.set_title('a')\n\n# Create a bar chart with the data\nax.bar(['Accuracy', 'Unfairness'], [32, 10], color='blue')\nax.bar(['Accuracy', 'Unfairness'], [34, 12], color='yellow')\n\n# Set the y-axis limits\nax.set_ylim(0, 40)\n\n# Set the x-axis labels\nax.set_xlabel('Metrics')\n\n# Set the y-axis labels\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nresolutions = [224, 128, 64, 32]\naccuracies = [75, 60, 50, 40]\ncolors = ['blue', 'orange', 'pink', 'cyan']\nlabels = ['ImageNet-1k', 'ImageNet (F)', 'PAC-FNO', 'PAC-FNO']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nax.bar(resolutions, accuracies, color=colors)\n\n# Add labels and title\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Add legend\nax.legend(labels)\n\n# Add text annotations for each bar\nfor i, v in enumerate(accuracies):\n    ax.text(resolutions[i], v + 1, str(v) + '%', ha='center', va='bottom')\n\n# Add a horizontal line at the top of the plot\nax.axhline(y=80, color='b', linestyle='-')\n\n# Add a vertical line at the bottom of the plot\nax.axvline(x=224, color='r', linestyle='-')\n\n# Add a red arrow pointing to the highest accuracy\nax.annotate('', xy=(32, 87), xytext=(224, 87),\n            arrowprops=dict(facecolor='red', shrink=0.05))\n\n# Add a text annotation for the highest accuracy\nax.text(32, 87, '87%', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\ny = [50, 50, 50, 50]\ncolors = ['yellow', 'blue', 'red', 'pink']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data\nax.bar(x, y, color=colors)\n\n# Set the title and labels\nax.set_title('Average Uploads per Level')\nax.set_xlabel('Levels')\nax.set_ylabel('Uploads')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [17, 9, 20, 0, 19, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\ny = [39.4, 32.84, 19.66, 0, 35.18, 26.82, 22.66, 0, 28.0, 20.84, 22, 24.27, 34.06, 30.84, 22, 14, 16, 18, 20, 22, 35]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Rewards by Category')\nax.set_xlabel('Categories')\nax.set_ylabel('Reward Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Cleaning / laundry', 'Crafting/knitting', 'Baking', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Home management', 'Scooter mechanic', 'Farmer']\nviews = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.bar(categories, views, color='blue')\n\n# Set the title and labels\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsentiment_data = [8, 31, 24, 7, 10, 10, 10]\nauthor_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the sentiment data\nax.bar(categories, sentiment_data, color='blue')\n\n# Plot the author data\nfor i, v in enumerate(author_data):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Social Media Posts')\nax.set_xlabel('Categories')\nax.set_ylabel('Sentiment Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Context: The human body can tolerate only a')\n\n# Set the x-axis label\nax.set_xlabel('Word')\n\n# Set the y-axis label\nax.set_ylabel('Probability')\n\n# Set the x-ticks\nax.set_xticks(range(len(words)))\nax.set_xticklabels(words)\n\n# Set the y-limits\nax.set_ylim([0, 0.3])\n\n# Set the y-ticks\nax.set_yticks([0, 0.1, 0.2, 0.3])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['#ff6347', '#b0c4de'])\n\n# Plot the data\nfor i, word in enumerate(words):\n    ax.bar(word, probabilities[i], color='#ff6347' if i % 2 == 0 else '#b0c4de')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data\nmodels = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nprobabilities = [0.75, 0.85, 0.90, 0.95, 0.80]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(models, probabilities, color='blue')\n\n# Add title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Car Models')\nax.set_ylabel('Probability of Improvement')\n\n# Show plot\nplt.show()"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='coral')\n\n# Set the title and labels\nax.set_title('Emotion Frequency')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\n# Define the data\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideos = [450, 600, 500, 700, 800, 900]\n\n# Create a bar chart\nax.bar(professions, videos, color='blue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Global Economy')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\n"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Real Estate Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the x-axis limits\nax.set_xlim(90, 80)\n\n# Set the y-axis limits\nax.set_ylim(0, 70)\n\n# Set the x-axis ticks\nax.set_xticks(range(90, 80, -10))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 70, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2020', '2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['$0', '$10', '$20', '$30', '$40', '$50', '$60', '$70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Real Estate Market Analysis', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Year', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [80, 70, 60, 50, 40, 30, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a bar chart\nax.bar(categories, values, color='blue')\n\n# Set the title of the chart\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Set the x-axis label\nax.set_xlabel('Semantic Category')\n\n# Set the y-axis label\nax.set_ylabel('Difference (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.02, 0.01]\n\n# Create a bar chart\nplt.bar(emotions, frequencies, color='skyblue')\n\n# Set the title and labels\nplt.title('Emotion Frequency')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Set the figure size\nfig = plt.gcf()\nfig.set_size_inches(8, 8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Yelp')\n\n# Set the x-axis label\nax.set_xlabel('Sentiment')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Define the data for the graph\nsentiments = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\npercentages = [-7.0, -8.5, -10.9, -15.9, -19.7]\n\n# Plot the data\nax.bar(sentiments, percentages, color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Tech Company Performance')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Set the x-axis ticks\nax.set_xticks([2010, 2015, 2020, 2025, 2030])\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 350, 50))\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '50', '100', '150', '200', '250', '300', '350'])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['2010', '2015', '2020', '2025', '2030'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'o-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'ro')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'g-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'go')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'b-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'bo')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'r-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'ro')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'g-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'go')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'b-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'bo')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'r-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'ro')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'g-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'go')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'b-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'bo')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'r-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'ro')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'g-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'go')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'b-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'bo')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'r-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'ro')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'g-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'go')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'b-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'bo')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'r-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'ro')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'g-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'go')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'b-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'bo')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'r-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'ro')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'g-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'go')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'b-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'bo')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'r-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'ro')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'g-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'go')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'b-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'bo')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'r-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'ro')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'g-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'go')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'b-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'bo')\n\n# Set the color of the line\nax.plot([2010, 2015, 2020, 2025, 2030], [200, 250, 275, 290, 310], 'r-')\n\n# Set the color of the markers\nax.plot([2010, 2015, 2020, 2025, 2030"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a bar chart for synthetic data\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, synthetic_data, color='blue')\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Percentage')\nax.set_title('Sentiment Analysis of Synthetic Data')\n\n# Create a bar chart for human-authored data\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, human_authored_data, color='orange')\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Percentage')\nax.set_title('Sentiment Analysis of Human-Authored Data')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Scores by Category Over Time')\n\n# Define the categories and their scores\ncategories = ['Time 0', 'Time 20', 'Time 40', 'Time 60']\nscores = [0.7, 0.5, 0.3, 0.1]\n\n# Plot the data\nax.bar(categories, scores, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Air Quality Metrics by Region')\n\n# Define the regions and their corresponding air quality metrics\nregions = ['CO2 (ppm)', 'PM (\u00b5g/m\u00b3)', 'SO2 (\u00b5g/m\u00b3)', 'NO2 (\u00b5g/m\u00b3)']\nmetrics = [40.44, 54.46, 56.03, 58.23, 60.45, 62.65, 64.49, 65.49, 66.5, 67.51, 68.52, 69.53, 70.54, 71.55, 72.56, 73.57, 74.58, 75.59, 76.6, 77.61, 78.62, 79.63, 80.64, 81.65, 82.66, 83.67, 84.68, 85.69, 86.7, 87.71, 88.72, 89.73, 90.74, 91.75, 92.76, 93.77, 94.78, 95.79, 96.8, 97.81, 98.82, 99.83, 100.84]\n\n# Create a bar chart with the regions and their corresponding air quality metrics\nax.bar(regions, metrics)\n\n# Set the x-axis label\nax.set_xlabel('Regions')\n\n# Set the y-axis label\nax.set_ylabel('Air Quality Metrics')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scores by group and constraint word count')\n\n# Define the data for the bar chart\nbar_width = 0.25\nindex = range(1, 7)\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '9 Constraint Words', '11 Constraint Words', '13 Constraint Words']\nscores = [-2.2, -2.3, -3.3, -3.2, -2.4, -2.5]\n\n# Create a bar chart with the data\nbars = ax.bar(index, scores, bar_width, color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar_width / 2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the x-axis tick labels\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(constraint_words)\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis label\nax.set_xlabel('Constraint Word Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Negative GDP Growth Rates by Country and Year')\n\n# Set the x-axis label\nax.set_xlabel('GDP Growth Rate (%)')\n\n# Set the y-axis label\nax.set_ylabel('Country')\n\n# Define the data for the bars\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_rates = [-0.5, -0.3, -0.2, -0.1]\n\n# Create a bar chart with the data\nbars = ax.barh(countries, gdp_growth_rates, color='blue')\n\n# Add a legend to the plot\nax.legend(['GDP growth rate'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'LaVIA']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.bar(models, performance, color='blue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Performance (%)')\n\n# Add a horizontal line at y=50\nax.axhline(y=50, color='gray', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 80]\ncolors = ['blue', 'cyan', 'green', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(categories, values, color=colors)\n\n# Set the title and labels\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the chart\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Set the x-axis label\nax.set_xlabel('Product Categories')\n\n# Set the y-axis label\nax.set_ylabel('Sales Units')\n\n# Define the data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales = [80, 60, 40, 20, 0, 20, 40]\ncolors = ['red', 'orange', 'pink', 'yellow', 'lightblue', 'green', 'purple']\n\n# Create a stacked bar chart\nax.bar(categories, sales, color=colors)\n\n# Add annotations to each bar\nfor i, v in enumerate(sales):\n    ax.text(i, v + 5, str(v), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\naccuracies = [0.83, 0.6, 0.11]\nembeddings = [0.94, 0.12, 0.67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(categories, accuracies, color='lightgrey')\nax.plot(categories, embeddings, marker='o', linestyle='--', color='green')\n\n# Set the title and labels\nax.set_title('Feature Embedding Distance')\nax.set_xlabel('Categories')\nax.set_ylabel('Feature Embedding Distance (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6]\ny = [10, 8, 12, 10, 6, 8]\ny2 = [11, 5, 10, 10, 12, 15]\ny3 = [8, 8, 6, 9, 12, 7]\ny4 = [10, 10, 10, 12, 12, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y, color='blue')\nax.plot(x, y2, color='green')\nax.plot(x, y3, color='red')\nax.plot(x, y4, color='purple')\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend(['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5, 6])\nax.set_xticklabels(['Coreutils', 'Gzip', 'Scp', 'Libq', 'Mcf', 'Omnet.', 'Perl'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nax.bar(brands, improvement, color='blue')\n\n# Add labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Improvement [%]')\nax.set_title('Model Performance Improvement by Language')\n\n# Add a color bar for languages\ncbar = fig.colorbar(ax.images[0])\ncbar.set_ticks(range(len(languages)))\ncbar.set_ticklabels(languages)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nfiscal_quarter = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, -0.8]\nnasdaq_index = [0.6, 2.2, -0.6, 4.6, -1.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(fiscal_quarter, dow_jones_index, label='Dow Jones Index', color='#7CFC00')\nax.plot(fiscal_quarter, nasdaq_index, label='Nasdaq Index', color='#FFA500')\n\n# Set the title and labels\nax.set_title('Stock Market Indexes Over Fiscal Quarters')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny = [39.4, 35.18, 30.84, 34.06]\ny2 = [35.1, 34.06, 33.0, 32.0, 30.0, 28.0, 26.82, 24.27, 22.2, 20.0, 18.84, 16.96, 14.66, 12.0, 9.0, 7.0]\ny3 = [35.1, 34.06, 33.0, 32.0, 30.0, 28.0, 26.82, 24.27, 22.2, 20.0, 18.84, 16.96, 14.66, 12.0, 9.0, 7.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y, label='Series 1')\nax.plot(x, y2, label='Series 2')\nax.plot(x, y3, label='Series 3')\n\n# Set the title and labels\nax.set_title('Stock Prices')\nax.set_xlabel('Date')\nax.set_ylabel('Price')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntruthful = [46.3, 57.9, 53.8, 43.7]\nmisleading = [30.1, 34, 20, 20]\nlabels = ['Truthful Recall', 'Misleading Recall']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.bar(labels, truthful, color='black')\nax.bar(labels, misleading, bottom=truthful, color='#FFC0CB')\n\n# Set the title and labels\nax.set_title('Truthful:Misleading = 2:1')\nax.set_xlabel('Recall')\nax.set_ylabel('Percentage')\n\n# Set the y-axis limits\nax.set_ylim(0, 60)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact by Sector')\n\n# Set the x-axis label\nax.set_xlabel('Industry Sectors')\n\n# Set the y-axis label\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['Light Industry', 'Heavy Industry', 'Transportation', 'Residential', 'Manufacturing'])\n\n# Set the y-ticks\nax.set_yticks(range(-1600, 1000, 200))\nax.set_yticklabels(['-1600', '-1400', '-1200', '-1000', '-800', '-600', '-400', '-200', '0', '200', '400', '600', '800', '1000'])\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Current Year', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='blue')\nax.text(0.5, 0.5, 'Previous Year', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='orange')\n\n# Set the color of the bars\nax.bar([0, 1, 2, 3, 4], [1200, 1400, 1600, 1800, 2000], color='orange')\nax.bar([0, 1, 2, 3, 4], [1000, 1200, 1400, 1600, 1800], color='blue')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='blue'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='orange'))\nax.add_patch(plt.Rectangle((4, -1600), 1, 1600, color='orange'))\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((1, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((2, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((3, -1600), 1, 1600, color='blue'))\nax.add_patch(plt.Rectangle((4, -"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 15, 18, 22, 17]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.bar(cities, temperatures, color='skyblue')\n\n# Set title and labels\nax.set_title('Average City Temperatures')\nax.set_xlabel('Cities')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [150, 140, 160, 170]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(regions, emissions_2020, label='2020 Emissions')\nax.plot(regions, emissions_2021, label='2021 Emissions')\n\n# Set the title and labels\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xlabel('Regions')\nax.set_ylabel('Emissions (in tons)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar charts\ndata = {\n    'Question 1': [26, 32, 17, 15, 10, 26],\n    'Question 2': [13, 10, 29, 15, 10, 22],\n    'Question 3': [37, 35, 26, 32, 35, 37],\n    'Question 4': [19, 15, 12, 11, 9, 13],\n    'Question 5': [40, 33, 14, 13, 11, 21]\n}\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar charts\nfor i, (question, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, color=plt.cm.tab20(i), label=question)\n\n# Set the title and labels\nax.set_title('Survey Results')\nax.set_xlabel('Percentage')\nax.set_ylabel('Questions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(1, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks(range(1, 11))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 11, 2))\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 2), 2, 6, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 4), 1, 4, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 6), 8, 4, linewidth=1, edgecolor='r', facecolor='none')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 8), 4, 2, linewidth=1,"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Set the x-axis label\nax.set_xlabel('Num of Constraint Words')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Define the data for the plot\nx = [3, 4, 5, 6, 7, 8, 9, 10]\ny = [1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3]\n\n# Plot the data\nax.plot(x, y)\n\n# Add a legend\nax.legend(['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntruthful_recalcs = [46.3, 56.9, 53.8, 43.7]\nmisleading_recalcs = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.bar(brands, truthful_recalcs, color='blue')\nax.bar(brands, misleading_recalcs, bottom=truthful_recalcs, color='pink')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Misleading Recalls')\nax.set_title('Truthful:Misleading Recalls')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Toyota', 'Honda', 'Ford', 'Chevrolet', 'Dodge', 'BMW', 'Audi', 'Mercedes-Benz', 'Jaguar', 'Lexus']\nprobabilities = [25, 30, 18, 22, 24, 29, 27, 26, 28, 30]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.bar(brands, probabilities, color='blue')\n\n# Set the title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Car Brands')\nax.set_ylabel('Probability of Improvement')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nmetrics = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ncolors = ['pink', 'pink', 'pink', 'pink', 'pink', 'pink', 'pink', 'pink', 'pink', 'pink']\n\n# Data for the second chart\nmetrics2 = [7.1, 7.0, 6.5, 6.5, 5.5, 5.0, 5.0, 4.6, 4.6, 3.7, 3.0, 2.6]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting the first chart\nax1.bar(emotions, metrics, color=colors)\nax1.set_title('Frequency Metric 1')\nax1.set_xlabel('Emotion')\nax1.set_ylabel('Frequency')\n\n# Plotting the second chart\nax2.bar(emotions, metrics2, color=colors)\nax2.set_title('Frequency Metric 2')\nax2.set_xlabel('Emotion')\nax2.set_ylabel('Frequency')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Top 3 Video Games by Player Rating')\n\n# Set the x-axis label\nax.set_xlabel('Player Rating')\n\n# Set the y-axis label\nax.set_ylabel('Game Title')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0."}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncountries = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\nenergy_consumption = [1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]\nelectricity_production = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700]\nrenewable_energy_ratio = [10, 11, 12, 13, 14, 15, 16, 17]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart\nax.bar(countries, energy_consumption, color='red')\nax.bar(countries, electricity_production, bottom=energy_consumption, color='blue')\nax.bar(countries, renewable_energy_ratio, bottom=[i+j for i,j in zip(energy_consumption, electricity_production)], color='green')\n\n# Set the title and labels\nax.set_title('Energy Consumption and Production by Country')\nax.set_xlabel('Country')\nax.set_ylabel('Energy (TWh)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nsynthetic_data = [10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 5, 11, 16, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(range(len(synthetic_data)), synthetic_data, color='blue', label='Synthetic Data')\nax.bar(range(len(human_authored_data)), human_authored_data, color='red', label='Human-Authored Data')\n\n# Set the title and labels\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.set_xlabel('Data Type')\nax.set_ylabel('Percentage')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbeauty_data = [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5]\nyelp_data = [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2]\nmore_data = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the data\naxs[0, 0].bar(beauty_data, [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], color='blue')\naxs[0, 0].set_title('Beauty')\naxs[0, 0].set_xlabel('Time (in hours)')\naxs[0, 0].set_ylabel('Popularity (%)')\n\naxs[0, 1].bar(yelp_data, [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], color='red')\naxs[0, 1].set_title('Yelp')\naxs[0, 1].set_xlabel('Time (in hours)')\naxs[0, 1].set_ylabel('Popularity (%)')\n\naxs[1, 0].bar(more_data, [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], color='green')\naxs[1, 0].set_title('More')\naxs[1, 0].set_xlabel('Time (in hours)')\naxs[1, 0].set_ylabel('Popularity (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [-3.5, -3, -2.5, -2, -1.5, -1, -0.5, 0]\ny = [0.4, 0.3, 0.2, 0.1, 0, -0.1, -0.2, -0.3]\n\n# Data for the second graph\nx2 = [-3.5, -3, -2.5, -2, -1.5, -1, -0.5, 0]\ny2 = [0.4, 0.3, 0.2, 0.1, 0, -0.1, -0.2, -0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(x, y, 'r-')\nax.plot(x2, y2, 'b-')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Score')\nax.set_ylabel('Group')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Top-10 super families in training dataset')\n\n# Set the y-axis label\nax.set_ylabel('Model accuracy')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('GENIA')\n\n# Create a bar chart with the data\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [50, 40, 30, 20, 10], color='blue')\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [70, 60, 50, 40, 30], color='green')\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [80, 70, 60, 50, 40], color='red')\n\n# Set the y-axis label\nax.set_ylabel('Error correction rate (%)')\n\n# Set the x-axis label\nax.set_xlabel('Test cases')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [10, 15, 20, 25, 30, 35, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the scores\nax.bar(models, scores_a, color='red')\nax.bar(models, scores_b, bottom=scores_a, color='blue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Score A (%)')\n\n# Add a horizontal line for each model\nfor i, model in enumerate(models):\n    ax.axhline(y=scores_a[i], color='black', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the color bar\ncbar = fig.colorbar(ax.imshow([[0.2, 0.4, 0.6], [0.8, 1.0, 0.0], [0.2, 0.4, 0.6]]), ax=ax)\n\n# Set the title of the color bar\ncbar.set_label('Pheme')\n\n# Set the title of the plot\nax.set_title('Pheme Scores')\n\n# Set the x-axis labels\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['GCN', 'RvNN', 'Hyphen'])\n\n# Set the y-axis labels\nax.set_yticks([0, 1, 2])\nax.set_yticklabels(['GET', 'LMM', 'RvNN'])\n\n# Set the color map\ncmap = plt.cm.RdYlGn\n\n# Set the color bar orientation\ncbar.ax.set_aspect(10)\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Democrat', 'Mixed', 'Republican'])\n\n# Set the color bar tick locations\ncbar.set_ticks([0.2, 0.4, 0.6])\n\n# Set the color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Set the color bar tick label rotation\ncbar.set_tick_params(rotation=90)\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick label font variant\ncbar.set_tick_params(fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.set_tick_params(fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.set_tick_params(labelsize=10)\n\n# Set the color bar tick label font weight\ncbar.set_tick_params(fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.set_tick_params(fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.set_tick_params(fontfamily='monospace')\n\n# Set the color bar tick"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Data for plot 1\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s1')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 2\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s2')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 3\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s3')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 4\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s4')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 5\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s5')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 6\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s6')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 7\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s7')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 8\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s8')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 9\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s9')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 10\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s10')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 11\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s11')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 12\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s12')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 13\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s13')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 14\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s14')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 15\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s15')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 16\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s16')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 17\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s17')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 18\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s18')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 19\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s19')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 20\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s20')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 21\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s21')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 22\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s22')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 23\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s23')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 24\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s24')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 25\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s25')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 26\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s26')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 27\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s27')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 28\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s28')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 29\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s29')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 30\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s30')\nax.fill_between(x, y, color='gold', alpha=0.5)\nax.legend()\n\n# Data for plot 31\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, label='s31')\nax.fill_between"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Effort\neffort_data = [20.4, 29.6, 20.4, 14.3, 16.7, 20.4, 9.3]\neffort_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_colors = ['red', 'orange', 'yellow', 'green', 'darkgreen']\n\n# Data for Brainwave\nbrainwave_data = [23.8, 20.4, 14.3, 16.7, 20.4, 38.1, 7.1]\nbrainwave_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\nbrainwave_colors = ['red', 'orange', 'yellow', 'green', 'darkgreen']\n\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 3.0))\n\n# Plot Effort\naxs[0].bar(effort_labels, effort_data, color=effort_colors)\naxs[0].set_title('Effort')\n\n# Plot Brainwave\naxs[1].bar(brainwave_labels, brainwave_data, color=brainwave_colors)\naxs[1].set_title('Brainwave')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.set_title('Brightness')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Brightness (%)')\n\n# Create a figure and axis for the second subplot\nfig2, ax2 = plt.subplots(figsize=(10.0, 6.0))\nax2.set_title('Rate of Gain Change (%)')\nax2.set_xlabel('Time (s)')\nax2.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the third subplot\nfig3, ax3 = plt.subplots(figsize=(10.0, 6.0))\nax3.set_title('Scale')\nax3.set_xlabel('Time (s)')\nax3.set_ylabel('Scale (%)')\n\n# Create a figure and axis for the fourth subplot\nfig4, ax4 = plt.subplots(figsize=(10.0, 6.0))\nax4.set_title('Rotation Angle (\u00b0)')\nax4.set_xlabel('Time (s)')\nax4.set_ylabel('Rotation Angle (\u00b0)')\n\n# Create a figure and axis for the fifth subplot\nfig5, ax5 = plt.subplots(figsize=(10.0, 6.0))\nax5.set_title('Rate of Gain Change (%)')\nax5.set_xlabel('Time (s)')\nax5.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the sixth subplot\nfig6, ax6 = plt.subplots(figsize=(10.0, 6.0))\nax6.set_title('Rate of Gain Change (%)')\nax6.set_xlabel('Time (s)')\nax6.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the seventh subplot\nfig7, ax7 = plt.subplots(figsize=(10.0, 6.0))\nax7.set_title('Rate of Gain Change (%)')\nax7.set_xlabel('Time (s)')\nax7.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the eighth subplot\nfig8, ax8 = plt.subplots(figsize=(10.0, 6.0))\nax8.set_title('Rate of Gain Change (%)')\nax8.set_xlabel('Time (s)')\nax8.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the ninth subplot\nfig9, ax9 = plt.subplots(figsize=(10.0, 6.0))\nax9.set_title('Rate of Gain Change (%)')\nax9.set_xlabel('Time (s)')\nax9.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the tenth subplot\nfig10, ax10 = plt.subplots(figsize=(10.0, 6.0))\nax10.set_title('Rate of Gain Change (%)')\nax10.set_xlabel('Time (s)')\nax10.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the eleventh subplot\nfig11, ax11 = plt.subplots(figsize=(10.0, 6.0))\nax11.set_title('Rate of Gain Change (%)')\nax11.set_xlabel('Time (s)')\nax11.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twelfth subplot\nfig12, ax12 = plt.subplots(figsize=(10.0, 6.0))\nax12.set_title('Rate of Gain Change (%)')\nax12.set_xlabel('Time (s)')\nax12.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirteenth subplot\nfig13, ax13 = plt.subplots(figsize=(10.0, 6.0))\nax13.set_title('Rate of Gain Change (%)')\nax13.set_xlabel('Time (s)')\nax13.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the fourteenth subplot\nfig14, ax14 = plt.subplots(figsize=(10.0, 6.0))\nax14.set_title('Rate of Gain Change (%)')\nax14.set_xlabel('Time (s)')\nax14.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the fifteenth subplot\nfig15, ax15 = plt.subplots(figsize=(10.0, 6.0))\nax15.set_title('Rate of Gain Change (%)')\nax15.set_xlabel('Time (s)')\nax15.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the sixteenth subplot\nfig16, ax16 = plt.subplots(figsize=(10.0, 6.0))\nax16.set_title('Rate of Gain Change (%)')\nax16.set_xlabel('Time (s)')\nax16.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the seventeenth subplot\nfig17, ax17 = plt.subplots(figsize=(10.0, 6.0))\nax17.set_title('Rate of Gain Change (%)')\nax17.set_xlabel('Time (s)')\nax17.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the eighteenth subplot\nfig18, ax18 = plt.subplots(figsize=(10.0, 6.0))\nax18.set_title('Rate of Gain Change (%)')\nax18.set_xlabel('Time (s)')\nax18.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the nineteenth subplot\nfig19, ax19 = plt.subplots(figsize=(10.0, 6.0))\nax19.set_title('Rate of Gain Change (%)')\nax19.set_xlabel('Time (s)')\nax19.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twentieth subplot\nfig20, ax20 = plt.subplots(figsize=(10.0, 6.0))\nax20.set_title('Rate of Gain Change (%)')\nax20.set_xlabel('Time (s)')\nax20.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twenty-first subplot\nfig21, ax21 = plt.subplots(figsize=(10.0, 6.0))\nax21.set_title('Rate of Gain Change (%)')\nax21.set_xlabel('Time (s)')\nax21.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twenty-second subplot\nfig22, ax22 = plt.subplots(figsize=(10.0, 6.0))\nax22.set_title('Rate of Gain Change (%)')\nax22.set_xlabel('Time (s)')\nax22.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twenty-third subplot\nfig23, ax23 = plt.subplots(figsize=(10.0, 6.0))\nax23.set_title('Rate of Gain Change (%)')\nax23.set_xlabel('Time (s)')\nax23.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twenty-fourth subplot\nfig24, ax24 = plt.subplots(figsize=(10.0, 6.0))\nax24.set_title('Rate of Gain Change (%)')\nax24.set_xlabel('Time (s)')\nax24.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twenty-fifth subplot\nfig25, ax25 = plt.subplots(figsize=(10.0, 6.0))\nax25.set_title('Rate of Gain Change (%)')\nax25.set_xlabel('Time (s)')\nax25.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twenty-sixth subplot\nfig26, ax26 = plt.subplots(figsize=(10.0, 6.0))\nax26.set_title('Rate of Gain Change (%)')\nax26.set_xlabel('Time (s)')\nax26.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twenty-seventh subplot\nfig27, ax27 = plt.subplots(figsize=(10.0, 6.0))\nax27.set_title('Rate of Gain Change (%)')\nax27.set_xlabel('Time (s)')\nax27.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twenty-eighth subplot\nfig28, ax28 = plt.subplots(figsize=(10.0, 6.0))\nax28.set_title('Rate of Gain Change (%)')\nax28.set_xlabel('Time (s)')\nax28.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the twenty-ninth subplot\nfig29, ax29 = plt.subplots(figsize=(10.0, 6.0))\nax29.set_title('Rate of Gain Change (%)')\nax29.set_xlabel('Time (s)')\nax29.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth subplot\nfig30, ax30 = plt.subplots(figsize=(10.0, 6.0))\nax30.set_title('Rate of Gain Change (%)')\nax30.set_xlabel('Time (s)')\nax30.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-first subplot\nfig31, ax31 = plt.subplots(figsize=(10.0, 6.0))\nax31.set_title('Rate of Gain Change (%)')\nax31.set_xlabel('Time (s)')\nax31.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-second subplot\nfig32, ax32 = plt.subplots(figsize=(10.0, 6.0))\nax32.set_title('Rate of Gain Change (%)')\nax32.set_xlabel('Time (s)')\nax32.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-third subplot\nfig33, ax33 = plt.subplots(figsize=(10.0, 6.0))\nax33.set_title('Rate of Gain Change (%)')\nax33.set_xlabel('Time (s)')\nax33.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-fourth subplot\nfig34, ax34 = plt.subplots(figsize=(10.0, 6.0))\nax34.set_title('Rate of Gain Change (%)')\nax34.set_xlabel('Time (s)')\nax34.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-fifth subplot\nfig35, ax35 = plt.subplots(figsize=(10.0, 6.0))\nax35.set_title('Rate of Gain Change (%)')\nax35.set_xlabel('Time (s)')\nax35.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-sixth subplot\nfig36, ax36 = plt.subplots(figsize=(10.0, 6.0))\nax36.set_title('Rate of Gain Change (%)')\nax36.set_xlabel('Time (s)')\nax36.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-seventh subplot\nfig37, ax37 = plt.subplots(figsize=(10.0, 6.0))\nax37.set_title('Rate of Gain Change (%)')\nax37.set_xlabel('Time (s)')\nax37.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-eighth subplot\nfig38, ax38 = plt.subplots(figsize=(10.0, 6.0))\nax38.set_title('Rate of Gain Change (%)')\nax38.set_xlabel('Time (s)')\nax38.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-ninth subplot\nfig39, ax39 = plt.subplots(figsize=(10.0, 6.0))\nax39.set_title('Rate of Gain Change (%)')\nax39.set_xlabel('Time (s)')\nax39.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-tenth subplot\nfig40, ax40 = plt.subplots(figsize=(10.0, 6.0))\nax40.set_title('Rate of Gain Change (%)')\nax40.set_xlabel('Time (s)')\nax40.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-eleventh subplot\nfig41, ax41 = plt.subplots(figsize=(10.0, 6.0))\nax41.set_title('Rate of Gain Change (%)')\nax41.set_xlabel('Time (s)')\nax41.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twelfth subplot\nfig42, ax42 = plt.subplots(figsize=(10.0, 6.0))\nax42.set_title('Rate of Gain Change (%)')\nax42.set_xlabel('Time (s)')\nax42.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-thirteenth subplot\nfig43, ax43 = plt.subplots(figsize=(10.0, 6.0))\nax43.set_title('Rate of Gain Change (%)')\nax43.set_xlabel('Time (s)')\nax43.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-fourteenth subplot\nfig44, ax44 = plt.subplots(figsize=(10.0, 6.0))\nax44.set_title('Rate of Gain Change (%)')\nax44.set_xlabel('Time (s)')\nax44.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-fifteenth subplot\nfig45, ax45 = plt.subplots(figsize=(10.0, 6.0))\nax45.set_title('Rate of Gain Change (%)')\nax45.set_xlabel('Time (s)')\nax45.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-sixteenth subplot\nfig46, ax46 = plt.subplots(figsize=(10.0, 6.0))\nax46.set_title('Rate of Gain Change (%)')\nax46.set_xlabel('Time (s)')\nax46.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-seventeenth subplot\nfig47, ax47 = plt.subplots(figsize=(10.0, 6.0))\nax47.set_title('Rate of Gain Change (%)')\nax47.set_xlabel('Time (s)')\nax47.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-eighteenth subplot\nfig48, ax48 = plt.subplots(figsize=(10.0, 6.0))\nax48.set_title('Rate of Gain Change (%)')\nax48.set_xlabel('Time (s)')\nax48.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-nineteenth subplot\nfig49, ax49 = plt.subplots(figsize=(10.0, 6.0))\nax49.set_title('Rate of Gain Change (%)')\nax49.set_xlabel('Time (s)')\nax49.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twentieth subplot\nfig50, ax50 = plt.subplots(figsize=(10.0, 6.0))\nax50.set_title('Rate of Gain Change (%)')\nax50.set_xlabel('Time (s)')\nax50.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twenty-first subplot\nfig51, ax51 = plt.subplots(figsize=(10.0, 6.0))\nax51.set_title('Rate of Gain Change (%)')\nax51.set_xlabel('Time (s)')\nax51.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twenty-second subplot\nfig52, ax52 = plt.subplots(figsize=(10.0, 6.0))\nax52.set_title('Rate of Gain Change (%)')\nax52.set_xlabel('Time (s)')\nax52.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twenty-third subplot\nfig53, ax53 = plt.subplots(figsize=(10.0, 6.0))\nax53.set_title('Rate of Gain Change (%)')\nax53.set_xlabel('Time (s)')\nax53.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twenty-fourth subplot\nfig54, ax54 = plt.subplots(figsize=(10.0, 6.0))\nax54.set_title('Rate of Gain Change (%)')\nax54.set_xlabel('Time (s)')\nax54.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twenty-fifth subplot\nfig55, ax55 = plt.subplots(figsize=(10.0, 6.0))\nax55.set_title('Rate of Gain Change (%)')\nax55.set_xlabel('Time (s)')\nax55.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twenty-sixth subplot\nfig56, ax56 = plt.subplots(figsize=(10.0, 6.0))\nax56.set_title('Rate of Gain Change (%)')\nax56.set_xlabel('Time (s)')\nax56.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twenty-seventh subplot\nfig57, ax57 = plt.subplots(figsize=(10.0, 6.0))\nax57.set_title('Rate of Gain Change (%)')\nax57.set_xlabel('Time (s)')\nax57.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twenty-eighth subplot\nfig58, ax58 = plt.subplots(figsize=(10.0, 6.0))\nax58.set_title('Rate of Gain Change (%)')\nax58.set_xlabel('Time (s)')\nax58.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure and axis for the thirtieth-twenty-ninth subplot\nfig59, ax59 = plt.subplots(figsize=(10.0, 6.0))\nax59.set_title('Rate of Gain Change (%)')\nax59.set_xlabel('Time (s)')\nax59.set_ylabel('Rate of Gain Change (%)')\n\n# Create a figure"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, -0.7]\nimprovement = [-1.0, 0.3, 3.4, -3.3, -2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.barh(brands, performance, color='blue')\nax.barh(brands, improvement, left=performance, color='green')\n\n# Set the title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Performance [m/s]')\nax.set_ylabel('Language')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Truthful: Misleading = 2:0')\n\n# Create a bar chart with the data\nax.bar(['Random', 'Ours', 'SOTA'], [66.3, 61.9, 53.8], color='blue')\nax.bar(['Random', 'Ours', 'SOTA'], [10.1, 13.6, 13.7], color='red')\n\n# Set the y-axis limits\nax.set_ylim(-80, 80)\n\n# Add a horizontal line at y=0\nax.axhline(0, color='black',linewidth=0.5)\n\n# Add a vertical line at x=0\nax.axvline(0, color='black',linewidth=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking 1')\n\n# Create a bar chart with the data\nax.bar(range(1, 7), [55, 45, 35, 25, 15, 5], color='pink')\n\n# Set the x-axis labels\nax.set_xticks(range(1, 7))\nax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nscores = [54.9, 71.5, 79.2, 60.3, 54.5, 56.8, 92.6, 89.2, 83.3]\nsearch_methods = ['Contrastive Search', 'Beam Search']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the scores\nax.bar(models, scores, color='navy')\n\n# Add search methods as a legend\nfor i, method in enumerate(search_methods):\n    ax.text(i, 100, method, rotation=90, verticalalignment='center', horizontalalignment='right')\n\n# Set the title\nax.set_title('Performance Comparison by Model')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(-1, len(models))\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny = [150.0, 180.0, 75.0, 90.0, 80.0]\ncolors = ['orange', 'orange', 'orange', 'orange', 'orange']\n\n# Data for the second graph\nx2 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny2 = [2.5, 2.0, 1.5, 2.0, 1.0]\ncolors2 = ['blue', 'blue', 'blue', 'blue', 'blue']\n\n# Data for the third graph\nx3 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny3 = [60.0, 55.0, 70.0, 65.0, 72.0]\ncolors3 = ['lightgreen', 'lightgreen', 'lightgreen', 'lightgreen', 'lightgreen']\n\n# Data for the fourth graph\nx4 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny4 = [80.0, 75.0, 90.0, 85.0, 88.0]\ncolors4 = ['yellow', 'yellow', 'yellow', 'yellow', 'yellow']\n\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\naxs[0, 0].bar(x, y, color=colors)\naxs[0, 0].set_title('Dataset 1')\naxs[0, 0].set_xlabel('Metrics')\naxs[0, 0].set_ylabel('Values')\n\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Dataset 2')\naxs[0, 1].set_xlabel('Metrics')\naxs[0, 1].set_ylabel('Values')\n\naxs[1, 0].bar(x3, y3, color=colors3)\naxs[1, 0].set_title('Dataset 3')\naxs[1, 0].set_xlabel('Metrics')\naxs[1, 0].set_ylabel('Values')\n\naxs[1, 1].bar(x4, y4, color=colors4)\naxs[1, 1].set_title('Dataset 4')\naxs[1, 1].set_xlabel('Metrics')\naxs[1, 1].set_ylabel('Values')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('Dominance')\nax.set_xlabel('SAM Rating')\nax.set_ylabel('Color')\n\n# Define the data for each color\ncolors = ['neutral', 'yellow high', 'yellow low', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'red high']\nsam_ratings = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndominance = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Plot the data\nfor i in range(len(colors)):\n    ax.plot(sam_ratings, [dominance[i]] * len(sam_ratings), label=colors[i], linewidth=5)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a bar chart for gaming duration\ngaming_duration = [20, 30, 40, 50, 60]\ngaming_intensity = [10, 20, 30, 40, 50]\nax.bar(gaming_duration, gaming_intensity, color='blue', label='Gaming Duration')\n\n# Create a bar chart for exercise duration\nexercise_duration = [20, 30, 40, 50, 60]\nexercise_intensity = [15, 25, 35, 45, 55]\nax.bar(exercise_duration, exercise_intensity, color='green', label='Exercise Duration')\n\n# Create a bar chart for reading duration\nreading_duration = [20, 30, 40, 50, 60]\nreading_intensity = [12, 22, 32, 42, 52]\nax.bar(reading_duration, reading_intensity, color='red', label='Reading Duration')\n\n# Create a bar chart for music playtime\nmusic_playtime = [20, 30, 40, 50, 60]\nmusic_intensity = [18, 28, 38, 48, 58]\nax.bar(music_playtime, music_intensity, color='purple', label='Music Playtime')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Duration (minutes)')\n\n# Set the y-axis label\nax.set_ylabel('Intensity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('1.0 BLEU')\n\n# Set the x-axis label\nax.set_xlabel('Llama-70b (T2TT)')\n\n# Set the y-axis label\nax.set_ylabel('Llama-70b (S2TT)')\n\n# Draw a rectangle for the first model\nax.add_patch(plt.Rectangle((0.5, 0.5), 1, 1, color='blue'))\n\n# Draw a rectangle for the second model\nax.add_patch(plt.Rectangle((2.5, 0.5), 1, 1, color='red'))\n\n# Draw a rectangle for the third model\nax.add_patch(plt.Rectangle((4.5, 0.5), 1, 1, color='green'))\n\n# Draw a rectangle for the fourth model\nax.add_patch(plt.Rectangle((0.5, 2.5), 1, 1, color='yellow'))\n\n# Draw a rectangle for the fifth model\nax.add_patch(plt.Rectangle((2.5, 2.5), 1, 1, color='orange'))\n\n# Draw a rectangle for the sixth model\nax.add_patch(plt.Rectangle((4.5, 2.5), 1, 1, color='purple'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\nax.plot(x, y1, label='AlphaBeta')\nax.plot(x, y2, label='z+')\nax.plot(x, y3, label='Gamma(g=0.05)')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Trigonometric Functions')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Execution Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the bar chart\nalgorithms = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\naccuracies = [0.875, 0.875, 0.85, 0.9, 0.875]\n\n# Create a bar chart\nax.bar(algorithms, accuracies, color='lightblue')\n\n# Set the limits of the y-axis\nax.set_ylim(0.75, 0.95)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the left plot\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.set_title('Region Classification Accuracy')\nax.set_xlabel('Regions')\nax.set_ylabel('Accuracy')\n\n# Create a bar chart for the left plot\nregions = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\naccuracies = [0.88, 0.87, 0.83]\nax.bar(regions, accuracies, color='blue')\n\n# Add a scatter plot for the left plot\nax.scatter(regions, accuracies, color='red')\n\n# Create a figure and axis for the right plot\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.set_title('Slice Mean Error (ms)')\nax.set_xlabel('Regions')\nax.set_ylabel('Error')\n\n# Create a bar chart for the right plot\nerrors = [9.00, 9.33, 9.00]\nax.bar(regions, errors, color='green')\n\n# Add a scatter plot for the right plot\nax.scatter(regions, errors, color='red')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Z-Score')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Create a scatter plot\nax.scatter([1, 2, 3], [5, 6, 7], color='blue')\n\n# Create a bar chart\nax.bar([1, 2, 3], [10, 11, 12], color='orange')\n\n# Create a histogram\nax.hist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bins=5, color='green')\n\n# Create a line plot\nax.plot([1, 2, 3], [15, 16, 17], color='red')\n\n# Create a pie chart\nax.pie([1, 2, 3], colors=['purple', 'pink', 'brown'])\n\n# Create a box plot\nax.boxplot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vert=False)\n\n# Create a heatmap\nax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nX, Y = np.meshgrid(np.linspace(-1, 1, 10), np.linspace(-1, 1, 10))\nZ = X**2 + Y**2\nCS = ax.contour(X, Y, Z, levels=[0.5, 1, 2, 3])\n\n# Create a stream plot\nU, V = np.mgrid[0:5, 0:5]\nax.streamplot(U, V, U, V)\n\n# Create a polar plot\nax.polar()\n\n# Create a 3D plot\nax.plot_surface(X, Y, Z, cmap='viridis')\n\n# Create a 3D scatter plot\nax.scatter3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='blue')\n\n# Create a 3D bar chart\nax.bar3d([1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9], color='green')\n\n# Create a 3D histogram\nax.hist3D([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bins=5, color='purple')\n\n# Create a 3D line plot\nax.plot3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='red')\n\n# Create a 3D pie chart\nax.pie3D([1, 2, 3], colors=['brown', 'grey', 'black'])\n\n# Create a 3D box plot\nax.boxplot3D([1, 2, 3], vert=False)\n\n# Create a 3D heatmap\nax.imshow3D([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nCS = ax.contour3D(X, Y, Z, levels=[0.5, 1, 2, 3])\n\n# Create a 3D stream plot\nax.streamplot3D(U, V, U, V)\n\n# Create a 3D polar plot\nax.polar3D()\n\n# Create a 3D 3D plot\nax.plot_surface3D(X, Y, Z, cmap='viridis')\n\n# Create a 3D 3D scatter plot\nax.scatter3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='blue')\n\n# Create a 3D 3D bar chart\nax.bar3D([1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9], color='green')\n\n# Create a 3D 3D histogram\nax.hist3D([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bins=5, color='purple')\n\n# Create a 3D 3D line plot\nax.plot3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='red')\n\n# Create a 3D 3D pie chart\nax.pie3D([1, 2, 3], colors=['brown', 'grey', 'black'])\n\n# Create a 3D 3D box plot\nax.boxplot3D([1, 2, 3], vert=False)\n\n# Create a 3D 3D heatmap\nax.imshow3D([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D contour plot\nCS = ax.contour3D(X, Y, Z, levels=[0.5, 1, 2, 3])\n\n# Create a 3D 3D stream plot\nax.streamplot3D(U, V, U, V)\n\n# Create a 3D 3D polar plot\nax.polar3D()\n\n# Create a 3D 3D 3D plot\nax.plot_surface3D(X, Y, Z, cmap='viridis')\n\n# Create a 3D 3D 3D scatter plot\nax.scatter3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='blue')\n\n# Create a 3D 3D 3D bar chart\nax.bar3D([1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9], color='green')\n\n# Create a 3D 3D 3D histogram\nax.hist3D([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bins=5, color='purple')\n\n# Create a 3D 3D 3D line plot\nax.plot3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='red')\n\n# Create a 3D 3D 3D pie chart\nax.pie3D([1, 2, 3], colors=['brown', 'grey', 'black'])\n\n# Create a 3D 3D 3D box plot\nax.boxplot3D([1, 2, 3], vert=False)\n\n# Create a 3D 3D 3D heatmap\nax.imshow3D([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D 3D contour plot\nCS = ax.contour3D(X, Y, Z, levels=[0.5, 1, 2, 3])\n\n# Create a 3D 3D 3D stream plot\nax.streamplot3D(U, V, U, V)\n\n# Create a 3D 3D 3D polar plot\nax.polar3D()\n\n# Create a 3D 3D 3D 3D plot\nax.plot_surface3D(X, Y, Z, cmap='viridis')\n\n# Create a 3D 3D 3D 3D scatter plot\nax.scatter3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='blue')\n\n# Create a 3D 3D 3D 3D bar chart\nax.bar3D([1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9], color='green')\n\n# Create a 3D 3D 3D 3D histogram\nax.hist3D([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bins=5, color='purple')\n\n# Create a 3D 3D 3D 3D line plot\nax.plot3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='red')\n\n# Create a 3D 3D 3D 3D pie chart\nax.pie3D([1, 2, 3], colors=['brown', 'grey', 'black'])\n\n# Create a 3D 3D 3D 3D box plot\nax.boxplot3D([1, 2, 3], vert=False)\n\n# Create a 3D 3D 3D 3D heatmap\nax.imshow3D([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D 3D 3D contour plot\nCS = ax.contour3D(X, Y, Z, levels=[0.5, 1, 2, 3])\n\n# Create a 3D 3D 3D 3D stream plot\nax.streamplot3D(U, V, U, V)\n\n# Create a 3D 3D 3D 3D polar plot\nax.polar3D()\n\n# Create a 3D 3D 3D 3D 3D plot\nax.plot_surface3D(X, Y, Z, cmap='viridis')\n\n# Create a 3D 3D 3D 3D 3D scatter plot\nax.scatter3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='blue')\n\n# Create a 3D 3D 3D 3D 3D bar chart\nax.bar3D([1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9], color='green')\n\n# Create a 3D 3D 3D 3D 3D histogram\nax.hist3D([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bins=5, color='purple')\n\n# Create a 3D 3D 3D 3D 3D line plot\nax.plot3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='red')\n\n# Create a 3D 3D 3D 3D 3D pie chart\nax.pie3D([1, 2, 3], colors=['brown', 'grey', 'black'])\n\n# Create a 3D 3D 3D 3D 3D box plot\nax.boxplot3D([1, 2, 3], vert=False)\n\n# Create a 3D 3D 3D 3D 3D heatmap\nax.imshow3D([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D 3D 3D 3D contour plot\nCS = ax.contour3D(X, Y, Z, levels=[0.5, 1, 2, 3])\n\n# Create a 3D 3D 3D 3D 3D stream plot\nax.streamplot3D(U, V, U, V)\n\n# Create a 3D 3D 3D 3D 3D polar plot\nax.polar3D()\n\n# Create a 3D 3D 3D 3D 3D 3D plot\nax.plot_surface3D(X, Y, Z, cmap='viridis')\n\n# Create a 3D 3D 3D 3D 3D 3D scatter plot\nax.scatter3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='blue')\n\n# Create a 3D 3D 3D 3D 3D 3D bar chart\nax.bar3D([1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9], color='green')\n\n# Create a 3D 3D 3D 3D 3D 3D histogram\nax.hist3D([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bins=5, color='purple')\n\n# Create a 3D 3D 3D 3D 3D 3D line plot\nax.plot3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='red')\n\n# Create a 3D 3D 3D 3D 3D 3D pie chart\nax.pie3D([1, 2, 3], colors=['brown', 'grey', 'black'])\n\n# Create a 3D 3D 3D 3D 3D 3D box plot\nax.boxplot3D([1, 2, 3], vert=False)\n\n# Create a 3D 3D 3D 3D 3D 3D heatmap\nax.imshow3D([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D 3D 3D 3D 3D contour plot\nCS = ax.contour3D(X, Y, Z, levels=[0.5, 1, 2, 3])\n\n# Create a 3D 3D 3D 3D 3D 3D stream plot\nax.streamplot3D(U, V, U, V)\n\n# Create a 3D 3D 3D 3D 3D 3D polar plot\nax.polar3D()\n\n# Create a 3D 3D 3D 3D 3D 3D 3D plot\nax.plot_surface3D(X, Y, Z, cmap='viridis')\n\n# Create a 3D 3D 3D 3D 3D 3D 3D scatter plot\nax.scatter3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='blue')\n\n# Create a 3D 3D 3D 3D 3D 3D 3D bar chart\nax.bar3D([1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9], color='green')\n\n# Create a 3D 3D 3D 3D 3D 3D 3D histogram\nax.hist3D([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bins=5, color='purple')\n\n# Create a 3D 3D 3D 3D 3D 3D 3D line plot\nax.plot3D([1, 2, 3], [4, 5, 6], [7, 8, 9], color='red')\n\n# Create a 3D 3D 3D 3D 3D 3D 3D pie chart\nax.pie3D([1, 2, 3], colors=['brown', 'grey', 'black'])\n\n# Create a 3D 3D 3D 3D 3D 3D 3D box plot\nax.boxplot3D([1, 2, 3], vert=False)\n\n# Create a 3D 3D 3D 3D 3D 3D 3D heatmap\nax.imshow3D([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D 3D 3D 3D 3D 3D contour plot\nCS = ax.contour3D(X, Y, Z, levels=[0.5, 1, 2, 3])\n\n# Create a 3D 3D 3D 3D 3D 3D 3D stream plot\nax.streamplot3D(U, V, U, V)\n\n# Create a 3D 3D 3D 3D 3D 3D 3D polar plot\nax.polar3D()\n\n# Create a 3D 3D 3D 3D 3D 3D 3D 3D plot\nax.plot_surface3D(X, Y, Z, cmap='viridis')\n\n# Create a 3D 3D 3D "}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim([1, 3])\n\n# Set the y-axis limits\nax.set_ylim([0, 1])\n\n# Set the title of the plot\nax.set_title('Mean')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Create a bar chart with the data\nbar_width = 0.2\nindex = np.arange(5)\nbar1 = ax.bar(index, [1.5, 2.5, 3.5, 4.5, 5.5], bar_width, label='REM', color='blue')\nbar2 = ax.bar(index + bar_width, [1.2, 2.2, 3.2, 4.2, 5.2], bar_width, label='No POP', color='green')\nbar3 = ax.bar(index + 2*bar_width, [1.8, 2.8, 3.8, 4.8, 5.8], bar_width, label='Separate M emb.', color='orange')\nbar4 = ax.bar(index + 3*bar_width, [1.6, 2.6, 3.6, 4.6, 5.6], bar_width, label='4 x 4 tokenizer', color='brown')\nbar5 = ax.bar(index + 4*bar_width, [1.4, 2.4, 3.4, 4.4, 5.4], bar_width, label='No latent space C', color='purple')\nbar6 = ax.bar(index + 5*bar_width, [1.3, 2.3, 3.3, 4.3, 5.3], bar_width, label='C w/o action inputs', color='pink')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_title('Mean')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(['1', '2', '3', '4', '5'])\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Run Performance')\n\n# Set the x-axis label\nax.set_xlabel('Run Number')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data for the plot\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([50, 60, 70, 80, 90, 100, 90, 80, 70, 60])\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightyellow')\n\n# Create a rectangle for the first subplot\nrect1 = plt.Rectangle((0.1, 0.8), 0.8, 0.2, color='pink')\nax.add_patch(rect1)\n\n# Create a rectangle for the second subplot\nrect2 = plt.Rectangle((0.1, 0.6), 0.8, 0.2, color='lightblue')\nax.add_patch(rect2)\n\n# Create a rectangle for the third subplot\nrect3 = plt.Rectangle((0.1, 0.4), 0.8, 0.2, color='lightgreen')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth subplot\nrect4 = plt.Rectangle((0.1, 0.2), 0.8, 0.2, color='lightgrey')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth subplot\nrect5 = plt.Rectangle((0.1, 0.0), 0.8, 0.2, color='lightcyan')\nax.add_patch(rect5)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.2))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.2))\n\n# Set the x-axis label\nax.set_xlabel('one by one')\n\n# Set the y-axis label\nax.set_ylabel('one by one')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Create a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Set the title of the plot\nax.set_title('BERT Base')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Ratings')\n\n# Create a bar chart\nax.bar(['Our Model', 'NTM+CL'], [2.5, 2.4], color='blue')\n\n# Set the y-axis limits\nax.set_ylim(2.2, 2.8)\n\n# Add a grid\nax.grid(True)\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Intrustion')\n\n# Create a bar chart\nax.bar(['Our Model', 'NTM+CL'], [0.7, 0.6], color='green')\n\n# Set the y-axis limits\nax.set_ylim(0.6, 0.8)\n\n# Add a grid\nax.grid(True)\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Ratings')\n\n# Create a bar chart\nax.bar(['Our Model', 'NTM+CL'], [2.5, 2.4], color='red')\n\n# Set the y-axis limits\nax.set_ylim(2.2, 2.8)\n\n# Add a grid\nax.grid(True)\n\n# Create a fourth subplot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Intrustion')\n\n# Create a bar chart\nax.bar(['Our Model', 'NTM+CL'], [0.7, 0.6], color='green')\n\n# Set the y-axis limits\nax.set_ylim(0.6, 0.8)\n\n# Add a grid\nax.grid(True)\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10.0, 5.0))\n\n# Plot the first subplot\naxs[0, 0].bar(['target', 'control'], [7, 6], color='blue')\naxs[0, 0].set_title('Digit span')\naxs[0, 0].set_ylabel('Correct word reaction time')\n\n# Plot the second subplot\naxs[0, 1].bar(['target', 'control'], [18, 16], color='orange')\naxs[0, 1].set_title('Lexical decision')\naxs[0, 1].set_ylabel('Correct response ratio')\n\n# Plot the third subplot\naxs[0, 2].bar(['target', 'control'], [14, 12], color='blue')\naxs[0, 2].set_title('Reaction time')\naxs[0, 2].set_ylabel('Time per tap [s]')\n\n# Plot the fourth subplot\naxs[1, 0].bar(['target', 'control'], [10, 9], color='orange')\naxs[1, 0].set_title('Trail making')\naxs[1, 0].set_ylabel('Correct word reaction time')\n\n# Plot the fifth subplot\naxs[1, 1].bar(['target', 'control'], [10, 9], color='blue')\naxs[1, 1].set_title('Lexical decision')\naxs[1, 1].set_ylabel('Correct response ratio')\n\n# Plot the sixth subplot\naxs[1, 2].bar(['target', 'control'], [10, 9], color='orange')\naxs[1, 2].set_title('Reaction time')\naxs[1, 2].set_ylabel('Time per tap [s]')\n\n# Add a diamond symbol to each subplot\nfor ax in axs.flat:\n    ax.plot([0.5, 0.5], [0.5, 1.5], 'k-')\n    ax.plot([0.5, 1.5], [0.5, 0.5], 'k-')\n    ax.plot([0.5, 0.5], [1.5, 1.5], 'k-')\n    ax.plot([0.5, 1.5], [1.5, 1.5], 'k-')\n    ax.plot([0.5, 0.5], [0.5, 0.5], 'k-')\n    ax.plot([0.5, 1.5], [0.5, 0.5], 'k-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Methods')\n\n# Create a bar chart with the data\nax.bar(['BG', 'IBP', 'SSP', 'NBP'], [70, 60, 80, 90], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Prediction Accuracy v_{D1}')\n\n# Set the y-axis label\nax.set_ylabel('Methods')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 400)\n\n# Set the y-axis limits\nax.set_ylim(-1, 0.7)\n\n# Set the x-axis ticks\nax.set_xticks([50, 100, 150, 200, 250, 300, 350, 400])\n\n# Set the y-axis ticks\nax.set_yticks([-0.5, -0.25, 0, 0.25, 0.5])\n\n# Set the x-axis label\nax.set_xlabel('Search depth')\n\n# Set the y-axis label\nax.set_ylabel('Reward')\n\n# Set the title of the plot\nax.set_title('Deep Q-Learning Agent Performance')\n\n# Plot the data\nax.plot([50, 100, 150, 200, 250, 300, 350, 400], [0.05, 0.04, 0.03, 0.02, 0.01, 0.005, 0.002, 0.001], 'b-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a bar chart with the data\nax.bar(['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration'], [65.1, 55.7, 50.3, 29.5], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Activity')\n\n# Set the y-axis label\nax.set_ylabel('Duration (minutes)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Mean Value')\n\n# Create a bar chart with the data\nax.bar(['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment'], [1.5, 2.5, 2.8, 2.2, 1.9], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Intervention Type')\n\n# Set the y-axis label\nax.set_ylabel('Mean Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-40, 40)\n\n# Set the y-axis limits\nax.set_ylim(-0.5, 7.5)\n\n# Set the y-axis ticks\nax.set_yticks([0, 2, 4, 6])\n\n# Set the y-axis labels\nax.set_yticklabels(['-40', '-20', '0', '20'])\n\n# Set the x-axis ticks\nax.set_xticks([-40, -20, 0, 20, 40])\n\n# Set the x-axis labels\nax.set_xticklabels(['-40', '-20', '0', '20', '40'])\n\n# Set the title of the plot\nax.set_title('Thrust vs Angular Frequency')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Metrics')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4])\nax.set_xticklabels(['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70])\n\n# Draw a rectangle for each bar\nax.bar([1, 2, 3, 4], [25, 45, 35, 15], color='blue')\nax.bar([1, 2, 3, 4], [35, 55, 45, 25], color='purple')\nax.bar([1, 2, 3, 4], [45, 65, 55, 35], color='orange')\nax.bar([1, 2, 3, 4], [55, 75, 65, 45], color='red')\n\n# Draw a line for each bar\nax.plot([1, 2, 3, 4], [25, 45, 35, 15], color='black')\nax.plot([1, 2, 3, 4], [35, 55, 45, 25], color='black')\nax.plot([1, 2, 3, 4], [45, 65, 55, 35], color='black')\nax.plot([1, 2, 3, 4], [55, 75, 65, 45], color='black')\n\n# Draw a rectangle for the logo\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='red'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 3.0))\n\n# Create a bar chart\nax.bar([0.2, 0.4, 0.6, 0.8], [0.1, 0.2, 0.3, 0.4], color='blue')\n\n# Set the title and labels\nax.set_title('Human Normalized Score')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Normalized Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Set the x-axis limits\nax.set_xlim(2.0, 5.0)\n\n# Set the y-axis limits\nax.set_ylim(-60, 60)\n\n# Set the grid\nax.grid(True)\n\n# Set the tick labels\nax.set_xticks([2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])\nax.set_yticks([-60, -40, -20, 0, 20, 40, 60])\n\n# Set the tick labels\nax.set_xticklabels(['2.0', '2.5', '3.0', '3.5', '4.0', '4.5', '5.0'])\nax.set_yticklabels(['-60', '-40', '-20', '0', '20', '40', '60'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.sp"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('CEE (dB)')\n\n# Set the y-axis label\nax.set_ylabel('SE (bps)')\n\n# Define the data for the plot\nx = np.linspace(-10, 0, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Add a legend\nax.legend(['Perfect', 'GMM (25%-75%)', 'GML (25%-75%)', 'AO (25%-75%)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(25, 8))\n\n# Set the title for each subplot\naxs[0].set_title('Linear travel times')\naxs[1].set_title('Exponential travel times')\naxs[2].set_title('Sigmoidal travel times')\n\n# Create a scatter plot for each subplot\nfor i in range(3):\n    axs[i].scatter(np.random.rand(10), np.random.rand(10))\n    axs[i].set_xlim([0, 1])\n    axs[i].set_ylim([0, 1])\n\n# Add a rectangle to each subplot\nfor i in range(3):\n    rect = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='blue', alpha=0.5)\n    axs[i].add_patch(rect)\n\n# Add a line to each subplot\nfor i in range(3):\n    axs[i].plot([0, 1], [0, 1], 'r-')\n\n# Add a circle to each subplot\nfor i in range(3):\n    circle = plt.Circle((0.5, 0.5), 0.2, color='red')\n    axs[i].add_artist(circle)\n\n# Add a text label to each subplot\nfor i in range(3):\n    axs[i].text(0.5, 0.5, 'P', horizontalalignment='center', verticalalignment='center', fontsize=20)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\nax.plot(x, y1, label='Only WSI Modality')\nax.plot(x, y2, label='Only CNV Modality')\nax.plot(x, y3, label='WSI+CNV Modality')\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('Modality Comparison')\n\n# Set the x and y labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Intensity')\n\n# Set the x and y limits\nax.set_xlim([0, 10])\nax.set_ylim([-1, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('0.25 HIAR')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.45, 0.8), 0.1, 0.1, color='black')\nax.add_patch(logo)\n\n# Create a rectangle for the heart rate monitor\nhrm = plt.Rectangle((0.45, 0.6), 0.1, 0.1, color='red')\nax.add_patch(hrm)\n\n# Create a rectangle for the ECG monitor\necg = plt.Rectangle((0.45, 0.4), 0.1, 0.1, color='blue')\nax.add_patch(ecg)\n\n# Create a rectangle for the blood pressure monitor\nbp = plt.Rectangle((0.45, 0.2), 0.1, 0.1, color='green')\nax.add_patch(bp)\n\n# Create a rectangle for the oxygen saturation monitor\nos = plt.Rectangle((0.45, 0.0), 0.1, 0.1, color='yellow')\nax.add_patch(os)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the labels of the x and y axes\nax.set_xlabel('Time (s)')\nax.set_ylabel('Value')\n\n# Set the ticks of the x and y axes\nax.set_xticks([0.25, 0.5, 0.75])\nax.set_yticks([0.25, 0.5, 0.75])\n\n# Set the tick labels of the x and y axes\nax.set_xticklabels(['HR', 'ECG', 'BP'])\nax.set_yticklabels(['O2 Sat', 'HR', 'ECG'])\n\n# Set the grid lines\nax.grid(True)\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('0.1 HIAR')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.45, 0.8), 0.1, 0.1, color='black')\nax.add_patch(logo)\n\n# Create a rectangle for the heart rate monitor\nhrm = plt.Rectangle((0.45, 0.6), 0.1, 0.1, color='red')\nax.add_patch(hrm)\n\n# Create a rectangle for the ECG monitor\necg = plt.Rectangle((0.45, 0.4), 0.1, 0.1, color='blue')\nax.add_patch(ecg)\n\n# Create a rectangle for the blood pressure monitor\nbp = plt.Rectangle((0.45, 0.2), 0.1, 0.1, color='green')\nax.add_patch(bp)\n\n# Create a rectangle for the oxygen saturation monitor\nos = plt.Rectangle((0.45, 0.0), 0.1, 0.1, color='yellow')\nax.add_patch(os)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the labels of the x and y axes\nax.set_xlabel('Time (s)')\nax.set_ylabel('Value')\n\n# Set the ticks of the x and y axes\nax.set_xticks([0.25, 0.5, 0.75])\nax.set_yticks([0.25, 0.5, 0.75])\n\n# Set the tick labels of the x and y axes\nax.set_xticklabels(['HR', 'ECG', 'BP'])\nax.set_yticklabels(['O2 Sat', 'HR', 'ECG'])\n\n# Set the grid lines\nax.grid(True)\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='viridis'))\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-80, 80)\nax.set_ylim(-80, 80)\n\n# Set the x-axis and y-axis ticks\nax.set_xticks([-80, -60, -40, -20, 0, 20, 40, 60, 80])\nax.set_yticks([-80, -60, -40, -20, 0, 20, 40, 60, 80])\n\n# Set the x-axis and y-axis tick labels\nax.set_xticklabels(['-80', '-60', '-40', '-20', '0', '20', '40', '60', '80'])\nax.set_yticklabels(['-80', '-60', '-40', '-20', '0', '20', '40', '60', '80'])\n\n# Set the color map\ncmap = plt.get_cmap('viridis')\n\n# Create a scatter plot\nscatter = ax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap=cmap)\n\n# Add a legend\nax.legend(*scatter.legend_elements(), title=\"Classes\")\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('darkgreen')\n\n# Create a grid of points\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the Z values using a function\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis', linewidth=0, antialiased=False)\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set the title of the plot\nax.set_title(r'$\\lambda(x, z)$')\n\n# Set the x and y labels\nax.set_xlabel('$x_1$')\nax.set_ylabel('$x_2$')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\n\n# Create a scatter plot with random data points\nx = np.random.randint(50, 160, 100)\ny = np.random.randint(50, 100, 100)\nax.scatter(x, y, c='blue')\n\n# Add a legend\nax.legend(['Female', 'Male'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Draw a circle with radius 10\ncircle1 = plt.Circle((0, 0), 10, color='blue', fill=False)\nax.add_artist(circle1)\n\n# Draw a circle with radius 8\ncircle2 = plt.Circle((0, 0), 8, color='green', fill=False)\nax.add_artist(circle2)\n\n# Draw a circle with radius 6\ncircle3 = plt.Circle((0, 0), 6, color='cyan', fill=False)\nax.add_artist(circle3)\n\n# Draw a circle with radius 4\ncircle4 = plt.Circle((0, 0), 4, color='magenta', fill=False)\nax.add_artist(circle4)\n\n# Draw a circle with radius 2\ncircle5 = plt.Circle((0, 0), 2, color='yellow', fill=False)\nax.add_artist(circle5)\n\n# Draw a circle with radius 0\ncircle6 = plt.Circle((0, 0), 0, color='red', fill=True)\nax.add_artist(circle6)\n\n# Draw a line from -10 to 10\nline1 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line1)\n\n# Draw a line from -10 to 10\nline2 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line2)\n\n# Draw a line from -10 to 10\nline3 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line3)\n\n# Draw a line from -10 to 10\nline4 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line4)\n\n# Draw a line from -10 to 10\nline5 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line5)\n\n# Draw a line from -10 to 10\nline6 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line6)\n\n# Draw a line from -10 to 10\nline7 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line7)\n\n# Draw a line from -10 to 10\nline8 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line8)\n\n# Draw a line from -10 to 10\nline9 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line9)\n\n# Draw a line from -10 to 10\nline10 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line10)\n\n# Draw a line from -10 to 10\nline11 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line11)\n\n# Draw a line from -10 to 10\nline12 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line12)\n\n# Draw a line from -10 to 10\nline13 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line13)\n\n# Draw a line from -10 to 10\nline14 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line14)\n\n# Draw a line from -10 to 10\nline15 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line15)\n\n# Draw a line from -10 to 10\nline16 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line16)\n\n# Draw a line from -10 to 10\nline17 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line17)\n\n# Draw a line from -10 to 10\nline18 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line18)\n\n# Draw a line from -10 to 10\nline19 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line19)\n\n# Draw a line from -10 to 10\nline20 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line20)\n\n# Draw a line from -10 to 10\nline21 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line21)\n\n# Draw a line from -10 to 10\nline22 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line22)\n\n# Draw a line from -10 to 10\nline23 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line23)\n\n# Draw a line from -10 to 10\nline24 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line24)\n\n# Draw a line from -10 to 10\nline25 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line25)\n\n# Draw a line from -10 to 10\nline26 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line26)\n\n# Draw a line from -10 to 10\nline27 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line27)\n\n# Draw a line from -10 to 10\nline28 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line28)\n\n# Draw a line from -10 to 10\nline29 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line29)\n\n# Draw a line from -10 to 10\nline30 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line30)\n\n# Draw a line from -10 to 10\nline31 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line31)\n\n# Draw a line from -10 to 10\nline32 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line32)\n\n# Draw a line from -10 to 10\nline33 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line33)\n\n# Draw a line from -10 to 10\nline34 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line34)\n\n# Draw a line from -10 to 10\nline35 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line35)\n\n# Draw a line from -10 to 10\nline36 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line36)\n\n# Draw a line from -10 to 10\nline37 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line37)\n\n# Draw a line from -10 to 10\nline38 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line38)\n\n# Draw a line from -10 to 10\nline39 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line39)\n\n# Draw a line from -10 to 10\nline40 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line40)\n\n# Draw a line from -10 to 10\nline41 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line41)\n\n# Draw a line from -10 to 10\nline42 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line42)\n\n# Draw a line from -10 to 10\nline43 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line43)\n\n# Draw a line from -10 to 10\nline44 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line44)\n\n# Draw a line from -10 to 10\nline45 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line45)\n\n# Draw a line from -10 to 10\nline46 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line46)\n\n# Draw a line from -10 to 10\nline47 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line47)\n\n# Draw a line from -10 to 10\nline48 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line48)\n\n# Draw a line from -10 to 10\nline49 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line49)\n\n# Draw a line from -10 to 10\nline50 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line50)\n\n# Draw a line from -10 to 10\nline51 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line51)\n\n# Draw a line from -10 to 10\nline52 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line52)\n\n# Draw a line from -10 to 10\nline53 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line53)\n\n# Draw a line from -10 to 10\nline54 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line54)\n\n# Draw a line from -10 to 10\nline55 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line55)\n\n# Draw a line from -10 to 10\nline56 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line56)\n\n# Draw a line from -10 to 10\nline57 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line57)\n\n# Draw a line from -10 to 10\nline58 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line58)\n\n# Draw a line from -10 to 10\nline59 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line59)\n\n# Draw a line from -10 to 10\nline60 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line60)\n\n# Draw a line from -10 to 10\nline61 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line61)\n\n# Draw a line from -10 to 10\nline62 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line62)\n\n# Draw a line from -10 to 10\nline63 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line63)\n\n# Draw a line from -10 to 10\nline64 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line64)\n\n# Draw a line from -10 to 10\nline65 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line65)\n\n# Draw a line from -10 to 10\nline66 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line66)\n\n# Draw a line from -10 to 10\nline67 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line67)\n\n# Draw a line from -10 to 10\nline68 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line68)\n\n# Draw a line from -10 to 10\nline69 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line69)\n\n# Draw a line from -10 to 10\nline70 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line70)\n\n# Draw a line from -10 to 10\nline71 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line71)\n\n# Draw a line from -10 to 10\nline72 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line72)\n\n# Draw a line from -10 to 10\nline73 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line73)\n\n# Draw a line from -10 to 10\nline74 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line74)\n\n# Draw a line from -10 to 10\nline75 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line75)\n\n# Draw a line from -10 to 10\nline76 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line76)\n\n# Draw a line from -10 to 10\nline77 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line77)\n\n# Draw a line from -10 to 10\nline78 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line78)\n\n# Draw a line from -10 to 10\nline79 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line79)\n\n# Draw a line from -10 to 10\nline80 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line80)\n\n# Draw a line from -10 to 10\nline81 = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line81)\n\n# Draw a line from -10 to 10\nline82 = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line82)\n\n# Draw a line from -10 to 10\nline83 = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line83)\n\n# Draw a line from -10 to 10"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('OrRd')\n\n# Create a grid of values\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\n\n# Plot the contour plot\ncontour = ax.contourf(X, Y, Z, cmap=cmap)\n\n# Add a color bar\nfig.colorbar(contour)\n\n# Set the title and labels\nax.set_title('Contour Plot')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim(8, 15)\n\n# Set the title of the plot\nax.set_title('Sine Wave')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a rectangle\nrectangle = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='pink')\nax.add_patch(rectangle)\n\n# Create a triangle\ntriangle = plt.Polygon([[0.25, 0.75], [0.75, 0.75], [0.5, 0.25]], color='pink')\nax.add_patch(triangle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data\nx = np.linspace(-1.0, 1.0, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Spearman Coefficient')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define the data\nx = np.linspace(7, 15, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Random Bundle')\nax.plot(x, y2, color='pink', label='Increase Price')\nax.plot(x, y3, color='green', label='Strategic (Ours)')\nax.plot(x, y4, color='red', label='Reserved price p_i')\n\n# Add a vertical line at x=10\nax.axvline(x=10, color='red', linestyle='--')\n\n# Add a horizontal line at y=0.5\nax.axhline(y=0.5, color='blue', linestyle='--')\n\n# Add a rectangle\nrect = plt.Rectangle((9, 0.3), 1, 0.2, color='gray')\nax.add_patch(rect)\n\n# Add a filled rectangle\nrect_filled = plt.Rectangle((11, 0.1), 1, 0.2, color='purple', alpha=0.5)\nax.add_patch(rect_filled)\n\n# Add a shaded region\nax.fill_between(x, y1, y2, where=y1 < y2, color='lightblue')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 > y4, color='lightgreen')\n\n# Add a shaded region\nax.fill_between(x, y5, y1, where=y5 > y1, color='lightpink')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lightgray')\n\n# Add a shaded region\nax.fill_between(x, y4, y5, where=y4 < y5, color='lightpurple')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightcyan')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightyellow')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightmagenta')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightbrown')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lightorange')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightnavy')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightolive')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lightindigo')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightviolet')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightcoral')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lightplum')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightazure')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightlavender')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lightmint')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightwheat')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightcopper')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightbronze')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightsilver')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lightgold')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightrose')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightivory')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lightmaroon')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill_between(x, y3, y5, where=y3 < y5, color='lightsienna')\n\n# Add a shaded region\nax.fill_between(x, y1, y3, where=y1 < y3, color='lightburlywood')\n\n# Add a shaded region\nax.fill_between(x, y2, y5, where=y2 < y5, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y3, y4, where=y3 < y4, color='lightkhaki')\n\n# Add a shaded region\nax.fill_between(x, y1, y4, where=y1 < y4, color='lightbeige')\n\n# Add a shaded region\nax.fill_between(x, y2, y3, where=y2 < y3, color='lighttan')\n\n# Add a shaded region\nax.fill_between(x, y1, y5, where=y1 < y5, color='lightchocolate')\n\n# Add a shaded region\nax.fill_between(x, y2, y4, where=y2 < y4, color='lightperu')\n\n# Add a shaded region\nax.fill"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 15)\n\n# Set the x-axis and y-axis ticks\nax.set_xticks([0, 0.1, 0.2, 0.3, 0.4, 0.5])\nax.set_yticks([0, 2, 4, 6, 8, 10, 12, 14])\n\n# Add a rectangle for the first product\nrect1 = plt.Rectangle((0.05, 0.05), 0.1, 0.1, color='blue', alpha=0.5)\nax.add_patch(rect1)\n\n# Add a rectangle for the second product\nrect2 = plt.Rectangle((0.25, 0.25), 0.1, 0.1, color='green', alpha=0.5)\nax.add_patch(rect2)\n\n# Add a rectangle for the third product\nrect3 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='red', alpha=0.5)\nax.add_patch(rect3)\n\n# Add a rectangle for the fourth product\nrect4 = plt.Rectangle((0.65, 0.65), 0.1, 0.1, color='purple', alpha=0.5)\nax.add_patch(rect4)\n\n# Add a rectangle for the fifth product\nrect5 = plt.Rectangle((0.85, 0.85), 0.1, 0.1, color='orange', alpha=0.5)\nax.add_patch(rect5)\n\n# Add a rectangle for the sixth product\nrect6 = plt.Rectangle((0.05, 0.25), 0.1, 0.1, color='cyan', alpha=0.5)\nax.add_patch(rect6)\n\n# Add a rectangle for the seventh product\nrect7 = plt.Rectangle((0.25, 0.45), 0.1, 0.1, color='magenta', alpha=0.5)\nax.add_patch(rect7)\n\n# Add a rectangle for the eighth product\nrect8 = plt.Rectangle((0.45, 0.65), 0.1, 0.1, color='yellow', alpha=0.5)\nax.add_patch(rect8)\n\n# Add a rectangle for the ninth product\nrect9 = plt.Rectangle((0.65, 0.85), 0.1, 0.1, color='black', alpha=0.5)\nax.add_patch(rect9)\n\n# Add a rectangle for the tenth product\nrect10 = plt.Rectangle((0.85, 0.05), 0.1, 0.1, color='white', alpha=0.5)\nax.add_patch(rect10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(-1, 1)\n\n# Set the y-axis limits\nax.set_ylim(-2, 0)\n\n# Set the x-axis ticks\nax.set_xticks([-1, -0.5, 0, 0.5, 1])\n\n# Set the y-axis ticks\nax.set_yticks([-2, -1.5, -1, -0.5, 0])\n\n# Set the x-axis labels\nax.set_xticklabels(['-1', '-0.5', '0', '0.5', '1'])\n\n# Set the y-axis labels\nax.set_yticklabels(['-2', '-1.5', '-1', '-0.5', '0'])\n\n# Set the title of the plot\nax.set_title('Log Probability')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=1)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('green')\nax.legend().get_texts()[1].set_color('orange')\n\n# Set the color of the bars\nax.barh(['Deep Ens.', 'Dropout', 'Laplace', 'SNPG', 'HET-XL', 'Baseline', 'GP', 'Shallow Ens.', 'DUQ', 'Corr. Pred.'], [0.5, 0.394, 0.443, 0.539, 0.541, 0.543, 0.552, 0.590, 0.819, 0.590], color='green')\nax.barh(['Deep Ens.', 'Dropout', 'Laplace', 'SNPG', 'HET-XL', 'Baseline', 'GP', 'Shallow Ens.', 'DUQ', 'Corr. Pred.'], [0.5, 0.394, 0.443, 0.539, 0.541, 0.543, 0.552, 0.590, 0.819, 0.590], color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Expert dimension')\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny = [5, 6, 5, 7, 6, 5, 6, 5]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the line\nax.plot(x, y, color='blue')\n\n# Set the color of the markers\nax.plot(x, y, 'o', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'purple'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the labels\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the title\nax.set_title('Expert dimension')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\naccuracies = [0.748, 0.762, 0.709]\nbaseline_1 = [0.715, 0.762, 0.687]\nbaseline_2 = [0.759, 0.748, 0.713]\nfedmm = [0.78, 0.78, 0.713]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(hospitals, accuracies, color='blue')\nax.plot(hospitals, baseline_1, marker='o', linestyle='-', color='blue')\nax.plot(hospitals, baseline_2, marker='o', linestyle='-', color='orange')\nax.plot(hospitals, fedmm, marker='o', linestyle='-', color='green')\n\n# Set the title and labels\nax.set_title('Accuracy by hospital and method')\nax.set_xlabel('Hospitals')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F0F0F0')\n\n# Set the title of the plot\nax.set_title('Car Prices (valuation 40)')\n\n# Set the x-axis label\nax.set_xlabel('Car Models')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the x-tick labels\nax.set_xticklabels(['GPT-4 Buyer (valuation 40)', 'Claude-2 Buyer (valuation 40)', 'Claude-3 Buyer (valuation 40)', 'GPT-3.5 Buyer (valuation 40)'])\n\n# Set the y-ticks\nax.set_yticks([-20, -10, 0, 10, 20])\n\n# Set the y-tick labels\nax.set_yticklabels(['-20', '-10', '0', '10', '20'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Sellers (valuation 60)', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'GPT-4', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='green')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Claude-2.1', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Claude-2', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'GPT-3.5', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='cyan')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('DNN Performance')\n\n# Set the x-axis label\nax.set_xlabel('Number of Layers')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5]\ny = [0.96, 0.95, 0.94, 0.93, 0.92]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-1, 5)\n\n# Set the y-axis limits\nax.set_ylim(0, 25)\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Posterior Accuracy (\u0394 to no prompting)')\n\n# Set the title of the plot\nax.set_title('Posterior Accuracy over Time')\n\n# Create a bar chart\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='blue')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='orange')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='green')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='red')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='purple')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.15, 0.2, 0.25, 0.3], color='brown')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Set the title of the graph\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Create a bar chart\nax.bar(['a', 'b', 'c'], [75, 85, 90], color='blue')\n\n# Add a legend\nax.legend(['Performance'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('FashionMNIST (NEURAL)')\nax.set_xlabel('Hyperparameters')\nax.set_ylabel('Metric')\n\n# Define the data for each bar\nbar_width = 0.25\nindex = range(1, 11)\nbar1 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\nbar2 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0]\nbar3 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0]\nbar4 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0]\nbar5 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n# Create the bars\nrects1 = ax.bar(index, bar1, bar_width, label='Model 1', color='blue')\nrects2 = ax.bar([i + bar_width for i in index], bar2, bar_width, label='Model 2', color='green')\nrects3 = ax.bar([i + 2 * bar_width for i in index], bar3, bar_width, label='Model 3', color='red')\nrects4 = ax.bar([i + 3 * bar_width for i in index], bar4, bar_width, label='Model 4', color='purple')\nrects5 = ax.bar([i + 4 * bar_width for i in index], bar5, bar_width, label='Model 5', color='orange')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xticks([i + 2 * bar_width for i in index])\nax.set_xticklabels(['128/0.5/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001', '0.0', '0.2', '0.4'])\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nenrollment_rates = [0.25, 0.35, 0.45, 0.65, 0.85]\n\n# Data for the second graph\ncountries2 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nteacher_ratios = [0.15, 0.25, 0.35, 0.45, 0.55]\n\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 6.0))\n\n# Plotting the first graph\naxs[0].bar(countries, enrollment_rates, color='purple')\naxs[0].set_title('Higher Education Enrollment Rate')\naxs[0].set_xlabel('Countries')\naxs[0].set_ylabel('Enrollment Rate')\n\n# Plotting the second graph\naxs[1].bar(countries2, teacher_ratios, color='green')\naxs[1].set_title('Student-Teacher Ratio')\naxs[1].set_xlabel('Countries')\naxs[1].set_ylabel('Ratio')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 3200, 10400]\nforest_coverage = [21, 34, 25, 28, 38]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.barh(regions, emissions, color='blue')\nax.barh(regions, forest_coverage, left=emissions, color='green')\n\n# Set the title and labels\nax.set_title('Annual Carbon Dioxide Emissions')\nax.set_xlabel('Emissions (in millions of metric tons)')\nax.set_ylabel('Regions')\n\n# Display the plot\nplt.show()\n\n# Data for the second graph\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nland_area = [1000, 2000, 3000, 4000, 5000]\nrenewable_energy_usage = [18, 20, 22, 24, 26]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.barh(regions, land_area, color='orange')\nax.barh(regions, renewable_energy_usage, left=land_area, color='red')\n\n# Set the title and labels\nax.set_title('Forest Coverage Rate')\nax.set_xlabel('Land Area (in millions of square kilometers)')\nax.set_ylabel('Regions')\n\n# Display the plot\nplt.show()\n\n# Data for the third graph\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\ntotal_energy_consumption = [45, 47, 49, 51, 53]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.barh(regions, total_energy_consumption, color='purple')\n\n# Set the title and labels\nax.set_title('Renewable Energy Usage')\nax.set_xlabel('Total Energy Consumption (in millions of kWh)')\nax.set_ylabel('Regions')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Set the title of the graph\nax.set_title('a')\n\n# Create a bar chart with the data\nax.bar(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'], [50, 60, 70, 80], color='purple')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '20%', '40%', '60%', '80%', '100%'])\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend(['Data'])\n\n# Set the title of the graph\nax.set_title('b')\n\n# Create a bar chart with the data\nax.bar(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'], [50, 60, 70, 80], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '20%', '40%', '60%', '80%', '100%'])\n\n# Set the background color of the plot\nax.set_facecolor('lightgreen')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend(['Data'])\n\n# Set the title of the graph\nax.set_title('c')\n\n# Create a bar chart with the data\nax.bar(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'], [50, 60, 70, 80], color='red')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '20%', '40%', '60%', '80%', '100%'])\n\n# Set the background color of the plot\nax.set_facecolor('yellow')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend(['Data'])\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.45, 0.9), 0.1, 0.1, color='white', fill=False)\nax.add_patch(logo)\n\n# Add text to the logo\nax.text(0.5, 0.95, 'Expert', ha='center', va='center')\nax.text(0.5, 0.85, 'Blind', ha='center', va='center')\nax.text(0.5, 0.75, 'Consultancy', ha='center', va='center')\nax.text(0.5, 0.65, 'Debate', ha='center', va='center')\nax.text(0.5, 0.55, 'Interactive Consultancy', ha='center', va='center')\nax.text(0.5, 0.45, 'Interactive Debate', ha='center', va='center')\n\n# Create a bar chart\nax.bar(['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human'], [80, 60, 70, 90], color='blue')\n\n# Set the y-axis label\nax.set_ylabel('Judge Accuracy (%)')\n\n# Set the x-axis label\nax.set_xlabel('Judge')\n\n# Set the y-axis limits\nax.set_ylim([0, 100])\n\n# Set the x-axis limits\nax.set_xlim([0, 4])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a bar chart\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [12, 14, 16, 18], color='blue')\n\n# Set the title of the chart\nax.set_title('Annual Average Temperature')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [2000, 3000, 4000, 5000, 6000]\nrenewable_energy_usage = [10, 15, 20, 25, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar chart\nax.bar(countries, energy_consumption, color='purple')\nax.bar(countries, renewable_energy_usage, bottom=energy_consumption, color='cyan')\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (Petajoules)')\nax.set_title('Total Energy Consumption by Country')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nratings = [0.30, 0.25, 0.20]\ncolors = ['red', 'green', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(models, ratings, color=colors)\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Energy Assessment Entity')\n\n# Create a bar chart with the data\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [90, 80, 70, 60], color='blue')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [80, 70, 60, 50], color='green')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [70, 60, 50, 40], color='purple')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [60, 50, 40, 30], color='orange')\n\n# Add a legend\nax.legend(['Efficiency', 'Costs'])\n\n# Add a grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Educational Metrics by Region')\n\n# Define the regions and their metrics\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nmetrics = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]\n\n# Create a bar chart\nax.bar(regions, metrics, color='lightgreen')\n\n# Add a horizontal line for the average metric\nax.axhline(y=60, color='black', linestyle='-')\n\n# Add a legend\nax.legend(['High School Graduation', 'Higher Education Enrollment'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\nrecalls = [46.3, 30.1, 57.9, 34.0]\nmisleading_recalls = [34.0, 55.0, 53.8, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(brands, recalls, color='navy')\nax.bar(brands, misleading_recalls, bottom=recalls, color='coral')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Recall Rates')\nax.set_title('Comparison of Recall Rates Across Products')\n\n# Add a legend\nax.legend(['Truthful Recall', 'Misleading Recall'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsatisfaction_scores = [15, 18, 20, 12, 17, 10, 8]\ncomplaint_rates = [75, 82, 78, 85, 80, 88, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nax.bar(categories, satisfaction_scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Satisfaction Scores')\nax.set_title('Customer Satisfaction by Category')\n\n# Draw a line between the two axes\nax2 = ax.twiny()\nax2.plot(complaint_rates, categories, color='red')\n\n# Add labels and title\nax2.set_xlabel('Complaint Rates')\nax2.set_title('Complaint Rate by Category')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [75, 82, 78, 85, 80, 88, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Create a bar chart\nax.bar(categories, values, color='blue')\n\n# Set the title of the chart\nax.set_title('Customer Satisfaction')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Satisfaction Rate (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the x-axis labels\nax.set_xlabel('Watering Frequency')\n\n# Set the y-axis labels\nax.set_ylabel('Impact on Plant Growth (\u0394 to control)')\n\n# Set the title of the plot\nax.set_title('Impact of Watering Frequency on Plant Growth')\n\n# Create a bar chart with the data\nax.bar(['Low', 'Medium', 'High'], [0.12, 0.15, 0.18], color='green')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncities = ['New York', 'Los Angeles', 'Chicago']\ntraffic_volume = [250, 230, 220]\npublic_transit = [175, 160, 150]\naccident_rate = [150, 140, 130]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the bar chart\nax.bar(cities, traffic_volume, color='green')\nax.bar(cities, public_transit, bottom=traffic_volume, color='blue')\nax.bar(cities, accident_rate, bottom=[x+y for x,y in zip(traffic_volume, public_transit)], color='red')\n\n# Set the title and labels\nax.set_title('Traffic Metrics by City')\nax.set_xlabel('City')\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('black')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the x-axis label\nax.set_xlabel('City')\n\n# Set the y-axis label\nax.set_ylabel('Environmental Impact Score')\n\n# Define the data for the bar chart\ncities = ['City A', 'City B', 'City C', 'City D']\nscores = [2.3, 1.7, 3.4, 2.9]\n\n# Create a bar chart\nax.bar(cities, scores, color='red')\n\n# Add a vertical line at the mean score\nmean_score = sum(scores) / len(scores)\nax.axvline(x=mean_score, color='black', linestyle='--')\n\n# Add a horizontal line at the median score\nmedian_score = sorted(scores)[len(scores) // 2]\nax.axhline(y=median_score, color='green', linestyle='-')\n\n# Add a rectangle for the air quality score\nair_quality_score = 2.5\nax.add_patch(plt.Rectangle((0, air_quality_score), 1, 0.5, color='pink'))\n\n# Add a rectangle for the water quality score\nwater_quality_score = 2.0\nax.add_patch(plt.Rectangle((0, water_quality_score), 1, 0.5, color='lightgreen'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nroles = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\ndurations = [84.97, 102.67, 78.22, 85.17, 90]\ntokens = [449.33, 780.67, 547.39, 612.99, 618.52]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.bar(roles, durations, color='blue')\nax.set_title('a) Speak duration of roles')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nax2.bar(roles, tokens, color='blue')\nax2.set_title('b) Speak tokens of roles')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Size of Data for Training and Validation')\nax.set_xlabel('Size of Data (in samples)')\nax.set_ylabel('True+ info (%)')\n\n# Add vertical lines at each data point\nfor xi, yi in zip(x, y):\n    ax.axvline(xi, color='black', linestyle='-')\n\n# Add horizontal lines at each data point\nfor xi, yi in zip(x, y):\n    ax.axhline(yi, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Out-of-domain accuracy')\n\n# Create a bar chart with the data\nax.bar(['all', 'arg-causal', 'test-0', 'test-1', 'test-2', 'test-3', 'test-4', 'test-5', 'test-6', 'constant'], [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816])\n\n# Add a vertical line at the x-axis\nax.axhline(y=0.834, color='r', linestyle='-')\n\n# Add a horizontal line at the y-axis\nax.axvline(x=0.834, color='b', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Mini Crosswords Performance')\n\n# Create a bar chart with the data\nax.bar(['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three'], [0.7, 0.8, 0.6, 0.5, 0.4], color='skyblue')\n\n# Add a vertical line at the current time\nax.axvline(x=0.5, color='black')\n\n# Add a red rectangle to indicate the current time\nax.add_patch(plt.Rectangle((0.5, 0), 0.1, 1, color='red'))\n\n# Add a text box to indicate the current time\nax.text(0.5, 1.1, 'ToT (0.675)', ha='center', va='center', bbox=dict(boxstyle=\"round,pad=0.5\", fc=\"white\", ec=\"black\"))\n\n# Set the x-axis limits\nax.set_xlim([0, 1])\n\n# Set the y-axis limits\nax.set_ylim([0, 1])\n\n# Set the x-axis tick labels\nax.set_xticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])\n\n# Set the y-axis tick labels\nax.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nlabels = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'DeBERTaV2', 'Llama2']\naccuracies = [55, 60, 58, 62, 57, 59, 64, 61, 56, 53]\ncolors = ['pink', 'skyblue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data\nfor i, label in enumerate(labels):\n    ax.barh(label, accuracies[i], color=colors[i%2])\n\n# Set the title and labels\nax.set_title('Model Accuracy')\nax.set_xlabel('Accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the chart\nax.set_title('Your Chart Title Here')\n\n# Set the x-axis label\nax.set_xlabel('A')\n\n# Set the y-axis label\nax.set_ylabel('B')\n\n# Set the x-axis limits\nax.set_xlim(-3.5, -1.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 2.5)\n\n# Set the x-axis ticks\nax.set_xticks([-3.5, -3.25, -3.0, -2.75, -2.5, -2.25, -2.0, -1.75, -1.5])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.5, 1, 1.5, 2, 2.5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-3.5', '-3.25', '-3.0', '-2.75', '-2.5', '-2.25', '-2.0', '-1.75', '-1.5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.5', '1', '1.5', '2', '2.5'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('lavender')\n\n# Set the color of the text\nax.text(-3.5, 2.5, 'Computational Social Science and Social Media', fontsize=12, color='black')\nax.text(-3.5, 2.25, 'Phonology, Morphology and Word Segmentation', fontsize=12, color='black')\nax.text(-3.5, 2.0, 'Information Retrieval and Text Mining', fontsize=12, color='black')\nax.text(-3.5, 1.75, 'Machine Learning for NLP', fontsize=12, color='black')\nax.text(-3.5, 1.5, 'Information Extraction', fontsize=12, color='black')\nax.text(-3.5, 1.25, 'Discourse and Pragmatics', fontsize=12, color='black')\nax.text(-3.5, 1.0, 'Syntax: Tagging, Chunking and Parsing', fontsize=12, color='black')\n\n# Set the color of the bars\nax.bar([-3.25, -3.0, -2.75, -2.5, -2.25, -2.0, -1.75, -1.5], [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6], color='lavender')\n\n# Set the color of the bar edges\nax.bar([-3.25, -3.0, -2.75, -2.5, -2.25, -2.0, -1.75, -1.5], [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6], edgecolor='black')\n\n# Set the color of the bar labels\nax.bar([-3.25, -3.0, -2.75, -2.5, -2.25, -2.0, -1.75, -1.5], [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6], label='Bar Label')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), fancybox=True, shadow=True, ncol=1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the x-axis labels\nx_labels = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\n\n# Set the y-axis values\ny_values = [0.12, 0.14, 0.16, 0.18, 0.20, 0.22]\n\n# Plot the data\nax.plot(x_labels, y_values, marker='o')\n\n# Set the title and labels\nax.set_title('Shouting Fraction (Fraction of videos)')\nax.set_xlabel('Region')\nax.set_ylabel('Fraction')\n\n# Add a legend\nax.legend(['Dataset mean', 'Mean'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Variable, Symmetric Error')\n\n# Create a scatter plot with random data\nax.scatter([1, 2, 3, 4, 5], [10, 15, 12, 18, 17])\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Incivility by Topic')\n\n# Set the x-axis label\nax.set_xlabel('Incivility (Fraction of Videos)')\n\n# Set the y-axis label\nax.set_ylabel('Topic')\n\n# Define the data for the plot\nx = [0.16, 0.18, 0.20, 0.22, 0.24, 0.26, 0.28]\ny = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\n\n# Plot the data\nax.plot(x, y, color='brown')\n\n# Add a legend\nax.legend(['Dataset mean', 'Mean'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [-19.6, -19.5, -19.4, -19.3]\ny1 = [-19.353+0.073, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny2 = [-19.394+0.018, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny3 = [-19.404+0.099, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny4 = [-19.314+0.050, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny5 = [-19.362+0.066, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny6 = [-19.374+0.080, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny7 = [-19.380+0.200, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny8 = [-19.220+0.200, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny9 = [-19.220+0.200, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny10 = [-19.220+0.200, -19.257+0.028, -19.257+0.028, -19.257+0.028]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, label='This work*')\nax.plot(x, y2, label='Shah et al.')\nax.plot(x, y3, label='Shah et al.')\nax.plot(x, y4, label='Banerjee et al.')\nax.plot(x, y5, label='Favale et al.')\nax.plot(x, y6, label='Favale et al.')\nax.plot(x, y7, label='Gomez-Valent')\nax.plot(x, y8, label='Gomez-Valent')\nax.plot(x, y9, label='Benisty et al.')\nax.plot(x, y10, label='Benisty et al.')\n\n# Set the limits of the x-axis\nax.set_xlim(-19.6, -19.0)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the x-axis label\nax.set_xlabel('Number of speakers')\n\n# Set the y-axis label\nax.set_ylabel('Unique speaker count mean')\n\n# Create a scatter plot\nax.scatter([5, 10, 15], [12, 14, 16], color='blue')\n\n# Create a line plot\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28], color='red')\n\n# Add a legend\nax.legend(['Unique speaker count mean', 'Unique shouter count mean'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Global News Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Date')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 25)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Set the y-axis ticks\nax.set_yticks([0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.5', '1', '1.5', '2', '2.5', '3', '3.5', '4', '4.5', '5'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Errorbar upper and lower limits')\n\n# Create a scatter plot with error bars\nx = [1, 2, 3, 4, 5]\ny = [1.5, 2.5, 3.5, 4.5, 5.5]\nyerr = [0.5, 0.5, 0.5, 0.5, 0.5]\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='r', capsize=5)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('variable, symmetric error')\n\n# Create a scatter plot\nax.scatter([0.5, 1.5, 2.5, 3.5], [1.5, 1.5, 1.5, 1.5], color='purple')\n\n# Create a line plot\nax.plot([0.5, 1.5, 2.5, 3.5], [1.5, 1.5, 1.5, 1.5], color='green')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the y-axis limits\nax.set_ylim(0, 2)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Set the x-axis label\nax.set_xlabel('time')\n\n# Set the y-axis label\nax.set_ylabel('value')\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([15, 20, 25, 30, 35])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['15', '20', '25', '30', '35'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Create a rectangle for the errorbar\nerrorbar = plt.Rectangle((0, 0), 1, 1, color='purple')\nax.add_patch(errorbar)\n\n# Create a scatter plot with the data points\nx = [0, 5, 10, 15, 20]\ny = [-2.1, -2.6, -2.9, -1.2, -1.0]\nax.scatter(x, y, color='purple')\n\n# Create a line plot with the error bars\nx = [0, 5, 10, 15, 20]\ny = [-2.1, -2.6, -2.9, -1.2, -1.0]\nax.errorbar(x, y, yerr=0.5, fmt='-o', ecolor='purple', capsize=5)\n\n# Set the limits of the x-axis\nax.set_xlim(0, 20)\n\n# Set the limits of the y-axis\nax.set_ylim(14, 19)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the vertices of the hexagon\nx = np.array([0, 1, 2, 3, 4, 5, 0])\ny = np.array([0, 1, 0, -1, 0, 1, 0])\n\n# Plot the hexagon\nax.plot(x, y, 'k-')\n\n# Add circles at each vertex\ncircles = [plt.Circle((x[i], y[i]), 0.1, color='blue') for i in range(len(x))]\nfor circle in circles:\n    ax.add_artist(circle)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-1, 6)\nax.set_ylim(-2, 2)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.2, color='pink')\nax.add_artist(circle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.5, 0.5]], color='pink')\nax.add_patch(star)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_patch(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.5, 0.1], [0.4, 0.2], [0.6, 0.2]], color='pink')\nax.add_patch(triangle)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='gray')\nax.add_line(line)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the plot\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the plot\nx = [0, 1, 2, 3, 4]\ny = [0, 1, 2, 3, 4]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('My Plot')\n\n# Set the x and y labels\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis.\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a circle for the sun.\ncircle = plt.Circle((5, 5), 2, color='orange')\nax.add_artist(circle)\n\n# Create a triangle for the Earth.\ntriangle = plt.Polygon([[3, 3], [7, 3], [5, 7]], closed=True, color='blue')\nax.add_patch(triangle)\n\n# Create a rectangle for the Moon.\nrectangle = plt.Rectangle((4, 4), 1, 1, color='grey')\nax.add_patch(rectangle)\n\n# Set the limits of the plot.\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the aspect ratio of the plot.\nax.set_aspect('equal')\n\n# Display the plot.\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('CoreNLP')\n\n# Create a rectangle for the CoreNLP section\nrect1 = plt.Rectangle((0.1, 0.7), 0.2, 0.3, color='lightblue')\nax.add_patch(rect1)\n\n# Create a rectangle for the Stanza section\nrect2 = plt.Rectangle((0.4, 0.7), 0.2, 0.3, color='lightcoral')\nax.add_patch(rect2)\n\n# Create a rectangle for the Biaffine section\nrect3 = plt.Rectangle((0.7, 0.7), 0.2, 0.3, color='lightsalmon')\nax.add_patch(rect3)\n\n# Create a rectangle for the StackPointer section\nrect4 = plt.Rectangle((0.1, 0.4), 0.2, 0.3, color='lightgreen')\nax.add_patch(rect4)\n\n# Create a rectangle for the TowerParse section\nrect5 = plt.Rectangle((0.4, 0.4), 0.2, 0.3, color='lightyellow')\nax.add_patch(rect5)\n\n# Create a rectangle for the AVG section\nrect6 = plt.Rectangle((0.7, 0.4), 0.2, 0.3, color='lavender')\nax.add_patch(rect6)\n\n# Create a rectangle for the CoreNLP section\nrect7 = plt.Rectangle((0.1, 0.1), 0.2, 0.3, color='lightblue')\nax.add_patch(rect7)\n\n# Create a rectangle for the Stanza section\nrect8 = plt.Rectangle((0.4, 0.1), 0.2, 0.3, color='lightcoral')\nax.add_patch(rect8)\n\n# Create a rectangle for the Biaffine section\nrect9 = plt.Rectangle((0.7, 0.1), 0.2, 0.3, color='lightsalmon')\nax.add_patch(rect9)\n\n# Create a rectangle for the StackPointer section\nrect10 = plt.Rectangle((0.1, 0.1), 0.2, 0.3, color='lightgreen')\nax.add_patch(rect10)\n\n# Create a rectangle for the TowerParse section\nrect11 = plt.Rectangle((0.4, 0.1), 0.2, 0.3, color='lightyellow')\nax.add_patch(rect11)\n\n# Create a rectangle for the AVG section\nrect12 = plt.Rectangle((0.7, 0.1), 0.2, 0.3, color='lavender')\nax.add_patch(rect12)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('CoreNLP')\nax.set_ylabel('Stanza')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Define the data for the pie chart\ndata = [50.8, 28.1, 2.6, 0.5, 4.1, 8.1, 15.5, 17.3, 13.9, 16.3]\nlabels = ['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the color of the text\nfor text in texts:\n    text.set_color('white')\n\n# Set the color of the percentage text\nfor autotext in autotexts:\n    autotext.set_color('white')\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a color bar which maps values to colors.\ncmap = plt.get_cmap(\"OrRd\")\nnorm = plt.Normalize(vmin=min(data), vmax=max(data))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm, ax=ax, orientation='vertical')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow([[1, 2], [3, 4]], cmap=cmap), ax=ax)\n\n# Set the title of the color bar\ncbar.set_label('Player Rating')\n\n# Set the title of the plot\nax.set_title('Player Ratings')\n\n# Set the labels for the x-axis\nax.set_xlabel('Players')\n\n# Set the labels for the y-axis\nax.set_ylabel('Ratings')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Live vs Predicted Category Similarity')\n\n# Set the x-axis label\nax.set_xlabel('Category')\n\n# Set the y-axis label\nax.set_ylabel('Similarity')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 51, 10))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 101, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.sp"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('LOH0')\n\n# Create a rectangle for the first column\nrect1 = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='gray')\nax.add_patch(rect1)\n\n# Create a rectangle for the second column\nrect2 = plt.Rectangle((0.4, 0.8), 0.2, 0.2, color='green')\nax.add_patch(rect2)\n\n# Create a rectangle for the third column\nrect3 = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='blue')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth column\nrect4 = plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='red')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth column\nrect5 = plt.Rectangle((0.4, 0.5), 0.2, 0.2, color='yellow')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth column\nrect6 = plt.Rectangle((0.7, 0.5), 0.2, 0.2, color='orange')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh column\nrect7 = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='purple')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth column\nrect8 = plt.Rectangle((0.4, 0.2), 0.2, 0.2, color='brown')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth column\nrect9 = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='pink')\nax.add_patch(rect9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a rectangle for the background\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color=cmap(0.5)))\n\n# Add a vertical bar chart\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Add a horizontal bar chart\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.barh(x, y, color='red')\n\n# Add a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a pie chart\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['blue', 'red', 'green', 'yellow', 'purple'])\n\n# Add a histogram\nx = np.random.rand(100)\nax.hist(x, bins=10, color='orange')\n\n# Add a line plot\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.plot(x, y, color='black')\n\n# Add a heatmap\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='gray')\n\n# Add a contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Add a streamplot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot(X, Y, U, V, color='blue')\n\n# Add a quiver plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.quiver(X, Y, U, V, color='red')\n\n# Add a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.random.rand(100)\nax.polar(theta, r, color='green')\n\n# Add a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax = fig.add_subplot(111, projection='3d')\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Add a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='blue')\n\n# Add a 3D bar chart\nx = np.arange(1, 11)\ny = np.arange(1, 11)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(10, 10)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), color='red')\n\n# Add a 3D contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Add a 3D streamplot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, Z, U, V, color='blue')\n\n# Add a 3D quiver plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.quiver3D(X, Y, Z, U, V, color='red')\n\n# Add a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.random.rand(100)\nax.plot3D(theta, r, np.zeros_like(r), color='green')\n\n# Add a 3D histogram\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.hist3D(x, y, z, bins=10, color='orange')\n\n# Add a 3D line plot\nx = np.arange(1, 11)\ny = np.arange(1, 11)\nz = np.random.rand(10)\nax.plot3D(x, y, z, color='black')\n\n# Add a 3D heatmap\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\nax.plot_surface(x, y, z, cmap='coolwarm')\n\n# Add a 3D contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Add a 3D streamplot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, Z, U, V, color='blue')\n\n# Add a 3D quiver plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.quiver3D(X, Y, Z, U, V, color='red')\n\n# Add a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.random.rand(100)\nax.plot3D(theta, r, np.zeros_like(r), color='green')\n\n# Add a 3D histogram\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.hist3D(x, y, z, bins=10, color='orange')\n\n# Add a 3D line plot\nx = np.arange(1, 11)\ny = np.arange(1, 11)\nz = np.random.rand(10)\nax.plot3D(x, y, z, color='black')\n\n# Add a 3D heatmap\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\nax.plot_surface(x, y, z, cmap='coolwarm')\n\n# Add a 3D contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Add a 3D streamplot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, Z, U, V, color='blue')\n\n# Add a 3D quiver plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.quiver3D(X, Y, Z, U, V, color='red')\n\n# Add a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.random.rand(100)\nax.plot3D(theta, r, np.zeros_like(r), color='green')\n\n# Add a 3D histogram\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.hist3D(x, y, z, bins=10, color='orange')\n\n# Add a 3D line plot\nx = np.arange(1, 11)\ny = np.arange(1, 11)\nz = np.random.rand(10)\nax.plot3D(x, y, z, color='black')\n\n# Add a 3D heatmap\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\nax.plot_surface(x, y, z, cmap='coolwarm')\n\n# Add a 3D contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Add a 3D streamplot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, Z, U, V, color='blue')\n\n# Add a 3D quiver plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.quiver3D(X, Y, Z, U, V, color='red')\n\n# Add a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.random.rand(100)\nax.plot3D(theta, r, np.zeros_like(r), color='green')\n\n# Add a 3D histogram\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.hist3D(x, y, z, bins=10, color='orange')\n\n# Add a 3D line plot\nx = np.arange(1, 11)\ny = np.arange(1, 11)\nz = np.random.rand(10)\nax.plot3D(x, y, z, color='black')\n\n# Add a 3D heatmap\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\nax.plot_surface(x, y, z, cmap='coolwarm')\n\n# Add a 3D contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Add a 3D streamplot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, Z, U, V, color='blue')\n\n# Add a 3D quiver plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.quiver3D(X, Y, Z, U, V, color='red')\n\n# Add a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.random.rand(100)\nax.plot3D(theta, r, np.zeros_like(r), color='green')\n\n# Add a 3D histogram\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.hist3D(x, y, z, bins=10, color='orange')\n\n# Add a 3D line plot\nx = np.arange(1, 11)\ny = np.arange(1, 11)\nz = np.random.rand(10)\nax.plot3D(x, y, z, color='black')\n\n# Add a 3D heatmap\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\nax.plot_surface(x, y, z, cmap='coolwarm')\n\n# Add a 3D contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Add a 3D streamplot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, Z, U, V, color='blue')\n\n# Add a 3D quiver plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.quiver3D(X, Y, Z, U, V, color='red')\n\n# Add a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.random.rand(100)\nax.plot3D(theta, r, np.zeros_like(r), color='green')\n\n# Add a 3D histogram\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.hist3D(x, y, z, bins=10, color='orange')\n\n# Add a 3D line plot\nx = np.arange(1, 11)\ny = np.arange(1, 11)\nz = np.random.rand(10)\nax.plot3D(x, y, z, color='black')\n\n# Add a 3D heatmap\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\nax.plot_surface(x, y, z, cmap='coolwarm')\n\n# Add a 3D contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Add a 3D stream"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Perplexity vs. Temperature')\n\n# Set the x-axis label\nax.set_xlabel('Temperature')\n\n# Set the y-axis label\nax.set_ylabel('Perplexity')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-ticks\nax.set_yticks([0, 2, 4, 6, 8, 10, 12])\n\n# Set the x-tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Sales Performance Heatmap')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), ax=ax)\n\n# Set the x-axis labels\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Product A Q1', 'Product A Q2', 'Product A Q3'])\n\n# Set the y-axis labels\nax.set_yticks([0, 1, 2])\nax.set_yticklabels(['Product B Q1', 'Product B Q2', 'Product B Q3'])\n\n# Set the color map\ncbar.set_cmap('Blues')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Time Series Data')\n\n# Create a bar chart\nax.bar(range(10), [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2, 0.0], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Weather')\n\n# Create a color map for the scatter plot\ncmap = plt.cm.RdYlGn\n\n# Create a scatter plot with the data\nscatter = ax.scatter([96, 192, 336, 720], [96, 192, 336, 720], c=[0.55, 0.42, 0.38, 0.54], cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(scatter)\ncbar.set_label('Temperature (\u00b0C)')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Distance (m)')\n\n# Set the x-axis limits\nax.set_xlim(90, 730)\n\n# Set the y-axis limits\nax.set_ylim(90, 730)\n\n# Set the x-axis ticks\nax.set_xticks([96, 192, 336, 720])\n\n# Set the y-axis ticks\nax.set_yticks([96, 192, 336, 720])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['96', '192', '336', '720'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['96', '192', '336', '720'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Set the title of the plot\nax.set_title('a) Role voting in the Werewolf game')\n\n# Create a bar chart\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [15.7, 28.1, 76.0, 50.8, 50.3], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Role')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the plot\nax2.set_title('b) Final state of roles')\n\n# Create a bar chart\nax2.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [31.5, 25.3, 38.6, 44.4, 61.5], color='blue')\n\n# Set the x-axis label\nax2.set_xlabel('Role')\n\n# Set the y-axis label\nax2.set_ylabel('Percentage')\n\n# Add a colorbar\ncbar = fig.colorbar(ax2.images[0])\n\n# Set the colorbar label\ncbar.set_label('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Set the x-axis label\nax.set_xlabel('Response Action Category')\n\n# Set the y-axis label\nax.set_ylabel('Number of Responses')\n\n# Create a bar chart with the data\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [169, 547, 662, 271, 145], color='blue')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [547, 439, 753, 239, 1355], color='red')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [662, 753, 557, 259, 1269], color='green')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [271, 239, 259, 153, 732], color='orange')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [145, 1355, 141, 1269, 661], color='yellow')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [547, 439, 753, 239, 1355], color='brown')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [662, 753, 557, 259, 1269], color='pink')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [271, 239, 259, 153, 732], color='purple')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [145, 1355, 141, 1269, 661], color='cyan')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'])\n\n# Set the y-ticks\nax.set_yticks([0, 200, 400, 600, 800, 1000, 1200])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '200', '400', '600', '800', '1000', '1200'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bars\nax.bar(categories, original_values, color='blue', label='Original')\nax.bar(categories, adjusted_values, color='red', label='Adjusted')\n\n# Set the title and labels\nax.set_title('Emotion Intensity Comparison')\nax.set_xlabel('Emotion')\nax.set_ylabel('Intensity')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Set the x-axis label\nax.set_xlabel('Voter')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Define the data for the plot\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererewolf']\npercentages = [15.7, 28.1, 26, 4.5, 10.5]\n\n# Create a bar chart\nax.bar(voters, percentages, color='blue')\n\n# Add a color bar which maps values to colors\nsm = plt.cm.ScalarMappable(cmap='Blues', norm=plt.Normalize(vmin=min(percentages), vmax=max(percentages)))\nsm._A = []\ncbar = fig.colorbar(sm)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Create a color map for the heatmap\ncmap = plt.cm.RdYlGn\n\n# Create a heatmap with the data\nheatmap = ax.imshow(np.random.rand(5, 5), cmap=cmap)\n\n# Set the tick labels\nax.set_xticks(np.arange(len([\"Baseline\", \"Reversed Order\", \"Reversed IDs\"])))\nax.set_yticks(np.arange(len([\"#17\", \"#24\", \"#23\", \"#3\", \"#8\", \"#17\", \"#1\", \"#13\", \"#10\", \"#5\", \"#4\", \"#3\", \"#10\", \"#11\", \"#24\", \"#9\", \"#15\"])))\n\n# Set the tick labels\nax.set_xticklabels([\"Baseline\", \"Reversed Order\", \"Reversed IDs\"])\nax.set_yticklabels([\"#17\", \"#24\", \"#23\", \"#3\", \"#8\", \"#17\", \"#1\", \"#13\", \"#10\", \"#5\", \"#4\", \"#3\", \"#10\", \"#11\", \"#24\", \"#9\", \"#15\"])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Add a colorbar to the heatmap\ncbar = ax.figure.colorbar(heatmap, ax=ax)\ncbar.ax.set_ylabel(\"Rank\", rotation=-90, va=\"bottom\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5])\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70])\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the color map\ncmap = plt.get_cmap('YlGnBu')\n\n# Create a bar chart\nax.barh(np.arange(10), np.random.rand(10), color=cmap(np.linspace(0, 1, 10)))\n\n# Set the title and labels\nax.set_title('Harvest [t/year]')\nax.set_xlabel('t/year')\nax.set_ylabel('Crops')\n\n# Set the limits of the y-axis\nax.set_ylim(-1, 10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Crops')\n\n# Set the x-axis label\nax.set_xlabel('Time (years)')\n\n# Set the y-axis label\nax.set_ylabel('Harvest [t/ha]')\n\n# Create a bar chart\nax.bar(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n       [0.8, 2.4, 1.1, 0.6, 0.7, 0.1], color='green')\n\n# Create a scatter plot\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], color='red')\n\n# Create a line plot\nax.plot(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n        [6, 5, 4, 3, 2, 1], color='blue')\n\n# Create a histogram\nax.hist([0.8, 2.4, 1.1, 0.6, 0.7, 0.1], bins=10, color='yellow')\n\n# Create a pie chart\nax.pie([0.8, 2.4, 1.1, 0.6, 0.7, 0.1], labels=['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], colors=['green', 'red', 'blue', 'yellow', 'orange', 'purple'])\n\n# Create a box plot\nax.boxplot([0.8, 2.4, 1.1, 0.6, 0.7, 0.1])\n\n# Create a violin plot\nax.violinplot([0.8, 2.4, 1.1, 0.6, 0.7, 0.1])\n\n# Create a heatmap\nax.imshow([[0.8, 2.4, 1.1, 0.6, 0.7, 0.1]], cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nX, Y = np.meshgrid(np.linspace(0, 1, 10), np.linspace(0, 1, 10))\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Create a scatter plot with different sizes\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], s=[100, 200, 300, 400, 500, 600], color='red')\n\n# Create a scatter plot with different colors\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], c=['green', 'red', 'blue', 'yellow', 'orange', 'purple'], cmap='coolwarm')\n\n# Create a scatter plot with different markers\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], marker=['o', 's', '^', 'p', '*', 'h'], color='red')\n\n# Create a scatter plot with different edge colors\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], edgecolor='black', facecolor='red')\n\n# Create a scatter plot with different alpha values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], alpha=0.5, color='red')\n\n# Create a scatter plot with different zorder values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], zorder=10, color='red')\n\n# Create a scatter plot with different linewidth values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], linewidth=2, color='red')\n\n# Create a scatter plot with different linestyle values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], linestyle='--', color='red')\n\n# Create a scatter plot with different hatch values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], hatch='/', color='red')\n\n# Create a scatter plot with different s values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], s=[100, 200, 300, 400, 500, 600], color='red')\n\n# Create a scatter plot with different c values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], c=['green', 'red', 'blue', 'yellow', 'orange', 'purple'], cmap='coolwarm')\n\n# Create a scatter plot with different marker values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], marker=['o', 's', '^', 'p', '*', 'h'], color='red')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], edgecolor='black', facecolor='red')\n\n# Create a scatter plot with different alpha values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], alpha=0.5, color='red')\n\n# Create a scatter plot with different zorder values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], zorder=10, color='red')\n\n# Create a scatter plot with different linewidth values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], linewidth=2, color='red')\n\n# Create a scatter plot with different linestyle values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], linestyle='--', color='red')\n\n# Create a scatter plot with different hatch values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], hatch='/', color='red')\n\n# Create a scatter plot with different s values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], s=[100, 200, 300, 400, 500, 600], color='red')\n\n# Create a scatter plot with different c values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], c=['green', 'red', 'blue', 'yellow', 'orange', 'purple'], cmap='coolwarm')\n\n# Create a scatter plot with different marker values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], marker=['o', 's', '^', 'p', '*', 'h'], color='red')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], edgecolor='black', facecolor='red')\n\n# Create a scatter plot with different alpha values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], alpha=0.5, color='red')\n\n# Create a scatter plot with different zorder values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], zorder=10, color='red')\n\n# Create a scatter plot with different linewidth values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], linewidth=2, color='red')\n\n# Create a scatter plot with different linestyle values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], linestyle='--', color='red')\n\n# Create a scatter plot with different hatch values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], hatch='/', color='red')\n\n# Create a scatter plot with different s values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], s=[100, 200, 300, 400, 500, 600], color='red')\n\n# Create a scatter plot with different c values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], c=['green', 'red', 'blue', 'yellow', 'orange', 'purple'], cmap='coolwarm')\n\n# Create a scatter plot with different marker values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], marker=['o', 's', '^', 'p', '*', 'h'], color='red')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], edgecolor='black', facecolor='red')\n\n# Create a scatter plot with different alpha values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], alpha=0.5, color='red')\n\n# Create a scatter plot with different zorder values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], zorder=10, color='red')\n\n# Create a scatter plot with different linewidth values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], linewidth=2, color='red')\n\n# Create a scatter plot with different linestyle values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], linestyle='--', color='red')\n\n# Create a scatter plot with different hatch values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], hatch='/', color='red')\n\n# Create a scatter plot with different s values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], s=[100, 200, 300, 400, 500, 600], color='red')\n\n# Create a scatter plot with different c values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], c=['green', 'red', 'blue', 'yellow', 'orange', 'purple'], cmap='coolwarm')\n\n# Create a scatter plot with different marker values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], marker=['o', 's', '^', 'p', '*', 'h'], color='red')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], edgecolor='black', facecolor='red')\n\n# Create a scatter plot with different alpha values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], alpha=0.5, color='red')\n\n# Create a scatter plot with different zorder values\nax.scatter(['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'], \n           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], zorder=10, color='red"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create a grid of subplots\ngs = fig.add_gridspec(4, 4)\n\n# Add a color bar to the first subplot\nax1 = fig.add_subplot(gs[0, :2])\ncax1 = ax1.imshow(np.random.rand(10, 10), cmap='viridis')\nfig.colorbar(cax1, ax=ax1)\n\n# Add a color bar to the second subplot\nax2 = fig.add_subplot(gs[0, 2:])\ncax2 = ax2.imshow(np.random.rand(10, 10), cmap='plasma')\nfig.colorbar(cax2, ax=ax2)\n\n# Add a color bar to the third subplot\nax3 = fig.add_subplot(gs[1, :2])\ncax3 = ax3.imshow(np.random.rand(10, 10), cmap='inferno')\nfig.colorbar(cax3, ax=ax3)\n\n# Add a color bar to the fourth subplot\nax4 = fig.add_subplot(gs[1, 2:])\ncax4 = ax4.imshow(np.random.rand(10, 10), cmap='magma')\nfig.colorbar(cax4, ax=ax4)\n\n# Add a color bar to the fifth subplot\nax5 = fig.add_subplot(gs[2, :2])\ncax5 = ax5.imshow(np.random.rand(10, 10), cmap='cividis')\nfig.colorbar(cax5, ax=ax5)\n\n# Add a color bar to the sixth subplot\nax6 = fig.add_subplot(gs[2, 2:])\ncax6 = ax6.imshow(np.random.rand(10, 10), cmap='coolwarm')\nfig.colorbar(cax6, ax=ax6)\n\n# Add a color bar to the seventh subplot\nax7 = fig.add_subplot(gs[3, :2])\ncax7 = ax7.imshow(np.random.rand(10, 10), cmap='spring')\nfig.colorbar(cax7, ax=ax7)\n\n# Add a color bar to the eighth subplot\nax8 = fig.add_subplot(gs[3, 2:])\ncax8 = ax8.imshow(np.random.rand(10, 10), cmap='summer')\nfig.colorbar(cax8, ax=ax8)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow([[1,2,3],[4,5,6],[7,8,9]]), ax=ax)\n\n# Set the x and y ticks\nax.set_xticks([0, 1, 2])\nax.set_yticks([0, 1, 2])\n\n# Set the x and y labels\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a color map for the rectangles\ncmap = plt.cm.RdYlGn\n\n# Create a list of vendors\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\n\n# Create a list of products\nproducts = ['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes']\n\n# Create a list of sales data\nsales_data = [\n    [1.5, 2.2, 1.8, 3.2, 0.5, 3.8, 0.3],\n    [2.8, 0.5, 3.6, 1.8, 2.2, 4.2, 0.6],\n    [1.0, 2.1, 0.9, 4.0, 1.5, 4.4, 0.4],\n    [0.7, 0.6, 0.4, 2.2, 3.4, 5.9, 0.6],\n    [0.9, 1.6, 2.3, 2.0, 1.5, 3.1, 0.5],\n    [1.2, 1.3, 0.5, 0.6, 2.0, 4.8, 0.7],\n    [0.3, 1.9, 0.6, 0.8, 1.3, 5.9, 0.9]\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6, 0)\n]\n\n# Create a list of colors for the rectangles\ncolors = [\n    cmap(0.1),\n    cmap(0.2),\n    cmap(0.3),\n    cmap(0.4),\n    cmap(0.5),\n    cmap(0.6),\n    cmap(0.7)\n]\n\n# Create a list of labels for the rectangles\nlabels = [\n    'Vendor A',\n    'Vendor B',\n    'Vendor C',\n    'Vendor D',\n    'Vendor E',\n    'Vendor F',\n    'Vendor G'\n]\n\n# Create a list of sizes for the rectangles\nsizes = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n]\n\n# Create a list of positions for the rectangles\npositions = [\n    (0, 0),\n    (1, 0),\n    (2, 0),\n    (3, 0),\n    (4, 0),\n    (5, 0),\n    (6,"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Degree of acceptance of a product')\n\n# Create a bar chart\nax.bar(['High', 'Medium', 'Low'], [42, 38, 55], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Product Quality')\n\n# Set the y-axis label\nax.set_ylabel('Degree of Acceptance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a color bar\ncmap = plt.get_cmap('Blues')\nnorm = plt.Normalize(vmin=0.1, vmax=0.9)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax)\n\n# Set the title of the plot\nax.set_title('Bottlebeck Distance', fontsize=20)\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Wasserstein Distance', fontsize=15)\nax.set_ylabel('Bottlebeck Distance', fontsize=15)\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticks(np.arange(0.1, 1.0, 0.1))\nax.set_yticks(np.arange(0.1, 1.0, 0.1))\n\n# Set the tick label rotation\nax.tick_params(axis='both', which='major', labelsize=12, rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('ROC\\'s AUC')\n\n# Create a grid of rectangles\nfor i in range(1, 13):\n    for j in range(1, 13):\n        ax.add_patch(plt.Rectangle((i-1, j-1), 1, 1, color=np.random.rand(3)))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 12)\nax.set_ylim(0, 12)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Timeshift')\nax.set_ylabel('Scales')\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('AUC')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('C Subject')\n\n# Create a bar chart\nax.bar(range(1, 29), range(1, 29), color='green')\n\n# Set the x-axis label\nax.set_xlabel('Count')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Set the title of the plot\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color='white')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the plot area\nax.set_facecolor('purple')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the color of the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the color of the tick labels\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the color of the tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color='white')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the plot area\nax.set_facecolor('purple')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the color of the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the color of the tick labels\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the color of the tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color='white')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the plot area\nax.set_facecolor('purple')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the color of the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the color of the tick labels\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the color of the tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color='white')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the plot area\nax.set_facecolor('purple')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the color of the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the color of the tick labels\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the color of the tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color='white')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the plot area\nax.set_facecolor('purple')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the color of the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the color of the tick labels\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the color of the tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color='white')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the plot area\nax.set_facecolor('purple')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the color of the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the color of the tick labels\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the color of the tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color='white')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the plot area\nax.set_facecolor('purple')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the color of the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the color of the tick labels\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the color of the tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color='white')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the plot area\nax.set_facecolor('purple')\n\n# Set the color of the title\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the color of the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the color of the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the color of the tick labels\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the color of the tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\n\n# Create a color map for the rectangles\ncmap = plt.get_cmap('OrRd')\n\n# Create a list of colors for the rectangles\ncolors = ['pink', 'orange', 'red', 'brown', 'gray', 'black']\n\n# Create a list of labels for the rectangles\nlabels = ['Kokkos', 'RAJA', 'OMP', 'OACC', 'SYCL', 'Native Port']\n\n# Create a list of values for the rectangles\nvalues = [876, 136, 435, 534, 322, 804]\n\n# Create a list of positions for the rectangles\npositions = np.arange(len(labels))\n\n# Create a bar chart with the rectangles\nax.bar(positions, values, color=colors)\n\n# Set the x-axis labels\nax.set_xticks(positions)\nax.set_xticklabels(labels)\n\n# Set the y-axis label\nax.set_ylabel('Average Memory Bandwidth (GB/s)')\n\n# Set the y-axis limits\nax.set_ylim(200, 1600)\n\n# Set the color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=min(values), vmax=max(values)))\nsm._A = []\ncbar = fig.colorbar(sm)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a color bar\ncbar = fig.colorbar(cmap, ax=ax)\n\n# Set the title of the plot\nax.set_title('Correlation Coefficients')\n\n# Set the x-axis labels\nax.set_xlabel('X-axis')\n\n# Set the y-axis labels\nax.set_ylabel('Y-axis')\n\n# Set the color bar label\ncbar.set_label('Correlation Coefficient')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('Blues')\n\n# Create a bar chart\nax.bar(['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL'], [0.19, 0.19, 0.62, 0.52, 0.50, 0.39, 0.20, 0.06], color=cmap(0.1))\nax.bar(['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL'], [0.16, 0.26, 0.53, 0.50, 0.39, 0.24, 0.20, 0.06], color=cmap(0.2))\nax.bar(['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL'], [0.03, 0.24, 0.24, 0.34, 0.20, 0.10, 0.06, 0.06], color=cmap(0.3))\nax.bar(['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL'], [0.07, 0.28, 0.26, 0.26, 0.20, 0.10, 0.06, 0.05], color=cmap(0.4))\nax.bar(['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL'], [0.03, 0.24, 0.24, 0.34, 0.20, 0.10, 0.06, 0.05], color=cmap(0.5))\nax.bar(['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL'], [0.03, 0.24, 0.24, 0.34, 0.20, 0.10, 0.06, 0.05], color=cmap(0.6))\nax.bar(['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL'], [0.03, 0.24, 0.24, 0.34, 0.20, 0.10, 0.06, 0.05], color=cmap(0.7))\nax.bar(['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL'], [0.03, 0.24, 0.24, 0.34, 0.20, 0.10, 0.06, 0.05], color=cmap(0.8))\nax.bar(['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL'], [0.03, 0.24, 0.24, 0.34, 0.20, 0.10, 0.06, 0.05], color=cmap(0.9))\n\n# Set the title and labels\nax.set_title('Model Performance')\nax.set_xlabel('Model')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 15)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 16, 2))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 16, 2))\n\n# Set the x-axis label\nax.set_xlabel('Layers')\n\n# Set the y-axis label\nax.set_ylabel('Time')\n\n# Set the title\nax.set_title('pythia-1b')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, '<endofext>', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='purple')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((2, 2), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((4, 4), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((6, 6), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((8, 8), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((10, 10), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((12, 12), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((14, 14), 1, 1, color='purple'))\n\n# Set the color of the text\nax.text(0.5, 0.5, 'No / The', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='purple')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((2, 2), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((4, 4), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((6, 6), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((8, 8), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((10, 10), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((12, 12), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((14, 14), 1, 1, color='purple'))\n\n# Set the color of the text\nax.text(0.5, 0.5, 'athlete', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='purple')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((2, 2), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((4, 4), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((6, 6), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((8, 8), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((10, 10), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((12, 12), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((14, 14), 1, 1, color='purple'))\n\n# Set the color of the text\nax.text(0.5, 0.5, 'that', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='purple')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((2, 2), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((4, 4), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((6, 6), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((8, 8), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((10, 10), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((12, 12), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((14, 14), 1, 1, color='purple'))\n\n# Set the color of the text\nax.text(0.5, 0.5, 'loved', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='purple')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((2, 2), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((4, 4), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((6, 6), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((8, 8), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((10, 10), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((12, 12), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((14, 14), 1, 1, color='purple'))\n\n# Set the color of the text\nax.text(0.5, 0.5, 'the', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='purple')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((2, 2), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((4, 4), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((6, 6), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((8, 8), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((10, 10), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((12, 12), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((14, 14), 1, 1, color='purple'))\n\n# Set the color of the text\nax.text(0.5, 0.5, 'ministers', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='purple')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((2, 2), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((4, 4), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((6, 6), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((8, 8), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((10, 10), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((12, 12), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((14, 14), 1, 1, color='purple'))\n\n# Set the color of the text\nax.text(0.5, 0.5, 'has', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='purple')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((2, 2), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((4, 4), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((6, 6), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((8, 8), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((10, 10), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((12, 12), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((14, 14), 1, 1, color='purple'))\n\n# Set the color of the text\nax.text(0.5, 0.5, 'landed', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, color='purple')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((2, 2), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((4, 4), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((6, 6), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((8, 8), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((10, 10), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((12, 12), 1, 1, color='purple'))\nax.add_patch(plt.Rectangle((14, 14), 1, 1, color='purple'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n# Set the title of the plot\nax.set_title('Test Winning Distance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellow')\n\n# Set the color of the plot area\nax.patch.set_facecolor('cyan')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Define the data for the plots\nx = np.linspace(-1, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\naxs[0].plot(x, y1, color='blue')\naxs[0].set_title('Inter Class')\naxs[0].set_xlabel('Cosine Similarity')\naxs[0].set_ylabel('Frequency')\n\naxs[1].plot(x, y2, color='green')\naxs[1].set_title('Intra Class')\naxs[1].set_xlabel('Cosine Similarity')\naxs[1].set_ylabel('Frequency')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for each subplot\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Set the title of the first subplot\naxs[0, 0].set_title('Baseline')\naxs[0, 0].plot([0.5, 1.0, 1.5, 2.0, 2.5], [0.5, 1.0, 1.5, 2.0, 2.5], 'o-')\n\n# Set the title of the second subplot\naxs[0, 1].set_title('MIRL w/ V-I positive')\naxs[0, 1].plot([0.5, 1.0, 1.5, 2.0, 2.5], [0.5, 1.0, 1.5, 2.0, 2.5], 'o-')\n\n# Set the title of the third subplot\naxs[1, 0].set_title('MIRL w/ V-I negative')\naxs[1, 0].plot([0.5, 1.0, 1.5, 2.0, 2.5], [0.5, 1.0, 1.5, 2.0, 2.5], 'o-')\n\n# Set the title of the fourth subplot\naxs[1, 1].set_title('MIRL + OCLR w/ V-I positive')\naxs[1, 1].plot([0.5, 1.0, 1.5, 2.0, 2.5], [0.5, 1.0, 1.5, 2.0, 2.5], 'o-')\n\n# Set the title of the fifth subplot\naxs[0, 0].set_title('MIRL + OCLR w/ V-I negative')\naxs[0, 0].plot([0.5, 1.0, 1.5, 2.0, 2.5], [0.5, 1.0, 1.5, 2.0, 2.5], 'o-')\n\n# Set the title of the sixth subplot\naxs[0, 1].set_title('MIRL + OCLR w/ DOTLA')\naxs[0, 1].plot([0.5, 1.0, 1.5, 2.0, 2.5], [0.5, 1.0, 1.5, 2.0, 2.5], 'o-')\n\n# Set the title of the seventh subplot\naxs[1, 0].set_title('MIRL + OCLR w/ V-I positive')\naxs[1, 0].plot([0.5, 1.0, 1.5, 2.0, 2.5], [0.5, 1.0, 1.5, 2.0, 2.5], 'o-')\n\n# Set the title of the eighth subplot\naxs[1, 1].set_title('MIRL + OCLR w/ V-I negative')\naxs[1, 1].plot([0.5, 1.0, 1.5, 2.0, 2.5], [0.5, 1.0, 1.5, 2.0, 2.5], 'o-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for each subplot\nfig, axs = plt.subplots(4, 2, figsize=(7.0, 8.0))\n\n# Plot the first subplot\naxs[0, 0].plot([1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5], 'b-')\naxs[0, 0].set_title('MATHWELL')\naxs[0, 0].set_xlabel('FKGL')\naxs[0, 0].set_ylabel('Density')\n\n# Plot the second subplot\naxs[0, 1].plot([1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5], 'r-')\naxs[0, 1].set_title('MATHWELL MaC')\naxs[0, 1].set_xlabel('FKGL')\naxs[0, 1].set_ylabel('Density')\n\n# Plot the third subplot\naxs[1, 0].plot([1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5], 'g-')\naxs[1, 0].set_title('Llama-2')\naxs[1, 0].set_xlabel('FKGL')\naxs[1, 0].set_ylabel('Density')\n\n# Plot the fourth subplot\naxs[1, 1].plot([1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5], 'y-')\naxs[1, 1].set_title('Llama-2 MaC')\naxs[1, 1].set_xlabel('FKGL')\naxs[1, 1].set_ylabel('Density')\n\n# Plot the fifth subplot\naxs[2, 0].plot([1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5], 'c-')\naxs[2, 0].set_title('LLEMMMA')\naxs[2, 0].set_xlabel('FKGL')\naxs[2, 0].set_ylabel('Density')\n\n# Plot the sixth subplot\naxs[2, 1].plot([1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5], 'm-')\naxs[2, 1].set_title('LLEMMMA MaC')\naxs[2, 1].set_xlabel('FKGL')\naxs[2, 1].set_ylabel('Density')\n\n# Plot the seventh subplot\naxs[3, 0].plot([1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5], 'k-')\naxs[3, 0].set_title('MAMmoTH')\naxs[3, 0].set_xlabel('FKGL')\naxs[3, 0].set_ylabel('Density')\n\n# Plot the eighth subplot\naxs[3, 1].plot([1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5], 'w-')\naxs[3, 1].set_title('MAMmoTH MaC')\naxs[3, 1].set_xlabel('FKGL')\naxs[3, 1].set_ylabel('Density')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Desert Animals in the Wild')\n\n# Set the x-axis label\nax.set_xlabel('Animal Weight (Tons)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Define the data for the plot\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Add a legend\nax.legend(['Camels', 'Kangaroos'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a bar chart with the data\nax.bar([0, 2, 4, 6, 8], [10, 20, 30, 40, 50], color='blue')\nax.bar([1, 3, 5, 7, 9], [15, 25, 35, 45, 55], color='red')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a histogram with 10 bins\nax.hist([2, 3, 4, 5, 6, 7, 8, 9, 10, 11], bins=10, color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny1 = [10, 20, 30, 40, 50, 60, 70]\ny2 = [80, 70, 60, 50, 40, 30, 20]\ny3 = [10, 20, 30, 40, 50, 60, 70]\ny4 = [80, 70, 60, 50, 40, 30, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='Baguette')\nax.plot(x, y2, label='Youtiao')\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 140)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100, 120, 140])\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'])\n\n# Set the title of the plot\nax.set_title('Test Winning Distance')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the title\nax.title.set_color('magenta')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('yellow')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 300)\n\n# Set the y-axis limits\nax.set_ylim(0, 25)\n\n# Set the x-axis label\nax.set_xlabel('Number of Nominations')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Set the title of the plot\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Define the categories and their corresponding colors\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\ncolors = ['#FF6347', '#FFA500', '#FFD700', '#FFC0CB', '#FFFF00']\n\n# Define the number of nominations for each category\nnominations = [10, 15, 20, 25, 30]\n\n# Define the years for each nomination\nyears = [2019, 2020, 2021, 2022, 2023]\n\n# Plot the histogram\nfor i in range(len(categories)):\n    ax.barh(years[i], nominations[i], color=colors[i])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('MNIST - Defect Detection')\n\n# Create a color bar for the plot\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='viridis'))\n\n# Set the tick labels for the x-axis\nax.set_xticks(np.arange(0, 10, 1))\nax.set_yticks(np.arange(0, 10, 1))\n\n# Set the tick labels for the y-axis\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the tick labels for the color bar\ncbar.set_label('Defect Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0.4, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0, 70)\n\n# Set the x-axis ticks\nax.set_xticks([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70])\n\n# Set the x-axis labels\nax.set_xticklabels(['0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70'])\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first subplot\naxs[0, 0].scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='Blues')\naxs[0, 0].set_title('a) Milk Chocolate')\naxs[0, 0].set_xlabel('Sweetness')\naxs[0, 0].set_ylabel('Density')\n\n# Plot the second subplot\naxs[0, 1].scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='Oranges')\naxs[0, 1].set_title('b) Dark Chocolate')\naxs[0, 1].set_xlabel('Sweetness')\naxs[0, 1].set_ylabel('Density')\n\n# Plot the third subplot\naxs[1, 0].scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='Blues')\naxs[1, 0].set_title('c) White Chocolate')\naxs[1, 0].set_xlabel('Sweetness')\naxs[1, 0].set_ylabel('Density')\n\n# Plot the fourth subplot\naxs[1, 1].scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='Oranges')\naxs[1, 1].set_title('d) Ruby Chocolate')\naxs[1, 1].set_xlabel('Sweetness')\naxs[1, 1].set_ylabel('Density')\n\n# Add colorbar for the first subplot\nfig.colorbar(axs[0, 0].collections[0], ax=axs[0, 0])\n\n# Add colorbar for the second subplot\nfig.colorbar(axs[0, 1].collections[0], ax=axs[0, 1])\n\n# Add colorbar for the third subplot\nfig.colorbar(axs[1, 0].collections[0], ax=axs[1, 0])\n\n# Add colorbar for the fourth subplot\nfig.colorbar(axs[1, 1].collections[0], ax=axs[1, 1])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Set the x-axis label\nax.set_xlabel('Concept Weight')\n\n# Set the y-axis label\nax.set_ylabel('Count')\n\n# Define the data for the bar chart\nx = [0.00, 0.05, 0.10, 0.15]\ny = [1000, 2000, 3000, 4000]\n\n# Create a bar chart with the data\nax.bar(x, y, color='brown')\n\n# Add a legend to the plot\nax.legend(['Class', 'Camel', 'Kangaroo'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Create a bar chart\nax.bar(range(10), np.random.randint(20, 80, 10), color='blue')\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Examples')\n\n# Add a title\nax.set_title('Random vs Center')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data\nrepetition = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nclusters = [1000, 1200, 1300, 1400, 1450, 1475, 1485, 1490, 1495, 1497, 1498, 1499, 1500, 1500, 1500, 1500]\n\n# Plot\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\nax.plot(repetition, clusters, 'o-')\nax.set_xlabel('Number of Repetition')\nax.set_ylabel('Number of Clusters')\nax.set_title('Number of Clusters vs Number of Repetition')\n\n# Show plot\nplt.show()"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Define the data\nx = [0, 1, 2, 3, 4]\ny_correct = [400, 350, 300, 250, 200]\ny_misclassified = [380, 330, 280, 230, 180]\ny_threshold = [100, 150, 200, 250, 300]\n\n# Plot the data\nax.plot(x, y_correct, label='Correctly classified', color='blue')\nax.plot(x, y_misclassified, label='Misclassified', color='orange')\nax.plot(x, y_threshold, label='Threshold', color='black')\n\n# Add labels and title\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Number of images')\nax.set_title('Classification accuracy over distance to threshold')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Calibration Error: 0.31')\n\n# Set the x-axis label\nax.set_xlabel('Confidence in bin')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy in bin')\n\n# Create a line graph with a dashed line style\nax.plot([0.0, 0.2, 0.4, 0.6, 0.8, 1.0], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0], 'r--')\n\n# Create a scatter plot with a blue color\nax.scatter([0.0, 0.2, 0.4, 0.6, 0.8, 1.0], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0], c='b')\n\n# Create a bar chart with a brown color\nax.bar([0.0, 0.2, 0.4, 0.6, 0.8, 1.0], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0], color='brown')\n\n# Create a histogram with a gray color\nax.hist([0.0, 0.2, 0.4, 0.6, 0.8, 1.0], bins=5, color='gray')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 6000)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('% images overlap')\nax.set_ylabel('Number of queries')\n\n# Create a bar chart with the data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [1000, 2000, 3000, 4000, 5000, 6000, 5000, 4000, 3000], color='blue')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Create a histogram with 100 bins\nax.hist(np.random.normal(0, 1, 1000), bins=100)\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim([0, 0.25])\n\n# Set the y-axis limits\nax.set_ylim([0, 500])\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST')\n\n# Create a histogram with 100 bins\nax.hist(np.random.normal(0, 1, 1000), bins=100)\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim([0, 0.25])\n\n# Set the y-axis limits\nax.set_ylim([0, 500])\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = [5, 10, 15, 20]\ny = [20, 40, 60, 80]\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the title and labels\nax.set_title('DeepJSCC w/o ofdm')\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('n')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the tick labels\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8])\nax.set_yticks([0, 1, 2, 3, 4, 5, 6])\n\n# Set the tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8'])\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\n"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-axis ticks\nax.set_yticks([0.55, 0.60, 0.65, 0.70, 0.75])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '20', '40', '60', '80'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.55', '0.60', '0.65', '0.70', '0.75'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the text\nax.text(0.5, 0.95, 'Dictionary', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.90, 'coco (10k)', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.85, 'laion (10k)', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='green')\n\n# Set the color of the text\nax.text(0.5, 0.80, 'coco (5k)', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.75, 'laion (5k)', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.70, 'CLIP', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='black')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'ro-', label='coco (10k)')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'go-', label='laion (10k)')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'bo-', label='coco (5k)')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'yo-', label='laion (5k)')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'ko-', label='CLIP')\n\n# Show the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [0.25, 0.5, 0.75, 1.0]\ny1 = [0.03, 0.04, 0.05, 0.06]\ny2 = [0.07, 0.08, 0.09, 0.10]\n\n# Plot the data\nax.plot(x, y1, 'r-')\nax.plot(x, y2, 'b-')\n\n# Add markers at the points\nax.plot(0.25, 0.03, 'ro')\nax.plot(0.5, 0.04, 'ro')\nax.plot(0.75, 0.05, 'ro')\nax.plot(1.0, 0.06, 'ro')\n\n# Set the title and labels\nax.set_title('Sample Ratio vs. Std of ACC')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.6)\n\n# Set the x-axis label\nax.set_xlabel('Training iterations')\n\n# Set the y-axis label\nax.set_ylabel('FID (lower is better)')\n\n# Plot the FID values for the base model\nax.plot([0, 50, 100, 150, 200], [0.5, 0.4, 0.3, 0.2, 0.1], 'b-', label='base')\n\n# Plot the FID values for the ours model\nax.plot([0, 50, 100, 150, 200], [0.5, 0.45, 0.4, 0.35, 0.3], 'y-', label='ours')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(1, 28)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([1, 4, 7, 10, 13, 16, 19, 22, 25, 28])\n\n# Set the y-axis ticks\nax.set_yticks([0, 25, 50, 75, 100])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['1', '4', '7', '10', '13', '16', '19', '22', '25', '28'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '25', '50', '75', '100'])\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('red')\n\n# Set the color of the title\nax.title.set_color('green')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny3 = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15]\ny4 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\ny5 = [70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y1, 'b-', label='BaCE')\nax.plot(x, y2, 'r-', label='LWF')\nax.plot(x, y3, 'm-', label='EWC')\nax.plot(x, y4, 'p-', label='SEQ')\nax.plot(x, y5, 'c-', label='Average Accuracy')\n\n# Legend\nax.legend()\n\n# X-axis\nax.set_xlabel('Task')\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20'])\n\n# Y-axis\nax.set_ylabel('Accuracy (%)')\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 10)\nax.set_ylim(0, 102)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Define the data for the plots\nx = [0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [99, 98, 97, 96, 95, 94]\ny2 = [99, 98, 97, 96, 95, 94]\ny3 = [99, 98, 97, 96, 95, 94]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Oesense')\nax.plot(x, y2, 'r-', label='KWS')\nax.plot(x, y3, 'g-', label='ECG5000')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 120)\nax.set_ylim(10**-5, 10**-3)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Number of Parameters')\nax.set_ylabel('Log KL Divergence')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80, 100, 120], [10**-3, 10**-3, 10**-3, 10**-3, 10**-3, 10**-3, 10**-3], 'bo-')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Set the title of the graph\nax.set_title('GPT-4 Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Attack Success Rate')\n\n# Create a line plot\nax.plot([0, 500, 1000, 1500, 2000], [0.8, 0.7, 0.6, 0.5, 0.4], color='blue', marker='o')\nax.plot([0, 500, 1000, 1500, 2000], [0.9, 0.8, 0.7, 0.6, 0.5], color='pink', marker='o')\n\n# Add a legend\nax.legend(['Model A', 'Model B'])\n\n# Set the x-axis limits\nax.set_xlim(0, 2000)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5], [60, 70, 80, 90, 100], 'g-')\nax.plot([1, 2, 3, 4, 5], [50, 60, 70, 80, 90], 'r-')\nax.plot([1, 2, 3, 4, 5], [40, 50, 60, 70, 80], 'b-')\n\n# Set the title and labels\nax.set_title('Test Accuracy vs Fraction of Training Data')\nax.set_xlabel('Fraction of training data (log scale)')\nax.set_ylabel('Test accuracy (%)')\n\n# Add legend\nlegend_elements = [Line2D([0], [0], marker='o', color='w', label='Full', markerfacecolor='g', markersize=10),\n                    Line2D([0], [0], marker='o', color='w', label='SPT', markerfacecolor='r', markersize=10),\n                    Line2D([0], [0], marker='o', color='w', label='VPT', markerfacecolor='b', markersize=10)]\nax.legend(handles=legend_elements)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the title and labels\nax.set_title('Temperature vs Gradient Steps')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Temperature')\n\n# Plot the data\nax.plot([0, 50, 100, 150, 200], [0, 1, 2, 1, 0], 'b-', label='Step 1')\nax.plot([0, 50, 100, 150, 200], [0, 1.5, 1.8, 1.5, 0], 'g-', label='Step 2')\nax.plot([0, 50, 100, 150, 200], [0, 1.2, 1.4, 1.2, 0], 'r-', label='Step 3')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MOLHIV')\n\n# Create a scatter plot with a color map\nscatter = ax.scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='viridis')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim([0.2, 1.0])\n\n# Set the y-axis limits\nax.set_ylim([0.74, 0.88])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data\nx = [120, 90, 60, 30, 10, 1, 1/30, 1/60, 1/90, 1/120]\ny1 = [85, 87, 88, 89, 90, 91, 92, 93, 94, 95]\ny2 = [80, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n\n# Plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.plot(x, y1, 'b-', label='Ours')\nax.plot(x, y2, 'g-', label='ACR')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('Imbalance Ratio of Unlabeled Data')\nax.set_ylabel('Top-1 Acc (%)')\n\n# Markers\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'bo')\n    ax.plot(x[i], y2[i], 'go')\n\n# Show plot\nplt.show()"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Perplexity vs. Ratio of 4-bit Utilization')\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Add a legend\nax.legend(['APTQ', 'LLaMa-7B (FP16): 5.22', 'OWQ-4bit: 5.56', 'GPTQ-4bit: 5.62', 'LLM-QAT-4bit: 7.4', 'LMM-QAT-4bit: 7.4'], loc='upper right')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='w', ec='k', alpha=0.5)\nax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the graph\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [67.32, 82.98, 89.53, 90.47, 92.47, 93.7, 96.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 2.0))\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Set the title and labels\nax.set_title('Coverage Ratio vs Number of Training Objects')\nax.set_xlabel('Number of Training Objects')\nax.set_ylabel('Coverage Ratio (%)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('N-ELBO')\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\n\n# Add a legend\nax.legend(['Average', 'Standard Deviation'])\n\n# Add a rectangle for the average\nax.add_patch(plt.Rectangle((0, 750), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the standard deviation\nax.add_patch(plt.Rectangle((0, 700), 10, 50, color='lightblue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 650), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 600), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 550), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 500), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 450), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 400), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 350), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 300), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 250), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 200), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 150), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 100), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 50), 10, 50, color='blue', alpha=0.2))\n\n# Add a rectangle for the curve\nax.add_patch(plt.Rectangle((0, 0), 10, 50, color='blue', alpha=0.2))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5], 'o-', color='purple')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.8, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1], 'o-', color='green')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7], 'o-', color='blue')\n\n# Set the title and labels\nax.set_title('IQM Human Normalized Score')\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN')\n\n# Add a legend\nax.legend(['Baseline', 'SoftMoE', 'Top1-MoE'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Test set TPR | FPR = 10^-4')\n\n# Set the x-axis label\nax.set_xlabel('Vocabulary size')\n\n# Set the y-axis label\nax.set_ylabel('TPR')\n\n# Define the data points\nx = [256, 512, 1024, 2048, 4096, 8192, 16384]\ny = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 0.98]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add a legend\nax.legend(['BPE', 'Wordpunct', 'Whitespaces'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for CNN\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [26.0, 28.2, 30.4, 32.6, 34.8, 36.0, 38.2, 40.4, 42.6, 44.8]\n\n# Data for CIF\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [24.7, 26.9, 29.1, 31.3, 33.5, 35.7, 37.9, 40.1, 42.3, 44.5]\n\n# Data for STAR\nx3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny3 = [22.6, 24.8, 27.0, 29.2, 31.4, 33.6, 35.8, 38.0, 40.2, 42.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y, label='CNN', color='#F5F5DC')\nax.plot(x2, y2, label='CIF', color='#800080')\nax.plot(x3, y3, label='STAR', color='#000000')\n\n# Set the title and labels\nax.set_title('Word Error Rate vs Compression Rate')\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99]\ny2 = [0.85, 0.86, 0.87, 0.88, 0.89, 0.90, 0.91, 0.92]\ny3 = [0.75, 0.76, 0.77, 0.78, 0.79, 0.80, 0.81, 0.82]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'r-', label='PILOTE')\nax.plot(x, y2, 'b-', label='Re-trained model')\nax.plot(x, y3, 'g-', label='Pre-trained model accuracy')\n\n# Markers\nax.plot(25, 0.92, 'ro')\nax.plot(50, 0.93, 'ro')\nax.plot(75, 0.94, 'ro')\nax.plot(100, 0.95, 'ro')\nax.plot(125, 0.96, 'ro')\nax.plot(150, 0.97, 'ro')\nax.plot(175, 0.98, 'ro')\nax.plot(200, 0.99, 'ro')\n\nax.plot(25, 0.85, 'bo')\nax.plot(50, 0.86, 'bo')\nax.plot(75, 0.87, 'bo')\nax.plot(100, 0.88, 'bo')\nax.plot(125, 0.89, 'bo')\nax.plot(150, 0.90, 'bo')\nax.plot(175, 0.91, 'bo')\nax.plot(200, 0.92, 'bo')\n\nax.plot(25, 0.75, 'go')\nax.plot(50, 0.76, 'go')\nax.plot(75, 0.77, 'go')\nax.plot(100, 0.78, 'go')\nax.plot(125, 0.79, 'go')\nax.plot(150, 0.80, 'go')\nax.plot(175, 0.81, 'go')\nax.plot(200, 0.82, 'go')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Model Accuracy over Number of Exemplars')\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Grid\nax.grid(True)\n\n# Save figure\nplt.savefig('model_accuracy.png')\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Average Fidelity Over Time')\n\n# Set the x-axis label\nax.set_xlabel('# of Steps')\n\n# Set the y-axis label\nax.set_ylabel('Avg Fidelity')\n\n# Create a line plot with the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1], color='blue')\n\n# Add a legend to the plot\nax.legend(['xLLM', 'Single-Pass LLM'], loc='upper left')\n\n# Set the y-axis limits\nax.set_ylim(0.1, 1.1)\n\n# Set the x-axis limits\nax.set_xlim(0, 20)\n\n# Set the y-axis ticks\nax.set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['All', 'MLP', 'GCN', 'NCN', 'NEC', 'SEAL', 'Node2Vec']\nhits = [75, 80, 75, 70, 65, 60, 55]\ngoals = [45, 50, 45, 40, 35, 30, 25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(teams, hits, label='Hits')\nax.plot(teams, goals, label='Goals')\n\n# Set the title and labels\nax.set_title('Team Performance')\nax.set_xlabel('Teams')\nax.set_ylabel('Scores')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Android')\n\n# Create a line plot with the data\nax.plot([2, 4, 6, 8, 10, 12], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05], 'bo-')\nax.plot([2, 4, 6, 8, 10, 12], [0.04, 0.04, 0.04, 0.04, 0.04, 0.04], 'ro-')\nax.plot([2, 4, 6, 8, 10, 12], [0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 'go-')\n\n# Set the x-axis label\nax.set_xlabel('Layer')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the legend\nax.legend(['outside-code-diff', 'inside-code-diff'])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 9)\n\n# Set the y-axis limits\nax.set_ylim(0.3, 10)\n\n# Set the x-axis label\nax.set_xlabel('Digit Length')\n\n# Set the y-axis label\nax.set_ylabel('Digit Accuracy')\n\n# Plot the data\nax.plot([6, 7, 8, 9], [0.5, 0.7, 0.8, 0.9], 'b-')\nax.plot([6, 7, 8, 9], [0.4, 0.6, 0.7, 0.8], 'g-')\nax.plot([6, 7, 8, 9], [0.3, 0.5, 0.6, 0.7], 'r-')\nax.plot([6, 7, 8, 9], [0.2, 0.4, 0.5, 0.6], 'y-')\nax.plot([6, 7, 8, 9], [0.1, 0.3, 0.4, 0.5], 'c-')\nax.plot([6, 7, 8, 9], [0.0, 0.2, 0.3, 0.4], 'm-')\n\n# Add a legend\nax.legend(['Direct (100 samples)', 'RFFT (100 samples)', 'Scratchpad (100 samples)', 'Red (5000 samples)', 'Orange (50000 samples)', 'Yellow (500000 samples)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-ticks\nax.set_yticks([0.25, 0.3, 0.35, 0.4, 0.45, 0.5])\n\n# Draw a horizontal line at y=0.375\nax.axhline(y=0.375, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.35\nax.axhline(y=0.35, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.325\nax.axhline(y=0.325, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.3\nax.axhline(y=0.3, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.275\nax.axhline(y=0.275, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.25\nax.axhline(y=0.25, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.225\nax.axhline(y=0.225, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.2\nax.axhline(y=0.2, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.175\nax.axhline(y=0.175, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.15\nax.axhline(y=0.15, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.125\nax.axhline(y=0.125, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.1\nax.axhline(y=0.1, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.075\nax.axhline(y=0.075, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.05\nax.axhline(y=0.05, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.025\nax.axhline(y=0.025, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Draw a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Draw a vertical line at x=20\nax.axvline(x=20, color='black', linestyle='-')\n\n# Draw a vertical line at x=40\nax.axvline(x=40, color='black', linestyle='-')\n\n# Draw a vertical line at x=60\nax.axvline(x=60, color='black', linestyle='-')\n\n# Draw a vertical line at x=80\nax.axvline(x=80, color='black', linestyle='-')\n\n# Draw a scatter plot\nax.scatter([0, 20, 40, 60, 80], [0.25, 0.3, 0.35, 0.4, 0.45], color='orange')\n\n# Draw a line plot\nax.plot([0, 20, 40, 60, 80], [0.25, 0.3, 0.35, 0.4, 0.45], color='orange')\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='red'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny2 = [0.50, 0.60, 0.70, 0.80, 0.90]\ny3 = [0.45, 0.55, 0.65, 0.75, 0.85]\ny4 = [0.40, 0.50, 0.60, 0.70, 0.80]\ny5 = [0.35, 0.45, 0.55, 0.65, 0.75]\ny6 = [0.30, 0.40, 0.50, 0.60, 0.70]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'r-', label='CNN')\nax.plot(x, y2, 'g-', label='CNN+HMM')\nax.plot(x, y3, 'b-', label='RF')\nax.plot(x, y4, 'c-', label='RF+HMM')\nax.plot(x, y5, 'm-', label='CNN')\nax.plot(x, y6, 'k-', label='CNN+HMM')\n\n# Add markers\nax.plot(20, 0.55, 'ro')\nax.plot(40, 0.65, 'go')\nax.plot(60, 0.75, 'bo')\nax.plot(80, 0.85, 'co')\nax.plot(100, 0.95, 'mo')\n\n# Add labels and title\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\nax.set_title('Performance of Different Models')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.plot(x, y1, 'o-', color='orange')\nax.plot(x, y2, 'o-', color='blue')\n\n# Markers\nfor i, txt in enumerate(y1):\n    ax.annotate(txt, (x[i], y1[i]))\nfor i, txt in enumerate(y2):\n    ax.annotate(txt, (x[i], y2[i]))\n\n# Title and labels\nax.set_title('Warranty vs. Number of Microphones')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Warranty (%)')\n\n# Grid\nax.grid(True)\n\n# Legend\nax.legend(['Warranty', 'AMiW'])\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(10**-7, 10**4)\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis label\nax.set_xlabel('Quantization error')\n\n# Set the y-axis label\nax.set_ylabel('Window size')\n\n# Set the title\nax.set_title('Quantization error vs Window size')\n\n# Define the data points\nx = np.logspace(-7, 4, 100)\ny = np.sin(x)\n\n# Plot the data points\nax.plot(x, y, 'b-', label='empirical relat. (B2=8.0)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.05, 0.85), 0.1, 0.1, color='blue')\nax.add_patch(logo)\n\n# Create a rectangle for the performance graph\nperformance_graph = plt.Rectangle((0.05, 0.2), 0.9, 0.6, color='orange')\nax.add_patch(performance_graph)\n\n# Create a rectangle for the ratio graph\nratio_graph = plt.Rectangle((0.05, 0.2), 0.9, 0.6, color='purple')\nax.add_patch(ratio_graph)\n\n# Create a rectangle for the PNA + ours graph\npna_ours_graph = plt.Rectangle((0.05, 0.2), 0.9, 0.6, color='green')\nax.add_patch(pna_ours_graph)\n\n# Create a rectangle for the GIN + ours graph\ngin_ours_graph = plt.Rectangle((0.05, 0.2), 0.9, 0.6, color='red')\nax.add_patch(gin_ours_graph)\n\n# Set the limits of the x-axis and y-axis\nax.set_xlim([0.1, 1.0])\nax.set_ylim([0.4, 1.0])\n\n# Set the labels of the x-axis and y-axis\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 30)\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78.0)\n\n# Set the x-axis tick labels\nax.set_xticks(range(6, 31, 2))\n\n# Set the y-axis tick labels\nax.set_yticks(range(75, 79, 1))\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the title of the plot\nax.set_title('Model Accuracy vs Ensemble Size')\n\n# Plot the data\nax.plot([6, 12, 18, 24, 30], [75.5, 76.5, 77.5, 78.0, 77.5], 'b-')\n\n# Add a rectangle for the shaded area\nrect = plt.Rectangle((6, 74.5), 12, 3, color='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the shaded area\nrect = plt.Rectangle((18, 74.5), 12, 3, color='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nepochs = [3, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\ngpt_neo = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3]\ngpt_5 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4]\ngpt_10 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5]\ngpt_30 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(epochs, gpt_neo, 'r-', label='GPT-Neo')\nax.plot(epochs, gpt_5, 'y-', label='GPT-5')\nax.plot(epochs, gpt_10, 'b-', label='GPT-10')\nax.plot(epochs, gpt_30, 'g-', label='GPT-30')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('Epochs')\nax.set_ylabel('MAE')\n\n# Title\nax.set_title('Performance of GPT Models')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [96, 192, 336, 720]\ny1 = [0.12, 0.14, 0.16, 0.18]\ny2 = [0.10, 0.12, 0.14, 0.16]\ny3 = [0.08, 0.10, 0.12, 0.14]\ny4 = [0.06, 0.08, 0.10, 0.12]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(15.0, 4.0))\n\n# Plot the data\naxs[0, 0].plot(x, y1, 'r-')\naxs[0, 0].set_title('Traffic')\naxs[0, 0].scatter(x, y1, c='r', marker='*')\n\naxs[0, 1].plot(x, y2, 'o-')\naxs[0, 1].set_title('ETMm2')\naxs[0, 1].scatter(x, y2, c='orange', marker='*')\n\naxs[1, 0].plot(x, y3, 'g-')\naxs[1, 0].set_title('ETTh2')\naxs[1, 0].scatter(x, y3, c='green', marker='*')\n\naxs[1, 1].plot(x, y4, 'b-')\naxs[1, 1].set_title('ECL')\naxs[1, 1].scatter(x, y4, c='blue', marker='*')\n\n# Set the x-axis labels\nfor ax in axs.flat:\n    ax.set_xlabel('pred_length')\n    ax.set_ylabel('mse')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Serial (n=8, m=1)\nserial_x = [224, 128, 64, 32]\nserial_y = [70, 65, 60, 55]\n\n# Data for Parallel (n=2, m=4)\nparallel_x = [224, 128, 64, 32]\nparallel_y = [80, 75, 70, 65]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data\nax.plot(serial_x, serial_y, 'o-', color='orange', label='Serial (n=8, m=1)')\nax.plot(parallel_x, parallel_y, 'o-', color='blue', label='Parallel (n=2, m=4)')\n\n# Add labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Top-1 Acc.')\nax.set_title('Top-1 Accuracy over Time')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Classification Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Set the x-ticks\nax.set_xticks([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25])\n\n# Set the y-ticks\nax.set_yticks(range(0, 101, 10))\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Set the x-ticks\nax.set_xticks([0, 25, 50, 75, 100, 125, 150, 175, 200])\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'r-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'b-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'g-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'y-')\n\n# Add a legend\nax.legend(['Line 1 (Sinusoidal)', 'Line 2 (Quadratic)', 'Line 3 (Random Noise)', 'Line 4 (Exponential Focus)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x/10)\ny2 = np.cos(x/10)\ny3 = np.tan(x/10)\n\n# Plot the data\nax.plot(x, y1, 'o-', label='Line 1')\nax.plot(x, y2, 's-', label='Line 2')\nax.plot(x, y3, '^-', label='Line 3')\n\n# Add labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\nax.set_title('Polynomial Trend Analysis')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Set the title of the plot\nax.set_title('ogbl-collab Results')\n\n# Create a list of labels for the x-axis\nx_labels = ['All', 'MLP', 'GCN', 'NCN', 'Node2Vec']\n\n# Create a list of values for the y-axis\ny_values = [75, 70, 65, 60, 55]\n\n# Create a bar chart with the data\nax.bar(x_labels, y_values, color='blue')\n\n# Add a legend to the plot\nax.legend(['ogbl-collab 2022', 'ogbl-collab 2023'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the grid\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(10, 60)\nax.set_ylim(10**-14, 10**-8)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('N')\nax.set_ylabel('Precision')\n\n# Plot the lines\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'b-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-12, 10**-12, 10**-12, 10**-12, 10**-12], 'r-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-14, 10**-14, 10**-14, 10**-14, 10**-14, 10**-14], 'g-')\n\n# Add markers\nax.plot(10, 10**-10, 'ro')\nax.plot(20, 10**-12, 'go')\nax.plot(30, 10**-14, 'bo')\nax.plot(40, 10**-10, 'ro')\nax.plot(50, 10**-12, 'go')\nax.plot(60, 10**-14, 'bo')\n\n# Add legends\nax.legend(['Standard', 'Constrained', 'Experimental', 'Hypothetical'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig1, ax1 = plt.subplots(figsize=(12, 8))\nax1.set_title('Graph Variation 1')\nax1.set_xlabel('N')\nax1.set_ylabel('Peak Performance')\nax1.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'b-')\nax1.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'r-')\nax1.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'g-')\nax1.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'y-')\nax1.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'm-')\nax1.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'c-')\nax1.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'k-')\n\n# Create a figure and axis for the second graph\nfig2, ax2 = plt.subplots(figsize=(12, 8))\nax2.set_title('Graph Variation 2')\nax2.set_xlabel('N')\nax2.set_ylabel('Peak Performance')\nax2.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'b-')\nax2.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'r-')\nax2.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'g-')\nax2.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'y-')\nax2.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'm-')\nax2.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'c-')\nax2.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'k-')\n\n# Create a figure and axis for the third graph\nfig3, ax3 = plt.subplots(figsize=(12, 8))\nax3.set_title('Graph Variation 3')\nax3.set_xlabel('N')\nax3.set_ylabel('Peak Performance')\nax3.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'b-')\nax3.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'r-')\nax3.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'g-')\nax3.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'y-')\nax3.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'm-')\nax3.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'c-')\nax3.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'k-')\n\n# Create a figure and axis for the fourth graph\nfig4, ax4 = plt.subplots(figsize=(12, 8))\nax4.set_title('Graph Variation 4')\nax4.set_xlabel('N')\nax4.set_ylabel('Peak Performance')\nax4.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'b-')\nax4.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'r-')\nax4.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'g-')\nax4.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'y-')\nax4.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'm-')\nax4.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'c-')\nax4.plot([1, 2, 3, 4, 5], [10, 9, 8, 7, 6], 'k-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 10.0))\nfig.suptitle('Daytime Activity Monitoring')\n\n# Daytime Activity\nx = np.linspace(0, 25, 100)\ny = np.sin(x)\naxs[0].plot(x, y, 'b-')\naxs[0].set_title('Daytime Activity')\naxs[0].set_xlabel('Time (Hours)')\naxs[0].set_ylabel('Activity Level')\naxs[0].legend(['Standard Activity'])\n\n# Nighttime Activity\nx = np.linspace(0, 25, 100)\ny = np.cos(x)\naxs[1].plot(x, y, 'r-')\naxs[1].set_title('Nighttime Activity Monitoring')\naxs[1].set_xlabel('Time (Hours)')\naxs[1].set_ylabel('Activity Level')\naxs[1].legend(['Innovative Activity'])\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Create a color bar for the legend\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='Blues'))\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(scatter)\n\n# Add a text annotation to the plot\ntext = plt.Text(0.5, 0.5, 'Sample Text', color='black')\nax.add_artist(text)\n\n# Add a rectangle patch to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a line plot to the plot\nline = plt.Line2D([0, 1], [0, 1], color='red')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.Circle((0,"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sales and Temperature Correlation Over a Year')\n\n# Set the x-axis label\nax.set_xlabel('Month')\n\n# Set the y-axis label\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\n# Set the y-ticks\nax.set_yticks(range(800, 1600, 100))\n\n# Set the x-tick labels\nax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n\n# Set the y-tick labels\nax.set_yticklabels(range(800, 1600, 100))\n\n# Create a scatter plot for sales data\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1100, 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], color='blue')\n\n# Create a scatter plot for temperature data\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42], color='red')\n\n# Create a line plot for sales data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1100, 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], color='blue')\n\n# Create a line plot for temperature data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42], color='red')\n\n# Add a legend\nax.legend(['Monthly Sales', 'Average Temperature'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Exponential Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-2, 14)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\n"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny2 = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1]\ny3 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2]\ny4 = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3]\ny5 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny6 = [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='5-shot direct')\nax.plot(x, y2, 'o-', label='5-shot scratchpad')\nax.plot(x, y3, 'g-', label='5-shot rule-following')\n\n# Set the title and labels\nax.set_title('Shot Accuracy vs Digit Length')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Smoothed Representation')\n\n# Create a scatter plot with the data\nax.scatter([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], color='purple', label='Smoothed Data')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 20)\nax.set_ylim(-1, 1)\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second subplot\nax2.set_title('First Difference of Data')\n\n# Create a scatter plot with the data\nax2.scatter([2, 4, 6, 8, 10, 12, 14, 16, 18], [100, 90, 80, 70, 60, 50, 40, 30, 20], color='orange', label='Difference Data')\n\n# Add a legend to the second subplot\nax2.legend()\n\n# Set the x-axis and y-axis limits\nax2.set_xlim(0, 20)\nax2.set_ylim(-10, 110)\n\n# Create a third subplot\nax3 = fig.add_subplot(213)\n\n# Set the title of the third subplot\nax3.set_title('Cumulative Sum Over Time')\n\n# Create a scatter plot with the data\nax3.scatter([2, 4, 6, 8, 10, 12, 14, 16, 18], [25, 20, 15, 10, 5, 0, 5, 10, 15], color='green', label='Cumulative Sum')\n\n# Add a legend to the third subplot\nax3.legend()\n\n# Set the x-axis and y-axis limits\nax3.set_xlim(0, 20)\nax3.set_ylim(-1, 26)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Sinusoidal Pattern')\n\n# Create a line plot with a sine wave\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.plot(x, y, 'm-', label='Sin Wave')\n\n# Set the x-axis and y-axis limits\nax.set_xlim([0, 10])\nax.set_ylim([-1.5, 1.5])\n\n# Add a legend to the plot\nax.legend()\n\n# Repeat for other patterns\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\nax.set_title('Cosine Pattern')\nx = np.linspace(0, 10, 100)\ny = np.cos(x)\nax.plot(x, y, 'g-', label='Cos Wave')\nax.set_xlim([0, 10])\nax.set_ylim([-1.5, 1.5])\nax.legend()\n\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\nax.set_title('Exponential Decay')\nx = np.linspace(0, 10, 100)\ny = np.exp(-x/2)\nax.plot(x, y, 'b-', label='Exp Decay')\nax.set_xlim([0, 10])\nax.set_ylim([0.2, 1.2])\nax.legend()\n\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\nax.set_title('Logarithmic Growth')\nx = np.linspace(0, 10, 100)\ny = np.log(x+1)\nax.plot(x, y, 'r-', label='Log Growth')\nax.set_xlim([0, 10])\nax.set_ylim([0.5, 2.5])\nax.legend()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], 'b-')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], 'ro')\n\n# Set the title and labels\nax.set_title('Positive bound')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Weight (kg)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [80, 82, 84, 86, 88, 90, 92, 94, 96], 'ro-')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [82, 84, 86, 88, 90, 92, 94, 96, 98], 'go-')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [84, 86, 88, 90, 92, 94, 96, 98, 100], 'bo-')\n\n# Set the x-axis limits\nax.set_xlim(0.0, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(70.0, 100.0)\n\n# Add a title\nax.set_title('Positive Bound')\n\n# Add labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Define the data for each subplot\ndata = [\n    [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],\n    [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],\n    [1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\n]\n\n# Plot the data\nfor i, ax in enumerate(axs):\n    ax.plot(data[i], 'r-')\n    ax.set_title('Dry vs Rain')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Relaxation Level')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Passive', markerfacecolor='b', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Rain', markerfacecolor='r', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Replay', markerfacecolor='g', markersize=10)]\naxs[0].legend(handles=legend_elements)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Set the x-axis label\nax.set_xlabel('n_aug')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Create a list of n_aug values\nn_aug_values = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n# Create a list of performance gain values for each n_aug\nperformance_gain_values = [2, 4, 6, 8, 7, 5, 3, 1, 0]\n\n# Plot the data\nax.plot(n_aug_values, performance_gain_values, 'b-')\n\n# Add markers at each data point\nfor i, v in enumerate(performance_gain_values):\n    ax.text(i, v, str(v), color='blue', ha='center', va='bottom')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot the first subplot\naxs[0].plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'r-')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Decomposition IO Norm')\naxs[0].set_ylabel('Accuracy')\naxs[0].text(0, 0.75, 'COCO (10k)', color='red')\n\n# Plot the second subplot\naxs[1].plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'b-')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Decomposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].text(0, 0.75, 'LAION (10k)', color='blue')\n\n# Plot the third subplot\naxs[2].plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'g-')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Decomposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].text(0, 0.75, 'COCO (5k)', color='green')\naxs[2].text(0, 0.70, 'LAION (5k)', color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig1, ax1 = plt.subplots(figsize=(12.0, 9.0))\nax1.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'b-')\nax1.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax1.set_xlabel('Parameter Rate')\nax1.set_ylabel('Error Rate vs. Learning Rate')\nax1.set_title('Error Rate vs. Learning Rate')\n\n# Create a figure and axis for the second subplot\nfig2, ax2 = plt.subplots(figsize=(12.0, 9.0))\nax2.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'r-')\nax2.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'bo')\nax2.set_xlabel('Parameter Rate')\nax2.set_ylabel('Accuracy vs. Dropout')\nax2.set_title('Accuracy vs. Dropout')\n\n# Create a figure and axis for the third subplot\nfig3, ax3 = plt.subplots(figsize=(12.0, 9.0))\nax3.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'g-')\nax3.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'go')\nax3.set_xlabel('Parameter Rate')\nax3.set_ylabel('Error Rate vs. Learning Rate')\nax3.set_title('Error Rate vs. Learning Rate')\n\n# Create a figure and axis for the fourth subplot\nfig4, ax4 = plt.subplots(figsize=(12.0, 9.0))\nax4.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'y-')\nax4.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax4.set_xlabel('Parameter Rate')\nax4.set_ylabel('Accuracy vs. Dropout')\nax4.set_title('Accuracy vs. Dropout')\n\n# Create a figure and axis for the fifth subplot\nfig5, ax5 = plt.subplots(figsize=(12.0, 9.0))\nax5.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'm-')\nax5.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'bo')\nax5.set_xlabel('Parameter Rate')\nax5.set_ylabel('Error Rate vs. Learning Rate')\nax5.set_title('Error Rate vs. Learning Rate')\n\n# Create a figure and axis for the sixth subplot\nfig6, ax6 = plt.subplots(figsize=(12.0, 9.0))\nax6.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'c-')\nax6.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax6.set_xlabel('Parameter Rate')\nax6.set_ylabel('Accuracy vs. Dropout')\nax6.set_title('Accuracy vs. Dropout')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], 'b-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2], 'r-')\n\n# Set the title and labels\nax.set_title('Metric 1')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Add a legend\nax.legend(['Base Model', 'Our Model'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Create a line plot for the base model\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0], label='Base Model', color='cyan')\n\n# Create a line plot for the our model\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02], label='Our Model', color='cyan')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 10**7)\n\n# Set the y-axis limits\nax.set_ylim(10**-13, 10**-4)\n\n# Set the x-axis ticks\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-13, 10**-10, 10**-7, 10**-4])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^1', '2*10^1', '3*10^1', '4*10^1', '5*10^1', '6*10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-13', '10^-10', '10^-7', '10^-4'])\n\n# Set the title of the plot\nax.set_title('Plot of f(x)')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('f(x)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Create a scatter plot with a blue line for performance\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'bo-')\n\n# Create a scatter plot with a red line for efficiency\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'ro-')\n\n# Add a legend to the plot\nax.legend(['Performance', 'Efficiency'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Create a scatter plot for performance data\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9], color='blue', label='Performance')\n\n# Create a scatter plot for efficiency data\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3], color='red', label='Efficiency')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25, 30])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2'])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30'])\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', color='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', color='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', color='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', color='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', color='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', color='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', color='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', color='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', color='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', color='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', color='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', color='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', color='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', color='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', color='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', color='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=12)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', linestyle='--')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=2)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=2)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', pad=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', pad=10)\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', alpha=0.5)\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', color='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', color='blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='red')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', length=10)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', length=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=12)\n\n# Set the color of the y-axis tick labels"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('floralwhite')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value')\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the grid lines\nax.grid(True)\n\n# Plot the data series\nax.plot([0, 5, 10, 15, 20, 25], [1.0, 0.8, 0.6, 0.4, 0.2, 0.0], 'b-')\nax.plot([0, 5, 10, 15, 20, 25], [0.8, 0.6, 0.4, 0.2, 0.0, 0.2], 'g-')\nax.plot([0, 5, 10, 15, 20, 25], [0.6, 0.4, 0.2, 0.0, 0.2, 0.4], 'r-')\nax.plot([0, 5, 10, 15, 20, 25], [0.4, 0.2, 0.0, 0.2, 0.4, 0.6], 'm-')\nax.plot([0, 5, 10, 15, 20, 25], [0.2, 0.0, 0.2, 0.4, 0.6, 0.8], 'c-')\nax.plot([0, 5, 10, 15, 20, 25], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0], 'y-')\n\n# Add a legend\nax.legend(['Data Series 1', 'Data Series 2 with Gradient', 'Data Series 3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\ny4 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny5 = [70, 65, 60, 55, 50, 45, 40, 35, 30, 25]\ny6 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Plot\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\nax.plot(x, y1, 'b-', label='BaCE')\nax.plot(x, y2, 'c-', label='LWF')\nax.plot(x, y3, 'm-', label='EWC')\nax.plot(x, y4, 'g-', label='SEQ')\nax.plot(x, y5, 'y-', label='SE')\nax.plot(x, y6, 'k-', label='S')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Average Accuracy (%)')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [80, 85, 90, 95, 92, 88, 85, 82, 79, 76]\ny2 = [70, 75, 80, 85, 82, 78, 75, 72, 69, 66]\ny3 = [60, 65, 70, 75, 72, 68, 65, 62, 59, 56]\ny4 = [50, 55, 60, 65, 62, 58, 55, 52, 49, 46]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the data on the first subplot\naxs[0].plot(x, y1, 'b-', label='BaCE')\naxs[0].plot(x, y2, 'c-', label='EWC')\naxs[0].set_title('Performance Comparison: BaCE vs EWC')\naxs[0].set_xlabel('Task')\naxs[0].set_ylabel('Performance (%)')\naxs[0].legend()\n\n# Plot the data on the second subplot\naxs[1].plot(x, y3, 'r^', label='LWF')\naxs[1].plot(x, y4, 'm^', label='SEQ')\naxs[1].set_title('Performance Comparison: LWF vs SEQ')\naxs[1].set_xlabel('Task')\naxs[1].set_ylabel('Performance (%)')\naxs[1].legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Set the title of the plot\nax.set_title('model1 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate')\n\n# Create a scatter plot with the data\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Add a legend to the plot\nax.legend(['model1 Series 1', 'model1 Series 2'])\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Set the color of the legend\nax.legend(['model1 Series 1', 'model1 Series 2'], loc='upper left', fancybox=True, shadow=True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the title\nax.set_title('model1 Performance', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Iterations', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Success Rate', color='purple')\n\n# Set the color of the scatter plot points\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.2, 0.4, 0.6, "}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Microphone Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Number of microphones')\n\n# Set the y-axis label\nax.set_ylabel('Sales (in millions)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the tick labels for the y-axis\nax.set_yticks([2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'IHM', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'SDM', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'AMM', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'AWR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WWR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'WRR', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black')\n\n# Set the color of the text\nax.text(0.5, 0"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Trend Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Number of microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Plot the data\nax.plot([2, 3, 4, 5, 6, 7, 8], [22, 24, 26, 28, 29, 30, 31], 'o-', color='orange', label='WER (%)')\nax.plot([2, 3, 4, 5, 6, 7, 8], [20, 22, 24, 26, 28, 30, 32], 'o-', color='blue', label='AMR WER (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(x, y, 'b-')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Highlight 1\nplt.scatter(2, 0.2, color='orange', label='Highlight 1')\n# Highlight 2\nplt.scatter(3, 0.3, color='orange', label='Highlight 2')\n# Highlight 3\nplt.scatter(4, 0.4, color='orange', label='Highlight 3')\n# Highlight 4\nplt.scatter(5, 0.5, color='orange', label='Highlight 4')\n# Highlight 5\nplt.scatter(6, 0.6, color='orange', label='Highlight 5')\n# Highlight 6\nplt.scatter(7, 0.7, color='orange', label='Highlight 6')\n# Highlight 7\nplt.scatter(8, 0.8, color='orange', label='Highlight 7')\n\n# Legend\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Create a scatter plot\nx = np.linspace(0.1, 1.0, 100)\ny = np.sin(x * np.pi / 2)\nax.plot(x, y, 'b-')\n\n# Add a title\nax.set_title('Contrastive loss weight.')\n\n# Add a legend\nax.legend(['Contrastive loss weight'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Plot the data\nax.plot([2,3,4,5,6,7,8], [0.9,0.8,0.7,0.6,0.5,0.4,0.3], 'ro-')\nax.plot([2,3,4,5,6,7,8], [0.9,0.8,0.7,0.6,0.5,0.4,0.3], 'go-')\n\n# Set the title and labels\nax.set_title('Highlight 3')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add a legend\nax.legend(['AMI WER', 'Threshold'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='blue')\nax.add_patch(logo)\n\n# Create a rectangle for the PNA and GIN logos\npna_logo = plt.Rectangle((0.1, 0.8), 0.1, 0.1, color='blue')\ngin_logo = plt.Rectangle((0.2, 0.8), 0.1, 0.1, color='green')\nax.add_patch(pna_logo)\nax.add_patch(gin_logo)\n\n# Create a rectangle for the performance graph\nperformance_graph = plt.Rectangle((0.1, 0.7), 0.8, 0.1, color='green')\nax.add_patch(performance_graph)\n\n# Create a rectangle for the ratio r graph\nratio_r_graph = plt.Rectangle((0.1, 0.6), 0.8, 0.1, color='blue')\nax.add_patch(ratio_r_graph)\n\n# Create a rectangle for the PNA and GIN logos\npna_logo = plt.Rectangle((0.1, 0.5), 0.1, 0.1, color='blue')\ngin_logo = plt.Rectangle((0.2, 0.5), 0.1, 0.1, color='green')\nax.add_patch(pna_logo)\nax.add_patch(gin_logo)\n\n# Create a rectangle for the performance graph\nperformance_graph = plt.Rectangle((0.1, 0.4), 0.8, 0.1, color='green')\nax.add_patch(performance_graph)\n\n# Create a rectangle for the ratio r graph\nratio_r_graph = plt.Rectangle((0.1, 0.3), 0.8, 0.1, color='blue')\nax.add_patch(ratio_r_graph)\n\n# Create a rectangle for the PNA and GIN logos\npna_logo = plt.Rectangle((0.1, 0.2), 0.1, 0.1, color='blue')\ngin_logo = plt.Rectangle((0.2, 0.2), 0.1, 0.1, color='green')\nax.add_patch(pna_logo)\nax.add_patch(gin_logo)\n\n# Create a rectangle for the performance graph\nperformance_graph = plt.Rectangle((0.1, 0.1), 0.8, 0.1, color='green')\nax.add_patch(performance_graph)\n\n# Create a rectangle for the ratio r graph\nratio_r_graph = plt.Rectangle((0.1, 0.0), 0.8, 0.1, color='blue')\nax.add_patch(ratio_r_graph)\n\n# Set the x-axis limits\nax.set_xlim([0.1, 1.0])\n\n# Set the y-axis limits\nax.set_ylim([0.4, 0.9])\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0.1, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0.4, 1.0, 0.1))\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Trends')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(-80, 20)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nax.set_yticks([-80, -60, -40, -20, 0, 20])\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0], ax=ax)\ncbar.set_label('Color Bar Label')\n\n# Set the legend\nlegend_elements = [Line2D([0], [0], marker='o', color='w', label='PNA + ours', markerfacecolor='m', markersize=10),\n                  Line2D([0], [0], marker='o', color='w', label='GIN + ours', markerfacecolor='y', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data for the plots\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.2, 1.1]\ny2 = [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny3 = [0.3, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='PNAs + ours')\nax.plot(x, y2, 'r-', label='GINs + ours')\nax.plot(x, y3, 'g-', label='PNA + GIN')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Create a scatter plot with a blue color for each point\nax.scatter([0.2, 0.4, 0.6, 0.8, 1.0], [0.5, 0.7, 0.9, 1.1, 1.3], color='blue')\n\n# Create a line plot with a red color for each line\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.5, 0.7, 0.9, 1.1, 1.3], color='red')\n\n# Add a legend to the plot\nax.legend(['Model 1', 'Model 2'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Model Accuracies')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Model Accuracy')\n\n# Set the x-ticks\nax.set_xticks([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n\n# Set the y-ticks\nax.set_yticks(range(60, 86, 5))\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('purple')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'This is a text', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='black', bbox=dict(facecolor='white', alpha=0.5))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue'))\n\n# Set the color of the ellipse\nax.add_patch(plt.Ellipse((0.5, 0.5), 0.4, 0.4, color='red'))\n\n# Set the color of the line\nax.plot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='green')\n\n# Set the color of the scatter plot\nax.scatter([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='red')\n\n# Set the color of the bar chart\nax.bar([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='blue')\n\n# Set the color of the pie chart\nax.pie([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='red')\n\n# Set the color of the histogram\nax.hist([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='green')\n\n# Set the color of the box plot\nax.boxplot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='blue')\n\n# Set the color of the violin plot\nax.violinplot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='red')\n\n# Set the color of the heatmap\nax.imshow([[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contourf([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94]], cmap='coolwarm')\n\n# Set the color of the stream plot\nax.streamplot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94]])\n\n# Set the color of the quiver plot\nax.quiver([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94]])\n\n# Set the color of the polar plot\nax.polar([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='green')\n\n# Set the color of the 3D plot\nax.plot_surface([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94]], color='red')\n\n# Set the color of the 3D scatter plot\nax.scatter3D([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], color='blue')\n\n# Set the color of the 3D bar chart\nax.bar3d([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], color='red')\n\n# Set the color of the 3D pie chart\nax.pie3D([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='green')\n\n# Set the color of the 3D histogram\nax.hist3D([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='blue')\n\n# Set the color of the 3D contour plot\nax.contour3D([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94]], color='red')\n\n# Set the color of the 3D stream plot\nax.streamplot3D([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94]], color='blue')\n\n# Set the color of the 3D quiver plot\nax.quiver3D([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94]], color='red')\n\n# Set the color of the 3D polar plot\nax.polar3D([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94]], color='green')\n\n# Set the color of the 3D 3D plot\nax.plot_surface3D([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], [[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74,"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\nax.set_title('Performance of Model X')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [90, 92, 95, 93, 91, 94, 92, 93, 95], 'ro-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [85, 87, 90, 88, 86, 89, 87, 88, 90], 'go-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [80, 82, 85, 83, 81, 84, 82, 83, 85], 'bo-')\n\n# Add rectangles for each configuration\nax.add_patch(plt.Rectangle((0.5, 90), 1, 1, color='red'))\nax.add_patch(plt.Rectangle((1.5, 85), 1, 1, color='green'))\nax.add_patch(plt.Rectangle((2.5, 80), 1, 1, color='blue'))\n\n# Create a figure and axis for the second graph\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\nax.set_title('Performance of Model Y')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [75, 77, 80, 78, 76, 79, 77, 78, 80], 'ro-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [70, 72, 75, 73, 71, 74, 72, 73, 75], 'go-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [65, 67, 70, 68, 66, 69, 67, 68, 70], 'bo-')\n\n# Add rectangles for each configuration\nax.add_patch(plt.Rectangle((0.5, 75), 1, 1, color='red'))\nax.add_patch(plt.Rectangle((1.5, 70), 1, 1, color='green'))\nax.add_patch(plt.Rectangle((2.5, 65), 1, 1, color='blue'))\n\n# Create a figure and axis for the third graph\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\nax.set_title('Performance of Model Z')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [85, 87, 90, 88, 86, 89, 87, 88, 90], 'ro-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [80, 82, 85, 83, 81, 84, 82, 83, 85], 'go-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [75, 77, 80, 78, 76, 79, 77, 78, 80], 'bo-')\n\n# Add rectangles for each configuration\nax.add_patch(plt.Rectangle((0.5, 85), 1, 1, color='red'))\nax.add_patch(plt.Rectangle((1.5, 80), 1, 1, color='green'))\nax.add_patch(plt.Rectangle((2.5, 75), 1, 1, color='blue'))\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig1, ax1 = plt.subplots(figsize=(8.0, 4.0))\nax1.set_title('Performance of Llama')\nax1.set_xlabel('Iteration')\nax1.set_ylabel('Score')\n\n# Create a figure and axis for the second graph\nfig2, ax2 = plt.subplots(figsize=(8.0, 4.0))\nax2.set_title('Performance of Falcon')\nax2.set_xlabel('Iteration')\nax2.set_ylabel('Score')\n\n# Create a figure and axis for the third graph\nfig3, ax3 = plt.subplots(figsize=(8.0, 4.0))\nax3.set_title('Performance of Qwen')\nax3.set_xlabel('Iteration')\nax3.set_ylabel('Score')\n\n# Plot the data\nax1.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 92, 93, 94, 95, 94, 93, 92, 91, 90], 'r-')\nax1.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 87, 88, 89, 90, 89, 88, 87, 86, 85], 'g-')\nax1.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 82, 83, 84, 85, 84, 83, 82, 81, 80], 'b-')\n\nax2.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 77, 78, 79, 80, 79, 78, 77, 76, 75], 'r-')\nax2.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 72, 73, 74, 75, 74, 73, 72, 71, 70], 'g-')\nax2.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 67, 68, 69, 70, 69, 68, 67, 66, 65], 'b-')\n\nax3.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 87, 88, 89, 90, 89, 88, 87, 86, 85], 'r-')\nax3.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 82, 83, 84, 85, 84, 83, 82, 81, 80], 'g-')\nax3.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 77, 78, 79, 80, 79, 78, 77, 76, 75], 'b-')\n\n# Add legends\nax1.legend(['Config A - Llama', 'Config B - Llama', 'Config C - Llama'])\nax2.legend(['Config A - Falcon', 'Config B - Falcon', 'Config C - Falcon'])\nax3.legend(['Config A - Qwen', 'Config B - Qwen', 'Config C - Qwen'])\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Sales Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Sales Growth')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4])\n\n# Set the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4'])\n\n# Set the y-ticks\nax.set_yticks([0, 0.5, 1, 1.5, 2, 2.5, 3])\n\n# Set the y-tick labels\nax.set_yticklabels(['$0', '$500K', '$1M', '$1.5M', '$2M', '$2.5M', '$3M'])\n\n# Plot the data\nax.plot([1, 2, 3, 4], [0, 0.5, 1, 1.5], 'r-', label='Brand A Sales Growth')\nax.plot([1, 2, 3, 4], [0, 0.5, 1, 1.5], 'b-', label='Brand B Sales Growth')\nax.plot([1, 2, 3, 4], [0, 0.5, 1, 1.5], 'g-', label='Brand C Sales Growth')\nax.plot([1, 2, 3, 4], [0, 0.5, 1, 1.5], 'c-', label='Brand D Sales Growth')\nax.plot([1, 2, 3, 4], [0, 0.5, 1, 1.5], 'm-', label='Brand E Sales Growth')\nax.plot([1, 2, 3, 4], [0, 0.5, 1, 1.5], 'y-', label='Brand F Sales Growth')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(18.0, 4.0))\n\n# Plot the first subplot\naxs[0, 0].plot([100, 300, 500, 700], [0.5, 1.5, 1.2, 1.8], 'o-')\naxs[0, 0].set_title('Traffic Performance')\naxs[0, 0].set_xlabel('Time (s)')\naxs[0, 0].set_ylabel('Metric Value')\n\n# Plot the second subplot\naxs[0, 1].plot([100, 300, 500, 700], [0.6, 1.6, 1.3, 1.9], 'o-')\naxs[0, 1].set_title('ETMm2 Performance')\naxs[0, 1].set_xlabel('Time (s)')\naxs[0, 1].set_ylabel('Metric Value')\n\n# Plot the third subplot\naxs[0, 2].plot([100, 300, 500, 700], [0.7, 1.7, 1.4, 2.0], 'o-')\naxs[0, 2].set_title('ETTh2 Performance')\naxs[0, 2].set_xlabel('Time (s)')\naxs[0, 2].set_ylabel('Metric Value')\n\n# Plot the fourth subplot\naxs[1, 0].plot([100, 300, 500, 700], [0.8, 1.8, 1.5, 2.1], 'o-')\naxs[1, 0].set_title('ECL Performance')\naxs[1, 0].set_xlabel('Time (s)')\naxs[1, 0].set_ylabel('Metric Value')\n\n# Plot the fifth subplot\naxs[1, 1].plot([100, 300, 500, 700], [0.9, 1.9, 1.6, 2.2], 'o-')\naxs[1, 1].set_title('ECTh Performance')\naxs[1, 1].set_xlabel('Time (s)')\naxs[1, 1].set_ylabel('Metric Value')\n\n# Plot the sixth subplot\naxs[1, 2].plot([100, 300, 500, 700], [1.0, 2.0, 1.7, 2.3], 'o-')\naxs[1, 2].set_title('ECL Performance')\naxs[1, 2].set_xlabel('Time (s)')\naxs[1, 2].set_ylabel('Metric Value')\n\n# Add a legend\nfig.legend(['ECL Run 1', 'ECL Run 2'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plot\nx = ['Passive', 'Rail', 'Replay', 'Sportive']\ny = [14, 12, 10, 8]\n\n# Plot the data\nax.plot(x, y, color='red')\n\n# Set the title and labels\nax.set_title('Relaxation Level')\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Weather', markerfacecolor='black', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Dry', markerfacecolor='red', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Rain', markerfacecolor='red', markersize=10)]\nax.legend(handles=legend_elements)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5']\ny1 = [20, 25, 30, 35, 40]\ny2 = [40, 45, 50, 55, 60]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(9.0, 6.0))\n\n# Plot the data\naxs[0, 0].plot(x, y1, color='purple')\naxs[0, 0].set_title('Category A Growth')\naxs[0, 0].fill_between(x, y1, color='lavender')\n\naxs[0, 1].plot(x, y2, color='red')\naxs[0, 1].set_title('Category B Growth')\naxs[0, 1].fill_between(x, y2, color='pink')\n\naxs[1, 0].plot(x, y1, color='blue')\naxs[1, 0].set_title('Category C Growth')\naxs[1, 0].fill_between(x, y1, color='skyblue')\n\naxs[1, 1].plot(x, y2, color='orange')\naxs[1, 1].set_title('Category D Growth')\naxs[1, 1].fill_between(x, y2, color='navajowhite')\n\naxs[2, 0].plot(x, y1, color='green')\naxs[2, 0].set_title('Category E Growth')\naxs[2, 0].fill_between(x, y1, color='lightgreen')\n\naxs[2, 1].plot(x, y2, color='brown')\naxs[2, 1].set_title('Category F Growth')\naxs[2, 1].fill_between(x, y2, color='burlywood')\n\n# Set the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 30)\n\n# Set the y-axis limits\nax.set_ylim(1e-02, 1e-04)\n\n# Set the grid\nax.grid(True)\n\n# Set the tick labels\nax.set_xticks([4, 6, 10, 20, 30])\nax.set_yticks([1e-02, 1e-04, 1e-06, 1e-08])\n\n# Set the tick label format\nax.ticklabel_format(style='sci', axis='y', scilimits=(0,0))\n\n# Set the tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the tick label color\nax.tick_params(axis='y', colors='red')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='major', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='major', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='minor', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='minor', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='minor', labelcolor='green')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='purple')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=14)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='orange')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=16)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='pink')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=18)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='brown')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=20)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='gray')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=22)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='cyan')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=24)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='magenta')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=26)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='yellow')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=28)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=30)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='white')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=32)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='silver')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=34)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='gold')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=36)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='lime')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=38)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='aqua')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=40)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='fuchsia')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=42)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='navy')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=44)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='maroon')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=46)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='olive')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=48)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='teal')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=50)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='indigo')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=52)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='violet')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=54)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='coral')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=56)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='chartreuse')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=58)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='crimson')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=60)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='cyan')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=62)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkblue')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=64)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkgreen')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=66)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkgrey')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=68)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkkhaki')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=70)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkmagenta')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=72)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkolivegreen')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=74)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkorange')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=76)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkorchid')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=78)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkred')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=80)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darksalmon')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=82)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkseagreen')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=84)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', which='both', labelcolor='darkslateblue')\n\n# Set the tick label font size\nax.tick_params(axis='both', which='both', labelsize=86)\n\n# Set the tick label font weight\nax.tick_params(axis='both', which='both', labelweight='normal')\n\n# Set the tick label font style\nax.tick_params(axis='both', which='both', labelstyle='normal"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the map\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightpink'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightsalmon'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcoral'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightseagreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightcyan'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgreen'))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Create a rectangle"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Create a color bar\ncmap = plt.get_cmap('Blues')\nnorm = plt.Normalize(vmin=0, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm)\n\n# Create a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c=np.random.rand(50), cmap='Blues')\n\n# Set the title of the plot\nax.set_title('My Scatter Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left column\nleft_data = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nleft_labels = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendryks (M5)', 'Addep. (M6)', 'Carmon (M7)']\n\n# Data for the right column\nright_data = [\n    [0.00, 6.20, 4.90, 4.25, 3.65, 3.25],\n    [0.00, 5.15, 2.80, 5.25, 2.95, 2.50],\n    [7.75, 0.00, 6.35, 0.00, 5.45, 2.95],\n    [7.85, 5.90, 6.25, 0.00, 5.75, 4.80],\n    [9.15, 8.75, 7.25, 5.75, 0.00, 4.95],\n    [8.65, 7.40, 6.95, 5.25, 8.95, 6.85],\n    [10.90, 9.90, 9.15, 7.15, 0.00, 0.00]\n]\nright_labels = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendryks (M5)', 'Addep. (M6)', 'Carmon (M7)']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the left column\nax.barh(left_labels, left_data, color='green')\n\n# Plot the right column\nfor i, row in enumerate(right_data):\n    ax.barh(right_labels[i], row, color=plt.cm.Greens(i/len(right_data)))\n\n# Set the title of the plot\nax.set_title('Robust Error (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'VGG16': [0.551, 0.538, 0.744, 0.762],\n    'Resnet101': [0.394, 0.477, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0],\n    'Rotation Invariance': [0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(data['VGG16'], label='VGG16 Cartesian')\nax.plot(data['Resnet101'], label='Resnet101 Cartesian')\nax.plot(data['Rotation Invariance'], label='Rotation Invariance')\n\n# Set the title and labels\nax.set_title('CIFAR-100 Classification Accuracy')\nax.set_xlabel('Rotation angle (\u00b0)')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a color bar\ncmap = plt.get_cmap('Blues')\nnorm = plt.Normalize(vmin=-0.5, vmax=1.5)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\n\n# Add a color bar to the plot\ncbar = fig.colorbar(sm, ax=ax)\n\n# Set the title of the plot\nax.set_title('Color Palette')\n\n# Set the x-axis label\nax.set_xlabel('Sensitivity')\n\n# Set the y-axis label\nax.set_ylabel('Intensity')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 1.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Token rarity')\n\n# Create a rectangle for the background\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Create a scatter plot for the data points\nax.scatter([0, 10, 20, 30, 40, 50], [8, 9, 9, 8, 7, 8], color='black')\n\n# Create a line plot for the trend\nax.plot([0, 10, 20, 30, 40, 50], [8, 9, 9, 8, 7, 8], color='black')\n\n# Create a rectangle for the background\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Set the x-axis label\nax.set_xlabel('GPT2Tokenizer rank')\n\n# Set the y-axis label\nax.set_ylabel('Token rarity')\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Length = 20')\n\n# Create a scatter plot for the data points\nax.scatter([0, 10, 20, 30, 40, 50], [8, 9, 9, 8, 7, 8], color='black')\n\n# Create a line plot for the trend\nax.plot([0, 10, 20, 30, 40, 50], [8, 9, 9, 8, 7, 8], color='black')\n\n# Create a rectangle for the background\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey'))\n\n# Set the x-axis label\nax.set_xlabel('# of documents')\n\n# Set the y-axis label\nax.set_ylabel('Token rarity')\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Create a bar chart\nax.bar(['Sentiment', 'Toxicity', 'News'], [0.35, 0.25, 0.25], color='blue')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis')\nax.set_xlabel('Category')\nax.set_ylabel('Sentiment Score')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nax2.set_title('Sentiment Analysis by Category')\nax2.set_xlabel('Category')\nax2.set_ylabel('Sentiment Score')\n\n# Create a heatmap\ndata = [[-0.40, 0.14, 0.22, 0.13],\n        [-0.13, -0.03, 0.17, 0.12],\n        [-0.24, 0.05, 0.31, 0.17]]\ncax = ax2.matshow(data, interpolation='nearest', cmap=plt.cm.coolwarm)\nfig.colorbar(cax)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [2013, 2019, 2020, 2022, 2023]\ny = [45, 55, 50, 48, 47]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Olympic Success Rate')\nax.set_xlabel('Year')\nax.set_ylabel('Success Rate')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Create a bar chart\nax.bar(['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance'], [250, 180, 300, 120, 150, 170, 220], color='blue')\n\n# Set the title of the graph\nax.set_title('Number of Publications by Domain')\n\n# Create a second figure and axis for the second graph\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Create a line chart\nax.plot([0, 1, 2, 3, 4, 5, 6], [20, 40, 60, 80, 100, 120, 140], color='orange')\nax.plot([0, 1, 2, 3, 4, 5, 6], [10, 30, 50, 70, 90, 110, 130], color='yellow')\nax.plot([0, 1, 2, 3, 4, 5, 6], [20, 40, 60, 80, 100, 120, 140], color='pink')\nax.plot([0, 1, 2, 3, 4, 5, 6], [10, 30, 50, 70, 90, 110, 130], color='cyan')\n\n# Set the title of the graph\nax.set_title('Knowledge Increase by Subject Area')\n\n# Display the graphs\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\nhardware = [30, 40, 50, 60, 70, 80, 90, 100]\nsoftware = [40, 50, 60, 70, 80, 90, 100, 110]\nai = [50, 60, 70, 80, 90, 100, 110, 120]\n\n# Create the first plot\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.plot(years, hardware, label='Hardware')\nax.plot(years, software, label='Software')\nax.plot(years, ai, label='AI')\nax.set_xlabel('Year')\nax.set_ylabel('Progress (%)')\nax.set_title('Technological Advancements')\nax.legend()\n\n# Create the second plot\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.barh(years, hardware, color='blue', label='Hardware')\nax.barh(years, software, left=hardware, color='orange', label='Software')\nax.barh(years, ai, left=[x+y for x,y in zip(hardware, software)], color='green', label='AI')\nax.set_xlabel('Innovation Gap (%)')\nax.set_ylabel('Year')\nax.set_title('Innovation Gaps Across Different Sectors in Technology')\nax.legend()\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Average Legal Crime Rates by Country')\n\n# Create a bar chart with the data\nax.bar(['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain'], [3.2, 2.9, 2.5, 2.7, 2.8, 2.6], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second plot\nax2.set_title('Average Legal Crime Rates by Country')\n\n# Create a scatter plot with the data\nax2.scatter(['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism'], [140, 130, 120, 110, 100], color='blue')\n\n# Set the x-axis label\nax2.set_xlabel('Crime Type')\n\n# Set the y-axis label\nax2.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the bar chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a bar chart with the data\nax.bar(['Public School', 'Private School'], [80, 60], color='blue')\n\n# Set the title of the chart\nax.set_title('Student Performance in Schools')\n\n# Create a second subplot for the pie chart\nax2 = fig.add_subplot(122)\n\n# Create a pie chart with the data\nax2.pie([40, 30, 20, 10], labels=['Books', 'Staff', 'Extracurricular', 'Facilities'], colors=['blue', 'gray', 'orange', 'green'])\n\n# Set the title of the chart\nax2.set_title('Resource Allocation in Schools')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Set the title of the plot\nax.set_title('Average Annual Temperature')\n\n# Create a second figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(10, 5))\n\n# Create a bar chart with random data\nregions = ['Region 1', 'Region 2']\ntemperatures = [20, 25]\nax2.bar(regions, temperatures)\n\n# Set the title of the plot\nax2.set_title('Geographical Elevation Distribution')\n\n# Add color to the plots\nax2.set_facecolor('lightblue')\nax.set_facecolor('lightgrey')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nyears = ['2019', '2020', '2021', '2022']\ntotal_investment = [400, 350, 300, 250]\nproduct_types = ['Savings', 'CDs', 'Stocks', 'Bonds', 'REITs', 'Mutual Funds']\nnumber_of_accounts = [200, 175, 150, 125, 100, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the total investment over time\nax.plot(years, total_investment, color='orange')\nax.fill_between(years, total_investment, color='yellow')\n\n# Plot the number of accounts per product type\nfor i, product in enumerate(product_types):\n    ax.barh(product, number_of_accounts[i], left=i*10, height=5, color='blue')\n\n# Set the title and labels\nax.set_title('Investment Growth Over Time')\nax.set_xlabel('Total Investment ($)')\nax.set_ylabel('Product Type')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.set_title('AI Task Success Rates')\nax.set_xlabel('Algorithm')\nax.set_ylabel('Success Rate (%)')\n\n# Create a bar chart with rectangles representing success rates\nrects = ax.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [85, 90, 95, 92], color='skyblue')\n\n# Add labels to each rectangle\nfor rect in rects:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Create a second subplot for efficiency scores\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.set_title('Algorithm Efficiency Scores')\nax.set_xlabel('Algorithm')\nax.set_ylabel('Efficiency (%)')\n\n# Create a scatter plot with circles representing efficiency scores\ncircles = ax.scatter(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [90, 85, 95, 92], color='pink')\n\n# Add labels to each circle\nfor i, txt in enumerate(['Alg1', 'Alg2', 'Alg3', 'Alg4']):\n    ax.annotate(txt, (i, 95))\n\n# Create a third subplot for adaptability scores\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.set_title('AI Model Adaptability')\nax.set_xlabel('Model')\nax.set_ylabel('Adaptability Score (%)')\n\n# Create a line graph with lines representing adaptability scores\nlines = ax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='green')\n\n# Add labels to each line\nfor i, txt in enumerate(['Model A', 'Model B', 'Model C', 'Model D']):\n    ax.annotate(txt, (i, 95))\n\n# Create a fourth subplot for conditions\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.set_title('Conditions')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\n\n# Create a bar chart with rectangles representing conditions\nrects = ax.bar(['Dry Conditions', 'Wet Conditions'], [90, 85], color='green')\n\n# Add labels to each rectangle\nfor rect in rects:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.set_title('Traffic Volume by Time of Day')\nax.set_xlabel('Number of Vehicles')\nax.set_ylabel('Time of Day')\n\n# Create a bar chart with the data\nax.bar([100, 200, 300, 400, 500, 600, 700], [100, 150, 120, 180, 160, 190, 200], color='orange')\nax.bar([100, 200, 300, 400, 500, 600, 700], [120, 170, 140, 200, 180, 210, 220], color='green')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.set_title('Speed Distribution by Location')\nax.set_xlabel('Location')\nax.set_ylabel('Speed (km/h)')\n\n# Create a bar chart with the data\nax.bar(['Urban', 'Highway'], [80, 120], color='lightblue')\nax.bar(['Urban', 'Highway'], [100, 140], color='skyblue')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.set_title('Elevation Changes Along a Route')\nax.set_xlabel('Distance (km)')\nax.set_ylabel('Elevation (m)')\n\n# Create a line chart with the data\nax.plot([0, 200, 400, 600, 800, 1000], [0, 100, 200, 300, 400, 500], color='purple')\nax.plot([0, 200, 400, 600, 800, 1000], [0, 150, 250, 350, 450, 550], color='lightblue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a pie chart with the data\narts = ['Literature', 'Performing Arts', 'Visual Arts', 'Music', 'Dance']\nvalues = [10, 30, 25, 15, 20]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\npatches, texts, autotexts = ax.pie(values, explode=explode, labels=arts, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nax2.set_title('Student Performance in Arts Education')\n\n# Create a radar chart\nN = 5\ntheta = np.linspace(0.0, 2 * np.pi, N, endpoint=False).tolist()\ntheta += theta[:1]  # To close the polygon\n\n# Data to plot\nperformance_data = [0.2, 0.4, 0.6, 0.8, 0.2]\nexpression_data = [0.1, 0.3, 0.5, 0.7, 0.1]\ncreativity_data = [0.05, 0.25, 0.45, 0.65, 0.05]\n\n# Plot data\nax2.plot(theta, performance_data, 'b-', label='Performance')\nax2.plot(theta, expression_data, 'r-', label='Expression')\nax2.plot(theta, creativity_data, 'g-', label='Creativity')\n\n# Fill area\nax2.fill(theta, performance_data, 'b', alpha=0.1)\nax2.fill(theta, expression_data, 'r', alpha=0.1)\nax2.fill(theta, creativity_data, 'g', alpha=0.1)\n\n# Add legend\nax2.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a bar chart\nax.bar([0.0, 0.1, 0.2, 0.3, 0.4, 0.5], [25000, 20000, 15000, 10000, 5000, 0], color='green')\nax.set_xlabel('Sale Probability')\nax.set_ylabel('Number of Sales')\n\n# Add a legend\nax.legend(['Known Sales', 'Unknown Sales'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Create a rectangle for the histogram\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\nax.add_patch(rectangle)\n\n# Create a rectangle for the pie chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='red')\nax.add_artist(circle)\n\n# Create a scatter plot for the line chart\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='yellow')\n\n# Set the title of the histogram\nax.set_title('Histogram of Stock Returns')\n\n# Set the x-axis label\nax.set_xlabel('Returns')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Create a scatter plot for the line chart\nx = np.random.rand(10)\ny = np.random.rand(10)\nax2.scatter(x, y, color='blue')\n\n# Set the title of the line chart\nax2.set_title('Investment Clusters')\n\n# Set the x-axis label\nax2.set_xlabel('Time')\n\n# Set the y-axis label\nax2.set_ylabel('Value')\n\n# Add legends\nax.legend(['Gains', 'Losses'], loc='upper right')\nax2.legend(['Tech Stocks', 'Energy Stocks'], loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.plot([0, 1, 2, 3, 4], [10, 8, 6, 4, 2], 'bo-')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Energy Consumption (GWh)')\nax.set_title('Energy Consumption Over Time')\n\n# Create a figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(8.0, 10.0), projection='3d')\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_surface(x, y, z, cmap='Blues')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Relative Month')\nax.set_zlabel('Renewable Energy Ratio (%)')\nax.set_title('Renewable Energy Ratio Over Time')\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15, 35, 30, 20]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Create a scatter plot\nfig, ax = plt.subplots(figsize=(10, 5))\nx = np.array([1400, 1600, 1800, 2000])\ny = np.array([350, 300, 250, 200])\ncolors = ['purple', 'purple', 'purple', 'purple']\nax.scatter(x, y, c=colors)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Documents')\nax.set_title('Document Count Over Historical Periods')\n\n# Add text annotations to the scatter plot\nfor i, txt in enumerate(labels):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the scatter plot\nx = [2000, 2005, 2010, 2015, 2020]\ny = [9.25, 9.00, 8.75, 8.50, 8.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Scatter plot\nax.scatter(x, y)\n\n# Set the title and labels\nax.set_title('Luxury Brand Popularity vs Price')\nax.set_xlabel('Average Price ($)')\nax.set_ylabel('Popularity Index')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first graph\nx = np.arange(0, 100, 10)\ny = [75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52]\ncolors = ['green', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'green']\n\n# Data for the second graph\nx2 = np.arange(0, 100, 10)\ny2 = [60.5, 59.3, 59.1, 58.35, 55.95, 55.5, 55.3, 55.1, 54.95, 54.75, 54.55, 54.35]\ncolors2 = ['red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red']\n\n# Data for the third graph\nx3 = np.arange(0, 100, 10)\ny3 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\ncolors3 = ['blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10.0, 7.0))\n\n# Plot the first graph\naxs[0, 0].bar(x, y, color=colors)\naxs[0, 0].set_title('Accuracy (%)')\naxs[0, 0].set_xlabel('Year')\naxs[0, 0].set_ylabel('Accuracy (%)')\n\n# Plot the second graph\naxs[0, 1].bar(x, y2, color=colors2)\naxs[0, 1].set_title('Robust Accuracy (%)')\naxs[0, 1].set_xlabel('Year')\naxs[0, 1].set_ylabel('Robust Accuracy (%)')\n\n# Plot the third graph\naxs[0, 2].bar(x, y3, color=colors3)\naxs[0, 2].set_title('Robust NFR (%)')\naxs[0, 2].set_xlabel('Year')\naxs[0, 2].set_ylabel('Robust NFR (%)')\n\n# Plot the fourth graph\naxs[1, 0].bar(x, y, color=colors)\naxs[1, 0].set_title('Accuracy Diff. (%)')\naxs[1, 0].set_xlabel('Year')\naxs[1, 0].set_ylabel('Accuracy Diff. (%)')\n\n# Plot the fifth graph\naxs[1, 1].bar(x, y2, color=colors2)\naxs[1, 1].set_title('Robust Accuracy Diff. (%)')\naxs[1, 1].set_xlabel('Year')\naxs[1, 1].set_ylabel('Robust Accuracy Diff. (%)')\n\n# Plot the sixth graph\naxs[1, 2].bar(x, y3, color=colors3)\naxs[1, 2].set_title('Robust NFR (%)')\naxs[1, 2].set_xlabel('Year')\naxs[1, 2].set_ylabel('Robust NFR (%)')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvariances = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(7.0, 9.0))\nax.bar(brands, variances, color='skyblue')\nax.set_xlabel('Brands')\nax.set_ylabel('General Variance')\nax.set_title('General Variance of Brands')\n\n# Data for the line chart\ntrials = range(1, 26)\naverages = [0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6]\nregrets = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4]\n\n# Create a line chart\nfig, ax = plt.subplots(figsize=(7.0, 9.0))\nax.plot(trials, averages, color='blue')\nax.plot(trials, regrets, color='red')\nax.set_xlabel('Trials')\nax.set_ylabel('Average Regret')\nax.set_title('Average Regret over Trials')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Set the title for the first subplot\naxs[0].set_title('Debater')\naxs[0].plot([0, 200, 400], [0, 100, 200], 'ro-')  # Plot some data\naxs[0].set_xlabel('Elo Rating')\naxs[0].set_ylabel('Correct Rating - Incorrect Rating')\n\n# Set the title for the second subplot\naxs[1].set_title('Aggregates')\naxs[1].scatter(np.random.rand(10), np.random.rand(10), c='g', marker='o')  # Scatter plot\naxs[1].set_xlabel('Aggregate Elo Rating')\naxs[1].set_ylabel('Correct Rating - Incorrect Rating')\n\n# Set the title for the third subplot\naxs[2].set_title('Judge')\naxs[2].plot([-100, 0, 100, 200], [50, 70, 90, 110], 'bo-')  # Plot some data\naxs[2].set_xlabel('Aggregate Elo Rating')\naxs[2].set_ylabel('Judge Accuracy (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [4.6, 10.6, 11.3, 13.2, 29.8]\nlabels = ['Red', 'Blue', 'Green', 'Yellow', 'Purple']\ncolors = ['#FF0000', '#0000FF', '#00FF00', '#FFFF00', '#800080']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Create a circle for the donut chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='green')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='red')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='purple')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='orange')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='brown')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='pink')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='yellow')\nax.add_artist(rect)\n\n# Set the title of the plot\nax.set_title('Matplotlib bakery: A donut')\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Entertainment', 'Utilities', 'Transport', 'Food', 'Others']\nsizes = [16.7, 20.0, 37.5, 29.2, 10.0]\ncolors = ['#FFC0CB', '#90EE90', '#ADD8E6', '#FFD700', '#FFA07A']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Plot\nfig1, ax1 = plt.subplots(figsize=(8.0, 8.0))\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Data for the bar chart\ncategories = ['Entertainment', 'Utilities', 'Transport', 'Food', 'Others']\nvalues = [10.0, 16.7, 37.5, 29.2, 10.0]\nbar_colors = ['#FFB6C1', '#90EE90', '#ADD8E6', '#FFD700', '#FFA07A']\n\n# Plot\nfig2, ax2 = plt.subplots(figsize=(8.0, 8.0))\nax2.bar(categories, values, color=bar_colors)\nax2.set_title('Expenses - Company vs Project')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlora_data = [31.4, 15.7, 19.9, 33.0]\nlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nlora_colors = ['#f2a36d', '#f2c980', '#66b2ff', '#a8e063']\n\n# Data for QLoRA\nqlora_data = [54.8, 10.5, 6.3, 28.4]\nqlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nqlora_colors = ['#f2a36d', '#f2c980', '#66b2ff', '#a8e063']\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting LoRA\naxs[0].pie(lora_data, labels=lora_labels, colors=lora_colors, autopct='%1.1f%%', startangle=90)\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(qlora_data, labels=qlora_labels, colors=qlora_colors, autopct='%1.1f%%', startangle=90)\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ndata1 = [25.1, 26.4, 12.6, 15.9]\ncolors1 = ['yellow', 'green', 'gray', 'orange']\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Data for the second chart\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['yellow', 'green', 'gray', 'orange']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 8.0))\n\n# First chart\naxs[0].pie(data1, colors=colors1, labels=labels1, autopct='%1.1f%%')\naxs[0].set_title('Full Finetuning')\n\n# Second chart\naxs[1].pie(data2, colors=colors2, labels=labels2, autopct='%1.1f%%')\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a pie chart with the data\nax.pie([25, 35, 10, 10, 10, 20], labels=[\"Fruits\", \"Proteins\", \"Dairy\", \"Grains\", \"Vegetables\", \"Fats\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Nutritional Distribution')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Market Share by Sector - External vs. Internal')\n\n# Define the data for the pie chart\nlabels = ['E-commerce', 'Education', 'Entertainment', 'Technology']\nsizes = [31.2, 28.6, 35.7, 37.5]\ncolors = ['#FFD700', '#FFA500', '#ADD8E6', '#90EE90']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [20, 10, 30, 40]\nlabels = ['Dogs', 'Logs', 'Frogs', 'Hogs']\ncolors = ['#FF6347', '#4682B4', '#90EE90', '#ADD8E6']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [11.0, 29.0, 40.0, 20.0]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Create a pie chart\nax.pie([18, 12, 28], labels=[\"France\", \"Germany\", \"Italy\"], colors=[\"orange\", \"blue\", \"red\"], autopct='%1.1f%%')\n\n# Set the title of the chart\nax.set_title('Countries in Europe')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [26.2, 13.3, 21.4, 19.0, 14.3, 5.7]\ncolors = ['red', 'pink', 'orange', 'yellow', 'lightblue', 'lightgreen']\nlabels = ['Red', 'Pink', 'Orange', 'Yellow', 'Light Blue', 'Light Green']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%')\n\n# Set the title of the chart\nax.set_title('Slice of a pie chart')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [12.4, 35.4, 17.2, 24.7, 10.3]\ncolors = ['blue', 'green', 'lightblue', 'orange', 'pink']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 10, 35]\ncolors = ['lightblue', 'skyblue', 'lightskyblue', 'deepskyblue', 'cornflowerblue']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add labels and title\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax.set_title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the pie chart\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP']\nsizes = [25.4, 7.4, 20.3, 12.2]\ncolors = ['#87CEEB', '#FFD700', '#90EE90', '#800080']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a title\nax.set_title('NLP Conference Influence')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Technologies\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Coal', 'Hydro', 'Wind', 'Solar']\nsizes = [25.0, 15.0, 12.5, 30.0]\ncolors = ['red', 'blue', 'green', 'yellow']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Data for the bar chart\nlabels = ['Coal', 'Hydro', 'Wind', 'Solar']\nsizes = [25.0, 15.0, 12.5, 30.0]\ncolors = ['red', 'blue', 'green', 'yellow']\n\nfig2, ax2 = plt.subplots()\nax2.bar(labels, sizes, color=colors)\nax2.set_title('Energy Consumption - National vs. Project')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Create a scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='red')\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the y-ticks\nax.set_yticks([-4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n\n# Set the grid lines\nax.grid(True)\n\n# Add a rectangle for the English language sentiment analysis\nrect1 = plt.Rectangle((1, -4), 1, 1, color='red')\nax.add_patch(rect1)\n\n# Add a rectangle for the French language sentiment analysis\nrect2 = plt.Rectangle((2, -3), 1, 1, color='red')\nax.add_patch(rect2)\n\n# Add a rectangle for the German language sentiment analysis\nrect3 = plt.Rectangle((3, -2), 1, 1, color='red')\nax.add_patch(rect3)\n\n# Add a rectangle for the Out-group bias (Collectivism)\nrect4 = plt.Rectangle((4, -1), 1, 1, color='red')\nax.add_patch(rect4)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Draw the scatter plot\nscatter = ax.scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='viridis')\n\n# Draw the line plot\nline = ax.plot([0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], 'b-')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Add a legend\nax.legend(['True Field', 'SINDy Learned Field', 'Train Sample', 'Test Sample', 'SINDy Train', 'SINDy Test'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207VF (Small \u03c1)')\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field\nU = -X\nV = Y\n\n# Plot the vector field\nQ = ax.quiver(X, Y, U, V, color='b', scale=20)\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Create a grid of points\nx = np.linspace(-2.0, 2.0, 100)\ny = np.linspace(-2.0, 2.0, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the magnetic field function\ndef B(x, y):\n    return np.sin(np.sqrt(x**2 + y**2)) / (x**2 + y**2)\n\n# Compute the magnetic field values\nZ = B(X, Y)\n\n# Plot the magnetic field using quiver plot\nQ = ax.quiver(X, Y, Z, Z, color='b', scale=20)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(Q)\n\n# Set the limits of the x and y axes\nax.set_xlim(-2.0, 2.0)\nax.set_ylim(-2.0, 2.0)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('GQA')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_patch(rectangle)\n\n# Create a polygon patch\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.9], [0.7, 0.1]], color='red')\nax.add_patch(polygon)\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a bar chart\nbar_width = 0.35\nindex = np.arange(len(x))\nbars = ax.bar(index, x, bar_width, label='X Values', color='orange')\nax.bar(index + bar_width, y, bar_width, label='Y Values', color='purple')\n\n# Add labels and title\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_title('Scatter Plot with Bar Chart')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('XNLI (speed-up ratio: 4)')\n\n# Define the colors for each region\ncolors = ['pink', 'green', 'blue', 'red']\n\n# Define the labels for each region\nlabels = ['fr', 'es', 'en', 'el', 'de', 'bg', 'sw', 'ar', 'ur', 'th', 'hi', 'ru', 'tr', 'vi', 'zh']\n\n# Define the radii for each region\nradii = [20, 40, 60, 80]\n\n# Draw the regions\nfor i, label in enumerate(labels):\n    ax.add_artist(plt.Circle((0, 0), radii[i % len(radii)], color=colors[i % len(colors)]))\n    ax.text(0, 0, label, ha='center', va='center')\n\n# Draw the speed-up ratio\nax.add_artist(plt.Circle((0, 0), 10, color='black'))\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.2, 0.3], [0.3, 0.1], [0.5, 0.1], [0.7, 0.3], [0.7, 0.5], [0.5, 0.7], [0.3, 0.7]], color='lightgreen')\nax.add_patch(hexagon)\n\n# Draw a rectangle\nrectangle = plt.Rectangle([0.2, 0.6], 0.6, 0.2, color='lightblue')\nax.add_patch(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.5, 0.8], [0.3, 0.9], [0.7, 0.9]], color='lightyellow')\nax.add_patch(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.2], [0.4, 0.4], [0.6, 0.4], [0.5, 0.6], [0.3, 0.4], [0.4, 0.2], [0.6, 0.2]], color='lightpink')\nax.add_patch(star)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('Reflection')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='gray')\nax.add_artist(circle)\n\n# Create a rectangle for the outer ring\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Create a triangle for the inner ring\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='green')\nax.add_artist(triangle)\n\n# Create a star for the center point\nstar = plt.Polygon([[0.5, 0.5], [0.4, 0.4], [0.6, 0.4], [0.5, 0.6], [0.4, 0.6], [0.5, 0.4]], color='red')\nax.add_artist(star)\n\n# Add text annotations for each element\nax.text(0.5, 0.9, '\u03bcR', ha='center', va='center', color='white')\nax.text(0.1, 0.9, '\u03bcAUC', ha='center', va='center', color='white')\nax.text(0.9, 0.9, '\u03bcTP', ha='center', va='center', color='white')\nax.text(0.1, 0.1, 'N\u00b0FF', ha='center', va='center', color='white')\nax.text(0.9, 0.1, 'N\u00b0TP', ha='center', va='center', color='white')\nax.text(0.5, 0.5, '\u03bcTrain', ha='center', va='center', color='white')\n\n# Add a legend with colored rectangles\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='GNN k=1', markerfacecolor='blue', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='GNN k=2', markerfacecolor='orange', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='GNN k=3', markerfacecolor='green', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('My Bookshelf')\n\n# Define the categories and their colors\ncategories = ['novel', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event']\ncolors = ['blue', 'green', 'red', 'purple', 'orange', 'cyan', 'magenta']\n\n# Draw the circles\nfor i, category in enumerate(categories):\n    # Calculate the radius of the circle\n    radius = 0.1 * (i + 1)\n    \n    # Draw the circle\n    circle = plt.Circle((0.5, 0.5), radius, color=colors[i], fill=False)\n    ax.add_artist(circle)\n    \n    # Add the category name to the center of the circle\n    ax.text(0.5, 0.5, category, ha='center', va='center', fontsize=12)\n\n# Draw the lines\nfor i in range(len(categories)):\n    for j in range(i+1, len(categories)):\n        # Calculate the angle between the two categories\n        angle = np.pi / (len(categories) - 1) * (j - i)\n        \n        # Draw the line\n        line = plt.Line2D([0.5, 0.5 + np.cos(angle)], [0.5, 0.5 + np.sin(angle)], color='black')\n        ax.add_artist(line)\n\n# Draw the book covers\nfor i, category in enumerate(categories):\n    # Calculate the radius of the book cover\n    radius = 0.4\n    \n    # Draw the book cover\n    circle = plt.Circle((0.5 + np.cos(np.pi / (len(categories) - 1) * i), 0.5 + np.sin(np.pi / (len(categories) - 1) * i)), radius, color='blue', fill=True)\n    ax.add_artist(circle)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Roleplay')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a list of subjects\nsubjects = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'Humanities', 'STEM']\n\n# Create a list of colors for each subject\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of scores for each subject\nscores = [85, 90, 78, 92, 88, 80, 95]\n\n# Create a list of labels for each subject\nlabels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of colors for each label\nlabel_colors = ['blue', 'orange', 'green', 'red']\n\n# Create a list of sizes for each label\nlabel_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nlabel_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse', 'star']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create a list of positions for each shape\nshape_positions = [(0.1, 0.1), (0.9, 0.9), (0.1, 0.9), (0.9, 0.1), (0.5, 0.5), (0.2, 0.8), (0.8, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.2, 0.8), (0.8, 0.2), (0.2, 0.2), (0.8, 0.8)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'triangle', 'circle', 'hexagon', 'pentagon', 'ellipse',"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Draw a circle for the logo\ncircle = plt.Circle((0.5, 0.5), 0.2, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='red')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='green')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='blue')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='yellow')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='purple')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='grey')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='magenta')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='lime')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='silver')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='gold')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='white')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='black')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='grey')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='magenta')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='lime')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='silver')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='gold')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='white')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='black')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='grey')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='magenta')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='lime')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='silver')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='gold')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='white')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='black')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='grey')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='magenta')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='lime')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='silver')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='gold')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='white')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='black')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='grey')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='magenta')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='lime')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='silver')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='gold')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='white')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='black')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='grey')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='magenta')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='lime')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='silver')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='gold')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='white')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='black')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='grey')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='magenta')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='lime')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='silver')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='gold')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='white')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='black')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='grey')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='magenta')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='lime')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='silver')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='gold')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='white')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='black')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='grey')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='magenta')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='lime')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='silver')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='gold')\nax.add_artist(rect)\n\n# Draw a rectangle for the product categories\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='white')\nax.add_artist(rect)\n\n# Draw"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Global Smartphone Sales')\n\n# Define the data for the pie chart\nsales = [85.8, 78.7, 71.9, 64.1, 59.7, 50.8, 40.0, 36.1, 20.0, 86.4, 80.9, 76.1, 74.9, 71.0, 69.9, 66.4, 64.1, 60.5, 56.5, 52.0, 46.5, 40.0, 36.1, 32.0, 28.0, 24.0, 20.0, 16.0, 12.0, 8.0, 4.0, 0.0]\n\n# Define the labels for the pie chart\nlabels = ['Apple', 'Samsung', 'Huawei', 'Google', 'Xiaomi', 'OPPO', 'Vivo', 'Realme', 'OnePlus', 'Nokia', 'Motorola', 'LG', 'Sony', 'Philips', 'TCL', 'Hisense', 'Panasonic', 'Sharp', 'LG', 'TCL', 'Hisense', 'Panasonic', 'Sharp', 'LG', 'TCL', 'Hisense', 'Panasonic', 'Sharp', 'LG', 'TCL', 'Hisense', 'Panasonic', 'Sharp']\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(sales, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a circle for the radar chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the tick labels\nax.set_xticks([0.25, 0.75])\nax.set_yticks([0.25, 0.75])\n\n# Set the tick labels\nax.set_xticklabels(['Injection', 'Extrusion'])\nax.set_yticklabels(['Blow Molding', 'Compression'])\n\n# Set the title\nax.set_title('Radar Chart')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Create a circle for the park map\ncircle = plt.Circle((0.5, 0.5), 0.4, color='orange')\nax.add_artist(circle)\n\n# Add labels for each section\nlabels = ['Food Quality', 'Shows', 'Staff', 'Family Rides', 'Cleanliness', 'Wait Times', 'Ticket Price', 'Souvenirs', 'Parking', 'Thrill Rides']\nfor i, label in enumerate(labels):\n    ax.text(0.5, 0.5 - 0.1 * i, label, ha='center', va='center')\n\n# Add a legend with the park names\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Disney', markerfacecolor='orange', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Universal Studios', markerfacecolor='purple', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Creative Agency')\n\n# Create a color bar for the legend\ncbar = fig.colorbar(plt.cm.ScalarMappable(cmap='viridis'), ax=ax)\n\n# Add labels to the color bar\ncbar.set_label('Popularity')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Add text to the center of the plot\nax.text(0.5, 0.5, '1', horizontalalignment='center', verticalalignment='center')\n\n# Add a rectangle for the first product\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\nax.add_patch(rect)\n\n# Add a rectangle for the second product\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the third product\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the fourth product\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='red')\nax.add_patch(rect)\n\n# Add a rectangle for the fifth product\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the sixth product\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='orange')\nax.add_patch(rect)\n\n# Add a rectangle for the seventh product\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the eighth product\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the ninth product\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='brown')\nax.add_patch(rect)\n\n# Add a rectangle for the tenth product\nrect = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the eleventh product\nrect = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the twelfth product\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirteenth product\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the fourteenth product\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the fifteenth product\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the sixteenth product\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the seventeenth product\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the eighteenth product\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the nineteenth product\nrect = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the twentieth product\nrect = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the twenty-first product\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the twenty-second product\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the twenty-third product\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the twenty-fourth product\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the twenty-fifth product\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the twenty-sixth product\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the twenty-seventh product\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the twenty-eighth product\nrect = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the twenty-ninth product\nrect = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth product\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-first product\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-second product\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-third product\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-fourth product\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-fifth product\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-sixth product\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-seventh product\nrect = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-eighth product\nrect = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-ninth product\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-tenth product\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-eleventh product\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twelfth product\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirteenth product\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-fourteenth product\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-fifteenth product\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-sixteenth product\nrect = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-seventeenth product\nrect = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-eighteenth product\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-nineteenth product\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twentieth product\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twenty-first product\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twenty-second product\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twenty-third product\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twenty-fourth product\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twenty-fifth product\nrect = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twenty-sixth product\nrect = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twenty-seventh product\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twenty-eighth product\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-twenty-ninth product\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth product\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-first product\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-second product\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-third product\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-fourth product\nrect = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-fifth product\nrect = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-sixth product\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-seventh product\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-eighth product\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-nineteenth product\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twentieth product\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-first product\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-second product\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-third product\nrect = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-fourth product\nrect = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-fifth product\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-sixth product\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-seventh product\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-eighth product\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-nineteenth product\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twentieth product\nrect = plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-first product\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='navy')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-second product\nrect = plt.Rectangle((0.2, 0.2), 0.2, 0.2, color='maroon')\nax.add_patch(rect)\n\n# Add a rectangle for the thirtieth-thirtieth-twenty-third product\nrect = plt.Rectangle((0.3, 0"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('POPE')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightblue')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lightgreen')\nax.add_artist(rectangle)\n\n# Create a polygon patch\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.9], [0.7, 0.1]], color='lightcoral')\nax.add_artist(polygon)\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='lightgrey')\n\n# Create a bar chart\nbar_width = 0.35\nindex = np.arange(len(x))\nbars = ax.bar(index, x, bar_width, label='X values', color='lightpink')\nax.bar(index + bar_width, y, bar_width, label='Y values', color='lightyellow')\n\n# Create a line plot\nax.plot(x, y, color='lightcyan')\n\n# Create a pie chart\nlabels = ['TinyLaMA', 'StableLM', 'Phi-2']\nsizes = [0.3, 0.5, 0.2]\nax.pie(sizes, labels=labels, colors=['red', 'blue', 'green'], autopct='%1.1f%%')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the second subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the third subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the fourth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the fifth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the sixth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the seventh subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the eighth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the ninth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the tenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the eleventh subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the twelfth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the fourteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the fifteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the sixteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the seventeenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the eighteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the nineteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the twentieth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the twenty-first subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the twenty-second subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the twenty-third subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the twenty-fourth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the twenty-fifth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the twenty-sixth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the twenty-seventh subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the twenty-eighth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the twenty-ninth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirtieth-first subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the thirtieth-second subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth-third subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirtieth-fourth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the thirtieth-fifth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth-sixth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirtieth-seventh subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the thirtieth-eighth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth-ninth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirtieth-tenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the thirtieth-eleventh subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth-twelfth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirtieth-thirteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the thirtieth-fourteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth-fifteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirtieth-sixteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the thirtieth-seventeenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth-eighteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirtieth-nineteenth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the thirtieth-twentieth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth-twenty-first subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirtieth-twenty-second subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the thirtieth-twenty-third subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth-twenty-fourth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'go-')\n\n# Create a figure and axis for the thirtieth-twenty-fifth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Create a figure and axis for the thirtieth-twenty-sixth subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('Longevity')\nax.plot([1, 2, 3], [4, 5, 6], 'bo-')\n\n# Create a figure and axis for the thirtieth-twenty-seventh subplot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_title('Creativity')\nax.set_xlabel('Versatility')\nax.set_ylabel('"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle with a radius of 100\ncircle = plt.Circle((0, 0), 100, color='lightgrey')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 200 and a height of 150\nrectangle = plt.Rectangle((-100, -75), 200, 150, color='red')\nax.add_artist(rectangle)\n\n# Draw a polygon with 6 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [-50, 50], [-50, -50], [50, -50]], color='blue')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [-50, 50], [-50, -50], [50, -50]], color='green')\nax.add_artist(star)\n\n# Draw a circle with a radius of 50\ncircle = plt.Circle((0, 0), 50, color='yellow')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 100 and a height of 75\nrectangle = plt.Rectangle((-50, -37.5), 100, 75, color='orange')\nax.add_artist(rectangle)\n\n# Draw a polygon with 4 sides\npolygon = plt.Polygon([[0, 0], [25, 25], [-25, 25], [-25, -25], [25, -25]], color='purple')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [25, 25], [-25, 25], [-25, -25], [25, -25]], color='pink')\nax.add_artist(star)\n\n# Draw a circle with a radius of 25\ncircle = plt.Circle((0, 0), 25, color='brown')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 50 and a height of 37.5\nrectangle = plt.Rectangle((-25, -18.75), 50, 37.5, color='cyan')\nax.add_artist(rectangle)\n\n# Draw a polygon with 3 sides\npolygon = plt.Polygon([[0, 0], [12.5, 12.5], [-12.5, 12.5], [-12.5, -12.5], [12.5, -12.5]], color='magenta')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [12.5, 12.5], [-12.5, 12.5], [-12.5, -12.5], [12.5, -12.5]], color='lime')\nax.add_artist(star)\n\n# Draw a circle with a radius of 12.5\ncircle = plt.Circle((0, 0), 12.5, color='silver')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 18.75\nrectangle = plt.Rectangle((-12.5, -9.375), 25, 18.75, color='gold')\nax.add_artist(rectangle)\n\n# Draw a polygon with 2 sides\npolygon = plt.Polygon([[0, 0], [6.25, 6.25], [-6.25, 6.25], [-6.25, -6.25], [6.25, -6.25]], color='navy')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [6.25, 6.25], [-6.25, 6.25], [-6.25, -6.25], [6.25, -6.25]], color='olive')\nax.add_artist(star)\n\n# Draw a circle with a radius of 6.25\ncircle = plt.Circle((0, 0), 6.25, color='maroon')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 12.5 and a height of 9.375\nrectangle = plt.Rectangle((-6.25, -4.6875), 12.5, 9.375, color='teal')\nax.add_artist(rectangle)\n\n# Draw a polygon with 1 side\npolygon = plt.Polygon([[0, 0], [3.125, 3.125], [-3.125, 3.125], [-3.125, -3.125], [3.125, -3.125]], color='coral')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [3.125, 3.125], [-3.125, 3.125], [-3.125, -3.125], [3.125, -3.125]], color='chartreuse')\nax.add_artist(star)\n\n# Draw a circle with a radius of 3.125\ncircle = plt.Circle((0, 0), 3.125, color='crimson')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 6.25 and a height of 4.6875\nrectangle = plt.Rectangle((-3.125, -2.34375), 6.25, 4.6875, color='cyan')\nax.add_artist(rectangle)\n\n# Draw a polygon with 0 sides\npolygon = plt.Polygon([[0, 0], [1.5625, 1.5625], [-1.5625, 1.5625], [-1.5625, -1.5625], [1.5625, -1.5625]], color='darkblue')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [1.5625, 1.5625], [-1.5625, 1.5625], [-1.5625, -1.5625], [1.5625, -1.5625]], color='darkgreen')\nax.add_artist(star)\n\n# Draw a circle with a radius of 1.5625\ncircle = plt.Circle((0, 0), 1.5625, color='darkkhaki')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 3.125 and a height of 2.34375\nrectangle = plt.Rectangle((-1.5625, -1.171875), 3.125, 2.34375, color='darkmagenta')\nax.add_artist(rectangle)\n\n# Draw a polygon with -1 sides\npolygon = plt.Polygon([[0, 0], [0.78125, 0.78125], [-0.78125, 0.78125], [-0.78125, -0.78125], [0.78125, -0.78125]], color='darkorange')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [0.78125, 0.78125], [-0.78125, 0.78125], [-0.78125, -0.78125], [0.78125, -0.78125]], color='darkred')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.78125\ncircle = plt.Circle((0, 0), 0.78125, color='darksalmon')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 1.5625 and a height of 1.171875\nrectangle = plt.Rectangle((-0.78125, -0.5859375), 1.5625, 1.171875, color='darkseagreen')\nax.add_artist(rectangle)\n\n# Draw a polygon with -2 sides\npolygon = plt.Polygon([[0, 0], [0.390625, 0.390625], [-0.390625, 0.390625], [-0.390625, -0.390625], [0.390625, -0.390625]], color='darkslateblue')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [0.390625, 0.390625], [-0.390625, 0.390625], [-0.390625, -0.390625], [0.390625, -0.390625]], color='darkslategray')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.390625\ncircle = plt.Circle((0, 0), 0.390625, color='darkturquoise')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.78125 and a height of 0.5859375\nrectangle = plt.Rectangle((-0.390625, -0.29296875), 0.78125, 0.5859375, color='darkviolet')\nax.add_artist(rectangle)\n\n# Draw a polygon with -3 sides\npolygon = plt.Polygon([[0, 0], [0.1953125, 0.1953125], [-0.1953125, 0.1953125], [-0.1953125, -0.1953125], [0.1953125, -0.1953125]], color='deeppink')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [0.1953125, 0.1953125], [-0.1953125, 0.1953125], [-0.1953125, -0.1953125], [0.1953125, -0.1953125]], color='deepskyblue')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.1953125\ncircle = plt.Circle((0, 0), 0.1953125, color='dimgray')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.390625 and a height of 0.29296875\nrectangle = plt.Rectangle((-0.1953125, -0.146484375), 0.390625, 0.29296875, color='dimgrey')\nax.add_artist(rectangle)\n\n# Draw a polygon with -4 sides\npolygon = plt.Polygon([[0, 0], [0.09765625, 0.09765625], [-0.09765625, 0.09765625], [-0.09765625, -0.09765625], [0.09765625, -0.09765625]], color='dodgerblue')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [0.09765625, 0.09765625], [-0.09765625, 0.09765625], [-0.09765625, -0.09765625], [0.09765625, -0.09765625]], color='firebrick')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.09765625\ncircle = plt.Circle((0, 0), 0.09765625, color='floralwhite')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.1953125 and a height of 0.146484375\nrectangle = plt.Rectangle((-0.09765625, -0.0732421875), 0.1953125, 0.146484375, color='forestgreen')\nax.add_artist(rectangle)\n\n# Draw a polygon with -5 sides\npolygon = plt.Polygon([[0, 0], [0.048828125, 0.048828125], [-0.048828125, 0.048828125], [-0.048828125, -0.048828125], [0.048828125, -0.048828125]], color='fuchsia')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [0.048828125, 0.048828125], [-0.048828125, 0.048828125], [-0.048828125, -0.048828125], [0.048828125, -0.048828125]], color='gainsboro')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.048828125\ncircle = plt.Circle((0, 0), 0.048828125, color='ghostwhite')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.09765625 and a height of 0.0732421875\nrectangle = plt.Rectangle((-0.048828125, -0.03662109375), 0.09765625, 0.0732421875, color='gold')\nax.add_artist(rectangle)\n\n# Draw a polygon with -6 sides\npolygon = plt.Polygon([[0, 0], [0.0244140625, 0.0244140625], [-0.0244140625, 0.0244140625], [-0.0244140625, -0.0244140625], [0.0244140625, -0.0244140625]], color='gray')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [0.0244140625, 0.0244140625], [-0.0244140625, 0.0244140625], [-0.0244140625, -0.0244140625], [0.0244140625, -0.0244140625]], color='green')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.0244140625\ncircle = plt.Circle((0, 0), 0.0244140625, color='greenyellow')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.048828125 and a height of 0.03662109375\nrectangle = plt.Rectangle((-0.0244140625, -0.018310546875), 0.048828125, 0.03662109375, color='honeydew')\nax.add_artist(rectangle)\n\n# Draw a polygon with -7 sides\npolygon = plt.Polygon([[0, 0], [0.01"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 6.0))\n\n# Define the data for each subplot\ndata1 = [1, 2, 3, 4, 5]\ndata2 = [1, 2, 3, 4, 5]\ndata3 = [1, 2, 3, 4, 5]\n\n# Plot the data in each subplot\naxs[0].plot(data1)\naxs[1].plot(data2)\naxs[2].plot(data3)\n\n# Set the title of each subplot\naxs[0].set_title('Fidelity(D_train)')\naxs[1].set_title('Fidelity(D_test)')\naxs[2].set_title('Fidelity(D_train)')\n\n# Set the x-axis label of each subplot\naxs[0].set_xlabel('MLA')\naxs[1].set_xlabel('MLA')\naxs[2].set_xlabel('MLA')\n\n# Set the y-axis label of each subplot\naxs[0].set_ylabel('Query Error')\naxs[1].set_ylabel('Query Error')\naxs[2].set_ylabel('Query Error')\n\n# Set the color of the plot lines\naxs[0].plot(data1, color='green')\naxs[1].plot(data2, color='purple')\naxs[2].plot(data3, color='blue')\n\n# Set the color of the plot markers\naxs[0].plot(data1, 'o', color='green')\naxs[1].plot(data2, 'o', color='purple')\naxs[2].plot(data3, 'o', color='blue')\n\n# Set the color of the plot background\naxs[0].set_facecolor('lightgrey')\naxs[1].set_facecolor('lightgrey')\naxs[2].set_facecolor('lightgrey')\n\n# Set the color of the plot grid\naxs[0].grid(True)\naxs[1].grid(True)\naxs[2].grid(True)\n\n# Set the color of the plot labels\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot title\naxs[0].set_title('Fidelity(D_train)', color='black')\naxs[1].set_title('Fidelity(D_test)', color='black')\naxs[2].set_title('Fidelity(D_train)', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set_ylabel('Query Error', color='black')\n\n# Set the color of the plot x-axis label\naxs[0].set_xlabel('MLA', color='black')\naxs[1].set_xlabel('MLA', color='black')\naxs[2].set_xlabel('MLA', color='black')\n\n# Set the color of the plot y-axis label\naxs[0].set_ylabel('Query Error', color='black')\naxs[1].set_ylabel('Query Error', color='black')\naxs[2].set"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Heterocycle formation')\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a grid for the plot\nax.grid(True)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='orange')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='yellow')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='red')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='purple')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='cyan')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='magenta')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='brown')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='grey')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='black')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='gold')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='bronze')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='silver')\nax.add_artist(polygon)\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='silver')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='silver')\nax.add_artist(rectangle)\n\n"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle at the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Define the data for the radar chart\ndata = [\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07]\n]\n\n# Define the labels for the radar chart\nlabels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F']\n\n# Define the colors for the radar chart\ncolors = ['red', 'green', 'blue', 'orange', 'purple', 'cyan']\n\n# Plot the radar chart\nfor i in range(len(data)):\n    ax.plot([0.5, data[i][0]], [0.5, data[i][1]], color=colors[i])\n    ax.plot([0.5, data[i][2]], [0.5, data[i][3]], color=colors[i])\n\n# Add the labels to the radar chart\nfor i, label in enumerate(labels):\n    ax.text(data[i][0], data[i][1], label, color=colors[i])\n\n# Add the score labels to the radar chart\nfor i, score in enumerate(data):\n    ax.text(score[0], score[1], f'{score[2]:.2f}', color=colors[i])\n\n# Add the legend to the plot\nlegend_labels = ['predicted_score', 'helpful_score', 'result_score', 'rating_score']\nlegend_colors = ['green', 'orange', 'blue', 'red']\nfor i, label in enumerate(legend_labels):\n    ax.plot([], [], color=legend_colors[i], label=label)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('3D-bar')\n\n# Create a circle for the radar chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a rectangle for the histogram\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red')\nax.add_artist(rectangle)\n\n# Create a pie chart for the pie chart\npie_chart = plt.Pie((1, 2, 3), colors=['blue', 'green', 'orange'])\nax.add_artist(pie_chart)\n\n# Create a scatter plot for the scatter plot\nscatter_plot = plt.Scatter([1, 2, 3], [1, 2, 3], color='yellow')\nax.add_artist(scatter_plot)\n\n# Create a bar chart for the bar chart\nbar_chart = plt.Bar([1, 2, 3], [1, 2, 3], color='purple')\nax.add_artist(bar_chart)\n\n# Create a heatmap for the heatmap\nheatmap = plt.Heatmap([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='YlOrRd')\nax.add_artist(heatmap)\n\n# Create a treemap for the treemap\ntreemap = plt.Treemap([1, 2, 3], color='orange')\nax.add_artist(treemap)\n\n# Create a line chart for the line chart\nline_chart = plt.Line([1, 2, 3], [1, 2, 3], color='blue')\nax.add_artist(line_chart)\n\n# Create a bubble chart for the bubble chart\nbubble_chart = plt.Bubble([1, 2, 3], [1, 2, 3], color='green')\nax.add_artist(bubble_chart)\n\n# Create a radar chart for the radar chart\nradar_chart = plt.Radar([1, 2, 3], color='red')\nax.add_artist(radar_chart)\n\n# Create a polar chart for the polar chart\npolar_chart = plt.Polar([1, 2, 3], color='blue')\nax.add_artist(polar_chart)\n\n# Create a sunburst chart for the sunburst chart\nsunburst_chart = plt.Sunburst([1, 2, 3], color='green')\nax.add_artist(sunburst_chart)\n\n# Create a rose chart for the rose chart\nrose_chart = plt.Rose([1, 2, 3], color='red')\nax.add_artist(rose_chart)\n\n# Create a donut chart for the donut chart\ndonut_chart = plt.Donut([1, 2, 3], color='blue')\nax.add_artist(donut_chart)\n\n# Create a scatter plot for the scatter plot\nscatter_plot = plt.Scatter([1, 2, 3], [1, 2, 3], color='yellow')\nax.add_artist(scatter_plot)\n\n# Create a bar chart for the bar chart\nbar_chart = plt.Bar([1, 2, 3], [1, 2, 3], color='purple')\nax.add_artist(bar_chart)\n\n# Create a heatmap for the heatmap\nheatmap = plt.Heatmap([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='YlOrRd')\nax.add_artist(heatmap)\n\n# Create a treemap for the treemap\ntreemap = plt.Treemap([1, 2, 3], color='orange')\nax.add_artist(treemap)\n\n# Create a line chart for the line chart\nline_chart = plt.Line([1, 2, 3], [1, 2, 3], color='blue')\nax.add_artist(line_chart)\n\n# Create a bubble chart for the bubble chart\nbubble_chart = plt.Bubble([1, 2, 3], [1, 2, 3], color='green')\nax.add_artist(bubble_chart)\n\n# Create a radar chart for the radar chart\nradar_chart = plt.Radar([1, 2, 3], color='red')\nax.add_artist(radar_chart)\n\n# Create a polar chart for the polar chart\npolar_chart = plt.Polar([1, 2, 3], color='blue')\nax.add_artist(polar_chart)\n\n# Create a sunburst chart for the sunburst chart\nsunburst_chart = plt.Sunburst([1, 2, 3], color='green')\nax.add_artist(sunburst_chart)\n\n# Create a rose chart for the rose chart\nrose_chart = plt.Rose([1, 2, 3], color='red')\nax.add_artist(rose_chart)\n\n# Create a donut chart for the donut chart\ndonut_chart = plt.Donut([1, 2, 3], color='blue')\nax.add_artist(donut_chart)\n\n# Create a scatter plot for the scatter plot\nscatter_plot = plt.Scatter([1, 2, 3], [1, 2, 3], color='yellow')\nax.add_artist(scatter_plot)\n\n# Create a bar chart for the bar chart\nbar_chart = plt.Bar([1, 2, 3], [1, 2, 3], color='purple')\nax.add_artist(bar_chart)\n\n# Create a heatmap for the heatmap\nheatmap = plt.Heatmap([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='YlOrRd')\nax.add_artist(heatmap)\n\n# Create a treemap for the treemap\ntreemap = plt.Treemap([1, 2, 3], color='orange')\nax.add_artist(treemap)\n\n# Create a line chart for the line chart\nline_chart = plt.Line([1, 2, 3], [1, 2, 3], color='blue')\nax.add_artist(line_chart)\n\n# Create a bubble chart for the bubble chart\nbubble_chart = plt.Bubble([1, 2, 3], [1, 2, 3], color='green')\nax.add_artist(bubble_chart)\n\n# Create a radar chart for the radar chart\nradar_chart = plt.Radar([1, 2, 3], color='red')\nax.add_artist(radar_chart)\n\n# Create a polar chart for the polar chart\npolar_chart = plt.Polar([1, 2, 3], color='blue')\nax.add_artist(polar_chart)\n\n# Create a sunburst chart for the sunburst chart\nsunburst_chart = plt.Sunburst([1, 2, 3], color='green')\nax.add_artist(sunburst_chart)\n\n# Create a rose chart for the rose chart\nrose_chart = plt.Rose([1, 2, 3], color='red')\nax.add_artist(rose_chart)\n\n# Create a donut chart for the donut chart\ndonut_chart = plt.Donut([1, 2, 3], color='blue')\nax.add_artist(donut_chart)\n\n# Create a scatter plot for the scatter plot\nscatter_plot = plt.Scatter([1, 2, 3], [1, 2, 3], color='yellow')\nax.add_artist(scatter_plot)\n\n# Create a bar chart for the bar chart\nbar_chart = plt.Bar([1, 2, 3], [1, 2, 3], color='purple')\nax.add_artist(bar_chart)\n\n# Create a heatmap for the heatmap\nheatmap = plt.Heatmap([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='YlOrRd')\nax.add_artist(heatmap)\n\n# Create a treemap for the treemap\ntreemap = plt.Treemap([1, 2, 3], color='orange')\nax.add_artist(treemap)\n\n# Create a line chart for the line chart\nline_chart = plt.Line([1, 2, 3], [1, 2, 3], color='blue')\nax.add_artist(line_chart)\n\n# Create a bubble chart for the bubble chart\nbubble_chart = plt.Bubble([1, 2, 3], [1, 2, 3], color='green')\nax.add_artist(bubble_chart)\n\n# Create a radar chart for the radar chart\nradar_chart = plt.Radar([1, 2, 3], color='red')\nax.add_artist(radar_chart)\n\n# Create a polar chart for the polar chart\npolar_chart = plt.Polar([1, 2, 3], color='blue')\nax.add_artist(polar_chart)\n\n# Create a sunburst chart for the sunburst chart\nsunburst_chart = plt.Sunburst([1, 2, 3], color='green')\nax.add_artist(sunburst_chart)\n\n# Create a rose chart for the rose chart\nrose_chart = plt.Rose([1, 2, 3], color='red')\nax.add_artist(rose_chart)\n\n# Create a donut chart for the donut chart\ndonut_chart = plt.Donut([1, 2, 3], color='blue')\nax.add_artist(donut_chart)\n\n# Create a scatter plot for the scatter plot\nscatter_plot = plt.Scatter([1, 2, 3], [1, 2, 3], color='yellow')\nax.add_artist(scatter_plot)\n\n# Create a bar chart for the bar chart\nbar_chart = plt.Bar([1, 2, 3], [1, 2, 3], color='purple')\nax.add_artist(bar_chart)\n\n# Create a heatmap for the heatmap\nheatmap = plt.Heatmap([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='YlOrRd')\nax.add_artist(heatmap)\n\n# Create a treemap for the treemap\ntreemap = plt.Treemap([1, 2, 3], color='orange')\nax.add_artist(treemap)\n\n# Create a line chart for the line chart\nline_chart = plt.Line([1, 2, 3], [1, 2, 3], color='blue')\nax.add_artist(line_chart)\n\n# Create a bubble chart for the bubble chart\nbubble_chart = plt.Bubble([1, 2, 3], [1, 2, 3], color='green')\nax.add_artist(bubble_chart)\n\n# Create a radar chart for the radar chart\nradar_chart = plt.Radar([1, 2, 3], color='red')\nax.add_artist(radar_chart)\n\n# Create a polar chart for the polar chart\npolar_chart = plt.Polar([1, 2, 3], color='blue')\nax.add_artist(polar_chart)\n\n# Create a sunburst chart for the sunburst chart\nsunburst_chart = plt.Sunburst([1, 2, 3], color='green')\nax.add_artist(sunburst_chart)\n\n# Create a rose chart for the rose chart\nrose_chart = plt.Rose([1, 2, 3], color='red')\nax.add_artist(rose_chart)\n\n# Create a donut chart for the donut chart\ndonut_chart = plt.Donut([1, 2, 3], color='blue')\nax.add_artist(donut_chart)\n\n# Create a scatter plot for the scatter plot\nscatter_plot = plt.Scatter([1, 2, 3], [1, 2, 3], color='yellow')\nax.add_artist(scatter_plot)\n\n# Create a bar chart for the bar chart\nbar_chart = plt.Bar([1, 2, 3], [1, 2, 3], color='purple')\nax.add_artist(bar_chart)\n\n# Create a heatmap for the heatmap\nheatmap = plt.Heatmap([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='YlOrRd')\nax.add_artist(heatmap)\n\n# Create a treemap for the treemap\ntreemap = plt.Treemap([1, 2, 3], color='orange')\nax.add_artist(treemap)\n\n# Create a line chart for the line chart\nline_chart = plt.Line([1, 2, 3], [1, 2, 3], color='blue')\nax.add_artist(line_chart)\n\n# Create a bubble chart for the bubble chart\nbubble_chart = plt.Bubble([1, 2, 3], [1, 2, 3], color='green')\nax.add_artist(bubble_chart)\n\n# Create a radar chart for the radar chart\nradar_chart = plt.Radar([1, 2, 3], color='red')\nax.add_artist(radar_chart)\n\n# Create a polar chart for the polar chart\npolar_chart = plt.Polar([1, 2, 3], color='blue')\nax.add_artist(polar_chart)\n\n# Create a sunburst chart for the sunburst chart\nsunburst_chart = plt.Sunburst([1, 2, 3], color='green')\nax.add_artist(sunburst_chart)\n\n# Create a rose chart for the rose chart\nrose_chart = plt.Rose([1, 2, 3], color='red')\nax.add_artist(rose_chart)\n\n# Create a donut chart for the donut chart\ndonut_chart = plt.Donut([1, 2, 3], color='blue')\nax.add_artist(donut_chart)\n\n# Create a scatter plot for the scatter plot\nscatter_plot = plt.Scatter([1, 2, 3], [1, 2, 3], color='yellow')\nax.add_artist(scatter_plot)\n\n# Create a bar chart for the bar chart\nbar_chart = plt.Bar([1, 2, 3], [1, 2, 3], color='purple')\nax.add_artist(bar_chart)\n\n# Create a heatmap for the heatmap\nheatmap = plt.Heatmap([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='YlOrRd')\nax.add_artist(heatmap)\n\n# Create a treemap for the treemap\ntreemap = plt.Treemap([1, 2, 3], color='orange')\nax.add_artist(treemap)\n\n# Create a line chart for the line chart\nline_chart = plt.Line([1, 2, 3], [1, 2, 3], color='blue')\nax.add_artist(line_chart)\n\n# Create a bubble chart for the bubble chart\nbubble_chart = plt.Bubble([1, 2, 3], [1, 2, 3], color='green')\nax.add_artist(bubble_chart)\n\n# Create a radar chart for the radar chart\nradar_chart = plt.Radar([1, 2, 3], color='red')\nax.add_artist(radar_chart)\n\n# Create a polar chart for the polar chart\npolar_chart = plt.Polar([1, 2, 3], color='blue')\nax.add_artist(polar_chart)\n\n# Create a sunburst chart for the sunburst chart\nsunburst_chart = plt.Sunburst([1, 2, 3], color='green')\nax.add_artist(sunburst_chart)\n\n# Create a rose chart for the rose chart\nrose_chart = plt.Rose([1, 2, 3], color='red')\nax.add_artist(rose_chart)\n\n# Create a donut chart for the donut chart\ndonut_chart = plt.Donut([1, 2, 3], color='blue')\nax.add_artist(donut_chart)\n\n# Create a scatter plot for the scatter plot\nscatter_plot = plt.Scatter([1, 2, 3], [1, 2, 3], color='yellow')\nax.add_artist(scatter_plot)\n\n# Create a bar chart for the bar chart\nbar_chart = plt.Bar([1, 2, 3], [1, 2, 3], color='purple')\nax.add_artist(bar_chart)\n\n# Create a heatmap for the heatmap\nheatmap = plt.Heatmap([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='YlOrRd')\nax.add_artist(heatmap)\n\n# Create a treemap for the treemap\ntreemap = plt.Treemap([1, 2, 3], color='orange')\nax.add_artist(treemap)\n\n# Create a line chart for the line chart\nline_chart = plt.Line([1, 2, 3], [1, 2, 3], color='blue')\nax.add_artist(line_chart)\n\n# Create a bubble chart for the bubble chart\nbubble_chart = plt.Bubble([1, 2, 3], [1, 2, 3], color='green')\nax.add_artist(bubble_chart)\n\n# Create a radar chart for the radar chart\nradar_chart = plt.Radar([1, 2, 3], color='red')\nax.add_artist(radar_chart)\n\n# Create a polar chart for the polar chart\npolar_chart = plt.Polar([1, 2, 3], color='blue')\nax.add_artist(polar_chart)\n\n# Create a sunburst chart for the sunburst chart\nsunburst_chart = plt.Sunburst([1, 2, 3], color='green')\nax.add_artist(sunburst_chart)\n\n# Create a rose chart for the rose chart\nrose_chart = plt.Rose([1, 2, 3], color='red')\nax.add_artist(rose_chart)\n\n# Create a donut chart for the donut chart\ndonut_chart = plt.Donut([1, 2, 3], color='blue')\nax.add_artist(donut_chart)\n\n# Create a scatter plot for the scatter plot\nscatter_plot = plt.Scatter([1, 2, 3], [1, 2, 3], color='yellow')\nax.add_artist(scatter_plot)\n\n# Create a bar chart for the bar chart\nbar_chart = plt.Bar([1, 2, 3], [1, 2, 3], color='purple')\nax.add_artist(bar_chart)\n\n# Create a heatmap for the heatmap\nheatmap = plt.Heatmap([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='YlOrRd')\nax.add_artist(heatmap)\n\n# Create a treemap for the treemap\ntreemap = plt.Treemap([1, 2, 3], color='orange')\nax.add_artist(treemap)\n\n# Create a line chart for the line chart\nline_chart = plt.Line([1, 2, 3], [1, 2, 3], color='blue')\nax.add_artist(line_chart)\n\n# Create a bubble chart for the bubble chart\nbubble_chart = plt.Bubble([1"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Imputation')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.1), 0.2, 0.8, color='blue')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.1), 0.2, 0.8, color='red')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.9), 0.4, 0.1, color='green')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.1), 0.4, 0.1, color='yellow')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='purple')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='orange')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='brown')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='cyan')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='magenta')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='grey')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='pink')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.5), 0.2, 0.2, color='lime')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='silver')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='gold')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='navy')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.6), 0.2, 0.2, color='olive')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.6), 0.2, 0.2, color='coral')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='azure')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='tan')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='lavender')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.7), 0.2, 0.2, color='salmon')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='peru')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='beige')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='wheat')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='ivory')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='khaki')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.6), 0.2, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.6), 0.2, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.6), 0.2, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.6), 0.2, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the middle of the plot\nrectangle = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the left side of the plot\nrectangle = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for the right side of the plot\nrectangle = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='palegreen')\nax.add_patch(rectangle)\n\n# Create a rectangle for the top of the plot\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='palevioletred')\nax.add_patch(rectangle)\n\n# Create a rectangle for the bottom of the plot\nrectangle = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='palegoldenrod')\nax.add_patch(rectangle)\n\n# Create a rectangle for"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Draw a circle around the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Set the tick labels\nax.set_xticks([0.25, 0.5, 0.75])\nax.set_yticks([0.25, 0.5, 0.75])\nax.set_xticklabels(['POPE', 'MM-Vet', 'TextVQA'])\nax.set_yticklabels(['VQAv2', 'GQA', 'SQA-I'])\n\n# Set the tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the grid\nax.grid(True)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('My Plot')\n\n# Set the text of the plot\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12)\n\n# Set the color of the plot\nax.set_facecolor('lightblue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='green')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('yellow')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightgreen')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'My Text', ha='center', va='center', fontsize=12, color='pink')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot grid\nax.grid(color='black', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', which='major', colors='purple')\n\n# Set the color of the plot title\nax.set_title('My Plot', color='orange')\n\n# Set the color of the plot text\n"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 4, figsize=(12, 4))\n\n# Define the data for each subplot\ndata = [\n    [np.random.rand(10), np.random.rand(10)],\n    [np.random.rand(10), np.random.rand(10)],\n    [np.random.rand(10), np.random.rand(10)],\n    [np.random.rand(10), np.random.rand(10)]\n]\n\n# Plot the data\nfor i, ax in enumerate(axs):\n    ax.plot(data[i][0], data[i][1], 'o')\n    ax.set_title('Model-Basedness' if i == 0 else 'Meta-Cognition' if i == 1 else 'Exploration' if i == 2 else 'Risk Taking' if i == 3 else 'Bayesian Reasoning' if i == 4 else 'Simple Bandits')\n\n# Set the x-axis label\nplt.xlabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the x-axis label\nax.set_xlabel('Pre-training GPU Hours')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy [%]')\n\n# Set the x-axis limits\nax.set_xlim(0, 4000)\n\n# Set the y-axis limits\nax.set_ylim(75, 90)\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.scatter([100, 2000, 3000], [85, 83, 81], color='red', s=100)\nax.scatter([100, 2000, 3000], [85, 83, 81], color='green', s=100)\nax.scatter([100, 2000, 3000], [85, 83, 81], color='blue', s=100)\nax.scatter([100, 2000, 3000], [85, 83, 81], color='yellow', s=100)\nax.scatter([100, 2000, 3000], [85, 83, 81], color='orange', s=100)\nax.scatter([100, 2000, 3000], [85, 83, 81], color='purple', s=100)\nax.scatter([100, 2000, 3000], [85, 83, 81], color='pink', s=100)\nax.scatter([100, 2000, 3000], [85, 83, 81], color='brown', s=100)\nax.scatter([100, 2000, 3000], [85, 83, 81], color='grey', s=100)\n\n# Create a line plot for each model\nax.plot([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='red')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\nax.plot([100, 2000, 3000], [85, 83, 81], color='blue')\nax.plot([100, 2000, 3000], [85, 83, 81], color='yellow')\nax.plot([100, 2000, 3000], [85, 83, 81], color='orange')\nax.plot([100, 2000, 3000], [85, 83, 81], color='purple')\nax.plot([100, 2000, 3000], [85, 83, 81], color='pink')\nax.plot([100, 2000, 3000], [85, 83, 81], color='brown')\nax.plot([100, 2000, 3000], [85, 83, 81], color='grey')\n\n# Add text annotations for each model\nax.annotate('iBOT', (100, 85), color='black')\nax.annotate('D2V2-Refined', (2000, 83), color='red')\nax.annotate('MoCo v3', (3000, 81), color='green')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Set the x-axis label\nax.set_xlabel('Infernece Time (seconds)')\n\n# Set the y-axis label\nax.set_ylabel('Average Score')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Draw a rectangle at the bottom left corner\nrect = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a circle at the top right corner\ncircle = plt.Circle((1, 1), 0.5, color='blue')\nax.add_patch(circle)\n\n# Draw a line graph\nx = [10, 20, 30, 40, 50, 60]\ny = [0.55, 0.65, 0.75, 0.85, 0.95, 0.9]\nax.plot(x, y, 'ro-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Number of parameters')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the x and y limits\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Set the x and y labels\nax.set_xlabel('EgoSchema VQA accuracy')\nax.set_ylabel('Perception Test VQA accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Relative Error, u')\n\n# Set the x-axis label\nax.set_xlabel('Test Case Index')\n\n# Set the y-axis label\nax.set_ylabel('Average Relative Error, u')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-ticks\nax.set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Add a rectangle for each test case\nrects = [plt.Rectangle((i, 0), 1, 0.1, color='blue') for i in range(1, 6)]\nfor rect in rects:\n    ax.add_patch(rect)\n\n# Add a circle for each LSTM model\ncircles = [plt.Circle((i, 0.1), 0.05, color='green') for i in range(1, 6)]\nfor circle in circles:\n    ax.add_patch(circle)\n\n# Add a black circle for the CAE Reconstruction model\ncircle = plt.Circle((3, 0.1), 0.05, color='black')\nax.add_patch(circle)\n\n# Add a blue triangle for the Single LSTMs\ntriangle = plt.Polygon([[1, 0.2], [2, 0.3], [1, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[2, 0.2], [3, 0.3], [2, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the CAE Reconstruction model\nsquare = plt.Rectangle((3, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Single LSTMs\nsquare = plt.Rectangle((4, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[4, 0.2], [5, 0.3], [4, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[5, 0.2], [6, 0.3], [5, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Single LSTMs\nsquare = plt.Rectangle((6, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Ensemble LSTMs\nsquare = plt.Rectangle((7, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[7, 0.2], [8, 0.3], [7, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Single LSTMs\ntriangle = plt.Polygon([[8, 0.2], [9, 0.3], [8, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Ensemble LSTMs\nsquare = plt.Rectangle((9, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the CAE Reconstruction model\nsquare = plt.Rectangle((10, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Single LSTMs\ntriangle = plt.Polygon([[10, 0.2], [11, 0.3], [10, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[11, 0.2], [12, 0.3], [11, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the CAE Reconstruction model\nsquare = plt.Rectangle((12, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Single LSTMs\nsquare = plt.Rectangle((13, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[13, 0.2], [14, 0.3], [13, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[14, 0.2], [15, 0.3], [14, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Single LSTMs\nsquare = plt.Rectangle((15, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Ensemble LSTMs\nsquare = plt.Rectangle((16, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[16, 0.2], [17, 0.3], [16, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Single LSTMs\ntriangle = plt.Polygon([[17, 0.2], [18, 0.3], [17, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Ensemble LSTMs\nsquare = plt.Rectangle((18, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the CAE Reconstruction model\nsquare = plt.Rectangle((19, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Single LSTMs\ntriangle = plt.Polygon([[19, 0.2], [20, 0.3], [19, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[20, 0.2], [21, 0.3], [20, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the CAE Reconstruction model\nsquare = plt.Rectangle((21, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Single LSTMs\nsquare = plt.Rectangle((22, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[22, 0.2], [23, 0.3], [22, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[23, 0.2], [24, 0.3], [23, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Single LSTMs\nsquare = plt.Rectangle((24, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Ensemble LSTMs\nsquare = plt.Rectangle((25, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[25, 0.2], [26, 0.3], [25, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Single LSTMs\ntriangle = plt.Polygon([[26, 0.2], [27, 0.3], [26, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Ensemble LSTMs\nsquare = plt.Rectangle((27, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the CAE Reconstruction model\nsquare = plt.Rectangle((28, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Single LSTMs\ntriangle = plt.Polygon([[28, 0.2], [29, 0.3], [28, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[29, 0.2], [30, 0.3], [29, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the CAE Reconstruction model\nsquare = plt.Rectangle((30, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Single LSTMs\nsquare = plt.Rectangle((31, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[31, 0.2], [32, 0.3], [31, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[32, 0.2], [33, 0.3], [32, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Single LSTMs\nsquare = plt.Rectangle((33, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Ensemble LSTMs\nsquare = plt.Rectangle((34, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[34, 0.2], [35, 0.3], [34, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Single LSTMs\ntriangle = plt.Polygon([[35, 0.2], [36, 0.3], [35, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Ensemble LSTMs\nsquare = plt.Rectangle((36, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the CAE Reconstruction model\nsquare = plt.Rectangle((37, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Single LSTMs\ntriangle = plt.Polygon([[37, 0.2], [38, 0.3], [37, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[38, 0.2], [39, 0.3], [38, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the CAE Reconstruction model\nsquare = plt.Rectangle((39, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Single LSTMs\nsquare = plt.Rectangle((40, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[40, 0.2], [41, 0.3], [40, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[41, 0.2], [42, 0.3], [41, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Single LSTMs\nsquare = plt.Rectangle((42, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Ensemble LSTMs\nsquare = plt.Rectangle((43, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[43, 0.2], [44, 0.3], [43, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Single LSTMs\ntriangle = plt.Polygon([[44, 0.2], [45, 0.3], [44, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Ensemble LSTMs\nsquare = plt.Rectangle((45, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the CAE Reconstruction model\nsquare = plt.Rectangle((46, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Single LSTMs\ntriangle = plt.Polygon([[46, 0.2], [47, 0.3], [46, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[47, 0.2], [48, 0.3], [47, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the CAE Reconstruction model\nsquare = plt.Rectangle((48, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Single LSTMs\nsquare = plt.Rectangle((49, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[49, 0.2], [50, 0.3], [49, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[50, 0.2], [51, 0.3], [50, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Single LSTMs\nsquare = plt.Rectangle((51, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Ensemble LSTMs\nsquare = plt.Rectangle((52, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[52, 0.2], [53, 0.3], [52, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Single LSTMs\ntriangle = plt.Polygon([[53, 0.2], [54, 0.3], [53, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the Ensemble LSTMs\nsquare = plt.Rectangle((54, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the CAE Reconstruction model\nsquare = plt.Rectangle((55, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Single LSTMs\ntriangle = plt.Polygon([[55, 0.2], [56, 0.3], [55, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[56, 0.2], [57, 0.3], [56, 0.4]], color='green')\nax.add_patch(triangle)\n\n# Add a red square for the CAE Reconstruction model\nsquare = plt.Rectangle((57, 0.2), 0.1, 0.1, color='red')\nax.add_patch(square)\n\n# Add a green square for the Single LSTMs\nsquare = plt.Rectangle((58, 0.2), 0.1, 0.1, color='green')\nax.add_patch(square)\n\n# Add a blue triangle for the Ensemble LSTMs\ntriangle = plt.Polygon([[58, 0.2], [59, 0.3], [58, 0.4]], color='blue')\nax.add_patch(triangle)\n\n# Add a green triangle for the CAE Reconstruction model\ntriangle = plt.Polygon([[59, 0.2], ["}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\naccuracies = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\nmajority_minority = ['majority', 'minority', 'majority', 'minority', 'majority', 'minority', 'majority', 'minority']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot data\nax.plot(classes, accuracies, 'ro-')\n\n# Add labels and title\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Add legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=majority_minority[i], markerfacecolor='blue' if majority_minority[i] == 'majority' else 'red') for i in range(len(majority_minority))]\nax.legend(handles=legend_elements)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\n\n# Set the x-axis label\nax.set_xlabel('Token cost($)')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy(%)')\n\n# Create a scatter plot\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='red')\n\n# Create a bar chart\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue')\n\n# Create a pie chart\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'])\n\n# Create a histogram\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow')\n\n# Create a line plot\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black')\n\n# Create a scatter plot with different sizes\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 500], color='red')\n\n# Create a bar chart with different colors\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color=['green', 'orange', 'pink', 'purple', 'brown'])\n\n# Create a pie chart with different labels\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'])\n\n# Create a histogram with different bins\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow')\n\n# Create a line plot with different styles\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', linestyle='--')\n\n# Create a scatter plot with different markers\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], marker='o', color='red')\n\n# Create a bar chart with different edgecolors\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue', edgecolor='black')\n\n# Create a pie chart with different explode values\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'], explode=[0.1, 0.1, 0.1, 0.1, 0.1])\n\n# Create a histogram with different alpha values\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow', alpha=0.5)\n\n# Create a line plot with different linewidths\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', linewidth=2)\n\n# Create a scatter plot with different sizes and colors\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 500], c=['red', 'green', 'blue', 'orange', 'pink'])\n\n# Create a bar chart with different hatch patterns\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue', hatch='///')\n\n# Create a pie chart with different startangle values\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'], startangle=90)\n\n# Create a histogram with different orientation values\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow', orientation='horizontal')\n\n# Create a line plot with different markersize values\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', marker='o', markersize=10)\n\n# Create a scatter plot with different alpha values\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 500], alpha=0.5)\n\n# Create a bar chart with different width values\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue', width=0.5)\n\n# Create a pie chart with different counterclock values\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'], counterclock=False)\n\n# Create a histogram with different grid values\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow', grid=True)\n\n# Create a line plot with different markeredgewidth values\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', marker='o', markersize=10, markeredgewidth=2)\n\n# Create a scatter plot with different markeredgecolor values\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 500], c=['red', 'green', 'blue', 'orange', 'pink'], edgecolor='black')\n\n# Create a bar chart with different capsize values\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue', capsize=5)\n\n# Create a pie chart with different radius values\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'], radius=0.5)\n\n# Create a histogram with different log values\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow', log=True)\n\n# Create a line plot with different drawstyle values\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', marker='o', markersize=10, drawstyle='steps-post')\n\n# Create a scatter plot with different zorder values\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 500], c=['red', 'green', 'blue', 'orange', 'pink'], zorder=10)\n\n# Create a bar chart with different align values\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue', align='center')\n\n# Create a pie chart with different shadow values\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'], shadow=True)\n\n# Create a histogram with different rwidth values\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow', rwidth=0.5)\n\n# Create a line plot with different antialiased values\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', marker='o', markersize=10, antialiased=True)\n\n# Create a scatter plot with different visible values\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 500], c=['red', 'green', 'blue', 'orange', 'pink'], visible=True)\n\n# Create a bar chart with different error_kw values\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue', yerr=[1, 2, 3, 4, 5], ecolor='black', capsize=5, error_kw={'elinewidth': 2})\n\n# Create a pie chart with different wedgeprops values\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'], wedgeprops=dict(width=0.4))\n\n# Create a histogram with different cumulative values\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow', cumulative=True)\n\n# Create a line plot with different scaley values\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', marker='o', markersize=10, scaley=True)\n\n# Create a scatter plot with different scalex values\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 500], c=['red', 'green', 'blue', 'orange', 'pink'], scalex=True)\n\n# Create a bar chart with different bottom values\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue', bottom=[1, 2, 3, 4, 5])\n\n# Create a pie chart with different autopct values\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'], autopct='%1.1f%%')\n\n# Create a histogram with different density values\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow', density=True)\n\n# Create a line plot with different markerfacecolor values\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', marker='o', markersize=10, markerfacecolor='red')\n\n# Create a scatter plot with different markeredgecolor values\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 500], c=['red', 'green', 'blue', 'orange', 'pink'], markeredgecolor='black')\n\n# Create a bar chart with different hatch values\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue', hatch='///')\n\n# Create a pie chart with different startangle values\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'], startangle=90)\n\n# Create a histogram with different orientation values\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow', orientation='horizontal')\n\n# Create a line plot with different markersize values\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', marker='o', markersize=10)\n\n# Create a scatter plot with different sizes and colors\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 500], c=['red', 'green', 'blue', 'orange', 'pink'])\n\n# Create a bar chart with different hatch patterns\nax.bar(['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], [68, 66, 64, 62, 60], color='blue', hatch='///')\n\n# Create a pie chart with different startangle values\nax.pie([10, 20, 30, 40, 50], labels=['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine'], colors=['green', 'orange', 'pink', 'purple', 'brown'], startangle=90)\n\n# Create a histogram with different orientation values\nax.hist([50, 30, 20, 10, 0], bins=5, color='yellow', orientation='horizontal')\n\n# Create a line plot with different markersize values\nax.plot([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='black', marker='o', markersize=10)\n\n# Create a scatter plot with different sizes and colors\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], s=[100, 200, 300, 400, 50"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Carbon Emissions vs Energy Sources')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny = [10, 15, 20, 25, 30, 35, 40, 45]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('\u0394 Robust Accuracy (%)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Set the x-axis limits\nax.set_xlim(-30, 10)\n\n# Set the y-axis limits\nax.set_ylim(-10, 30)\n\n# Set the grid lines\nax.grid(True)\n\n# Define the colors for the scatter plots\ncolors = ['blue', 'green', 'purple', 'yellow']\n\n# Generate random data points for the scatter plots\nx = [i for i in range(-30, 11)]\ny = [i for i in range(-10, 31)]\n\n# Plot the scatter plots\nfor i in range(len(colors)):\n    ax.scatter(x, y, color=colors[i])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(2, 16)\n\n# Set the y-axis limits\nax.set_ylim(80, 110)\n\n# Set the x-axis ticks\nax.set_xticks(range(2, 17, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(80, 111, 10))\n\n# Set the grid\nax.grid(True)\n\n# Set the title\nax.set_title('Temperature over Time')\n\n# Set the labels\nax.set_xlabel('Time')\nax.set_ylabel('Temperature')\n\n# Add a legend\nax.legend(['Day 1', 'Day 2'])\n\n# Add a rectangle\nrect = plt.Rectangle((2, 80), 14, 30, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a circle\ncircle = plt.Circle((10, 90), 5, color='red')\nax.add_artist(circle)\n\n# Add a line\nline = plt.Line2D([2, 16], [85, 105], color='green')\nax.add_line(line)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(2, 16)\nax.set_ylim(80, 110)\n\n# Draw a rectangle for the background\nax.add_patch(plt.Rectangle((0, 0), 16, 110, color='blue'))\n\n# Draw a vertical line for the y-axis\nax.axvline(x=8, color='black')\n\n# Draw a horizontal line for the x-axis\nax.axhline(y=95, color='black')\n\n# Draw a rectangle for the graph\nax.add_patch(plt.Rectangle((2, 80), 14, 30, color='green'))\n\n# Draw a rectangle for the legend\nax.add_patch(plt.Rectangle((2, 110), 14, 10, color='red'))\n\n# Draw a rectangle for the title\nax.add_patch(plt.Rectangle((2, 120), 14, 10, color='yellow'))\n\n# Draw a rectangle for the subtitle\nax.add_patch(plt.Rectangle((2, 130), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 85), 14, 5, color='cyan'))\n\n# Draw a rectangle for the labels\nax.add_patch(plt.Rectangle((2, 90), 14, 5, color='magenta'))\n\n# Draw a rectangle for the annotations\nax.add_patch(plt.Rectangle((2, 95), 14, 5, color='brown'))\n\n# Draw a rectangle for the grid\nax.add_patch(plt.Rectangle((2, 100), 14, 5, color='orange'))\n\n# Draw a rectangle for the ticks\nax.add_patch(plt.Rectangle((2, 105), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 110), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 115), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 120), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 125), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 130), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 135), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 140), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 145), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 150), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 155), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 160), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 165), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 170), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 175), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 180), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 185), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 190), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 195), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 200), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 205), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 210), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 215), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 220), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 225), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 230), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 235), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 240), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 245), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 250), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 255), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 260), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 265), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 270), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 275), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 280), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 285), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 290), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 295), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 300), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 305), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 310), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 315), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 320), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 325), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 330), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 335), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 340), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 345), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 350), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 355), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 360), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 365), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 370), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 375), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 380), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 385), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 390), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 395), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 400), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 405), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 410), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 415), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 420), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 425), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 430), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 435), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 440), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 445), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 450), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 455), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 460), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 465), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 470), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 475), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 480), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 485), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 490), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 495), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 500), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 505), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 510), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 515), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 520), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 525), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 530), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 535), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 540), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 545), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 550), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 555), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 560), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 565), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 570), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 575), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 580), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 585), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 590), 14, 5, color='maroon'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 595), 14, 5, color='olive'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 600), 14, 5, color='silver'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 605), 14, 5, color='gray'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 610), 14, 5, color='pink'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 615), 14, 5, color='orange'))\n\n# Draw a rectangle for the tick parameters\nax.add_patch(plt.Rectangle((2, 620), 14, 5, color='gold'))\n\n# Draw a rectangle for the tick lines\nax.add_patch(plt.Rectangle((2, 625), 14, 5, color='lime'))\n\n# Draw a rectangle for the tick labels\nax.add_patch(plt.Rectangle((2, 630), 14, 5, color='teal'))\n\n# Draw a rectangle for the tick marks\nax.add_patch(plt.Rectangle((2, 635), 14, 5, color='navy'))\n\n# Draw a rectangle for the tick parameters"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Energy Production Trends')\n\n# Create a list of energy sources\nenergy_sources = ['Solar Energy', 'Wind Energy', 'Hydropower']\n\n# Create a list of installed capacities\ninstalled_capacities = [175, 200, 225, 250, 275, 300]\n\n# Create a list of energy outputs\nenergy_outputs = [140, 160, 180, 200, 220, 240]\n\n# Create a scatter plot for each energy source\nfor i, source in enumerate(energy_sources):\n    ax.scatter(installed_capacities[i], energy_outputs[i], color='blue')\n    ax.annotate(source, (installed_capacities[i], energy_outputs[i]))\n\n# Create a line plot for each energy source\nfor i, source in enumerate(energy_sources):\n    ax.plot(installed_capacities, energy_outputs, color='red')\n\n# Set the x-axis label\nax.set_xlabel('Installed Capacity (GW)')\n\n# Set the y-axis label\nax.set_ylabel('Energy Output (TWh)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Create a scatter plot\nscatter = ax.scatter([10, 20, 30, 40, 50, 60, 70, 80, 90], [10, 20, 30, 40, 50, 60, 70, 80, 90], c=[10, 20, 30, 40, 50, 60, 70, 80, 90], cmap='viridis')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Set the limits of the color bar\ncbar.set_clim(0, 100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('LibriCSS vs Additional Data 1')\n\n# Create a scatter plot with random data\nx = [2, 3, 4, 5, 6, 7, 8]\ny = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\nax.scatter(x, y, color='blue')\n\n# Add a legend to the plot\nax.legend(['LibriCSS WER', 'Additional Data 1'])\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Create a scatter plot\nax.scatter([0.3, 0.4, 0.5], [0.2, 0.4, 0.6], color='green')\nax.scatter([0.7, 0.8, 0.9], [0.2, 0.4, 0.6], color='red')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Create a scatter plot with the data\nax.scatter([1, 2, 3, 4, 5], [1.5, 1.75, 1.9, 2.1, 2.25])\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Set the color scale for the scatter plot\ncmap = plt.cm.RdYlGn\n\n# Create a scatter plot with the data\nscatter = ax.scatter(x, y, c=z, cmap=cmap)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\ncbar.set_label('Color scale for X')\n\n# Set the title of the plot\nax.set_title('Scatter Plot - deepskyblue')\n\n# Set the x and y labels\nax.set_xlabel('X Values')\nax.set_ylabel('Y Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny2 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny3 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot the data\naxs[0].plot(x, y1, 'b-')\naxs[1].plot(x, y2, 'r-')\naxs[2].plot(x, y3, 'g-')\n\n# Add a title to each subplot\naxs[0].set_title('ViTPose (sc) Performance')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[2].set_title('VLPose Performance')\n\n# Add a legend to each subplot\naxs[0].legend(['ViT Pose (sc)'])\naxs[1].legend(['ViT Pose (ft)'])\naxs[2].legend(['VL Pose'])\n\n# Set the x-axis label for each subplot\naxs[0].set_xlabel('Average Precision on HumanArt (%)')\naxs[1].set_xlabel('Average Precision on HumanArt (%)')\naxs[2].set_xlabel('Average Precision on HumanArt (%)')\n\n# Set the y-axis label for each subplot\naxs[0].set_ylabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on MSCOCO (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Token cost ($)')\n\n# Set the x-axis label\nax.set_xlabel('Diversity (%)')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Define the data for the plot\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [70, 75, 80, 85, 90, 95, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the limits of the x-axis\nax.set_xlim(1.0, 6.0)\n\n# Set the limits of the y-axis\nax.set_ylim(10, 100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a scatter plot with random data points\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\nsizes = 1000 * np.random.rand(100)\nscatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.5)\n\n# Set the title of the plot\nax.set_title('Random Scatter Plot')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Set the x-axis label\nax.set_xlabel('Bit per pixel (BPP)')\n\n# Set the y-axis label\nax.set_ylabel('WRMSE')\n\n# Define the data points\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny = [800, 700, 600, 500, 400, 300, 200, 100]\n\n# Define the colors for each point\ncolors = ['blue', 'cyan', 'red', 'green', 'purple', 'pink', 'orange', 'yellow']\n\n# Plot the data points with different colors\nfor i in range(len(x)):\n    ax.scatter(x[i], y[i], color=colors[i])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a scatter plot with orange dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='orange')\n\n# Create a scatter plot with blue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='blue')\n\n# Create a scatter plot with green dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='green')\n\n# Add a legend\nax.legend(['Daytime Sunny', 'Night Rainy', 'PGST'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Set the x-axis label\nax.set_xlabel('Number of parameters (M)')\n\n# Set the y-axis label\nax.set_ylabel('NMAE')\n\n# Define the data points\nx = [0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\ny = [10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add labels for each data point\nfor i, txt in enumerate(['LNO', 'GNO', 'InfGCN', 'DeepDFT2']):\n    ax.annotate(txt, (x[i], y[i]))\n\n# Add a rectangle to represent the model\nrect = plt.Rectangle((0.5, 10), 1, 10, color='blue')\nax.add_patch(rect)\n\n# Add a circle to represent the dataset\ncircle = plt.Circle((0.7, 10), 0.2, color='red')\nax.add_artist(circle)\n\n# Set the limits of the x-axis and y-axis\nax.set_xlim(0.4, 6.1)\nax.set_ylim(9.5, 40.5)\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the x-axis label\nax.set_xlabel('PC1')\n\n# Set the y-axis label\nax.set_ylabel('PC2')\n\n# Set the x-axis limits\nax.set_xlim(-0.4, 0.4)\n\n# Set the y-axis limits\nax.set_ylim(-0.2, 0.4)\n\n# Create scatter plots for each category\nax.scatter([0.1, 0.2], [0.3, 0.4], color='blue', label='ar')\nax.scatter([0.2, 0.3], [0.4, 0.5], color='pink', label='de')\nax.scatter([0.3, 0.4], [0.5, 0.6], color='yellow', label='fr')\nax.scatter([0.4, 0.5], [0.6, 0.7], color='green', label='he')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Set the title of the plot\nax.set_title('DE')\n\n# Set the x-axis label\nax.set_xlabel('CBA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='red')\n\n# Create a legend\nax.legend(['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer'])\n\n# Set the x-axis limits\nax.set_xlim(0.5, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.6)\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CBA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='blue')\n\n# Create a legend\nax.legend(['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer'])\n\n# Set the x-axis limits\nax.set_xlim(0.5, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.6)\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f8ff')\n\n# Create a rectangle for the first website\nrect1 = plt.Rectangle((0.1, 0.7), 0.3, 0.2, color='#add8e6')\nax.add_patch(rect1)\n\n# Create a rectangle for the second website\nrect2 = plt.Rectangle((0.5, 0.7), 0.4, 0.2, color='#ffa07a')\nax.add_patch(rect2)\n\n# Create a rectangle for the third website\nrect3 = plt.Rectangle((0.1, 0.4), 0.3, 0.2, color='#b0c4de')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth website\nrect4 = plt.Rectangle((0.5, 0.4), 0.4, 0.2, color='#f0e68c')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth website\nrect5 = plt.Rectangle((0.1, 0.1), 0.3, 0.2, color='#add8e6')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth website\nrect6 = plt.Rectangle((0.5, 0.1), 0.4, 0.2, color='#f0e68c')\nax.add_patch(rect6)\n\n# Add text to each rectangle\nax.text(0.2, 0.8, 'physicsforums.com\\n18.42%', fontsize=12)\nax.text(0.6, 0.8, 'gmatclub.com\\n6.26%', fontsize=12)\nax.text(0.2, 0.5, 'stackexchange.com\\n30.6%', fontsize=12)\nax.text(0.6, 0.5, 'mathoverflow.net\\n10.91%', fontsize=12)\nax.text(0.2, 0.2, 'mathhelpboards.com\\n6.15%', fontsize=12)\nax.text(0.6, 0.2, 'proofwiki.org\\n8.54%', fontsize=12)\n\n# Set the limits of the plot\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f5f5f5')\n\n# Create a rectangle for each language\nrect1 = plt.Rectangle((0.1, 0.7), 0.2, 0.2, color='#9c27b0', label='Java 10%')\nrect2 = plt.Rectangle((0.4, 0.7), 0.2, 0.2, color='#e91e63', label='Python 20%')\nrect3 = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='#9c27b0', label='JavaScript 27%')\nrect4 = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='#e91e63', label='C++ 23%')\nrect5 = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='#9c27b0', label='Other 8%')\nrect6 = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='#e91e63', label='C# 12%')\n\n# Add rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\nax.add_patch(rect6)\n\n# Set the title of the plot\nax.set_title('Programming Language Usage')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Languages')\nax.set_ylabel('Usage (%)')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x-axis and y-axis ticks\nax.set_xticks([0.1, 0.4, 0.7])\nax.set_yticks([0.4, 0.7])\n\n# Set the x-axis and y-axis tick labels\nax.set_xticklabels(['Java', 'Python', 'JavaScript'])\nax.set_yticklabels(['C++', 'Other'])\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Create a rectangle for the first product\nrect1 = plt.Rectangle((0.1, 0.7), 0.3, 0.2, color='cyan')\nax.add_patch(rect1)\nax.text(0.2, 0.8, 'Adidas\\n13.42%', ha='center', va='center')\n\n# Create a rectangle for the second product\nrect2 = plt.Rectangle((0.5, 0.7), 0.3, 0.2, color='orange')\nax.add_patch(rect2)\nax.text(0.6, 0.8, 'Under Armour\\n8.54%', ha='center', va='center')\n\n# Create a rectangle for the third product\nrect3 = plt.Rectangle((0.9, 0.7), 0.3, 0.2, color='pink')\nax.add_patch(rect3)\nax.text(1.0, 0.8, 'New Balance\\n6.26%', ha='center', va='center')\n\n# Create a rectangle for the fourth product\nrect4 = plt.Rectangle((0.1, 0.3), 0.3, 0.2, color='lightblue')\nax.add_patch(rect4)\nax.text(0.2, 0.4, 'Nike\\n30.6%', ha='center', va='center')\n\n# Create a rectangle for the fifth product\nrect5 = plt.Rectangle((0.5, 0.3), 0.3, 0.2, color='yellow')\nax.add_patch(rect5)\nax.text(0.6, 0.4, 'Reebok\\n10.91%', ha='center', va='center')\n\n# Create a rectangle for the sixth product\nrect6 = plt.Rectangle((0.9, 0.3), 0.3, 0.2, color='lightgreen')\nax.add_patch(rect6)\nax.text(1.0, 0.4, 'Puma\\n14.21%', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F2D7D5')\n\n# Create a bar chart with the data\nax.bar(['A', 'B', 'C'], [50, 15, 20], color='#85C1E9')\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a rectangle for the first bar\nrect1 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='yellow')\nax.add_patch(rect1)\n\n# Create a rectangle for the second bar\nrect2 = plt.Rectangle((0.1, 0.45), 0.8, 0.2, color='purple')\nax.add_patch(rect2)\n\n# Create a rectangle for the third bar\nrect3 = plt.Rectangle((0.1, 0.2), 0.8, 0.2, color='pink')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth bar\nrect4 = plt.Rectangle((0.1, 0.7), 0.2, 0.2, color='cyan')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth bar\nrect5 = plt.Rectangle((0.4, 0.7), 0.2, 0.2, color='blue')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth bar\nrect6 = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='green')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh bar\nrect7 = plt.Rectangle((0.1, 0.45), 0.2, 0.2, color='orange')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth bar\nrect8 = plt.Rectangle((0.4, 0.45), 0.2, 0.2, color='red')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth bar\nrect9 = plt.Rectangle((0.7, 0.45), 0.2, 0.2, color='brown')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth bar\nrect10 = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='grey')\nax.add_patch(rect10)\n\n# Create a rectangle for the eleventh bar\nrect11 = plt.Rectangle((0.4, 0.2), 0.2, 0.2, color='black')\nax.add_patch(rect11)\n\n# Create a rectangle for the twelfth bar\nrect12 = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='silver')\nax.add_patch(rect12)\n\n# Set the title of the plot\nax.set_title('Global Population Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Continent')\n\n# Set the y-axis label\nax.set_ylabel('Population Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL)')\n\n# Set the x-axis limits\nax.set_xlim(1, 5)\n\n# Set the y-axis limits\nax.set_ylim(1, 7)\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-ticks\nax.set_yticks([1, 2, 3, 4, 5, 6, 7])\n\n# Set the x-tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Set the y-tick labels\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Scores with and without Memory')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='viridis'))\n\n# Set the labels for the color bar\ncbar.ax.set_yticklabels(['Without Memory', 'With Memory'])\n\n# Set the labels for the x-axis\nax.set_xlabel('Efficiency')\nax.set_xticks([0, 2, 4, 6, 8])\nax.set_xticklabels(['0.0', '0.5', '1.0', '1.5', '2.0'])\n\n# Set the labels for the y-axis\nax.set_ylabel('Comfort')\nax.set_yticks([0, 2, 4, 6, 8])\nax.set_yticklabels(['0.0', '0.5', '1.0', '1.5', '2.0'])\n\n# Add stars to the plot\nax.plot([0, 2, 4, 6, 8], [0, 2, 4, 6, 8], 'ro')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the bar chart\nx = ['Efficiency', 'Comfort', 'Safety']\ny = [0.5, 0.7, 0.8]\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Add labels and title\nax.set_xlabel('Features')\nax.set_ylabel('Score')\nax.set_title('Car Features Comparison')\n\n# Add a legend\nax.legend(['Without Memory', 'With Memory'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Create a bar chart\nax.bar([1, 2, 3, 4, 5], [0.9, 0.8, 0.7, 0.6, 0.5], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the plot\nax2.set_title('Pair Comparison')\n\n# Create a bar chart\nax2.bar(['Winner', 'Losser Preference', 'Tie'], [0.95, 0.85, 0.75], color='orange')\n\n# Set the x-axis label\nax2.set_xlabel('Pair')\n\n# Set the y-axis label\nax2.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data for the plots\ndata1 = np.random.rand(10)\ndata2 = np.random.rand(10)\ndata3 = np.random.rand(10)\n\n# Create the plots\nax.plot(data1, label='jTrans')\nax.plot(data2, label='PalmTree')\nax.plot(data3, label='CLAP')\n\n# Set the title and labels\nax.set_title('Accuracy of Models')\nax.set_xlabel('Time')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plots\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Teacher-Style')\nax.plot(x, y2, 'o-', label='Standardize')\n\n# Add stars at specific points\nax.plot([2, 4, 6], [0.5, 0.7, 0.9], 'y*', markersize=10)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 10)\nax.set_ylim(-1, 1)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Create a rectangle for the first plot\nrect1 = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='pink', ec='black')\nax.add_patch(rect1)\n\n# Create a rectangle for the second plot\nrect2 = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='blue', ec='black')\nax.add_patch(rect2)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the labels of the x and y axes\nax.set_xlabel('Time (s)')\nax.set_ylabel('Distance (m)')\n\n# Set the title of the plot\nax.set_title('Comparison of Two Different Models')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('% Decrease in Test MSE vs. FLAM-GL')\n\n# Set the x-axis label\nax.set_xlabel('Number of Features')\n\n# Set the y-axis label\nax.set_ylabel('% Decrease in Test MSE')\n\n# Set the x-ticks\nax.set_xticks([2, 4, 6, 8, 10])\n\n# Set the y-limits\nax.set_ylim(0, 700)\n\n# Set the y-ticks\nax.set_yticks(range(0, 701, 100))\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9, 0.5, 'AGIS', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Group l0', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue')\n\n# Set the color of the text\nax.text(0.9"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = np.array([0.88, 0.85, 0.79, 0.67, 0.57])\ny = np.array([0.18, 0.19, 0.19, 0.18, 0.16])\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Decimated Sampling Rate')\nax.set_xlabel('KCC')\nax.set_ylabel('Pearson R')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.set_title('Distribution of Grades: Class 1')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a bar chart with random data\ngrades = ['A', 'B', 'C', 'D', 'F']\nnum_students = [np.random.randint(50, 100) for _ in range(len(grades))]\nax.bar(grades, num_students, color='blue')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.set_title('Distribution of Grades: Class 2')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a pie chart with random data\nnum_students = [np.random.randint(50, 100) for _ in range(len(grades))]\nax.pie(num_students, labels=grades, colors=['red', 'green', 'blue', 'yellow', 'black'], autopct='%1.1f%%')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.set_title('Distribution of Grades: Class 3')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a scatter plot with random data\nx = np.random.randint(40, 120, size=10)\ny = np.random.randint(40, 120, size=10)\nax.scatter(x, y, color='green')\n\n# Create a fourth subplot\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.set_title('Distribution of Grades: Class 4')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a histogram with random data\nnum_students = [np.random.randint(50, 100) for _ in range(len(grades))]\nax.hist(num_students, bins=5, color='purple')\n\nplt.show()\n```"}
