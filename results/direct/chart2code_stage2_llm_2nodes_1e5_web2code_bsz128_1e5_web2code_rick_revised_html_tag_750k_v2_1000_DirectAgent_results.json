{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Targets')\nax.plot(x, y2, 'r-', label='Predictions')\n\n# Set the title and labels\nax.set_title('Stock Market Predictions')\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nheights = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ncounts = [4, 3, 2, 1, 0.5, 0.25, 0.1]\n\n# Plot the data\nax.bar(heights, counts, color='red')\n\n# Set the title and labels\nax.set_title('Height vs Count')\nax.set_xlabel('Height')\nax.set_ylabel('Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the data\nax.contourf(X, Y, Z, cmap='viridis')\n\n# Set the limits of the plot\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\n\n# Set the labels of the axes\nax.set_xlabel('X')\nax.set_ylabel('Y')\n\n# Set the title of the plot\nax.set_title('Contour Plot of a Function')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Volume vs Temperature and Pressure')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\n\n# Set the limits for the x and y axes\nax.set_xlim(-4, 4)\nax.set_ylim(-2, 10)\n\n# Create a scatter plot with red dots\nax.scatter([-3, -2, 0, 2, 4], [5, 7, 9, 11, 13], color='red', label='Discrete Points')\n\n# Create a line plot with blue line\nax.plot([-4, -2, 0, 2, 4], [10, 15, 20, 25, 30], color='blue', label='Fit Line')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2012, 2014, 2016, 2018]\npublic_schools = [0.3, 0.5, 0.7, 0.9, 0.8]\nprivate_schools = [0.4, 0.6, 0.8, 0.9, 0.7]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot bars for public schools\nx = years\ny = [0]*len(years)\nz = [0]*len(years)\ndx = [0.5]*len(years)\ndy = [0.5]*len(years)\ndz = public_schools\nax.bar3d(x, y, z, dx, dy, dz, color='blue')\n\n# Plot bars for private schools\nx = years\ny = [0]*len(years)\nz = [0]*len(years)\ndx = [0.5]*len(years)\ndy = [0.5]*len(years)\ndz = private_schools\nax.bar3d(x, y, z, dx, dy, dz, color='orange')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\nax.set_title('Student to Teacher Ratio by School Type')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the 3D plot\nfig = plt.figure(figsize=(10.0, 8.0))\nax = fig.add_subplot(121, projection='3d')\n\n# Create a 3D bar chart\nx = np.arange(4)\ny = np.arange(4)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(4, 4)\ndx = dy = 0.5\ndz = z.flatten()\nax.bar3d(x.flatten(), y.flatten(), np.zeros_like(dz), dx, dy, dz, shade=True)\n\n# Set labels\nax.set_xlabel('Year')\nax.set_ylabel('Sector')\nax.set_zlabel('Investment (Billion USD)')\n\n# Create a 2D histogram\nax2 = fig.add_subplot(122)\ndata = np.random.rand(100, 2)\nax2.hist2d(data[:, 0], data[:, 1], bins=10, cmap='viridis')\n\n# Set labels\nax2.set_xlabel('Time Since Introduction (Years)')\nax2.set_ylabel('Technology Level')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the function f(x)\ndef f(x):\n    return x**2 - 2*x + 1\n\n# Create a grid of x values\nx = np.linspace(-1, 1, 100)\n\n# Calculate the y values for each x value\ny = f(x)\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plot the function f(x) in the first subplot\naxs[0].plot(x, y, 'r-')\naxs[0].set_title('f(x)')\naxs[0].set_xlabel('x')\naxs[0].set_ylabel('f(x)')\n\n# Plot the solution in the second subplot\naxs[1].plot(x, y, 'b-')\naxs[1].set_title('solution')\naxs[1].set_xlabel('x')\naxs[1].set_ylabel('f(x)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(1, 6, 10)\ny = np.linspace(1, 6, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the data\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Set the labels\nax.set_xlabel('t')\nax.set_ylabel('k')\nax.set_zlabel('tau')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\n\"\"\"\nThis is a simple script to create a 3D plot of a function using matplotlib.\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the function to be plotted\ndef f(x, y):\n    return np.sin(np.sqrt(x**2 + y**2))\n\n# Create a grid of points\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\n\n# Compute the function values\nz = f(x, y)\n\n# Create a new figure and a 3D subplot\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set the labels\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('FREEDOM')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis tick labels\nax.set_xticks(np.arange(0, 1.1, 0.2))\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticks(np.arange(0, 1.5, 0.2))\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.4, 0.4, fill=False, edgecolor='black'))\n\n# Draw a line\nax.plot([0.3, 0.7], [0.3, 0.7], 'r-')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.1, color='red')\nax.add_artist(circle)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the grid\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Bus')\nax.set_ylabel('Time')\nax.set_zlabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for the bar chart\nx = np.arange(1, 5)\ny = [4, 6, 8, 10]\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a 3D axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([10, 20, 30, 40, 50])\nz = np.array([10, 20, 30, 40, 50])\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Set the labels for the axes\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a 3D axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(0, 50, 100)\ny = np.linspace(0, 40, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(x/10) * np.cos(y/10)\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Set the labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Time (s)')\nax.set_zlabel('Depth (m)')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis label\nax.set_xlabel('LR Test')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the title\nax.set_title('Histogram of LR Test')\n\n# Create a rectangle for the left side\nrect_left = plt.Rectangle((-20, 0), 40, 12, color='blue')\nax.add_patch(rect_left)\n\n# Create a rectangle for the right side\nrect_right = plt.Rectangle((0, 0), 20, 12, color='red')\nax.add_patch(rect_right)\n\n# Create a line for the middle\nline_middle = plt.Line2D([-10, 10], [6, 6], color='blue', linestyle='--')\nax.add_line(line_middle)\n\n# Create a line for the top\nline_top = plt.Line2D([0, 0], [0, 12], color='red', linestyle='--')\nax.add_line(line_top)\n\n# Create a line for the bottom\nline_bottom = plt.Line2D([0, 0], [0, 0], color='blue', linestyle='--')\nax.add_line(line_bottom)\n\n# Create a line for the left side\nline_left = plt.Line2D([-20, -20], [0, 12], color='red', linestyle='--')\nax.add_line(line_left)\n\n# Create a line for the right side\nline_right = plt.Line2D([20, 20], [0, 12], color='blue', linestyle='--')\nax.add_line(line_right)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data\nx = np.linspace(150, 400, 100)\ny = np.log(x)\n\n# Plot the data\nax.plot(x, y, color='black')\n\n# Add a shaded rectangle\nax.add_patch(plt.Rectangle((200, -3), 200, 1, color='gray', alpha=0.5))\n\n# Add scatter plots\nax.scatter([160, 180, 200], [-2, -3, -4], color='blue')\nax.scatter([220, 240, 260], [-3, -4, -5], color='orange')\nax.scatter([300, 320, 340], [-4, -5, -6], color='green')\n\n# Add text annotations\nax.text(150, -2, 'Low', color='blue')\nax.text(150, -3, 'Middle', color='orange')\nax.text(150, -4, 'High', color='green')\nax.text(350, -2, 'Severity', rotation=90)\nax.text(400, -3, 'Correlation: -0.47')\n\n# Set the limits and labels\nax.set_xlim(150, 400)\nax.set_ylim(-6, 0)\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data\nx = np.linspace(-3, 0, 100)\ny = np.log(x + 4)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Add a rectangle with a gradient fill\nrect = plt.Rectangle((0, -2), 1, 4, facecolor='lightgray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a line with a gradient fill\nline = plt.Line2D([0, 1], [-2, 2], color='black')\nax.add_line(line)\n\n# Set the limits of the axes\nax.set_xlim(-3, 0)\nax.set_ylim(-3, 0)\n\n# Set the labels of the axes\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000')\n\n# Set the x-axis label\nax.set_xlabel('Avg Top-5 Persistence of 1D')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the x-axis limits\nax.set_xlim(0.0, 0.8)\n\n# Set the y-axis limits\nax.set_ylim(0.0, 5.0)\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.4), 0.3, 0.2, color='green'))\n\n# Draw a polygon\nax.add_patch(plt.Polygon([[0.4, 0.2], [0.6, 0.4], [0.4, 0.6]], color='red'))\n\n# Draw a line\nax.plot([0.2, 0.4, 0.6], [0.4, 0.6, 0.4], 'k-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntasks = ['snacks', 'navigate', 'question_selection', 'object_counting']\nscores = [7.2, 7.5, 7.8, 7.9]\ncolors = ['blue', 'green', 'red', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nbars = ax.bar(tasks, scores, color=colors)\n\n# Add labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Add a legend\nlegend_labels = ['APO-trend', 'AOP-step1-APE', 'AOP-step2-APE', 'AOP-best', 'APO-Sum-best']\nlegend_colors = ['gray', 'lightblue', 'lightblue', 'darkgray', 'limegreen']\nfor i, label in enumerate(legend_labels):\n    bars[i].set_label(label)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Set the x-axis label\nax.set_xlabel('norm size')\n\n# Set the y-axis label\nax.set_ylabel('count')\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ny = [50, 70, 90, 110, 130, 150, 170, 190]\n\n# Plot the data\nax.plot(x, y)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Same', 'Different', 'Incomparable']\nsizes = [32, 4, 99]\ncolors = ['blue', 'orange', 'green']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Define the data for the bar chart\nbar_labels = ['English', 'German', 'Both']\nbar_sizes = [11.1, 44.4, 44.4]\nbar_colors = ['darkgreen', 'lightgreen', 'lightgreen']\n\n# Create a bar chart\nax2 = fig.add_axes([0.7, 0.15, 0.2, 0.7])\nax2.bar(bar_labels, bar_sizes, color=bar_colors)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the x-tick labels\nax.set_xticks([0, 1])\nax.set_xticklabels(['SEAC', 'SAC(20Hz)'])\n\n# Set the y-tick labels\nax.set_yticks([45, 46, 47, 48, 49, 50, 51, 52])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 45), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 45), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 46), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 46), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 47), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 47), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 48), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 48), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 49), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 49), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 50), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 50), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 51), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 51), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 52), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 52), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 45), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 45), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 46), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 46), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 47), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 47), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 48), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 48), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 49), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 49), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 50), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 50), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 51), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 51), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 52), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 52), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 45), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 45), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 46), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 46), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 47), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 47), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 48), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 48), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 49), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 49), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 50), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 50), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 51), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 51), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 52), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 52), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 45), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 45), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 46), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 46), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 47), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 47), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 48), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 48), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 49), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 49), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 50), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 50), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 51), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 51), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 52), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 52), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 45), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 45), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 46), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 46), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 47), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 47), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 48), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 48), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 49), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 49), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 50), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 50), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 51), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 51), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 52), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 52), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 45), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 45), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 46), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 46), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 47), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 47), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 48), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 48), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 49), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 49), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 50), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 50), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 51), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 51), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 52), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 52), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 45), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 45), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 46), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 46), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 47), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 47), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 48), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 48), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 49), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 49), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 50), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 50), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 51), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 51), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 52), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 52), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 45), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 45), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 46), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 46), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 47), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 47), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 48), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 48), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 49), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 49), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 50), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 50), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 51), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 51), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 52), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 52), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 45), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 45), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 46), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 46), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 47), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 47), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 48), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 48), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 49), 1, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 49), 1, 1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 50), 1, 1, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 50), 1, 1, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 51),"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny = [63.64, 80.08, 84.27, 90.11]\ncolors = ['blue', 'cyan', 'cyan', 'blue']\n\n# Data for the second graph\nx2 = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny2 = [75.00, 87.20, 88.12, 93.89]\ncolors2 = ['red', 'red', 'red', 'red']\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 4))\n\n# First graph\nax[0].bar(x, y, color=colors)\nax[0].set_title('Average Recall Scores by Method')\nax[0].set_xlabel('Method')\nax[0].set_ylabel('Scores')\n\n# Second graph\nax[1].bar(x2, y2, color=colors2)\nax[1].set_title('Average F1 Scores by Method')\nax[1].set_xlabel('Method')\nax[1].set_ylabel('Scores')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the x-axis limits\nax.set_xlim(4, 32)\n\n# Set the y-axis limits\nax.set_ylim(80, 96)\n\n# Set the x-axis label\nax.set_xlabel('Few-Shot K')\n\n# Set the y-axis label\nax.set_ylabel('Micro F1')\n\n# Set the title of the plot\nax.set_title('Performance of Few-Shot Learning Models')\n\n# Create a rectangle for the legend\nlegend_rect = plt.Rectangle((0, 0), 1, 1, fc='w', ec='k')\n\n# Add the legend to the plot\nax.legend([legend_rect], ['Legend'], loc='upper right')\n\n# Create a shaded rectangle\nshaded_rect = plt.Rectangle((0, 0), 1, 1, fc='#b0c4de', alpha=0.5)\n\n# Add the shaded rectangle to the plot\nax.add_patch(shaded_rect)\n\n# Create a vertical line\nvertical_line = plt.Line2D([4, 4], [80, 96], color='r', linestyle='--')\n\n# Add the vertical line to the plot\nax.add_line(vertical_line)\n\n# Create a horizontal line\nhorizontal_line = plt.Line2D([4, 32], [80, 80], color='r', linestyle='--')\n\n# Add the horizontal line to the plot\nax.add_line(horizontal_line)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [60, 62, 65, 70, 75]\ny = [60, 62, 65, 70, 75]\nlabels = ['Car A', 'Car B', 'Car C', 'Car D', 'Car E']\ncolors = ['red', 'blue']\n\n# Plot\nfig, ax = plt.subplots(figsize=(7, 7))\nax.plot(x, y, 'ro-')\nfor i, label in enumerate(labels):\n    ax.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=label, markerfacecolor=color, markersize=10)\n                  for label, color in zip(['Cars', 'Trucks'], colors)]\nax.legend(handles=legend_elements)\n\n# Title and labels\nax.set_title('80 Truck A')\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [0, 6, 16, 20, 26, 56]\ntrend = [0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\nax.bar(models, success_rates, color='lightgrey')\n\n# Add a line for the trend\nax.plot(models, trend, color='purple', linestyle='--')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Set the x-axis label\nax.set_xlabel('Reducted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw a horizontal line at y=0.5\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Draw a vertical line at x=0.5\nax.axvline(x=0.5, color='r', linestyle='-')\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.7), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.9), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.1), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.3), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.5), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.7), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.9), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.1), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.3), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.5), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.7), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.9), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.1), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.3), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.5), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.7), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.9), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.1), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.3), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.5), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.7), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.9), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.1), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.5), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.3), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.7), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.5), 0.3, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.4, 0.3), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.6, 0.1), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.8, 0.9), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.2, 0.7),"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the model\nmodel_rect = plt.Rectangle((-5, -1), 10, 2, color='blue')\nax.add_patch(model_rect)\n\n# Create a rectangle for the FOD-Net\nfodnet_rect = plt.Rectangle((-3, -1), 6, 2, color='orange')\nax.add_patch(fodnet_rect)\n\n# Create a rectangle for the SS3T\nss3t_rect = plt.Rectangle((-1, -1), 4, 2, color='green')\nax.add_patch(ss3t_rect)\n\n# Create a rectangle for the ACC\nacc_rect = plt.Rectangle((-3, -3), 6, 2, color='brown')\nax.add_patch(acc_rect)\n\n# Create a rectangle for the model\nmodel_rect = plt.Rectangle((-5, -5), 10, 2, color='blue')\nax.add_patch(model_rect)\n\n# Create a rectangle for the FOD-Net\nfodnet_rect = plt.Rectangle((-3, -5), 6, 2, color='orange')\nax.add_patch(fodnet_rect)\n\n# Create a rectangle for the SS3T\nss3t_rect = plt.Rectangle((-1, -5), 4, 2, color='green')\nax.add_patch(ss3t_rect)\n\n# Create a rectangle for the ACC\nacc_rect = plt.Rectangle((-3, -7), 6, 2, color='brown')\nax.add_patch(acc_rect)\n\n# Set the limits of the x-axis\nax.set_xlim(-6, 6)\n\n# Set the limits of the y-axis\nax.set_ylim(-8, 2)\n\n# Set the title of the plot\nax.set_title('Model')\n\n# Set the labels of the axes\nax.set_xlabel('ACC')\nax.set_ylabel('Model')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1340, 1360, 1380, 1420, 1440, 1460]\ny = [0.005, 0.015, 0.025, 0.035, 0.045, 0.055]\n\n# Plot 1: Total\nplt.figure(figsize=(10, 8))\nplt.plot(x, y, 'b-')\nplt.title('Total')\nplt.xlabel('Daily reward (Ether)')\nplt.ylabel('Probability')\n\n# Plot 2: Proposer\nplt.subplot(2, 2, 2)\nplt.bar([205, 210, 215], [0.125, 0.15, 0.175], color='r')\nplt.title('Proposer')\nplt.xlabel('Daily reward (Ether)')\nplt.ylabel('Probability')\n\n# Plot 3: Attestor\nplt.subplot(2, 2, 3)\nplt.bar([1340, 1360, 1380, 1420, 1440, 1460], [0.015, 0.025, 0.035, 0.045, 0.055, 0.065], color='g')\nplt.title('Attestor')\nplt.xlabel('Daily reward (Ether)')\nplt.ylabel('Probability')\n\n# Plot 4: Sync committee member\nplt.subplot(2, 2, 4)\nplt.bar([48, 49, 50, 51, 52], [0.06, 0.07, 0.08, 0.09, 0.1], color='y')\nplt.title('Sync committee member')\nplt.xlabel('Daily reward (Ether)')\nplt.ylabel('Probability')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntrainable_sizes = [0, 50, 100, 150]\nrmse_values = [1.30, 1.27, 1.28, 1.29]\ncolors = ['red', 'blue']\nlabels = ['LlaSMol Lite', 'LlaSMol FFN', 'LlaSMol Attn', 'LlaSMol Large']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the RMSE values\nfor i in range(len(trainable_sizes)):\n    ax.plot(trainable_sizes[i], rmse_values[i], color=colors[i % len(colors)], marker='o', label=labels[i])\n\n# Set the title and labels\nax.set_title('RMSE vs Trainable Parameter Size')\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 150)\n\n# Set the limits of the y-axis\nax.set_ylim(1.15, 1.35)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Execution Duration (clock)')\n\n# Set the x-axis label\nax.set_xlabel('Execution Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Distribution')\n\n# Set the x-axis limits\nax.set_xlim(40, 160)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.1)\n\n# Set the x-axis ticks\nax.set_xticks([40, 60, 80, 100, 120, 140, 160])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.05, 0.1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Distribution', color='blue')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title('Execution Duration (clock)', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Execution Duration (clock)', color='blue')\n\n# Set the color of the y-axis"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x20', '60x20']\ny = [18, 14, 13, 12, 9, 12, 10]\ncolors = ['green', 'orange', 'blue', 'purple', 'pink']\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\nax1.plot(x, y, 'r-')\nax1.set_xlabel('Instance size')\nax1.set_ylabel('Makespan (step)', color='red')\nax1.tick_params(axis='y', labelcolor='red')\n\nax2 = ax1.twinx()\nax2.bar(x, [500, 400, 300, 200, 100, 0, 0], color=colors)\nax2.set_ylabel('Improvement (%)', color='blue')\nax2.tick_params(axis='y', labelcolor='blue')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the x-axis limits\nax.set_xlim(-1, 4)\n\n# Set the y-axis limits\nax.set_ylim(0, 4)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['SEAC', 'CTCO'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4'])\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='#d3d3d3')\n\n# Set the font size of the grid lines\nax.grid(fontsize=10)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='#696969')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='#696969')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y',"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Time to Market')\n\n# Set the x-axis label\nax.set_xlabel('Brand')\n\n# Set the y-axis label\nax.set_ylabel('Time to Market (Days)')\n\n# Define the data\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\ntime_to_market = [85, 95, 75, 65]\n\n# Define the colors\ncolors = ['teal', 'orange', 'pink', 'blue']\n\n# Plot the data\nfor i, brand in enumerate(brands):\n    ax.plot(time_to_market[i], color=colors[i], marker='*')\n\n# Set the legend\nax.legend(['Adidas', 'Nike', 'New Balance', 'Our Brand'])\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Era')\n\n# Set the x-axis label\nax.set_xlabel('Density')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Define the data for the plot\ndata = {\n    'Early 20th Century': [0.005, 0.015, 0.025, 0.035],\n    'Mid 20th Century': [0.01, 0.02, 0.03, 0.04],\n    'Turn of the Century': [0.015, 0.025, 0.035, 0.045]\n}\n\n# Plot the data\nfor key, value in data.items():\n    ax.plot(value, range(1970, 1980), label=key)\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the background color of the plot\nax2.set_facecolor('lightgreen')\n\n# Set the title of the plot\nax2.set_title('Era')\n\n# Set the x-axis label\nax2.set_xlabel('Density')\n\n# Set the y-axis label\nax2.set_ylabel('Year')\n\n# Define the data for the plot\ndata2 = {\n    'Early 20th Century': [0.005, 0.015, 0.025, 0.035],\n    'Mid 20th Century': [0.01, 0.02, 0.03, 0.04],\n    'Turn of the Century': [0.015, 0.025, 0.035, 0.045]\n}\n\n# Plot the data\nfor key, value in data2.items():\n    ax2.plot(value, range(1970, 1980), label=key)\n\n# Add a legend\nax2.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ntech = ['Nano', 'Quantum', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\npatents_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\npatents_2022 = [90, 50, 150, 100, 180, 250, 300, 200, 400, 500]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.bar(tech, patents_2013, color='blue')\nax.bar(tech, patents_2022, color='red')\n\n# Add labels and title\nax.set_xlabel('Technology')\nax.set_ylabel('Number of Patents')\nax.set_title('Patent Filings in 2013')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Calibration Curve', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Predicted Probability', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives', fontsize=12)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\nax.set_yticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('grey')\nax.yaxis.label.set_color('grey')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', colors='grey')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='grey',"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings = [350, 300, 250, 200]\ngrowth = [70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the earnings data\ncolor = 'tab:blue'\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Earnings ($1000s)', color=color)\nax1.plot(quarters, earnings, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for growth\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Growth (%)', color=color)  \nax2.plot(quarters, growth, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a title and legend\nfig.tight_layout()\nplt.title('Earnings and Growth by Quarter')\nplt.legend(['Earnings', 'Growth'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ny = [72, 74, 76, 78, 80, 82]\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(x, y, marker='o', color='black')\nfor i, txt in enumerate(y):\n    ax.annotate(txt, (x[i], y[i]))\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Model Performance Metrics')\nax.set_yticks(range(70, 83, 2))\nax.set_xticks(x)\nax.grid(True)\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Train sec / img', markerfacecolor='blue', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Inference GFLOPs', markerfacecolor='orange', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Param, log10', markerfacecolor='green', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Train Memory', markerfacecolor='red', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Accuracy\naccuracy = 82\nax.text(0.95, accuracy, f'-{accuracy} - Accuracy', ha='right', va='center', transform=ax.transAxes, color='black')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('TM-score vs. Seq-ident')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Seq-ident')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw horizontal lines\nfor i in range(1, 10):\n    ax.axhline(i/10, color='blue', linestyle='--')\n\n# Draw vertical lines\nfor i in range(1, 10):\n    ax.axvline(i/10, color='blue', linestyle='--')\n\n# Draw scatter plots\nfor i in range(1, 10):\n    ax.scatter([i/10]*100, [j/10 for j in range(1, 10)], color='blue', s=5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Average Norm of Difference Vectors')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Set the x-axis limits\nax.set_xlim(25, 45)\n\n# Set the y-axis limits\nax.set_ylim(-10, 30)\n\n# Create a scatter plot with random data\nax.scatter([26, 27, 28, 29, 30], [10, 11, 12, 13, 14], color='red')\nax.scatter([26, 27, 28, 29, 30], [15, 16, 17, 18, 19], color='green')\nax.scatter([26, 27, 28, 29, 30], [20, 21, 22, 23, 24], color='blue')\n\n# Create a rectangle patch\nrect = plt.Rectangle((25, 25), 10, 10, color='red')\nax.add_patch(rect)\n\n# Create a circle patch\ncircle = plt.Circle((35, 35), 5, color='green')\nax.add_patch(circle)\n\n# Create a triangle patch\ntriangle = plt.Polygon([[30, 30], [35, 35], [40, 30]], color='blue')\nax.add_patch(triangle)\n\n# Create a bar chart\nax.bar([25, 30, 35], [10, 20, 30], color=['red', 'green', 'blue'])\n\n# Create a pie chart\nax.pie([10, 20, 30], colors=['red', 'green', 'blue'], startangle=90)\n\n# Create a histogram\nax.hist([10, 20, 30, 40, 50], bins=5, color='red')\n\n# Create a heatmap\nax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot')\n\n# Create a contour plot\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nCS = ax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Create a streamplot\nax.streamplot(X, Y, np.cos(X), np.sin(Y), color='red')\n\n# Create a quiver plot\nU = np.cos(X)\nV = np.sin(Y)\nax.quiver(X, Y, U, V, color='blue')\n\n# Create a polar plot\nax.polar([0, np.pi/2, np.pi, 3*np.pi/2], [1, 2, 3, 4], color='red')\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nax3d.plot_surface(X, Y, Z, cmap='viridis')\n\n# Create a colorbar\nfig.colorbar(CS)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 99.9, 96.0, 92.3, 90.9, 90.9, 92.5, 93.3, 93.3, 93.3, 98.7, 98.7, 98.7, 98.7, 98.7, 98.7]\n\n# Plot\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y, 'b-')\nplt.scatter(x, y, color='blue')\n\n# Labels\nplt.xlabel('HC_first (before aging)')\nplt.ylabel('HC_first (after aging)')\n\n# Title\nplt.title('HC_first over time')\n\n# Grid\nplt.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('TMScore vs Sequence ID')\n\n# Set the x-axis label\nax.set_xlabel('TMScore')\n\n# Set the y-axis label\nax.set_ylabel('Sequence ID')\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.6)\n\n# Draw a horizontal line at y=0.5\nax.axhline(y=0.5, color='black', linestyle='-')\n\n# Draw a vertical line at x=0.5\nax.axvline(x=0.5, color='black', linestyle='-')\n\n# Draw a rectangle with a blue fill\nax.add_patch(plt.Rectangle((0.3, 0.4), 0.2, 0.1, color='blue'))\n\n# Draw a rectangle with a red fill\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.2, 0.1, color='red'))\n\n# Draw a rectangle with a green fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.1, color='green'))\n\n# Draw a rectangle with a yellow fill\nax.add_patch(plt.Rectangle((0.9, 0.3), 0.2, 0.1, color='yellow'))\n\n# Draw a rectangle with a purple fill\nax.add_patch(plt.Rectangle((0.5, 0.1), 0.2, 0.1, color='purple'))\n\n# Draw a rectangle with a brown fill\nax.add_patch(plt.Rectangle((0.6, 0.4), 0.2, 0.1, color='brown'))\n\n# Draw a rectangle with a pink fill\nax.add_patch(plt.Rectangle((0.8, 0.2), 0.2, 0.1, color='pink'))\n\n# Draw a rectangle with a gray fill\nax.add_patch(plt.Rectangle((0.2, 0.3), 0.2, 0.1, color='gray'))\n\n# Draw a rectangle with a teal fill\nax.add_patch(plt.Rectangle((0.4, 0.5), 0.2, 0.1, color='teal'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.7, 0.1), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.9, 0.4), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.1, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.3, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.5, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.7, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.9, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.5, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.7, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.9, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.1, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.3, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.5, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.7, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.9, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.1, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.3, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.5, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.9, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.3, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.5, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.7, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.9, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.1, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.9, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.3, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.5, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.7, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.1, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.3, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.5, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.7, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.9, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.5, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.7, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.9, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.1, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.3, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.5, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.7, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.9, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.1, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.3, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.5, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.9, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.3, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.5, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.7, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.9, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.1, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.9, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.3, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.5, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.7, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.1, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.3, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.5, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.7, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.9, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.5, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.7, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.9, 0.1), 0.2, 0.1, color='olive'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.1, 0.4), 0.2, 0.1, color='fuchsia'))\n\n# Draw a rectangle with a aqua fill\nax.add_patch(plt.Rectangle((0.3, 0.2), 0.2, 0.1, color='aqua'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.5, 0.3), 0.2, 0.1, color='maroon'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.7, 0.5), 0.2, 0.1, color='navy'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.9, 0.2), 0.2, 0.1, color='silver'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.1, 0.4), 0.2, 0.1, color='lime'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [4211, 2411, 2141, 1124]\ny = [0.9628, 0.9604, 0.9624, 0.9592]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the title\nax.set_title('SRCC and PLCC values with their sum for different modes')\n\n# Set the x-axis label\nax.set_xlabel('Modes')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n# Set the color of the x-axis tick marks\nax.set_xticks([4211, 2411, 2141, 1124], color='blue')\n\n# Set the color of the y-axis tick marks\nax.set_yticks([0.9628, 0.9604, 0.9624, 0.9592], color='green')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='green')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['4211', '2411', '2141', '1124'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0.9628', '0.9604', '0.9624', '0.9592'], color='green')\n\n"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\n\"\"\"\nThis is a simple bar chart with three categories and three subcategories.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Client 1', 'Client 2', 'Client 3']\nsubcategories = ['Depth', 'Edge', 'Normals', 'Semseg']\nvalues = [\n    [176, 176, 176, 176],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars\nfor i, category in enumerate(categories):\n    for j, subcategory in enumerate(subcategories):\n        ax.bar(category, values[i][j], color='blue' if subcategory == 'Depth' else 'cyan' if subcategory == 'Edge' else 'green' if subcategory == 'Normals' else 'pink')\n\n# Set labels and title\nax.set_xlabel('Client')\nax.set_ylabel('Values')\nax.set_title('IIID-1 SDMT')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Compact Spiral with Elliptical Hollow Center')\n\n# Draw a circle\ncircle = plt.Circle((0, 0), 1, color='blue')\nax.add_artist(circle)\n\n# Draw concentric circles\nfor i in range(1, 10):\n    circle = plt.Circle((0, 0), i, color='blue', fill=False)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('w/o FMA')\n\n# Set the x-axis label\nax.set_xlabel('Flops/byte')\n\n# Set the y-axis label\nax.set_ylabel('Flows/s')\n\n# Set the x-axis limits\nax.set_xlim(10**-1, 10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**10, 10**12)\n\n# Set the x-axis ticks\nax.set_xticks([10**-1, 10**0, 10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**10, 10**11, 10**12])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^-1', '10^0', '10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^10', '10^11', '10^12'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75]\ny = [0.01, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(x, y, color='red')\n\n# Set the title and labels\nax.set_title('f(x) = 0.50')\nax.set_xlabel('x')\nax.set_ylabel('f(x)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the colors for the circles\ncolors = ['pink', 'orange', 'lightgreen']\n\n# Draw the circles\ncircle1 = plt.Circle((0.5, 0.5), 0.4, color=colors[0])\ncircle2 = plt.Circle((0.5, 0.5), 0.3, color=colors[1])\ncircle3 = plt.Circle((0.5, 0.5), 0.2, color=colors[2])\n\n# Add the circles to the plot\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('CigaR ChatRepair')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Qwen-VL-Max')\n\n# Create a color map for the levels\ncmap = plt.get_cmap('tab20')\n\n# Create a list of colors for each level\ncolors = [cmap(i) for i in range(10)]\n\n# Create a list of labels for each level\nlabels = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\n\n# Create a list of values for each level\nvalues = [10, 20, 30, 40, 50]\n\n# Create a bar chart for each level\nfor i, (label, value) in enumerate(zip(labels, values)):\n    ax.barh(label, value, color=colors[i])\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(-1, len(labels))\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Generate data\nx = np.logspace(1, 2, 100)\ny1 = 10**(-x**2 + 3*x - 2)\ny2 = 10**(-x**2 + 2*x - 1)\ny3 = 10**(-x**2 + x - 0.5)\n\n# Plot data\nax[0].plot(x, y1, 'p', color='purple')\nax[0].plot(x, y2, 'p', color='pink')\nax[0].plot(x, y3, 'p', color='orange')\nax[0].set_xscale('log')\nax[0].set_xlabel('Number of matvecs m')\nax[0].set_ylabel('Approximation error ||A - \\u03C3\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C2||\\u208F\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B\\u207A\\u207F\\u207B"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'En.QA', 'Retrive.PassKey']\nsizes = [30, 25, 20, 15, 10]\ncolors = ['lightgreen', 'lightskyblue', 'lavender', 'lightcoral', 'yellowgreen']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\nx = np.linspace(0, 140, 100)\ny1 = np.sin(x / 20)\ny2 = np.cos(x / 20)\ny3 = np.tan(x / 20)\n\n# Plot the data\nax.plot(x, y1, color='green')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 140)\n\n# Set the title and labels\nax.set_title('Sine, Cosine, and Tangent Functions')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Sample Number')\n\n# Set the y-axis label\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Define the data for the plot\nx = [0, 1, 2, 3, 4, 5, 6]\ny = [3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4]\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores = [28, 20, 10, 20, 28]\nplayer_a_scores = [35, 26, 20, 22, 30]\nplayer_b_scores = [20, 20, 10, 25, 28]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the scores\nax.bar(games, scores, color='green')\n\n# Add player A scores\nfor i, score in enumerate(player_a_scores):\n    ax.text(i, score + 1, f'Player A: {score}', ha='center', va='bottom')\n\n# Add player B scores\nfor i, score in enumerate(player_b_scores):\n    ax.text(i, score - 1, f'Player B: {score}', ha='center', va='top')\n\n# Set labels and title\nax.set_xlabel('Games')\nax.set_ylabel('Scores')\nax.set_title('Scores by number of game and players')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the first variable\nax.plot(np.linspace(-6, 6, 100), np.sin(np.linspace(-6, 6, 100)), color='red')\nax.plot(np.linspace(-6, 6, 100), np.cos(np.linspace(-6, 6, 100)), color='blue')\n\n# Plot the second variable\nax.plot(np.linspace(-6, 6, 100), np.tan(np.linspace(-6, 6, 100)), color='green')\nax.plot(np.linspace(-6, 6, 100), np.exp(np.linspace(-6, 6, 100)), color='yellow')\n\n# Add a colored rectangle\nax.add_patch(plt.Rectangle((-2, -2), 4, 4, color='black'))\n\n# Set the limits of the axes\nax.set_xlim(-6, 6)\nax.set_ylim(-6, 6)\n\n# Add a color bar\ncbar = fig.colorbar(ax.images[0], ax=ax, orientation='vertical')\ncbar.set_label('Time')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nstats = [\n    [5.7, 6.0, 5.1, 5.7],\n    [6.2, 6.0, 5.2, 6.2],\n    [7.5, 7.8, 7.6, 7.0],\n    [7.0, 6.9, 6.4, 3.1]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor i, team in enumerate(teams):\n    ax.barh(team, stats[i], color=plt.cm.tab20(i))\n\n# Set the title and labels\nax.set_title('Trustee Scenario')\nax.set_xlabel('Average Amount Sent ($)')\nax.set_ylabel('Team')\n\n# Add a horizontal line for each team\nfor i, team in enumerate(teams):\n    ax.axhline(y=i+0.5, color='r', linestyle='-')\n\n# Add a vertical line for each statistic\nfor i, stat in enumerate(stats[0]):\n    ax.axvline(x=stat, color='b', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['Athlete Jim', 'Athlete Bill']\ntimes = [120, 140]\ndistances = [100, 130]\nweather_impacts = [15, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the data\nax.bar(teams, times, color='green')\nax.bar(teams, distances, bottom=times, color='orange')\nax.bar(teams, weather_impacts, bottom=[t+d for t,d in zip(times, distances)], color='red')\n\n# Add labels and title\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Distance')\nax.set_title('Endurance Race Performance Analysis')\n\n# Add a rectangle to indicate the weather impact\nax.add_patch(plt.Rectangle((0.5, 160), 1, 10, color='black'))\n\n# Add a legend\nax.legend(['Running', 'Interrupted', 'Rest', 'Running2'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Comparative Distribution of Three Different Groups')\n\n# Create a bar chart\nax.bar([1, 2, 3], [4, 5, 6])\n\n# Create a scatter plot\nax.scatter([1, 2, 3], [4, 5, 6])\n\n# Create a histogram\nax.hist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Create a pie chart\nax.pie([1, 2, 3], labels=['A', 'B', 'C'])\n\n# Create a line plot\nax.plot([1, 2, 3], [4, 5, 6])\n\n# Create a box plot\nax.boxplot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Create a violin plot\nax.violinplot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Create a heatmap\nax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Create a contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a streamplot\nax.streamplot(X, Y, Z, Z)\n\n# Create a quiver plot\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.quiver(X, Y, U, V)\n\n# Create a polar plot\nax.polar()\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nax3d.plot_surface(X, Y, Z)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [-150, -120, -100, -75, -50, -35, -135]\ny = [350, 150, 100, 200, 75, 50, 25]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(x, y, 'r-')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Value ($)')\nax.set_title('Waterfall Chart')\n\n# Rectangle\nrect = plt.Rectangle((-150, 350), 100, 100, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the data\ncax = ax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Define the data for the heatmap\ndata = np.random.rand(10, 10)\n\n# Create a heatmap\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(im)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Set the x-axis and y-axis ticks\nax.set_xticks(np.arange(-4, 5, 1))\nax.set_yticks(np.arange(-4, 5, 1))\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [100, 200, 300, 400, 500, 600, 500, 400, 300, 200]\n\n# Data for the second graph\nx2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny2 = [150, 250, 350, 450, 550, 650, 550, 450, 350, 250]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(x1, y1, 'ro-')\nax.plot(x2, y2, 'bo-')\n\n# Set the title and labels\nax.set_title('Flickr30k')\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x(m)')\n\n# Set the y-axis label\nax.set_ylabel('y(m)')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Draw a red line\nax.plot([0, 25], [0, 30], 'r-')\n\n# Draw a blue circle\ncircle1 = plt.Circle((10, 10), 1, color='b')\nax.add_artist(circle1)\n\n# Draw a blue circle\ncircle2 = plt.Circle((15, 15), 1, color='b')\nax.add_artist(circle2)\n\n# Draw a blue circle\ncircle3 = plt.Circle((20, 20), 1, color='b')\nax.add_artist(circle3)\n\n# Draw a blue circle\ncircle4 = plt.Circle((25, 25), 1, color='b')\nax.add_artist(circle4)\n\n# Draw a blue circle\ncircle5 = plt.Circle((30, 30), 1, color='b')\nax.add_artist(circle5)\n\n# Draw a blue circle\ncircle6 = plt.Circle((35, 35), 1, color='b')\nax.add_artist(circle6)\n\n# Draw a blue circle\ncircle7 = plt.Circle((40, 40), 1, color='b')\nax.add_artist(circle7)\n\n# Draw a blue circle\ncircle8 = plt.Circle((45, 45), 1, color='b')\nax.add_artist(circle8)\n\n# Draw a blue circle\ncircle9 = plt.Circle((50, 50), 1, color='b')\nax.add_artist(circle9)\n\n# Draw a blue circle\ncircle10 = plt.Circle((55, 55), 1, color='b')\nax.add_artist(circle10)\n\n# Draw a blue circle\ncircle11 = plt.Circle((60, 60), 1, color='b')\nax.add_artist(circle11)\n\n# Draw a blue circle\ncircle12 = plt.Circle((65, 65), 1, color='b')\nax.add_artist(circle12)\n\n# Draw a blue circle\ncircle13 = plt.Circle((70, 70), 1, color='b')\nax.add_artist(circle13)\n\n# Draw a blue circle\ncircle14 = plt.Circle((75, 75), 1, color='b')\nax.add_artist(circle14)\n\n# Draw a blue circle\ncircle15 = plt.Circle((80, 80), 1, color='b')\nax.add_artist(circle15)\n\n# Draw a blue circle\ncircle16 = plt.Circle((85, 85), 1, color='b')\nax.add_artist(circle16)\n\n# Draw a blue circle\ncircle17 = plt.Circle((90, 90), 1, color='b')\nax.add_artist(circle17)\n\n# Draw a blue circle\ncircle18 = plt.Circle((95, 95), 1, color='b')\nax.add_artist(circle18)\n\n# Draw a blue circle\ncircle19 = plt.Circle((100, 100), 1, color='b')\nax.add_artist(circle19)\n\n# Draw a blue circle\ncircle20 = plt.Circle((105, 105), 1, color='b')\nax.add_artist(circle20)\n\n# Draw a blue circle\ncircle21 = plt.Circle((110, 110), 1, color='b')\nax.add_artist(circle21)\n\n# Draw a blue circle\ncircle22 = plt.Circle((115, 115), 1, color='b')\nax.add_artist(circle22)\n\n# Draw a blue circle\ncircle23 = plt.Circle((120, 120), 1, color='b')\nax.add_artist(circle23)\n\n# Draw a blue circle\ncircle24 = plt.Circle((125, 125), 1, color='b')\nax.add_artist(circle24)\n\n# Draw a blue circle\ncircle25 = plt.Circle((130, 130), 1, color='b')\nax.add_artist(circle25)\n\n# Draw a blue circle\ncircle26 = plt.Circle((135, 135), 1, color='b')\nax.add_artist(circle26)\n\n# Draw a blue circle\ncircle27 = plt.Circle((140, 140), 1, color='b')\nax.add_artist(circle27)\n\n# Draw a blue circle\ncircle28 = plt.Circle((145, 145), 1, color='b')\nax.add_artist(circle28)\n\n# Draw a blue circle\ncircle29 = plt.Circle((150, 150), 1, color='b')\nax.add_artist(circle29)\n\n# Draw a blue circle\ncircle30 = plt.Circle((155, 155), 1, color='b')\nax.add_artist(circle30)\n\n# Draw a blue circle\ncircle31 = plt.Circle((160, 160), 1, color='b')\nax.add_artist(circle31)\n\n# Draw a blue circle\ncircle32 = plt.Circle((165, 165), 1, color='b')\nax.add_artist(circle32)\n\n# Draw a blue circle\ncircle33 = plt.Circle((170, 170), 1, color='b')\nax.add_artist(circle33)\n\n# Draw a blue circle\ncircle34 = plt.Circle((175, 175), 1, color='b')\nax.add_artist(circle34)\n\n# Draw a blue circle\ncircle35 = plt.Circle((180, 180), 1, color='b')\nax.add_artist(circle35)\n\n# Draw a blue circle\ncircle36 = plt.Circle((185, 185), 1, color='b')\nax.add_artist(circle36)\n\n# Draw a blue circle\ncircle37 = plt.Circle((190, 190), 1, color='b')\nax.add_artist(circle37)\n\n# Draw a blue circle\ncircle38 = plt.Circle((195, 195), 1, color='b')\nax.add_artist(circle38)\n\n# Draw a blue circle\ncircle39 = plt.Circle((200, 200), 1, color='b')\nax.add_artist(circle39)\n\n# Draw a blue circle\ncircle40 = plt.Circle((205, 205), 1, color='b')\nax.add_artist(circle40)\n\n# Draw a blue circle\ncircle41 = plt.Circle((210, 210), 1, color='b')\nax.add_artist(circle41)\n\n# Draw a blue circle\ncircle42 = plt.Circle((215, 215), 1, color='b')\nax.add_artist(circle42)\n\n# Draw a blue circle\ncircle43 = plt.Circle((220, 220), 1, color='b')\nax.add_artist(circle43)\n\n# Draw a blue circle\ncircle44 = plt.Circle((225, 225), 1, color='b')\nax.add_artist(circle44)\n\n# Draw a blue circle\ncircle45 = plt.Circle((230, 230), 1, color='b')\nax.add_artist(circle45)\n\n# Draw a blue circle\ncircle46 = plt.Circle((235, 235), 1, color='b')\nax.add_artist(circle46)\n\n# Draw a blue circle\ncircle47 = plt.Circle((240, 240), 1, color='b')\nax.add_artist(circle47)\n\n# Draw a blue circle\ncircle48 = plt.Circle((245, 245), 1, color='b')\nax.add_artist(circle48)\n\n# Draw a blue circle\ncircle49 = plt.Circle((250, 250), 1, color='b')\nax.add_artist(circle49)\n\n# Draw a blue circle\ncircle50 = plt.Circle((255, 255), 1, color='b')\nax.add_artist(circle50)\n\n# Draw a blue circle\ncircle51 = plt.Circle((260, 260), 1, color='b')\nax.add_artist(circle51)\n\n# Draw a blue circle\ncircle52 = plt.Circle((265, 265), 1, color='b')\nax.add_artist(circle52)\n\n# Draw a blue circle\ncircle53 = plt.Circle((270, 270), 1, color='b')\nax.add_artist(circle53)\n\n# Draw a blue circle\ncircle54 = plt.Circle((275, 275), 1, color='b')\nax.add_artist(circle54)\n\n# Draw a blue circle\ncircle55 = plt.Circle((280, 280), 1, color='b')\nax.add_artist(circle55)\n\n# Draw a blue circle\ncircle56 = plt.Circle((285, 285), 1, color='b')\nax.add_artist(circle56)\n\n# Draw a blue circle\ncircle57 = plt.Circle((290, 290), 1, color='b')\nax.add_artist(circle57)\n\n# Draw a blue circle\ncircle58 = plt.Circle((295, 295), 1, color='b')\nax.add_artist(circle58)\n\n# Draw a blue circle\ncircle59 = plt.Circle((300, 300), 1, color='b')\nax.add_artist(circle59)\n\n# Draw a blue circle\ncircle60 = plt.Circle((305, 305), 1, color='b')\nax.add_artist(circle60)\n\n# Draw a blue circle\ncircle61 = plt.Circle((310, 310), 1, color='b')\nax.add_artist(circle61)\n\n# Draw a blue circle\ncircle62 = plt.Circle((315, 315), 1, color='b')\nax.add_artist(circle62)\n\n# Draw a blue circle\ncircle63 = plt.Circle((320, 320), 1, color='b')\nax.add_artist(circle63)\n\n# Draw a blue circle\ncircle64 = plt.Circle((325, 325), 1, color='b')\nax.add_artist(circle64)\n\n# Draw a blue circle\ncircle65 = plt.Circle((330, 330), 1, color='b')\nax.add_artist(circle65)\n\n# Draw a blue circle\ncircle66 = plt.Circle((335, 335), 1, color='b')\nax.add_artist(circle66)\n\n# Draw a blue circle\ncircle67 = plt.Circle((340, 340), 1, color='b')\nax.add_artist(circle67)\n\n# Draw a blue circle\ncircle68 = plt.Circle((345, 345), 1, color='b')\nax.add_artist(circle68)\n\n# Draw a blue circle\ncircle69 = plt.Circle((350, 350), 1, color='b')\nax.add_artist(circle69)\n\n# Draw a blue circle\ncircle70 = plt.Circle((355, 355), 1, color='b')\nax.add_artist(circle70)\n\n# Draw a blue circle\ncircle71 = plt.Circle((360, 360), 1, color='b')\nax.add_artist(circle71)\n\n# Draw a blue circle\ncircle72 = plt.Circle((365, 365), 1, color='b')\nax.add_artist(circle72)\n\n# Draw a blue circle\ncircle73 = plt.Circle((370, 370), 1, color='b')\nax.add_artist(circle73)\n\n# Draw a blue circle\ncircle74 = plt.Circle((375, 375), 1, color='b')\nax.add_artist(circle74)\n\n# Draw a blue circle\ncircle75 = plt.Circle((380, 380), 1, color='b')\nax.add_artist(circle75)\n\n# Draw a blue circle\ncircle76 = plt.Circle((385, 385), 1, color='b')\nax.add_artist(circle76)\n\n# Draw a blue circle\ncircle77 = plt.Circle((390, 390), 1, color='b')\nax.add_artist(circle77)\n\n# Draw a blue circle\ncircle78 = plt.Circle((395, 395), 1, color='b')\nax.add_artist(circle78)\n\n# Draw a blue circle\ncircle79 = plt.Circle((400, 400), 1, color='b')\nax.add_artist(circle79)\n\n# Draw a blue circle\ncircle80 = plt.Circle((405, 405), 1, color='b')\nax.add_artist(circle80)\n\n# Draw a blue circle\ncircle81 = plt.Circle((410, 410), 1, color='b')\nax.add_artist(circle81)\n\n# Draw a blue circle\ncircle82 = plt.Circle((415, 415), 1, color='b')\nax.add_artist(circle82)\n\n# Draw a blue circle\ncircle83 = plt.Circle((420, 420), 1, color='b')\nax.add_artist(circle83)\n\n# Draw a blue circle\ncircle84 = plt.Circle((425, 425), 1, color='b')\nax.add_artist(circle84)\n\n# Draw a blue circle\ncircle85 = plt.Circle((430, 430), 1, color='b')\nax.add_artist(circle85)\n\n# Draw a blue circle\ncircle86 = plt.Circle((435, 435), 1, color='b')\nax.add_artist(circle86)\n\n# Draw a blue circle\ncircle87 = plt.Circle((440, 440), 1, color='b')\nax.add_artist(circle87)\n\n# Draw a blue circle\ncircle88 = plt.Circle((445, 445), 1, color='b')\nax.add_artist(circle88)\n\n# Draw a blue circle\ncircle89 = plt.Circle((450, 450), 1, color='b')\nax.add_artist(circle89)\n\n# Draw a blue circle\ncircle90 = plt.Circle((455, 455), 1, color='b')\nax.add_artist(circle90)\n\n# Draw a blue circle\ncircle91 = plt.Circle((460, 460), 1, color='b')\nax.add_artist(circle91)\n\n# Draw a blue circle\ncircle92 = plt.Circle((465, 465), 1, color='b')\nax.add_artist(circle92)\n\n# Draw a blue circle\ncircle93 = plt.Circle((470, 470), 1, color='b')\nax.add_artist(circle93)\n\n# Draw a blue circle\ncircle94 = plt.Circle((475, 475), 1, color='b')\nax.add_artist(circle94)\n\n# Draw a blue circle\ncircle95 = plt.Circle((480, 480), 1, color='b')\nax.add_artist(circle95)\n\n# Draw a blue circle\ncircle96 = plt.Circle((485, 485), 1, color='b')\nax.add_artist(circle96)\n\n# Draw a blue circle\ncircle97 = plt.Circle((490, 490), 1, color='b')\nax.add_artist(circle97)\n\n# Draw a blue circle\ncircle98 = plt.Circle((495, 495), 1, color='b')\nax.add_artist(circle98)\n\n# Draw a blue circle\ncircle99 = plt.Circle((500, 500), 1, color='b')\nax.add_artist(circle99)\n\n# Draw a blue circle\ncircle100 = plt.Circle((505, 505), 1, color='b')\nax.add_artist(circle100)\n\n# Draw a blue circle\ncircle101 = plt.Circle((510, 510), 1, color='b')\nax.add_artist(circle101)\n\n# Draw a blue circle\ncircle102 = plt.Circle((515, 515), 1, color='b')\nax.add_artist(circle102)\n\n# Draw a blue circle\ncircle103 = plt.Circle((520, 520), 1, color='b')\nax.add_artist(circle103)\n\n# Draw a blue circle\ncircle104 = plt.Circle((525, 525), 1, color='b')\nax.add_artist(circle104)\n\n# Draw a blue circle\ncircle105 = plt.Circle((530, 530), 1, color='b')\nax.add_artist(circle105)\n\n# Draw a blue circle\ncircle106 = plt.Circle((535, 535), 1, color='b')\nax.add_artist(circle106)\n\n# Draw a blue circle\ncircle107 = plt.Circle((540, 540), 1, color='b')\nax.add_artist(circle107)\n\n# Draw a blue circle\ncircle108 = plt.Circle((545, 545), 1, color='b')\nax.add_artist(circle108)\n\n# Draw a blue circle\ncircle109 = plt.Circle((550, 550), 1, color='b')\nax.add_artist(circle109)\n\n# Draw a blue circle\ncircle110 = plt.Circle((555, 555), 1, color='b')\nax.add_artist(circle110)\n\n# Draw a blue circle\ncircle111 = plt.Circle((560, 56"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw a circle with blue dots\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle with blue dots\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.1, color='blue', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle with blue dots\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.9]], color='blue', fill=False)\nax.add_artist(triangle)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the color map for the plot\ncmap = 'coolwarm'\n\n# Create a grid of colored rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i*0.25, j*0.25), 0.25, 0.25, color=plt.cm.coolwarm(i/10)))\n\n# Draw a line on the plot\nax.plot([0, 10], [0, 10], 'g-')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the labels for the x and y axes\nax.set_xlabel('\u03b1')\nax.set_ylabel('\u03b2')\n\n# Set the title of the plot\nax.set_title('Heatmap of \u03b1 and \u03b2')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the utility distribution per topic\nax1.plot([0, 20, 40, 60, 80, 100], [0, -0.5, -1, -1.5, -1, 0], 'b-')\nax1.plot([0, 20, 40, 60, 80, 100], [-0.5, -1, -1.5, -1, 0, -0.5], 'g-')\nax1.plot([0, 20, 40, 60, 80, 100], [-1, -1.5, -1, 0, -0.5, -1], 'r-')\nax1.plot([0, 20, 40, 60, 80, 100], [-1.5, -1, 0, -0.5, -1, -1.5], 'm-')\n\n# Set the labels and title\nax1.set_xlabel('Users (U)')\nax1.set_ylabel('Utility (f)')\nax1.set_title('Utility distribution per topic')\n\n# Create a second subplot for the user preference matrix\nax2 = fig.add_subplot(1, 2, 2)\nax2.set_title('User preference matrix (M)')\n\n# Create a grid of colored dots for the user preference matrix\nfor i in range(10):\n    for j in range(10):\n        ax2.scatter(i, j, color='blue' if (i + j) % 2 == 0 else 'red')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data\nx = np.linspace(-2, 4, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Reactive-2 Payoff')\nax.set_xlabel('Reactive-2 Payoff')\nax.set_ylabel('Memory-2 Mutants Payoff')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 1, 1, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data for the first subplot\nx1 = np.linspace(0, 10, 100)\ny1 = np.sin(x1)\n\n# Define the data for the second subplot\nx2 = np.linspace(0, 10, 100)\ny2 = np.cos(x2)\n\n# Define the data for the third subplot\nx3 = np.linspace(0, 10, 100)\ny3 = np.tan(x3)\n\n# Plot the data\nax.plot(x1, y1, label='Model = Vicuna')\nax.plot(x2, y2, label='Model = Alpaca')\nax.plot(x3, y3, label='Model = Rule')\n\n# Add labels and title\nax.set_xlabel('Permeability Reduction')\nax.set_ylabel('Temperature')\nax.set_title('Model Performance')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Set the x-axis limits\nax.set_xlim(-40, 1)\n\n# Set the y-axis limits\nax.set_ylim(-5, 6)\n\n# Set the x-axis label\nax.set_xlabel('\u0394 Robust Accuracy (%)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Draw a rectangle with a blue border\nrectangle = plt.Rectangle((-30, -2), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a line with a gray color\nline = plt.Line2D([-30, -20], [-2, 2], color='gray')\nax.add_line(line)\n\n# Draw a rectangle with a green border\ngreen_rectangle = plt.Rectangle((-10, -2), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle)\n\n# Draw a rectangle with a red border\nred_rectangle = plt.Rectangle((0, -2), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle = plt.Rectangle((10, -2), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle)\n\n# Draw a rectangle with a purple border\npurple_rectangle = plt.Rectangle((20, -2), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle)\n\n# Draw a rectangle with a brown border\nbrown_rectangle = plt.Rectangle((30, -2), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle)\n\n# Draw a rectangle with a pink border\npink_rectangle = plt.Rectangle((40, -2), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle)\n\n# Draw a rectangle with a orange border\norange_rectangle = plt.Rectangle((-30, 2), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle)\n\n# Draw a rectangle with a green border\ngreen_rectangle_2 = plt.Rectangle((-20, 2), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_2)\n\n# Draw a rectangle with a blue border\nblue_rectangle = plt.Rectangle((-10, 2), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle)\n\n# Draw a rectangle with a red border\nred_rectangle_2 = plt.Rectangle((0, 2), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_2)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_2 = plt.Rectangle((10, 2), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_2)\n\n# Draw a rectangle with a purple border\npurple_rectangle_2 = plt.Rectangle((20, 2), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_2)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_2 = plt.Rectangle((30, 2), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_2)\n\n# Draw a rectangle with a pink border\npink_rectangle_2 = plt.Rectangle((40, 2), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_2)\n\n# Draw a rectangle with a orange border\norange_rectangle_2 = plt.Rectangle((-30, 4), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_2)\n\n# Draw a rectangle with a green border\ngreen_rectangle_3 = plt.Rectangle((-20, 4), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_3)\n\n# Draw a rectangle with a blue border\nblue_rectangle_2 = plt.Rectangle((-10, 4), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_2)\n\n# Draw a rectangle with a red border\nred_rectangle_3 = plt.Rectangle((0, 4), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_3)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_3 = plt.Rectangle((10, 4), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_3)\n\n# Draw a rectangle with a purple border\npurple_rectangle_3 = plt.Rectangle((20, 4), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_3)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_3 = plt.Rectangle((30, 4), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_3)\n\n# Draw a rectangle with a pink border\npink_rectangle_3 = plt.Rectangle((40, 4), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_3)\n\n# Draw a rectangle with a orange border\norange_rectangle_3 = plt.Rectangle((-30, 6), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_3)\n\n# Draw a rectangle with a green border\ngreen_rectangle_4 = plt.Rectangle((-20, 6), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_4)\n\n# Draw a rectangle with a blue border\nblue_rectangle_3 = plt.Rectangle((-10, 6), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_3)\n\n# Draw a rectangle with a red border\nred_rectangle_4 = plt.Rectangle((0, 6), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_4)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_4 = plt.Rectangle((10, 6), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_4)\n\n# Draw a rectangle with a purple border\npurple_rectangle_4 = plt.Rectangle((20, 6), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_4)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_4 = plt.Rectangle((30, 6), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_4)\n\n# Draw a rectangle with a pink border\npink_rectangle_4 = plt.Rectangle((40, 6), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_4)\n\n# Draw a rectangle with a orange border\norange_rectangle_4 = plt.Rectangle((-30, 8), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_4)\n\n# Draw a rectangle with a green border\ngreen_rectangle_5 = plt.Rectangle((-20, 8), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_5)\n\n# Draw a rectangle with a blue border\nblue_rectangle_4 = plt.Rectangle((-10, 8), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_4)\n\n# Draw a rectangle with a red border\nred_rectangle_5 = plt.Rectangle((0, 8), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_5)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_5 = plt.Rectangle((10, 8), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_5)\n\n# Draw a rectangle with a purple border\npurple_rectangle_5 = plt.Rectangle((20, 8), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_5)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_5 = plt.Rectangle((30, 8), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_5)\n\n# Draw a rectangle with a pink border\npink_rectangle_5 = plt.Rectangle((40, 8), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_5)\n\n# Draw a rectangle with a orange border\norange_rectangle_5 = plt.Rectangle((-30, 10), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_5)\n\n# Draw a rectangle with a green border\ngreen_rectangle_6 = plt.Rectangle((-20, 10), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_6)\n\n# Draw a rectangle with a blue border\nblue_rectangle_5 = plt.Rectangle((-10, 10), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_5)\n\n# Draw a rectangle with a red border\nred_rectangle_6 = plt.Rectangle((0, 10), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_6)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_6 = plt.Rectangle((10, 10), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_6)\n\n# Draw a rectangle with a purple border\npurple_rectangle_6 = plt.Rectangle((20, 10), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_6)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_6 = plt.Rectangle((30, 10), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_6)\n\n# Draw a rectangle with a pink border\npink_rectangle_6 = plt.Rectangle((40, 10), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_6)\n\n# Draw a rectangle with a orange border\norange_rectangle_6 = plt.Rectangle((-30, 12), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_6)\n\n# Draw a rectangle with a green border\ngreen_rectangle_7 = plt.Rectangle((-20, 12), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_7)\n\n# Draw a rectangle with a blue border\nblue_rectangle_6 = plt.Rectangle((-10, 12), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_6)\n\n# Draw a rectangle with a red border\nred_rectangle_7 = plt.Rectangle((0, 12), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_7)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_7 = plt.Rectangle((10, 12), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_7)\n\n# Draw a rectangle with a purple border\npurple_rectangle_7 = plt.Rectangle((20, 12), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_7)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_7 = plt.Rectangle((30, 12), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_7)\n\n# Draw a rectangle with a pink border\npink_rectangle_7 = plt.Rectangle((40, 12), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_7)\n\n# Draw a rectangle with a orange border\norange_rectangle_7 = plt.Rectangle((-30, 14), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_7)\n\n# Draw a rectangle with a green border\ngreen_rectangle_8 = plt.Rectangle((-20, 14), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_8)\n\n# Draw a rectangle with a blue border\nblue_rectangle_7 = plt.Rectangle((-10, 14), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_7)\n\n# Draw a rectangle with a red border\nred_rectangle_8 = plt.Rectangle((0, 14), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_8)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_8 = plt.Rectangle((10, 14), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_8)\n\n# Draw a rectangle with a purple border\npurple_rectangle_8 = plt.Rectangle((20, 14), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_8)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_8 = plt.Rectangle((30, 14), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_8)\n\n# Draw a rectangle with a pink border\npink_rectangle_8 = plt.Rectangle((40, 14), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_8)\n\n# Draw a rectangle with a orange border\norange_rectangle_8 = plt.Rectangle((-30, 16), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_8)\n\n# Draw a rectangle with a green border\ngreen_rectangle_9 = plt.Rectangle((-20, 16), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_9)\n\n# Draw a rectangle with a blue border\nblue_rectangle_8 = plt.Rectangle((-10, 16), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_8)\n\n# Draw a rectangle with a red border\nred_rectangle_9 = plt.Rectangle((0, 16), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_9)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_9 = plt.Rectangle((10, 16), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_9)\n\n# Draw a rectangle with a purple border\npurple_rectangle_9 = plt.Rectangle((20, 16), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_9)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_9 = plt.Rectangle((30, 16), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_9)\n\n# Draw a rectangle with a pink border\npink_rectangle_9 = plt.Rectangle((40, 16), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_9)\n\n# Draw a rectangle with a orange border\norange_rectangle_9 = plt.Rectangle((-30, 18), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_9)\n\n# Draw a rectangle with a green border\ngreen_rectangle_10 = plt.Rectangle((-20, 18), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_10)\n\n# Draw a rectangle with a blue border\nblue_rectangle_9 = plt.Rectangle((-10, 18), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_9)\n\n# Draw a rectangle with a red border\nred_rectangle_10 = plt.Rectangle((0, 18), 10, 4, linewidth=1, edgecolor='red', facecolor='"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Exponential Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Create a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot(["}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0]\ny = [200, 150, 100, 50, 20, 10, 5, 2, 1, 0.5, 0.25, 0.1, 0.05, 0.01]\n\n# Plot\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y, 'b-')\nplt.xlabel('Maximum Predicted Probability')\nplt.ylabel('Number of Examples')\nplt.title('Number of Examples vs Maximum Predicted Probability')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bias Score by Data Type and Model')\n\n# Set the x-axis label\nax.set_xlabel('Data Type')\n\n# Set the y-axis label\nax.set_ylabel('Bias Score')\n\n# Define the data\nx = ['BFloat16', 'INT8', 'INT4', 'INT2']\ny = [9.3, 9.2, 9.1, 9.0]\ncolors = ['red', 'blue', 'green', 'yellow']\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [y[i], 5], color=colors[i])\n\n# Add a rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='grey', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='green', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='yellow', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='purple', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='pink', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='brown', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='cyan', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='magenta', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='lime', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='silver', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gold', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navy', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='maroon', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='olive', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='teal', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='aqua', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='fuchsia', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='white', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='black', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gray', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='silver', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gold', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navy', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='maroon', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='olive', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='teal', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='aqua', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='fuchsia', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='white', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='black', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gray', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='silver', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gold', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navy', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='maroon', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='olive', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='teal', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='aqua', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='fuchsia', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='white', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='black', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gray', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='silver', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gold', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navy', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='maroon', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='olive', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='teal', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='aqua', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='fuchsia', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='white', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='black', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gray', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='silver', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gold', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navy', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='maroon', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='olive', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='teal', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='aqua', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='fuchsia', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='white', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='black', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gray', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='silver', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gold', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navy', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='maroon', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='olive', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='teal', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='aqua', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='fuchsia', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='white', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='black', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gray', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='silver', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gold', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navy', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='maroon', edgecolor='black')\nax.add_patch(rect)\n\n# Add a colored rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='olive', edgecolor"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.0, 0.2, 0.4, 0.6]\ny = [500, 300, 700, 900]\ncolors = ['blue', 'orange', 'red', 'green']\nlabels = ['Known', 'Unknown']\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(x, y, color=colors)\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\nax.set_title('Number of Examples by Maximum Predicted Probability')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=label, markerfacecolor=color, markersize=10) for color, label in zip(colors, labels)]\nax.legend(handles=legend_elements)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Empirical Lipschitz Constant')\n\n# Set the x-axis label\nax.set_xlabel('Width of Layer')\n\n# Set the y-axis label\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Set the x-ticks\nax.set_xticks([2**6, 2**7, 2**8, 2**9, 2**10, 2**11])\n\n# Set the y-ticks\nax.set_yticks(range(0, 20, 5))\n\n# Plot the data\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 200000, 300000, 400000, 500000, 600000], 'g-')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 200000, 300000, 400000, 500000, 600000], 'g^')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 200000, 300000, 400000, 500000, 600000], 'g*')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 200000, 300000, 400000, 500000, 600000], 'g+')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 200000, 300000, 400000, 500000, 600000], 'g.')\n\n# Add a legend\nax.legend(['Cos | n = 200', 'Cos | n = 400', 'ReLU | n = 200', 'ReLU | n = 400'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7500, 7000], 'b-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7500, 7000], 'r-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7500, 7000], 'g-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7500, 7000], 'm-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7500, 7000], 'c-')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Rewarded')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Rewarded')\n\n# Add a legend\nax.legend(['WI', 'ISQ', 'WIQL', 'Greedy'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='blue', label='WI')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='orange', label='ISQ')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Daytime Sunny')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the x-axis limits\nax.set_xlim(-4, 4)\n\n# Set the y-axis limits\nax.set_ylim(-4, 4)\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the scatter plot\nax.scatter([1, 2, 3], [4, 5, 6], color='red')\n\n# Add a rectangle\nrectangle = plt.Rectangle((-1, -1), 2, 2, color='blue')\nax.add_patch(rectangle)\n\n# Add a text box\ntext_box = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(text_box)\n\n# Set the limits of the axes\nax.set_xlim(-8, 8)\nax.set_ylim(-8, 8)\n\n# Set the labels of the axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Sales Data', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Sales', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 50, 100, 150, 200])\nax.set_xticklabels(['10K', '50K', '100K', '150K', '200K'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 10, 20, 30, 40])\nax.set_yticklabels(['0', '10', '20', '30', '40'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the colors of the grid lines\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the colors of the tick marks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the colors of the tick labels\nax.tick_params(axis='x', labelcolor='black')\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['right'].set_linestyle('-')\nax.spines['left'].set_linestyle('-')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['top'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Set the colors of the plot elements\nax.spines['bottom'].set_linestyle('-')\nax.spines['top'].set_linestyle('-')\nax.spines['"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x-axis limits\nax.set_xlim(0, 3)\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis label\nax.set_xlabel('Time step')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the title\nax.set_title('Plot')\n\n# Set the grid\nax.grid(True)\n\n# Set the legend\nax.legend(['GT', 'DRS', 'PR-based'])\n\n# Set the colors\ncolors = ['green', 'blue', 'red']\n\n# Set the markers\nmarkers = ['o', 's', '^']\n\n# Plot the data\nfor i, color in enumerate(colors):\n    ax.plot(range(4), [i * 10 + 10] * 4, color=color, marker=markers[i], linestyle='-', linewidth=2, markersize=8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.53, 0.76)\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-axis ticks\nax.set_yticks([0.55, 0.60, 0.65, 0.70, 0.75])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '20', '40', '60', '80'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.55', '0.60', '0.65', '0.70', '0.75'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ny_content = [1, 2, 3, 4, 5, 4, 3, 2, 1]\ny_organization = [2, 3, 4, 5, 6, 5, 4, 3, 2]\ny_language = [3, 4, 5, 6, 7, 6, 5, 4, 3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y_content, label='Content', color='blue')\nax.plot(x, y_organization, label='Organization', color='orange')\nax.plot(x, y_language, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [300, 350, 400, 450, 500, 550, 600]\namericas = [200, 250, 300, 350, 400, 450, 500]\nasia = [100, 150, 200, 250, 300, 350, 400]\neurope = [500, 550, 600, 650, 700, 750, 800]\noceania = [100, 150, 200, 250, 300, 350, 400]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, africa, label='Africa', color='lightgreen')\nax.plot(years, americas, label='Americas', color='yellow')\nax.plot(years, asia, label='Asia', color='darkred')\nax.plot(years, europe, label='Europe', color='orange')\nax.plot(years, oceania, label='Oceania', color='lightblue')\n\n# Set the title and labels\nax.set_title('World Population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = [0, 20, 40]\ny = [0.6, 0.3, 0.1]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('Scores')\nplt.xlabel('Time')\nplt.ylabel('Score')\n\n# Set the x-axis limits\nplt.xlim(0, 60)\n\n# Set the y-axis limits\nplt.ylim(0, 7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracies = [55, 45, 35, 25, 15, 50, 40, 30, 20, 10]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nplt.bar(categories, accuracies, color='skyblue')\n\n# Set the title and labels\nplt.title('Model Accuracy by Category')\nplt.xlabel('Category')\nplt.ylabel('Accuracy (%)')\n\n# Rotate the category labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nproducts_region_1 = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales_region_1 = [70, 80, 60, 90, 50]\n\n# Data for the second bar chart\nproducts_region_2 = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales_region_2 = [80, 70, 90, 60, 40]\n\n# Data for the third bar chart\nproducts_region_3 = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales_region_3 = [90, 60, 80, 70, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Plot the first bar chart\nax.bar(products_region_1, sales_region_1, color='green')\nax.set_title('Region 1 Sales')\n\n# Plot the second bar chart\nax.bar(products_region_2, sales_region_2, color='blue')\nax.set_title('Region 2 Sales')\n\n# Plot the third bar chart\nax.bar(products_region_3, sales_region_3, color='red')\nax.set_title('Region 3 Sales')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlengths = [0.9, 10.19, 20.29, 30.39, 40.49]\nspearmans = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a bar chart\nplt.bar(lengths, spearmans, color='blue')\n\n# Set the title and labels\nplt.title('Spearman Correlation by Length')\nplt.xlabel('Length')\nplt.ylabel('Spearman')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nvalues = [2.2, 2.4, 2.4, 19.9, 14.3]\n\n# Data for the second bar chart\ncategories2 = ['MovieLens-1M']\nvalues2 = [3.0, 5.1, 4.1, 3.1, 2.9, 2.9, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0,"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\ncolors = ['blue', 'orange', 'green', 'brown', 'yellow']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nfor i in range(len(models)):\n    ax.bar(models[i], improvement[i], color=colors[i % len(colors)])\n\n# Set title and labels\nax.set_title('ENDEFRRITES sampled')\nax.set_xlabel('Model')\nax.set_ylabel('Improve [%]')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nf1_scores = [0.82, 0.84, 0.83, 0.86, 0.85, 0.89]\nllm_mis = [0.78, 0.80, 0.79, 0.82, 0.81, 0.83]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the data\nax.barh(pheme, f1_scores, color='blue')\nax.set_xlabel('F1-score')\n\n# Add a horizontal line for each pheme\nfor i, p in enumerate(pheme):\n    ax.axhline(y=i, color='gray', linestyle='-')\n\n# Set the title\nax.set_title('Pheme F1-score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bars\nx = [1, 2, 3, 4, 5, 6]\ny = [20, 30, 40, 50, 40, 30]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('Human Labeling and Agreement Bias Checking')\nplt.xlabel('Human Annotator')\nplt.ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ncolors1 = ['blue', 'yellow', 'red']\nlabels1 = ['O', 'T', 'P']\n\n# Data for the second plot\nx2 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny2 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ncolors2 = ['blue', 'yellow', 'red']\nlabels2 = ['O', 'T', 'P']\n\n# Create the first plot\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\nax1.bar(x1, y1, color=colors1)\nax1.set_xlabel('Count')\nax1.set_ylabel('Role')\nax1.set_title('Resonance Preference Plot for rich-context')\n\n# Create the second plot\nfig, ax2 = plt.subplots(figsize=(8.0, 6.0))\nax2.bar(x2, y2, color=colors2)\nax2.set_xlabel('Count')\nax2.set_ylabel('Role')\nax2.set_title('Resonance Preference Plot for rich-context')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winogrande', 'Average']\naccuracies = [53.0, 51.3, 56.4, 73.1, 53.8]\ncolors = ['skyblue', 'lightblue', 'lightgreen', 'salmon', 'pink']\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 4.0))\nbars = plt.bar(tasks, accuracies, color=colors)\n\n# Add labels and title\nplt.xlabel('Tasks')\nplt.ylabel('Accuracy (%)')\nplt.title('Task Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(0, 7)\n\n# Set the y-axis limits\nax.set_ylim(35, 75)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['M=3', 'M=4', 'M=5', 'M=6', 'M=7', 'M=8', 'M=9'])\n\n# Set the y-axis ticks\nax.set_yticks([40, 50, 60, 70])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['40', '50', '60', '70'])\n\n# Set the title of the plot\nax.set_title('Performance')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmatches = [\n    \"DLMA-7B VS. LLAMA-7B\", \n    \"DLMA-7B VS. CD-7B\", \n    \"DLMA-7B VS. RLAIF-7B\", \n    \"DLMA-7B VS. RLCD-7B\", \n    \"DLMA-13B VS. LLAMA-13B\", \n    \"DLMA-13B VS. CD-13B\", \n    \"DLMA-13B VS. RLAIF-13B\", \n    \"DLMA-13B VS. RLCD-13B\"\n]\nwin_rates = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\ntie_rates = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\nloss_rates = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(matches, win_rates, color='green', label='DLMA win')\nax.bar(matches, tie_rates, bottom=win_rates, color='blue', label='Tie')\nax.bar(matches, loss_rates, bottom=[x+y for x,y in zip(win_rates, tie_rates)], color='red', label='DLMA lose')\n\n# Set the title and labels\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)')\nax.set_xlabel('Matches')\nax.set_ylabel('Win Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntime = [0, 10, 20, 30, 40]\ngait = [0.5, 0.7, 0.8, 0.9, 0.95]\ntrot = [0.1, 0.2, 0.3, 0.4, 0.5]\npace = [0.2, 0.3, 0.4, 0.5, 0.6]\nbound = [0.3, 0.4, 0.5, 0.6, 0.7]\npronk = [0.4, 0.5, 0.6, 0.7, 0.8]\ntransition = [0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(time, gait, label='gait')\nax.bar(time, trot, color='green', alpha=0.5, label='trot')\nax.bar(time, pace, color='red', alpha=0.5, label='pace')\nax.bar(time, bound, color='purple', alpha=0.5, label='bound')\nax.bar(time, pronk, color='brown', alpha=0.5, label='pronk')\nax.bar(time, transition, color='gray', alpha=0.5, label='transition')\n\n# Labels and Title\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nwins = [68, 82, 68, 72, 68]\ntie = [24, 15, 22, 19, 23]\nag_kl = [8, 3, 10, 9, 9]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbars = ax.bar(brands, wins, color='blue')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Wins')\nax.set_title('Brand Performance')\n\n# Add text for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Add a legend\nax.legend(['AP-1kL wins', 'Tie', 'AG-1k wins'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nbenefits = [14.8, 29.6, 9.4, 24.1]\nreliability = [18.5, 27.8, 33.3, 16.7]\nsecurity = [8.3, 40.7, 38.1, 20.4]\nprivacy = [9.3, 33.3, 38.1, 14.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(categories, benefits, color='red')\nax.bar(categories, reliability, bottom=benefits, color='orange')\nax.bar(categories, security, bottom=[sum(x) for x in zip(benefits, reliability)], color='grey')\nax.bar(categories, privacy, bottom=[sum(x) for x in zip(benefits, reliability, security)], color='blue')\n\n# Set the title and labels\nax.set_title('Eye Movement')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny1 = [-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]\ny2 = [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]\ny3 = [-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25]\nx2 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny4 = [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]\ny5 = [-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30]\nx3 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny6 = [-25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35]\ny7 = [-30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40]\nx4 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny8 = [-40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50]\ny9 = [-45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55]\nx5 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny10 = [-50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60]\ny11 = [-55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Ours')\nax.plot(x, y2, color='lightblue', label='Saliency-based Sampling')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change (%)')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(2, 1, 2)\n\n# Plot the data\nax2.plot(x2, y4, color='blue', label='Ours')\nax2.plot(x2, y5, color='lightblue', label='Saliency-based Sampling')\n\n# Set the title and labels\nax2.set_title('Rate of Gain Change (%)')\nax2.set_xlabel('Scale')\nax2.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax2.legend()\n\n# Create a third subplot\nax3 = fig.add_subplot(2, 1, 3)\n\n# Plot the data\nax3.plot(x3, y6, color='blue', label='Ours')\nax3.plot(x3, y7, color='lightblue', label='Saliency-based Sampling')\n\n# Set the title and labels\nax3.set_title('Rate of Gain Change (%)')\nax3.set_xlabel('Rotation Angle (\u00b0)')\nax3.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax3.legend()\n\n# Create a fourth subplot\nax4 = fig.add_subplot(2, 1, 4)\n\n# Plot the data\nax4.plot(x4, y8, color='blue', label='Ours')\nax4.plot(x4, y9, color='lightblue', label='Saliency-based Sampling')\n\n# Set the title and labels\nax4.set_title('Rate of Gain Change (%)')\nax4.set_xlabel('Brightness')\nax4.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax4.legend()\n\n# Create a fifth subplot\nax5 = fig.add_subplot(2, 1, 5)\n\n# Plot the data\nax5.plot(x5, y10, color='blue', label='Ours')\nax5.plot(x5, y11, color='lightblue', label='Saliency-based Sampling')\n\n# Set the title and labels\nax5.set_title('Rate of Gain Change (%)')\nax5.set_xlabel('Scale')\nax5.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax5.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 3.1, 3.0, 3.1, 3.3, 3.2]\ncompleteness = [3.0, 2.8, 2.7, 2.6, 2.9, 2.8]\nconciseness = [2.9, 2.7, 2.6, 2.5, 2.8, 2.7]\nreadability = [2.8, 2.6, 2.5, 2.4, 2.7, 2.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot bars\nax.bar(models, accuracy, color='blue', label='Accuracy')\nax.bar(models, completeness, bottom=accuracy, color='orange', label='Completeness')\nax.bar(models, conciseness, bottom=[a + c for a, c in zip(accuracy, completeness)], color='red', label='Conciseness')\nax.bar(models, readability, bottom=[a + c + co for a, c, co in zip(accuracy, completeness, conciseness)], color='teal', label='Readability')\n\n# Set labels and title\nax.set_xlabel('Language Models')\nax.set_ylabel('Ratings')\nax.set_title('Ratings of Language Models on a Scale from 1-4')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nplt.bar(models, accuracies, color='green')\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\nplt.title('Model Accuracy')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\n\"\"\"\n=====================================\nGPT-4 as a judge for drug efficacy\n=====================================\n\nThis example demonstrates how to create a bar chart with multiple bars for each category.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndrugs = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nefficacy = [78.8, 67.4, 44.2]\nlosses = [11.7, 18.1, 21.9]\nlongest_wins = [9.5, 14.5, 33.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(drugs))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create the bar chart\nax.bar(r1, efficacy, color='tab:blue', width=bar_width, edgecolor='grey', label='Efficacy')\nax.bar(r2, losses, color='tab:orange', width=bar_width, edgecolor='grey', label='Losses')\nax.bar(r3, longest_wins, color='tab:green', width=bar_width, edgecolor='grey', label='Longest wins')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Drugs')\nax.set_ylabel('Values')\nax.set_title('GPT-4 as a judge for drug efficacy')\nax.set_xticks([r + bar_width for r in range(len(drugs))])\nax.set_xticklabels(drugs)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Ang', 'Cn', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nvalues = [320, 150, 70, 100, 200, 350, 180, 90]\n\n# Create a bar chart\nplt.figure(figsize=(6, 4))\nplt.bar(emotions, values, color='red')\n\n# Add labels and title\nplt.xlabel('Emotions')\nplt.ylabel('Values')\nplt.title('Emotion Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\n\"\"\"\n=====================================\nBar chart with colored rectangles\n=====================================\n\nThis example demonstrates how to create a bar chart with colored rectangles.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Success', 'Occupancy Error', 'Grounding Error', 'Gripper collision', 'Grasping failed']\nvalues = [0.7, 0.5, 0.4, 0.3, 0.2]\ncolors = ['green', 'orange', 'gray', 'yellow', 'purple']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the bars\nbars = ax.bar(categories, values, color=colors)\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar chart with colored rectangles')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Transmission Delay (ms)')\n\n# Set the x-axis label\nax.set_xlabel('Datasets')\n\n# Set the y-axis label\nax.set_ylabel('Transmission Delay (ms)')\n\n# Define the data for the bar chart\nx = ['VOC 2012', 'COCO 2017']\ny = [3.5, 2.5]\n\n# Create a bar chart with the data\nax.bar(x, y, color='lightgray')\n\n# Add a legend to the plot\nax.legend(['JPEG', 'DEEPJSCC w/ ofdm', 'OURS'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('PDEs')\n\n# Set the x-axis label\nax.set_xlabel('log L2')\n\n# Set the y-axis label\nax.set_ylabel('log L2')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels(['Wave', 'Diffusion', 'Heat', 'Poison', 'N-S'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([1, 2, 3, 4])\nax.set_yticklabels(['1e-1', '1e-2', '1e-3', '1e-4'])\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0])\n\n# Set the color bar label\ncbar.set_label('RBF-INT RBF-POL RBF-COM')\n\n# Set the color bar ticks\ncbar.set_ticks([0, 1, 2, 3])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'])\n\n# Set the color bar orientation\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar position\ncbar.ax.set_position([0.8, 0.1, 0.05, 0.8])\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT RBF-POL RBF-COM', rotation=90)\n\n# Set"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_values = [0.975, 0.975, 0.975, 0.975]\nsroi_values = [0.975, 0.975, 0.975, 0.975]\nt2013_values = [0.975, 0.975, 0.975, 0.975]\nlive_m_values = [0.955, 0.955, 0.955, 0.955]\nsrocc_values = [0.955, 0.955, 0.955, 0.955]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot bars for each model\nax.bar(models, live_values, color='blue', label='Live')\nax.bar(models, sroi_values, bottom=live_values, color='orange', label='SROI')\nax.bar(models, t2013_values, bottom=[x + y for x, y in zip(live_values, sroi_values)], color='tan', label='TID2013')\nax.bar(models, live_m_values, bottom=[x + y + z for x, y, z in zip(live_values, sroi_values, t2013_values)], color='cyan', label='Live-M')\nax.bar(models, srocc_values, bottom=[x + y + z + w for x, y, z, w in zip(live_values, sroi_values, t2013_values, live_m_values)], color='gold', label='SROCC')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Metric Values')\nax.set_title('Models')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\none_pass_rates = [6.11, 28.33, 31.11, 44.44, 56.11, 85.0, 60.56, 60.56, 99.44]\ncolors = ['red', 'blue', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(products, one_pass_rates, color=colors)\n\n# Set the title and labels\nax.set_title('One Pass Rate (%)')\nax.set_xlabel('Product')\nax.set_ylabel('One Pass Rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_percentages = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_percentages = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_percentages = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for win percentages\nax.bar(categories, win_percentages, color='skyblue', label='Win')\n\n# Plot bars for tie percentages\nax.bar(categories, tie_percentages, bottom=win_percentages, color='lightgreen', label='Tie')\n\n# Plot bars for loss percentages\nax.bar(categories, loss_percentages, bottom=[x + y for x, y in zip(win_percentages, tie_percentages)], color='salmon', label='Loss')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Win, Tie, and Loss Percentages')\nax.legend()\n\n# Set x-axis limits\nax.set_xlim(0, len(categories))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nspecies = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nprobabilities = [0.72, 0.74, 0.56]\n\n# Create bar chart\nplt.figure(figsize=(6.0, 2.0))\nplt.bar(species, probabilities, color='blue')\nplt.xlabel('Species')\nplt.ylabel('Probability of Improvement')\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 48.1, 100.0, 91.7]\nfollowing_error_rate = [10.0, 10.0, 10.0, 100.0, 100.0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(steps, avg_following_rate, color='gray', label='Avg. Following Rate')\nax.bar(steps, following_error_rate, bottom=avg_following_rate, color='green', label='Following-related Error Rate')\n\n# Set the title and labels\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('RegOpt')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 101, 20))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 101, 20))\n\n# Set the x-axis grid\nax.grid(True)\n\n# Set the y-axis grid\nax.yaxis.grid(True)\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '20', '40', '60', '80', '100'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='minor', labelsize=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='minor', labelsize=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=1)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=1)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', label"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Random', 'Uniform', 'G2S', 'S2G', 'ClusterClip']\nscores = [6.57, 6.75, 6.81, 7.08, 6.9]\nbench_scores = [5.52, 5.53, 5.83, 5.84, 5.5]\n\n# Create a bar chart\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\n\ncolor = 'tab:blue'\nax1.set_xlabel('Model')\nax1.set_ylabel('MT-Bench Score', color=color)\nax1.bar(models, bench_scores, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:red'\nax2.set_ylabel('Mistral Score', color=color)  # we already handled the x-label with ax1\nax2.bar(models, scores, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 1000]\ny = [49.98, 49.63]\ncolors = ['blue', 'blue']\nwidths = [50, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot the bars\nfor i in range(len(x)):\n    ax.bar(x[i], y[i], color=colors[i], width=widths[i])\n\n# Set the title and labels\nax.set_title('Random Sampling')\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\n\n# Add a horizontal line at the mean of the y values\nmean_y = sum(y) / len(y)\nax.axhline(mean_y, color='green', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['ResNet18', 'AlexNet', 'ResNet50']\nperturbations = [0, 50, 48, 75, 68, 87.5, 78]\nspeedups = [1.0, 1.8, 2.6, 3.3, 4.6, 4.5, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4,"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\naccuracies = [45, 55, 50, 65, 60, 55]\ncolors = ['lightgreen', 'skyblue', 'salmon', 'lightgreen', 'skyblue', 'lightgreen']\n\n# Create a bar chart\nplt.figure(figsize=(7, 5))\nplt.bar(models, accuracies, color=colors)\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\nplt.title('LeetCode, DS-6.7b')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nrecosts = [53, 80, 116, 99, 179]\nties = [6, 33, 49, 50, 179]\nalpacas = [21, 67, 53, 103, 98]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.2\nindex = range(len(games))\n\n# Plot bars for each game\nax.bar([i - bar_width for i in index], recosts, bar_width, label='Recost (1% wins)', color='#FF4500')\nax.bar(index, ties, bar_width, label='Tie', color='#FFD700')\nax.bar([i + bar_width for i in index], alpacas, bar_width, label='Alpaca wins', color='#ADD8E6')\n\n# Set labels and title\nax.set_xlabel('Games')\nax.set_ylabel('Wins')\nax.set_title('Game Wins by Category')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+']\nfpr_values = [35.15, 26.86, 26.86, 26.86, 58.99, 62.94, 66.19, 66.19]\naggregations = ['Non-Aggregate', 'Aggregate']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the FPR values\nfor i, brand in enumerate(brands):\n    ax.barh(brand, fpr_values[i], color='lightgreen' if i % 2 == 0 else 'lightcoral')\n\n# Add a horizontal line to separate the brands\nax.axhline(y=30, color='gray', linestyle='-')\n\n# Add a vertical line to separate the aggregations\nax.axvline(x=40, color='red', linestyle='-')\n\n# Set the title\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\n\n# Set the x-axis label\nax.set_xlabel('FPR@90TPR')\n\n# Set the y-axis label\nax.set_ylabel('Brands')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50]\n\n# Create bar chart\nplt.figure(figsize=(10, 5))\nplt.bar(categories, values, color='blue')\nplt.xlabel('Semantic Category')\nplt.ylabel('Difference (%)')\nplt.title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nplt.xticks(rotation=90)\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [5, 10, 20]\ny1 = [66.3, 61.9, 53.8]\ny2 = [10.1, 13.6, 13.7]\ny3 = [49.3, 45.7, 41.6]\ny4 = [36.3, 31.5, 0]\ny5 = [48.0, 42.6, 36.5]\ny6 = [43.8, 40.2, 30.6]\ny7 = [22.3, 25.9, 22.5]\ny8 = [64.7, 59.6, 43.4]\ny9 = [49.5, 40.5, 36.8]\ny10 = [43.8, 40.2, 30.6]\ny11 = [22.3, 25.9, 22.5]\ny12 = [64.7, 59.6, 43.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='Truthful: Misleading = 2:0')\nax.plot(x, y2, label='Truthful: Misleading = 2:1')\nax.plot(x, y3, label='Truthful: Misleading = 2:2')\nax.plot(x, y4, label='Misleading: Misleading = 2:0')\nax.plot(x, y5, label='Misleading: Misleading = 2:1')\nax.plot(x, y6, label='Misleading: Misleading = 2:2')\nax.plot(x, y7, label='Misleading: Misleading = 1:2')\nax.plot(x, y8, label='Misleading: Misleading = 0:2')\nax.plot(x, y9, label='Misleading: Misleading = 1:2')\nax.plot(x, y10, label='Misleading: Misleading = 0:2')\nax.plot(x, y11, label='Misleading: Misleading = 1:2')\nax.plot(x, y12, label='Misleading: Misleading = 0:2')\n\n# Set the limits of the axes\nax.set_xlim(0, 25)\nax.set_ylim(-80, 80)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SciQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', '"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'MedMCQA': [48.1, 57.2, 59.3, 64.9, 72.3, 79.1],\n    'MedQA (USMLE)': [56.0, 62.2, 64.4, 64.4, 67.6, 86.5],\n    'PubMed QA': [74.4, 75.8, 76.8, 77.4, 79.0, 82.0],\n    'GEMM Pro': [70.7, 75.8, 76.8, 77.4, 79.0, 82.0]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, color='brown', alpha=0.7)\n    ax.text(max(values) + 1, i, key, va='center')\n\n# Set the limits and labels\nax.set_xlim(0, 100)\nax.set_yticks(range(len(data)))\nax.set_yticklabels(list(data.keys()))\nax.set_xlabel('Performance Score (%)')\nax.set_title('Performance Scores by Subject')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFEP', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSC', 'AFSL', 'AFSR', 'AFSS', 'AFST', 'AFTH', 'AFVT', 'AFWS', 'AFWT', 'DAH', 'IC', 'SS']\nvalues = [45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 0, 0, 0, 0, 0, 0]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('GPT-3.5-Turbo vs GPT-4')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 9, 11]\ny = [-4.5, -2.5, -1.5, -0.5, 0.5]\ncolors = ['pink', 'red', 'lightblue', 'skyblue', 'darkblue']\nlabels = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.bar(x[i], y[i], color=colors[i])\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Add legend\nax.legend(labels)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nplt.bar(brands, sales, color='skyblue')\nplt.xlabel('Brands')\nplt.ylabel('Sales (%)')\nplt.title('Human Study')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nplatforms = ['HH', 'Reddit', 'IMDB', 'AVG']\nwin_rates = [22, 40, 30, 26]\ntie_rates = [50, 35, 60, 50]\nlose_rates = [28, 10, 20, 24]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13, 6))\n\n# Plot the data\nax.barh(platforms, win_rates, color='red', label='Win')\nax.barh(platforms, tie_rates, left=win_rates, color='orange', label='Tie')\nax.barh(platforms, lose_rates, left=[x + y for x, y in zip(win_rates, tie_rates)], color='pink', label='Lose')\n\n# Set the title and labels\nax.set_title('COPR v.s. Golden (Human Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Platform')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\naccuracy_data = [32, 34, 36, 38, 40]\nunfairness_data = [12, 14, 16, 18, 20]\n\n# Data for the second graph\naccuracy_data_2 = [14, 16, 18, 20, 22]\nunfairness_data_2 = [10, 12, 14, 16, 18]\n\n# Create a figure and axis\nfig, ax = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot the first graph\nax[0].bar(['Accuracy', 'Unfairness'], accuracy_data, color='blue')\nax[0].bar(['Accuracy', 'Unfairness'], unfairness_data, color='orange')\nax[0].set_title('a')\nax[0].set_ylabel('Score')\n\n# Plot the second graph\nax[1].bar(['Accuracy', 'Unfairness'], accuracy_data_2, color='blue')\nax[1].bar(['Accuracy', 'Unfairness'], unfairness_data_2, color='orange')\nax[1].set_title('b')\nax[1].set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\ncolors = ['blue', 'orange', 'pink', 'brown']\nlabels = ['ImageNet-1k', 'ImageNet (F)', 'PAC-FNO', 'PAC-FNO']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.bar(resolutions, accuracies, color=colors)\n\n# Add labels and title\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Add text annotations for each bar\nfor bar, label in zip(bars, labels):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, label, ha='center', va='bottom')\n\n# Add a horizontal line at the top of the chart\nax.axhline(y=80, color='b', linestyle='-')\n\n# Add a vertical line at the bottom of the chart\nax.axvline(x=32, color='b', linestyle='-')\n\n# Add a red arrow pointing down\nax.annotate('', xy=(32, 87), xytext=(32, 180),\n            arrowprops=dict(facecolor='red', shrink=0.05))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\nvalues = [50.0, 50.0, 50.0, 50.0]\ncolors = ['yellow', 'blue', 'red', 'pink']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\nbars = ax.bar(labels, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Levels')\nax.set_ylabel('# Avg Uploaded Samples')\nax.set_title('Uploads by Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nrewards = [39.4, 35.18, 30]\nstd_devs = [2.84, 2.084, 2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the bars\nbars = ax.bar(categories, rewards, yerr=std_devs, capsize=5)\n\n# Set the title and labels\nax.set_title('Rewards for Different Categories')\nax.set_xlabel('Categories')\nax.set_ylabel('Reward Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Number of Videos by Profession')\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, synthetic_data, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Synthetic data')\nax.set_title('Sentiment Analysis of Synthetic Data')\n\n# Add human-authored data as a second y-axis\nax2 = ax.twinx()\nax2.bar(categories, human_authored_data, color='red', alpha=0.5)\nax2.set_ylabel('Human-authored data')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'substantial', 'tiny', 'very', 'wide', 'slight', 'relative', 'moderate', 'handy', 'low']\nprobabilities = [0.25, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.10, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 8.0))\nplt.bar(words, probabilities, color='lightblue')\nplt.xlabel('Word')\nplt.ylabel('Probability')\nplt.title('Context: The human body can tolerate only a')\n\n# Add colored rectangles at the top of each bar\nfor i, prob in enumerate(probabilities):\n    plt.text(i, prob + 0.01, f'{prob:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Convertible', 'Coupe', 'Sedan', 'Truck', 'SUV']\nprobabilities = [0.75, 0.85, 0.95, 0.8, 0.9]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(models, probabilities, color=['yellow', 'green', 'blue', 'purple', 'red'])\n\n# Set title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Model')\nax.set_ylabel('Probability of Improvement')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nplt.bar(emotions, frequencies, color='pink')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each profession\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideo_counts = [4000, 5000, 6000, 7000, 8000, 9000]\n\n# Create a bar chart\nplt.figure(figsize=(12, 8))\nbars = plt.bar(professions, video_counts, color=['red', 'orange', 'yellow', 'green', 'blue', 'purple'])\n\n# Add labels and title\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\nplt.title('Number of Videos by Profession')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nvalues = [30, 25, 20, 40, 35, 30, 25]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Economic Indicators')\nax.set_xlabel('Indicators')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [50, 40, 30, 20, 10, 0]\ngood = [60, 50, 40, 30, 20, 10]\nmoderate = [70, 60, 50, 40, 30, 20]\npoor = [80, 70, 60, 50, 40, 30]\nvery_poor = [90, 80, 70, 60, 50, 40]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.barh(cities, excellent, color='red', label='Excellent')\nax.barh(cities, good, left=excellent, color='pink', label='Good')\nax.barh(cities, moderate, left=[e + g for e, g in zip(excellent, good)], color='lightgrey', label='Moderate')\nax.barh(cities, poor, left=[e + g + m for e, g, m in zip(excellent, good, moderate)], color='skyblue', label='Poor')\nax.barh(cities, very_poor, left=[e + g + m + p for e, g, m, p in zip(excellent, good, moderate, poor)], color='darkblue', label='Very Poor')\n\n# Set the title and labels\nax.set_title('City Ratings')\nax.set_xlabel('Rating')\nax.set_ylabel('Cities')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [0, 10, 20, 30, 40, 50, 60]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the positive differences\nax.bar(categories, positive_differences, color='green')\n\n# Plot the negative differences\nax.bar(categories, negative_differences, bottom=positive_differences, color='red')\n\n# Set the title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Set the x-axis limits\nax.set_xlim(-80, 80)\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the color of the vertical lines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('red')\n\n# Set the color of the horizontal lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('yellow')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 1, 7]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nplt.bar(emotions, frequencies, color='skyblue')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [-20, -15, -10, -5, 0, 5, 10, 15, 20]\ny = [0, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 19.7]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot(x, y, 'ro-')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Stock Prices')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\npatents = [100, 200, 300, 400, 500]\nresearch = [150, 250, 350, 450, 550]\nusage = [200, 300, 400, 500, 600]\npenetration = [250, 350, 450, 550, 650]\n\n# Create a bar chart with three bars for each category\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(range(len(patents)), patents, color='red', label='Patents Filed')\nax.bar(range(len(research)), research, bottom=patents, color='green', label='Research Investment')\nax.bar(range(len(usage)), usage, bottom=[p+r for p, r in zip(patents, research)], color='blue', label='Smartphone Usage')\nax.bar(range(len(penetration)), penetration, bottom=[p+r+u for p, r, u in zip(patents, research, usage)], color='purple', label='Internet Penetration')\n\n# Add labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('Tech Industry Metrics')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thankfulness', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Add a vertical line\nax.axvline(x=0.5, color='black', linestyle='-')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Synthetic Data vs Human-Authored Data')\nax.set_xlabel('Sentiment Category')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores = [0.45, 0.55, 0.35, 0.65, 0.7]\n\n# Create a bar chart with the scores\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.bar(categories, scores, color='blue')\n\n# Set the title and labels\nax.set_title('Scores by Category Over Time')\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['West', 'East', 'South', 'North']\nmetrics = [40.44, 54.46, 56.03, 58.23, 60.45, 62.65, 64.89, 66.11, 68.33, 70.55, 72.77, 74.99, 77.21, 79.43, 81.65, 83.87, 86.09, 88.31, 90.53, 92.75, 94.97, 97.19, 99.41]\nconcentrations = [11.59, 17.38, 25.36, 26.15, 28.23, 30.31, 32.39, 34.47, 36.55, 38.63, 40.71, 42.79, 44.87, 46.95, 49.03, 51.11, 53.19, 55.27, 57.35, 59.43, 61.51, 63.59, 65.67]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.barh(regions, metrics, color='skyblue')\nax.set_xlabel('Air Quality Metrics by Region')\nax.set_ylabel('Region')\nax.set_title('Air Quality Metrics by Region')\n\n# Add concentration values on top of each bar\nfor i, v in enumerate(concentrations):\n    ax.text(v + 1, i, str(v), color='black', va='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nbrands = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores = [-2.2, -2.3, -3.3, -3.2]\nconstraint_words = [3, 5, 7, 10]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(brands, scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Scores by group and constraint word count')\nax.set_title('Scores by group and constraint word count')\n\n# Add constraint words as annotations\nfor i, v in enumerate(constraint_words):\n    ax.text(i, -4, f'{v} Constraint Words', ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_rates = [-0.5, -0.3, -0.4, -0.2]\ncolors = ['red', 'green', 'blue', 'purple']\n\n# Create a bar chart\nplt.figure(figsize=(10, 6))\nbars = plt.bar(countries, gdp_growth_rates, color=colors)\n\n# Add labels and title\nplt.xlabel('Country')\nplt.ylabel('GDP Growth Rate (%)')\nplt.title('Negative GDP Growth Rates by Country and Year')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='2018', markerfacecolor=c, markersize=10) for c in colors]\nplt.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCaR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'LaVIA']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nplt.bar(models, performance, color='blue')\nplt.xlabel('Model')\nplt.ylabel('Performance (%)')\nplt.title('Human Study')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 80]\ncolors = ['blue', 'cyan', 'lightblue', 'darkblue']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_units = [80, 60, 40, 20, 80, 60, 40]\nproduct_a_sales = [50, 30, 10, 50, 30, 10, 50]\nproduct_c_sales = [40, 20, 0, 40, 20, 0, 40]\nproduct_e_sales = [30, 10, 0, 30, 10, 0, 30]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the chart\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Create a bar chart with the sales units\nbar_width = 0.5\nbar1 = ax.bar(categories, sales_units, color='orange', label='Sales Units')\n\n# Add product A sales to the bar chart\nbar2 = ax.bar(categories, product_a_sales, bottom=sales_units, color='red', label='Product A Sales')\n\n# Add product C sales to the bar chart\nbar3 = ax.bar(categories, product_c_sales, bottom=[sum(x) for x in zip(sales_units, product_a_sales)], color='pink', label='Product C Sales')\n\n# Add product E sales to the bar chart\nbar4 = ax.bar(categories, product_e_sales, bottom=[sum(x) for x in zip(sales_units, product_a_sales, product_c_sales)], color='yellow', label='Product E Sales')\n\n# Add a legend to the chart\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Product Categories')\n\n# Set the y-axis label\nax.set_ylabel('Sales Units')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the x-axis limits\nax.set_xlim(0, len(categories))\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the y-axis tick labels\nax.set_yticks(range(0, 90, 10))\nax.set_yticklabels([str(i) for i in range(0, 90, 10)])\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\naccuracies = [0.83, 0.6, 0.11]\nembedding_distances = [-9.44, -9.12, -3.67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bars\nbars = ax.bar(categories, accuracies, color='lightgreen')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Feature Embedding Distance')\n\n# Add text annotations for embedding distances\nfor bar, distance in zip(bars, embedding_distances):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{distance}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nscores = [10, 8, 12, 10, 6, 8, 12, 10, 8, 15]\nlabels = ['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5']\ncolors = ['lightblue', 'lightgreen', 'lightcyan', 'lightgrey', 'lavender']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(labels, scores, color=colors)\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Scores')\nax.set_ylabel('Human Annotator')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Performance')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7])\nax.set_xticklabels(['coreutils', 'gizip', 'scp', 'libq', 'mcf', 'omnet.', 'perl'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nfor i, imp in enumerate(improvement):\n    ax.barh(i, imp, color='blue')\n\n# Set labels and title\nax.set_xlabel('Model Performance (%)')\nax.set_title('Model Performance Improvement by Language')\n\n# Set y-axis ticks and labels\nax.set_yticks(range(len(brands)))\nax.set_yticklabels(brands)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='--')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nfiscal_quarter = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, -1.2]\nnasdaq_index = [0.6, 2.2, 1.0, 4.6, -0.8]\n\n# Create a bar chart for Dow Jones Index\nplt.bar(fiscal_quarter, dow_jones_index, color='green', label='Dow Jones Index')\n\n# Create a bar chart for Nasdaq Index\nplt.bar(fiscal_quarter, nasdaq_index, color='orange', label='Nasdaq Index')\n\n# Add a title and labels\nplt.title('Index Change (%)')\nplt.xlabel('Fiscal Quarter')\nplt.ylabel('Index Change (%)')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny = [39.4, 34.06, 30.84, 34.06]\ncolors = ['pink', 'lightblue', 'lightgreen', 'orange']\nlabels = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.bar(x, y, color=colors)\nax.set_xlabel('Series Labels')\nax.set_ylabel('Reward Values')\nax.set_title('Rewards by Series')\n\n# Legend\nfor i, label in enumerate(labels):\n    ax.text(i, max(y) + 1, label, ha='center', va='bottom', color=colors[i])\n\n# Display\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntruthful_recall = [30.1, 34, 43.7]\nmisleading_recall = [46.3, 57.9, 53.8]\nmisleading_recall2 = [19.4, 20, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bars\nax.bar(range(len(truthful_recall)), truthful_recall, color='pink')\nax.bar(range(len(misleading_recall)), misleading_recall, color='pink', bottom=truthful_recall)\nax.bar(range(len(misleading_recall2)), misleading_recall2, color='pink', bottom=[x+y for x, y in zip(truthful_recall, misleading_recall)])\n\n# Set the title and labels\nax.set_title('Truthful:Misleading = 2:0')\nax.set_xlabel('Product')\nax.set_ylabel('Recall')\n\n# Set the x-ticks\nax.set_xticks(range(len(truthful_recall)))\nax.set_xticklabels(['Product 1', 'Product 2', 'Product 3'])\n\n# Set the y-limits\nax.set_ylim(-40, 60)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nsectors = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year_emissions = [250, 300, 400, 500]\nprevious_year_emissions = [300, 350, 450, 550]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Draw the bars for current year emissions\nfor i, sector in enumerate(sectors):\n    ax.bar(sector, current_year_emissions[i], color='skyblue', label=sector)\n\n# Draw the bars for previous year emissions\nfor i, sector in enumerate(sectors):\n    ax.bar(sector, previous_year_emissions[i], color='orange', bottom=current_year_emissions[i])\n\n# Set the title of the plot\nax.set_title('Environmental Impact by Sector')\n\n# Set the x-axis label\nax.set_xlabel('Industry Sectors')\n\n# Set the y-axis label\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Set the y-axis limits\nax.set_ylim(-200, 800)\n\n# Set the y-axis ticks\nax.set_yticks(range(-200, 801, 200))\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-200', '-100', '0', '100', '200', '300', '400', '500', '600', '700'])\n\n# Set the x-axis ticks\nax.set_xticks(range(len(sectors)))\n\n# Set the x-axis tick labels\nax.set_xticklabels(sectors)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 14, 16, 18, 20]\n\n# Create a bar chart\nplt.figure(figsize=(8, 4))\nplt.bar(cities, temperatures, color='skyblue')\nplt.title('Average City Temperatures')\nplt.xlabel('Cities')\nplt.ylabel('Temperature (\u00b0C)')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [170, 150, 160, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.bar(regions, emissions_2020, color='red', label='2020 Emissions')\nax.bar(regions, emissions_2021, color='blue', label='2021 Emissions')\n\n# Set the title and labels\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xlabel('Regions')\nax.set_ylabel('Emissions')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquestions = ['Question 1', 'Question 2', 'Question 3 Responses', 'Question 4', 'Question 5']\nresponses = [\n    [26.0, 10.0, 17.0, 10.0, 10.0],\n    [32.0, 10.0, 29.0, 10.0, 10.0],\n    [13.0, 10.0, 22.0, 10.0, 10.0],\n    [19.0, 12.0, 15.0, 15.0, 15.0],\n    [33.0, 10.0, 11.0, 10.0, 10.0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bars\nfor i, question in enumerate(questions):\n    ax.bar(question, responses[i], color=plt.cm.tab20(i % 20), label=question)\n\n# Set the title and labels\nax.set_title('Survey Results')\nax.set_xlabel('Questions')\nax.set_ylabel('Responses (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(1, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 4), 9, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((2, 3), 8, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((3, 2), 7, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((4, 1), 6, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((5, 0.5), 5, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((6, 0.2), 4, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((7, 0.1), 3, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((8, 0.05), 2, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((9, 0.025), 1, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((10, 0.0125), 0.5, 1, color='blue', edgecolor='red')\nax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 9, 11]\ny = [1.2, 1.8, 1.5, 1.4, 1.6]\ncolors = ['cyan', 'orange', 'blue', 'orange', 'brown']\nstyles = ['-', '--', '-.', ':', '-']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [0, y[i]], color=colors[i], linestyle=styles[i])\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntrue_recall = [46.3, 56.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the bars\nax.bar(brands, true_recall, color='blue')\nax.bar(brands, misleading_recall, bottom=true_recall, color='pink')\n\n# Set the title and labels\nax.set_title('Truthful: Misleading Recall = 2:0')\nax.set_xlabel('Brands')\nax.set_ylabel('Misleading Recall')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan', 'Convertible New', 'Coupe New', 'Truck New', 'SUV New', 'Sedan New']\nprobabilities = [25, 28, 19, 23, 27, 29, 24, 21, 26, 20]\n\n# Create bar chart\nplt.figure(figsize=(6.0, 6.0))\nplt.bar(models, probabilities, color='blue')\nplt.xlabel('Model')\nplt.ylabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\ndisapprovals = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunbored = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Data for the second bar chart\nfrequency_metric_2 = [7.1, 7.0, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5]\n\n# Create the first bar chart\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.bar(emotions, disapprovals, color='pink')\nax.set_title('Frequency Metric 1')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency')\n\n# Create the second bar chart\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.bar(emotions, frequency_metric_2, color='lightblue')\nax.set_title('Frequency Metric 2')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar charts\ndata = {\n    'Attack on Titan': [0.3, 0.4, 0.5, 0.6],\n    'Game of Thrones': [0.2, 0.3, 0.4, 0.5],\n    'The Count of Monte Cristo': [0.3, 0.4, 0.5, 0.6],\n    'Demi-Gods and Semi-Devils': [0.3, 0.4, 0.5, 0.6],\n    'Notre-Dame de Paris': [0.3, 0.4, 0.5, 0.6]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nax.bar(range(len(data)), data['Attack on Titan'], color='cyan')\nax.bar(range(len(data)), data['Game of Thrones'], color='orange')\nax.bar(range(len(data)), data['The Count of Monte Cristo'], color='cyan')\nax.bar(range(len(data)), data['Demi-Gods and Semi-Devils'], color='orange')\nax.bar(range(len(data)), data['Notre-Dame de Paris'], color='cyan')\n\n# Set the x-axis labels\nax.set_xticks(range(len(data)))\nax.set_xticklabels(['Score at Time 0', 'Score at Time 20', 'Score at Time 40'])\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the title\nax.set_title('Scores by Time')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\nconsumption = [1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]\nproduction = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700]\nratio = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot bars for consumption\nfor i, c in enumerate(consumption):\n    ax.barh(countries[i], c, color='red')\n\n# Plot bars for production\nfor i, p in enumerate(production):\n    ax.barh(countries[i], p, left=consumption[i], color='blue')\n\n# Plot bars for ratio\nfor i, r in enumerate(ratio):\n    ax.barh(countries[i], r * 1000, left=consumption[i] + production[i], color='green')\n\n# Set labels and title\nax.set_xlabel('Energy Consumption (TWh)')\nax.set_title('Energy Consumption and Production by Country')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bars\nbars = ax.bar(categories, synthetic_data, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Original')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nx = [-5, -5, -5, 0, 0, 0]\ny = [6, 6, 6, 8, 10, 10]\nlabels = ['Beauty', 'Beauty', 'Beauty', 'Yelp', 'Yelp', 'Yelp']\ncolors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']\n\n# Data for the second bar chart\nx2 = [-5, -4.1, -4.1, -3, -3, -2, -2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nbrands = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\nscores = [-3.2, -3.3, -3.2, -3.3]\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\n\n# Create a bar chart with the data\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.bar(brands, scores, color='red')\n\n# Set the title and labels for the chart\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Brands')\nax.set_ylabel('Score')\n\n# Add a legend to the chart\nax.legend(constraint_words)\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Top-10 superfamily in training dataset')\n\n# Set the y-axis label\nax.set_ylabel('Model accuracy')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-limits\nax.set_ylim(0, 1)\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('white')\n\n# Set the face color of the spines\nfor spine in ax.spines.values():\n    spine.set_edgecolor('black')\n\n# Set the face color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the face color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the face color of the title\nax.title.set_color('black')\n\n# Set the face color of the x-label\nax.xaxis.label.set_color('black')\n\n# Set the face color of the y-label\nax.yaxis.label.set_color('black')\n\n# Set the face color of the x-tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\nax.get_xticklabels()[3].set_color('black')\nax.get_xticklabels()[4].set_color('black')\nax.get_xticklabels()[5].set_color('black')\nax.get_xticklabels()[6].set_color('black')\nax.get_xticklabels()[7].set_color('black')\nax.get_xticklabels()[8].set_color('black')\nax.get_xticklabels()[9].set_color('black')\n\n# Set the face color of the y-tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\nax.get_yticklabels()[3].set_color('black')\nax.get_yticklabels()[4].set_color('black')\n\n# Set the face color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the face color of the legend text\nfor text in ax.legend_.get_texts():\n    text.set_color('black')\n\n# Set the face color of the legend title\nax.legend_.get_title().set_color('black')\n\n# Set the face color of the legend handle\nfor handle in ax.legend_.legendHandles:\n    handle.set_facecolor('blue')\n\n# Set the face color of the legend edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_edgecolor('black')\n\n# Set the face color of the legend marker\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('red')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerfacecolor('blue')\n\n# Set the face color of the legend marker edge\nfor handle in ax.legend_.legendHandles:\n    handle.set_markeredgecolor('black')\n\n# Set the face color of the legend marker size\nfor handle in ax.legend_.legendHandles:\n    handle.set_markersize(10)\n\n# Set the face color of the legend marker style\nfor handle in ax.legend_.legendHandles:\n    handle.set_markerstyle('o')\n\n# Set the face color of the legend marker fill\nfor handle in ax.legend_.legendHandles:\n    handle.set_marker"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nerror_rates = [50, 40, 30, 20, 10]\nerror_rates_2 = [80, 70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the error rates\nax.bar(categories, error_rates, color='pink')\nax.bar(categories, error_rates_2, bottom=error_rates, color='lightgreen')\n\n# Set the title and labels\nax.set_title('GENIA')\nax.set_xlabel('Categories')\nax.set_ylabel('Error correction rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [80, 60, 40, 20, 10, 5, 2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot bars for scores A\nfor i, score in enumerate(scores_a):\n    ax.bar(models[i], score, color='red' if score > 50 else 'green')\n\n# Plot bars for scores B\nfor i, score in enumerate(scores_b):\n    ax.bar(models[i], score, color='blue' if score > 50 else 'purple')\n\n# Set title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Score')\n\n# Set y-axis limits\nax.set_ylim(0, 80)\n\n# Add grid lines\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET']\nf1_scores = [75, 80, 85, 90]\nparty_colors = ['blue', 'orange', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nfor i, ph in enumerate(pheme):\n    ax.barh(ph, f1_scores[i], color=party_colors[i % len(party_colors)])\n\n# Set the title and labels\nax.set_title('Pheme vs Macro F1-score')\nax.set_xlabel('Macro F1-score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [100, 150, 200, 250, 300, 350, 400, 450, 500]\ny2 = [120, 170, 220, 270, 320, 370, 420, 470, 520]\ny3 = [140, 190, 240, 290, 340, 390, 440, 490, 540]\n\n# Data for the second plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [100, 150, 200, 250, 300, 350, 400, 450, 500]\ny2 = [120, 170, 220, 270, 320, 370, 420, 470, 520]\ny3 = [140, 190, 240, 290, 340, 390, 440, 490, 540]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(x, y1, color='blue')\nax.bar(x, y2, color='orange')\nax.bar(x, y3, color='purple')\n\n# Set the title and labels\nax.set_title('Resonance Preference Plot for rich-context')\nax.set_xlabel('Count')\nax.set_ylabel('Role')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\neffort_data = [20.4, 29.6, 20.4, 20.4, 9.3]\nbrainwave_data = [23.8, 14.3, 16.7, 38.1, 7.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot the effort data\nax.bar(range(len(effort_data)), effort_data, color='red', label='Effort')\n\n# Plot the brainwave data\nax.bar(range(len(brainwave_data)), brainwave_data, color='green', label='Brainwave')\n\n# Set the x-axis labels\nax.set_xticks(range(len(effort_data)))\nax.set_xticklabels(['Very Low', 'Low', 'Neutral', 'High', 'Very High'])\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Set the title\nax.set_title('Eye Movement')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny1 = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\ny2 = [12, 17, 22, 27, 32, 37, 42, 47, 52, 57]\n\n# Data for the second graph\nx2 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny3 = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\ny4 = [12, 17, 22, 27, 32, 37, 42, 47, 52, 57]\n\n# Data for the third graph\nx3 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny5 = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\ny6 = [12, 17, 22, 27, 32, 37, 42, 47, 52, 57]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 6))\n\n# Plot the first graph\naxs[0, 0].bar(x, y1, color='red')\naxs[0, 0].bar(x, y2, color='blue')\naxs[0, 0].set_title('Rate of Gain Change[%]')\naxs[0, 0].set_xlabel('Brightness')\naxs[0, 0].set_ylabel('Scale')\n\n# Plot the second graph\naxs[0, 1].bar(x2, y3, color='red')\naxs[0, 1].bar(x2, y4, color='blue')\naxs[0, 1].set_title('Rate of Gain Change[%]')\naxs[0, 1].set_xlabel('Rotation Angle [\u00b0]')\naxs[0, 1].set_ylabel('Scale')\n\n# Plot the third graph\naxs[1, 0].bar(x3, y5, color='red')\naxs[1, 0].bar(x3, y6, color='blue')\naxs[1, 0].set_title('Rate of Gain Change[%]')\naxs[1, 0].set_xlabel('Brightness')\naxs[1, 0].set_ylabel('Scale')\n\n# Plot the fourth graph\naxs[1, 1].bar(x2, y3, color='red')\naxs[1, 1].bar(x2, y4, color='blue')\naxs[1, 1].set_title('Rate of Gain Change[%]')\naxs[1, 1].set_xlabel('Rotation Angle [\u00b0]')\naxs[1, 1].set_ylabel('Scale')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, -0.7]\nimprovement = [-1.0, 0.3, 3.4, -3.3, -2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the performance data\nax.barh(brands, performance, color='blue')\n\n# Add a horizontal line at y=0\nax.axhline(0, color='black', linewidth=0.5)\n\n# Set the title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Performance [EN]')\nax.set_ylabel('Language')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nx1 = ['Random', 'Ours', 'SOTA']\ny1 = [66.3, 61.9, 53.8]\ncolors1 = ['blue', 'red', 'pink']\n\n# Data for the second chart\nx2 = ['Random', 'Ours', 'SOTA']\ny2 = [49.3, 45.7, 41.6]\ncolors2 = ['blue', 'red', 'pink']\n\n# Data for the third chart\nx3 = ['Random', 'Ours', 'SOTA']\ny3 = [48.0, 42.6, 36.5]\ncolors3 = ['blue', 'red', 'pink']\n\n# Data for the fourth chart\nx4 = ['Random', 'Ours', 'SOTA']\ny4 = [43.8, 40.2, 36.5]\ncolors4 = ['blue', 'red', 'pink']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first chart\naxs[0, 0].bar(x1, y1, color=colors1)\naxs[0, 0].set_title('Truthful:Misleading = 2:0')\naxs[0, 0].set_ylim(-80, 80)\n\n# Plot the second chart\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Truthful:Misleading = 2:1')\naxs[0, 1].set_ylim(-80, 80)\n\n# Plot the third chart\naxs[1, 0].bar(x3, y3, color=colors3)\naxs[1, 0].set_title('Truthful:Misleading = 2:2')\naxs[1, 0].set_ylim(-80, 80)\n\n# Plot the fourth chart\naxs[1, 1].bar(x4, y4, color=colors4)\naxs[1, 1].set_title('Truthful:Misleading = 1:2')\naxs[1, 1].set_ylim(-80, 80)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nx1 = [1, 2, 3, 4, 5, 6]\ny1 = [50, 40, 30, 20, 10, 0]\n\n# Data for the second chart\nx2 = [1, 2, 3, 4, 5, 6]\ny2 = [55, 45, 35, 25, 15, 5]\n\n# Data for the third chart\nx3 = [1, 2, 3, 4, 5, 6]\ny3 = [60, 50, 40, 30, 20, 10]\n\n# Data for the fourth chart\nx4 = [1, 2, 3, 4, 5, 6]\ny4 = [65, 55, 45, 35, 25, 15]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first chart\naxs[0, 0].bar(x1, y1, color='pink')\naxs[0, 0].set_title('Human Labeling and Agreement Bias Checking 1')\naxs[0, 0].set_xlabel('Human Annotator')\naxs[0, 0].set_ylabel('Scores')\n\n# Plot the second chart\naxs[0, 1].bar(x2, y2, color='orange')\naxs[0, 1].set_title('Human Labeling and Agreement Bias Checking 2')\naxs[0, 1].set_xlabel('Human Annotator')\naxs[0, 1].set_ylabel('Scores')\n\n# Plot the third chart\naxs[1, 0].bar(x3, y3, color='purple')\naxs[1, 0].set_title('Human Labeling and Agreement Bias Checking 3')\naxs[1, 0].set_xlabel('Human Annotator')\naxs[1, 0].set_ylabel('Scores')\n\n# Plot the fourth chart\naxs[1, 1].bar(x4, y4, color='blue')\naxs[1, 1].set_title('Human Labeling and Agreement Bias Checking 4')\naxs[1, 1].set_xlabel('Human Annotator')\naxs[1, 1].set_ylabel('Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nscores_contrastive = [54.9, 71.5, 79.2, 60.3, 54.5, 52.9, 42.4, 7.1, 2.0]\nscores_beam = [83.3, 92.6, 96.4, 89.2, 83.3, 80.4, 76.6, 83.3, 88.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for contrastive search scores\nax.bar(models, scores_contrastive, color='lightgreen', label='Contrastive Search')\n\n# Plot bars for beam search scores\nax.bar(models, scores_beam, color='coral', bottom=scores_contrastive, label='Beam Search')\n\n# Set title and labels\nax.set_title('Performance Comparison by Model')\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues = [150.0, 180.0, 75.0, 90.0, 80.0]\n\n# Data for the second graph\ncategories2 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues2 = [2.5, 2.0, 1.5, 2.0, 2.0]\n\n# Data for the third graph\ncategories3 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues3 = [2.5, 2.0, 1.5, 2.0, 2.0]\n\n# Data for the fourth graph\ncategories4 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues4 = [2.8, 2.0, 1.5, 2.0, 2.0]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first graph\naxs[0, 0].bar(categories, values, color='orange')\naxs[0, 0].set_title('Dataset 1')\n\n# Plot the second graph\naxs[0, 1].bar(categories2, values2, color='blue')\naxs[0, 1].set_title('Dataset 2')\n\n# Plot the third graph\naxs[1, 0].bar(categories3, values3, color='green')\naxs[1, 0].set_title('Dataset 3')\n\n# Plot the fourth graph\naxs[1, 1].bar(categories4, values4, color='yellow')\naxs[1, 1].set_title('Dataset 4')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Dominance')\n\n# Set the x-axis label\nax.set_xlabel('SAM rating')\n\n# Set the y-axis label\nax.set_ylabel('Color')\n\n# Define the data for the bars\nbars = [\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7]\n]\n\n# Define the colors for the bars\ncolors = [\n    'blue',\n    'green',\n    'red',\n    'yellow',\n    'orange',\n    'purple',\n    'pink',\n    'brown',\n    'grey',\n    'black'\n]\n\n# Plot the bars\nfor bar, color in zip(bars, colors):\n    ax.bar(bar, [1] * len(bar), color=color)\n\n# Set the x-axis limits\nax.set_xlim(1, 9)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Set the y-axis ticks\nax.set_yticks([])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9'])\n\n# Set the y-axis tick labels\nax.set_yticklabels([])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis line color\nax.spines['left'].set_color('black')\n\n# Set the x-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('butt')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('butt')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('miter')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('miter')\n\n# Set the x-axis line dashcap\nax.spines['bottom'].set_dashcapstyle('butt')\n\n# Set the y-axis line dashcap\nax.spines['left'].set_dashcapstyle('butt')\n\n# Set the x-axis line dashjoin\nax.spines['bottom'].set_dashjoinstyle('miter')\n\n# Set the y-axis line dashjoin\nax.spines['left'].set_dashjoinstyle('miter')\n\n# Set the x-axis line dashoffset\nax.spines['bottom'].set_dashoffset(0.0)\n\n# Set the y-axis line dashoffset\nax.spines['left'].set_dashoffset(0.0)\n\n# Set the x-axis line dashes\nax.spines['bottom'].set_dashes([2, 2])\n\n# Set the y-axis line dashes\nax.spines['left'].set_dashes([2, 2])\n\n# Set the x-axis line solidcap\nax.spines['bottom'].set_solidcapstyle('butt')\n\n# Set the y-axis line solidcap\nax.spines['left'].set_solidcapstyle('butt')\n\n# Set the x-axis line solidjoin\nax.spines['bottom'].set_solidjoinstyle('miter')\n\n# Set the y-axis line solidjoin\nax.spines['left'].set_solidjoinstyle('miter')\n\n# Set the x-axis line solidoffset\nax.spines['bottom'].set_solidoffset(0.0)\n\n# Set the y-axis line solidoffset\nax.spines['left'].set_solidoffset(0.0)\n\n# Set the x-axis line soliddashes\nax.spines['bottom'].set_soliddashes([2, 2])\n\n# Set the y-axis line soliddashes\nax.spines['left'].set_soliddashes([2, 2])\n\n# Set the x-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('butt')\n\n# Set the y-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('butt')\n\n# Set the x-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('miter')\n\n# Set the y-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('miter')\n\n# Set the x-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashdashes\nax.spines['bottom'].set_soliddashdashes([2, 2])\n\n# Set the y-axis line soliddashdashes\nax.spines['left'].set_soliddashdashes([2, 2])\n\n# Set the x-axis line soliddashdashcap\nax.spines['bottom'].set_soliddashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashcap\nax.spines['left'].set_soliddashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashjoin\nax.spines['bottom'].set_soliddashdashjoinstyle('miter')\n\n# Set the y-axis line soliddashdashjoin\nax.spines['left'].set_soliddashdashjoinstyle('miter')\n\n# Set the x-axis line soliddashdashoffset\nax.spines['bottom'].set_soliddashdashoffset(0.0)\n\n# Set the y-axis line soliddashdashoffset\nax.spines['left'].set_soliddashdashoffset(0.0)\n\n# Set the x-axis line soliddashdashdashes\nax.spines['bottom'].set_soliddashdashdashes([2, 2])\n\n# Set the y-axis line soliddashdashdashes\nax.spines['left'].set_soliddashdashdashes([2, 2])\n\n# Set the x-axis line soliddashdashdashcap\nax.spines['bottom'].set_soliddashdashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashdashcap\nax.spines['left'].set_soliddashdashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashdashjoin\nax.spines['bottom'].set_soliddashdashdashjoinstyle('miter')\n\n# Set the y-axis line soliddashdashdashjoin\nax.spines['left'].set_soliddashdashdashjoinstyle('miter')\n\n# Set the x-axis line soliddashdashdashoffset\nax.spines['bottom'].set_soliddashdashdashoffset(0.0)\n\n# Set the y-axis line soliddashdashdashoffset\nax.spines['left'].set_soliddashdashdashoffset(0.0)\n\n# Set the x-axis line soliddashdashdashdashes\nax.spines['bottom'].set_soliddashdashdashdashes([2, 2])\n\n# Set the y-axis line soliddashdashdashdashes\nax.spines['left'].set_soliddashdashdashdashes([2, 2])\n\n# Set the x-axis line soliddashdashdashdashcap\nax.spines['bottom'].set_soliddashdashdashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashdashdashcap\nax.spines['left'].set_soliddashdashdashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashdashdashjoin\nax.spines['bottom'].set_soliddashdashdashdashjoinstyle('miter')\n\n# Set the y-axis line soliddashdashdashdashjoin\nax.spines['left'].set_soliddashdashdashdashjoinstyle('miter')\n\n# Set the x-axis line soliddashdashdashdashoffset\nax.spines['bottom'].set_soliddashdashdashdashoffset(0.0)\n\n# Set the y-axis line soliddashdashdashdashoffset\nax.spines['left'].set_soliddashdashdashdashoffset(0.0)\n\n# Set the x-axis line soliddashdashdashdashdashes\nax.spines['bottom'].set_soliddashdashdashdashdashes([2, 2])\n\n# Set the y-axis line soliddashdashdashdashdashes\nax.spines['left'].set_soliddashdashdashdashdashes([2, 2])\n\n# Set the x-axis line soliddashdashdashdashdashcap\nax.spines['bottom'].set_soliddashdashdashdashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashdashdashdashcap\nax.spines['left'].set_soliddashdashdashdashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashdashdashdashjoin\nax.spines['bottom'].set_soliddashdashdashdashdashjoinstyle('miter')\n\n# Set the y-axis line soliddashdashdashdashdashjoin\nax.spines['left'].set_soliddashdashdashdashdashjoinstyle('miter')\n\n# Set the x-axis line soliddashdashdashdashdashoffset\nax.spines['bottom'].set_soliddashdashdashdashdashoffset(0.0)\n\n# Set the y-axis line soliddashdashdashdashdashoffset\nax.spines['left'].set_soliddashdashdashdashdashoffset(0.0)\n\n# Set the x-axis line soliddashdashdashdashdashdashes\nax.spines['bottom'].set_soliddashdashdashdashdashdashes([2, 2])\n\n# Set the y-axis line soliddashdashdashdashdashdashes\nax.spines['left'].set_soliddashdashdashdashdashdashes([2, 2])\n\n# Set the x-axis line soliddashdashdashdashdashdashcap\nax.spines['bottom'].set_soliddashdashdashdashdashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashdashdashdashdashcap\nax.spines['left'].set_soliddashdashdashdashdashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashdashdashdashdashjoin\nax.spines['bottom'].set_soliddashdashdashdashdashdashjoinstyle('miter')\n\n# Set the y-axis line soliddashdashdashdashdashdashjoin\nax.spines['left'].set_soliddashdashdashdashdashdashjoinstyle('miter')\n\n# Set the x-axis line soliddashdashdashdashdashdashoffset\nax.spines['bottom'].set_soliddashdashdashdashdashdashoffset(0.0)\n\n# Set the y-axis line soliddashdashdashdashdashdashoffset\nax.spines['left'].set_soliddashdashdashdashdashdashoffset(0.0)\n\n# Set the x-axis line soliddashdashdashdashdashdashdashes\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashes([2, 2])\n\n# Set the y-axis line soliddashdashdashdashdashdashdashes\nax.spines['left'].set_soliddashdashdashdashdashdashdashes([2, 2])\n\n# Set the x-axis line soliddashdashdashdashdashdashdashcap\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashdashdashdashdashdashcap\nax.spines['left'].set_soliddashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashdashdashdashdashdashjoin\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashjoinstyle('miter')\n\n# Set the y-axis line soliddashdashdashdashdashdashdashjoin\nax.spines['left'].set_soliddashdashdashdashdashdashdashjoinstyle('miter')\n\n# Set the x-axis line soliddashdashdashdashdashdashdashoffset\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashoffset(0.0)\n\n# Set the y-axis line soliddashdashdashdashdashdashdashoffset\nax.spines['left'].set_soliddashdashdashdashdashdashdashoffset(0.0)\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashes\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashes([2, 2])\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashes\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashes([2, 2])\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashcap\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashcap\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashjoin\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashjoinstyle('miter')\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashjoin\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashjoinstyle('miter')\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashoffset\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashoffset(0.0)\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashoffset\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashoffset(0.0)\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashes\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashes([2, 2])\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashes\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashes([2, 2])\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashcap\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashcap\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashjoin\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashjoinstyle('miter')\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashjoin\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashjoinstyle('miter')\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashoffset\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashoffset(0.0)\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashoffset\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashoffset(0.0)\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashdashes\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashdashes([2, 2])\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashdashes\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashdashes([2, 2])\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashdashcap\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashdashcap\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashdashjoin\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashdashjoinstyle('miter')\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashdashjoin\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashdashjoinstyle('miter')\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashdashoffset\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashdashoffset(0.0)\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashdashoffset\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashdashoffset(0.0)\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashdashdashes\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashdashdashes([2, 2])\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashdashdashes\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashdashdashes([2, 2])\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashdashdashcap\nax.spines['bottom'].set_soliddashdashdashdashdashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the y-axis line soliddashdashdashdashdashdashdashdashdashdashdashcap\nax.spines['left'].set_soliddashdashdashdashdashdashdashdashdashdashdashcapstyle('butt')\n\n# Set the x-axis line soliddashdashdashdashdashdashdashdashdashdashdashjoin\nax.spines['bottom'].set_s"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a rectangle for each activity\nrect1 = plt.Rectangle((20, 20), 30, 10, color='blue', ec='black')\nrect2 = plt.Rectangle((20, 40), 30, 10, color='green', ec='black')\nrect3 = plt.Rectangle((20, 60), 30, 10, color='red', ec='black')\nrect4 = plt.Rectangle((20, 80), 30, 10, color='purple', ec='black')\n\n# Add rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\n\n# Set the x-axis limits\nax.set_xlim(0, 90)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([20, 30, 40, 50, 60, 70, 80, 90])\n\n# Set the y-axis ticks\nax.set_yticks([])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('1.0 BLC')\n\n# Set the x-axis label\nax.set_xlabel('Llama-70b (T2TT)')\n\n# Set the y-axis label\nax.set_ylabel('Llama-70b (S2TT)')\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.5, 0.5), 1, 1, color='blue'))\n\n# Draw a line with a specific color\nax.plot([0.5, 1.5], [0.5, 1.5], color='orange')\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((1.5, 0.5), 1, 1, color='green'))\n\n# Draw a line with a specific color\nax.plot([1.5, 2.5], [0.5, 1.5], color='orange')\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((2.5, 0.5), 1, 1, color='red'))\n\n# Draw a line with a specific color\nax.plot([2.5, 3.5], [0.5, 1.5], color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([1, 2, 3, 4, 5])\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Simple Line Plot')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Execution Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the bar chart\nalgorithms = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\naccuracies = [875, 875, 875, 875, 875]\n\n# Create a bar chart\nax.bar(algorithms, accuracies, color='lightblue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first subplot\ndata1 = [0.88, 0.87, 0.83]\nlabels1 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\ncolors1 = ['blue', 'brown', 'green']\n\n# Create a bar chart for the first subplot\nax.bar(labels1, data1, color=colors1)\nax.set_title('Region Classification Accuracy')\n\n# Define the data for the second subplot\ndata2 = [9.00, 9.33, 6.91, 9.33, 9.00]\nlabels2 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\ncolors2 = ['green', 'brown', 'blue']\n\n# Create a bar chart for the second subplot\nax2 = ax.twinx()\nax2.bar(labels2, data2, color=colors2, alpha=0.5)\nax2.set_title('Slice Mean Error (ms)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Z-Score')\n\n# Set the x-axis label\nax.set_xlabel('w/o att')\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a horizontal line at y=10\nax.axhline(y=10, color='r', linestyle='-')\n\n# Draw a horizontal line at y=15\nax.axhline(y=15, color='r', linestyle='-')\n\n# Draw a horizontal line at y=20\nax.axhline(y=20, color='r', linestyle='-')\n\n# Draw a horizontal line at y=25\nax.axhline(y=25, color='r', linestyle='-')\n\n# Draw a horizontal line at y=30\nax.axhline(y=30, color='r', linestyle='-')\n\n# Draw a horizontal line at y=35\nax.axhline(y=35, color='r', linestyle='-')\n\n# Draw a horizontal line at y=40\nax.axhline(y=40, color='r', linestyle='-')\n\n# Draw a horizontal line at y=45\nax.axhline(y=45, color='r', linestyle='-')\n\n# Draw a horizontal line at y=50\nax.axhline(y=50, color='r', linestyle='-')\n\n# Draw a horizontal line at y=55\nax.axhline(y=55, color='r', linestyle='-')\n\n# Draw a horizontal line at y=60\nax.axhline(y=60, color='r', linestyle='-')\n\n# Draw a horizontal line at y=65\nax.axhline(y=65, color='r', linestyle='-')\n\n# Draw a horizontal line at y=70\nax.axhline(y=70, color='r', linestyle='-')\n\n# Draw a horizontal line at y=75\nax.axhline(y=75, color='r', linestyle='-')\n\n# Draw a horizontal line at y=80\nax.axhline(y=80, color='r', linestyle='-')\n\n# Draw a horizontal line at y=85\nax.axhline(y=85, color='r', linestyle='-')\n\n# Draw a horizontal line at y=90\nax.axhline(y=90, color='r', linestyle='-')\n\n# Draw a horizontal line at y=95\nax.axhline(y=95, color='r', linestyle='-')\n\n# Draw a horizontal line at y=100\nax.axhline(y=100, color='r', linestyle='-')\n\n# Draw a horizontal line at y=105\nax.axhline(y=105, color='r', linestyle='-')\n\n# Draw a horizontal line at y=110\nax.axhline(y=110, color='r', linestyle='-')\n\n# Draw a horizontal line at y=115\nax.axhline(y=115, color='r', linestyle='-')\n\n# Draw a horizontal line at y=120\nax.axhline(y=120, color='r', linestyle='-')\n\n# Draw a horizontal line at y=125\nax.axhline(y=125, color='r', linestyle='-')\n\n# Draw a horizontal line at y=130\nax.axhline(y=130, color='r', linestyle='-')\n\n# Draw a horizontal line at y=135\nax.axhline(y=135, color='r', linestyle='-')\n\n# Draw a horizontal line at y=140\nax.axhline(y=140, color='r', linestyle='-')\n\n# Draw a horizontal line at y=145\nax.axhline(y=145, color='r', linestyle='-')\n\n# Draw a horizontal line at y=150\nax.axhline(y=150, color='r', linestyle='-')\n\n# Draw a horizontal line at y=155\nax.axhline(y=155, color='r', linestyle='-')\n\n# Draw a horizontal line at y=160\nax.axhline(y=160, color='r', linestyle='-')\n\n# Draw a horizontal line at y=165\nax.axhline(y=165, color='r', linestyle='-')\n\n# Draw a horizontal line at y=170\nax.axhline(y=170, color='r', linestyle='-')\n\n# Draw a horizontal line at y=175\nax.axhline(y=175, color='r', linestyle='-')\n\n# Draw a horizontal line at y=180\nax.axhline(y=180, color='r', linestyle='-')\n\n# Draw a horizontal line at y=185\nax.axhline(y=185, color='r', linestyle='-')\n\n# Draw a horizontal line at y=190\nax.axhline(y=190, color='r', linestyle='-')\n\n# Draw a horizontal line at y=195\nax.axhline(y=195, color='r', linestyle='-')\n\n# Draw a horizontal line at y=200\nax.axhline(y=200, color='r', linestyle='-')\n\n# Draw a horizontal line at y=205\nax.axhline(y=205, color='r', linestyle='-')\n\n# Draw a horizontal line at y=210\nax.axhline(y=210, color='r', linestyle='-')\n\n# Draw a horizontal line at y=215\nax.axhline(y=215, color='r', linestyle='-')\n\n# Draw a horizontal line at y=220\nax.axhline(y=220, color='r', linestyle='-')\n\n# Draw a horizontal line at y=225\nax.axhline(y=225, color='r', linestyle='-')\n\n# Draw a horizontal line at y=230\nax.axhline(y=230, color='r', linestyle='-')\n\n# Draw a horizontal line at y=235\nax.axhline(y=235, color='r', linestyle='-')\n\n# Draw a horizontal line at y=240\nax.axhline(y=240, color='r', linestyle='-')\n\n# Draw a horizontal line at y=245\nax.axhline(y=245, color='r', linestyle='-')\n\n# Draw a horizontal line at y=250\nax.axhline(y=250, color='r', linestyle='-')\n\n# Draw a horizontal line at y=255\nax.axhline(y=255, color='r', linestyle='-')\n\n# Draw a horizontal line at y=260\nax.axhline(y=260, color='r', linestyle='-')\n\n# Draw a horizontal line at y=265\nax.axhline(y=265, color='r', linestyle='-')\n\n# Draw a horizontal line at y=270\nax.axhline(y=270, color='r', linestyle='-')\n\n# Draw a horizontal line at y=275\nax.axhline(y=275, color='r', linestyle='-')\n\n# Draw a horizontal line at y=280\nax.axhline(y=280, color='r', linestyle='-')\n\n# Draw a horizontal line at y=285\nax.axhline(y=285, color='r', linestyle='-')\n\n# Draw a horizontal line at y=290\nax.axhline(y=290, color='r', linestyle='-')\n\n# Draw a horizontal line at y=295\nax.axhline(y=295, color='r', linestyle='-')\n\n# Draw a horizontal line at y=300\nax.axhline(y=300, color='r', linestyle='-')\n\n# Draw a horizontal line at y=305\nax.axhline(y=305, color='r', linestyle='-')\n\n# Draw a horizontal line at y=310\nax.axhline(y=310, color='r', linestyle='-')\n\n# Draw a horizontal line at y=315\nax.axhline(y=315, color='r', linestyle='-')\n\n# Draw a horizontal line at y=320\nax.axhline(y=320, color='r', linestyle='-')\n\n# Draw a horizontal line at y=325\nax.axhline(y=325, color='r', linestyle='-')\n\n# Draw a horizontal line at y=330\nax.axhline(y=330, color='r', linestyle='-')\n\n# Draw a horizontal line at y=335\nax.axhline(y=335, color='r', linestyle='-')\n\n# Draw a horizontal line at y=340\nax.axhline(y=340, color='r', linestyle='-')\n\n# Draw a horizontal line at y=345\nax.axhline(y=345, color='r', linestyle='-')\n\n# Draw a horizontal line at y=350\nax.axhline(y=350, color='r', linestyle='-')\n\n# Draw a horizontal line at y=355\nax.axhline(y=355, color='r', linestyle='-')\n\n# Draw a horizontal line at y=360\nax.axhline(y=360, color='r', linestyle='-')\n\n# Draw a horizontal line at y=365\nax.axhline(y=365, color='r', linestyle='-')\n\n# Draw a horizontal line at y=370\nax.axhline(y=370, color='r', linestyle='-')\n\n# Draw a horizontal line at y=375\nax.axhline(y=375, color='r', linestyle='-')\n\n# Draw a horizontal line at y=380\nax.axhline(y=380, color='r', linestyle='-')\n\n# Draw a horizontal line at y=385\nax.axhline(y=385, color='r', linestyle='-')\n\n# Draw a horizontal line at y=390\nax.axhline(y=390, color='r', linestyle='-')\n\n# Draw a horizontal line at y=395\nax.axhline(y=395, color='r', linestyle='-')\n\n# Draw a horizontal line at y=400\nax.axhline(y=400, color='r', linestyle='-')\n\n# Draw a horizontal line at y=405\nax.axhline(y=405, color='r', linestyle='-')\n\n# Draw a horizontal line at y=410\nax.axhline(y=410, color='r', linestyle='-')\n\n# Draw a horizontal line at y=415\nax.axhline(y=415, color='r', linestyle='-')\n\n# Draw a horizontal line at y=420\nax.axhline(y=420, color='r', linestyle='-')\n\n# Draw a horizontal line at y=425\nax.axhline(y=425, color='r', linestyle='-')\n\n# Draw a horizontal line at y=430\nax.axhline(y=430, color='r', linestyle='-')\n\n# Draw a horizontal line at y=435\nax.axhline(y=435, color='r', linestyle='-')\n\n# Draw a horizontal line at y=440\nax.axhline(y=440, color='r', linestyle='-')\n\n# Draw a horizontal line at y=445\nax.axhline(y=445, color='r', linestyle='-')\n\n# Draw a horizontal line at y=450\nax.axhline(y=450, color='r', linestyle='-')\n\n# Draw a horizontal line at y=455\nax.axhline(y=455, color='r', linestyle='-')\n\n# Draw a horizontal line at y=460\nax.axhline(y=460, color='r', linestyle='-')\n\n# Draw a horizontal line at y=465\nax.axhline(y=465, color='r', linestyle='-')\n\n# Draw a horizontal line at y=470\nax.axhline(y=470, color='r', linestyle='-')\n\n# Draw a horizontal line at y=475\nax.axhline(y=475, color='r', linestyle='-')\n\n# Draw a horizontal line at y=480\nax.axhline(y=480, color='r', linestyle='-')\n\n# Draw a horizontal line at y=485\nax.axhline(y=485, color='r', linestyle='-')\n\n# Draw a horizontal line at y=490\nax.axhline(y=490, color='r', linestyle='-')\n\n# Draw a horizontal line at y=495\nax.axhline(y=495, color='r', linestyle='-')\n\n# Draw a horizontal line at y=500\nax.axhline(y=500, color='r', linestyle='-')\n\n# Draw a horizontal line at y=505\nax.axhline(y=505, color='r', linestyle='-')\n\n# Draw a horizontal line at y=510\nax.axhline(y=510, color='r', linestyle='-')\n\n# Draw a horizontal line at y=515\nax.axhline(y=515, color='r', linestyle='-')\n\n# Draw a horizontal line at y=520\nax.axhline(y=520, color='r', linestyle='-')\n\n# Draw a horizontal line at y=525\nax.axhline(y=525, color='r', linestyle='-')\n\n# Draw a horizontal line at y=530\nax.axhline(y=530, color='r', linestyle='-')\n\n# Draw a horizontal line at y=535\nax.axhline(y=535, color='r', linestyle='-')\n\n# Draw a horizontal line at y=540\nax.axhline(y=540, color='r', linestyle='-')\n\n# Draw a horizontal line at y=545\nax.axhline(y=545, color='r', linestyle='-')\n\n# Draw a horizontal line at y=550\nax.axhline(y=550, color='r', linestyle='-')\n\n# Draw a horizontal line at y=555\nax.axhline(y=555, color='r', linestyle='-')\n\n# Draw a horizontal line at y=560\nax.axhline(y=560, color='r', linestyle='-')\n\n# Draw a horizontal line at y=565\nax.axhline(y=565, color='r', linestyle='-')\n\n# Draw a horizontal line at y=570\nax.axhline(y=570, color='r', linestyle='-')\n\n# Draw a horizontal line at y=575\nax.axhline(y=575, color='r', linestyle='-')\n\n# Draw a horizontal line at y=580\nax.axhline(y=580, color='r', linestyle='-')\n\n# Draw a horizontal line at y=585\nax.axhline(y=585, color='r', linestyle='-')\n\n# Draw a horizontal line at y=590\nax.axhline(y=590, color='r', linestyle='-')\n\n# Draw a horizontal line at y=595\nax.axhline(y=595, color='r', linestyle='-')\n\n# Draw a horizontal line at y=600\nax.axhline(y=600, color='r', linestyle='-')\n\n# Draw a horizontal line at y=605\nax.axhline(y=605, color='r', linestyle='-')\n\n# Draw a horizontal line at y=610\nax.axhline(y=610, color='r', linestyle='-')\n\n# Draw a horizontal line at y=615\nax.axhline(y=615, color='r', linestyle='-')\n\n# Draw a horizontal line at y=620\nax.axhline(y=620, color='r', linestyle='-')\n\n# Draw a horizontal line at y=625\nax.axhline(y=625, color='r', linestyle='-')\n\n# Draw a horizontal line at y=630\nax.axhline(y=630, color='r', linestyle='-')\n\n# Draw a horizontal line at y=635\nax.axhline(y=635, color='r', linestyle='-')\n\n# Draw a horizontal line at y=640\nax.axhline(y=640, color='r', linestyle='-')\n\n# Draw a horizontal line at y=645\nax.axhline(y=645, color='r', linestyle='-')\n\n# Draw a horizontal line at y=650\nax.axhline(y=650, color='r', linestyle='-')\n\n# Draw a horizontal line at y=655\nax.axhline(y=655, color='r', linestyle='-')\n\n# Draw a horizontal line at y=660\nax.axhline(y=660, color='r', linestyle='-')\n\n# Draw a horizontal line at y=665\nax.axhline(y=665, color='r', linestyle='-')\n\n# Draw a horizontal line at y=670\nax.axhline(y=670, color='r', linestyle='-')\n\n# Draw a horizontal line at y=675\nax.axhline(y=675, color='r', linestyle='-')\n\n# Draw a horizontal line at y=680\nax.axhline(y=680, color='r', linestyle='-')\n\n# Draw a horizontal line at y=685\nax.axhline(y=685, color='r', linestyle='-')\n\n# Draw a horizontal line at y=690\nax.axhline(y=690, color='r', linestyle='-')\n\n# Draw a horizontal line at y=695\nax.axhline(y=695, color='r', linestyle='-')\n\n# Draw a horizontal line at y=700\nax.axhline(y=700, color='r',"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [2.3, 1.8, 2.1, 2.6, 2.2, 2.4]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Mean')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Run Performance')\n\n# Set the x-axis label\nax.set_xlabel('Run')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the data for the plot\nx = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\ny = [50, 60, 70, 80, 90, 100, 90, 80, 70, 60]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data for the plots\ndata = {\n    'AR': [0.2, 0.4, 0.6, 0.8],\n    'LSTMAlpha': [0.3, 0.5, 0.7, 0.9],\n    'LSTMBeta': [0.1, 0.3, 0.5, 0.7],\n    'AE': [0.2, 0.4, 0.6, 0.8],\n    'EncDecAD': [0.1, 0.3, 0.5, 0.7],\n    'SRCNN': [0.2, 0.4, 0.6, 0.8],\n    'AnomalyTransformer': [0.1, 0.3, 0.5, 0.7],\n    'TimesNet': [0.2, 0.4, 0.6, 0.8],\n    'Donut': [0.1, 0.3, 0.5, 0.7],\n    'TFAD': [0.2, 0.4, 0.6, 0.8]\n}\n\n# Plot the data\nfor key, value in data.items():\n    ax.plot(value, label=key)\n\n# Set the title and labels\nax.set_title('Plot of Data')\nax.set_xlabel('Time (one by one)')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data\ndata = {\n    'Bert Base': [0.8, 0.9, 0.7, 0.6, 0.5],\n    'MacBERT': [0.7, 0.8, 0.6, 0.5, 0.4],\n    'English HLM': [0.6, 0.7, 0.5, 0.4, 0.3]\n}\n\n# Plot the data\nfor key, value in data.items():\n    ax.plot(value, label=key)\n\n# Set the title and labels\nax.set_title('BERT Sentences')\nax.set_xlabel('Sentences')\nax.set_ylabel('\u03b4 (m/s)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Define the data for the plots\ndata1 = [2.5, 2.4, 2.2]\ndata2 = [0.7, 0.6, 0.8]\ndata3 = [2.5, 2.4, 2.2]\ndata4 = [0.7, 0.6, 0.8]\n\n# Plot the data on the first subplot\naxes[0, 0].bar(range(len(data1)), data1, color='pink')\naxes[0, 0].set_title('Our Model')\n\n# Plot the data on the second subplot\naxes[0, 1].bar(range(len(data2)), data2, color='lightblue')\naxes[0, 1].set_title('NTM+CL')\n\n# Plot the data on the third subplot\naxes[1, 0].bar(range(len(data3)), data3, color='pink')\naxes[1, 0].set_title('Our Model')\n\n# Plot the data on the fourth subplot\naxes[1, 1].bar(range(len(data4)), data4, color='lightblue')\naxes[1, 1].set_title('NTM+CL')\n\n# Set the y-axis limits for all subplots\nfor ax in axes.flat:\n    ax.set_ylim(0.5, 2.8)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ngroups = ['target', 'control']\nmetrics = ['Digit span', 'Lexical decision', 'Lexical decision', 'Reaction time', 'Trail making']\nvalues = [7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ncolors = ['blue', 'orange']\n\n# Create subplots\nfig, axes = plt.subplots(2, 3, figsize=(10, 5))\n\n# Plot 1: Digit span\naxes[0, 0].bar(groups, values[:2], color=colors)\naxes[0, 0].set_title('Digit span')\naxes[0, 0].set_xlabel('Group')\naxes[0, 0].set_ylabel('Correct word reaction time')\n\n# Plot 2: Lexical decision\naxes[0, 1].bar(groups, values[2:4], color=colors)\naxes[0, 1].set_title('Lexical decision')\naxes[0, 1].set_xlabel('Group')\naxes[0, 1].set_ylabel('Correct response ratio')\n\n# Plot 3: Lexical decision (repeated)\naxes[0, 2].bar(groups, values[4:6], color=colors)\naxes[0, 2].set_title('Lexical decision')\naxes[0, 2].set_xlabel('Group')\naxes[0, 2].set_ylabel('Reaction time')\n\n# Plot 4: Reaction time\naxes[1, 0].bar(groups, values[6:8], color=colors)\naxes[1, 0].set_title('Reaction time')\naxes[1, 0].set_xlabel('Group')\naxes[1, 0].set_ylabel('Time per tap [s]')\n\n# Plot 5: Trail making\naxes[1, 1].bar(groups, values[8:10], color=colors)\naxes[1, 1].set_title('Trail making')\naxes[1, 1].set_xlabel('Group')\naxes[1, 1].set_ylabel('Time per tap [s]')\n\n# Plot 6: Time per tap [s]\naxes[1, 2].bar(groups, values[10:12], color=colors)\naxes[1, 2].set_title('Time per tap [s]')\naxes[1, 2].set_xlabel('Group')\naxes[1, 2].set_ylabel('Time per tap [s]')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Methods')\n\n# Set the x-axis label\nax.set_xlabel('Prediction Accuracy vD1')\n\n# Set the y-axis label\nax.set_ylabel('Method')\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Draw a rectangle\nrect = plt.Rectangle((20, 80), 60, 20, color='brown')\nax.add_patch(rect)\n\n# Draw another rectangle\nrect = plt.Rectangle((40, 60), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((60, 40), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((80, 20), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 10), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 30), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 50), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 70), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 90), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 80), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 60), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 40), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 20), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 10), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 30), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 50), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 70), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 90), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 70), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 50), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 30), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 10), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 80), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 60), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 40), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 20), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 10), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 50), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 30), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 10), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 80), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 60), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 40), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 20), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 10), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 80), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 30), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 10), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 80), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 60), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 40), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 20), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 80), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 60), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 40), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 10), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 80), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 60), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 40), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 20), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 80), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 60), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 40), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 20), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 70), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 50), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 30), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 10), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 80), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 60), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 40), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 20), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 10), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 50), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 30), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 10), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 80), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 60), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 40), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 20), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 10), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 80), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 30), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 10), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 80), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 60), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 40), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 20), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 80), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 60), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 40), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 10), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 80), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 60), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 40), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 20), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 80), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 60), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 40), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 20), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 70), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 50), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 30), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 10), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 80), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 60), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 40), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 20), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 10), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 50), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 30), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 10), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 80), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 60), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 40), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 20), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 10), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 80), 20, 20, color='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 30), 20, 20, color='brown')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 10), 20, 20, color='green')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 80), 20, 20, color='red')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 60), 20, 20, color='blue')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((90, 40), 20, 20, color='purple')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 20), 20, 20, color='orange')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((30, 80), 20, 20, color='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((50, 60), 20, 20, color='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((70, 40), 20, 20, color='yellow')\nax"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\nx = [50, 100, 150, 200, 350]\ny = [0.04, 0.04, 0.02, 0.02, 0.06]\n\n# Plot the data\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Define the data\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 50.3, 29.5]\n\n# Plot the data\nfor i, activity in enumerate(activities):\n    ax.bar(activity, durations[i], color='blue')\n\n# Set the title\nax.set_title('Daily Activity Durations')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Mean Value')\n\n# Create a bar chart with the data\nax.bar(['Low Intensity', 'High Intensity', 'Recovery', 'Nutrition', 'Environment'], [2.1, 2.3, 2.5, 2.7, 2.9], color='blue')\nax.bar(['Low Intensity', 'High Intensity', 'Recovery', 'Nutrition', 'Environment'], [2.2, 2.4, 2.6, 2.8, 3.0], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Intervention')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-40, 40)\n\n# Set the y-axis limits\nax.set_ylim(-0.4, 7.6)\n\n# Set the x-axis ticks\nax.set_xticks(range(-40, 50, 20))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 8, 2))\n\n# Set the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]')\n\n# Set the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]')\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='k', linestyle='-')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='k', linestyle='-')\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((-30, 5), 20, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((-20, 4), 10, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((-10, 3), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((0, 2), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((10, 1), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((20, 0), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((30, -1), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((40, -2), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((50, -3), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((60, -4), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((70, -5), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((80, -6), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((90, -7), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((100, -8), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((110, -9), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((120, -10), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((130, -11), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((140, -12), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((150, -13), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((160, -14), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((170, -15), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((180, -16), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((190, -17), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((200, -18), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((210, -19), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((220, -20), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((230, -21), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((240, -22), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((250, -23), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((260, -24), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((270, -25), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((280, -26), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((290, -27), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((300, -28), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((310, -29), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((320, -30), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((330, -31), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((340, -32), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((350, -33), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((360, -34), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((370, -35), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((380, -36), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((390, -37), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((400, -38), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((410, -39), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((420, -40), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((430, -41), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((440, -42), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((450, -43), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((460, -44), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((470, -45), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((480, -46), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((490, -47), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((500, -48), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((510, -49), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((520, -50), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((530, -51), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((540, -52), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((550, -53), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((560, -54), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((570, -55), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((580, -56), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((590, -57), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((600, -58), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((610, -59), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((620, -60), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((630, -61), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((640, -62), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((650, -63), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((660, -64), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((670, -65), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((680, -66), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((690, -67), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((700, -68), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((710, -69), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((720, -70), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((730, -71), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((740, -72), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((750, -73), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((760, -74), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((770, -75), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((780, -76), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((790, -77), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((800, -78), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((810, -79), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((820, -80), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((830, -81), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((840, -82), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((850, -83), 5, 1, fill=False, edgecolor='b', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((860, -84), 5, 1, fill=False, edgecolor='g', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((870, -85), 5, 1, fill=False, edgecolor='r', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((880, -86), 5, 1, fill=False, edgecolor='b', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((890, -87), 5, 1, fill=False, edgecolor='g', linestyle='--'))\n\n# Add a rectangle with a solid border\nax.add_patch(plt.Rectangle((900, -88), 5, 1, fill=False, edgecolor='r', linestyle='-'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((910"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\ny = [25, 45, 35, 15]\ncolors = ['blue', 'purple', 'orange', 'red']\n\n# Plot the data\nfor i in range(len(x)):\n    ax.barh(y[i], 10, left=i*10, height=5, color=colors[i])\n\n# Set the title and labels\nax.set_title('Performance Gap (%)')\nax.set_xlabel('Performance Gap (%)')\nax.set_ylabel('Team')\n\n# Set the x-axis limits\nax.set_xlim(0, 40)\n\n# Set the y-axis limits\nax.set_ylim(0, 70)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\n\"\"\"\n=====================================\nHuman vs Machine Learning Models\n=====================================\n\nThis example demonstrates how to create a bar chart with multiple subplots.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(42)\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 4, figsize=(12.0, 3.0))\n\n# Define the data\nmodels = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\nhuman_scores = [0.2, 0.4, 0.6, 0.8, 0.2, 0.4]\nmodel_scores = [0.5, 0.7, 0.9, 0.1, 0.3, 0.5]\n\n# Plot the data\nfor ax, model, human_score, model_score in zip(axs, models, human_scores, model_scores):\n    ax.barh(model, model_score, color='r')\n    ax.barh(model, human_score, left=model_score, color='b')\n    ax.set_xlabel('Score')\n    ax.set_title(f'{model} -')\n\n# Set the limits of the x-axis\naxs[0].set_xlim(0, 1)\naxs[1].set_xlim(0, 1)\naxs[2].set_xlim(0, 1)\naxs[3].set_xlim(0, 1)\n\n# Set the limits of the y-axis\naxs[0].set_ylim(-0.5, len(models) - 0.5)\naxs[1].set_ylim(-0.5, len(models) - 0.5)\naxs[2].set_ylim(-0.5, len(models) - 0.5)\naxs[3].set_ylim(-0.5, len(models) - 0.5)\n\n# Add a horizontal line between each subplot\nfor i in range(1, 4):\n    axs[i].plot([0, 1], [-0.5, len(models) - 0.5], 'k-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Set the x-axis limits\nax.set_xlim(2.0, 5.0)\n\n# Set the y-axis limits\nax.set_ylim(-60, 60)\n\n# Draw a horizontal line at y=0\nax.axhline(y=0, color='k', linestyle='-')\n\n# Draw a vertical line at x=0\nax.axvline(x=0, color='k', linestyle='-')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='orange')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='purple')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='brown')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='pink')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='cyan')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='magenta')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='yellow')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='white')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='gray')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='brown')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='indigo')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='violet')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='azure')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='crimson')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='coral')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='chartreuse')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='chocolate')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkblue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkgreen')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkgrey')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkkhaki')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkmagenta')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkolivegreen')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkorange')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkorchid')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkred')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darksalmon')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkseagreen')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkslateblue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkslategray')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkturquoise')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkviolet')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='deeppink')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='deepskyblue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='dimgray')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='dimgrey')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='dodgerblue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='firebrick')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='floralwhite')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='forestgreen')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='gainsboro')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='ghostwhite')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='goldenrod')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='gray')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='greenyellow')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='grey')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='honeydew')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='hotpink')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='indianred')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('SE (bps/HZ) vs CEE (dB)')\n\n# Set the x-axis label\nax.set_xlabel('CEE (dB)')\n\n# Set the y-axis label\nax.set_ylabel('SE (bps/HZ)')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick labels\nax.set_xticks([0, -10])\nax.set_yticks([5, 7, 9, 11])\n\n# Set the tick labels\nax.set_xticklabels(['0dB', '-10dB'])\nax.set_yticklabels(['5', '7', '9', '11'])\n\n# Set the rectangle properties\nrects = [plt.Rectangle((0, 0), 2, 2, color='red'), plt.Rectangle((0, 0), 2, 2, color='blue'), plt.Rectangle((0, 0), 2, 2, color='green')]\n\n# Add the rectangles to the plot\nfor rect in rects:\n    ax.add_patch(rect)\n\n# Set the legend\nax.legend(['GMML (25%-75%)', 'GML (25%-75%)', 'AO (25%-75%)'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(25, 8))\n\n# Define the data for each subplot\ndata_linear = [np.random.rand(10, 10) * 100 for _ in range(3)]\ndata_exponential = [np.random.rand(10, 10) * 100 for _ in range(3)]\ndata_sigmoidal = [np.random.rand(10, 10) * 100 for _ in range(3)]\n\n# Plot the data\nfor ax, data in zip(axs, [data_linear, data_exponential, data_sigmoidal]):\n    for i in range(len(data)):\n        ax.plot(data[i], label=f'Data {i+1}')\n    ax.set_title('Linear travel times')\n    ax.legend()\n\n# Set the title of the figure\nfig.suptitle('Travel times')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Modality Performance')\n\n# Set the x-axis label\nax.set_xlabel('Modality')\n\n# Set the y-axis label\nax.set_ylabel('AUC')\n\n# Define the data for the plot\nmodality = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\nauc = [0.92, 0.88, 0.95]\n\n# Define the colors for the bars\ncolors = ['blue', 'green', 'pink']\n\n# Create the bar chart\nbars = ax.bar(modality, auc, color=colors)\n\n# Add a legend\nax.legend(['Hospital 1', 'Hospital 2', 'Hospital 3'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('0.25 HIAR')\n\n# Draw a rectangle with a specific color\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='orange'))\n\n# Draw a circle with a specific color\ncircle = plt.Circle((0.5, 0.5), 0.1, color='red')\nax.add_artist(circle)\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x and y ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Set the x and y labels\nax.set_xlabel('PSNR (dB)')\nax.set_ylabel('SNR (dB)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the colors for the plots\ncolors = ['blue', 'red']\n\n# Define the data for the plots\ndata = [np.random.rand(100) * 80 for _ in range(len(colors))]\n\n# Plot the data\nfor i, color in enumerate(colors):\n    ax.plot(data[i], color=color)\n\n# Set the title of the plot\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Output')\n\n# Set the x-axis limits\nax.set_xlim(-80, 80)\n\n# Set the y-axis limits\nax.set_ylim(-80, 80)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('coolwarm')\n\n# Create a grid of points\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the values for the plot\nZ = np.sin(X * Y) + np.cos(X * Y)\n\n# Plot the values\ncax = ax.imshow(Z, interpolation='nearest', cmap=cmap, origin='lower', extent=[0, 1, 0, 1])\n\n# Add a color bar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title(r'$\\lambda(x, z)$')\n\n# Set the x and y labels\nax.set_xlabel('$x_1$')\nax.set_ylabel('$x_2$')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the x-axis and y-axis ticks\nax.set_xticks(range(50, 170, 10))\nax.set_yticks(range(50, 110, 10))\n\n# Draw a rectangle for the legend\nlegend_rect = plt.Rectangle((140, 90), 20, 10, color='white', edgecolor='black')\nax.add_patch(legend_rect)\n\n# Add text to the legend\nax.text(145, 95, 'Female', color='blue')\nax.text(145, 85, 'Male', color='red')\n\n# Draw a circle with a blue border\ncircle_blue = plt.Circle((80, 80), 30, color='blue', fill=False)\nax.add_artist(circle_blue)\n\n# Draw a circle with a red border\ncircle_red = plt.Circle((120, 80), 30, color='red', fill=False)\nax.add_artist(circle_red)\n\n# Set the title of the plot\nax.set_title('DBP (mmHg) vs. SBP (mmHg)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nx = np.linspace(-4, 4, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the colors for each circle\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n\n# Draw concentric circles with different radii and colors\nfor i, color in enumerate(colors):\n    circle = plt.Circle((5, 5), 10 - 2 * i, color=color)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='pink')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Spearman Coefficient')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a horizontal line at y=0.5\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Create a horizontal line at y=0.6\nax.axhline(y=0.6, color='g', linestyle='-')\n\n# Create a horizontal line at y=0.7\nax.axhline(y=0.7, color='b', linestyle='-')\n\n# Create a horizontal line at y=0.8\nax.axhline(y=0.8, color='y', linestyle='-')\n\n# Create a horizontal line at y=0.9\nax.axhline(y=0.9, color='m', linestyle='-')\n\n# Create a horizontal line at y=1.0\nax.axhline(y=1.0, color='c', linestyle='-')\n\n# Create a horizontal line at y=1.1\nax.axhline(y=1.1, color='k', linestyle='-')\n\n# Create a horizontal line at y=1.2\nax.axhline(y=1.2, color='w', linestyle='-')\n\n# Create a horizontal line at y=1.3\nax.axhline(y=1.3, color='orange', linestyle='-')\n\n# Create a horizontal line at y=1.4\nax.axhline(y=1.4, color='purple', linestyle='-')\n\n# Create a horizontal line at y=1.5\nax.axhline(y=1.5, color='pink', linestyle='-')\n\n# Create a horizontal line at y=1.6\nax.axhline(y=1.6, color='brown', linestyle='-')\n\n# Create a horizontal line at y=1.7\nax.axhline(y=1.7, color='grey', linestyle='-')\n\n# Create a horizontal line at y=1.8\nax.axhline(y=1.8, color='cyan', linestyle='-')\n\n# Create a horizontal line at y=1.9\nax.axhline(y=1.9, color='lime', linestyle='-')\n\n# Create a horizontal line at y=2.0\nax.axhline(y=2.0, color='navy', linestyle='-')\n\n# Create a horizontal line at y=2.1\nax.axhline(y=2.1, color='olive', linestyle='-')\n\n# Create a horizontal line at y=2.2\nax.axhline(y=2.2, color='salmon', linestyle='-')\n\n# Create a horizontal line at y=2.3\nax.axhline(y=2.3, color='teal', linestyle='-')\n\n# Create a horizontal line at y=2.4\nax.axhline(y=2.4, color='violet', linestyle='-')\n\n# Create a horizontal line at y=2.5\nax.axhline(y=2.5, color='indigo', linestyle='-')\n\n# Create a horizontal line at y=2.6\nax.axhline(y=2.6, color='maroon', linestyle='-')\n\n# Create a horizontal line at y=2.7\nax.axhline(y=2.7, color='coral', linestyle='-')\n\n# Create a horizontal line at y=2.8\nax.axhline(y=2.8, color='darkblue', linestyle='-')\n\n# Create a horizontal line at y=2.9\nax.axhline(y=2.9, color='darkgreen', linestyle='-')\n\n# Create a horizontal line at y=3.0\nax.axhline(y=3.0, color='darkred', linestyle='-')\n\n# Create a horizontal line at y=3.1\nax.axhline(y=3.1, color='darkorange', linestyle='-')\n\n# Create a horizontal line at y=3.2\nax.axhline(y=3.2, color='darkcyan', linestyle='-')\n\n# Create a horizontal line at y=3.3\nax.axhline(y=3.3, color='darkmagenta', linestyle='-')\n\n# Create a horizontal line at y=3.4\nax.axhline(y=3.4, color='darkviolet', linestyle='-')\n\n# Create a horizontal line at y=3.5\nax.axhline(y=3.5, color='darkslategray', linestyle='-')\n\n# Create a horizontal line at y=3.6\nax.axhline(y=3.6, color='darkseagreen', linestyle='-')\n\n# Create a horizontal line at y=3.7\nax.axhline(y=3.7, color='darkturquoise', linestyle='-')\n\n# Create a horizontal line at y=3.8\nax.axhline(y=3.8, color='darkslateblue', linestyle='-')\n\n# Create a horizontal line at y=3.9\nax.axhline(y=3.9, color='darkolivegreen', linestyle='-')\n\n# Create a horizontal line at y=4.0\nax.axhline(y=4.0, color='darkkhaki', linestyle='-')\n\n# Create a horizontal line at y=4.1\nax.axhline(y=4.1, color='darkgoldenrod', linestyle='-')\n\n# Create a horizontal line at y=4.2\nax.axhline(y=4.2, color='darkorchid', linestyle='-')\n\n# Create a horizontal line at y=4.3\nax.axhline(y=4.3, color='darkslateblack', linestyle='-')\n\n# Create a horizontal line at y=4.4\nax.axhline(y=4.4, color='darkblue', linestyle='-')\n\n# Create a horizontal line at y=4.5\nax.axhline(y=4.5, color='darkgreen', linestyle='-')\n\n# Create a horizontal line at y=4.6\nax.axhline(y=4.6, color='darkred', linestyle='-')\n\n# Create a horizontal line at y=4.7\nax.axhline(y=4.7, color='darkorange', linestyle='-')\n\n# Create a horizontal line at y=4.8\nax.axhline(y=4.8, color='darkcyan', linestyle='-')\n\n# Create a horizontal line at y=4.9\nax.axhline(y=4.9, color='darkmagenta', linestyle='-')\n\n# Create a horizontal line at y=5.0\nax.axhline(y=5.0, color='darkviolet', linestyle='-')\n\n# Create a horizontal line at y=5.1\nax.axhline(y=5.1, color='darkslategray', linestyle='-')\n\n# Create a horizontal line at y=5.2\nax.axhline(y=5.2, color='darkseagreen', linestyle='-')\n\n# Create a horizontal line at y=5.3\nax.axhline(y=5.3, color='darkturquoise', linestyle='-')\n\n# Create a horizontal line at y=5.4\nax.axhline(y=5.4, color='darkslateblue', linestyle='-')\n\n# Create a horizontal line at y=5.5\nax.axhline(y=5.5, color='darkolivegreen', linestyle='-')\n\n# Create a horizontal line at y=5.6\nax.axhline(y=5.6, color='darkkhaki', linestyle='-')\n\n# Create a horizontal line at y=5.7\nax.axhline(y=5.7, color='darkgoldenrod', linestyle='-')\n\n# Create a horizontal line at y=5.8\nax.axhline(y=5.8, color='darkorchid', linestyle='-')\n\n# Create a horizontal line at y=5.9\nax.axhline(y=5.9, color='darkslateblack', linestyle='-')\n\n# Create a horizontal line at y=6.0\nax.axhline(y=6.0, color='darkblue', linestyle='-')\n\n# Create a horizontal line at y=6.1\nax.axhline(y=6.1, color='darkgreen', linestyle='-')\n\n# Create a horizontal line at y=6.2\nax.axhline(y=6.2, color='darkred', linestyle='-')\n\n# Create a horizontal line at y=6.3\nax.axhline(y=6.3, color='darkorange', linestyle='-')\n\n# Create a horizontal line at y=6.4\nax.axhline(y=6.4, color='darkcyan', linestyle='-')\n\n# Create a horizontal line at y=6.5\nax.axhline(y=6.5, color='darkmagenta', linestyle='-')\n\n# Create a horizontal line at y=6.6\nax.axhline(y=6.6, color='darkviolet', linestyle='-')\n\n# Create a horizontal line at y=6.7\nax.axhline(y=6.7, color='darkslategray', linestyle='-')\n\n# Create a horizontal line at y=6.8\nax.axhline(y=6.8, color='darkseagreen', linestyle='-')\n\n# Create a horizontal line at y=6.9\nax.axhline(y=6.9, color='darkturquoise', linestyle='-')\n\n# Create a horizontal line at y=7.0\nax.axhline(y=7.0, color='darkslateblue', linestyle='-')\n\n# Create a horizontal line at y=7.1\nax.axhline(y=7.1, color='darkolivegreen', linestyle='-')\n\n# Create a horizontal line at y=7.2\nax.axhline(y=7.2, color='darkkhaki', linestyle='-')\n\n# Create a horizontal line at y=7.3\nax.axhline(y=7.3, color='darkgoldenrod', linestyle='-')\n\n# Create a horizontal line at y=7.4\nax.axhline(y=7.4, color='darkorchid', linestyle='-')\n\n# Create a horizontal line at y=7.5\nax.axhline(y=7.5, color='darkslateblack', linestyle='-')\n\n# Create a horizontal line at y=7.6\nax.axhline(y=7.6, color='darkblue', linestyle='-')\n\n# Create a horizontal line at y=7.7\nax.axhline(y=7.7, color='darkgreen', linestyle='-')\n\n# Create a horizontal line at y=7.8\nax.axhline(y=7.8, color='darkred', linestyle='-')\n\n# Create a horizontal line at y=7.9\nax.axhline(y=7.9, color='darkorange', linestyle='-')\n\n# Create a horizontal line at y=8.0\nax.axhline(y=8.0, color='darkcyan', linestyle='-')\n\n# Create a horizontal line at y=8.1\nax.axhline(y=8.1, color='darkmagenta', linestyle='-')\n\n# Create a horizontal line at y=8.2\nax.axhline(y=8.2, color='darkviolet', linestyle='-')\n\n# Create a horizontal line at y=8.3\nax.axhline(y=8.3, color='darkslategray', linestyle='-')\n\n# Create a horizontal line at y=8.4\nax.axhline(y=8.4, color='darkseagreen', linestyle='-')\n\n# Create a horizontal line at y=8.5\nax.axhline(y=8.5, color='darkturquoise', linestyle='-')\n\n# Create a horizontal line at y=8.6\nax.axhline(y=8.6, color='darkslateblue', linestyle='-')\n\n# Create a horizontal line at y=8.7\nax.axhline(y=8.7, color='darkolivegreen', linestyle='-')\n\n# Create a horizontal line at y=8.8\nax.axhline(y=8.8, color='darkkhaki', linestyle='-')\n\n# Create a horizontal line at y=8.9\nax.axhline(y=8.9, color='darkgoldenrod', linestyle='-')\n\n# Create a horizontal line at y=9.0\nax.axhline(y=9.0, color='darkorchid', linestyle='-')\n\n# Create a horizontal line at y=9.1\nax.axhline(y=9.1, color='darkslateblack', linestyle='-')\n\n# Create a horizontal line at y=9.2\nax.axhline(y=9.2, color='darkblue', linestyle='-')\n\n# Create a horizontal line at y=9.3\nax.axhline(y=9.3, color='darkgreen', linestyle='-')\n\n# Create a horizontal line at y=9.4\nax.axhline(y=9.4, color='darkred', linestyle='-')\n\n# Create a horizontal line at y=9.5\nax.axhline(y=9.5, color='darkorange', linestyle='-')\n\n# Create a horizontal line at y=9.6\nax.axhline(y=9.6, color='darkcyan', linestyle='-')\n\n# Create a horizontal line at y=9.7\nax.axhline(y=9.7, color='darkmagenta', linestyle='-')\n\n# Create a horizontal line at y=9.8\nax.axhline(y=9.8, color='darkviolet', linestyle='-')\n\n# Create a horizontal line at y=9.9\nax.axhline(y=9.9, color='darkslategray', linestyle='-')\n\n# Create a horizontal line at y=10.0\nax.axhline(y=10.0, color='darkseagreen', linestyle='-')\n\n# Create a horizontal line at y=10.1\nax.axhline(y=10.1, color='darkturquoise', linestyle='-')\n\n# Create a horizontal line at y=10.2\nax.axhline(y=10.2, color='darkslateblue', linestyle='-')\n\n# Create a horizontal line at y=10.3\nax.axhline(y=10.3, color='darkolivegreen', linestyle='-')\n\n# Create a horizontal line at y=10.4\nax.axhline(y=10.4, color='darkkhaki', linestyle='-')\n\n# Create a horizontal line at y=10.5\nax.axhline(y=10.5, color='darkgoldenrod', linestyle='-')\n\n# Create a horizontal line at y=10.6\nax.axhline(y=10.6, color='darkorchid', linestyle='-')\n\n# Create a horizontal line at y=10.7\nax.axhline(y=10.7, color='darkslateblack', linestyle='-')\n\n# Create a horizontal line at y=10.8\nax.axhline(y=10.8, color='darkblue', linestyle='-')\n\n# Create a horizontal line at y=10.9\nax.axhline(y=10.9, color='darkgreen', linestyle='-')\n\n# Create a horizontal line at y=11.0\nax.axhline(y=11.0, color='darkred', linestyle='-')\n\n# Create a horizontal line at y=11.1\nax.axhline(y=11.1, color='darkorange', linestyle='-')\n\n# Create a horizontal line at y=11.2\nax.axhline(y=11.2, color='darkcyan', linestyle='-')\n\n# Create a horizontal line at y=11.3\nax.axhline(y=11.3, color='darkmagenta', linestyle='-')\n\n# Create a horizontal line at y=11.4\nax.axhline(y=11.4, color='darkviolet', linestyle='-')\n\n# Create a horizontal line at y=11.5\nax.axhline(y=11.5, color='darkslategray', linestyle='-')\n\n# Create a horizontal line at y=11.6\nax.axhline(y=11.6, color='darkseagreen', linestyle='-')\n\n# Create a horizontal line at y=11.7\nax.axhline(y=11.7, color='darkturquoise', linestyle='-')\n\n# Create a horizontal line at y=11.8\nax.axhline(y=11.8, color='darkslateblue', linestyle='-')\n\n# Create a horizontal line at y=11.9\nax.axhline(y=11.9, color='darkolivegreen', linestyle='-')\n\n# Create a horizontal line at y=12.0\nax.axhline(y=12.0, color='darkkhaki', linestyle='-')\n\n# Create a horizontal line at y=12.1\nax.axhline(y=12.1, color='darkgoldenrod', linestyle='-')\n\n# Create a horizontal line at y=12.2\nax.axhline(y=12.2, color='darkorchid', linestyle='-')\n\n# Create a horizontal line at y=12.3\nax.axhline(y=12.3, color='darkslateblack', linestyle='-')\n\n# Create a horizontal line at y=12.4\nax.axhline(y=12.4, color='darkblue', linestyle='-')\n\n# Create a horizontal line at y=12.5\nax.axhline(y=12.5, color='darkgreen', linestyle='-')\n\n# Create a horizontal line at y=12.6\nax.axhline(y=12.6, color='darkred', linestyle='-')\n\n# Create a horizontal line at y=12.7\nax.axhline(y=12.7, color='darkorange', linestyle='-')\n\n# Create a horizontal line at y=12.8\nax.axhline(y=12.8, color='darkcyan', linestyle='-')\n\n# Create a horizontal line at y=12.9\nax.axhline(y=12.9, color='darkmagenta', linestyle='-')\n\n# Create a horizontal line at y=13.0\nax.axhline(y=13.0, color='darkviolet', linestyle='-')\n\n# Create a horizontal line at y=13.1\nax.axhline(y=13.1, color='darkslategray', linestyle='-')\n\n# Create a horizontal line at y=13.2\nax.axhline(y=13.2, color='darkseagreen', linestyle='-')\n\n# Create a horizontal line at y=13.3\nax.axhline(y"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(7, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.7)\n\n# Set the x-axis ticks\nax.set_xticks(range(8, 15))\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['7', '8', '9', '10', '11', '12', '13', '14', '15'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8'])\n\n# Set the title of the plot\nax.set_title('Price Distribution')\n\n# Set the color bar\ncbar = fig.colorbar(ax.imshow([[0.1, 0.2], [0.3, 0.4]], cmap='viridis'))\n\n# Set the color bar label\ncbar.set_label('Color Bar Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 14)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Set the title of the plot\nax.set_title('Gucci vs Chanel')\n\n# Set the color bar\ncbar = fig.colorbar(ax.imshow([[0.5, 0.5], [0.5, 0.5]], cmap='viridis'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\n\"\"\"\n=====================================\nLog Probability Distribution Plot\n=====================================\n\nThis example demonstrates how to create a log probability distribution plot using Matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.linspace(-0.5, 0.5, 100)\ny = np.exp(-x**2)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y, 'g-')\nax.set_xlabel('Log Probability')\nax.set_ylabel('Probability Density')\nax.set_title('Log Probability Distribution')\n\n# Add a legend\nax.legend(['Distributional', 'Deterministic'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [1, 2, 3, 4, 5]\ny = [5, 6, 7, 8, 9]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title\nax.set_title('Expert dimension')\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('IQM Human Normalized Score')\n\n# Set the color of the baseline\nax.axhline(y=5, color='b', linestyle='-')\n\n# Set the color of the SoftMoE (unchanged)\nax.axhline(y=6, color='g', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=7, color='m', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=8, color='c', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=9, color='y', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=10, color='k', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=11, color='w', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=12, color='r', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=13, color='violet', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=14, color='orange', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=15, color='brown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=16, color='pink', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=17, color='grey', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=18, color='cyan', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=19, color='lime', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=20, color='navy', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=21, color='maroon', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=22, color='olive', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=23, color='silver', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=24, color='gold', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=25, color='indigo', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=26, color='teal', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=27, color='aqua', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=28, color='fuchsia', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=29, color='coral', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=30, color='plum', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=31, color='azure', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=32, color='lavender', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=33, color='salmon', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=34, color='tan', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=35, color='beige', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=36, color='ivory', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=37, color='khaki', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=38, color='wheat', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=39, color='sandybrown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=40, color='chocolate', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=41, color='peru', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=42, color='burlywood', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=43, color='sienna', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=44, color='saddlebrown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=45, color='rosybrown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=46, color='moccasin', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=47, color='navajowhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=48, color='blanchedalmond', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=49, color='bisque', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=50, color='peachpuff', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=51, color='papayawhip', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=52, color='mintcream', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=53, color='azure', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=54, color='aliceblue', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=55, color='lavenderblush', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=56, color='mistyrose', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=57, color='antiquewhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=58, color='seashell', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=59, color='cornsilk', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=60, color='lemonchiffon', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=61, color='floralwhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=62, color='oldlace', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=63, color='wheat', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=64, color='linen', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=65, color='peru', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=66, color='burlywood', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=67, color='sienna', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=68, color='saddlebrown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=69, color='rosybrown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=70, color='moccasin', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=71, color='navajowhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=72, color='blanchedalmond', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=73, color='bisque', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=74, color='peachpuff', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=75, color='papayawhip', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=76, color='mintcream', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=77, color='azure', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=78, color='aliceblue', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=79, color='lavenderblush', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=80, color='mistyrose', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=81, color='antiquewhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=82, color='seashell', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=83, color='cornsilk', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=84, color='lemonchiffon', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=85, color='floralwhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=86, color='oldlace', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=87, color='wheat', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=88, color='linen', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=89, color='peru', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=90, color='burlywood', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=91, color='sienna', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=92, color='saddlebrown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=93, color='rosybrown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=94, color='moccasin', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=95, color='navajowhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=96, color='blanchedalmond', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=97, color='bisque', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=98, color='peachpuff', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=99, color='papayawhip', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=100, color='mintcream', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=101, color='azure', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=102, color='aliceblue', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=103, color='lavenderblush', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=104, color='mistyrose', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=105, color='antiquewhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=106, color='seashell', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=107, color='cornsilk', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=108, color='lemonchiffon', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=109, color='floralwhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=110, color='oldlace', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=111, color='wheat', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=112, color='linen', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=113, color='peru', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=114, color='burlywood', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=115, color='sienna', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=116, color='saddlebrown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=117, color='rosybrown', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=118, color='moccasin', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=119, color='navajowhite', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=120, color='blanchedalmond', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=121, color='bisque', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=122, color='peachpuff', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=123, color='papayawhip', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=124, color='mintcream', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=125, color='azure', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=126, color='aliceblue', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=127, color='lavenderblush', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=128, color='mistyrose', linestyle='-')\n\n# Set the color of the SoftMoE (\u2202 NumExperts)\nax.axhline(y=129, color='antiquewhite', linestyle='-')\n\n#"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\naccuracies = [0.748, 0.762, 0.709]\ncolors = ['blue', 'red', 'green']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbars = ax.bar(hospitals, accuracies, color=colors)\n\n# Add labels and title\nax.set_xlabel('Hospitals')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by hospital and method')\n\n# Add colored rectangles for each bar\nfor bar, color in zip(bars, colors):\n    ax.add_patch(plt.Rectangle((bar.get_x() - 0.05, bar.get_height()), 0.1, 0.1, color=color))\n\n# Add colored lines for each bar\nfor bar, color in zip(bars, colors):\n    ax.plot([bar.get_x(), bar.get_x() + bar.get_width()], [bar.get_height(), bar.get_height()], color=color)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plots\ngpt4_data = [10, 20, 30, 40]\nclaudie21_data = [15, 25, 35, 45]\nclaudie2_data = [20, 30, 40, 50]\nclaudie35_data = [25, 35, 45, 55]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(gpt4_data, label='GPT-4 Buyer (valuation 40)')\nax.plot(claudie21_data, label='Claude-2.1 Buyer (valuation 40)')\nax.plot(claudie2_data, label='Claude-2 Buyer (valuation 40)')\nax.plot(claudie35_data, label='GPT-3.5 Buyer (valuation 40)')\n\n# Set the limits of the y-axis\nax.set_ylim(-20, 0)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    \"[m]\": [0.96, 0.95, 0.94, 0.93, 0.92],\n    \"[\u0394R]\": [0.86, 0.85, 0.84, 0.83, 0.82],\n    \"[\u0394R -1]\": [0.78, 0.77, 0.76, 0.75, 0.74],\n    \"[none]\": [0.70, 0.69, 0.68, 0.67, 0.66]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(key, values, color='grey')\n\n# Set the title and labels\nax.set_title('DNN Performance')\nax.set_xlabel('Model')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-0.5, 2.5)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.5, 1, 1.5, 2])\n\n# Set the x-axis labels\nax.set_xticklabels(['', '', '', '', '', ''])\n\n# Set the y-axis labels\nax.set_yticklabels(['', '', '', '', ''])\n\n# Set the title of the plot\nax.set_title('Posterior Accuracy')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['a', 'b', 'c']\nperformance = [85, 82, 88]\naug = [75, 78, 80]\nte = [65, 68, 70]\nqual = [55, 58, 60]\ndiff = [45, 48, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot bars\nax.bar(categories, performance, color='blue')\nax.bar(categories, aug, bottom=performance, color='orange')\nax.bar(categories, te, bottom=[p + a for p, a in zip(performance, aug)], color='yellow')\nax.bar(categories, qual, bottom=[p + a + t for p, a, t in zip(performance, aug, te)], color='blue')\nax.bar(categories, diff, bottom=[p + a + t + q for p, a, t, q in zip(performance, aug, te, qual)], color='darkblue')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Performance')\nax.set_title('Performance Metrics')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Hyperparameters')\n\n# Set the y-axis label\nax.set_ylabel('Metric')\n\n# Define the hyperparameters and metrics\nhyperparameters = ['128/0.5/0.0001', '128/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001']\nmetrics = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create a bar chart with the hyperparameters and metrics\nax.bar(hyperparameters, metrics, color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncountries1 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [25, 18, 14, 29, 35]\n\n# Data for the second chart\ncountries2 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues2 = [20, 15, 10, 25, 30]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 2, figsize=(6.0, 6.0))\n\n# Plot the first chart\nfor i, country in enumerate(countries1):\n    axes[0].bar(country, values1[i], color=plt.cm.viridis(i/len(countries1)))\n\n# Plot the second chart\nfor i, country in enumerate(countries2):\n    axes[1].bar(country, values2[i], color=plt.cm.viridis(i/len(countries2)))\n\n# Set the title for each subplot\naxes[0].set_title('Higher Education Enrollment Rate')\naxes[1].set_title('Student-Teacher Ratio')\n\n# Set the x-axis label for each subplot\naxes[0].set_xlabel('Country')\naxes[1].set_xlabel('Country')\n\n# Set the y-axis label for each subplot\naxes[0].set_ylabel('Enrollment Rate')\naxes[1].set_ylabel('Ratio')\n\n# Set the y-axis limits for each subplot\naxes[0].set_ylim(0, 35)\naxes[1].set_ylim(0, 35)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Carbon Dioxide Emissions\nemissions_data = {\n    'Africa': [1200, 1800, 5000],\n    'South America': [1800, 3200, 5000],\n    'North America': [3200, 5000, 5000],\n    'Asia': [5000, 7000, 10400],\n    'Europe': [7000, 10400, 10400]\n}\n\n# Data for Forest Coverage Rate\nforest_data = {\n    'Africa': [21, 34, 25, 3200],\n    'South America': [34, 25, 20, 2000],\n    'North America': [25, 20, 18, 1000],\n    'Asia': [25, 20, 18, 1000],\n    'Europe': [32, 20, 18, 1000]\n}\n\n# Data for Renewable Energy Usage\nrenewable_data = {\n    'Africa': [18, 28, 25, 34],\n    'South America': [28, 25, 20, 34],\n    'North America': [25, 20, 18, 34],\n    'Asia': [25, 20, 18, 34],\n    'Europe': [34, 20, 18, 34]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot Carbon Dioxide Emissions\nfor country, emissions in emissions_data.items():\n    ax.bar(country, emissions[0], color='lightgrey')\n    ax.bar(country, emissions[1], bottom=emissions[0], color='yellowgreen')\n    ax.bar(country, emissions[2], bottom=sum(emissions[:2]), color='darkgreen')\n\n# Plot Forest Coverage Rate\nfor country, forest in forest_data.items():\n    ax.bar(country, forest[0], color='lightgrey')\n    ax.bar(country, forest[1], bottom=forest[0], color='yellowgreen')\n    ax.bar(country, forest[2], bottom=sum(forest[:2]), color='darkgreen')\n\n# Plot Renewable Energy Usage\nfor country, renewable in renewable_data.items():\n    ax.bar(country, renewable[0], color='lightgrey')\n    ax.bar(country, renewable[1], bottom=renewable[0], color='yellowgreen')\n    ax.bar(country, renewable[2], bottom=sum(renewable[:2]), color='darkgreen')\n\n# Set labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Values')\nax.set_title('Annual Carbon Dioxide Emissions')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nx = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\ny = [85, 75, 90, 60]\ncolors = ['purple', 'blue', 'red', 'yellow']\n\n# Data for the second bar chart\nx2 = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\ny2 = [75, 65, 80, 50]\n\n# Data for the third bar chart\nx3 = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\ny3 = [65, 55, 70, 40]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 1, figsize=(10.0, 9.0))\n\n# Plot the first bar chart\naxs[0].bar(x, y, color=colors)\naxs[0].set_title('a')\naxs[0].set_xlabel('Percentage')\n\n# Plot the second bar chart\naxs[1].bar(x2, y2, color=colors)\naxs[1].set_title('b')\naxs[1].set_xlabel('Percentage')\n\n# Plot the third bar chart\naxs[2].bar(x3, y3, color=colors)\naxs[2].set_title('c')\naxs[2].set_xlabel('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.05, 0.85), 0.1, 0.1, color='white', fill=False)\nax.add_patch(logo)\n\n# Add text to the logo\nax.text(0.075, 0.95, 'Expert', fontsize=12)\nax.text(0.075, 0.9, 'Blue', fontsize=12)\nax.text(0.075, 0.85, 'Blind', fontsize=12)\nax.text(0.075, 0.8, 'Yellow', fontsize=12)\nax.text(0.075, 0.75, 'Consultancy', fontsize=12)\nax.text(0.075, 0.7, 'Orange', fontsize=12)\nax.text(0.075, 0.65, 'Debate', fontsize=12)\nax.text(0.075, 0.6, 'Green', fontsize=12)\nax.text(0.075, 0.55, 'Interactive Consultancy', fontsize=12)\nax.text(0.075, 0.5, 'Pink', fontsize=12)\nax.text(0.075, 0.45, 'Interactive Debate', fontsize=12)\n\n# Set the x-axis label\nax.set_xlabel('Judge')\n\n# Set the y-axis label\nax.set_ylabel('Judge Accuracy (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100, 120])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'])\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('#000000')\nax.spines['top'].set_color('#000000')\nax.spines['right'].set_color('#000000')\nax.spines['left'].set_color('#000000')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('#000000')\nax.yaxis.label.set_color('#000000')\n\n# Set the color of the title\nax.title.set_color('#000000')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('#000000')\n\n# Set the color of the logo\nlogo.set_edgecolor('#000000')\n\n# Set the color of the logo text\nax.text(0.075, 0.95, 'Expert', color='#000000')\nax.text(0.075, 0.9, 'Blue', color='#0000ff')\nax.text(0.075, 0.85, 'Blind', color='#0000ff')\nax.text(0.075, 0.8, 'Yellow', color='#ffff00')\nax.text(0.075, 0.75, 'Consultancy', color='#ffa500')\nax.text(0.075, 0.7, 'Orange', color='#ffa500')\nax.text(0.075, 0.65, 'Debate', color='#008000')\nax.text(0.075, 0.6, 'Green', color='#008000')\nax.text(0.075, 0.55, 'Interactive Consultancy', color='#ffc0cb')\nax.text(0.075, 0.5, 'Pink', color='#ffc0cb')\nax.text(0.075, 0.45, 'Interactive Debate', color='#ffc0cb')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\ntemperatures = [12, 14, 13, 16]\nrainfall = [1200, 1100, 900, 800]\nwind_speed = [5, 4, 3, 6]\nair_quality = [70, 60, 50, 40]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(10, 5))\n\n# Plot 1: Annual Average Temperature\naxes[0, 0].bar(cities, temperatures, color='pink')\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].set_xlabel('City')\n\n# Plot 2: Annual Rainfall\naxes[0, 1].bar(cities, rainfall, color='lightgreen')\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].set_xlabel('City')\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, wind_speed, color='orange')\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].set_xlabel('City')\n\n# Plot 4: Air Quality Index\naxes[1, 1].bar(cities, air_quality, color='purple')\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].set_xlabel('City')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\nenergy_consumption = [0, 0, 0, 0]\nrenewable_energy_usage = [20, 15, 10, 5]\ntotal_energy_consumption = [25, 20, 15, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nax.bar(range(len(energy_consumption)), energy_consumption, color='purple')\nax.bar(range(len(renewable_energy_usage)), renewable_energy_usage, color='cyan', bottom=energy_consumption)\nax.bar(range(len(total_energy_consumption)), total_energy_consumption, color='green', bottom=[sum(x) for x in zip(energy_consumption, renewable_energy_usage)])\n\n# Set the labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (Petajoules)')\nax.set_title('Total Energy Consumption by Country')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nefficiencies = [0.25, 0.30, 0.20]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(models, efficiencies, color='blue')\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Energy Assessment Entity')\n\n# Define the data for each bar chart\ndata = {\n    'Wind': [80, 90, 70, 60, 50],\n    'Solar': [70, 80, 60, 50, 40],\n    'Hydro': [90, 100, 80, 70, 60],\n    'Nuclear': [60, 70, 50, 40, 30]\n}\n\n# Define the colors for each bar chart\ncolors = ['blue', 'green', 'purple']\n\n# Plot the bar charts\nfor i, (key, value) in enumerate(data.items()):\n    ax.bar(key, value, color=colors[i % len(colors)], label=key)\n\n# Add a legend\nax.legend()\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Energy Assessment Entity')\nax.set_ylabel('Efficiency and Cost Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 90, 75, 80, 95, 85, 70, 85, 90, 80]\nhigher_education_enrollment = [110, 115, 95, 100, 110, 105, 90, 105, 110, 100]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nax.bar(regions, high_school_graduation, color='lightgreen')\nax.bar(regions, higher_education_enrollment, bottom=high_school_graduation, color='gold')\n\n# Add labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage (%)')\nax.set_title('Educational Metrics by Region')\n\n# Add a legend\nax.legend(['High School Graduation', 'Higher Education Enrollment'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 57.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34.0, 55.8, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.bar(brands, truthful_recall, color='navy', label='Truthful Recall')\nax.bar(brands, misleading_recall, bottom=truthful_recall, color='orange', label='Misleading Recall')\n\n# Set the title and labels\nax.set_title('Comparison of Recall Rates Across Products')\nax.set_xlabel('Product')\nax.set_ylabel('Recall Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsupport = [15, 75]\ndelivery = [18, 82]\nproduct_quality = [20, 78]\nreturns = [12, 85]\npricing = [17, 80]\nwebsite_usability = [10, 88]\ncheckout_process = [8, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars for each category\nax.bar(categories, support, color='skyblue', label='Support')\nax.bar(categories, delivery, bottom=support, color='lightgreen', label='Delivery')\nax.bar(categories, product_quality, bottom=[sum(x) for x in zip(support, delivery)], color='lightcoral', label='Product Quality')\nax.bar(categories, returns, bottom=[sum(x) for x in zip(support, delivery, product_quality)], color='lightsalmon', label='Returns')\nax.bar(categories, pricing, bottom=[sum(x) for x in zip(support, delivery, product_quality, returns)], color='lightgrey', label='Pricing')\nax.bar(categories, website_usability, bottom=[sum(x) for x in zip(support, delivery, product_quality, returns, pricing)], color='lightpink', label='Website Usability')\nax.bar(categories, checkout_process, bottom=[sum(x) for x in zip(support, delivery, product_quality, returns, pricing, website_usability)], color='lightcyan', label='Checkout Process')\n\n# Add labels and title\nax.set_xlabel('Complaint Rates')\nax.set_ylabel('Satisfaction Scores')\nax.set_title('Customer Satisfaction by Complaint Rate')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 78, 85, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 17, 10, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot bars for agree rates\nfor i, rate in enumerate(agree_rates):\n    ax.bar(categories[i], rate, color='orange', label='Agree' if i == 0 else None)\n\n# Plot bars for disagree rates\nfor i, rate in enumerate(disagree_rates):\n    ax.bar(categories[i], -rate, color='lightblue', label='Disagree' if i == 0 else None)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Customer Satisfaction')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=0.5)\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the x-axis labels\nax.set_xlabel('Impact on Plant Growth (\u0394 to control)')\n\n# Set the y-axis labels\nax.set_ylabel('Environmental Factors')\n\n# Set the title of the plot\nax.set_title('Impact of Environmental Factors on Plant Growth')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.05, 0.2, 'Watering Frequency', rotation=90, verticalalignment='center')\nax.text(0.15, 0.2, 'Plant Variety', rotation=90, verticalalignment='center')\nax.text(0.25, 0.2, 'CO2 Levels', rotation=90, verticalalignment='center')\nax.text(0.35, 0.2, 'Pesticides', rotation=90, verticalalignment='center')\nax.text(0.45, 0.2, 'Temperature', rotation=90, verticalalignment='center')\nax.text(0.55, 0.2, 'Fertilizer', rotation=90, verticalalignment='center')\nax.text(0.65, 0.2, 'Soil pH', rotation=90, verticalalignment='center')\nax.text(0.75, 0.2, 'Water Quality', rotation=90, verticalalignment='center')\nax.text(0.85, 0.2, 'Sunlight', rotation=90, verticalalignment='center')\n\n# Set the color of the bars\nax.bar([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85], [0.1, 0.15, 0.2, 0.1, 0.15, 0.2, 0.15, 0.2, 0.15], color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.05, 0.2, 'Watering Frequency', rotation=90, verticalalignment='center')\nax.text(0.15, 0.2, 'Plant Variety', rotation=90, verticalalignment='center')\nax.text(0.25, 0.2, 'CO2 Levels', rotation=90, verticalalignment='center')\nax.text(0.35, 0.2, 'Pesticides', rotation=90, verticalalignment='center')\nax.text(0.45, 0.2, 'Temperature', rotation=90, verticalalignment='center')\nax.text(0.55, 0.2, 'Fertilizer', rotation=90, verticalalignment='center')\nax.text(0.65, 0.2, 'Soil pH', rotation=90, verticalalignment='center')\nax.text(0.75, 0.2, 'Water Quality', rotation=90, verticalalignment='center')\nax.text(0.85, 0.2, 'Sunlight', rotation=90, verticalalignment='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncities = ['New York', 'Los Angeles', 'Chicago']\ntraffic_volume = [225, 225, 225]\npublic_transit = [175, 175, 175]\naccident_rate = [150, 150, 150]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the bars\nax.bar(cities, traffic_volume, color='green')\nax.bar(cities, public_transit, bottom=traffic_volume, color='blue')\nax.bar(cities, accident_rate, bottom=[sum(x) for x in zip(traffic_volume, public_transit)], color='red')\n\n# Set the title and labels\nax.set_title('Traffic Metrics by City')\nax.set_xlabel('City')\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Hyperparameters')\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [0.0, 1.0], 'k-')\n    ax.plot([0.0, 1.0], [y[i], y[i]], 'k-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [3.2, 4.1, 2.9, 3.7]\nwater_quality_scores = [2.5, 3.6, 2.8, 3.1]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the x-axis label\nax.set_xlabel('Cities')\n\n# Set the y-axis label\nax.set_ylabel('Environmental Impact Score')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(-30, 31, 5))\nax.set_yticklabels([str(i) for i in range(-30, 31, 5)])\n\n# Plot the bars for air quality scores\nax.bar(categories, air_quality_scores, color='r', label='Air Quality Score')\n\n# Plot the bars for water quality scores\nax.bar(categories, water_quality_scores, color='g', bottom=air_quality_scores, label='Water Quality Score')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nroles = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\ndurations = [84.97, 102.67, 78.22, 85.17, 80]\ntokens = [80, 780.67, 700, 612.99, 618.52]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot bars for durations\nax.bar(roles, durations, color='blue')\nax.set_title('a) Speak duration of roles')\n\n# Plot bars for tokens\nax2 = ax.twinx()\nax2.bar(roles, tokens, color='green')\nax2.set_title('b) Speak tokens of roles')\n\n# Set y-axis limits\nax.set_ylim(0, 120)\nax2.set_ylim(0, 800)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.bar(x, y, color='skyblue')\nax.set_xlabel('Size of Data for Training and Validation')\nax.set_ylabel('True+ info (%)')\nax.set_title('Model Performance by Data Size')\n\n# Add vertical lines at each x value\nfor xi in x:\n    ax.axvline(xi, color='black', linestyle='-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['all', 'arg-causal', 'test 0', 'test 1', 'test 2', 'test 3', 'test 4', 'test 5', 'test 6', 'constant']\ny = [834, 832, 830, 830, 830, 830, 830, 830, 830, 828]\ncolors = ['red', 'blue', 'green', 'yellow', 'cyan', 'magenta', 'black', 'white', 'gray', 'brown']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.barh(x[i], y[i], color=colors[i])\n\n# Set the title\nax.set_title('Out-of-domain accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Accuracy')\n\n# Set the y-axis label\nax.set_ylabel('Model')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [0.7, 0.6, 0.5, 0.4, 0.3]\ncolors = ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(models, values, color=colors)\n\n# Set the title and labels\nax.set_title('Mini Crosswords Performance')\nax.set_xlabel('Model')\nax.set_ylabel('Objective Value')\n\n# Add a vertical line at the rightmost point\nax.axvline(x=len(models)-1, color='black', linestyle='-')\n\n# Add a red rectangle at the bottom-right corner\nrect = plt.Rectangle((len(models)-1, 0), 1, 1, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Add a text box at the bottom-right corner\ntextstr = \"ToT (0.675)\"\nprops = dict(boxstyle='round', facecolor='wheat', alpha=0.5)\nax.text(len(models)-1, 0, textstr, transform=ax.transAxes, fontsize=14,\n        verticalalignment='top', bbox=props)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'DeBERTaTa', 'Llama2']\naccuracies = [55, 60, 58, 62, 57, 59, 64, 61, 56, 53]\nlabels = ['Ground-truth labels', 'Weak labels']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars\nfor i, brand in enumerate(brands):\n    ax.bar(brand, accuracies[i], color='r' if i % 2 == 0 else 'b')\n\n# Set labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Brand Accuracy Comparison')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Discourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\nvalues = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nbars = ax.bar(categories, values, color='lavender')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Your Chart Title Here')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nshouting_fractions = [0.12, 0.14, 0.16, 0.18, 0.20, 0.22]\nmean_values = [0.13, 0.15, 0.17, 0.19, 0.21, 0.23]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(categories, shouting_fractions, 'bo-', label='Shouting Fraction (F)')\nax.plot(categories, mean_values, 'ro-', label='Mean')\n\n# Set the title and labels\nax.set_title('Shouting Fraction of Categories')\nax.set_xlabel('Category')\nax.set_ylabel('Shouting Fraction')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Variable, Symmetric Error\nx1 = [0, 5, 10, 15, 20]\ny1 = [15.49, 17.15, 16.03, 15.45, 16.46]\n\n# Data for Variable, Symmetric Error\nx2 = [0, 5, 10, 15, 20]\ny2 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Data for Variable, Symmetric Error\nx3 = [0, 5, 10, 15, 20]\ny3 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Data for Variable, Symmetric Error\nx4 = [0, 5, 10, 15, 20]\ny4 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Data for Variable, Symmetric Error\nx5 = [0, 5, 10, 15, 20]\ny5 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Data for Variable, Symmetric Error\nx6 = [0, 5, 10, 15, 20]\ny6 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Data for Variable, Symmetric Error\nx7 = [0, 5, 10, 15, 20]\ny7 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Data for Variable, Symmetric Error\nx8 = [0, 5, 10, 15, 20]\ny8 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Data for Variable, Symmetric Error\nx9 = [0, 5, 10, 15, 20]\ny9 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Data for Variable, Symmetric Error\nx10 = [0, 5, 10, 15, 20]\ny10 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\nax.plot(x1, y1, 'r-')\nax.plot(x2, y2, 'g-')\nax.plot(x3, y3, 'b-')\nax.plot(x4, y4, 'c-')\nax.plot(x5, y5, 'm-')\nax.plot(x6, y6, 'y-')\nax.plot(x7, y7, 'k-')\nax.plot(x8, y8, 'w-')\nax.plot(x9, y9, 'o-')\nax.plot(x10, y10, 'p-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Incivility (Fraction of Videos)')\n\n# Set the x-axis label\nax.set_xlabel('Incivility (Fraction of Videos)')\n\n# Set the y-axis label\nax.set_ylabel('Category')\n\n# Define the categories and their corresponding incivility values\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_values = [0.16, 0.18, 0.2, 0.22, 0.24]\n\n# Plot the data\nfor category, value in zip(categories, incivility_values):\n    ax.plot([value, value], [category, category], color='red', marker='o')\n\n# Set the x-axis limits\nax.set_xlim(0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(-1, len(categories))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [-19.6, -19.5, -19.4, -19.3]\ny = [-19.353 + 0.073, -19.257 + 0.028, -19.404 + 0.099, -19.314 + 0.104]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Stock Prices')\nax.set_xlabel('M_{B}')\nax.set_ylabel('CC+Pantheon+')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the x-axis label\nax.set_xlabel('Unique speaker count mean')\n\n# Set the y-axis label\nax.set_ylabel('Unique shouter count mean')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the legend\nax.legend(handlelength=2, handletextpad=0.5, fancybox=True, shadow=True)\n\n# Set the color of the plot\nax.plot([1, 2, 3], [4, 5, 6], 'ro-')\n\n# Set the color of the scatter plot\nax.scatter([7, 8, 9], [10, 11, 12], c='red')\n\n# Set the color of the bar chart\nax.bar([13, 14, 15], [16, 17, 18], color='blue')\n\n# Set the color of the histogram\nax.hist([19, 20, 21], bins=3, color='red')\n\n# Set the color of the pie chart\nax.pie([22, 23, 24], colors=['blue', 'red', 'green'])\n\n# Set the color of the heatmap\nax.imshow([[25, 26, 27], [28, 29, 30], [31, 32, 33]], cmap='hot')\n\n# Set the color of the contour plot\nax.contour([[34, 35, 36], [37, 38, 39], [40, 41, 42]], colors='blue')\n\n# Set the color of the contourf plot\nax.contourf([[43, 44, 45], [46, 47, 48], [49, 50, 51]], colors='red')\n\n# Set the color of the streamplot\nax.streamplot([52, 53, 54], [55, 56, 57], [58, 59, 60], color='blue')\n\n# Set the color of the quiver plot\nax.quiver([61, 62, 63], [64, 65, 66], [67, 68, 69], [70, 71, 72], color='red')\n\n# Set the color of the polar plot\nax.polar([73, 74, 75], [76, 77, 78], color='blue')\n\n# Set the color of the 3D plot\nax.plot_surface([[79, 80, 81], [82, 83, 84], [85, 86, 87]], [[88, 89, 90], [91, 92, 93], [94, 95, 96]], color='red')\n\n# Set the color of the 3D scatter plot\nax.scatter3D([97, 98, 99], [100, 101, 102], [103, 104, 105], color='blue')\n\n# Set the color of the 3D bar chart\nax.bar3d([106, 107, 108], [109, 110, 111], [112, 113, 114], [115, 116, 117], [118, 119, 120], [121, 122, 123], color='red')\n\n# Set the color of the 3D histogram\nax.hist3D([[124, 125, 126], [127, 128, 129], [130, 131, 132]], bins=3, color='blue')\n\n# Set the color of the 3D contour plot\nax.contour3D([[133, 134, 135], [136, 137, 138], [139, 140, 141]], [[142, 143, 144], [145, 146, 147], [148, 149, 150]], [[151, 152, 153], [154, 155, 156], [157, 158, 159]], colors='red')\n\n# Set the color of the 3D contourf plot\nax.contourf3D([[160, 161, 162], [163, 164, 165], [166, 167, 168]], [[169, 170, 171], [172, 173, 174], [175, 176, 177]], [[178, 179, 180], [181, 182, 183], [184, 185, 186]], colors='blue')\n\n# Set the color of the 3D streamplot\nax.streamplot3D([187, 188, 189], [190, 191, 192], [193, 194, 195], [196, 197, 198], color='red')\n\n# Set the color of the 3D quiver plot\nax.quiver3D([199, 200, 201], [202, 203, 204], [205, 206, 207], [208, 209, 210], [211, 212, 213], [214, 215, 216], color='blue')\n\n# Set the color of the 3D polar plot\nax.polar3D([217, 218, 219], [220, 221, 222], [223, 224, 225], color='red')\n\n# Set the color of the 3D 3D plot\nax.plot_trisurf([[226, 227, 228], [229, 230, 231], [232, 233, 234]], [[235, 236, 237], [238, 239, 240], [241, 242, 243]], [[244, 245, 246], [247, 248, 249], [250, 251, 252]], color='blue')\n\n# Set the color of the 3D 3D scatter plot\nax.scatter_trisurf([[253, 254, 255], [256, 257, 258], [259, 260, 261]], [[262, 263, 264], [265, 266, 267], [268, 269, 270]], [[271, 272, 273], [274, 275, 276], [277, 278, 279]], color='red')\n\n# Set the color of the 3D 3D bar chart\nax.bar_trisurf([[280, 281, 282], [283, 284, 285], [286, 287, 288]], [[289, 290, 291], [292, 293, 294], [295, 296, 297]], [[298, 299, 300], [301, 302, 303], [304, 305, 306]], color='blue')\n\n# Set the color of the 3D 3D histogram\nax.hist_trisurf([[307, 308, 309], [310, 311, 312], [313, 314, 315]], bins=3, color='red')\n\n# Set the color of the 3D 3D contour plot\nax.contour_trisurf([[316, 317, 318], [319, 320, 321], [322, 323, 324]], [[325, 326, 327], [328, 329, 330], [331, 332, 333]], [[334, 335, 336], [337, 338, 339], [340, 341, 342]], colors='blue')\n\n# Set the color of the 3D 3D contourf plot\nax.contourf_trisurf([[343, 344, 345], [346, 347, 348], [349, 350, 351]], [[352, 353, 354], [355, 356, 357], [358, 359, 360]], [[361, 362, 363], [364, 365, 366], [367, 368, 369]], colors='red')\n\n# Set the color of the 3D 3D streamplot\nax.streamplot_trisurf([370, 371, 372], [373, 374, 375], [376, 377, 378], [379, 380, 381], color='blue')\n\n# Set the color of the 3D 3D quiver plot\nax.quiver_trisurf([382, 383, 384], [385, 386, 387], [388, 389, 390], [391, 392, 393], [394, 395, 396], [397, 398, 399], color='red')\n\n# Set the color of the 3D 3D polar plot\nax.polar_trisurf([400, 401, 402], [403, 404, 405], [406, 407, 408], color='blue')\n\n# Set the color of the 3D 3D 3D plot\nax.plot_trisurf3D([[409, 410, 411], [412, 413, 414], [415, 416, 417]], [[418, 419, 420], [421, 422, 423], [424, 425, 426]], [[427, 428, 429], [430, 431, 432], [433, 434, 435]], color='red')\n\n# Set the color of the 3D 3D 3D scatter plot\nax.scatter_trisurf3D([[436, 437, 438], [439, 440, 441], [442, 443, 444]], [[445, 446, 447], [448, 449, 450], [451, 452, 453]], [[454, 455, 456], [457, 458, 459], [460, 461, 462]], color='blue')\n\n# Set the color of the 3D 3D 3D bar chart\nax.bar_trisurf3D([[463, 464, 465], [466, 467, 468], [469, 470, 471]], [[472, 473, 474], [475, 476, 477], [478, 479, 480]], [[481, 482, 483], [484, 485, 486], [487, 488, 489]], color='red')\n\n# Set the color of the 3D 3D 3D histogram\nax.hist_trisurf3D([[490, 491, 492], [493, 494, 495], [496, 497, 498]], bins=3, color='blue')\n\n# Set the color of the 3D 3D 3D contour plot\nax.contour_trisurf3D([[499, 500, 501], [502, 503, 504], [505, 506, 507]], [[508, 509, 510], [511, 512, 513], [514, 515, 516]], [[517, 518, 519], [520, 521, 522], [523, 524, 525]], colors='red')\n\n# Set the color of the 3D 3D 3D contourf plot\nax.contourf_trisurf3D([[526, 527, 528], [529, 530, 531], [532, 533, 534]], [[535, 536, 537], [538, 539, 540], [541, 542, 543]], [[544, 545, 546], [547, 548, 549], [550, 551, 552]], colors='blue')\n\n# Set the color of the 3D 3D 3D streamplot\nax.streamplot_trisurf3D([553, 554, 555], [556, 557, 558], [559, 560, 561], [562, 563, 564], color='red')\n\n# Set the color of the 3D 3D 3D quiver plot\nax.quiver_trisurf3D([565, 566, 567], [568, 569, 570], [571, 572, 573], [574, 575, 576], [577, 578, 579], [580, 581, 582], color='blue')\n\n# Set the color of the 3D 3D 3D polar plot\nax.polar_trisurf3D([583, 584, 585], [586, 587, 588], [589, 590, 591], color='red')\n\n# Set the color of the 3D 3D 3D 3D plot\nax.plot_trisurf3D3D([[592, 593, 594], [595, 596, 597], [598, 599, 600]], [[601, 602, 603], [604, 605, 606], [607, 608, 609]], [[610, 611, 612], [613, 614, 615], [616, 617, 618]], color='blue')\n\n# Set the color of the 3D"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Female Face Presence (Fraction of videos)')\n\n# Set the x-axis label\nax.set_xlabel('PULWAMA-BALAKOT')\n\n# Set the y-axis label\nax.set_ylabel('Dataset mean')\n\n# Set the y-axis limits\nax.set_ylim(0.05, 0.25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Draw a horizontal line at the mean value\nax.axhline(y=0.15, color='r', linestyle='-')\n\n# Draw a vertical line at the median value\nax.axvline(x=2, color='g', linestyle='-')\n\n# Draw a rectangle with a dashed border\nax.add_patch(plt.Rectangle((0.5, 0.2), 1, 0.1, fill=False, edgecolor='k', hatch='///'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Errorbar upper and lower limits')\n\n# Set the x-axis labels\nx_labels = ['1', '2', '3', '4', '5']\nax.set_xticks(range(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Draw error bars\nfor i in range(5):\n    ax.errorbar(i, 2.5, yerr=0.5, fmt='o', ecolor='blue', capsize=5)\n    ax.errorbar(i, 15, yerr=2.5, fmt='o', ecolor='red', capsize=5)\n    ax.errorbar(i, 25, yerr=5, fmt='o', ecolor='green', capsize=5)\n\n# Draw arrows\nax.annotate('', xy=(0, 2.5), xytext=(0, 2.0), arrowprops=dict(facecolor='blue', shrink=0.05))\nax.annotate('', xy=(1, 15), xytext=(1, 13), arrowprops=dict(facecolor='red', shrink=0.05))\nax.annotate('', xy=(2, 25), xytext=(2, 20), arrowprops=dict(facecolor='green', shrink=0.05))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the first graph\nax.plot([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5], [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5], 'p', color='purple')\nax.set_title('variable, symmetric error')\n\n# Plot the second graph\nax2 = fig.add_subplot(122)\nax2.plot([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5], [10, 15, 20, 25, 30, 35, 40, 45], 'o', color='green')\nax2.set_title('variable, symmetric error')\n\n# Set the y-axis limits for both graphs\nax.set_ylim(0, 5)\nax2.set_ylim(0, 5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([15, 20, 25, 30, 35])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['15', '20', '25', '30', '35'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_markeredgewidth(2)\n\n# Set the y-axis line markeredgewidth\nax.spines['left'].set_markeredgewidth(2)\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line marker\nax.spines['bottom'].set_marker('o')\n\n# Set the y-axis line marker\nax.spines['left'].set_marker('o')\n\n# Set the x-axis line markersize\nax.spines['bottom'].set_markersize(5)\n\n# Set the y-axis line markersize\nax.spines['left'].set_markersize(5)\n\n# Set the x-axis line markerfacecolor\nax.spines['bottom'].set_markerfacecolor('green')\n\n# Set the y-axis line markerfacecolor\nax.spines['left'].set_markerfacecolor('green')\n\n# Set the x-axis line markeredgecolor\nax.spines['bottom'].set_markeredgecolor('green')\n\n# Set the y-axis line markeredgecolor\nax.spines['left'].set_markeredgecolor('green')\n\n# Set the x-axis line markeredgewidth\nax.spines['bottom'].set_mark"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Define the x-axis values\nx_values = [0, 5, 10, 15, 20]\n\n# Define the y-axis values\ny_values = [-2.1, -2.6, -2.9, -1.2, -1.1, -1.0, -1.3, -2.7, -1.2, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the vertices of the hexagon\nx = np.array([0, 1, 1, 0, -1, -1, 0])\ny = np.array([0, 0, 1, 1.732, 1.732, 0, 0])\n\n# Plot the hexagon\nax.plot(x, y, 'k-')\n\n# Define the coordinates of the circles\ncircle1 = np.array([0, 0])\ncircle2 = np.array([1, 0])\ncircle3 = np.array([0, 1])\ncircle4 = np.array([-1, 0])\ncircle5 = np.array([0, -1])\n\n# Plot the circles\nax.plot(circle1[0], circle1[1], 'o', color='purple')\nax.plot(circle2[0], circle2[1], 'o', color='orange')\nax.plot(circle3[0], circle3[1], 'o', color='cyan')\nax.plot(circle4[0], circle4[1], 'o', color='red')\nax.plot(circle5[0], circle5[1], 'o', color='pink')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-1.5, 1.5)\nax.set_ylim(-1.5, 1.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the points\nx = np.linspace(0, 10, 20)\ny = np.sin(x)\n\n# Plot the points\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the circle parameters\ncircle_radius = 5\ncircle_center = (0, 0)\n\n# Create a circle patch\ncircle = plt.Circle(circle_center, circle_radius, color='yellow', fill=True)\nax.add_patch(circle)\n\n# Define the number of points on the circle\nnum_points = 12\n\n# Generate the points on the circle\ntheta = np.linspace(0, 2*np.pi, num_points)\nx = circle_radius * np.cos(theta)\ny = circle_radius * np.sin(theta)\n\n# Plot the points\nax.plot(x, y, 'ro-')\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates for the vertices of the rectangle\nx = [0, 2, 2, 0, 0]\ny = [0, 0, 3, 3, 0]\n\n# Plot the rectangle\nax.plot(x, y, 'k-')\n\n# Define the coordinates for the circle\ncircle_x = np.linspace(0, 2, 100)\ncircle_y = np.sqrt(4 - (circle_x - 1)**2)\n\n# Plot the circle\nax.plot(circle_x, circle_y, 'b-')\nax.plot(circle_x, -circle_y, 'b-')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-1, 3)\nax.set_ylim(-1, 4)\n\n# Set the title and labels\nax.set_title('Rectangle with Circle')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the triangle\nax.plot([0, 2, 1, 0], [0, 0, 2, 0], 'k-')\n\n# Plot the circle\ncircle = plt.Circle((1, 1), 1, color='orange')\nax.add_artist(circle)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-1, 3)\nax.set_ylim(-1, 3)\n\n# Hide the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'CoreNLP': [0.61, 0.74, 0.70, 0.70, 0.57],\n    'Stanza': [0.69, 0.77, 0.88, 0.62, 0.69],\n    'Biaffine': [0.64, 0.72, 0.72, 0.54, 0.69],\n    'StackPointer': [0.67, 0.67, 0.67, 0.54, 0.69],\n    'TowerParse': [0.60, 0.60, 0.60, 0.60, 0.69]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    ax.barh(key, value, height=0.5, left=i*0.5, color=plt.cm.RdYlGn(i/len(data)))\n\n# Set the title and labels\nax.set_title('Average Scores')\nax.set_xlabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nabilities = ['Abstain', 'Vigilant', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nabilities_data = [15.7, 28.1, 2.6, 2.1, 0.5, 76.0, 0.9, 4.1, 0.5, 6.2, 8.1, 10.5, 14.5, 28.6, 9.2, 10.5, 15.5, 13.9, 16.3, 50.8, 12.0, 0.9, 7.8, 11.2, 0.6, 17.3, 13.4, 7.0, 15.5, 14.3, 12.0, 13.9, 16.3, 50.3, 12.0, 0.9, 7.0, 11.2, 0.6, 17.3, 13.4, 7.0, 15.5, 14.3, 12.0, 13.9, 16.3, 50.3, 12.0, 0.9, 7.0, 11.2, 0.6, 17.3, 13.4, 7.0, 15.5, 14.3, 12.0, 13.9, 16.3]\n\n# Create a color map for the abilities\ncmap = plt.cm.get_cmap('coolwarm')\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i, voter in enumerate(voters):\n    ax.bar(abilities, abilities_data[i*len(abilities):(i+1)*len(abilities)], color=cmap(i/len(voters)))\n\n# Set the title and labels\nax.set_title('Voter Abilities')\nax.set_xlabel('Voter')\nax.set_ylabel('Ability')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Players')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Player Rating')\n\n# Set the color map for the bars\ncmap = 'viridis'\n\n# Set the data for the bars\nx = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\ny = [0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Create the bar chart\nbars = ax.bar(x, y, color=plt.cm.viridis(y))\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(bars)\ncbar.set_label('Player Rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Live')\n\n# Set the x-axis label\nax.set_xlabel('Predicted category')\n\n# Set the y-axis label\nax.set_ylabel('Labeling function similarity')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([0, 10, 20, 30, 40, 50])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis grid line style\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line style\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('LOMLOP')\n\n# Set the x-axis label\nax.set_xlabel('D2')\n\n# Set the y-axis label\nax.set_ylabel('D1')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick labels\nax.set_xticks([0, 1, 2])\nax.set_yticks([0, 1, 2])\n\n# Set the tick labels\nax.set_xticklabels(['D2', 'D1', 'D0'])\nax.set_yticklabels(['LOH0', 'LOH1', 'LOH2'])\n\n# Set the rectangle colors\nrects = [plt.Rectangle((0, 0), 1, 1, color='grey'),\n        plt.Rectangle((1, 0), 1, 1, color='green'),\n        plt.Rectangle((0, 1), 1, 1, color='blue'),\n        plt.Rectangle((1, 1), 1, 1, color='yellow'),\n        plt.Rectangle((0, 2), 1, 1, color='orange'),\n        plt.Rectangle((1, 2), 1, 1, color='red')]\n\n# Add the rectangles to the plot\nfor rect in rects:\n    ax.add_patch(rect)\n\n# Set the rectangle labels\nax.text(0.5, 0.5, '10%', ha='center', va='center')\nax.text(1.5, 0.5, '1.0%', ha='center', va='center')\nax.text(0.5, 1.5, '16.0%', ha='center', va='center')\nax.text(1.5, 1.5, '7.0%', ha='center', va='center')\nax.text(0.5, 2.5, '22.0%', ha='center', va='center')\nax.text(1.5, 2.5, '28.0%', ha='center', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Sector Performance')\n\n# Define the sectors and their performance\nsectors = ['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI']\nperformance = [0.75, 0.65, 0.85, 0.95, 1.0]\n\n# Create a bar chart with the performance data\nax.bar(sectors, performance, color='blue')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis label\nax.set_xlabel('Sectors')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Set the title of the plot\nax.set_title('Perplexity vs. Saturation', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('To layer', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Perplexity', fontsize=12)\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 3, 5, 9, 12])\nax.set_xticklabels(['1', '3', '5', '9', '12'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([1, 3, 5, 7, 9, 11, 13, 15])\nax.set_yticklabels(['1', '3', '5', '7', '9', '11', '13', '15'])\n\n# Set the colorbar\ncbar = fig.colorbar(ax.imshow([[1, 2], [3, 4]], cmap='hot'), ax=ax)\ncbar.set_label('Increase in perpexity')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\ntext_box = ax.text(0.5, 0.5, 'mbert\u2192sat Perplexity=7.59', ha='center', va='center', fontsize=12, bbox=dict(boxstyle='round,pad=0.5', fc='yellow', ec='black'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the heatmap\ndata = [\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 588, 327],\n    [459, 274, 637, 435, 660],\n    [784, 637, 523, 856, 405],\n    [935, 945, 739, 688, 243],\n    [729, 651, 797, 488, 891],\n    [863, 700, 644, 650, 760],\n    [292, 949, 365, 142, 473]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Create a heatmap\nheatmap = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add colorbar\ncbar = fig.colorbar(heatmap)\n\n# Set labels\nax.set_xticks(range(len(data[0])))\nax.set_yticks(range(len(data)))\nax.set_xticklabels(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9'])\n\n# Set title\nax.set_title('Sales Performance Heatmap')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow([[0.2, 0.4], [0.6, 0.8]]), ax=ax)\n\n# Set the color bar label\ncbar.set_label('Values')\n\n# Set the title of the plot\nax.set_title('Color Bar Example')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Weather')\n\n# Define the data for the plots\ndata1 = [0.55, 0.72, 0.60, 0.54]\ndata2 = [0.98, 0.83, 0.78, 0.87]\ndata3 = [0.52, 0.64, 0.78, 0.77]\ndata4 = [0.92, 0.80, 0.64, 0.53]\ndata5 = [0.96, 0.88, 0.79, 0.60]\ndata6 = [0.57, 0.93, 0.07, 0.09]\ndata7 = [0.42, 0.65, 0.44, 0.89]\ndata8 = [0.96, 0.83, 0.78, 0.87]\ndata9 = [0.52, 0.64, 0.78, 0.77]\ndata10 = [0.92, 0.80, 0.64, 0.53]\ndata11 = [0.57, 0.93, 0.07, 0.09]\ndata12 = [0.42, 0.65, 0.44, 0.89]\ndata13 = [0.96, 0.83, 0.78, 0.87]\ndata14 = [0.52, 0.64, 0.78, 0.77]\ndata15 = [0.92, 0.80, 0.64, 0.53]\ndata16 = [0.57, 0.93, 0.07, 0.09]\ndata17 = [0.42, 0.65, 0.44, 0.89]\ndata18 = [0.96, 0.83, 0.78, 0.87]\ndata19 = [0.52, 0.64, 0.78, 0.77]\ndata20 = [0.92, 0.80, 0.64, 0.53]\n\n# Create a bar chart with the data\nax.bar(range(len(data1)), data1, color='brown')\nax.bar(range(len(data2)), data2, color='orange')\nax.bar(range(len(data3)), data3, color='brown')\nax.bar(range(len(data4)), data4, color='orange')\nax.bar(range(len(data5)), data5, color='brown')\nax.bar(range(len(data6)), data6, color='orange')\nax.bar(range(len(data7)), data7, color='brown')\nax.bar(range(len(data8)), data8, color='orange')\nax.bar(range(len(data9)), data9, color='brown')\nax.bar(range(len(data10)), data10, color='orange')\nax.bar(range(len(data11)), data11, color='brown')\nax.bar(range(len(data12)), data12, color='orange')\nax.bar(range(len(data13)), data13, color='brown')\nax.bar(range(len(data14)), data14, color='orange')\nax.bar(range(len(data15)), data15, color='brown')\nax.bar(range(len(data16)), data16, color='orange')\nax.bar(range(len(data17)), data17, color='brown')\nax.bar(range(len(data18)), data18, color='orange')\nax.bar(range(len(data19)), data19, color='brown')\nax.bar(range(len(data20)), data20, color='orange')\n\n# Set the x-axis labels\nax.set_xticks(range(len(data1)))\nax.set_xticklabels(['96', '192', '336', '720'])\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = {\n    'Villager': [15.7, 28.1, 26, 14.5, 28.6, 10.5],\n    'Hunter': [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    'Witch': [50.8, 12.3, 0.9, 6.2, 15.5, 13.9],\n    'Seer': [49.2, 11.2, 0.6, 7.8, 17.3, 16.3],\n    'Wererewolf': [50.3, 12.0, 0.9, 7.0, 13.4, 16.3]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 2, figsize=(20.0, 8.0))\n\n# Plot the first graph\nfor i, (role, percentages) in enumerate(data.items()):\n    ax[0].bar(range(len(percentages)), percentages, color='blue')\n    ax[0].set_title('Role voting in the Werewolf game')\n    ax[0].set_xlabel('Player')\n    ax[0].set_ylabel('Percentage')\n\n# Plot the second graph\nfor i, (role, percentages) in enumerate(data.items()):\n    ax[1].bar(range(len(percentages)), percentages, color='blue')\n    ax[1].set_title('Final state of roles')\n    ax[1].set_xlabel('Player')\n    ax[1].set_ylabel('Percentage')\n\n# Add a color bar\ncax = fig.add_axes([0.9, 0.1, 0.03, 0.8])\ncax.imshow(np.array([[100]*10 for _ in range(10)]), cmap='hot', interpolation='nearest')\ncax.set_title('Color Bar')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Set the x-axis label\nax.set_xlabel('Response Action Category')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Define the data for the plot\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nscores = [169, 115, 219, 67, 177]\nresponses = [\n    [547, 662, 271, 145],\n    [439, 753, 239, 1355],\n    [585, 557, 259, 1269],\n    [941, 708, 432, 732],\n    [554, 661, 235, 1246]\n]\n\n# Create a bar chart with the data\nfor i, category in enumerate(categories):\n    ax.bar(category, scores[i], color='blue')\n    for j, response in enumerate(responses[i]):\n        ax.bar(category, response, bottom=scores[i], color=plt.cm.RdYlGn(j/len(responses[i])))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the bars\nax.bar(emotions, original_values, color='blue', label='Original')\nax.bar(emotions, adjusted_values, color='red', label='Adjusted')\n\n# Set the title and labels\nax.set_title('Emotion Intensity Comparison')\nax.set_xlabel('Emotion')\nax.set_ylabel('Intensity')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nvoter_percentages = [15.7, 28.1, 26, 50.8, 76.0]\ncolors = ['blue', 'cyan', 'magenta', 'yellow', 'black']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nax.barh(voters, voter_percentages, color=colors)\n\n# Set the title and labels\nax.set_title('Voter Preferences')\nax.set_xlabel('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\n\"\"\"\n=====================================\nRanking of LLaMA and GPT Models\n=====================================\n\nThis example demonstrates how to create a side-by-side bar chart using Matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmodels = ['LLaMA', 'GPT']\nbaseline = [17, 17]\nreversed_order = [24, 24]\nreversed_ids = [23, 23]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(models))\nr2 = [x + bar_width for x in r1]\n\n# Create bars\nrects1 = ax.bar(r1, baseline, color='orange', width=bar_width, edgecolor='grey', label='Baseline')\nrects2 = ax.bar(r2, reversed_order, color='blue', width=bar_width, edgecolor='grey', label='Reversed Order')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Models')\nax.set_ylabel('Rank')\nax.set_title('Ranking of LLaMA and GPT Models')\nax.set_xticks([r + bar_width / 2 for r in range(len(models))])\nax.set_xticklabels(models)\nax.legend()\n\n# Function to add value labels on top of the bars\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(2, 4)\n\n# Create a subplot for each element in the grid\nfor i in range(2):\n    for j in range(4):\n        # Create a rectangle with a random color\n        rect = plt.Rectangle((j*0.25, i*0.25), 0.25, 0.25, facecolor=np.random.rand(3))\n        ax.add_patch(rect)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F5F5DC')\n\n# Set the title of the plot\nax.set_title('Harvest [t/year]')\n\n# Set the x-axis label\nax.set_xlabel('Time [t]')\n\n# Set the y-axis label\nax.set_ylabel('Harvest [t/year]')\n\n# Set the x-axis limits\nax.set_xlim(0, 6)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 7, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 7, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\n\"\"\"\nThis script generates a matplotlib plot based on the provided image.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f5f5f5')\n\n# Set the title of the plot\nax.set_title('Cucumber Harvest', fontsize=14, fontweight='bold')\n\n# Set the x-axis label\nax.set_xlabel('Time (t)', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Harvest [t/y]', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 8, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7'])\n\n# Set the x-axis grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_color('#333333')\n\n# Set the y-axis label parameters\nax.yaxis.label.set_color('#333333')\n\n# Set the x-axis tick label parameters\nax.tick_params(axis='x', colors='#333333')\n\n# Set the y-axis tick label parameters\nax.tick_params(axis='y', colors='#333333')\n\n# Set the x-axis grid line parameters\nax.grid(color='#cccccc', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(color='#cccccc', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=45)\n\n# Set the x-axis tick label horizontal alignment\nax.tick_params(axis='x', ha='right')\n\n# Set the y-axis tick label vertical alignment\nax.tick_params(axis='y', va='center')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', ha='right')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', va='center')\n\n# Set the y-axis tick label"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create a grid of subplots\ngs = fig.add_gridspec(4, 4)\n\n# Add subplots with colored rectangles\nfor i in range(4):\n    for j in range(4):\n        ax = fig.add_subplot(gs[i, j])\n        ax.imshow(np.random.rand(10, 10), cmap='viridis')\n        ax.set_title(f\"subplot {i*4+j+1}\")\n        ax.axis('off')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Create a bar chart with the data\nax.bar(range(10), range(10), color='blue')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the heatmap\ndata = [\n    [1.5, 2.2, 1.8, 3.2, 0.5],\n    [2.8, 0.5, 3.6, 1.8, 2.2],\n    [1.0, 2.1, 0.9, 4.0, 1.5],\n    [0.7, 0.6, 0.4, 2.3, 3.4],\n    [0.9, 1.6, 0.7, 2.0, 5.9],\n    [1.2, 1.3, 0.5, 0.6, 4.8],\n    [0.3, 1.9, 0.6, 0.8, 5.9]\n]\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='YlOrRd')\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set the labels\nax.set_xticks(range(len(data[0])))\nax.set_yticks(range(len(data)))\nax.set_xticklabels(['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G'])\nax.set_yticklabels(['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Degree of acceptance of a product')\n\n# Define the data for the bars\nx = [17, 36, 28, 23]\ny = [79, 53, 34, 35]\nwidth = [4, 5, 0, 75]\nheight = [42, 38, 0, 55]\n\n# Create the bar chart\nax.barh(x, width, height, color='blue')\nax.barh(x, height, width, color='green')\n\n# Set the labels for the x-axis\nax.set_xlabel('Degree of acceptance')\n\n# Set the limits for the y-axis\nax.set_ylim(0, 80)\n\n# Set the limits for the x-axis\nax.set_xlim(0, 80)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a colorbar with a gradient\ncmap = plt.get_cmap('Blues')\nnorm = plt.Normalize(vmin=0.1, vmax=0.9)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax)\n\n# Set the title of the colorbar\ncbar.set_label('Bottlebeck Distance')\n\n# Set the title of the plot\nax.set_title('Wasserstein Distance')\n\n# Set the x-axis label\nax.set_xlabel('X-axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a grid of colored rectangles\nfor i in range(1, 9):\n    for j in range(1, 9):\n        color = 'blue' if (i + j) % 2 == 0 else 'red'\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=color))\n\n# Set the limits of the axes\nax.set_xlim(0, 12)\nax.set_ylim(0, 12)\n\n# Set the title of the plot\nax.set_title('ROC\\'s AUC')\n\n# Set the labels of the axes\nax.set_xlabel('Timeshift')\nax.set_ylabel('Scales')\n\n# Set the ticks of the axes\nax.set_xticks(np.arange(0, 13, 1))\nax.set_yticks(np.arange(0, 13, 1))\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('AUC')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation', 'Last']\ncounts = [0, 4, 8, 12, 16, 20, 24, 28]\nvalues = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create a heatmap\nfor i, category in enumerate(categories):\n    for j, count in enumerate(counts):\n        ax.add_patch(plt.Rectangle((count, i), 1, 1, color=plt.cm.RdYlGn(values[j])))\n\n# Set the labels\nax.set_xlabel('Count')\nax.set_ylabel('Category')\n\n# Set the title\nax.set_title('Heatmap of Categories and Counts')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\n\"\"\"\nThis is a generated question and answer based on the provided image.\nThe task is to write a Python code using matplotlib that will create a plot\nthat visually represents the data presented in the image.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Set the title of the plot\nax.set_title('Live Score Prediction', fontsize=24)\n\n# Set the x-axis label\nax.set_xlabel('Predicted Category', fontsize=18)\n\n# Set the y-axis label\nax.set_ylabel('Ground Truth Category', fontsize=18)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['0', '1', '2', '3'], fontsize=14)\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 1, 2, 3])\nax.set_yticklabels(['0', '1', '2', '3'], fontsize=14)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the title and labels\nax.set_title('Live Score Prediction', color='white')\nax.set_xlabel('Predicted Category', color='white')\nax.set_ylabel('Ground Truth Category', color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Kokkos', 'Raja', 'OMP', 'OACC', 'SYCL', 'Native Port']\nbandwidths = [876, 136, 435, 534, 322, 804]\ncolors = ['pink', 'orange', 'brown', 'red', 'purple', 'gray']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the bar chart\nax.bar(models, bandwidths, color=colors)\n\n# Set the title and labels\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_xlabel('Programming Model')\nax.set_ylabel('Memory Bandwidth')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a color map for the heatmap\ncmap = plt.cm.RdYlGn\n\n# Create a heatmap with the correlation coefficients\nheatmap = ax.imshow([[0.95, 0.92, 0.90, 0.88, 0.86, 0.84, 0.82, 0.80, 0.78, 0.76, 0.74, 0.72, 0.70, 0.68, 0.66, 0.64, 0.62, 0.60, 0.58, 0.56, 0.54, 0.52, 0.50, 0.48, 0.46, 0.44, 0.42, 0.40, 0.38, 0.36, 0.34, 0.32, 0.30, 0.28, 0.26, 0.24, 0.22, 0.20, 0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04, 0.02, 0.00], [0.95, 0.92, 0.90, 0.88, 0.86, 0.84, 0.82, 0.80, 0.78, 0.76, 0.74, 0.72, 0.70, 0.68, 0.66, 0.64, 0.62, 0.60, 0.58, 0.56, 0.54, 0.52, 0.50, 0.48, 0.46, 0.44, 0.42, 0.40, 0.38, 0.36, 0.34, 0.32, 0.30, 0.28, 0.26, 0.24, 0.22, 0.20, 0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04, 0.02, 0.00]], cmap=cmap)\n\n# Add a color bar to the plot\nfig.colorbar(heatmap)\n\n# Set the title of the plot\nax.set_title('Correlation Coefficients')\n\n# Set the labels for the x and y axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttN', 'PPL']\nvalues = [0.19, 0.19, 0.62, 0.53, 0.52, 0.39, 0.34, 0.20, 0.06, 0.21, 0.05]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Create a grid of rectangles with different colors\nfor i in range(15):\n    for j in range(15):\n        if (i + j) % 2 == 0:\n            color = 'blue'\n        else:\n            color = 'purple'\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=color))\n\nax.set_xlim(0, 15)\nax.set_ylim(0, 15)\nax.set_xlabel('Layers')\nax.set_ylabel('Endofoffset')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 101, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(range(0, 101, 10))\n\n# Set the title of the plot\nax.set_title('Test Winning Distribution')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the x-axis label\nax.set_xlabel('Test Winning Distance', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Pairs', color='blue')\n\n# Set the color of the title\nax.set_title('Test Winning Distribution', color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Define the data for the first subplot\nx1 = np.linspace(-0.2, 0.8, 100)\ny1 = np.sin(x1)\n\n# Define the data for the second subplot\nx2 = np.linspace(-0.6, 0.4, 100)\ny2 = np.cos(x2)\n\n# Plot the data on the first subplot\naxs[0].plot(x1, y1, color='blue')\naxs[0].set_title('Inter Class')\naxs[0].set_xlabel('Cosine Similarity')\n\n# Plot the data on the second subplot\naxs[1].plot(x2, y2, color='green')\naxs[1].set_title('Intra Class')\naxs[1].set_xlabel('Cosine Similarity')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Baseline')\n\n# Create a bar chart with the data\nax.bar([0.5, 1.0, 1.5, 2.0], [0.6, 0.7, 0.8, 0.9])\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MATHWELL')\n\n# Create a histogram\nax.hist(np.random.normal(5, 1, 1000), bins=20, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('FKGL')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.02, 0.04, 0.06, 0.08]\ny1 = [1000, 1000, 1000, 1000]\ny2 = [900, 900, 900, 900]\ny3 = [800, 800, 800, 800]\ny4 = [700, 700, 700, 700]\ny5 = [600, 600, 600, 600]\ny6 = [500, 500, 500, 500]\ny7 = [400, 400, 400, 400]\ny8 = [300, 300, 300, 300]\ny9 = [200, 200, 200, 200]\ny10 = [100, 100, 100, 100]\n\n# Plot\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.bar(x, y1, color='orange')\nax.bar(x, y2, color='orange')\nax.bar(x, y3, color='orange')\nax.bar(x, y4, color='orange')\nax.bar(x, y5, color='orange')\nax.bar(x, y6, color='orange')\nax.bar(x, y7, color='orange')\nax.bar(x, y8, color='orange')\nax.bar(x, y9, color='orange')\nax.bar(x, y10, color='orange')\n\n# Labels\nax.set_xlabel('Animal Weight (Tons)')\nax.set_ylabel('Frequency')\nax.set_title('Desert Animals in the Wild')\n\n# Legend\nlegend_labels = ['Camels', 'Kangaroos']\nax.legend(legend_labels, loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the x-axis label\nax.set_xlabel('Frequency')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the data for the plot\nx = [0, 2, 4, 6, 8]\ny1 = [50, 70, 80, 70, 60]\ny2 = [30, 50, 60, 50, 40]\n\n# Plot the data\nax.bar(x, y1, color='red')\nax.bar(x, y2, bottom=y1, color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Number of Measurements')\n\n# Set the x-axis limits\nax.set_xlim(-2, 6)\n\n# Set the y-axis limits\nax.set_ylim(0, 1200)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n#"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndistances = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\nbaguette_ratings = [100, 90, 80, 70, 60, 50, 40]\nyoutiao_ratings = [120, 110, 100, 90, 80, 70, 60]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.bar(distances, baguette_ratings, color='blue', label='Baguette')\nax.bar(distances, youtiao_ratings, color='orange', label='Youtiao')\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Rating')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 140)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 150, 20))\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(range(0, 150, 20))\n\n# Set the title of the plot\nax.set_title('Test Winning Distance')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\nnominations = [15, 17, 13, 19, 20]\n\n# Create a bar chart with the specified data\nplt.bar(categories, nominations, color='orange')\n\n# Set the title and labels for the chart\nplt.title('Grammy Nominations Across Expanded Categories 2019-2023')\nplt.xlabel('Categories')\nplt.ylabel('Number of Nominations')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('MNIST - Defect Detection')\n\n# Set the x-axis label\nax.set_xlabel('Defect Type')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Define the data for the histogram\ndata = [200, 300, 400, 500, 600]\n\n# Plot the histogram\nax.hist(data, bins=10, color='blue')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST - Defect Detection')\n\n# Set the x-axis label\nax.set_xlabel('Defect Type')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Define the data for the histogram\ndata = [200, 300, 400, 500, 600]\n\n# Plot the histogram\nax.hist(data, bins=10, color='green')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntime_scores = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nvalues = [\n    [55, 50, 45, 40, 35, 30, 25],\n    [52, 47, 42, 37, 32, 27, 22],\n    [51, 46, 41, 36, 31, 26, 21],\n    [50, 45, 40, 35, 30, 25, 20],\n    [49, 44, 39, 34, 29, 24, 19],\n    [48, 43, 38, 33, 28, 23, 18],\n    [47, 42, 37, 32, 27, 22, 17]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nfor value in values:\n    ax.plot(time_scores, value, color='blue')\n\n# Set the title and labels\nax.set_title('Time Series Data')\nax.set_xlabel('Time Score')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('a')\n\n# Create a bar chart with the data\nax.bar(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], color='blue')\nax.bar(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nclass_names = ['Class']\nconcept_weights = [100]\ncounts = [1000]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\nax.bar(class_names, concept_weights, color='brown')\nax.set_ylabel('Concept Weight')\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Add count values on top of each bar\nfor i, v in enumerate(counts):\n    ax.text(i, v + 10, str(v), ha='center', va='bottom')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\ndistance_diff = [-5.0, -2.5, 0.0, 2.5, 5.0, 7.5, 10.0]\ncenter_samples = [80, 90, 100, 90, 80, 70, 60]\nrandom_samples = [60, 70, 80, 90, 100, 90, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data\nax.bar(distance_diff, center_samples, color='yellow', label='Center')\nax.bar(distance_diff, random_samples, color='blue', label='Random')\n\n# Set the title and labels\nax.set_title('Number of Samples vs Distance Difference')\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Samples')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nrepetition = [0.0, 2.5, 5.0, 7.5, 10.0]\nclusters = [1200, 1100, 900, 600, 300]\n\n# Plotting\nplt.figure(figsize=(4.0, 3.0))\nplt.bar(repetition, clusters, color='orange')\nplt.xlabel('Number of Repetition')\nplt.ylabel('Number of Clusters')\nplt.title('Clusters vs Number of Repetition')\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndistances = [0, 1, 2, 3, 4]\ncorrectly_classified = [400, 350, 300, 250, 200]\nmisclassified = [380, 330, 280, 230, 180]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\nax.bar(distances, correctly_classified, color='blue', label='Correctly classified')\nax.bar(distances, misclassified, bottom=correctly_classified, color='orange', label='Misclassified')\n\n# Add labels and title\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Number of instances')\nax.set_title('Classification accuracy by distance to threshold')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Cascade')\n\n# Set the x-axis label\nax.set_xlabel('Confidence in bin')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy in bin')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Draw a line from (0, 0) to (10, 10)\nax.plot([0, 10], [0, 10], 'r-')\n\n# Draw a rectangle at (5, 5) with width 2 and height 2\nax.add_patch(plt.Rectangle((5, 5), 2, 2, color='brown'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Number of Queries Overlap')\n\n# Set the x-axis label\nax.set_xlabel('% images overlap')\n\n# Set the y-axis label\nax.set_ylabel('Number of queries')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 6000)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1000, 2000, 3000, 4000, 5000, 6000])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1000', '2000', '3000', '4000', '5000', '6000'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_face"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Set the x-axis label\nax.set_xlabel('X-axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis Label')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 500)\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.08, 0.08), 0.04, 0.04, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.12, 0.12), 0.04, 0.04, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.16, 0.16), 0.04, 0.04, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.20, 0.20), 0.04, 0.04, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.24, 0.24), 0.04, 0.04, color='blue'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [5, 10, 15, 20]\ny1 = [90, 80, 70, 60]\ny2 = [80, 70, 60, 50]\ny3 = [70, 60, 50, 40]\ny4 = [60, 50, 40, 30]\ny5 = [50, 40, 30, 20]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y1, 'b-', label='JPEG+LDPC')\nax.plot(x, y2, 'or-', label='DEEPJSCC w/o ofdm')\nax.plot(x, y3, 'g^-', label='DEEPJSCC w/ ofdm')\nax.plot(x, y4, 'r--', label='OURS')\n\n# Set the title and labels\nax.set_title('Classification Accuracy (%)')\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(0, 8)\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Set the x-axis labels\nax.set_xlabel('n')\n\n# Set the y-axis labels\nax.set_ylabel('Performance Gain (%)')\n\n# Set the title\nax.set_title('Performance Metrics')\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8], 'b-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'r-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'g-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9, 10, 11], 'c-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, 10, 11, 12], 'm-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [5, 6, 7, 8, 9, 10, 11, 12, 13], 'y-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [6, 7, 8, 9, 10, 11, 12, 13, 14], 'k-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Draw a horizontal line at y=0.75\nax.axhline(y=0.75, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.70\nax.axhline(y=0.70, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.65\nax.axhline(y=0.65, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.60\nax.axhline(y=0.60, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.55\nax.axhline(y=0.55, color='black', linestyle='-')\n\n# Draw a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Draw a vertical line at x=20\nax.axvline(x=20, color='black', linestyle='-')\n\n# Draw a vertical line at x=40\nax.axvline(x=40, color='black', linestyle='-')\n\n# Draw a vertical line at x=60\nax.axvline(x=60, color='black', linestyle='-')\n\n# Draw a vertical line at x=80\nax.axvline(x=80, color='black', linestyle='-')\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='orange')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='yellow')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='white')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gray')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='brown')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='pink')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='purple')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='cyan')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='magenta')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='teal')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='aqua')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='lime')\nax.add_patch(rect)\n\n# Add a colored rectangle to the plot\nrect = plt.Rectangle((0, 0), 1"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0.25, 0.5, 0.75, 1.0]\ny1 = [0.03, 0.04, 0.05, 0.06]\ny2 = [0.02, 0.03, 0.04, 0.05]\ny3 = [0.01, 0.02, 0.03, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='MAXN=512', color='green')\nax.plot(x, y2, label='MAXN=1024', color='red')\nax.plot(x, y3, label='MAXN=2048', color='blue')\n\n# Add markers at specific points\nax.plot(0.5, 0.04, 'r^')\nax.plot(0.75, 0.05, 'g^')\nax.plot(1.0, 0.06, 'b^')\n\n# Set the title and labels\nax.set_title('Sample Data')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the first line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], 'b-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], 'y-')\n\n# Plot the second line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'b-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'y-')\n\n# Set the title of the plot\nax.set_title('FID (dB)')\n\n# Set the x-axis label\nax.set_xlabel('Training iterations')\n\n# Set the y-axis label\nax.set_ylabel('FID (dB)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F5DEB3')\n\n# Set the title of the plot\nax.set_title('Realize the trend', fontsize=12)\n\n# Set the x-axis label\nax.set_xlabel('Week', fontsize=10)\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value', fontsize=10)\n\n# Set the x-axis limits\nax.set_xlim(1, 28)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([1, 4, 7, 10, 13, 16, 19, 22, 25, 28])\n\n# Set the y-axis ticks\nax.set_yticks([0, 25, 50, 75, 100])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the line colors\nline_colors = ['red', 'blue']\n\n# Set the line styles\nline_styles = ['-', '--']\n\n# Set the line widths\nline_widths = [1, 1]\n\n# Set the line markers\nline_markers = ['x', 'o']\n\n# Set the line marker sizes\nline_marker_sizes = [5, 5]\n\n# Set the line marker edge colors\nline_marker_edge_colors = ['black', 'black']\n\n# Set the line marker face colors\nline_marker_face_colors = ['red', 'blue']\n\n# Set the line marker edge widths\nline_marker_edge_widths = [1, 1]\n\n# Set the line marker face widths\nline_marker_face_widths = [1, 1]\n\n# Set the line marker angles\nline_marker_angles = [0, 0]\n\n# Set the line marker scales\nline_marker_scales = [1, 1]\n\n# Set the line marker rotations\nline_marker_rotations = [0, 0]\n\n# Set the line marker alignments\nline_marker_alignments = ['center', 'center']\n\n# Set the line marker vertical alignments\nline_marker_vertical_alignments = ['center', 'center']\n\n# Set the line marker horizontal alignments\nline_marker_horizontal_alignments = ['center', 'center']\n\n# Set the line marker padding\nline_marker_padding = [0, 0]\n\n# Set the line marker border pad\nline_marker_border_pad = [0, 0]\n\n# Set the line marker clip box\nline_marker_clip_box = [None, None]\n\n# Set the line marker transform\nline_marker_transform = [None, None]\n\n# Set the line marker path\nline_marker_path = [None, None]\n\n# Set the line marker path codes\nline_marker_path_codes = [None, None]\n\n# Set the line marker path vertices\nline_marker_path_vertices = [None, None]\n\n# Set the line marker path closed\nline_marker_path_closed = [False, False]\n\n# Set the line marker path filled\nline_marker_path_filled = [False, False]\n\n# Set the line marker path antialiased\nline_marker_path_antialiased = [True, True]\n\n# Set the line marker path join style\nline_marker_path_join_style = ['miter', 'round']\n\n# Set the line marker path cap style\nline_marker_path_cap_style = ['butt', 'projecting']\n\n# Set the line marker path miter limit\nline_marker_path_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash pattern\nline_marker_path_dash_pattern = [None, None]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0.0]\n\n# Set the line marker path dash cap style\nline_marker_path_dash_cap_style = ['butt', 'projecting']\n\n# Set the line marker path dash join style\nline_marker_path_dash_join_style = ['miter', 'round']\n\n# Set the line marker path dash miter limit\nline_marker_path_dash_miter_limit = [4.0, 4.0]\n\n# Set the line marker path dash phase\nline_marker_path_dash_phase = [0.0, 0.0]\n\n# Set the line marker path dash offset\nline_marker_path_dash_offset = [0.0, 0"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30]\ny5 = [55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='blue')\nax.plot(x, y2, label='LWF', color='#FF6347')\nax.plot(x, y3, label='EWC', color='#FF69B4')\nax.plot(x, y4, label='SEQ', color='#FFC0CB')\n\n# Set the title and labels\nax.set_title('Average Accuracy')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0.85, 1.02)\n\n# Set the x-axis label\nax.set_xlabel('Unertainty threshold')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Define the colors for the lines\ncolors = ['blue', 'red', 'green']\n\n# Define the labels for the lines\nlabels = ['Oesense', 'KWS', 'ECG5000']\n\n# Define the data for the lines\ndata = [\n    [0.99, 0.98, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.90],\n    [0.99, 0.98, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.90],\n    [0.99, 0.98, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.90]\n]\n\n# Plot the lines\nfor i in range(len(data)):\n    ax.plot(range(10), data[i], color=colors[i], label=labels[i])\n\n# Add markers at the end of each line\nfor i in range(len(data)):\n    ax.plot([9], [data[i][9]], marker='o', color=colors[i])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 120)\n\n# Set the y-axis limits\nax.set_ylim(-5, -3)\n\n# Set the x-axis label\nax.set_xlabel('Number of Parameters')\n\n# Set the y-axis label\nax.set_ylabel('Log KL Divergence')\n\n# Plot the line graph\nax.plot([0, 20, 40, 60, 80, 100, 120], [10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5], 'bo-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the graph\nax.set_title('GPT-4 Evaluation')\n\n# Create a rectangle for the first bar\nrect1 = plt.Rectangle((0, 0), 500, 10, color='skyblue')\nax.add_patch(rect1)\n\n# Create a rectangle for the second bar\nrect2 = plt.Rectangle((500, 0), 1000, 10, color='lightcoral')\nax.add_patch(rect2)\n\n# Create a rectangle for the third bar\nrect3 = plt.Rectangle((1500, 0), 500, 10, color='skyblue')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth bar\nrect4 = plt.Rectangle((2000, 0), 1000, 10, color='lightcoral')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth bar\nrect5 = plt.Rectangle((0, 10), 500, 10, color='skyblue')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth bar\nrect6 = plt.Rectangle((500, 10), 1000, 10, color='lightcoral')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh bar\nrect7 = plt.Rectangle((1500, 10), 500, 10, color='skyblue')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth bar\nrect8 = plt.Rectangle((2000, 10), 1000, 10, color='lightcoral')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth bar\nrect9 = plt.Rectangle((0, 20), 500, 10, color='skyblue')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth bar\nrect10 = plt.Rectangle((500, 20), 1000, 10, color='lightcoral')\nax.add_patch(rect10)\n\n# Create a rectangle for the eleventh bar\nrect11 = plt.Rectangle((1500, 20), 500, 10, color='skyblue')\nax.add_patch(rect11)\n\n# Create a rectangle for the twelfth bar\nrect12 = plt.Rectangle((2000, 20), 1000, 10, color='lightcoral')\nax.add_patch(rect12)\n\n# Create a rectangle for the thirteenth bar\nrect13 = plt.Rectangle((0, 30), 500, 10, color='skyblue')\nax.add_patch(rect13)\n\n# Create a rectangle for the fourteenth bar\nrect14 = plt.Rectangle((500, 30), 1000, 10, color='lightcoral')\nax.add_patch(rect14)\n\n# Create a rectangle for the fifteenth bar\nrect15 = plt.Rectangle((1500, 30), 500, 10, color='skyblue')\nax.add_patch(rect15)\n\n# Create a rectangle for the sixteenth bar\nrect16 = plt.Rectangle((2000, 30), 1000, 10, color='lightcoral')\nax.add_patch(rect16)\n\n# Create a rectangle for the seventeenth bar\nrect17 = plt.Rectangle((0, 40), 500, 10, color='skyblue')\nax.add_patch(rect17)\n\n# Create a rectangle for the eighteenth bar\nrect18 = plt.Rectangle((500, 40), 1000, 10, color='lightcoral')\nax.add_patch(rect18)\n\n# Create a rectangle for the nineteenth bar\nrect19 = plt.Rectangle((1500, 40), 500, 10, color='skyblue')\nax.add_patch(rect19)\n\n# Create a rectangle for the twentieth bar\nrect20 = plt.Rectangle((2000, 40), 1000, 10, color='lightcoral')\nax.add_patch(rect20)\n\n# Create a rectangle for the twenty-first bar\nrect21 = plt.Rectangle((0, 50), 500, 10, color='skyblue')\nax.add_patch(rect21)\n\n# Create a rectangle for the twenty-second bar\nrect22 = plt.Rectangle((500, 50), 1000, 10, color='lightcoral')\nax.add_patch(rect22)\n\n# Create a rectangle for the twenty-third bar\nrect23 = plt.Rectangle((1500, 50), 500, 10, color='skyblue')\nax.add_patch(rect23)\n\n# Create a rectangle for the twenty-fourth bar\nrect24 = plt.Rectangle((2000, 50), 1000, 10, color='lightcoral')\nax.add_patch(rect24)\n\n# Create a rectangle for the twenty-fifth bar\nrect25 = plt.Rectangle((0, 60), 500, 10, color='skyblue')\nax.add_patch(rect25)\n\n# Create a rectangle for the twenty-sixth bar\nrect26 = plt.Rectangle((500, 60), 1000, 10, color='lightcoral')\nax.add_patch(rect26)\n\n# Create a rectangle for the twenty-seventh bar\nrect27 = plt.Rectangle((1500, 60), 500, 10, color='skyblue')\nax.add_patch(rect27)\n\n# Create a rectangle for the twenty-eighth bar\nrect28 = plt.Rectangle((2000, 60), 1000, 10, color='lightcoral')\nax.add_patch(rect28)\n\n# Create a rectangle for the twenty-ninth bar\nrect29 = plt.Rectangle((0, 70), 500, 10, color='skyblue')\nax.add_patch(rect29)\n\n# Create a rectangle for the thirtieth bar\nrect30 = plt.Rectangle((500, 70), 1000, 10, color='lightcoral')\nax.add_patch(rect30)\n\n# Create a rectangle for the thirtieth-first bar\nrect31 = plt.Rectangle((1500, 70), 500, 10, color='skyblue')\nax.add_patch(rect31)\n\n# Create a rectangle for the thirtieth-second bar\nrect32 = plt.Rectangle((2000, 70), 1000, 10, color='lightcoral')\nax.add_patch(rect32)\n\n# Create a rectangle for the thirtieth-third bar\nrect33 = plt.Rectangle((0, 80), 500, 10, color='skyblue')\nax.add_patch(rect33)\n\n# Create a rectangle for the thirtieth-fourth bar\nrect34 = plt.Rectangle((500, 80), 1000, 10, color='lightcoral')\nax.add_patch(rect34)\n\n# Create a rectangle for the thirtieth-fifth bar\nrect35 = plt.Rectangle((1500, 80), 500, 10, color='skyblue')\nax.add_patch(rect35)\n\n# Create a rectangle for the thirtieth-sixth bar\nrect36 = plt.Rectangle((2000, 80), 1000, 10, color='lightcoral')\nax.add_patch(rect36)\n\n# Create a rectangle for the thirtieth-seventh bar\nrect37 = plt.Rectangle((0, 90), 500, 10, color='skyblue')\nax.add_patch(rect37)\n\n# Create a rectangle for the thirtieth-eighth bar\nrect38 = plt.Rectangle((500, 90), 1000, 10, color='lightcoral')\nax.add_patch(rect38)\n\n# Create a rectangle for the thirtieth-ninth bar\nrect39 = plt.Rectangle((1500, 90), 500, 10, color='skyblue')\nax.add_patch(rect39)\n\n# Create a rectangle for the thirtieth-tenth bar\nrect40 = plt.Rectangle((2000, 90), 1000, 10, color='lightcoral')\nax.add_patch(rect40)\n\n# Create a rectangle for the thirtieth-eleventh bar\nrect41 = plt.Rectangle((0, 100), 500, 10, color='skyblue')\nax.add_patch(rect41)\n\n# Create a rectangle for the thirtieth-twelfth bar\nrect42 = plt.Rectangle((500, 100), 1000, 10, color='lightcoral')\nax.add_patch(rect42)\n\n# Create a rectangle for the thirtieth-thirteenth bar\nrect43 = plt.Rectangle((1500, 100), 500, 10, color='skyblue')\nax.add_patch(rect43)\n\n# Create a rectangle for the thirtieth-fourteenth bar\nrect44 = plt.Rectangle((2000, 100), 1000, 10, color='lightcoral')\nax.add_patch(rect44)\n\n# Create a rectangle for the thirtieth-fifteenth bar\nrect45 = plt.Rectangle((0, 110), 500, 10, color='skyblue')\nax.add_patch(rect45)\n\n# Create a rectangle for the thirtieth-sixteenth bar\nrect46 = plt.Rectangle((500, 110), 1000, 10, color='lightcoral')\nax.add_patch(rect46)\n\n# Create a rectangle for the thirtieth-seventeenth bar\nrect47 = plt.Rectangle((1500, 110), 500, 10, color='skyblue')\nax.add_patch(rect47)\n\n# Create a rectangle for the thirtieth-eighteenth bar\nrect48 = plt.Rectangle((2000, 110), 1000, 10, color='lightcoral')\nax.add_patch(rect48)\n\n# Create a rectangle for the thirtieth-nineteenth bar\nrect49 = plt.Rectangle((0, 120), 500, 10, color='skyblue')\nax.add_patch(rect49)\n\n# Create a rectangle for the thirtieth-twentieth bar\nrect50 = plt.Rectangle((500, 120), 1000, 10, color='lightcoral')\nax.add_patch(rect50)\n\n# Create a rectangle for the thirtieth-twenty-first bar\nrect51 = plt.Rectangle((1500, 120), 500, 10, color='skyblue')\nax.add_patch(rect51)\n\n# Create a rectangle for the thirtieth-twenty-second bar\nrect52 = plt.Rectangle((2000, 120), 1000, 10, color='lightcoral')\nax.add_patch(rect52)\n\n# Create a rectangle for the thirtieth-twenty-third bar\nrect53 = plt.Rectangle((0, 130), 500, 10, color='skyblue')\nax.add_patch(rect53)\n\n# Create a rectangle for the thirtieth-twenty-fourth bar\nrect54 = plt.Rectangle((500, 130), 1000, 10, color='lightcoral')\nax.add_patch(rect54)\n\n# Create a rectangle for the thirtieth-twenty-fifth bar\nrect55 = plt.Rectangle((1500, 130), 500, 10, color='skyblue')\nax.add_patch(rect55)\n\n# Create a rectangle for the thirtieth-twenty-sixth bar\nrect56 = plt.Rectangle((2000, 130), 1000, 10, color='lightcoral')\nax.add_patch(rect56)\n\n# Create a rectangle for the thirtieth-twenty-seventh bar\nrect57 = plt.Rectangle((0, 140), 500, 10, color='skyblue')\nax.add_patch(rect57)\n\n# Create a rectangle for the thirtieth-twenty-eighth bar\nrect58 = plt.Rectangle((500, 140), 1000, 10, color='lightcoral')\nax.add_patch(rect58)\n\n# Create a rectangle for the thirtieth-twenty-ninth bar\nrect59 = plt.Rectangle((1500, 140), 500, 10, color='skyblue')\nax.add_patch(rect59)\n\n# Create a rectangle for the thirtieth-thirtieth bar\nrect60 = plt.Rectangle((2000, 140), 1000, 10, color='lightcoral')\nax.add_patch(rect60)\n\n# Create a rectangle for the thirtieth-thirtieth-first bar\nrect61 = plt.Rectangle((0, 150), 500, 10, color='skyblue')\nax.add_patch(rect61)\n\n# Create a rectangle for the thirtieth-thirtieth-second bar\nrect62 = plt.Rectangle((500, 150), 1000, 10, color='lightcoral')\nax.add_patch(rect62)\n\n# Create a rectangle for the thirtieth-thirtieth-third bar\nrect63 = plt.Rectangle((1500, 150), 500, 10, color='skyblue')\nax.add_patch(rect63)\n\n# Create a rectangle for the thirtieth-thirtieth-fourth bar\nrect64 = plt.Rectangle((2000, 150), 1000, 10, color='lightcoral')\nax.add_patch(rect64)\n\n# Create a rectangle for the thirtieth-thirtieth-fifth bar\nrect65 = plt.Rectangle((0, 160), 500, 10, color='skyblue')\nax.add_patch(rect65)\n\n# Create a rectangle for the thirtieth-thirtieth-sixth bar\nrect66 = plt.Rectangle((500, 160), 1000, 10, color='lightcoral')\nax.add_patch(rect66)\n\n# Create a rectangle for the thirtieth-thirtieth-seventh bar\nrect67 = plt.Rectangle((1500, 160), 500, 10, color='skyblue')\nax.add_patch(rect67)\n\n# Create a rectangle for the thirtieth-thirtieth-eighth bar\nrect68 = plt.Rectangle((2000, 160), 1000, 10, color='lightcoral')\nax.add_patch(rect68)\n\n# Create a rectangle for the thirtieth-thirtieth-ninth bar\nrect69 = plt.Rectangle((0, 170), 500, 10, color='skyblue')\nax.add_patch(rect69)\n\n# Create a rectangle for the thirtieth-thirtieth-tenth bar\nrect70 = plt.Rectangle((500, 170), 1000, 10, color='lightcoral')\nax.add_patch(rect70)\n\n# Create a rectangle for the thirtieth-thirtieth-eleventh bar\nrect71 = plt.Rectangle((1500, 170), 500, 10, color='skyblue')\nax.add_patch(rect71)\n\n# Create a rectangle for the thirtieth-thirtieth-twelfth bar\nrect72 = plt.Rectangle((2000, 170), 1000, 10, color='lightcoral')\nax.add_patch(rect72)\n\n# Create a rectangle for the thirtieth-thirtieth-thirteenth bar\nrect73 = plt.Rectangle((0, 180), 500, 10, color='skyblue')\nax.add_patch(rect73)\n\n# Create a rectangle for the thirtieth-thirtieth-fourteenth bar\nrect74 = plt.Rectangle((500, 180), 1000, 10, color='lightcoral')\nax.add_patch(rect74)\n\n# Create a rectangle for the thirtieth-thirtieth-fifteenth bar\nrect75 = plt.Rectangle((1500, 180), 500, 10, color='skyblue')\nax.add_patch(rect75)\n\n# Create a rectangle for the thirtieth-thirtieth-sixteenth bar\nrect76 = plt.Rectangle((2000, 180), 1000, 10, color='lightcoral')\nax.add_patch(rect76)\n\n# Create a rectangle for the thirtieth-thirtieth-seventeenth bar\nrect77 = plt.Rectangle((0, 190), 500, 10, color='skyblue')\nax.add_patch(rect77)\n\n# Create a rectangle for the thirtieth-thirtieth-eighteenth bar\nrect78 = plt.Rectangle((500, 190), 1000, 10, color='lightcoral')\nax.add_patch(rect78)\n\n# Create a rectangle for the thirtieth-thirtieth-nineteenth bar\nrect79 = plt.Rectangle((1500, 190), 500, 10, color='skyblue')\nax.add_patch(rect79)\n\n# Create a rectangle for the thirtieth-thirtieth-twentieth bar\nrect80 = plt.Rectangle((2000"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(10**-2, 10**0)\n\n# Set the y-axis limits\nax.set_ylim(40, 80)\n\n# Set the x-axis label\nax.set_xlabel('fraction of training data (log scale)')\n\n# Set the y-axis label\nax.set_ylabel('test accuracy (%)')\n\n# Create a legend with colored rectangles\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Full', markerfacecolor='green', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='SPT', markerfacecolor='red', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='VPT', markerfacecolor='blue', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Plot the lines\nax.plot([10**-2, 10**-1, 10**0], [60, 70, 80], 'g-', label='Full')\nax.plot([10**-2, 10**-1, 10**0], [50, 60, 70], 'r-', label='SPT')\nax.plot([10**-2, 10**-1, 10**0], [40, 50, 60], 'b-', label='VPT')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Define the data\nx = [0, 50, 100, 150, 200]\ny1 = [1.5, 1.8, 1.2, 1.7, 1.9]\ny2 = [1.2, 1.6, 1.1, 1.4, 1.8]\ny3 = [1.0, 1.4, 0.9, 1.2, 1.6]\ny4 = [0.8, 1.2, 0.7, 1.0, 1.4]\n\n# Plot the data\nax.plot(x, y1, label='Gradient 1', color='blue')\nax.plot(x, y2, label='Gradient 2', color='green')\nax.plot(x, y3, label='Gradient 3', color='orange')\nax.plot(x, y4, label='Gradient 4', color='red')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Gradient Data')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Intensity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MOLHIV')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.74, 0.88)\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.78), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.78), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.76), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.76), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.74), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.74), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.72), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.72), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.70), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.70), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.68), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.68), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.66), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.66), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.64), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.64), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.62), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.62), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.60), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.60), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.58), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.58), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.56), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.56), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.54), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.54), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.52), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.52), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.50), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.50), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.48), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.48), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.46), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.46), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.44), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.44), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.42), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.42), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.40), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.40), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.38), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.38), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.36), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.36), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.34), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.34), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.32), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.32), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.30), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.30), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.28), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.28), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.26), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.26), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.24), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.24), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.22), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.22), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.20), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.20), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.18), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.18), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.16), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.16), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.14), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.14), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.12), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.12), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.10), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.10), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.08), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.08), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.06), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.06), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.04), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.04), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.02), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.02), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.00), 0.4, 0.1, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.6, 0.00), 0.4, 0.1, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2,"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(120, 120)\n\n# Set the y-axis limits\nax.set_ylim(75, 95)\n\n# Set the x-axis label\nax.set_xlabel('Imbalance Ratio of Unlabeled Data')\n\n# Set the y-axis label\nax.set_ylabel('Top-1 Acc (%)')\n\n# Set the title\nax.set_title('Top-1 Accuracy vs Imbalance Ratio of Unlabeled Data')\n\n# Plot the data\nax.plot([120], [80], 'o', color='blue')\nax.plot([120], [85], 'o', color='green')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nratio = [40, 50, 60, 70, 80, 90, 100]\nperplexity = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\ncolors = ['blue', 'purple', 'orange', 'green', 'red', 'pink']\n\n# Plot\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\nax.plot(ratio, perplexity, color=colors[0])\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\nax.set_title('Perplexity vs Ratio of 4-bit Utilization')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='APTQ', markerfacecolor=colors[0], markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='LLMa-7B', markerfacecolor=colors[1], markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='OWQ-4bit', markerfacecolor=colors[2], markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='GPTQ-4bit', markerfacecolor=colors[3], markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='LLM-QAT-4bit', markerfacecolor=colors[4], markersize=10)]\nax.legend(handles=legend_elements)\n\n# Grid\nax.grid(True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [82.98, 89.53, 90.47, 92.41, 93.7, 96.75, 98.5]\n\n# Plotting\nplt.figure(figsize=(5.0, 2.0))\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\nplt.title('Coverage Ratio vs Number of Training Objects')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title and labels\nax.set_title('N-ELBO')\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\n\n# Define the data\nx = [0, 2, 4, 6, 8]\ny = [750, 700, 650, 600, 550]\n\n# Plot the data\nax.plot(x, y, 'bo-', label='Average')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [3.2, 3.1, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8], 'r-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.2, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8], 'g-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [4.2, 4.1, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8], 'b-')\n\n# Set the title and labels\nax.set_title('IQM Human Normalized Score')\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN')\n\n# Add a legend\nax.legend(['Baseline', 'SoftMoE', 'Top1-MoE'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Test set TPR | FPR = $10^{-4}$')\n\n# Set the x-axis label\nax.set_xlabel('Vocabulary size')\n\n# Set the y-axis label\nax.set_ylabel('TPR')\n\n# Define the data points\nx = [256, 512, 1024, 2048, 8192, 16384]\ny = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95]\n\n# Plot the data points\nax.plot(x, y, 'b-')\n\n# Add markers at each data point\nfor i, j in zip(x, y):\n    ax.annotate(f'({i}, {j})', xy=(i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\ny1 = [26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0]\ny2 = [17.9, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8, 25.8, 26.8, 27.8, 28.8, 29.8, 30.8, 31.8, 32.8, 33.8, 34.8, 35.8, 36.8, 37.8, 38.8, 39.8, 40.8, 41.8, 42.8, 43.8, 44.8, 45.8, 46.8]\ny3 = [15.8, 16.8, 17.8, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8, 25.8, 26.8, 27.8, 28.8, 29.8, 30.8, 31.8, 32.8, 33.8, 34.8, 35.8, 36.8, 37.8, 38.8, 39.8, 40.8, 41.8, 42.8, 43.8, 44.8]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.plot(x, y1, label='CNN', color='#FFD700')\nax.plot(x, y2, label='CIF', color='#800080')\nax.plot(x, y3, label='STAR', color='#000000')\n\n# Set labels and title\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\nax.set_title('Word Error Rate vs Compression Rate')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [90, 92, 93, 95, 94, 93, 92, 91]\ny2 = [85, 87, 88, 90, 89, 88, 87, 86]\ny3 = [80, 82, 83, 85, 84, 83, 82, 81]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='PILOTE')\nax.plot(x, y2, 'b-', label='Re-trained model')\nax.plot(x, y3, 'g-', label='Pre-trained model accuracy')\n\n# Add markers\nfor i, j in zip(x, y1):\n    ax.plot(i, j, 'ro')\nfor i, j in zip(x, y2):\n    ax.plot(i, j, 'bo')\nfor i, j in zip(x, y3):\n    ax.plot(i, j, 'go')\n\n# Set the title and labels\nax.set_title('Model Accuracy Over Time')\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Add a horizontal line at y=75\nax.axhline(y=75, color='g', linestyle='-')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1], color='blue', label='xLLM')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1], color='red', label='Single-Pass LLM')\n\n# Set the title and labels\nax.set_title('Average Fidelity of LLMs')\nax.set_xlabel('# of Steps')\nax.set_ylabel('Avg Fidelity')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['All', 'MLP', 'GCN', 'NCN', 'NEC', 'SEAL', 'Node2Vec']\nhits = [75, 70, 65, 60, 55, 50, 45]\ncollab = [80, 75, 70, 65, 60, 55, 50]\nppa = [85, 80, 75, 70, 65, 60, 55]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(teams, hits, label='Hits')\nax.plot(teams, collab, label='Collaborations')\nax.plot(teams, ppa, label='PPA')\n\n# Legend\nlegend = ax.legend(loc='upper center', shadow=True)\n\n# Set title and labels\nax.set_title('Team Performance Metrics')\nax.set_xlabel('Teams')\nax.set_ylabel('Metrics')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Android')\n\n# Define the x-axis values\nx = [2, 4, 6, 8, 10, 12]\n\n# Define the y-axis values for each line\ny1 = [0.055, 0.055, 0.055, 0.055, 0.055, 0.055]\ny2 = [0.045, 0.045, 0.045, 0.045, 0.045, 0.045]\ny3 = [0.040, 0.040, 0.040, 0.040, 0.040, 0.040]\ny4 = [0.035, 0.035, 0.035, 0.035, 0.035, 0.035]\n\n# Plot the lines with different colors\nax.plot(x, y1, color='blue', label='outside-code-diff')\nax.plot(x, y2, color='orange', label='inside-code-diff')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Layer')\nax.set_ylabel('Value')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 9)\n\n# Set the y-axis limits\nax.set_ylim(0.3, 10)\n\n# Set the x-axis label\nax.set_xlabel('Digit Length')\n\n# Set the y-axis label\nax.set_ylabel('Digit Accuracy')\n\n# Plot the data\nax.plot([6, 7, 8, 9], [0.5, 0.7, 0.8, 0.9], 'b-', label='Direct (100 samples)')\nax.plot([6, 7, 8, 9], [0.4, 0.6, 0.7, 0.8], 'g-', label='RFFT (100 samples)')\nax.plot([6, 7, 8, 9], [0.3, 0.5, 0.6, 0.7], 'y-', label='Scratchpad (100 samples)')\nax.plot([6, 7, 8, 9], [0.2, 0.4, 0.5, 0.6], 'r-', label='Scratchpad (5000 samples)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Draw horizontal lines\nfor _ in range(5):\n    ax.axhline(y=375, color='black', linestyle='-')\n\n# Draw vertical lines\nfor _ in range(5):\n    ax.axvline(x=20, color='black', linestyle='-')\n\n# Plot the line graph\nax.plot([0, 20, 40, 60, 80], [225, 275, 325, 350, 375], color='orange')\n\n# Add a legend\nax.legend(['iaion', 'CLIP'])\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.65, 0.7, 0.75, 0.75]\ny2 = [0.5, 0.6, 0.65, 0.7, 0.75]\ny3 = [0.5, 0.6, 0.65, 0.7, 0.75]\ny4 = [0.5, 0.6, 0.65, 0.7, 0.75]\ny5 = [0.5, 0.6, 0.65, 0.7, 0.75]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'o-', color='gold')\nax.plot(x, y2, '^-', color='orange')\nax.plot(x, y3, '>-', color='red')\nax.plot(x, y4, '<-', color='blue')\nax.plot(x, y5, 's-', color='navy')\n\n# Set the title and labels\nax.set_title('F1 Scores for Different Models')\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\ny3 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(8.0, 7.0))\ncolor = 'tab:blue'\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('WER (%)', color=color)\nax1.plot(x, y1, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  \ncolor = 'tab:orange'\nax2.set_ylabel('AMI WER (%)', color=color)  \nax2.plot(x, y2, color=color)\nax2.plot(x, y3, color='tab:orange')\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [10**-7, 10**-6, 10**-5, 10**-4]\ny = [1, 2, 3, 4]\nerror = [0.1, 0.2, 0.3, 0.4]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y, 'bo-', label='empirical relat. (B2=8.0)')\nax.errorbar(x, y, yerr=error, fmt='o', ecolor='r', capsize=5)\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Define the data\nratio_r = np.linspace(0.1, 1.0, 10)\nperformance = np.linspace(0.4, 0.9, 10)\nspmotif_0_5 = np.linspace(0.6, 0.8, 10)\nspmotif_0_7 = np.linspace(0.7, 0.9, 10)\nspmotif_0_9 = np.linspace(0.8, 1.0, 10)\n\n# Plot the data\nax.plot(ratio_r, performance, label='Performance')\nax.plot(ratio_r, spmotif_0_5, label='SPMotif-0.5', color='purple')\nax.plot(ratio_r, spmotif_0_7, label='SPMotif-0.7', color='orange')\nax.plot(ratio_r, spmotif_0_9, label='SPMotif-0.9', color='purple')\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('SPMotif Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 30)\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78.0)\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Plot the data\nax.plot([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], color='blue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightgreen')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.0, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 77.5], [75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nepochs = [3, 5, 10, 30]\ngpt_neo = [0.8, 0.7, 0.6, 0.5]\ngpt_5 = [0.7, 0.6, 0.5, 0.4]\ngpt_10 = [0.6, 0.5, 0.4, 0.3]\ngpt_30 = [0.5, 0.4, 0.3, 0.2]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(epochs, gpt_neo, label='GPT-Neo', color='blue')\nax.plot(epochs, gpt_5, label='5', color='yellow')\nax.plot(epochs, gpt_10, label='10', color='red')\nax.plot(epochs, gpt_30, label='30', color='green')\n\n# Adding labels and title\nax.set_xlabel('# Epochs')\nax.set_ylabel('Magnitude')\nax.set_title('Training Loss Over Epochs')\nax.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [96, 192, 336, 512, 720]\ny1 = [0.165, 0.165, 0.165, 0.165, 0.165]\ny2 = [0.16, 0.16, 0.16, 0.16, 0.16]\ny3 = [0.155, 0.155, 0.155, 0.155, 0.155]\ny4 = [0.15, 0.15, 0.15, 0.15, 0.15]\ny5 = [0.145, 0.145, 0.145, 0.145, 0.145]\ny6 = [0.14, 0.14, 0.14, 0.14, 0.14]\ny7 = [0.135, 0.135, 0.135, 0.135, 0.135]\ny8 = [0.13, 0.13, 0.13, 0.13, 0.13]\ny9 = [0.125, 0.125, 0.125, 0.125, 0.125]\ny10 = [0.12, 0.12, 0.12, 0.12, 0.12]\ny11 = [0.115, 0.115, 0.115, 0.115, 0.115]\ny12 = [0.11, 0.11, 0.11, 0.11, 0.11]\ny13 = [0.105, 0.105, 0.105, 0.105, 0.105]\ny14 = [0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Plot\nfig, axs = plt.subplots(3, 4, figsize=(15, 4))\naxs[0, 0].plot(x, y1, 'r-')\naxs[0, 0].set_title('Traffic')\naxs[0, 1].plot(x, y2, 'r-')\naxs[0, 1].set_title('ETMm2')\naxs[0, 2].plot(x, y3, 'r-')\naxs[0, 2].set_title('ETTh2')\naxs[0, 3].plot(x, y4, 'r-')\naxs[0, 3].set_title('ECL')\n\naxs[1, 0].plot(x, y5, 'g-')\naxs[1, 0].set_title('MSF')\naxs[1, 1].plot(x, y6, 'g-')\naxs[1, 1].set_title('MSE')\naxs[1, 2].plot(x, y7, 'g-')\naxs[1, 2].set_title('MSE')\naxs[1, 3].plot(x, y8, 'g-')\naxs[1, 3].set_title('MSE')\n\naxs[2, 0].plot(x, y9, 'b-')\naxs[2, 0].set_title('MSF')\naxs[2, 1].plot(x, y10, 'b-')\naxs[2, 1].set_title('MSE')\naxs[2, 2].plot(x, y11, 'b-')\naxs[2, 2].set_title('MSE')\naxs[2, 3].plot(x, y12, 'b-')\naxs[2, 3].set_title('MSE')\n\nfor ax in axs.flat:\n    ax.set(xlabel='Time', ylabel='Value',\n           title='Some title')\n    ax.label_outer()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nserial_data = {\n    '224': [75, 65, 55, 45, 35],\n    '128': [65, 55, 45, 35, 25],\n    '64': [55, 45, 35, 25, 15],\n    '32': [45, 35, 25, 15, 5]\n}\nparallel_data = {\n    '224': [85, 75, 65, 55, 45],\n    '128': [75, 65, 55, 45, 35],\n    '64': [65, 55, 45, 35, 25],\n    '32': [55, 45, 35, 25, 15]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Plot the data\nfor key, value in serial_data.items():\n    ax.plot(value, label=key)\nax.set_xlabel('Time')\nax.set_ylabel('Top-1 Acc.')\nax.set_title('Serial (n=8, m=1)')\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nfor key, value in parallel_data.items():\n    ax2.plot(value, label=key)\nax2.set_xlabel('Time')\nax2.set_ylabel('Top-1 Acc.')\nax2.set_title('Parallel (n=2, m=4)')\nax2.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(5.0, 25.0)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the title\nax.set_title('Classification Accuracy vs SNR')\n\n# Add a legend\nax.legend(['JPG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'])\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 20.0, 100, color='orange', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 10.0, 100, color='green', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='red', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='blue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='yellow', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='purple', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='pink', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='brown', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='gray', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='cyan', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='magenta', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='silver', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='gold', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='lime', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='navy', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='olive', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='maroon', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='teal', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='aqua', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='fuchsia', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='indigo', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='violet', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='coral', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='chartreuse', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='crimson', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='darkblue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='darkgreen', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='darkorange', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='darkred', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='darkviolet', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='deeppink', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='deepskyblue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='dimgray', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='dodgerblue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='firebrick', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='forestgreen', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='fuchsia', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='gainsboro', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='ghostwhite', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='gold', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='gray', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='green', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='honeydew', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='hotpink', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='indianred', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='indigo', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='ivory', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='khaki', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='lavender', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='lavenderblush', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='lawngreen', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='lemonchiffon', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='lightblue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='lightcoral', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='lightcyan', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='lightgoldenrodyellow', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='lightgray', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='lightgreen', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='lightpink', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='lightsalmon', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='lightseagreen', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='lightskyblue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='lightslategray', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='lightsteelblue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='lightyellow', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='lime', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='limegreen', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='linen', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='magenta', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='maroon', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='mediumaquamarine', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='mediumblue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='mediumorchid', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='mediumpurple', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='mediumseagreen', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='mediumslateblue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='mediumspringgreen', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='mediumturquoise', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='mediumvioletred', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='midnightblue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='mintcream', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((22.5, 0), 2.5, 100, color='mistyrose', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((25.0, 0), 0.0, 100, color='moccasin', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((0, 0), 5.0, 100, color='navajowhite', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((5.0, 0), 5.0, 100, color='navy', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((10.0, 0), 5.0, 100, color='oldlace', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((15.0, 0), 5.0, 100, color='olive', alpha=0.3)\nax.add_patch(rect)\n\n# Add a rectangle\nrect = plt.Rectangle((20.0, 0), 5.0, 100, color='olivedrab', alpha="}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the first line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='purple', label='Line 1 (Sinusoidal)')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], 'o-', color='purple')\n\n# Plot the second line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='blue', label='Line 2 (Quadratic)')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], 'o-', color='blue')\n\n# Add labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Performance Value')\nax.set_title('Performance vs Gradient Steps')\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Plot the third line graph\nax2.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='green', label='Line 3 (Random Noise)')\nax2.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], 'o-', color='green')\n\n# Plot the fourth line graph\nax2.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='red', label='Line 4 (Exponential Focus)')\nax2.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], 'o-', color='red')\n\n# Add labels and title\nax2.set_xlabel('Gradient Steps (x 62.5K)')\nax2.set_ylabel('Exponential Scale')\nax2.set_title('Exponential Scale vs Gradient Steps')\nax2.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Line 1\nx1 = [0, 50, 100, 150, 200]\ny1 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 2\nx2 = [0, 50, 100, 150, 200]\ny2 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 3\nx3 = [0, 50, 100, 150, 200]\ny3 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the lines\nax.plot(x1, y1, 'o-', label='Line 1', color='orange')\nax.plot(x2, y2, 's-', label='Line 2', color='blue')\nax.plot(x3, y3, '^-', label='Line 3', color='green')\n\n# Set the title and labels\nax.set_title('Line Graph')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Define the data\nx = ['All', 'MLP', 'GCN', 'NCN', 'NEOGNN-BUDDY', 'Node2Vec']\ny1 = [75, 70, 65, 60, 55, 65]\ny2 = [80, 75, 70, 65, 60, 55]\n\n# Plot the data\nax.plot(x, y1, label='ogbl-collab 2022')\nax.plot(x, y2, label='ogbl-collab 2023')\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('ogbl-collab Results')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the grid\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(10, 60)\n\n# Set the y-axis limits\nax.set_ylim(-14, -12)\n\n# Set the x-axis ticks\nax.set_xticks([10, 20, 30, 40, 50, 60])\n\n# Set the y-axis ticks\nax.set_yticks([-14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0])\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Precision')\n\n# Set the title\nax.set_title('Performance of Different Models')\n\n# Add a legend\nax.legend(['Standard', 'Constrained', 'Experimental', 'Hypothetical'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the graph\nax.set_title('Graph Variation 1')\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Peak Performance')\n\n# Set the x-axis limits\nax.set_xlim(1, 6)\n\n# Set the y-axis limits\nax.set_ylim(10**-4, 10**10)\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6], [10**-2, 10**-2, 10**-2, 10**-2, 10**-2, 10**-2], 'b-')\nax.plot([1, 2, 3, 4, 5, 6], [10**-3, 10**-3, 10**-3, 10**-3, 10**-3, 10**-3], 'r-')\nax.plot([1, 2, 3, 4, 5, 6], [10**-4, 10**-4, 10**-4, 10**-4, 10**-4, 10**-4], 'g-')\nax.plot([1, 2, 3, 4, 5, 6], [10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5], 'y-')\n\n# Add a legend\nax.legend(['Standard', 'Constrained', 'Innovative', 'Experimental'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Daytime Activity Monitoring\nax.plot(np.linspace(0, 25, 100), np.sin(np.linspace(0, 25, 100)), 'b-')\nax.set_title('Daytime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\n\n# Nighttime Activity Monitoring\nax2 = fig.add_axes([0.1, 0.1, 0.8, 0.8], facecolor='w')\nax2.plot(np.linspace(0, 25, 100), np.cos(np.linspace(0, 25, 100)), 'r-')\nax2.set_title('Nighttime Activity Monitoring')\nax2.set_xlabel('Time (Hours)')\nax2.set_ylabel('Activity Level')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the time range\ntime = np.arange(0, 13)\n\n# Define the performance index values\nperformance_index = np.array([0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Plot the performance index\nax.plot(time, performance_index, color='blue')\n\n# Add a title\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Add a legend\nax.legend(['Standard Performance', 'Innovative Performance'])\n\n# Set the x-axis label\nax.set_xlabel('Time (Months)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Index')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sales and Temperature Correlation Over a Year')\n\n# Set the x-axis label\nax.set_xlabel('Month')\n\n# Set the y-axis label\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Set the x-axis limits\nax.set_xlim(1, 12)\n\n# Set the y-axis limits\nax.set_ylim(800, 1600)\n\n# Set the x-axis ticks\nax.set_xticks(range(1, 13))\n\n# Set the y-axis ticks\nax.set_yticks(range(800, 1700, 100))\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900], color='red')\n\n# Draw a scatter plot\n"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Exponential Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'g-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'go')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'r-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'ro')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'b-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'bo')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'm-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'mo')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'c-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'co')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'y-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'yo')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'k-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'ko')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'w-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 0.8, 0.3, 0.8, 1.3, 0.8], 'wo')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\ny2 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\ny3 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\ny4 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, label='5-shot direct', color='blue')\nax.plot(x, y2, label='5-shot scratchpad', color='orange')\nax.plot(x, y3, label='5-shot rule-following', color='green')\n\n# Set the title and labels\nax.set_title('Accuracy vs Digit Length')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Smoothed Representation')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Plot the data\nax.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.3, 0.3], 'p-', color='purple', label='Smoothed Data')\nax.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.3, 0.3], 'p-', color='purple')\n\n# Add a legend to the plot\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second subplot\nax2.set_title('First Difference of Data')\n\n# Set the x-axis label\nax2.set_xlabel('Time')\n\n# Set the y-axis label\nax2.set_ylabel('Delta Value')\n\n# Plot the data\nax2.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.3, 0.3], 'p-', color='orange', label='Difference Data')\nax2.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.3, 0.3], 'p-', color='orange')\n\n# Add a legend to the second subplot\nax2.legend()\n\n# Create a third subplot\nax3 = fig.add_subplot(213)\n\n# Set the title of the third subplot\nax3.set_title('Cumulative Sum Over Time')\n\n# Set the x-axis label\nax3.set_xlabel('Time')\n\n# Set the y-axis label\nax3.set_ylabel('Cumulative Sum')\n\n# Plot the data\nax3.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.3, 0.3], 'p-', color='green', label='Cumulative Sum')\nax3.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.3, 0.3], 'p-', color='green')\n\n# Add a legend to the third subplot\nax3.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Sinusoidal Pattern')\n\n# Create a line plot with a specific color\nax.plot([0, 10], [1.5, 1.5], color='fuchsia', label='Sin Wave')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 10)\nax.set_ylim(-1.5, 1.5)\n\n# Add a legend to the plot\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(312)\nax2.set_title('Cosine Pattern')\nax2.plot([0, 10], [1.5, 1.5], color='green', label='Cos Wave')\nax2.set_xlim(0, 10)\nax2.set_ylim(-1.5, 1.5)\nax2.legend()\n\n# Create a third subplot\nax3 = fig.add_subplot(313)\nax3.set_title('Exponential Decay')\nax3.plot([0, 10], [1.5, 1.5], color='blue', label='Exp Decay')\nax3.set_xlim(0, 10)\nax3.set_ylim(-1.5, 1.5)\nax3.legend()\n\n# Create a fourth subplot\nax4 = fig.add_subplot(314)\nax4.set_title('Logarithmic Growth')\nax4.plot([0, 10], [1.5, 1.5], color='red', label='Log Growth')\nax4.set_xlim(0, 10)\nax4.set_ylim(-1.5, 1.5)\nax4.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4], [82, 85, 87, 89], 'r-')\nax.plot([0.1, 0.2, 0.3, 0.4], [80, 82, 84, 86], 'b-')\n\n# Set the title and labels\nax.set_title('Negative bound')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Weight (kg)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny1 = [82, 81, 80, 79, 78, 77, 76, 75, 74]\ny2 = [85, 84, 83, 82, 81, 80, 79, 78, 77]\ny3 = [80, 79, 78, 77, 76, 75, 74, 73, 72]\ny4 = [82, 81, 80, 79, 78, 77, 76, 75, 74]\ny5 = [85, 84, 83, 82, 81, 80, 79, 78, 77]\ny6 = [80, 79, 78, 77, 76, 75, 74, 73, 72]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(x, y1, 'r-', label='Positive Bound')\naxs[0, 0].set_title('Positive Bound')\naxs[0, 0].legend()\n\n# Plot the second subplot\naxs[0, 1].plot(x, y2, 'g-', label='Negative Bound')\naxs[0, 1].set_title('Negative Bound')\naxs[0, 1].legend()\n\n# Plot the third subplot\naxs[1, 0].plot(x, y3, 'b-', label='Contrastive Loss Weight')\naxs[1, 0].set_title('Contrastive Loss Weight')\naxs[1, 0].legend()\n\n# Plot the fourth subplot\naxs[1, 1].plot(x, y4, 'm-', label='Fuzzy Coefficient')\naxs[1, 1].set_title('Fuzzy Coefficient')\naxs[1, 1].legend()\n\n# Plot the fifth subplot\naxs[2, 0].plot(x, y5, 'c-', label='Additional Metric 1')\naxs[2, 0].set_title('Additional Metric 1')\naxs[2, 0].legend()\n\n# Plot the sixth subplot\naxs[2, 1].plot(x, y6, 'y-', label='Additional Metric 2')\naxs[2, 1].set_title('Additional Metric 2')\naxs[2, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\n\"\"\"\nThis is a simple matplotlib plot with three subplots. Each subplot contains a line graph of the same data, but with different labels and colors. The first subplot has a red line graph with the label \"Dry\" and the second subplot has a green line graph with the label \"Rain\". The third subplot has a blue line graph with the label \"Fog\".\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure with three subplots\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Plot the data in each subplot\nfor ax in axs:\n    ax.plot([1, 2, 3, 4, 5], [1, 2, 3, 2, 1])\n    ax.set_xlabel('Driving Style')\n    ax.set_ylabel('Relaxation Level')\n\n# Set the title of each subplot\naxs[0].set_title('Dry vs Rain')\naxs[1].set_title('Snow vs Fog')\naxs[2].set_title('Rain vs Snow')\n\n# Set the color of the lines in each subplot\naxs[0].plot([1, 2, 3, 4, 5], [1, 2, 3, 2, 1], 'r-')\naxs[1].plot([1, 2, 3, 4, 5], [1, 2, 3, 2, 1], 'g-')\naxs[2].plot([1, 2, 3, 4, 5], [1, 2, 3, 2, 1], 'b-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nn_aug = [0, 0.125, 0.25, 0.5, 1, 2, 4, 8]\nperformance_gain = [6, 7, 6, 5, 4, 3, 2, 1]\ncontent = [8, 7, 6, 5, 4, 3, 2, 1]\norganization = [6, 5, 4, 3, 2, 1, 0, -1]\nlanguage = [4, 3, 2, 1, 0, -1, -2, -3]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\nax.plot(n_aug, performance_gain, label='Performance Gain (%)')\nax.plot(n_aug, content, label='Content', color='blue')\nax.plot(n_aug, organization, label='Organization', color='red')\nax.plot(n_aug, language, label='Language', color='green')\n\n# Annotations\nfor i, j in enumerate(performance_gain):\n    ax.annotate(f'{j}', (n_aug[i], j), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\n\"\"\"\nThis script generates a matplotlib plot with three subplots side by side.\nEach subplot represents a different model and its performance metrics.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for each model\nmodels = ['COCO 10K', 'LAION 10K', 'COCO & LAION 5K']\ndecomp_norms = [0, 20, 40, 60, 80]\naccuracies = [0.75, 0.70, 0.65, 0.60, 0.55]\nlosses = [0.75, 0.70, 0.65, 0.60, 0.55]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot the data for each model\nfor i, model in enumerate(models):\n    # Set the title of the subplot\n    axs[i].set_title(model)\n    \n    # Plot the accuracy and loss curves\n    axs[i].plot(decomp_norms, accuracies, label='Accuracy')\n    axs[i].plot(decomp_norms, losses, label='Loss')\n    \n    # Add a legend to the subplot\n    axs[i].legend()\n    \n    # Set the x-axis and y-axis labels\n    axs[i].set_xlabel('Decomposition IO Norm')\n    axs[i].set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 9.0))\n\n# Set the x-axis limits\nax.set_xlim(0.025, 0.3)\n\n# Set the y-axis limits\nax.set_ylim(0.08, 0.9)\n\n# Set the x-axis ticks\nax.set_xticks([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3])\n\n# Set the y-axis ticks\nax.set_yticks([0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9])\n\n# Set the x-axis label\nax.set_xlabel('Parameter Rate')\n\n# Set the y-axis label\nax.set_ylabel('Metric')\n\n# Set the title\nax.set_title('Error Rate vs. Learning Rate')\n\n# Plot the data\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0.0, 0.0, 0.0], 'b-', label='Error Rate vs. Learning Rate (Batch Size=64)')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0.0, 0.0, 0.0], 'r-', label='Error Rate vs. Learning Rate (Batch Size=128)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the first line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], label='Base Model', color='blue')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.07, 0.03, 0.015], label='Our Model', color='orange')\n\n# Plot the second line graph\nax2 = ax.twinx()\nax2.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], label='Base Model', color='blue')\nax2.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.07, 0.03, 0.015], label='Our Model', color='orange')\n\n# Set the labels and title\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\nax.set_title('Metric 1')\nax.legend(loc='upper left')\n\nax2.set_ylabel('Metric Value')\nax2.set_title('Metric 2')\nax2.legend(loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], color='blue', label='Base Model')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2], color='cyan', label='Our Model')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 6*10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**-13, 10**-4)\n\n# Set the x-axis ticks\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-13, 10**-10, 10**-7, 10**-4, 10**-1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^1', '2*10^1', '3*10^1', '4*10^1', '5*10^1', '6*10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-13', '10^-10', '10^-7', '10^-4', '10^-1'])\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the label for the x-axis\nax.set_xlabel('N')\n\n# Set the label for the y-axis\nax.set_ylabel('Y')\n\n# Add a legend\nax.legend(['Standard', 'Constrained'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the y-axis ticks\nax.set_yticks([-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5])\n\n# Set the grid\nax.grid(True)\n\n# Set the performance line\nperformance_line = [0.5, 0.7, 0.9, 1.1, 1.3, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5]\nax.plot(performance_line, 'b-')\n\n# Set the efficiency line\nefficiency_line = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9]\nax.plot(efficiency_line, 'r-')\n\n# Set the legend\nax.legend(['Performance', 'Efficiency'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Define the data for the plot\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.3, 0.7, 0.9, 0.8, 0.5, 0.2]\ny2 = [0.4, 0.6, 0.8, 0.7, 0.4, 0.1]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis limits\nax.set_xlim(0, 30)\n\n# Set the grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#e0f3db')\n\n# Set the performance data\nperformance_data = [0.8, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\n\n# Set the efficiency data\nefficiency_data = [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Set the growth data\ngrowth_data = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Plot the performance data\nax.plot(performance_data, 'bo-', label='Performance')\n\n# Plot the efficiency data\nax.plot(efficiency_data, 'ro-', label='Efficiency')\n\n# Plot the growth data\nax.plot(growth_data, 'go-', label='Growth')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('bisque')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value')\n\n# Define the data for each series\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.6, 0.4, 0.2, 0.3, 0.5, 0.7]\ny2 = [0.8, 0.6, 0.4, 0.5, 0.7, 0.9]\ny3 = [0.7, 0.5, 0.3, 0.4, 0.6, 0.8]\n\n# Plot the data with different colors and line styles\nax.plot(x, y1, 'b--', label='Data Series 1')\nax.plot(x, y2, 'g--', label='Data Series 2 with Gradient')\nax.plot(x, y3, 'm--', label='Data Series 3')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Accuracy (%)')\n\n# Set the x-axis label\nax.set_xlabel('Task')\n\n# Set the y-axis label\nax.set_ylabel('Average Accuracy (%)')\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='BaCE')\nax.plot(x, y2, 'c-', label='LWF')\nax.plot(x, y3, 'g-', label='EWC')\nax.plot(x, y4, 'm-', label='SEQ')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [80, 85, 90, 95, 90, 85, 80, 75, 70, 65]\ncolors1 = ['blue', 'cyan']\n\n# Data for the second graph\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ncolors2 = ['red', 'pink']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the first graph\naxs[0].plot(x1, y1, marker='o', color=colors1[0])\naxs[0].set_title('Performance Comparison: BaCE vs EWC')\naxs[0].set_xlabel('Task')\naxs[0].set_ylabel('Average Accuracy (%)')\n\n# Plot the second graph\naxs[1].plot(x2, y2, marker='o', color=colors2[0])\naxs[1].set_title('Performance Comparison: LWF vs SE')\naxs[1].set_xlabel('Task')\naxs[1].set_ylabel('Average Accuracy (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Set the title of the plot\nax.set_title('model1 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate')\n\n# Set the x-axis limits\nax.set_xlim(0, 2000)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Create a rectangle patch\nrect = plt.Rectangle((0, 0), 100, 50, color='blue', alpha=0.3)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], color='red')\n\n# Create a scatter plot\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], color='green')\n\n# Create a bar chart\nax.bar([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], color='purple')\n\n# Create a pie chart\nax.pie([0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], colors=['blue', 'red', 'green', 'purple'])\n\n# Create a histogram\nax.hist([0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], bins=10, color='orange')\n\n# Create a scatter plot with a regression line\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], color='pink')\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], color='blue')\n\n# Create a scatter plot with a regression line and a confidence interval\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], color='pink')\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], color='blue')\nax.fill_between([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], color='gray', alpha=0.3)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Microphone Performance')\n\n# Set the x-axis label\nax.set_xlabel('Number of microphones')\n\n# Set the y-axis label\nax.set_ylabel('WAVER (%)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the tick labels for the y-axis\nax.set_yticks([2, 3, 4, 5, 6, 7, 8, 9])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the plot\nax.plot([2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8], 'o-', color='orange')\n\n# Set the color of the markers\nax.plot([2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8], 'o', color='blue')\n\n# Set the color of the legend\nax.legend(['IHM', 'SDM'], loc='upper right', fancybox=True, shadow=True)\n\n# Set the color of the plot\nax.plot([2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8], 'o-', color='orange')\n\n# Set the color of the markers\nax.plot([2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8], 'o', color='blue')\n\n# Set the color of the legend\nax.legend(['IHM', 'SDM'], loc='upper right', fancybox=True, shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title and labels\nax.set_title('Trend Comparison')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\n\n# Define the data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]\ny2 = [2.3, 3.3, 4.3, 5.3, 6.3, 7.3, 8.3]\ny3 = [2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1]\n\n# Plot the data\nax.plot(x, y1, color='green', label='IHM Trend')\nax.plot(x, y2, color='purple', label='SDM Trend')\nax.plot(x, y3, color='orange', label='AMT Trend')\n\n# Add markers at specific points\nmarkers = [2, 4, 6, 8]\nfor marker in markers:\n    ax.plot(marker, y1[marker-2], 'o', color='blue')\n    ax.plot(marker, y2[marker-2], 'o', color='orange')\n    ax.plot(marker, y3[marker-2], 'o', color='red')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ny2 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\ny3 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='Highlight 3')\nax.plot(x, y2, label='Highlight 5')\nax.plot(x, y3, label='Highlight 7')\n\n# Add markers for specific points\nax.plot(2, 0.9, 's', color='blue')\nax.plot(3, 0.8, 'o', color='red')\nax.plot(4, 0.7, 's', color='blue')\nax.plot(5, 0.6, 'o', color='red')\nax.plot(6, 0.5, 's', color='blue')\nax.plot(7, 0.4, 'o', color='red')\nax.plot(8, 0.3, 's', color='blue')\n\n# Add a horizontal line\nax.axhline(y=0.7, color='r', linestyle='-')\n\n# Add a vertical line\nax.axvline(x=4, color='b', linestyle='-')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Wavelength vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('Wavelength (nm)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Define the data\nx = np.linspace(0.1, 1.0, 100)\ny1 = np.sin(x * np.pi / 2)\ny2 = np.cos(x * np.pi / 2)\ny3 = np.tan(x * np.pi / 2)\n\n# Plot the data\nax.plot(x, y1, label='Positive bound.')\nax.plot(x, y2, label='Negative bound.')\nax.plot(x, y3, label='Contrastive loss weight.')\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('Fuzzy coefficient.')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Plot the first graph\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'y-')\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'ro')\nax.set_title('Highlight 3')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Plot the second graph\nax2 = fig.add_subplot(122)\nax2.plot([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'g-')\nax2.plot([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'go')\nax2.set_title('Highlight 3')\nax2.set_xlabel('Number of Microphones')\nax2.set_ylabel('Threshold')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.1, 0.4), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.3, 0.4), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.5, 0.4), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.7, 0.4), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.9, 0.4), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.1, 0.6), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.3, 0.6), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.5, 0.6), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.7, 0.6), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.9, 0.6), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.1, 0.8), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.3, 0.8), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.5, 0.8), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.7, 0.8), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.9, 0.8), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.1, 1.0), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.3, 1.0), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.5, 1.0), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with a blue color\nrect = plt.Rectangle((0.7, 1.0), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with a green color\nrect = plt.Rectangle((0.9, 1.0), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.4, 1.0)\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgreen')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(-80, 80)\n\n# Set the x-axis ticks\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([-80, -60, -40, -20, 0, 20, 40, 60, 80])\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the title\nax.set_title('Dynamic Performance Trends')\n\n# Set the legend\nax.legend(['PNA + ours', 'GIN + ours'])\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'ro')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'yo')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'bo')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'go')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\ny2 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n# Plot the data points\nax.plot(x, y1, 'o-', color='purple', label='PNA + ours')\nax.plot(x, y2, 'o-', color='orange', label='GIN + ours')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.5, 0.7, 0.9, 0.8, 0.6, 0.4]\ny2 = [0.3, 0.5, 0.7, 0.6, 0.4, 0.2]\n\n# Plot the data points\nax.plot(x, y1, 'bo-')\nax.plot(x, y2, 'ro-')\n\n# Add a legend\nax.legend(['PNA + ours', 'GIN + ours'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Model Accuracies')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the grid\nax.grid(True)\n\n# Set the x-ticks\nax.set_xticks([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n\n# Set the y-ticks\nax.set_yticks([60, 65, 70, 75, 80, 85, 90, 95])\n\n# Set the x-tick labels\nax.set_xticklabels(['5', '7', '9', '11', '13', '15', '17', '19', '21', '23', '25', '27', '29'])\n\n# Set the y-tick labels\nax.set_yticklabels(['60', '65', '70', '75', '80', '85', '90', '95'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', length=2)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', width=1)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', direction='in')\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', pad=5)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', rotation=0)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelleft=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelright=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labeltop=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelbottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', bottom=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', top=False)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', left=True)\n\n# Set the color of the tick mark labels\nax.tick_params(axis='both', which='minor', right=False)\n\n# Set the color of the tick mark"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [90, 92, 93, 94, 95, 94, 93, 92, 91, 90]\ny2 = [85, 87, 88, 89, 90, 89, 88, 87, 86, 85]\ny3 = [80, 82, 83, 84, 85, 84, 83, 82, 81, 80]\n\n# Data for the second graph\ny4 = [75, 77, 78, 79, 80, 79, 78, 77, 76, 75]\ny5 = [70, 72, 73, 74, 75, 74, 73, 72, 71, 70]\ny6 = [65, 67, 68, 69, 70, 69, 68, 67, 66, 65]\n\n# Data for the third graph\ny7 = [60, 62, 63, 64, 65, 64, 63, 62, 61, 60]\ny8 = [55, 57, 58, 59, 60, 59, 58, 57, 56, 55]\ny9 = [50, 52, 53, 54, 55, 54, 53, 52, 51, 50]\n\n# Create the first graph\nfig, ax1 = plt.subplots(figsize=(8.0, 12.0))\nax1.plot(x, y1, 'r-', label='Config A - Model X')\nax1.plot(x, y2, 'g-', label='Config B - Model X')\nax1.plot(x, y3, 'b-', label='Config C - Model X')\nax1.set_xlabel('Iteration')\nax1.set_ylabel('Score', color='b')\nax1.tick_params(axis='y', labelcolor='b')\n\n# Create the second graph\nax2 = ax1.twinx()\nax2.plot(x, y4, 'r--', label='Config A - Model X')\nax2.plot(x, y5, 'g--', label='Config B - Model X')\nax2.plot(x, y6, 'b--', label='Config C - Model X')\nax2.set_ylabel('Score', color='g')\nax2.tick_params(axis='y', labelcolor='g')\n\n# Create the third graph\nax3 = ax1.twinx()\nax3.plot(x, y7, 'r-.', label='Config A - Model X')\nax3.plot(x, y8, 'g-.', label='Config B - Model X')\nax3.plot(x, y9, 'b-.', label='Config C - Model X')\nax3.set_ylabel('Score', color='r')\nax3.tick_params(axis='y', labelcolor='r')\n\n# Add legends\nfig.legend(loc=\"upper left\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Performance of Llama')\n\n# Set the x-axis label\nax.set_xlabel('Iteration')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis ticks\nax.set_xticks([2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks(range(70, 90, 5))\n\n# Plot the data\nax.plot([2, 4, 6, 8, 10], [80, 82, 84, 86, 88], 'r-')\nax.plot([2, 4, 6, 8, 10], [82, 84, 86, 88, 90], 'g-')\nax.plot([2, 4, 6, 8, 10], [84, 86, 88, 90, 92], 'b-')\n\n# Add a legend\nax.legend(['Config A - Llama', 'Config B - Llama', 'Config C - Llama'])\n\n# Add markers\nax.plot([2, 4, 6, 8, 10], [80, 82, 84, 86, 88], 'rp')\nax.plot([2, 4, 6, 8, 10], [82, 84, 86, 88, 90], 'gp')\nax.plot([2, 4, 6, 8, 10], [84, 86, 88, 90, 92], 'bp')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Sales Growth by Quarter')\n\n# Set the x-axis label\nax.set_xlabel('Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Sales Growth')\n\n# Define the data for each brand\nbrands = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E', 'Brand F']\nsales_growth = [2.5, 2.4, 2.3, 2.2, 2.1, 2.0]\n\n# Plot the sales growth for each brand\nfor i, brand in enumerate(brands):\n    ax.plot(range(1, 5), [i + 1] * 4, label=brand, marker='o')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 4.0))\n\n# Define the data\ntime = np.arange(100, 800, 100)\nmetric_value = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0])\n\n# Plot the data\nax.plot(time, metric_value, 'o-')\n\n# Set the title and labels\nax.set_title('Traffic Performance')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain']\nrelaxation_levels = [14, 12, 10, 8, 6, 4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i, style in enumerate(driving_styles):\n    ax.plot(weather_conditions, relaxation_levels[i*2:i*2+2], label=style)\n\n# Set the title and labels\nax.set_title('Relaxation Level')\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nphases = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5']\ngrowth_a = [20, 25, 30, 35, 40]\ngrowth_b = [25, 30, 35, 40, 45]\ngrowth_c = [30, 35, 40, 45, 50]\ngrowth_d = [35, 40, 45, 50, 55]\ngrowth_e = [40, 45, 50, 55, 60]\ngrowth_f = [45, 50, 55, 60, 65]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(9.0, 6.0))\n\n# Plot for Category A Growth\naxs[0, 0].plot(phases, growth_a, color='purple')\naxs[0, 0].set_title('Category A Growth')\naxs[0, 0].set_xlabel('Growth Phase')\naxs[0, 0].set_ylabel('Cumulative Value')\n\n# Plot for Category B Growth\naxs[0, 1].plot(phases, growth_b, color='red')\naxs[0, 1].set_title('Category B Growth')\naxs[0, 1].set_xlabel('Growth Phase')\naxs[0, 1].set_ylabel('Cumulative Value')\n\n# Plot for Category C Growth\naxs[1, 0].plot(phases, growth_c, color='orange')\naxs[1, 0].set_title('Category C Growth')\naxs[1, 0].set_xlabel('Growth Phase')\naxs[1, 0].set_ylabel('Cumulative Value')\n\n# Plot for Category D Growth\naxs[1, 1].plot(phases, growth_d, color='blue')\naxs[1, 1].set_title('Category D Growth')\naxs[1, 1].set_xlabel('Growth Phase')\naxs[1, 1].set_ylabel('Cumulative Value')\n\n# Plot for Category E Growth\naxs[2, 0].plot(phases, growth_e, color='green')\naxs[2, 0].set_title('Category E Growth')\naxs[2, 0].set_xlabel('Growth Phase')\naxs[2, 0].set_ylabel('Cumulative Value')\n\n# Plot for Category F Growth\naxs[2, 1].plot(phases, growth_f, color='brown')\naxs[2, 1].set_title('Category F Growth')\naxs[2, 1].set_xlabel('Growth Phase')\naxs[2, 1].set_ylabel('Cumulative Value')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 30)\n\n# Set the y-axis limits\nax.set_ylim(10, 12)\n\n# Draw horizontal lines\nfor i in range(10, 13):\n    ax.axhline(i, color='gray', linestyle='--')\n\n# Draw vertical lines\nfor i in range(4, 31, 2):\n    ax.axvline(i, color='gray', linestyle='--')\n\n# Plot the first line\nax.plot([4, 6, 10], [10, 12, 10], 'b-')\n\n# Plot the second line\nax.plot([4, 6, 10], [10, 12, 10], 'r-')\n\n# Add a legend\nax.legend(['Standard', 'Constrained'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the map\nregions = ['South', 'North', 'West', 'East']\npopulations = [25, 40, 10, 15]\ncolors = ['yellow', 'lightblue', 'orange', 'purple']\n\n# Create a figure and axis for the map\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Draw the map\nfor i, region in enumerate(regions):\n    ax.add_patch(plt.Rectangle((i*0.2, 0), 0.2, 1, color=colors[i]))\n    ax.text(i*0.2 + 0.1, 0.5, region, ha='center', va='center')\n\n# Define the data for the pie chart\nregions = ['North', 'South', 'East', 'West', 'Central']\nrates = [35, 25, 20, 15, 5]\ncolors = ['lightgreen', 'cyan', 'salmon', 'lavender', 'lightcoral']\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Draw the pie chart\nax.pie(rates, labels=regions, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Literacy Rate by Region')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\n\"\"\"\n=====================================\nVisualizing a Colorful Palette Chart\n=====================================\n\nThis example demonstrates how to create a colorful palette chart using Matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the chart\ncategories = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive']\npalette = ['blue', 'green', 'red', 'purple', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(category, np.random.rand(1), color=palette[i])\n\n# Set the title and labels\nax.set_title('Colorful Palette Chart')\nax.set_xlabel('Category')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left bar chart\nmodels = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendryks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nerrors = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\n\n# Data for the right bar chart\nmodels_right = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendryks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nrf_values = [\n    [0.00, 6.20, 4.90, 4.25, 3.65, 3.25],\n    [0.00, 6.15, 5.25, 2.80, 3.65, 2.50],\n    [0.00, 5.35, 6.30, 5.25, 2.95, 2.50],\n    [0.00, 6.25, 5.45, 3.85, 4.85, 4.15],\n    [0.00, 5.75, 6.45, 5.25, 3.85, 4.95],\n    [0.00, 6.95, 7.15, 6.45, 8.95, 6.85],\n    [0.00, 9.15, 7.15, 8.95, 9.15, 9.90]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the left bar chart\nax.bar(models, errors, color='green')\nax.set_xlabel('Models')\nax.set_ylabel('Robust Error (%)')\nax.set_title('Robust Error (%)')\n\n# Plot the right bar chart\nax2 = ax.twinx()\ncolors = ['yellow', 'lightgreen', 'lightblue', 'orange', 'pink', 'cyan', 'magenta']\nfor i, model in enumerate(models_right):\n    ax2.bar(model, rf_values[i], color=colors[i % len(colors)], alpha=0.5)\nax2.set_ylabel('RFs (%)')\nax2.set_title('RFs (%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmodels = ['VGG16', 'Resnet101']\naccuracies = [0.551, 0.538, 0.043, 0.195, 0.744, 0.394, 0.477, 0.762]\nrotation_angles = [0, 30, 60, 90, 120, 150, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot 1: Model Accuracies\nax[0].bar(models, accuracies, color=['pink', 'orange', 'blue'])\nax[0].set_title('Model Accuracies')\n\n# Plot 2: Retinotopic Maps\nretinotopic_maps = [0.551, 0.538, 0.043, 0.195, 0.744, 0.394, 0.477, 0.762]\nax[1].bar(models, retinotopic_maps, color=['lightblue', 'lightgreen', 'lightgrey'])\nax[1].set_title('Retinotopic Maps')\n\n# Plot 3: Rotation Invariance\nax[2].plot(rotation_angles, [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2], label='VGG16 Cartesian')\nax[2].plot(rotation_angles, [0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5], label='Resnet101 Cartesian')\nax[2].plot(rotation_angles, [0.8, 0.78, 0.76, 0.74, 0.72, 0.7, 0.68], label='VGG16 Retinotopic')\nax[2].plot(rotation_angles, [0.8, 0.77, 0.75, 0.73, 0.71, 0.69, 0.67], label='Resnet101 Polar')\nax[2].set_title('Rotation Invariance')\nax[2].legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Color Palette')\n\n# Set the x-axis label\nax.set_xlabel('Sensitivity')\n\n# Set the y-axis label\nax.set_ylabel('Intensity')\n\n# Set the color map for the plot\ncmap = 'viridis'\n\n# Create a grid of subplots\nfor i in range(4):\n    for j in range(4):\n        # Create a subplot\n        ax = fig.add_subplot(4, 4, i*4+j+1)\n        \n        # Set the title of the subplot\n        ax.set_title('Subplot ' + str(i*4+j+1))\n        \n        # Set the color map for the subplot\n        ax.imshow([[0.5]*10 for _ in range(10)], cmap=cmap)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the first graph\nax.plot([0, 10, 20, 30, 40, 50], [-8, -8.5, -9, -9.5, -10, -10.5], 'k-')\nax.fill_between([0, 10, 20, 30, 40, 50], [-8, -8.5, -9, -9.5, -10, -10.5], [-10, -10, -10, -10, -10, -10], color='lightgrey', alpha=0.5)\nax.set_xlabel('GPT2 Tokenizer rank')\nax.set_ylabel('Loss')\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\nax2.set_title('b Length = 20')\nax2.set_xlabel('# of documents')\nax2.set_ylabel('Loss')\n\n# Create a bar chart\nbar_width = 10\nx = np.arange(0, 50, 10)\ny = [8, 7, 6, 5, 4]\nax2.bar(x, y, width=bar_width, color='gray')\n\n# Add a rectangle for each bar\nfor i, v in enumerate(y):\n    ax2.text(x[i] + bar_width/2, v + 0.5, str(v), ha='center', va='bottom')\n\n# Add a triangle for each point\ntriangle = plt.Polygon([[0, 0], [1, 1], [0, 1]], closed=True, color='gray')\nax2.add_patch(triangle)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 4))\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis')\nax.set_xlabel('Categories')\nax.set_ylabel('Sentiment Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nsuccess_rates = [45, 55, 50, 40, 45]\nyears = ['c1355', 'c1908', 'c2670', 'c3540']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Plot the bar chart\nax.bar(years, success_rates, color='lightblue')\n\n# Set the title and labels\nax.set_title('Success Rates by Year')\nax.set_xlabel('Year')\nax.set_ylabel('# Successful adv. circuits')\n\n# Add grid lines\nax.grid(axis='y')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the graph\nax.plot([0, 1, 2, 3, 4, 5], [0, 20, 40, 60, 80, 100], color='blue')\nax.plot([0, 1, 2, 3, 4, 5], [0, 30, 60, 90, 120, 150], color='orange')\nax.plot([0, 1, 2, 3, 4, 5], [0, 40, 80, 120, 160, 200], color='pink')\n\n# Set the title and labels\nax.set_title('Knowledge Increase by Subject Area')\nax.set_xlabel('Study Level')\nax.set_ylabel('Knowledge Increase (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the line chart\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\nhardware_progress = [10, 20, 30, 40, 50, 60, 70, 80]\nsoftware_progress = [15, 25, 35, 45, 55, 65, 75, 85]\nai_progress = [20, 30, 40, 50, 60, 70, 80, 90]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the line chart\nax.plot(years, hardware_progress, label='Hardware', color='blue')\nax.plot(years, software_progress, label='Software', color='orange')\nax.plot(years, ai_progress, label='AI', color='green')\n\n# Set the title and labels\nax.set_title('Technological Advancements')\nax.set_xlabel('Year')\nax.set_ylabel('Progress (%)')\n\n# Add a legend\nax.legend()\n\n# Define the data for the bar chart\nsectors = ['Big Tech', 'Startups', 'Academia', 'Government']\ninnovation_gaps = [30, 40, 50, 60]\ninnovation_gaps_2 = [20, 30, 40, 50]\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Plot the bar chart\nax2.bar(sectors, innovation_gaps, color='blue')\nax2.bar(sectors, innovation_gaps_2, color='orange')\n\n# Set the title and labels\nax2.set_title('Innovation Gaps Across Different Sectors in Technology')\nax2.set_xlabel('Sector')\nax2.set_ylabel('Innovation Gap (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.7, 2.9, 2.6]\n\n# Data for the second graph\ncrimes = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\nrates = [140, 130, 120, 110, 100]\n\n# Create the first graph\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\nax1.bar(countries, crime_rates, color='orange')\nax1.set_xlabel('Country')\nax1.set_ylabel('Crime Rate per 100,000 Inhabitants', color='orange')\nax1.tick_params(axis='y', labelcolor='orange')\n\n# Create the second graph\nfig, ax2 = plt.subplots(figsize=(8.0, 10.0))\nax2.plot(crimes, rates, color='blue')\nax2.set_xlabel('Crime')\nax2.set_ylabel('Crime Rate per 100,000 Inhabitants', color='blue')\nax2.tick_params(axis='y', labelcolor='blue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the histogram\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the histogram\nbins = [0, 20, 40, 60, 80, 100, 120]\ncounts = [10, 30, 50, 70, 90, 110, 130]\n\n# Plot the histogram\nax.bar(bins[:-1], counts, width=10, color='blue')\n\n# Set the title and labels\nax.set_title('Student Performance in Schools')\nax.set_xlabel('Score')\nax.set_ylabel('Number of Students')\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first plot\nregions = ['Region 1', 'Region 2']\ntemperatures = [20, 22]\ncolors = ['skyblue', 'lightblue']\n\n# Plot the data\nfor region, temp, color in zip(regions, temperatures, colors):\n    ax.bar(region, temp, color=color)\n\n# Set the title and labels\nax.set_title('Average Annual Temperature')\nax.set_xlabel('Region')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Create a figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the second plot\nelevations = np.linspace(0, 2000, 100)\ntemperatures = np.sin(elevations / 100) * 100 + 1000\n\n# Plot the data\nax.plot(elevations, temperatures, color='blue')\n\n# Set the title and labels\nax.set_title('Geographical Elevation Distribution')\nax.set_xlabel('Elevation (m)')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nyears = ['2019', '2020', '2021', '2022']\ninvestment_growth = [300, 250, 200, 150]\n\n# Data for the second chart\nproducts = ['Savings', 'CDs', 'Stocks', 'Bonds', 'Real Estate', 'ETFs', 'Mutual Funds']\nnumber_of_accounts = [200, 175, 150, 125, 100, 75, 50]\n\n# Data for the third chart\nloan_amounts = [40000, 30000, 20000, 10000]\nfrequency = [80, 60, 40, 20]\n\n# Create the figure and axis objects\nfig, axes = plt.subplots(1, 3, figsize=(10, 5))\n\n# Plot the first chart\naxes[0].barh(years, investment_growth, color='orange')\naxes[0].set_title('Investment Growth Over Time')\naxes[0].set_xlabel('Growth (%)')\n\n# Plot the second chart\naxes[1].bar(products, number_of_accounts, color='blue')\naxes[1].set_title('Popularity of Financial Products')\naxes[1].set_xlabel('Number of Accounts')\n\n# Plot the third chart\naxes[2].barh(loan_amounts, frequency, color='green')\naxes[2].set_title('Loan Amount Distribution by Region')\naxes[2].set_xlabel('Frequency')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('AI Task Success Rates')\n\n# Create a bar chart with blue bars\nax.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [85, 75, 90, 80], color='blue')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate (%)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Create a second subplot for the efficiency scores\nax2 = fig.add_subplot(2, 1, 2)\nax2.set_title('Algorithm Efficiency Scores')\n\n# Create a scatter plot with red dots\nax2.scatter(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [90, 85, 95, 85], color='red')\n\n# Set the y-axis label\nax2.set_ylabel('Efficiency (%)')\n\n# Set the x-axis label\nax2.set_xlabel('Algorithms')\n\n# Create a third subplot for the adaptability scores\nax3 = fig.add_subplot(2, 1, 3)\nax3.set_title('AI Model Adaptability')\n\n# Create a line plot with green line\nax3.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='green')\n\n# Set the y-axis label\nax3.set_ylabel('Adaptability Score (%)')\n\n# Set the x-axis label\nax3.set_xlabel('Models')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [100, 200, 300, 400, 500, 600, 700]\ny = [10, 20, 30, 40, 50, 60, 70]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Traffic Volume by Time of Day')\n\n# Set the x-axis label\nax.set_xlabel('Number of Vehicles')\n\n# Set the y-axis label\nax.set_ylabel('Time of Day')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\narts = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nvalues = [10, 30, 25, 15]\ncolors = ['purple', 'pink', 'blue', 'orange']\n\n# Data for the second plot\ntechniques = ['Expression', 'Creativity', 'Collaboration', 'Dedication']\nperformance = [0.6, 0.8, 0.4, 0.2]\ncolors2 = ['blue', 'green', 'red', 'purple']\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\n# First plot\nax[0].pie(values, labels=arts, colors=colors, autopct='%1.1f%%')\nax[0].set_title('Distribution of Arts Education Programs')\n\n# Second plot\nax[1].pie(performance, labels=techniques, colors=colors2, startangle=90)\nax[1].set_title('Student Performance in Arts Education')\nax[1].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data\nsales = [25000, 20000, 15000, 10000, 5000]\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nsales_probabilities = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\n\n# Plot the sales data\nax.barh(products, sales, color='green')\nax.set_xlabel('Sales')\nax.set_ylabel('Products')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Known Sales', color='blue')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\nax.text(1.1, 0.3, 'Unknown Sales', color='cyan')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 1', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 2', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 3', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 4', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 5', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 6', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 7', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 8', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 9', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 10', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 11', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 12', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 13', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 14', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 15', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 16', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 17', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 18', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 19', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 20', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 21', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 22', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 23', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 24', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 25', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 26', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 27', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 28', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 29', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 30', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 31', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 32', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 33', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 34', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 35', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 36', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 37', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 38', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 39', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 40', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 41', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 42', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 43', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 44', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 45', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 46', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 47', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 48', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 49', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 50', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 51', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 52', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 53', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 54', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 55', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 56', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 57', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 58', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 59', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 60', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 61', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 62', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 63', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 64', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 65', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 66', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 67', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 68', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 69', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 70', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 71', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 72', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 73', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 74', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 75', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Region 76', color='red')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.5, 'Region 77', color='orange')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.3, 'Region 78', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.text(1.1, 0.7, 'Region 79', color='green')\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Region 80', color='blue')\n\n# Add a colored rectangle for the legend\nax.add_patch"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Histogram of Stock Returns')\n\n# Create a histogram with a color map\nax.hist([0.2, 0.3, 0.4, 0.5, 0.6], bins=10, color='green')\nax.hist([0.7, 0.8, 0.9, 1.0, 1.1], bins=10, color='red')\n\n# Add a legend\nax.legend(['Gains', 'Losses'])\n\n# Create a scatter plot with a color map\nax.scatter([0.2, 0.3, 0.4, 0.5, 0.6], [0.2, 0.3, 0.4, 0.5, 0.6], color='yellow')\nax.scatter([0.7, 0.8, 0.9, 1.0, 1.1], [0.7, 0.8, 0.9, 1.0, 1.1], color='blue')\n\n# Add a legend\nax.legend(['Tech Stocks', 'Energy Stocks'])\n\n# Set the x-axis label\nax.set_xlabel('Returns')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 10.0))\n\n# Plot the first subplot\nx = np.linspace(0, 5, 100)\ny = np.sin(x)\nax1.plot(x, y, 'bo-')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.set_title('Energy Consumption Over Time')\n\n# Plot the second subplot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax2.contourf(X, Y, Z, levels=20, cmap='Blues')\nax2.set_xlabel('Relative Month')\nax2.set_ylabel('RPM')\nax2.set_title('Engine Performance')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15.0, 35.0, 30.0, 20.0]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99']\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5), subplot_kw={'aspect': 'equal'})\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Historical Document Types in Library')\n\n# Create a scatter plot for the document count over historical periods\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the scatter plot\nx = np.array([1400, 1600, 1800, 2000])\ny = np.array([350, 300, 250, 200])\n\n# Define the colors for the scatter plot\ncolors = ['purple', 'purple', 'purple', 'purple']\n\n# Plot the scatter plot\nax.scatter(x, y, c=colors)\n\n# Set the title of the scatter plot\nax.set_title('Document Count Over Historical Periods')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Number of Documents')\n\n# Set the limits of the x-axis\nax.set_xlim(400, 2000)\n\n# Set the limits of the y-axis\nax.set_ylim(150, 400)\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Luxury Brand Popularity vs Price')\n\n# Set the x-axis label\nax.set_xlabel('Average Price ($)')\n\n# Set the y-axis label\nax.set_ylabel('Popularity Index')\n\n# Set the x-axis limits\nax.set_xlim(1000, 2000)\n\n# Set the y-axis limits\nax.set_ylim(750, 950)\n\n# Add a vertical line at x=1500\nax.axvline(x=1500, color='r', linestyle='-')\n\n# Add a horizontal line at y=850\nax.axhline(y=850, color='g', linestyle='-')\n\n# Add a rectangle with a blue fill\nax.add_patch(plt.Rectangle((1000, 800), 500, 50, color='blue'))\n\n# Add a rectangle with a green fill\nax.add_patch(plt.Rectangle((1500, 800), 500, 50, color='green'))\n\n# Add a rectangle with a red fill\nax.add_patch(plt.Rectangle((1000, 850), 500, 50, color='red'))\n\n# Add a rectangle with a yellow fill\nax.add_patch(plt.Rectangle((1500, 850), 500, 50, color='yellow'))\n\n# Add a rectangle with a purple fill\nax.add_patch(plt.Rectangle((1000, 900), 500, 50, color='purple'))\n\n# Add a rectangle with a pink fill\nax.add_patch(plt.Rectangle((1500, 900), 500, 50, color='pink'))\n\n# Add a rectangle with a brown fill\nax.add_patch(plt.Rectangle((1000, 950), 500, 50, color='brown'))\n\n# Add a rectangle with a gray fill\nax.add_patch(plt.Rectangle((1500, 950), 500, 50, color='gray'))\n\n# Add a rectangle with a teal fill\nax.add_patch(plt.Rectangle((1000, 1000), 500, 50, color='teal'))\n\n# Add a rectangle with a navy fill\nax.add_patch(plt.Rectangle((1500, 1000), 500, 50, color='navy'))\n\n# Add a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((1000, 1050), 500, 50, color='maroon'))\n\n# Add a rectangle with a olive fill\nax.add_patch(plt.Rectangle((1500, 1050), 500, 50, color='olive'))\n\n# Add a rectangle with a silver fill\nax.add_patch(plt.Rectangle((1000, 1100), 500, 50, color='silver'))\n\n# Add a rectangle with a gold fill\nax.add_patch(plt.Rectangle((1500, 1100), 500, 50, color='gold'))\n\n# Add a rectangle with a bronze fill\nax.add_patch(plt.Rectangle((1000, 1150), 500, 50, color='bronze'))\n\n# Add a rectangle with a copper fill\nax.add_patch(plt.Rectangle((1500, 1150), 500, 50, color='copper'))\n\n# Add a rectangle with a brass fill\nax.add_patch(plt.Rectangle((1000, 1200), 500, 50, color='brass'))\n\n# Add a rectangle with a pewter fill\nax.add_patch(plt.Rectangle((1500, 1200), 500, 50, color='pewter'))\n\n# Add a rectangle with a tin fill\nax.add_patch(plt.Rectangle((1000, 1250), 500, 50, color='tin'))\n\n# Add a rectangle with a zinc fill\nax.add_patch(plt.Rectangle((1500, 1250), 500, 50, color='zinc'))\n\n# Add a rectangle with a nickel fill\nax.add_patch(plt.Rectangle((1000, 1300), 500, 50, color='nickel'))\n\n# Add a rectangle with a cobalt fill\nax.add_patch(plt.Rectangle((1500, 1300), 500, 50, color='cobalt'))\n\n# Add a rectangle with a chromium fill\nax.add_patch(plt.Rectangle((1000, 1350), 500, 50, color='chromium'))\n\n# Add a rectangle with a molybdenum fill\nax.add_patch(plt.Rectangle((1500, 1350), 500, 50, color='molybdenum'))\n\n# Add a rectangle with a tungsten fill\nax.add_patch(plt.Rectangle((1000, 1400), 500, 50, color='tungsten'))\n\n# Add a rectangle with a rhenium fill\nax.add_patch(plt.Rectangle((1500, 1400), 500, 50, color='rhenium'))\n\n# Add a rectangle with a osmium fill\nax.add_patch(plt.Rectangle((1000, 1450), 500, 50, color='osmium'))\n\n# Add a rectangle with a iridium fill\nax.add_patch(plt.Rectangle((1500, 1450), 500, 50, color='iridium'))\n\n# Add a rectangle with a platinum fill\nax.add_patch(plt.Rectangle((1000, 1500), 500, 50, color='platinum'))\n\n# Add a rectangle with a gold fill\nax.add_patch(plt.Rectangle((1500, 1500), 500, 50, color='gold'))\n\n# Add a rectangle with a silver fill\nax.add_patch(plt.Rectangle((1000, 1550), 500, 50, color='silver'))\n\n# Add a rectangle with a bronze fill\nax.add_patch(plt.Rectangle((1500, 1550), 500, 50, color='bronze'))\n\n# Add a rectangle with a copper fill\nax.add_patch(plt.Rectangle((1000, 1600), 500, 50, color='copper'))\n\n# Add a rectangle with a brass fill\nax.add_patch(plt.Rectangle((1500, 1600), 500, 50, color='brass'))\n\n# Add a rectangle with a pewter fill\nax.add_patch(plt.Rectangle((1000, 1650), 500, 50, color='pewter'))\n\n# Add a rectangle with a tin fill\nax.add_patch(plt.Rectangle((1500, 1650), 500, 50, color='tin'))\n\n# Add a rectangle with a zinc fill\nax.add_patch(plt.Rectangle((1000, 1700), 500, 50, color='zinc'))\n\n# Add a rectangle with a nickel fill\nax.add_patch(plt.Rectangle((1500, 1700), 500, 50, color='nickel'))\n\n# Add a rectangle with a cobalt fill\nax.add_patch(plt.Rectangle((1000, 1750), 500, 50, color='cobalt'))\n\n# Add a rectangle with a chromium fill\nax.add_patch(plt.Rectangle((1500, 1750), 500, 50, color='chromium'))\n\n# Add a rectangle with a molybdenum fill\nax.add_patch(plt.Rectangle((1000, 1800), 500, 50, color='molybdenum'))\n\n# Add a rectangle with a tungsten fill\nax.add_patch(plt.Rectangle((1500, 1800), 500, 50, color='tungsten'))\n\n# Add a rectangle with a rhenium fill\nax.add_patch(plt.Rectangle((1000, 1850), 500, 50, color='rhenium'))\n\n# Add a rectangle with a osmium fill\nax.add_patch(plt.Rectangle((1500, 1850), 500, 50, color='osmium'))\n\n# Add a rectangle with a iridium fill\nax.add_patch(plt.Rectangle((1000, 1900), 500, 50, color='iridium'))\n\n# Add a rectangle with a platinum fill\nax.add_patch(plt.Rectangle((1500, 1900), 500, 50, color='platinum'))\n\n# Add a rectangle with a gold fill\nax.add_patch(plt.Rectangle((1000, 1950), 500, 50, color='gold'))\n\n# Add a rectangle with a silver fill\nax.add_patch(plt.Rectangle((1500, 1950), 500, 50, color='silver'))\n\n# Add a rectangle with a bronze fill\nax.add_patch(plt.Rectangle((1000, 2000), 500, 50, color='bronze'))\n\n# Add a rectangle with a copper fill\nax.add_patch(plt.Rectangle((1500, 2000), 500, 50, color='copper'))\n\n# Add a rectangle with a brass fill\nax.add_patch(plt.Rectangle((1000, 2050), 500, 50, color='brass'))\n\n# Add a rectangle with a pewter fill\nax.add_patch(plt.Rectangle((1500, 2050), 500, 50, color='pewter'))\n\n# Add a rectangle with a tin fill\nax.add_patch(plt.Rectangle((1000, 2100), 500, 50, color='tin'))\n\n# Add a rectangle with a zinc fill\nax.add_patch(plt.Rectangle((1500, 2100), 500, 50, color='zinc'))\n\n# Add a rectangle with a nickel fill\nax.add_patch(plt.Rectangle((1000, 2150), 500, 50, color='nickel'))\n\n# Add a rectangle with a cobalt fill\nax.add_patch(plt.Rectangle((1500, 2150), 500, 50, color='cobalt'))\n\n# Add a rectangle with a chromium fill\nax.add_patch(plt.Rectangle((1000, 2200), 500, 50, color='chromium'))\n\n# Add a rectangle with a molybdenum fill\nax.add_patch(plt.Rectangle((1500, 2200), 500, 50, color='molybdenum'))\n\n# Add a rectangle with a tungsten fill\nax.add_patch(plt.Rectangle((1000, 2250), 500, 50, color='tungsten'))\n\n# Add a rectangle with a rhenium fill\nax.add_patch(plt.Rectangle((1500, 2250), 500, 50, color='rhenium'))\n\n# Add a rectangle with a osmium fill\nax.add_patch(plt.Rectangle((1000, 2300), 500, 50, color='osmium'))\n\n# Add a rectangle with a iridium fill\nax.add_patch(plt.Rectangle((1500, 2300), 500, 50, color='iridium'))\n\n# Add a rectangle with a platinum fill\nax.add_patch(plt.Rectangle((1000, 2350), 500, 50, color='platinum'))\n\n# Add a rectangle with a gold fill\nax.add_patch(plt.Rectangle((1500, 2350), 500, 50, color='gold'))\n\n# Add a rectangle with a silver fill\nax.add_patch(plt.Rectangle((1000, 2400), 500, 50, color='silver'))\n\n# Add a rectangle with a bronze fill\nax.add_patch(plt.Rectangle((1500, 2400), 500, 50, color='bronze'))\n\n# Add a rectangle with a copper fill\nax.add_patch(plt.Rectangle((1000, 2450), 500, 50, color='copper'))\n\n# Add a rectangle with a brass fill\nax.add_patch(plt.Rectangle((1500, 2450), 500, 50, color='brass'))\n\n# Add a rectangle with a pewter fill\nax.add_patch(plt.Rectangle((1000, 2500), 500, 50, color='pewter'))\n\n# Add a rectangle with a tin fill\nax.add_patch(plt.Rectangle((1500, 2500), 500, 50, color='tin'))\n\n# Add a rectangle with a zinc fill\nax.add_patch(plt.Rectangle((1000, 2550), 500, 50, color='zinc'))\n\n# Add a rectangle with a nickel fill\nax.add_patch(plt.Rectangle((1500, 2550), 500, 50, color='nickel'))\n\n# Add a rectangle with a cobalt fill\nax.add_patch(plt.Rectangle((1000, 2600), 500, 50, color='cobalt'))\n\n# Add a rectangle with a chromium fill\nax.add_patch(plt.Rectangle((1500, 2600), 500, 50, color='chromium'))\n\n# Add a rectangle with a molybdenum fill\nax.add_patch(plt.Rectangle((1000, 2650), 500, 50, color='molybdenum'))\n\n# Add a rectangle with a tungsten fill\nax.add_patch(plt.Rectangle((1500, 2650), 500, 50, color='tungsten'))\n\n# Add a rectangle with a rhenium fill\nax.add_patch(plt.Rectangle((1000, 2700), 500, 50, color='rhenium'))\n\n# Add a rectangle with a osmium fill\nax.add_patch(plt.Rectangle((1500, 2700), 500, 50, color='osmium'))\n\n# Add a rectangle with a iridium fill\nax.add_patch(plt.Rectangle((1000, 2750), 500, 50, color='iridium'))\n\n# Add a rectangle with a platinum fill\nax.add_patch(plt.Rectangle((1500, 2750), 500, 50, color='platinum'))\n\n# Add a rectangle with a gold fill\nax.add_patch(plt.Rectangle((1000, 2800), 500, 50, color='gold'))\n\n# Add a rectangle with a silver fill\nax.add_patch(plt.Rectangle((1500, 2800), 500, 50, color='silver'))\n\n# Add a rectangle with a bronze fill\nax.add_patch(plt.Rectangle((1000, 2850), 500, 50, color='bronze'))\n\n# Add a rectangle with a copper fill\nax.add_patch(plt.Rectangle((1500, 2850), 500, 50, color='copper'))\n\n# Add a rectangle with a brass fill\nax.add_patch(plt.Rectangle((1000, 2900), 500, 50, color='brass'))\n\n# Add a rectangle with a pewter fill\nax.add_patch(plt.Rectangle((1500, 2900), 500, 50, color='pewter'))\n\n# Add a rectangle with a tin fill\nax.add_patch(plt.Rectangle((1000, 2950), 500, 50, color='tin'))\n\n# Add a rectangle with a zinc fill\nax.add_patch(plt.Rectangle((1500, 2950), 500, 50, color='zinc'))\n\n# Add a rectangle with a nickel fill\nax.add_patch(plt.Rectangle((1000, 3000), 500, 50, color='nickel'))\n\n# Add a rectangle with a cobalt fill\nax.add_patch(plt.Rectangle((1500, 3000), 500, 50, color='cobalt'))\n\n# Add a rectangle with a chromium fill\nax.add_patch(plt.Rectangle((1000, 3050), 500, 50, color='chromium'))\n\n# Add a rectangle with a molybdenum fill\nax.add_patch(plt.Rectangle((1500, 3050), 500, 50, color='molybdenum'))\n\n# Add a rectangle with a tungsten fill\nax.add_patch(plt.Rectangle((1000, 3100), 500, 50, color='tungsten'))\n\n# Add a rectangle with a rhenium fill\nax.add_patch(plt.Rectangle((1500, 3100), 500, 50, color='rhenium"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\naccuracy = [75.32, 77.11, 77.03, 76.86, 74.52]\naccuracy_diff = [0.02, -0.17, -0.17, -0.25, -0.23]\n\n# Data for the second chart\nengstrom2019 = [0.8, 2.51, 2.34, 0.82]\nengstrom2019_diff = [-0.25, 0.23, 0.0, 0.0]\n\n# Data for the third chart\nhendryks2019 = [0.0, 2.51, 2.34, 0.82]\nhendryks2019_diff = [0.0, 0.23, 0.0, 0.0]\n\n# Data for the fourth chart\nengstrom2019_robust = [0.0, 1.2, 0.2, 0.75, 0.0]\nengstrom2019_robust_diff = [-0.25, 0.23, 0.0, 0.0, 0.0]\n\n# Data for the fifth chart\nhendryks2019_robust = [0.0, 2.51, 2.34, 0.82]\nhendryks2019_robust_diff = [0.0, 0.23, 0.0, 0.0]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10.0, 7.0))\n\n# Plot the first chart\naxs[0, 0].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendryks2019'], accuracy, color='green')\naxs[0, 0].set_xlabel('Accuracy (%)')\naxs[0, 0].set_title('Accuracy (%)')\n\n# Plot the second chart\naxs[0, 1].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendryks2019'], accuracy_diff, color='red')\naxs[0, 1].set_xlabel('Accuracy Diff. (%)')\naxs[0, 1].set_title('Accuracy Diff. (%)')\n\n# Plot the third chart\naxs[0, 2].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendryks2019'], engstrom2019, color='blue')\naxs[0, 2].set_xlabel('Robust Accuracy (%)')\naxs[0, 2].set_title('Robust Accuracy (%)')\n\n# Plot the fourth chart\naxs[1, 0].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendryks2019'], engstrom2019_diff, color='purple')\naxs[1, 0].set_xlabel('Robust Accuracy Diff. (%)')\naxs[1, 0].set_title('Robust Accuracy Diff. (%)')\n\n# Plot the fifth chart\naxs[1, 1].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendryks2019'], hendryks2019, color='orange')\naxs[1, 1].set_xlabel('Robust NFR (%)')\naxs[1, 1].set_title('Robust NFR (%)')\n\n# Plot the sixth chart\naxs[1, 2].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendryks2019'], hendryks2019_diff, color='pink')\naxs[1, 2].set_xlabel('Robust NFR Diff. (%)')\naxs[1, 2].set_title('Robust NFR Diff. (%)')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncontext = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvariance = [0.6, 0.6, 0.8, 0.8, 0.8, 0.8]\nregret = [[0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5]]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\nax1.set_xlabel('Trials')\nax1.set_ylabel('Generalized Variance', color='tab:blue')\nax1.plot(context, variance, color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\nax2 = ax1.twinx()\nax2.set_ylabel('Average Regret', color='tab:red')\nfor i, r in enumerate(regret):\n    ax2.plot(r, color=plt.cm.viridis(i/len(regret)), linestyle='--')\nax2.tick_params(axis='y', labelcolor='tab:red')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Debaters')\n\n# Create a bar chart\nbar_width = 0.35\nindex = np.arange(len(['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo']))\nbar1 = ax.bar(index, [100, 150, 200, 250], bar_width, label='GPT-3.5-Turbo')\nbar2 = ax.bar(index + bar_width, [120, 170, 220, 270], bar_width, label='Claude 1.3')\nbar3 = ax.bar(index + 2 * bar_width, [140, 190, 240, 290], bar_width, label='Claude 2.1')\nbar4 = ax.bar(index + 3 * bar_width, [160, 210, 260, 310], bar_width, label='GPT-4-Turbo')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Debater')\nax.set_ylabel('Rating')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo'])\nax.legend()\n\n# Create a scatter plot\nfig, ax = plt.subplots(figsize=(10, 4))\nax.set_title('Correct Rating - Incorrect Rating')\n\n# Create a scatter plot\nscatter1 = ax.scatter([100, 150, 200, 250], [100, 150, 200, 250], color='red')\nscatter2 = ax.scatter([120, 170, 220, 270], [120, 170, 220, 270], color='green')\nscatter3 = ax.scatter([140, 190, 240, 290], [140, 190, 240, 290], color='blue')\nscatter4 = ax.scatter([160, 210, 260, 310], [160, 210, 260, 310], color='orange')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Correct Rating')\nax.set_ylabel('Incorrect Rating')\n\n# Create a line plot\nfig, ax = plt.subplots(figsize=(10, 4))\nax.set_title('Judge Accuracy (%)')\n\n# Create a line plot\nline1 = ax.plot([-100, 0, 100, 200], [80, 90, 85, 95], color='red')\nline2 = ax.plot([-100, 0, 100, 200], [70, 80, 75, 85], color='green')\nline3 = ax.plot([-100, 0, 100, 200], [60, 70, 65, 75], color='blue')\nline4 = ax.plot([-100, 0, 100, 200], [50, 60, 55, 65], color='orange')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Aggregate Elo Rating')\nax.set_ylabel('Judge Accuracy (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [4.6, 10.6, 11.3, 13.2, 29.8, 30.5]\nlabels = ['Gray', 'Purple', 'Yellow', 'Light Blue', 'Blue', 'Cyan']\ncolors = ['#808080', '#800080', '#FFFF00', '#ADD8E6', '#0000FF', '#00FFFF']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the ingredients and their weights\ningredients = ['90 g sugar', '1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk']\nweights = [90, 1, 60, 0.5, 1]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.pie(weights, labels=ingredients, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a title\nax.set_title('Matplotlib bakery: A donut')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Transport', 'Utilities', 'Food', 'Others', 'Entertainment']\nsizes = [37.5, 16.7, 29.2, 10.0, 10.0]\ncolors = ['blue', 'green', 'pink', 'orange', 'yellow']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a title\nax.set_title('Expenses - Company vs. Project')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlora_data = [31.4, 15.7, 19.9, 33.0]\nlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nlora_colors = ['orange', 'blue', 'green', 'pink']\n\n# Data for QLoRA\nqlora_data = [54.8, 10.5, 6.3, 28.4]\nqlora_labels = ['Unused', 'Optimizer', 'Model', 'Gradient']\nqlora_colors = ['orange', 'blue', 'red', 'green']\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting LoRA\naxs[0].pie(lora_data, labels=lora_labels, colors=lora_colors, autopct='%1.1f%%')\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(qlora_data, labels=qlora_labels, colors=qlora_colors, autopct='%1.1f%%')\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first chart\ndata1 = [25.1, 26.4, 12.6]\ncolors1 = ['yellow', 'green', 'orange']\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other']\n\n# Define the data for the second chart\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['yellow', 'green', 'orange', 'lightgreen']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Create the first chart\nfig, ax1 = plt.subplots(figsize=(5.0, 8.0))\nax1.pie(data1, colors=colors1, labels=labels1, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Create the second chart\nfig, ax2 = plt.subplots(figsize=(5.0, 8.0))\nax2.pie(data2, colors=colors2, labels=labels2, startangle=90)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Fruits', 'Proteins', 'Grains', 'Vegetables', 'Dairy']\nvalues = [25.0, 35.0, 10.0, 20.0, 10.0]\ncolors = ['pink', 'skyblue', 'orange', 'lightgreen', 'purple']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Nutritional Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 21.4, 37.5]\ncolors = ['blue', 'green', 'yellow']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [20, 10, 30, 40]\nlabels = ['Dogs 45%', 'Logs 10%', 'Frogs 15%', 'Hogs 30%']\ncolors = ['blue', 'purple', 'pink', 'orange']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\n\"\"\"\n=====================================\nVisualizing Data with a Pie Chart\n=====================================\n\nThis example demonstrates how to create a pie chart using matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [29.0, 11.0, 20.0, 40.0]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['France', 'Germany', 'Italy']\nsizes = [18, 12, 28]\ncolors = ['orange', 'blue', 'red']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Slice 1', 'Slice 2', 'Slice 3', 'Slice 4', 'Slice 5']\nsizes = [26.2, 21.4, 19.0, 14.3, 13.3]\ncolors = ['#f8d7da', '#f8c29b', '#f8b468', '#f8a168', '#f87168']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title\nax.set_title('Slice of a pie chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nvalues = [12.4, 35.4, 17.2, 24.7, 10.3]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(values, labels=categories, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Pie Chart of Categories')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 10, 35]\ncolors = ['skyblue', 'lightskyblue', 'lightblue', 'deepskyblue', 'navy']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP']\nsizes = [25.4, 7.4, 20.3, 12.2]\ncolors = ['skyblue', 'lightgreen', 'lightcoral', 'lightskyblue']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('NLP Conference Influence')\n\n# Add a rectangle for ACL\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='orange')\nax.add_patch(rect)\nax.text(0.9, 0.9, 'ACL', ha='center', va='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each energy source\nenergy_sources = ['Coal', 'Hydro', 'Wind', 'Solar', 'Other']\nconsumption_percentages = [25.0, 15.0, 12.5, 20.0, 10.0]\ncolors = ['brown', 'blue', 'cyan', 'yellow', 'grey']\n\n# Create a pie chart for energy consumption\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(consumption_percentages, labels=energy_sources, colors=colors, autopct='%1.1f%%', startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a title to the chart\nax.set_title('Energy Consumption - National vs. Project')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Sentiment Score')\n\n# Set the y-axis label\nax.set_ylabel('Number of Tweets')\n\n# Create a bar chart with the data\nax.bar(['English', 'French', 'German'], [1.88, 2.88, 3.38], color='blue')\nax.bar(['Chinese', 'Korean', 'Japanese'], [1.11, 0.50, 0.78], color='red')\n\n# Add a legend to the plot\nax.legend(['Out-group bias (Collectivism)', 'In-group bias (Individualism)'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-5, 0)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(-5, 1, 1))\n\n# Set the x-axis labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0'])\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the text\nax.set_xlabel('Time')\nax.set_ylabel('Sentiment Score')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot area\nax.set_face"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Draw arrows\nfor i in range(10):\n    for j in range(10):\n        ax.arrow(i, j, 0.1, 0.1, head_width=0.05, head_length=0.05, fc='purple', ec='purple')\n\n# Draw lines\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\nax.plot(x, y1, 'r-')\nax.plot(x, y2, 'b-')\nax.plot(x, y3, 'g-')\n\n# Set the title and labels\nax.set_title('SINDy Model')\nax.set_xlabel('X1')\nax.set_ylabel('X2')\n\n# Add legend\nlegend_labels = ['True Field', 'SINDy Learned Field', 'Train Sample', 'Test Sample', 'SINDy Train', 'SINDy Test']\nlegend_handles = [plt.Line2D([0], [0], marker='o', color='w', label=label, markerfacecolor=color) for label, color in zip(legend_labels, ['red', 'purple', 'blue', 'orange', 'green', 'black'])]\nax.legend(handles=legend_handles)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Generate a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field\nU = -np.sin(np.pi * X) * np.cos(np.pi * Y)\nV = np.cos(np.pi * X) * np.sin(np.pi * Y)\n\n# Plot the vector field\nQ = ax.quiver(X, Y, U, V, color='b')\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Generate a grid of points\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the magnetic field values\nB = np.sin(X) + np.cos(Y)\n\n# Plot the magnetic field using quiver\nQ = ax.quiver(X, Y, np.cos(X), np.sin(Y), B, cmap='coolwarm')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(Q)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('GQA', fontsize=16, color='white')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('POPE', fontsize=14, color='white')\nax.set_ylabel('MM', fontsize=14, color='white')\n\n# Set the tick parameters for the x-axis and y-axis\nax.tick_params(axis='both', which='major', labelsize=12, colors='white')\n\n# Set the grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the limits of the x-axis and y-axis\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\n\n# Set the text for the plot\nax.text(50, 50, 'TextVQA', fontsize=14, color='red')\nax.text(50, 40, 'TextVQA', fontsize=14, color='blue')\n\n# Set the rectangle patches\nrect1 = plt.Rectangle((30, 30), 40, 40, color='blue')\nrect2 = plt.Rectangle((40, 40), 20, 20, color='red')\nrect3 = plt.Rectangle((50, 50), 10, 10, color='green')\n\n# Add the rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['fr', 'hi', 'ru', 'th', 'tr', 'ur', 'vi', 'zh']\nvalues = [20, 40, 60, 80, 100, 120, 140, 160]\ncolors = ['pink', 'blue', 'green', 'red', 'purple', 'orange', 'cyan', 'magenta']\n\n# Create a figure and axis for the radar chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.plot(np.linspace(0, 2*np.pi, len(categories)), values, color='black')\nax.fill(np.linspace(0, 2*np.pi, len(categories)), values, colors)\n\n# Set the category labels\nax.set_xticks(np.linspace(0, 2*np.pi, len(categories)))\nax.set_xticklabels(categories)\n\n# Set the title of the plot\nax.set_title('XNLI (speed-up ratio: 4)', fontsize=14, fontweight='bold')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Define colors\ncolors = [\"green\", \"cyan\"]\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color=\"gray\")\nax.add_artist(circle)\n\n# Draw a polygon\npolygon = plt.Polygon([[0.2, 0.2], [0.8, 0.2], [0.5, 0.8]], color=colors[0])\nax.add_patch(polygon)\n\n# Draw a rectangle\nrectangle = plt.Rectangle([0.1, 0.6], 0.8, 0.2, color=colors[1])\nax.add_patch(rectangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.1], [0.3, 0.7], [0.7, 0.7], [0.2, 0.5], [0.5, 0.9], [0.8, 0.5]], color=colors[0])\nax.add_patch(star)\n\n# Set limits and labels\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_aspect('equal')\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\ndata = {\n    '\u03bcR': [0.496],\n    '\u03bcAUC': [0.37],\n    '\u03bcAUC': [0.284],\n    '\u03bcAUC': [0.24],\n    '\u03bcAUC': [0.24],\n    '\u03bcAUC': [0.284],\n    '\u03bcAUC': [0.37],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0.496],\n    '\u03bcAUC': [0."}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the categories and their corresponding colors\ncategories = ['novel', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event']\ncolors = ['blue', 'green', 'red', 'purple', 'orange', 'cyan', 'magenta']\n\n# Define the data for each category\ndata = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\n\n# Create a pie chart\nax.pie(data, labels=categories, colors=colors, startangle=90)\n\n# Add a title\nax.set_title('Pie Chart')\n\n# Add a legend\nax.legend(categories, loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the colors for each subject\ncolors = {\n    'Reasoning': 'blue',\n    'Writing': 'red',\n    'Math': 'green',\n    'Coding': 'orange',\n    'Extraction': 'purple',\n    'Humanities': 'brown'\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white', fill=False)\nax.add_artist(circle)\n\n# Draw the lines\nfor i, (subject, color) in enumerate(colors.items()):\n    angle = 2 * np.pi * i / len(colors)\n    x = 0.5 + 0.3 * np.cos(angle)\n    y = 0.5 + 0.3 * np.sin(angle)\n    ax.plot([0.5, x], [0.5, y], color=color, linewidth=2)\n\n# Set the title\nax.set_title('Roleplay')\n\n# Set the labels\nax.set_xlabel('Reasoning')\nax.set_ylabel('Writing')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='green')\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.9], [0.4, 0.7], [0.6, 0.7], [0.5, 0.5], [0.3, 0.7], [0.5, 0.9]], color='blue')\nax.add_artist(star)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.6, 0.5], [0.4, 0.5]], color='red')\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.2, 0.5], [0.3, 0.6], [0.4, 0.6], [0.5, 0.5], [0.4, 0.4], [0.3, 0.4]], color='purple')\nax.add_artist(hexagon)\n\n# Draw a circle with a hole\ncircle_with_hole = plt.Circle((0.8, 0.5), 0.2, color='yellow')\nax.add_artist(circle_with_hole)\n\n# Draw a rectangle with a hole\nrectangle_with_hole = plt.Rectangle((0.6, 0.2), 0.2, 0.2, color='pink')\nax.add_artist(rectangle_with_hole)\n\n# Draw a triangle with a hole\ntriangle_with_hole = plt.Polygon([[0.7, 0.7], [0.9, 0.7], [0.8, 0.5]], color='brown')\nax.add_artist(triangle_with_hole)\n\n# Draw a star with a hole\nstar_with_hole = plt.Polygon([[0.8, 0.9], [0.7, 0.7], [0.9, 0.7], [0.8, 0.5], [0.6, 0.7], [0.8, 0.9]], color='cyan')\nax.add_artist(star_with_hole)\n\n# Draw a pentagon with a hole\npentagon_with_hole = plt.Polygon([[0.6, 0.3], [0.7, 0.1], [0.9, 0.3], [0.8, 0.5], [0.6, 0.5]], color='magenta')\nax.add_artist(pentagon_with_hole)\n\n# Draw a hexagon with a hole\nhexagon_with_hole = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.6], [0.8, 0.5], [0.6, 0.4], [0.5, 0.4]], color='lime')\nax.add_artist(hexagon_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole\ncircle_with_hole_and_rectangle_with_hole = plt.Circle((0.2, 0.8), 0.2, color='white')\nax.add_artist(circle_with_hole_and_rectangle_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole\nrectangle_with_hole_and_triangle_with_hole = plt.Rectangle((0.4, 0.6), 0.2, 0.2, color='black')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole)\n\n# Draw a triangle with a hole and a star with a hole\ntriangle_with_hole_and_star_with_hole = plt.Polygon([[0.3, 0.9], [0.5, 0.7], [0.7, 0.9], [0.5, 0.5], [0.3, 0.7], [0.5, 0.9]], color='silver')\nax.add_artist(triangle_with_hole_and_star_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole\nstar_with_hole_and_pentagon_with_hole = plt.Polygon([[0.5, 0.9], [0.4, 0.7], [0.6, 0.7], [0.5, 0.5], [0.3, 0.7], [0.5, 0.9]], color='gold')\nax.add_artist(star_with_hole_and_pentagon_with_hole)\n\n# Draw a pentagon with a hole and a hexagon with a hole\npentagon_with_hole_and_hexagon_with_hole = plt.Polygon([[0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.6, 0.5], [0.4, 0.5]], color='navy')\nax.add_artist(pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a hexagon with a hole and a circle with a hole\nhexagon_with_hole_and_circle_with_hole = plt.Polygon([[0.2, 0.5], [0.3, 0.6], [0.4, 0.6], [0.5, 0.5], [0.4, 0.4], [0.3, 0.4]], color='olive')\nax.add_artist(hexagon_with_hole_and_circle_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole and a triangle with a hole\ncircle_with_hole_and_rectangle_with_hole_and_triangle_with_hole = plt.Circle((0.8, 0.8), 0.2, color='fuchsia')\nax.add_artist(circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole and a star with a hole\nrectangle_with_hole_and_triangle_with_hole_and_star_with_hole = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='indigo')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole_and_star_with_hole)\n\n# Draw a triangle with a hole and a star with a hole and a pentagon with a hole\ntriangle_with_hole_and_star_with_hole_and_pentagon_with_hole = plt.Polygon([[0.7, 0.7], [0.9, 0.7], [0.8, 0.5]], color='azure')\nax.add_artist(triangle_with_hole_and_star_with_hole_and_pentagon_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole and a hexagon with a hole\nstar_with_hole_and_pentagon_with_hole_and_hexagon_with_hole = plt.Polygon([[0.8, 0.9], [0.7, 0.7], [0.9, 0.7], [0.8, 0.5], [0.6, 0.7], [0.8, 0.9]], color='saddlebrown')\nax.add_artist(star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a pentagon with a hole and a hexagon with a hole and a circle with a hole\npentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole = plt.Polygon([[0.6, 0.3], [0.7, 0.1], [0.9, 0.3], [0.8, 0.5], [0.6, 0.5]], color='tan')\nax.add_artist(pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole)\n\n# Draw a hexagon with a hole and a circle with a hole and a rectangle with a hole\nhexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.6], [0.8, 0.5], [0.6, 0.4], [0.5, 0.4]], color='peru')\nax.add_artist(hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole and a triangle with a hole and a star with a hole\ncircle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole = plt.Circle((0.2, 0.8), 0.2, color='chocolate')\nax.add_artist(circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole\nrectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole = plt.Rectangle((0.4, 0.6), 0.2, 0.2, color='coral')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole)\n\n# Draw a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole\ntriangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole = plt.Polygon([[0.3, 0.9], [0.5, 0.7], [0.7, 0.9], [0.5, 0.5], [0.3, 0.7], [0.5, 0.9]], color='crimson')\nax.add_artist(triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole\nstar_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole = plt.Polygon([[0.5, 0.9], [0.4, 0.7], [0.6, 0.7], [0.5, 0.5], [0.3, 0.7], [0.5, 0.9]], color='darkorange')\nax.add_artist(star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole)\n\n# Draw a pentagon with a hole and a hexagon with a hole and a circle with a hole and a rectangle with a hole\npentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole = plt.Polygon([[0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.6, 0.5], [0.4, 0.5]], color='darkred')\nax.add_artist(pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole)\n\n# Draw a hexagon with a hole and a circle with a hole and a rectangle with a hole and a triangle with a hole\nhexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole = plt.Polygon([[0.2, 0.5], [0.3, 0.6], [0.4, 0.6], [0.5, 0.5], [0.4, 0.4], [0.3, 0.4]], color='darkgreen')\nax.add_artist(hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole\ncircle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole = plt.Circle((0.8, 0.8), 0.2, color='darkblue')\nax.add_artist(circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole\nrectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='darkmagenta')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole\ntriangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole = plt.Polygon([[0.7, 0.7], [0.9, 0.7], [0.8, 0.5]], color='darkcyan')\nax.add_artist(triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole and a rectangle with a hole\nstar_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole = plt.Polygon([[0.8, 0.9], [0.7, 0.7], [0.9, 0.7], [0.8, 0.5], [0.6, 0.7], [0.8, 0.9]], color='darkgoldenrod')\nax.add_artist(star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole)\n\n# Draw a pentagon with a hole and a hexagon with a hole and a circle with a hole and a rectangle with a hole and a triangle with a hole\npentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole = plt.Polygon([[0.6, 0.3], [0.7, 0.1], [0.9, 0.3], [0.8, 0.5], [0.6, 0.5]], color='darkolivegreen')\nax.add_artist(pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole)\n\n# Draw a hexagon with a hole and a circle with a hole and a rectangle with a hole and a triangle with a hole and a star with a hole\nhexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.6], [0.8, 0.5], [0.6, 0.4], [0.5, 0.4]], color='darkseagreen')\nax.add_artist(hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole\ncircle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole = plt.Circle((0.2, 0.8), 0.2, color='darkslategray')\nax.add_artist(circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole\nrectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole = plt.Rectangle((0.4, 0.6), 0.2, 0.2, color='darkslateblue')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole\ntriangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole = plt.Polygon([[0.3, 0.9], [0.5, 0.7], [0.7, 0.9], [0.5, 0.5], [0.3, 0.7], [0.5, 0.9]], color='darkturquoise')\nax.add_artist(triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole and a rectangle with a hole\nstar_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole = plt.Polygon([[0.5, 0.9], [0.4, 0.7], [0.6, 0.7], [0."}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Global Sales', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Sales', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Country', color='white')\n\n# Define the data for the plot\nsales = [85.8, 78.7, 71.9, 64.1, 59.7, 50.8, 40.0, 36.1, 32.0, 20.0]\ncountries = ['Europe', 'China', 'India', 'Brazil']\n\n# Plot the data\nax.plot(sales, countries, marker='o', linestyle='-', color='orange')\n\n# Set the tick labels\nax.set_xticks(sales)\nax.set_yticks(countries)\n\n# Set the tick label colors\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the grid\nax.grid(True, color='gray')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the radar chart\ncategories = ['Extrusion', 'Injection', 'Blow Molding']\nvalues = [1, 2, 3]\nvalues2 = [4, 5, 6]\n\n# Create a radar chart\nax.plot(categories, values, label='Radar Chart 1')\nax.plot(categories, values2, label='Radar Chart 2')\n\n# Add a legend\nax.legend()\n\n# Set the title of the plot\nax.set_title('Radar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Define the data for each category\ncategories = ['Food Quality', 'Shows', 'Staff', 'Family Rides', 'Cleanliness', 'Wait Times', 'Ticket Price', 'Souvenirs', 'Parking']\nvalues = [0.2, 0.4, 0.6, 0.8, 1.0, 0.2, 0.4, 0.6, 0.8]\n\n# Define the colors for each category\ncolors = ['orange', 'purple']\n\n# Create a pie chart with the data\nwedges, texts, autotexts = ax.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a legend\nax.legend(wedges, categories, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Creativity')\n\n# Define the colors for each category\ncolors = ['yellow', 'lightgrey', 'darkgrey', 'green']\n\n# Define the labels for each category\nlabels = ['Chanel', 'Dior', 'Gucci']\n\n# Define the data for each category\ndata = [1, 2, 3]\n\n# Create a pie chart with the data\nwedges, texts, autotexts = ax.pie(data, colors=colors, labels=labels, autopct='%1.1f%%')\n\n# Set the aspect ratio of the plot to be equal\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the colors\ncolors = ['red', 'blue', 'green']\n\n# Define the data\ndata = [85.7, 66.4, 59.7]\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(data, colors=colors, autopct='%1.1f%%')\n\n# Set the title\nax.set_title('POPE')\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 6.0))\n\n# Define the data for the first subplot\ndata1 = [1, 3, 5, 7, 9]\nlabels1 = ['Versatility', 'Longevity', 'Sillage', 'Projection', 'Packaging']\ncolors1 = ['yellow', 'blue', 'green', 'red', 'purple']\n\n# Create a pie chart for the first subplot\nwedges1, texts1, autotexts1 = ax.pie(data1, labels=labels1, colors=colors1, autopct='%1.1f%%')\n\n# Define the data for the second subplot\ndata2 = [1, 3, 5, 7, 9]\nlabels2 = ['Versatility', 'Longevity', 'Sillage', 'Projection', 'Packaging']\ncolors2 = ['yellow', 'blue', 'green', 'red', 'purple']\n\n# Create a pie chart for the second subplot\nwedges2, texts2, autotexts2 = ax.pie(data2, labels=labels2, colors=colors2, autopct='%1.1f%%')\n\n# Define the data for the third subplot\ndata3 = [1, 3, 5, 7, 9]\nlabels3 = ['Versatility', 'Longevity', 'Sillage', 'Projection', 'Packaging']\ncolors3 = ['yellow', 'blue', 'green', 'red', 'purple']\n\n# Create a pie chart for the third subplot\nwedges3, texts3, autotexts3 = ax.pie(data3, labels=labels3, colors=colors3, autopct='%1.1f%%')\n\n# Add a title to the plot\nax.set_title('Perfume Brand Comparison')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Draw a circle with a radius of 1\ncircle = plt.Circle((0.5, 0.5), 0.5, color='lightblue')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.2 and a height of 0.4\nrectangle = plt.Rectangle((0.3, 0.3), 0.2, 0.4, color='red')\nax.add_artist(rectangle)\n\n# Draw a polygon with 6 sides\npolygon = plt.Polygon([[0.4, 0.4], [0.5, 0.6], [0.6, 0.4], [0.5, 0.2], [0.4, 0.4]], color='orange')\nax.add_artist(polygon)\n\n# Draw a line from (0.5, 0.5) to (0.7, 0.7)\nline = plt.Line2D([0.5, 0.7], [0.5, 0.7], color='black')\nax.add_artist(line)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('Loadings PC1 vs Loadings PC2')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 6.0))\n\n# Define the data for each subplot\ndata1 = [1, 2, 3, 4, 5]\ndata2 = [1, 2, 3, 4, 5]\ndata3 = [1, 2, 3, 4, 5]\n\n# Plot the data in each subplot\naxs[0].plot(data1)\naxs[1].plot(data2)\naxs[2].plot(data3)\n\n# Set the title of each subplot\naxs[0].set_title('Fidelity(D-train)')\naxs[1].set_title('Fidelity(D-test)')\naxs[2].set_title('Fidelity(D-train)')\n\n# Set the x-axis label of each subplot\naxs[0].set_xlabel('Query Error')\naxs[1].set_xlabel('Query Error')\naxs[2].set_xlabel('Query Error')\n\n# Set the y-axis label of each subplot\naxs[0].set_ylabel('Privacy')\naxs[1].set_ylabel('Privacy')\naxs[2].set_ylabel('Privacy')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Heterocycle formation')\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a grid\nax.grid(True)\n\n# Create a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Create a polygon\npolygon = plt.Polygon([[0.3, 0.3], [0.7, 0.3], [0.5, 0.7]], color='orange')\nax.add_artist(polygon)\n\n# Create a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='green')\nax.add_artist(line)\n\n# Create a scatter plot\nscatter = plt.scatter([0.1, 0.9], [0.1, 0.9], color='red')\nax.add_artist(scatter)\n\n# Create a bar chart\nbar = plt.bar([0.1, 0.9], [0.1, 0.9], color='purple')\nax.add_artist(bar)\n\n# Create a pie chart\npie = plt.pie([0.1, 0.9], colors=['cyan', 'magenta'])\nax.add_artist(pie)\n\n# Create a histogram\nhist = plt.hist([0.1, 0.9], bins=10, color='yellow')\nax.add_artist(hist)\n\n# Create a heatmap\nheatmap = plt.imshow([[0.1, 0.9], [0.1, 0.9]], cmap='hot', interpolation='nearest')\nax.add_artist(heatmap)\n\n# Create a contour plot\ncontour = plt.contourf([[0.1, 0.9], [0.1, 0.9]], cmap='coolwarm')\nax.add_artist(contour)\n\n# Create a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.sin(theta)\npolar = plt.polar(theta, r, color='brown')\nax.add_artist(polar)\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax3d.plot_surface(x, y, z, cmap='viridis')\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Set the z-axis label\nax.set_zlabel('Z-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the radar chart\ncategories = ['Model_A', 'Model_B', 'Model_C', 'Model_D', 'Model_E', 'Model_F']\nvalues = [0.07, 0.03, 0.03, 0.07, 0.03, 0.07]\ncolors = ['green', 'orange', 'blue', 'red', 'purple', 'cyan']\n\n# Plot the radar chart\nax.plot(categories, values, color=colors[0])\nax.fill(categories, values, color=colors[0], alpha=0.2)\n\n# Add a circle at the center of the radar chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='grey', alpha=0.5)\nax.add_artist(circle)\n\n# Set the title and labels\nax.set_title('Radar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('3D-bar')\n\n# Define the colors for the bars\ncolors = ['red', 'blue', 'orange', 'green', 'purple']\n\n# Define the labels for the bars\nlabels = ['rose', 'candlestick', 'line_num', 'radar', 'bubble', 'multi-axes', 'pie', 'funnel', 'area', 'fennel', 'box', 'treemap', 'heatmap', 'chart', 'bar_num', 'pie', 'fennel', 'area', 'pie', 'fennel', 'area']\n\n# Define the heights of the bars\nheights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n# Plot the bars\nax.bar(labels, heights, color=colors)\n\n# Set the x-axis label\nax.set_xlabel('3D-bar')\n\n# Set the y-axis label\nax.set_ylabel('line_num')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Imputation')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a rectangle for the long-horizon forecasting section\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red')\nax.add_patch(rect)\n\n# Create a pentagon for the anomaly detection section\ntheta = np.linspace(0, 2*np.pi, 6)\nx = 0.3 * np.cos(theta)\ny = 0.3 * np.sin(theta)\nax.fill(x + 0.5, y + 0.5, 'blue')\n\n# Create a triangle for the short-horizon forecasting section\ntheta = np.linspace(0, 2*np.pi, 4)\nx = 0.2 * np.cos(theta)\ny = 0.2 * np.sin(theta)\nax.fill(x + 0.5, y + 0.5, 'green')\n\n# Create a hexagon for the long-horizon forecasting section\ntheta = np.linspace(0, 2*np.pi, 7)\nx = 0.1 * np.cos(theta)\ny = 0.1 * np.sin(theta)\nax.fill(x + 0.5, y + 0.5, 'yellow')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the labels of the plot\nax.set_xlabel('Long-horizon Forecasting')\nax.set_ylabel('Short-horizon Forecasting')\n\n# Set the legend of the plot\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='MOMENT', markerfacecolor='r', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='GPT4TS', markerfacecolor='b', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='TimesNet', markerfacecolor='y', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Draw a circle with a radius of 10\ncircle = plt.Circle((0.5, 0.5), 0.5, color='black')\nax.add_artist(circle)\n\n# Define the data for the radar chart\ndata = [72.9, 66.3, 67.2, 42.9, 65.0, 49.3, 55.6, 43.1, 49.5, 55.6]\n\n# Define the colors for the radar chart\ncolors = ['red', 'blue']\n\n# Plot the radar chart\nax.plot(data, color=colors[0])\nax.fill(data, color=colors[1])\n\n# Set the title of the plot\nax.set_title('Radar Chart')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\n\"\"\"\nThis script generates a matplotlib plot with multiple subplots, each representing a different model and its corresponding data points.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the models and their corresponding data points\nmodels = [\n    \"llama-2-70-chat\", \"llama-2-70\", \"hf-falcon-40b\", \"text-bison@002\",\n    \"claude-2\", \"claude-1\", \"text-davinci-002\", \"text-davinci-003\", \"gpt-4\"\n]\ndata_points = [\n    [0.5, 1.5], [0.5, 1.5], [0.5, 1.5], [0.5, 1.5],\n    [0.5, 1.5], [0.5, 1.5], [0.5, 1.5], [0.5, 1.5], [0.5, 1.5]\n]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 5, figsize=(12, 4))\n\n# Plot the data points for each model\nfor i, ax in enumerate(axs):\n    ax.plot(data_points[i], 'o-', label=models[i])\n    ax.set_title(models[i])\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Model')\n    ax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the x-axis label\nax.set_xlabel('Pre-training GPU Hours')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy [%]')\n\n# Set the x-axis limits\nax.set_xlim(0, 4000)\n\n# Set the y-axis limits\nax.set_ylim(75, 90)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1000, 2000, 3000, 4000])\n\n# Set the y-axis ticks\nax.set_yticks([75, 77, 79, 81, 83, 85, 87, 89])\n\n# Draw a line graph for each model\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='green', label='iBOT')\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='blue', label='MEAE')\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='red', label='MoCo v3')\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='black', label='D2V2')\n\n# Draw a scatter plot for each model\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='green')\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='blue')\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='red')\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='black')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple', label='D2V2')\n\n# Draw a scatter plot for D2V2\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='purple')\n\n# Draw a line graph for D2V2-Renined\nax.plot([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange', label='D2V2-Renined')\n\n# Draw a scatter plot for D2V2-Renined\nax.scatter([0, 1000, 2000, 3000], [81, 83, 85, 87], color='orange')\n\n# Draw a line graph for D2V2\nax.plot([0, 1000, 2000, 3000], [81"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\nax.set_xticklabels(['10', '20', '30', '40', '50', '60'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9])\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Add a title to the plot\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.1, 0.1), 0.8, 0.8, facecolor='purple')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='blue')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, facecolor='green')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='yellow')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='orange')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.9, 0.9), 0.1, facecolor='red')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.7, 0.7), 0.4, 0.4, facecolor='pink')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.9, 0.9), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='cyan')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='magenta')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='lime')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='white')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gray')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='fuchsia')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='white')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gray')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='fuchsia')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='white')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gray')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='fuchsia')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='white')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gray')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='fuchsia')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='white')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gray')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='fuchsia')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='white')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gray')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='fuchsia')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='white')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gray')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='fuchsia')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='white')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gray')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='fuchsia')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='white')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.7, 0.7), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.4, 0.4, facecolor='gray')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Number of parameters')\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s=[100, 100, 100, 100], c=['gray', 'gray', 'gray', 'gray'])\n\n# Create a scatter plot with the data\nscatter = ax.scatter([203, 424, 1, 46], [50, 50, 50, 50], s"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Relative Error, u')\n\n# Set the x-axis label\nax.set_xlabel('Test Case Index, u')\n\n# Set the y-axis label\nax.set_ylabel('Average Relative Error, u')\n\n# Set the grid\nax.grid(True)\n\n# Define the test case index values\ntest_case_index = [1.0, 2.0, 3.0, 4.0, 5.0]\n\n# Define the average relative error values\naverage_relative_error = [0.01, 0.02, 0.03, 0.04, 0.05]\n\n# Define the colors for the markers\ncolors = ['blue', 'green', 'red']\n\n# Plot the data\nfor i in range(len(test_case_index)):\n    ax.plot(test_case_index[i], average_relative_error[i], marker='o', color=colors[i % len(colors)])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\naccuracies = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\nmajority_minority = ['majority', 'minority'] * 4\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(classes, accuracies, 'bo-')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=m, markerfacecolor=c, markersize=10)\n                  for m, c in zip(majority_minority, ['blue', 'red'])]\nax.legend(handles=legend_elements)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [50, 30, 20, 10, 0]\ny1 = [68, 66, 64, 62, 60]\ncolors1 = ['r', 'r', 'p', 'o', 'p']\nlabels1 = ['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'DefInt']\n\n# Data for the second plot\nx2 = [50, 30, 20, 10, 0]\ny2 = [68, 66, 64, 62, 60]\ncolors2 = ['b', 'r', 'o', 'p', 'r']\nlabels2 = ['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'DefInt']\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting the first graph\nfor i in range(len(x1)):\n    ax1.plot([x1[i], x1[i]], [y1[i], y1[i]], color=colors1[i])\n    ax1.text(x1[i], y1[i], labels1[i], color=colors1[i])\n\n# Plotting the second graph\nfor i in range(len(x2)):\n    ax2.plot([x2[i], x2[i]], [y2[i], y2[i]], color=colors2[i])\n    ax2.text(x2[i], y2[i], labels2[i], color=colors2[i])\n\n# Setting the titles and labels\nax1.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\nax2.set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\nax1.set_xlabel('Token cost($)')\nax2.set_xlabel('TFLOPS')\nax1.set_ylabel('Accuracy(%)')\nax2.set_ylabel('Accuracy(%)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Energy Source')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny = [10, 20, 30, 40, 50, 60, 70, 80]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-30, 10)\nax.set_ylim(-10, 30)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('\u0394 Robust Accuracy (%)')\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Set the title of the plot\nax.set_title('Scatter Plot of \u0394 Robust Accuracy vs \u0394 RNFR')\n\n# Set the tick labels\nax.set_xticks([-30, -20, -10, 0, 10])\nax.set_yticks([0, 10, 20, 30])\n\n# Set the tick label colors\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='red')\n\n# Set the tick label font sizes\nax.tick_params(axis='x', labelsize=14)\nax.tick_params(axis='y', labelsize=14)\n\n# Set the tick label rotation\nax.tick_params(axis='x', rotation=45)\nax.tick_params(axis='y', rotation=45)\n\n# Set the tick label font weights\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font styles\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font families\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=16)\nax.tick_params(axis='y', which='major', labelsize=16)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=12)\nax.tick_params(axis='y', which='minor', labelsize=12)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=18)\nax.tick_params(axis='y', which='major', labelsize=18)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=14)\nax.tick_params(axis='y', which='minor', labelsize=14)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=20)\nax.tick_params(axis='y', which='major', labelsize=20)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=16)\nax.tick_params(axis='y', which='minor', labelsize=16)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=22)\nax.tick_params(axis='y', which='major', labelsize=22)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=18)\nax.tick_params(axis='y', which='minor', labelsize=18)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=24)\nax.tick_params(axis='y', which='major', labelsize=24)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=20)\nax.tick_params(axis='y', which='minor', labelsize=20)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=26)\nax.tick_params(axis='y', which='major', labelsize=26)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=22)\nax.tick_params(axis='y', which='minor', labelsize=22)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=28)\nax.tick_params(axis='y', which='major', labelsize=28)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=24)\nax.tick_params(axis='y', which='minor', labelsize=24)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=30)\nax.tick_params(axis='y', which='major', labelsize=30)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=26)\nax.tick_params(axis='y', which='minor', labelsize=26)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=32)\nax.tick_params(axis='y', which='major', labelsize=32)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=28)\nax.tick_params(axis='y', which='minor', labelsize=28)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=34)\nax.tick_params(axis='y', which='major', labelsize=34)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=30)\nax.tick_params(axis='y', which='minor', labelsize=30)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x', which='major', labelweight='bold')\nax.tick_params(axis='y', which='major', labelweight='bold')\n\n# Set the tick label font weights for the minor ticks\nax.tick_params(axis='x', which='minor', labelweight='normal')\nax.tick_params(axis='y', which='minor', labelweight='normal')\n\n# Set the tick label font styles for the major ticks\nax.tick_params(axis='x', which='major', labelstyle='italic')\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the tick label font styles for the minor ticks\nax.tick_params(axis='x', which='minor', labelstyle='normal')\nax.tick_params(axis='y', which='minor', labelstyle='normal')\n\n# Set the tick label font families for the major ticks\nax.tick_params(axis='x', which='major', labelfamily='serif')\nax.tick_params(axis='y', which='major', labelfamily='sans-serif')\n\n# Set the tick label font families for the minor ticks\nax.tick_params(axis='x', which='minor', labelfamily='monospace')\nax.tick_params(axis='y', which='minor', labelfamily='cursive')\n\n# Set the tick label font sizes for the major ticks\nax.tick_params(axis='x', which='major', labelsize=36)\nax.tick_params(axis='y', which='major', labelsize=36)\n\n# Set the tick label font sizes for the minor ticks\nax.tick_params(axis='x', which='minor', labelsize=32)\nax.tick_params(axis='y', which='minor', labelsize=32)\n\n# Set the tick label font weights for the major ticks\nax.tick_params(axis='x"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the grid\nax.grid(True)\n\n# Define the data\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny_day1 = [95, 90, 85, 80, 75, 70, 65, 60]\ny_day2 = [105, 100, 95, 90, 85, 80, 75, 70]\n\n# Plot the data\nax.plot(x, y_day1, 'bo', label='Day 1')\nax.plot(x, y_day2, 'ro', label='Day 2')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(2, 16)\n\n# Set the y-axis limits\nax.set_ylim(80, 110)\n\n# Draw a grid\nax.grid(True)\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny = [95, 90, 85, 80, 75, 70, 65, 60]\n\n# Plot the data points\nax.plot(x, y, 'ro')\n\n# Set the title of the plot\nax.set_title('Sample Plot')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Energy Production Trends')\n\n# Define the labels for the legend\nlabels = ['Solar Energy', 'Wind Energy', 'Hydropower']\n\n# Define the colors for the legend\ncolors = ['blue', 'red', 'gray']\n\n# Define the data for the plot\nx = [175, 200, 225, 250, 275, 300]\ny = [140, 160, 180, 200, 220, 240]\n\n# Plot the data\nax.plot(x, y, color='black')\n\n# Add a legend to the plot\nax.legend(labels, loc='upper left')\n\n# Set the x-axis label\nax.set_xlabel('Installed Capacity (GW)')\n\n# Set the y-axis label\nax.set_ylabel('Energy Output (TWh)')\n\n# Set the limits of the x-axis\nax.set_xlim(175, 300)\n\n# Set the limits of the y-axis\nax.set_ylim(140, 240)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Define the data points\nx = [10, 20, 30, 40, 50, 60, 70, 80, 90]\ny = [20, 30, 40, 50, 60, 70, 80, 90, 100]\ncolors = ['green', 'pink', 'blue', 'purple', 'orange', 'cyan', 'magenta', 'gray', 'yellow']\n\n# Create a scatter plot\nscatter = ax.scatter(x, y, c=colors)\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(scatter)\ncbar.set_label('Colorbar')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LibriCSS vs Additional Data 1\nlibri_wer = [0.9, 0.8, 0.8, 0.8, 0.8, 0.8, 0.9]\nlibri_microphones = [2, 3, 4, 5, 6, 7, 8]\n\n# Data for AMI vs Additional Data 2\nami_wer = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\nami_microphones = [2, 3, 4, 5, 6, 7, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot LibriCSS vs Additional Data 1\nax.plot(libri_microphones, libri_wer, 'o-', label='LibriCSS vs Additional Data 1')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('LibriCSS vs Additional Data 1')\n\n# Plot AMI vs Additional Data 2\nax2 = ax.twinx()\nax2.plot(ami_microphones, ami_wer, 's-', color='r', label='AMI vs Additional Data 2')\nax2.set_ylabel('WER (%)')\n\n# Add legends\nfig.legend(loc='upper left')\nfig.legend(loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Models')\n\n# Define the data points\ndata = {\n    'llama-2-70-chat': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'llama-2-70': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'hfalcon-40b': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'text-bison@002': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'claude-2': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'claude-1': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'text-davinci-002': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'text-davinci-003': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'gpt-4': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0]\n}\n\n# Plot the data\nfor model, values in data.items():\n    ax.plot(values, [model] * len(values), 'o-', label=model)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nax.set_xticklabels(['Mixtal-8x7B', 'MPT-7B', 'Llama2-70B', 'Falcon-40B', 'Davinci-003', 'Davinci-002', 'Claude-2', 'Claude-1'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 50, 100, 150, 200])\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left']."}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Scatter Plot - Deepskyblue\nx = np.array([70, 80, 90])\ny = np.array([72.5, 75, 77.5])\naxs[0].scatter(x, y, color='blue')\naxs[0].set_title('Scatter Plot - deepskyblue')\naxs[0].set_xlabel('X Values')\naxs[0].set_ylabel('Y Values')\naxs[0].set_ylim(30, 80)\naxs[0].set_xlim(70, 90)\n\n# Scatter Plot - Magenta\nx = np.array([70, 80, 90])\ny = np.array([75, 77.5, 80])\naxs[1].scatter(x, y, color='magenta')\naxs[1].set_title('Scatter Plot - magenta')\naxs[1].set_xlabel('X Values')\naxs[1].set_ylabel('Y Values')\naxs[1].set_ylim(30, 80)\naxs[1].set_xlim(70, 90)\n\n# Scatter Plot - Limegreen\nx = np.array([70, 80, 90])\ny = np.array([77.5, 80, 82.5])\naxs[2].scatter(x, y, color='limegreen')\naxs[2].set_title('Scatter Plot - limegreen')\naxs[2].set_xlabel('X Values')\naxs[2].set_ylabel('Y Values')\naxs[2].set_ylim(30, 80)\naxs[2].set_xlim(70, 90)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny2 = [45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny3 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot 1\naxs[0].plot(x, y1, 'r-')\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].set_xlabel('Age on MSCOCO (%)')\naxs[0].set_ylabel('Average Precision on HumanArt (%)')\naxs[0].scatter([70, 72, 74, 76, 78, 80, 82, 84, 86, 88], [50, 45, 40, 35, 30, 25, 20, 15, 10, 5], color='purple')\n\n# Plot 2\naxs[1].plot(x, y2, 'b-')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].set_xlabel('Age on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on HumanArt (%)')\naxs[1].scatter([70, 72, 74, 76, 78, 80, 82, 84, 86, 88], [45, 40, 35, 30, 25, 20, 15, 10, 5, 0], color='purple')\n\n# Plot 3\naxs[2].plot(x, y3, 'g-')\naxs[2].set_title('VLPose Performance')\naxs[2].set_xlabel('Age on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on HumanArt (%)')\naxs[2].scatter([70, 72, 74, 76, 78, 80, 82, 84, 86, 88], [50, 45, 40, 35, 30, 25, 20, 15, 10, 5], color='purple')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90]\ncolors = ['pink', 'purple', 'orange', 'green', 'red', 'blue', 'gray', 'brown', 'cyan', 'magenta', 'yellow', 'lime', 'olive', 'navy', 'silver', 'gold', 'teal', 'maroon', 'aqua', 'fuchsia', 'white', 'black', 'indigo', 'violet', 'coral', 'plum', 'tan', 'lavender', 'azure', 'sienna', 'chocolate', 'peru', 'beige', 'wheat', 'tan', 'saddlebrown', 'rosybrown', 'burlywood', 'darkkhaki', 'palegoldenrod', 'lightyellow', 'lightgoldenrodyellow', 'khaki', 'darkgoldenrod', 'goldenrod', 'darkolivegreen', 'olivedrab', 'darkseagreen', 'mediumseagreen', 'seagreen', 'seashell', 'mintcream', 'azure', 'lavenderblush', 'powderblue', 'lightblue', 'skyblue', 'lightskyblue', 'deepskyblue', 'dodgerblue', 'cornflowerblue', 'royalblue', 'blue', 'navy', 'darkblue', 'midnightblue', 'slateblue', 'slategray', 'lightslategray', 'darkslategray', 'gray', 'dimgray', 'grey', 'darkgray', 'silver', 'lightgray', 'gainsboro', 'whitesmoke', 'snow', 'floralwhite', 'oldlace', 'linen', 'antiquewhite', 'beige', 'bisque', 'blanchedalmond', 'cornsilk', 'ivory', 'lemonchiffon', 'lightgoldenrodyellow', 'lightyellow', 'moccasin', 'navajowhite', 'oldlace', 'papayawhip', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'blan"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Define the colors for the circles\ncolors = ['red', 'green', 'blue', 'yellow', 'orange', 'purple']\n\n# Define the number of circles\nnum_circles = 100\n\n# Define the radius of the circles\nradius = 0.05\n\n# Define the x and y coordinates of the circles\nx = np.random.rand(num_circles)\ny = np.random.rand(num_circles)\n\n# Plot the circles\nfor i in range(num_circles):\n    circle = plt.Circle((x[i], y[i]), radius, color=colors[i % len(colors)])\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Set the x-axis label\nax.set_xlabel('Bit per pixel (BPP)')\n\n# Set the y-axis label\nax.set_ylabel('WRMSE')\n\n# Define the data points\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny = [800, 700, 600, 500, 400, 300, 200, 100]\n\n# Define the colors for each point\ncolors = ['blue', 'cyan', 'red', 'green', 'purple', 'orange', 'pink', 'yellow']\n\n# Plot the data points with different colors\nfor i in range(len(x)):\n    ax.scatter(x[i], y[i], color=colors[i])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for each category\ndata_daytime_sunny = [[1, 2], [3, 4], [5, 6]]\ndata_night_rainy = [[7, 8], [9, 10], [11, 12]]\ndata_pgst = [[13, 14], [15, 16], [17, 18]]\n\n# Plot the data\nax.scatter(data_daytime_sunny[0], data_daytime_sunny[1], color='orange', label='Daytime Sunny')\nax.scatter(data_night_rainy[0], data_night_rainy[1], color='blue', label='Night Rainy')\nax.scatter(data_pgst[0], data_pgst[1], color='green', label='PGST')\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('Weather Data')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Set the x-axis label\nax.set_xlabel('Number of parameters (M)')\n\n# Set the y-axis label\nax.set_ylabel('NMAE (%)')\n\n# Define the data points\nx = [0.6, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\ny = [10, 15, 20, 25, 30, 35, 40]\n\n# Define the colors for each point\ncolors = ['purple', 'gray', 'red', 'brown', 'purple', 'green', 'red']\n\n# Plot the data points\nfor i in range(len(x)):\n    ax.plot(x[i], y[i], 'o', color=colors[i])\n\n# Add a vertical line at x=3\nax.axvline(x=3, color='black', linestyle='--')\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linestyle='--')\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((0.5, 18), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((2.5, 22), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((4.5, 26), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((6.5, 30), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((8.5, 34), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((10.5, 38), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((12.5, 42), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((14.5, 46), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((16.5, 50), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((18.5, 54), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((20.5, 58), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((22.5, 62), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((24.5, 66), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((26.5, 70), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((28.5, 74), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((30.5, 78), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((32.5, 82), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((34.5, 86), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((36.5, 90), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((38.5, 94), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((40.5, 98), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((42.5, 102), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((44.5, 106), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((46.5, 110), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((48.5, 114), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((50.5, 118), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((52.5, 122), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((54.5, 126), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((56.5, 130), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((58.5, 134), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((60.5, 138), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((62.5, 142), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((64.5, 146), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((66.5, 150), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((68.5, 154), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((70.5, 158), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((72.5, 162), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((74.5, 166), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((76.5, 170), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((78.5, 174), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((80.5, 178), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((82.5, 182), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((84.5, 186), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((86.5, 190), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((88.5, 194), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((90.5, 198), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((92.5, 202), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((94.5, 206), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((96.5, 210), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((98.5, 214), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((100.5, 218), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((102.5, 222), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((104.5, 226), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((106.5, 230), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((108.5, 234), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((110.5, 238), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((112.5, 242), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((114.5, 246), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((116.5, 250), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((118.5, 254), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((120.5, 258), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((122.5, 262), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((124.5, 266), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((126.5, 270), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((128.5, 274), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((130.5, 278), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((132.5, 282), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((134.5, 286), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((136.5, 290), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((138.5, 294), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((140.5, 298), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((142.5, 302), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((144.5, 306), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((146.5, 310), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((148.5, 314), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((150.5, 318), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((152.5, 322), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((154.5, 326), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((156.5, 330), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((158.5, 334), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((160.5, 338), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((162.5, 342), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((164.5, 346), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((166.5, 350), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((168.5, 354), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((170.5, 358), 2, 2, fill=False, edgecolor='black', linestyle='--'))\n\n# Add a rectangle with a dashed border\nax.add_patch(plt.Rectangle((172.5"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the labels for the x and y axes\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\n\n# Set the limits for the x and y axes\nax.set_xlim(-0.4, 0.4)\nax.set_ylim(-0.2, 0.4)\n\n# Define the colors for each category\ncolors = ['blue', 'pink', 'yellow', 'green', 'grey']\n\n# Plot the data points with different colors\nfor i, color in enumerate(colors):\n    ax.scatter([i]*100, [i]*100, color=color)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Set the title of the plot\nax.set_title('DE')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the grid\nax.grid(True)\n\n# Define the colors for the scatter plot\ncolors = ['green', 'green', 'cyan', 'orange', 'red']\n\n# Define the labels for the scatter plot\nlabels = ['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer']\n\n# Define the data for the scatter plot\ndata = [[0.6, 0.7, 0.8, 0.9, 1.0], [0.11, 0.12, 0.11, 0.10, 0.10]]\n\n# Create a scatter plot\nscatter = ax.scatter(data[0], data[1], c=colors, label=labels)\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the grid\nax.grid(True)\n\n# Define the colors for the scatter plot\ncolors = ['green', 'green', 'cyan', 'orange', 'red']\n\n# Define the labels for the scatter plot\nlabels = ['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer']\n\n# Define the data for the scatter plot\ndata = [[0.6, 0.7, 0.8, 0.9, 1.0], [0.55, 0.55, 0.55, 0.55, 0.55]]\n\n# Create a scatter plot\nscatter = ax.scatter(data[0], data[1], c=colors, label=labels)\n\n# Add a legend\nax.legend()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a rectangle for each website\nrect1 = plt.Rectangle((0.1, 0.7), 0.3, 0.2, color='skyblue')\nrect2 = plt.Rectangle((0.5, 0.7), 0.3, 0.2, color='orange')\nrect3 = plt.Rectangle((0.1, 0.4), 0.3, 0.2, color='lightgreen')\nrect4 = plt.Rectangle((0.5, 0.4), 0.3, 0.2, color='lightblue')\nrect5 = plt.Rectangle((0.1, 0.1), 0.3, 0.2, color='lightcoral')\nrect6 = plt.Rectangle((0.5, 0.1), 0.3, 0.2, color='lightyellow')\n\n# Add rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\nax.add_patch(rect6)\n\n# Add text to the rectangles\nax.text(0.2, 0.8, 'physicsforums.com\\n18.42%', fontsize=12, ha='center', va='center')\nax.text(0.6, 0.8, 'gmatclub.com\\n6.26%', fontsize=12, ha='center', va='center')\nax.text(0.2, 0.5, 'stackexchange.com\\n30.6%', fontsize=12, ha='center', va='center')\nax.text(0.6, 0.5, 'mathhelpboards.com\\n6.15%', fontsize=12, ha='center', va='center')\nax.text(0.2, 0.2, 'mathoverflow.net\\n10.91%', fontsize=12, ha='center', va='center')\nax.text(0.6, 0.2, 'proofwiki.org\\n8.54%', fontsize=12, ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define the colors for each rectangle\ncolors = ['purple', 'pink', 'orange', 'brown', 'grey']\n\n# Define the sizes of each rectangle\nsizes = [10, 20, 27, 12, 23]\n\n# Define the labels for each rectangle\nlabels = ['Java 10%', 'Python 20%', 'Javascript 27%', 'Other 8%', 'C++ 23%']\n\n# Create a bar chart with the defined sizes and colors\nax.bar(labels, sizes, color=colors)\n\n# Set the title of the chart\nax.set_title('Programming Language Usage')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for Adidas\nrect1 = plt.Rectangle((0.1, 0.7), 0.4, 0.2, color='lightgreen')\nax.add_patch(rect1)\n\n# Create a rectangle for Under Armour\nrect2 = plt.Rectangle((0.6, 0.7), 0.4, 0.2, color='orange')\nax.add_patch(rect2)\n\n# Create a rectangle for Nike\nrect3 = plt.Rectangle((0.1, 0.4), 0.4, 0.2, color='skyblue')\nax.add_patch(rect3)\n\n# Create a rectangle for Reebok\nrect4 = plt.Rectangle((0.6, 0.4), 0.4, 0.2, color='yellow')\nax.add_patch(rect4)\n\n# Create a rectangle for Puma\nrect5 = plt.Rectangle((0.1, 0.1), 0.4, 0.2, color='lightgreen')\nax.add_patch(rect5)\n\n# Create a rectangle for New Balance\nrect6 = plt.Rectangle((0.6, 0.1), 0.4, 0.2, color='orange')\nax.add_patch(rect6)\n\n# Set the title of the plot\nax.set_title('Sports Brand Market Share', fontsize=16)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Brands', fontsize=14)\nax.set_ylabel('Market Share (%)', fontsize=14)\n\n# Set the tick labels\nax.set_xticks([0.25, 0.75])\nax.set_yticks([0.25, 0.5, 0.75])\n\n# Set the tick label colors\nax.tick_params(axis='x', colors='red')\nax.tick_params(axis='y', colors='blue')\n\n# Set the tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both',"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#FFD700')\n\n# Create a bar chart with the data\nbars = ax.bar(['A', 'B', 'C'], [50, 15, 20], color=['#808080', '#ADD8E6', '#90EE90'])\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nsizes = [15, 18, 10, 12, 25, 10, 20]\nlabels = ['European', 'Australian', 'South American', 'African', 'Asian', 'North American']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2 vs Llama2 (In-Chat)')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL)')\n\n# Set the x-axis limits\nax.set_xlim(1, 5)\n\n# Set the y-axis limits\nax.set_ylim(1, 7)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-axis ticks\nax.set_yticks([1, 2, 3, 4, 5, 6, 7])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7'])\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='orange')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('orange')\n\n# Set the color"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Scores with and without Memory')\n\n# Set the x-axis label\nax.set_xlabel('Efficiency')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([0.25, 0.75])\n\n# Set the x-tick labels\nax.set_xticklabels(['Without Memory', 'With Memory'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nefficiency = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ncomfort = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\nsafety = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])\n\n# Plot the data\nax.plot(efficiency, 'r-', label='Without Memory')\nax.plot(comfort, 'b-', label='With Memory')\nax.plot(safety, 'g-', label='Safety')\n\n# Set the title and labels\nax.set_title('Car Performance Metrics')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the colorbar\ncbar = fig.colorbar(ax.imshow([[0.5, 0.7], [0.3, 0.9]], cmap='Greens'))\n\n# Set the colorbar label\ncbar.set_label('GPT-4V(Version)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3])\nax.set_xticklabels(['jTrans', 'PalmTree', 'CLAP'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Add stars at specific points\nstars = [(2, 0.5), (4, 0.3), (6, 0.7), (8, 0.2)]\nfor star in stars:\n    ax.plot(star[0], star[1], 'y*')\n\n# Set the title and labels\nax.set_title('Sine Wave with Stars')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data for the first plot\nx1 = np.linspace(0, 10, 100)\ny1 = np.sin(x1)\n\n# Define the data for the second plot\nx2 = np.linspace(0, 10, 100)\ny2 = np.cos(x2)\n\n# Plot the first plot\nax.plot(x1, y1, 'r-')\n\n# Plot the second plot\nax.plot(x2, y2, 'b-')\n\n# Set the title of the plot\nax.set_title('Sine and Cosine Waves')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Amplitude')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [2, 4, 6, 8, 10]\ny1 = [163, 201, 176, 159, 97]\ncolors1 = ['skyblue', 'lightblue', 'skyblue', 'lightblue', 'skyblue']\nlabels1 = ['Group l0', 'AGIS']\n\n# Data for the second graph\nx2 = [2, 4, 6, 8, 10]\ny2 = [163, 201, 176, 159, 97]\ncolors2 = ['skyblue', 'lightblue', 'skyblue', 'lightblue', 'skyblue']\nlabels2 = ['Group l0', 'AGIS']\n\nfig, axs = plt.subplots(2, 1, figsize=(8.0, 8.0))\n\n# First graph\naxs[0].bar(x1, y1, color=colors1)\naxs[0].set_title('% Decrease in Test MSE vs. FLAM-GL')\naxs[0].set_xlabel('Number of Features')\naxs[0].set_ylabel('% Decrease')\naxs[0].legend(labels1)\n\n# Second graph\naxs[1].bar(x2, y2, color=colors2)\naxs[1].set_title('% Decrease in Test MSE vs. EBM-RS')\naxs[1].set_xlabel('Number of Features')\naxs[1].set_ylabel('% Decrease')\naxs[1].legend(labels2)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = np.array([0.88, 0.85, 0.79, 0.67, 0.57])\ny = np.array([0.18, 0.19, 0.19, 0.16, 0.16])\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Decimated Sampling Rate')\nax.set_xlabel('Decimated Sampling Rate')\nax.set_ylabel('KCC')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 8.0))\n\n# Set the title for each subplot\naxes[0, 0].set_title('Distribution of Grades: Class 1')\naxes[0, 1].set_title('Distribution of Grades: Class 2')\naxes[1, 0].set_title('Distribution of Grades: Class 3')\naxes[1, 1].set_title('Distribution of Grades: Class 4')\n\n# Create a color map\ncmap = plt.get_cmap('Blues')\n\n# Create a bar chart for each subplot\nfor ax in axes.flat:\n    ax.bar(['Boys', 'Girls'], [np.random.randint(50, 100), np.random.randint(50, 100)], color=cmap(np.random.rand()))\n    ax.set_ylim([0, 100])\n    ax.set_xlabel('Gender')\n    ax.set_ylabel('Grades')\n\n# Display the plot\nplt.show()\n```"}
